{"docstring": "/**\n * Get the Presenter for a given {@link MvpView} if exists or <code>null</code>\n *\n * @param viewId The mosby internal view id\n * @param <P> The type tof the {@link MvpPresenter}\n * @return The Presenter for the given view id or <code>null</code>\n */\n", "func_signal": "@Nullable public <P> P getPresenter(@NonNull String viewId)", "code": "{\n  PresenterHolder holder = presenterMap.get(viewId);\n  return holder == null ? null : (P) holder.presenter;\n}", "path": "mosby/presentermanager/src/main/java/com/hannesdorfmann/mosby3/ActivityScopedCache.java", "commit_date": "2017-10-03 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Remove a product to the shopping cart\n */\n", "func_signal": "public Completable removeProduct(Product product)", "code": "{\n  List<Product> updatedShoppingCart = new ArrayList<>();\n  updatedShoppingCart.addAll(itemsInShoppingCart.getValue());\n  updatedShoppingCart.remove(product);\n  itemsInShoppingCart.onNext(updatedShoppingCart);\n  return Completable.complete();\n}", "path": "mosby/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/businesslogic/ShoppingCart.java", "commit_date": "2017-01-04 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Get the mvp delegate. This is internally used for creating presenter, attaching and detaching\n * view from presenter etc.\n *\n * <p><b>Please note that only one instance of mvp delegate should be used per android.view.View\n * instance</b>.\n * </p>\n *\n * <p>\n * Only override this method if you really know what you are doing.\n * </p>\n *\n * @return {@link ViewGroupMviDelegate}\n */\n", "func_signal": "@NonNull protected ViewGroupMviDelegate<V, P> getMvpDelegate()", "code": "{\n  if (mvpDelegate == null) {\n    mvpDelegate = new ViewGroupMviDelegateImpl<V, P>(this, this, true);\n  }\n\n  return mvpDelegate;\n}", "path": "mosby/mvi/src/main/java/com/hannesdorfmann/mosby3/mvi/layout/MviLinearLayout.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Removes the Presenter (and ViewState) from the internal storage\n *\n * @param viewId The msoby internal view id\n */\n", "func_signal": "public void remove(@NonNull String viewId)", "code": "{\n\n  if (viewId == null) {\n    throw new NullPointerException(\"View Id is null\");\n  }\n\n  presenterMap.remove(viewId);\n}", "path": "mosby/presentermanager/src/main/java/com/hannesdorfmann/mosby3/ActivityScopedCache.java", "commit_date": "2017-10-03 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Actually subscribes the view as consumer to the internally view relay.\n *\n * @param view The mvp view\n */\n", "func_signal": "@MainThread\nprivate void subscribeViewStateConsumerActually(@NonNull final V view)", "code": "{\n\n    if (view == null) {\n        throw new NullPointerException(\"View is null\");\n    }\n\n    if (viewStateConsumer == null) {\n        throw new NullPointerException(ViewStateConsumer.class.getSimpleName()\n                + \" is null. This is a Mosby internal bug. Please file an issue at https://github.com/sockeqwe/mosby/issues\");\n    }\n\n    viewRelayConsumerDisposable = viewStateBehaviorSubject.subscribe(new Consumer<VS>() {\n        @Override\n        public void accept(VS vs) throws Exception {\n            viewStateConsumer.accept(view, vs);\n        }\n    });\n}", "path": "mosby/mvi-common/src/main/java/com/hannesdorfmann/mosby3/mvi/MviBasePresenter.java", "commit_date": "2018-04-08 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Creates a new Presenter with the initial view state\n *\n * @param initialViewState initial view state (must be not null)\n */\n", "func_signal": "public MviBasePresenter(@NonNull VS initialViewState)", "code": "{\n    if (initialViewState == null) {\n        throw new NullPointerException(\"Initial ViewState == null\");\n    }\n\n    viewStateBehaviorSubject = BehaviorSubject.createDefault(initialViewState);\n    reset();\n}", "path": "mosby/mvi-common/src/main/java/com/hannesdorfmann/mosby3/mvi/MviBasePresenter.java", "commit_date": "2018-04-08 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Put the presenter in the internal cache\n *\n * @param viewId The mosby internal View id of the {@link MvpView} which the presenter is\n * associated to.\n * @param presenter The Presenter\n */\n", "func_signal": "public void putPresenter(@NonNull String viewId,\n    @NonNull MvpPresenter<? extends MvpView> presenter)", "code": "{\n\n  if (viewId == null) {\n    throw new NullPointerException(\"ViewId is null\");\n  }\n\n  if (presenter == null) {\n    throw new NullPointerException(\"Presenter is null\");\n  }\n\n  PresenterHolder presenterHolder = presenterMap.get(viewId);\n  if (presenterHolder == null) {\n    presenterHolder = new PresenterHolder();\n    presenterHolder.presenter = presenter;\n    presenterMap.put(viewId, presenterHolder);\n  } else {\n    presenterHolder.presenter = presenter;\n  }\n}", "path": "mosby/presentermanager/src/main/java/com/hannesdorfmann/mosby3/ActivityScopedCache.java", "commit_date": "2017-10-03 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * The default behaviour is to display a toast message as light error (i.e. pull-to-refresh\n * error).\n * Override this method if you want to display the light error in another way (like crouton).\n */\n", "func_signal": "protected void showLightError(String msg)", "code": "{\n  if (getActivity() != null) {\n    Toast.makeText(getActivity(), msg, Toast.LENGTH_SHORT).show();\n  }\n}", "path": "mosby/mvp-lce/src/main/java/com/hannesdorfmann/mosby3/mvp/lce/MvpLceDialogFragment.java", "commit_date": "2018-04-16 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * @param fragment The Fragment\n * @param delegateCallback the DelegateCallback\n * @param keepPresenterDuringScreenOrientationChange true, if the presenter should be kept during\n * screen orientation\n * changes. Otherwise, false\n * @param keepPresenterOnBackstack true, if the presenter should be kept when the fragment is\n * destroyed because it is put on the backstack, Otherwise false\n */\n", "func_signal": "public FragmentMvpDelegateImpl(@NonNull Fragment fragment,\n    @NonNull MvpDelegateCallback<V, P> delegateCallback,\n    boolean keepPresenterDuringScreenOrientationChange, boolean keepPresenterOnBackstack)", "code": "{\n  if (delegateCallback == null) {\n    throw new NullPointerException(\"MvpDelegateCallback is null!\");\n  }\n\n  if (fragment == null) {\n    throw new NullPointerException(\"Fragment is null!\");\n  }\n\n  if (!keepPresenterDuringScreenOrientationChange && keepPresenterOnBackstack) {\n    throw new IllegalArgumentException(\"It is not possible to keep the presenter on backstack, \"\n        + \"but NOT keep presenter through screen orientation changes. Keep presenter on backstack also \"\n        + \"requires keep presenter through screen orientation changes to be enabled\");\n  }\n\n  this.fragment = fragment;\n  this.delegateCallback = delegateCallback;\n  this.keepPresenterInstanceDuringScreenOrientationChanges =\n      keepPresenterDuringScreenOrientationChange;\n  this.keepPresenterOnBackstack = keepPresenterOnBackstack;\n}", "path": "mosby/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpDelegateImpl.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Returns the Account observable\n */\n", "func_signal": "@Override public Observable<Account> doLogin(AuthCredentials credentials)", "code": "{\n\n  return Observable.just(credentials).flatMap(new Func1<AuthCredentials, Observable<Account>>() {\n    @Override public Observable<Account> call(AuthCredentials credentials) {\n\n      try {\n        // Simulate network delay\n        Thread.sleep(3000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n\n      if (credentials.getUsername().equals(\"ted\") && credentials.getPassword().equals(\"robin\")) {\n        currentAccount = new Account();\n        return Observable.just(currentAccount);\n      }\n\n      return Observable.error(new LoginException());\n    }\n  });\n}", "path": "mosby/sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/model/account/DefaultAccountManager.java", "commit_date": "2016-12-07 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * @return true if a fragment has been removed, otherwise false\n */\n", "func_signal": "private boolean removeDetailsFragment()", "code": "{\n  Fragment detailsFragment = findDetailsFragment();\n  if (detailsFragment != null) {\n    rightPane.setVisibility(View.GONE);\n    getSupportFragmentManager().beginTransaction().remove(detailsFragment).commit();\n    return true;\n  }\n\n  return false;\n}", "path": "mosby/sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/MainActivity.java", "commit_date": "2017-03-08 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Adds a product to the shopping cart\n */\n", "func_signal": "public Completable addProduct(Product product)", "code": "{\n  List<Product> updatedShoppingCart = new ArrayList<>();\n  updatedShoppingCart.addAll(itemsInShoppingCart.getValue());\n  updatedShoppingCart.add(product);\n  itemsInShoppingCart.onNext(updatedShoppingCart);\n  return Completable.complete();\n}", "path": "mosby/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/businesslogic/ShoppingCart.java", "commit_date": "2017-01-04 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * This method creates a decorator around the original view's \"intent\". This method ensures that\n * no memory leak by using a {@link ViewIntentBinder} is caused by the subscription to the original\n * view's intent when the view gets detached.\n * <p>\n * Typically, this method is used in {@link #bindIntents()} like this:\n * <pre><code>\n *   Observable<Boolean> loadIntent = intent(new ViewIntentBinder() {\n *      @Override\n *      public Observable<Boolean> bind(MyView view){\n *         return view.loadIntent();\n *      }\n *   }\n * </code></pre>\n *\n * @param binder The {@link ViewIntentBinder} from where the the real view's intent will be\n *               bound\n * @param <I>    The type of the intent\n * @return The decorated intent Observable emitting the intent\n */\n", "func_signal": "@MainThread\nprotected <I> Observable<I> intent(ViewIntentBinder<V, I> binder)", "code": "{\n    Subject<I> intentRelay = UnicastSubject.create();\n    intentRelaysBinders.add(new IntentRelayBinderPair<I>(intentRelay, binder));\n    return intentRelay;\n}", "path": "mosby/mvi-common/src/main/java/com/hannesdorfmann/mosby3/mvi/MviBasePresenter.java", "commit_date": "2018-04-08 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Generates the unique (mosby internal) view id and calls {@link\n * MvpDelegateCallback#createPresenter()}\n * to create a new presenter instance\n *\n * @return The new created presenter instance\n */\n", "func_signal": "private P createViewIdAndPresenter()", "code": "{\n\n  P presenter = delegateCallback.createPresenter();\n  if (presenter == null) {\n    throw new NullPointerException(\n        \"Presenter returned from createPresenter() is null. Fragment is \" + fragment);\n  }\n\n  if (keepPresenterInstanceDuringScreenOrientationChanges) {\n    mosbyViewId = UUID.randomUUID().toString();\n    PresenterManager.putPresenter(getActivity(), mosbyViewId, presenter);\n  }\n\n  return presenter;\n}", "path": "mosby/viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Remove a list of Products from the shopping cart\n */\n", "func_signal": "public Completable removeProducts(List<Product> products)", "code": "{\n  List<Product> updatedShoppingCart = new ArrayList<>();\n  updatedShoppingCart.addAll(itemsInShoppingCart.getValue());\n  updatedShoppingCart.removeAll(products);\n  itemsInShoppingCart.onNext(updatedShoppingCart);\n  return Completable.complete();\n}", "path": "mosby/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/businesslogic/ShoppingCart.java", "commit_date": "2017-01-04 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Creates a new ViewState instance\n *\n * @return the newly created instance\n */\n", "func_signal": "private VS createViewState()", "code": "{\n  VS viewState = delegateCallback.createViewState();\n  if (viewState == null) {\n    throw new NullPointerException(\n        \"ViewState returned from createViewState() is null. Fragment is \" + fragment);\n  }\n\n  if (keepPresenterInstanceDuringScreenOrientationChanges) {\n    PresenterManager.putViewState(getActivity(), mosbyViewId, viewState);\n  }\n\n  return viewState;\n}", "path": "mosby/viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Put the viewstate in the internal cache\n *\n * @param viewId The mosby internal View id of the {@link MvpView} which the presenter is\n * associated to.\n * @param viewState The Viewstate\n */\n", "func_signal": "public void putViewState(@NonNull String viewId,\n    @NonNull Object viewState)", "code": "{\n\n  if (viewId == null) {\n    throw new NullPointerException(\"ViewId is null\");\n  }\n\n  if (viewState == null) {\n    throw new NullPointerException(\"ViewState is null\");\n  }\n\n  PresenterHolder presenterHolder = presenterMap.get(viewId);\n  if (presenterHolder == null) {\n    presenterHolder = new PresenterHolder();\n    presenterHolder.viewState = viewState;\n    presenterMap.put(viewId, presenterHolder);\n  } else {\n    presenterHolder.viewState = viewState;\n  }\n}", "path": "mosby/presentermanager/src/main/java/com/hannesdorfmann/mosby3/ActivityScopedCache.java", "commit_date": "2017-10-03 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * This is called when the View has been detached permanently (view is destroyed permanently)\n * to reset the internal state of this Presenter to be ready for being reused (even though\n * reusing presenters after their view has been destroy is BAD)\n */\n", "func_signal": "private void reset()", "code": "{\n    viewAttachedFirstTime = true;\n    intentRelaysBinders.clear();\n    subscribeViewStateMethodCalled = false;\n}", "path": "mosby/mvi-common/src/main/java/com/hannesdorfmann/mosby3/mvi/MviBasePresenter.java", "commit_date": "2018-04-08 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Generates the unique (mosby internal) view id and calls {@link\n * MvpDelegateCallback#createPresenter()}\n * to create a new presenter instance\n *\n * @return The new created presenter instance\n */\n", "func_signal": "private P createViewIdAndCreatePresenter()", "code": "{\n\n  P presenter = delegateCallback.createPresenter();\n  if (presenter == null) {\n    throw new NullPointerException(\n        \"Presenter returned from createPresenter() is null. Activity is \" + getActivity());\n  }\n  if (keepPresenterInstanceDuringScreenOrientationChanges) {\n    mosbyViewId = UUID.randomUUID().toString();\n    PresenterManager.putPresenter(getActivity(), mosbyViewId, presenter);\n  }\n  return presenter;\n}", "path": "mosby/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpDelegateImpl.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Creates the presenter instance if not able to reuse presenter from PresenterManager\n */\n", "func_signal": "private P restorePresenterOrRecreateNewPresenterAfterProcessDeath()", "code": "{\n\n  P presenter;\n\n  if (keepPresenterInstanceDuringScreenOrientationChanges) {\n\n    if (mosbyViewId != null\n        && (presenter = PresenterManager.getPresenter(getActivity(), mosbyViewId)) != null) {\n      //\n      // Presenter restored from cache\n      //\n      if (DEBUG) {\n        Log.d(DEBUG_TAG,\n            \"Reused presenter \" + presenter + \" for view \" + delegateCallback.getMvpView());\n      }\n\n      return presenter;\n    } else {\n      //\n      // No presenter found in cache, most likely caused by process death\n      //\n      presenter = createViewIdAndPresenter();\n      if (DEBUG) {\n        Log.d(DEBUG_TAG, \"No presenter found although view Id was here: \"\n            + mosbyViewId\n            + \". Most likely this was caused by a process death. New Presenter created\"\n            + presenter\n            + \" for view \"\n            + delegateCallback.getMvpView());\n      }\n\n      return presenter;\n    }\n  } else {\n    //\n    // starting first time, so create a new presenter\n    //\n    presenter = createViewIdAndPresenter();\n    if (DEBUG) {\n      Log.d(DEBUG_TAG,\n          \"New presenter \" + presenter + \" for view \" + delegateCallback.getMvpView());\n    }\n    return presenter;\n  }\n}", "path": "mosby/viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "sockeqwe/mosby", "stars": 5493, "license": "apache-2.0", "language": "java", "size": 26564}
{"docstring": "/**\n * Sets the panel offset when collapsed so you can exit\n * the boundaries of the top of the screen\n *\n * @param val Offset in pixels\n */\n", "func_signal": "public void setSlidePanelOffset(int val)", "code": "{\n    mSlidePanelOffset = val;\n    requestLayout();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v      View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx     Delta scrolled in pixels\n * @param x      X coordinate of the active touch point\n * @param y      Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * @return The current paralax offset\n */\n", "func_signal": "public int getCurrentParalaxOffset()", "code": "{\n    if (mParallaxOffset < 0) {\n        return 0;\n    }\n\n    return (int) (mParallaxOffset * getDirectionalSlideOffset());\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Set an anchor point where the panel can stop during sliding\n *\n * @param anchorPoint A value between 0 and 1, determining the position of the anchor point\n *                    starting from the top of the layout.\n */\n", "func_signal": "public void setAnchorPoint(float anchorPoint)", "code": "{\n    if (anchorPoint > 0 && anchorPoint <= 1) {\n        mAnchorPoint = anchorPoint;\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Expand the sliding pane if it is currently slideable.\n *\n * @return true if the pane was slideable and is now expanded/in the process of expading\n */\n", "func_signal": "public boolean expandPanel()", "code": "{\n    if (mFirstLayout) {\n        mSlideState = SlideState.EXPANDED;\n        return true;\n    } else {\n        return expandPanel(1.0f);\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * {@link PlayPauseButton#mPlayed} \u3092\u30bb\u30c3\u30c8\u3059\u308b\n *\n * @param played \u72b6\u6cc1\n */\n", "func_signal": "public void setPlayed(boolean played)", "code": "{\n    if (mPlayed != played) {\n        mPlayed = played;\n        invalidate();\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/*\n * Computes the top position of the panel based on the slide offset.\n */\n", "func_signal": "private int computePanelTopPosition(float slideOffset)", "code": "{\n    int slidingViewHeight = mSlideableView != null ? mSlideableView.getMeasuredHeight() : 0;\n    int slidePixelOffset = (int) (slideOffset * mSlideRange);\n    // Compute the top of the panel if its collapsed\n    return mIsSlidingUp\n            ? getMeasuredHeight() - getPaddingBottom() - mPanelHeight - slidePixelOffset\n            : getPaddingTop() - slidingViewHeight + mPanelHeight + slidePixelOffset;\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * View\u306e\u521d\u671f\u5316\n */\n", "func_signal": "private void initView()", "code": "{\n    setUpPaint();\n    setUpPath();\n    setUpAnimator();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * android:background\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u30dc\u30bf\u30f3\u306e\u8272\u3068\u3059\u308b\n * {@inheritDoc}\n */\n", "func_signal": "public PlayPauseButton(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    super(context, attrs, defStyleAttr);\n\n    mPoint = new Point();\n    initView();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/*\n * Computes the slide offset based on the top position of the panel\n */\n", "func_signal": "private float computeSlideOffset(int topPosition)", "code": "{\n    // Compute the panel top position if the panel is collapsed (offset 0)\n    final int topBoundCollapsed = computePanelTopPosition(0);\n\n    // Determine the new slide offset based on the collapsed top position and the new required\n    // top position\n    return (mIsSlidingUp\n            ? (float) (topBoundCollapsed - topPosition) / mSlideRange\n            : (float) (topPosition - topBoundCollapsed) / mSlideRange);\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Animator\u306e\u521d\u671f\u5316\n * \u305d\u308c\u305e\u308c\u306eAnimator\u306b\u521d\u671f\u5024\u3092\u30bb\u30c3\u30c8\u3057\uff64start\u3055\u305b\u3066\u3044\u308b\n */\n", "func_signal": "private void setUpAnimator()", "code": "{\n    if (mPlayed) {\n        mCenterEdgeAnimator = ValueAnimator.ofFloat(1.f, 1.f);\n        mLeftEdgeAnimator = ValueAnimator.ofFloat((float) (-0.2f * SQRT_3), (float) (-0.2f * SQRT_3));\n        mRightEdgeAnimator = ValueAnimator.ofFloat(1.f, 1.f);\n    } else {\n        mCenterEdgeAnimator = ValueAnimator.ofFloat(0.5f, 0.5f);\n        mLeftEdgeAnimator = ValueAnimator.ofFloat(0.f, 0.f);\n        mRightEdgeAnimator = ValueAnimator.ofFloat(0.f, 0.f);\n    }\n\n    mCenterEdgeAnimator.start();\n    mLeftEdgeAnimator.start();\n    mRightEdgeAnimator.start();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Expand the sliding pane to the anchor point if it is currently slideable.\n *\n * @return true if the pane was slideable and is now expanded/in the process of expading\n */\n", "func_signal": "public boolean anchorPanel()", "code": "{\n    if (mFirstLayout) {\n        mSlideState = SlideState.ANCHORED;\n        return true;\n    } else {\n        return expandPanel(mAnchorPoint);\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Collapse the sliding pane if it is currently slideable. If first layout\n * has already completed this will animate.\n *\n * @return true if the pane was slideable and is now collapsed/in the process of collapsing\n */\n", "func_signal": "public boolean collapsePanel()", "code": "{\n    if (mFirstLayout) {\n        mSlideState = SlideState.COLLAPSED;\n        return true;\n    } else {\n        if (mSlideState == SlideState.HIDDEN || mSlideState == SlideState.COLLAPSED)\n            return false;\n        return collapsePanel(mSlideableView, 0);\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Partially expand the sliding panel up to a specific offset\n *\n * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.\n * @return true if the pane was slideable and is now expanded/in the process of expanding\n */\n", "func_signal": "public boolean expandPanel(float mSlideOffset)", "code": "{\n    if (mSlideableView == null || mSlideState == SlideState.EXPANDED) return false;\n    mSlideableView.setVisibility(View.VISIBLE);\n    return expandPanel(mSlideableView, 0, mSlideOffset);\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Shows the panel from the hidden state\n */\n", "func_signal": "public void showPanel()", "code": "{\n    if (mFirstLayout) {\n        mSlideState = SlideState.COLLAPSED;\n    } else {\n        if (mSlideableView == null || mSlideState != SlideState.HIDDEN) return;\n        mSlideableView.setVisibility(View.VISIBLE);\n        requestLayout();\n        smoothSlideTo(0, 0);\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Set the collapsed panel height in pixels\n *\n * @param val A height in pixels\n */\n", "func_signal": "public void setPanelHeight(int val)", "code": "{\n    mPanelHeight = val;\n    requestLayout();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Set the Drag View after the view is inflated\n */\n", "func_signal": "@Override\nprotected void onFinishInflate()", "code": "{\n    super.onFinishInflate();\n    if (mDragViewResId != -1) {\n        setDragView(findViewById(mDragViewResId));\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * {@link PlayPauseButton#mBackgroundColor} \u3092\u30bb\u30c3\u30c8\u3057\u3066\u518d\u63cf\u753b\u3059\u308b\n *\n * @param color \u30bb\u30c3\u30c8\u3059\u308b\u8272\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n    mBackgroundColor = color;\n    mPaint.setColor(mBackgroundColor);\n    invalidate();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b\n */\n", "func_signal": "public void startAnimation()", "code": "{\n    mCenterEdgeAnimator = ValueAnimator.ofFloat(1.f, 0.5f);\n    mCenterEdgeAnimator.setDuration(100 * SPEED);\n    mCenterEdgeAnimator.addUpdateListener(mAnimatorUpdateListener);\n\n    mLeftEdgeAnimator = ValueAnimator.ofFloat((float) (-0.2 * SQRT_3), 0.f);\n    mLeftEdgeAnimator.setDuration(100 * SPEED);\n    mLeftEdgeAnimator.addUpdateListener(mAnimatorUpdateListener);\n\n    mRightEdgeAnimator = ValueAnimator.ofFloat(1.f, 0.f);\n    mRightEdgeAnimator.setDuration(150 * SPEED);\n    mRightEdgeAnimator.addUpdateListener(mAnimatorUpdateListener);\n\n    if (!mPlayed) {\n        mCenterEdgeAnimator.start();\n        mLeftEdgeAnimator.start();\n        mRightEdgeAnimator.start();\n    } else {\n        mCenterEdgeAnimator.reverse();\n        mLeftEdgeAnimator.reverse();\n        mRightEdgeAnimator.reverse();\n    }\n}", "path": "Timber/app/src/main/java/com/naman14/timber/widgets/PlayPauseButton.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Set the color used to fade the pane covered by the sliding pane out when the pane\n * will become fully covered in the expanded state.\n *\n * @param color An ARGB-packed color value\n */\n", "func_signal": "public void setCoveredFadeColor(int color)", "code": "{\n    mCoveredFadeColor = color;\n    invalidate();\n}", "path": "Timber/app/src/main/java/com/naman14/timber/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "naman14/Timber", "stars": 6950, "license": "None", "language": "java", "size": 17485}
{"docstring": "/**\n * Reads a value from given <tt>ReadableMap</tt> and returns it as\n * a <tt>String</tt>. Note that integer value is converted to double, before\n * it gets converted to a string.\n * @param map the <tt>ReadableMap</tt> from which the value will be obtained\n * @param key the map's key under which the value has been mapped.\n * @return a <tt>String</tt> representation of the value if exists or\n * <tt>null</tt> if there is no value mapped for given <tt>key</tt>.\n */\n", "func_signal": "public static String getMapStrValue(ReadableMap map, String key)", "code": "{\n    if(!map.hasKey(key)){\n        return null;\n    }\n    ReadableType type = map.getType(key);\n    switch (type) {\n        case Boolean:\n            return String.valueOf(map.getBoolean(key));\n        case Number:\n            // Don't know how to distinguish between Int and Double from\n            // ReadableType.Number. 'getInt' will fail on double value,\n            // while 'getDouble' works for both.\n            // return String.valueOf(map.getInt(key));\n            return String.valueOf(map.getDouble(key));\n        case String:\n            return map.getString(key);\n        default:\n            return null;\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/ReactBridgeUtil.java", "commit_date": "2017-01-12 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * In the fashion of\n * https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth\n * and https://www.w3.org/TR/html5/rendering.html#video-object-fit,\n * resembles the CSS style {@code object-fit}.\n *\n * @param objectFit For details, refer to the documentation of the\n * {@code objectFit} property of the JavaScript counterpart of\n * {@code WebRTCView} i.e. {@code RTCView}.\n */\n", "func_signal": "public void setObjectFit(String objectFit)", "code": "{\n    ScalingType scalingType\n        = \"cover\".equals(objectFit)\n            ? ScalingType.SCALE_ASPECT_FILL\n            : ScalingType.SCALE_ASPECT_FIT;\n\n    setScalingType(scalingType);\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Gets the {@link VideoTrack}, if any, (to be) rendered by this\n * {@code WebRTCView}.\n *\n * @return The {@code VideoTrack} (to be) rendered by this\n * {@code WebRTCView}.\n */\n", "func_signal": "private VideoTrack getVideoTrack()", "code": "{\n    VideoTrack videoTrack = this.videoTrack;\n\n    // XXX If WebRTCModule#mediaStreamTrackRelease has already been invoked\n    // on videoTrack, then it is no longer safe to call methods (e.g.\n    // addRenderer, removeRenderer) on videoTrack.\n    if (videoTrack != null\n            && videoTrack != getVideoTrackForStreamURL(this.streamURL)) {\n        videoTrack = null;\n    }\n\n    return videoTrack;\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Starts rendering {@link #videoTrack} if rendering is not in progress and\n * all preconditions for the start of rendering are met.\n */\n", "func_signal": "private void tryAddRendererToVideoTrack()", "code": "{\n    VideoTrack videoTrack;\n\n    if (!rendererAttached\n            // XXX If WebRTCModule#mediaStreamTrackRelease has already been\n            // invoked on videoTrack, then it is no longer safe to call\n            // methods (e.g. addRenderer, removeRenderer) on videoTrack.\n            && (videoTrack = getVideoTrack()) != null\n            && ViewCompat.isAttachedToWindow(this)) {\n        EglBase.Context sharedContext = EglUtils.getRootEglBaseContext();\n\n        if (sharedContext == null) {\n            // If SurfaceViewRenderer#init() is invoked, it will throw a\n            // RuntimeException which will very likely kill the application.\n            Log.e(TAG, \"Failed to render a VideoTrack!\");\n            return;\n        }\n\n        surfaceViewRenderer.init(sharedContext, rendererEvents);\n\n        try {\n            videoTrack.addSink(surfaceViewRenderer);\n        } catch (Throwable tr) {\n            // Releasing streams happens in the WebRTC thread, thus we might (briefly) hold\n            // a reference to a released stream.\n            Log.e(TAG, \"Failed to add renderer\", tr);\n\n            surfaceViewRenderer.release();\n            return;\n        }\n\n        rendererAttached = true;\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Constructs a JSON <tt>String</tt> representation of a specific array of\n * <tt>RTCStatsReport</tt>s (produced by {@link PeerConnection#getStats}).\n * <p>\n * @param report the <tt>RTCStatsReport</tt>s to represent in JSON\n *               format\n * @return a <tt>String</tt> which represents the specified <tt>report</tt>\n * in JSON format\n */\n", "func_signal": "public static String statsToJSON(RTCStatsReport report)", "code": "{\n    StringBuilder builder = new StringBuilder(\"[\");\n\n    boolean firstKey = true;\n\n    Map<String, RTCStats> statsMap = report.getStatsMap();\n\n    for (String key : report.getStatsMap().keySet()) {\n\n        if (firstKey) {\n            firstKey = false;\n        } else {\n            builder.append(\",\");\n        }\n\n        builder.append(\"[\\\"\").append(key).append(\"\\\",{\");\n\n        RTCStats stats = statsMap.get(key);\n        builder\n            .append(\"\\\"timestamp\\\":\\\"\")\n            .append(stats.getTimestampUs())\n            .append(\"\\\",\\\"type\\\":\\\"\")\n            .append(stats.getType())\n            .append(\"\\\",\\\"id\\\":\\\"\")\n            .append(stats.getId())\n            .append(\"\\\"\");\n\n        for (Map.Entry<String, Object> entry : stats.getMembers().entrySet()) {\n            builder\n                .append(\",\")\n                .append(\"\\\"\")\n                .append(entry.getKey())\n                .append(\"\\\":\");\n            appendValue(builder, entry.getValue());\n        }\n\n        builder.append(\"}]\");\n    }\n\n    builder.append(\"]\");\n\n    return builder.toString();\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/StringUtils.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Callback fired by {@link #surfaceViewRenderer} when the first frame is\n * rendered. Here we will set the background of the view part of the\n * SurfaceView to transparent, so the surface (where video is actually\n * rendered) shines through.\n */\n", "func_signal": "private void onFirstFrameRendered()", "code": "{\n    post(() -> {\n        Log.d(TAG, \"First frame rendered.\");\n        surfaceViewRenderer.setBackgroundColor(Color.TRANSPARENT);\n    });\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * If this <tt>View</tt> has {@link View#isInLayout()}, invokes it and\n * returns its return value; otherwise, returns <tt>false</tt> like\n * {@link ViewCompat#isInLayout(View)}.\n *\n * @return If this <tt>View</tt> has <tt>View#isInLayout()</tt>, invokes it\n * and returns its return value; otherwise, returns <tt>false</tt>.\n */\n", "func_signal": "private boolean invokeIsInLayout()", "code": "{\n    Method m = IS_IN_LAYOUT;\n    boolean b = false;\n\n    if (m != null) {\n        try {\n            b = (boolean) m.invoke(this);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            // Fall back to the behavior of ViewCompat#isInLayout(View).\n        }\n    }\n    return b;\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * \"Cleans\" the {@code SurfaceViewRenderer} by setting the view part to\n * opaque black and the surface part to transparent.\n */\n", "func_signal": "private void cleanSurfaceViewRenderer()", "code": "{\n    surfaceViewRenderer.setBackgroundColor(Color.BLACK);\n    surfaceViewRenderer.clearImage();\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Callback fired by {@link #surfaceViewRenderer} when the resolution or\n * rotation of the frame it renders has changed.\n *\n * @param videoWidth The new width of the rendered video frame.\n * @param videoHeight The new height of the rendered video frame.\n * @param rotation The new rotation of the rendered video frame.\n */\n", "func_signal": "private void onFrameResolutionChanged(\n        int videoWidth, int videoHeight,\n        int rotation)", "code": "{\n    boolean changed = false;\n\n    synchronized (layoutSyncRoot) {\n        if (this.frameHeight != videoHeight) {\n            this.frameHeight = videoHeight;\n            changed = true;\n        }\n        if (this.frameRotation != rotation) {\n            this.frameRotation = rotation;\n            changed = true;\n        }\n        if (this.frameWidth != videoWidth) {\n            this.frameWidth = videoWidth;\n            changed = true;\n        }\n    }\n    if (changed) {\n        // The onFrameResolutionChanged method call executes on the\n        // surfaceViewRenderer's render Thread.\n        post(requestSurfaceViewRendererLayoutRunnable);\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Stops rendering {@link #videoTrack} and releases the associated acquired\n * resources (if rendering is in progress).\n */\n", "func_signal": "private void removeRendererFromVideoTrack()", "code": "{\n    if (rendererAttached) {\n        // XXX If WebRTCModule#mediaStreamTrackRelease has already been\n        // invoked on videoTrack, then it is no longer safe to call methods\n        // (e.g. addSink, removeSink) on videoTrack. It is OK to\n        // skip the removeSink invocation in such a case because\n        // VideoTrack#dispose() has performed it already.\n        VideoTrack videoTrack = getVideoTrack();\n\n        if (videoTrack != null) {\n            try {\n                videoTrack.removeSink(surfaceViewRenderer);\n            } catch (Throwable tr) {\n                // Releasing streams happens in the WebRTC thread, thus we might (briefly) hold\n                // a reference to a released stream.\n                Log.e(TAG, \"Failed to remove renderer\", tr);\n            }\n        }\n\n        surfaceViewRenderer.release();\n        rendererAttached = false;\n\n        // Since this WebRTCView is no longer rendering anything, make sure\n        // surfaceViewRenderer displays nothing as well.\n        synchronized (layoutSyncRoot) {\n            frameHeight = 0;\n            frameRotation = 0;\n            frameWidth = 0;\n        }\n        requestSurfaceViewRendererLayout();\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Sets the {@code VideoTrack} to be rendered by this {@code WebRTCView}.\n *\n * @param videoTrack The {@code VideoTrack} to be rendered by this\n * {@code WebRTCView} or {@code null}.\n */\n", "func_signal": "private void setVideoTrack(VideoTrack videoTrack)", "code": "{\n    VideoTrack oldVideoTrack = this.videoTrack;\n\n    if (oldVideoTrack != videoTrack) {\n        if (oldVideoTrack != null) {\n            if (videoTrack == null) {\n                // If we are not going to render any stream, clean the\n                // surface.\n                cleanSurfaceViewRenderer();\n            }\n            removeRendererFromVideoTrack();\n        }\n\n        this.videoTrack = videoTrack;\n\n        if (videoTrack != null) {\n            tryAddRendererToVideoTrack();\n            if (oldVideoTrack == null) {\n                // If there was no old track, clean the surface so we start\n                // with black.\n                cleanSurfaceViewRenderer();\n            }\n        }\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Sets the z-order of this {@link WebRTCView} in the stacking space of all\n * {@code WebRTCView}s. For more details, refer to the documentation of the\n * {@code zOrder} property of the JavaScript counterpart of\n * {@code WebRTCView} i.e. {@code RTCView}.\n *\n * @param zOrder The z-order to set on this {@code WebRTCView}.\n */\n", "func_signal": "public void setZOrder(int zOrder)", "code": "{\n    switch (zOrder) {\n    case 0:\n        surfaceViewRenderer.setZOrderMediaOverlay(false);\n        break;\n    case 1:\n        surfaceViewRenderer.setZOrderMediaOverlay(true);\n        break;\n    case 2:\n        surfaceViewRenderer.setZOrderOnTop(true);\n        break;\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Helper function which tries to switch cameras until the desired facing mode is found.\n *\n * @param desiredFrontFacing - The desired front facing value.\n * @param tries - How many times to try switching.\n */\n", "func_signal": "private void switchCamera(boolean desiredFrontFacing, int tries)", "code": "{\n    CameraVideoCapturer capturer = (CameraVideoCapturer) videoCapturer;\n\n    capturer.switchCamera(new CameraVideoCapturer.CameraSwitchHandler() {\n        @Override\n        public void onCameraSwitchDone(boolean b) {\n            if (b != desiredFrontFacing) {\n                int newTries = tries-1;\n                if (newTries > 0) {\n                    switchCamera(desiredFrontFacing, newTries);\n                }\n            } else {\n                isFrontFacing = desiredFrontFacing;\n            }\n        }\n\n        @Override\n        public void onCameraSwitchError(String s) {\n            Log.e(TAG, \"Error switching camera: \" + s);\n        }\n    });\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/CameraCaptureController.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Loads Flipper in React Native templates. Call this in the onCreate method with something like\n * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n *\n * @param context\n * @param reactInstanceManager\n */\n", "func_signal": "private static void initializeFlipper(\n    Context context, ReactInstanceManager reactInstanceManager)", "code": "{\n  if (BuildConfig.DEBUG) {\n    try {\n      /*\n       We use reflection here to pick up the class that initializes Flipper,\n      since Flipper library is not available in release mode\n      */\n      Class<?> aClass = Class.forName(\"com.gumtestapp_macos.ReactNativeFlipper\");\n      aClass\n          .getMethod(\"initializeFlipper\", Context.class, ReactInstanceManager.class)\n          .invoke(null, context, reactInstanceManager);\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (NoSuchMethodException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (InvocationTargetException e) {\n      e.printStackTrace();\n    }\n  }\n}", "path": "react-native-webrtc/examples/GumTestApp_macOS/android/app/src/main/java/com/gumtestapp_macos/MainApplication.java", "commit_date": "2020-11-25 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Initializes a new {@code TrackPrivate} instance.\n *\n * @param track\n * @param mediaSource            the {@code MediaSource} from which the specified\n *                               {@code code} was created\n * @param videoCaptureController the {@code AbstractVideoCaptureController} from which the\n *                               specified {@code mediaSource} was created if the specified\n *                               {@code track} is a {@link VideoTrack}\n */\n", "func_signal": "public TrackPrivate(\n    MediaStreamTrack track,\n    MediaSource mediaSource,\n    AbstractVideoCaptureController videoCaptureController)", "code": "{\n    this.track = track;\n    this.mediaSource = mediaSource;\n    this.videoCaptureController = videoCaptureController;\n    this.disposed = false;\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/GetUserMediaImpl.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Lazily creates and returns the one and only {@link EglBase} which will\n * serve as the root for all contexts that are needed.\n */\n", "func_signal": "public static synchronized EglBase getRootEglBase()", "code": "{\n    if (rootEglBase == null) {\n        // XXX EglBase14 will report that isEGL14Supported() but its\n        // getEglConfig() will fail with a RuntimeException with message\n        // \"Unable to find any matching EGL config\". Fall back to EglBase10\n        // in the described scenario.\n        EglBase eglBase = null;\n        int[] configAttributes = EglBase.CONFIG_PLAIN;\n        RuntimeException cause = null;\n\n        try {\n            // WebRTC internally does this check in isEGL14Supported, but it's no longer exposed\n            // in the public API\n            if (VERSION.SDK_INT >= 18) {\n                eglBase = EglBase.createEgl14(configAttributes);\n            }\n        } catch (RuntimeException ex) {\n            // Fall back to EglBase10.\n            cause = ex;\n        }\n\n        if (eglBase == null) {\n            try {\n                eglBase = EglBase.createEgl10(configAttributes);\n            } catch (RuntimeException ex) {\n                // Neither EglBase14, nor EglBase10 succeeded to initialize.\n                cause = ex;\n            }\n        }\n\n        if (cause != null) {\n            Log.e(EglUtils.class.getName(), \"Failed to create EglBase\", cause);\n        } else {\n            rootEglBase = eglBase;\n        }\n    }\n\n    return rootEglBase;\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/EglUtils.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Request that {@link #surfaceViewRenderer} be laid out (as soon as\n * possible) because layout-related state either of this instance or of\n * {@code surfaceViewRenderer} has changed.\n */\n", "func_signal": "@SuppressLint(\"WrongCall\")\nprivate void requestSurfaceViewRendererLayout()", "code": "{\n    // Google/WebRTC just call requestLayout() on surfaceViewRenderer when\n    // they change the value of its mirror or surfaceType property.\n    surfaceViewRenderer.requestLayout();\n    // The above is not enough though when the video frame's dimensions or\n    // rotation change. The following will suffice.\n    if (!invokeIsInLayout()) {\n        onLayout(\n            /* changed */ false,\n            getLeft(), getTop(), getRight(), getBottom());\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Loads Flipper in React Native templates. Call this in the onCreate method with something like\n * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n *\n * @param context\n * @param reactInstanceManager\n */\n", "func_signal": "private static void initializeFlipper(\n    Context context, ReactInstanceManager reactInstanceManager)", "code": "{\n  if (BuildConfig.DEBUG) {\n    try {\n      /*\n       We use reflection here to pick up the class that initializes Flipper,\n      since Flipper library is not available in release mode\n      */\n      Class<?> aClass = Class.forName(\"com.gumtestapp.ReactNativeFlipper\");\n      aClass\n          .getMethod(\"initializeFlipper\", Context.class, ReactInstanceManager.class)\n          .invoke(null, context, reactInstanceManager);\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (NoSuchMethodException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (InvocationTargetException e) {\n      e.printStackTrace();\n    }\n  }\n}", "path": "react-native-webrtc/examples/GumTestApp/android/app/src/main/java/com/gumtestapp/MainApplication.java", "commit_date": "2020-11-25 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Sets the indicator which determines whether this {@code WebRTCView} is to\n * mirror the video represented by {@link #videoTrack} during its rendering.\n *\n * @param mirror If this {@code WebRTCView} is to mirror the video\n * represented by {@code videoTrack} during its rendering, {@code true};\n * otherwise, {@code false}.\n */\n", "func_signal": "public void setMirror(boolean mirror)", "code": "{\n    if (this.mirror != mirror) {\n        this.mirror = mirror;\n        surfaceViewRenderer.setMirror(mirror);\n        // SurfaceViewRenderer takes the value of its mirror property into\n        // account upon its layout.\n        requestSurfaceViewRendererLayout();\n    }\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/WebRTCView.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Constructs a new {@code VideoCapturer} instance attempting to satisfy\n * specific constraints.\n *\n * @param deviceId the ID of the requested video device. If not\n * {@code null} and a {@code VideoCapturer} can be created for it, then\n * {@code facingMode} is ignored.\n * @param facingMode the facing of the requested video source such as\n * {@code user} and {@code environment}. If {@code null}, \"user\" is\n * presumed.\n * @return a {@code VideoCapturer} satisfying the {@code facingMode} or\n * {@code deviceId} constraint\n */\n", "func_signal": "private VideoCapturer createVideoCapturer(String deviceId, String facingMode)", "code": "{\n    String[] deviceNames = cameraEnumerator.getDeviceNames();\n    List<String> failedDevices = new ArrayList<>();\n\n    // If deviceId is specified, then it takes precedence over facingMode.\n    if (deviceId != null) {\n        for (String name : deviceNames) {\n            if (name.equals(deviceId)) {\n                VideoCapturer videoCapturer\n                    = cameraEnumerator.createCapturer(name, cameraEventsHandler);\n                String message = \"Create user-specified camera \" + name;\n                if (videoCapturer != null) {\n                    Log.d(TAG, message + \" succeeded\");\n                    this.isFrontFacing = cameraEnumerator.isFrontFacing(name);\n                    return videoCapturer;\n                } else {\n                    Log.d(TAG, message + \" failed\");\n                    failedDevices.add(name);\n                    break; // fallback to facingMode\n                }\n            }\n        }\n    }\n\n    // Otherwise, use facingMode (defaulting to front/user facing).\n    final boolean isFrontFacing\n        = facingMode == null || !facingMode.equals(\"environment\");\n    for (String name : deviceNames) {\n        if (failedDevices.contains(name)) {\n            continue;\n        }\n        try {\n            // This can throw an exception when using the Camera 1 API.\n            if (cameraEnumerator.isFrontFacing(name) != isFrontFacing) {\n                continue;\n            }\n        } catch (Exception e) {\n            Log.e(\n                TAG,\n                \"Failed to check the facing mode of camera \" + name,\n                e);\n            failedDevices.add(name);\n            continue;\n        }\n        VideoCapturer videoCapturer\n            = cameraEnumerator.createCapturer(name, cameraEventsHandler);\n        String message = \"Create camera \" + name;\n        if (videoCapturer != null) {\n            Log.d(TAG, message + \" succeeded\");\n            this.isFrontFacing = cameraEnumerator.isFrontFacing(name);\n            return videoCapturer;\n        } else {\n            Log.d(TAG, message + \" failed\");\n            failedDevices.add(name);\n        }\n    }\n\n    // Fallback to any available camera.\n    for (String name : deviceNames) {\n        if (!failedDevices.contains(name)) {\n            VideoCapturer videoCapturer\n                = cameraEnumerator.createCapturer(name, cameraEventsHandler);\n            String message = \"Create fallback camera \" + name;\n            if (videoCapturer != null) {\n                Log.d(TAG, message + \" succeeded\");\n                this.isFrontFacing = cameraEnumerator.isFrontFacing(name);\n                return videoCapturer;\n            } else {\n                Log.d(TAG, message + \" failed\");\n                failedDevices.add(name);\n                // fallback to the next device.\n            }\n        }\n    }\n\n    Log.w(TAG, \"Unable to identify a suitable camera.\");\n\n    return null;\n}", "path": "react-native-webrtc/android/src/main/java/com/oney/WebRTCModule/CameraCaptureController.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "react-native-webrtc/react-native-webrtc", "stars": 4432, "license": "mit", "language": "java", "size": 432179}
{"docstring": "/**\n * Creates opposites map from Opposites objects, one rule may have several\n * opposing dependencies.\n *\n * @param iter\n * @return\n */\n", "func_signal": "protected Map<Cause, Set<Cause>> createOppositesMap(VerifierComponentType type,\n                                                    Iterator<Object> iter)", "code": "{\n\n    Map<Cause, Set<Cause>> map = new HashMap<Cause, Set<Cause>>();\n    while (iter.hasNext()) {\n        Object o = (Object) iter.next();\n        if (o instanceof Opposites) {\n            Opposites r = (Opposites) o;\n\n            if (((VerifierComponent) r.getLeft()).getVerifierComponentType().equals(type)) {\n                Cause left = r.getLeft();\n                Cause right = r.getRight();\n\n                if (map.containsKey(left)) {\n                    Set<Cause> set = map.get(left);\n                    set.add(right);\n                } else {\n                    Set<Cause> set = new HashSet<Cause>();\n                    set.add(right);\n                    map.put(left,\n                            set);\n                }\n            }\n        }\n    }\n\n    return map;\n}", "path": "incubator-kie-drools/drools-verifier/drools-verifier-drl/src/test/java/org/drools/verifier/opposites/OppositesBase.java", "commit_date": "2018-09-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @inheritDoc\n *\n * And group elements just iterate over their children\n * selecting and calling the build procedure for each one\n */\n", "func_signal": "public void build(final BuildContext context,\n                  final BuildUtils utils,\n                  final RuleConditionElement rce)", "code": "{\n\n    final GroupElement ge = (GroupElement) rce;\n\n    if (ge.getChildren().size() == 1) {\n        RuleConditionElement child = ge.getChildren().get(0);\n        final ReteooComponentBuilder builder = utils.getBuilderFor(child);\n        builder.build( context, utils, child );\n        buildTupleSource( context, utils, isTerminalAlpha( context, child ) );\n    } else {\n\n        for (final RuleConditionElement child : ge.getChildren()) {\n            final ReteooComponentBuilder builder = utils.getBuilderFor( child );\n            builder.build( context, utils, child );\n            buildTupleSource( context, utils, false );\n            buildJoinNode( context, utils );\n        }\n    }\n}", "path": "incubator-kie-drools/drools-core/src/main/java/org/drools/core/reteoo/builder/GroupElementBuilder.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @inheritDoc\n *\n * Exists must verify what is the class of its child:\n *\n * If it is a pattern, a simple ExistsNode is added to the rulebase\n * If it is a group element, than a subnetwork must be created\n */\n", "func_signal": "public void build(final BuildContext context,\n                  final BuildUtils utils,\n                  final RuleConditionElement rce)", "code": "{\n    boolean existSubNetwort = false;\n    final GroupElement exists = (GroupElement) rce;\n\n    // EXISTS must save some context info to restore it later\n    final int currentPatternIndex = context.getCurrentPatternOffset();\n    final LeftTupleSource tupleSource = context.getTupleSource();\n\n    // get child\n    final RuleConditionElement child = exists.getChildren().get( 0 );\n\n    // get builder for child\n    final ReteooComponentBuilder builder = utils.getBuilderFor( child );\n\n    // builds the child\n    builder.build( context,\n                   utils,\n                   child );\n\n    // if it is a subnetwork\n    if ( context.getObjectSource() == null && context.getTupleSource() != null ) {\n        RightInputAdapterNode riaNode = context.getComponentFactory().getNodeFactoryService().buildRightInputNode( context.getNextId(),\n                                                                                                                   context.getTupleSource(),\n                                                                                                                   tupleSource,\n                                                                                                                   context );\n\n        // attach right input adapter node to convert tuple source into an object source\n        context.setObjectSource( utils.attachNode( context, riaNode ) );\n\n        // restore tuple source from before the start of the sub network\n        context.setTupleSource( tupleSource );\n\n        // create a tuple start equals constraint and set it in the context\n        final TupleStartEqualsConstraint constraint = TupleStartEqualsConstraint.getInstance();\n        final List<BetaNodeFieldConstraint> predicates = new ArrayList<BetaNodeFieldConstraint>();\n        predicates.add( constraint );\n        context.setBetaconstraints( predicates );\n        existSubNetwort = true;\n\n    }\n\n    NodeFactory nfactory = context.getComponentFactory().getNodeFactoryService();\n\n    final BetaConstraints betaConstraints = utils.createBetaNodeConstraint( context,\n                                                                            context.getBetaconstraints(),\n                                                                            false );\n\n    ExistsNode node = context.getComponentFactory().getNodeFactoryService().buildExistsNode(context.getNextId(),\n                                                                                            context.getTupleSource(),\n                                                                                            context.getObjectSource(),\n                                                                                            betaConstraints,\n                                                                                            context);\n\n    // then attach the EXISTS node. It will work both as a simple exists node\n    // or as subnetwork join node as the context was set appropriatelly\n    // in each case\n    context.setTupleSource( utils.attachNode( context, node ) );\n    context.setBetaconstraints( null );\n    context.setObjectSource( null );\n\n    // restore pattern index\n    context.setCurrentPatternOffset( currentPatternIndex );\n}", "path": "incubator-kie-drools/drools-core/src/main/java/org/drools/core/reteoo/builder/GroupElementBuilder.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "//www.drools.org/xsd/kmodule\\\"\"; // missed end >, so we can cater for />\n", "func_signal": "public String toXML()", "code": "{\n        String xml = MARSHALLER.toXML(this);\n        return KMODULE_XSD + xml.substring(\"<kmodule\".length());  // missed end >, so we can cater for />\n    }", "path": "incubator-kie-drools/drools-compiler/src/main/java/org/drools/compiler/kproject/models/KieModuleModelImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public void build(final BuildContext context,\n                  final BuildUtils utils,\n                  final RuleConditionElement rce)", "code": "{\n    final GroupElement ge = (GroupElement) rce;\n\n    final ReteooComponentBuilder builder = this.geBuilders.get( ge.getType() );\n\n    context.push( ge );\n    context.pushRuleComponent( ge );\n\n    builder.build( context,\n                   utils,\n                   rce );\n\n    context.pop();\n    context.popRuleComponent();\n}", "path": "incubator-kie-drools/drools-core/src/main/java/org/drools/core/reteoo/builder/GroupElementBuilder.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n @param inputExpressionList a list of the N>=0 input expressions in display order\n @param inputValuesList * a list of N input values, corresponding to the input expressions. Each\n list element is a unary tests literal (see below).\n @param outputs * a name (a string matching grammar rule 27) or a list of M>0 names\n @param outputValues * if outputs is a list, then output values is a list of lists of values, one list\n per output; else output values is a list of values for the one output.\n Each value is a string.\n @param ruleList a list of R>0 rules. A rule is a list of N input entries followed by M\n output entries. An input entry is a unary tests literal. An output entry is\n an expression represented as a string.\n @param hitPolicy * one of: \"U\", \"A\", \u201cP\u201d, \u201cF\u201d, \"R\", \"O\", \"C\", \"C+\", \"C#\", \"C<\", \u201cC>\u201d\n (default is \"U\")\n @param defaultOutputValue * if outputs is a list, then default output value is a context with entries\n composed of outputs and output values; else default output value is one\n of the output values.\n */\n", "func_signal": "public Object invoke(@ParameterName(\"ctx\") EvaluationContext ctx, \n        @ParameterName(\"outputs\") Object outputs,\n        @ParameterName(\"input expression list\") Object inputExpressionList,\n        @ParameterName(\"input values list\") List<?> inputValuesList,\n        @ParameterName(\"output values\") Object outputValues,\n        @ParameterName(\"rule list\") List<List> ruleList,\n        @ParameterName(\"hit policy\") String hitPolicy,\n        @ParameterName(\"default output value\") Object defaultOutputValue)", "code": "{\n    // input expression list can have a single element or be a list\n    // TODO isn't ^ conflicting with the specs page 136 \"input expression list: a LIST of the\"\n    List<String> inputExpressions = inputExpressionList instanceof List ? (List) inputExpressionList : Collections.singletonList( (String) inputExpressionList );\n\n    List<DTInputClause> inputs;\n    if ( inputValuesList != null ) {\n        List<UnaryTest> inputValues = inputValuesList.stream().map( o -> toUnaryTest(ctx, o) ).collect( Collectors.toList() );\n        if ( inputValues.size() != inputExpressions.size() ) {\n            // TODO handle compilation error\n        }\n        // zip inputExpression with its inputValue\n        inputs = IntStream.range( 0, inputExpressions.size() )\n                .mapToObj( i -> new DTInputClause( inputExpressions.get( i ), inputValuesList.toString(), Collections.singletonList( inputValues.get( i ) ), null, false) )\n                .collect( Collectors.toList() );\n    } else {\n        inputs = inputExpressions.stream().map( ie -> new DTInputClause( ie, null, null, null, false ) ).collect( Collectors.toList() );\n    }\n\n    List<String> parseOutputs = outputs instanceof List ? (List) outputs : Collections.singletonList( (String) outputs );\n    List<DTOutputClause> outputClauses;\n    if ( outputValues != null ) {\n        if ( parseOutputs.size() == 1 ) {\n            outputClauses = new ArrayList<>();\n            List<UnaryTest> outputValuesCompiled = objectToUnaryTestList( ctx, Collections.singletonList( (List<Object>) outputValues ) ).get(0);\n            outputClauses.add( new DTOutputClause( parseOutputs.get( 0 ), outputValuesCompiled ) );\n        } else {\n            List<List<UnaryTest>> listOfList = objectToUnaryTestList( ctx, (List<List<Object>>) outputValues );\n            // zip inputExpression with its inputValue\n            outputClauses = IntStream.range( 0, parseOutputs.size() )\n                    .mapToObj( i -> new DTOutputClause( parseOutputs.get( i ), listOfList.get( i ) ) )\n                    .collect( Collectors.toList() );\n        }\n    } else {\n        outputClauses = parseOutputs.stream().map( out -> new DTOutputClause( out, null ) ).collect( Collectors.toList() );\n    }\n\n    // TODO parse default output value.\n    FEEL feel = FEEL.newInstance();\n    List<DTDecisionRule> decisionRules = IntStream.range( 0, ruleList.size() )\n            .mapToObj( index -> toDecisionRule( ctx, feel, index, ruleList.get( index ), inputExpressions.size() ) )\n            .collect( Collectors.toList() );\n\n    // TODO is there a way to avoid UUID and get from _evaluation_ ctx the name of the wrapping context? \n    // TODO also in this case it is using an ad-hoc created FEEL instance instead of the \"hosted\" one.\n    DecisionTableImpl dti = new DecisionTableImpl(UUID.randomUUID().toString(), inputExpressions, inputs, outputClauses, decisionRules, HitPolicy.fromString(hitPolicy), FEEL.newInstance());\n    return new DTInvokerFunction( dti );\n}", "path": "incubator-kie-drools/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/DecisionTableFunction.java", "commit_date": "2019-08-02 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Reads from the <code>Reader</code> into a byte array\n * \n * @param b\n *            the byte array to read into\n * @param off\n *            the offset in the byte array\n * @param len\n *            the length in the byte array to fill\n * @return the actual number read into the byte array, -1 at the end of\n *         the stream\n * @exception IOException\n *                if an error occurs\n */\n", "func_signal": "public synchronized int read(byte[] b,\n                             int off,\n                             int len) throws IOException", "code": "{\n    if ( in == null ) {\n        throw new IOException( \"Stream Closed\" );\n    }\n\n    while ( slack == null ) {\n        char[] buf = new char[len]; // might read too much\n        int n = in.read( buf );\n        if ( n == -1 ) {\n            return -1;\n        }\n        if ( n > 0 ) {\n            slack = new String( buf,\n                                0,\n                                n ).getBytes( encoding );\n            begin = 0;\n        }\n    }\n\n    if ( len > slack.length - begin ) {\n        len = slack.length - begin;\n    }\n\n    System.arraycopy( slack,\n                      begin,\n                      b,\n                      off,\n                      len );\n\n    if ( (begin += len) >= slack.length ) {\n        slack = null;\n    }\n\n    return len;\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @inheritDoc\n *\n * Not must verify what is the class of its child:\n *\n * If it is a pattern, a simple NotNode is added to the rulebase\n * If it is a group element, than a subnetwork must be created\n */\n", "func_signal": "public void build(final BuildContext context,\n                  final BuildUtils utils,\n                  final RuleConditionElement rce)", "code": "{\n    boolean existSubNetwort = false;\n    final GroupElement not = (GroupElement) rce;\n\n    // NOT must save some context info to restore it later\n    final int currentPatternIndex = context.getCurrentPatternOffset();\n    final LeftTupleSource tupleSource = context.getTupleSource();\n\n    // get child\n    final RuleConditionElement child = not.getChildren().get( 0 );\n\n    // get builder for child\n    final ReteooComponentBuilder builder = utils.getBuilderFor( child );\n\n    // builds the child\n    builder.build( context,\n                   utils,\n                   child );\n\n    // if it is a subnetwork\n    if ( context.getObjectSource() == null && context.getTupleSource() != null ) {\n        RightInputAdapterNode riaNode = context.getComponentFactory().getNodeFactoryService().buildRightInputNode(context.getNextId(),\n                                                                                                                  context.getTupleSource(),\n                                                                                                                  tupleSource,\n                                                                                                                  context);\n\n        // attach right input adapter node to convert tuple source into an object source\n        context.setObjectSource( utils.attachNode( context, riaNode ) );\n\n        // restore tuple source from before the start of the sub network\n        context.setTupleSource( tupleSource );\n\n        // create a tuple start equals constraint and set it in the context\n        final TupleStartEqualsConstraint constraint = TupleStartEqualsConstraint.getInstance();\n        final List<BetaNodeFieldConstraint> predicates = new ArrayList<BetaNodeFieldConstraint>();\n        predicates.add( constraint );\n        context.setBetaconstraints( predicates );\n        existSubNetwort = true;\n\n    }\n\n    NodeFactory nfactory = context.getComponentFactory().getNodeFactoryService();\n\n    final BetaConstraints betaConstraints = utils.createBetaNodeConstraint( context,\n                                                                            context.getBetaconstraints(),\n                                                                            false );\n    // then attach the NOT node. It will work both as a simple not node\n    // or as subnetwork join node as the context was set appropriatelly\n    // in each case\n\n\n    NotNode node = context.getComponentFactory().getNodeFactoryService().buildNotNode( context.getNextId(),\n                                                                                       context.getTupleSource(),\n                                                                                       context.getObjectSource(),\n                                                                                       betaConstraints,\n                                                                                       context );\n\n    node.setEmptyBetaConstraints( context.getBetaconstraints().isEmpty() );\n\n    context.setTupleSource( utils.attachNode( context, node ) );\n    context.setBetaconstraints( null );\n    context.setObjectSource( null );\n\n    // restore pattern index\n    context.setCurrentPatternOffset( currentPatternIndex );\n}", "path": "incubator-kie-drools/drools-core/src/main/java/org/drools/core/reteoo/builder/GroupElementBuilder.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/* (non-Javadoc)\n * @see org.kie.kModule.KieProject#addKBase(org.kie.kModule.KieBaseModelImpl)\n */\n", "func_signal": "public KieBaseModel newKieBaseModel(String name)", "code": "{\n    KieBaseModel kbase = new KieBaseModelImpl(this, name);\n    Map<String, KieBaseModel> newMap = new HashMap<String, KieBaseModel>();\n    newMap.putAll( this.kBases );\n    newMap.put( kbase.getName(), kbase );\n    setKBases( newMap );\n\n    return kbase;\n}", "path": "incubator-kie-drools/drools-compiler/src/main/java/org/drools/compiler/kproject/models/KieModuleModelImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Resets the StringReader.\n * \n * @exception IOException\n *                if the StringReader fails to be reset\n */\n", "func_signal": "public synchronized void reset() throws IOException", "code": "{\n    if ( in == null ) {\n        throw new IOException( \"Stream Closed\" );\n    }\n    slack = null;\n    in.reset();\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Create a <code>KiePMMLDroolsType</code> out of original <code>DataField</code>,\n * and <b>populate</b> the <b>fieldNameTypeNameMap</b> with mapping between original field' name and <b>original type/generated type</b> tupla\n * @param dataField\n */\n", "func_signal": "public KiePMMLDroolsType declareType(DataField dataField)", "code": "{\n    String generatedType = getSanitizedClassName(dataField.getName().getValue().toUpperCase());\n    String fieldName = dataField.getName().getValue();\n    String fieldType = dataField.getDataType().value();\n    fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));\n    return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());\n}", "path": "incubator-kie-drools/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @return the current number of bytes ready for reading\n * @exception IOException\n *                if an error occurs\n */\n", "func_signal": "public synchronized int available() throws IOException", "code": "{\n    if ( in == null ) {\n        throw new IOException( \"Stream Closed\" );\n    }\n    if ( slack != null ) {\n        return slack.length - begin;\n    }\n    if ( in.ready() ) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Reads from the <CODE>Reader</CODE>, returning the same value.\n * \n * @return the value of the next character in the <CODE>Reader</CODE>.\n * \n * @exception IOException\n *                if the original <code>Reader</code> fails to be read\n */\n", "func_signal": "public synchronized int read() throws IOException", "code": "{\n    if ( in == null ) {\n        throw new IOException( \"Stream Closed\" );\n    }\n\n    byte result;\n    if ( slack != null && begin < slack.length ) {\n        result = slack[begin];\n        if ( ++begin == slack.length ) {\n            slack = null;\n        }\n    } else {\n        byte[] buf = new byte[1];\n        if ( read( buf,\n                   0,\n                   1 ) <= 0 ) {\n            result = -1;\n        }\n        result = buf[0];\n    }\n\n    if ( result < -1 ) {\n        result += 256;\n    }\n\n    return result;\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n *\n * Returns a prediction for a prediction service with the specified confidence level, confidence threshold and\n * outcome.\n *\n * @param confidenceLevel Numerical value to quantify confidence level for this prediction\n * @param confidenceThreshold The threshold above which a prediction should be automatically accepted\n * @param data A map containing the outcome names and values (respectively as map keys and values)\n */\n", "func_signal": "public PredictionOutcome(double confidenceLevel, double confidenceThreshold, Map<String, Object> data)", "code": "{\n    this.present = data != null;\n    this.confidenceLevel = confidenceLevel;\n    this.confidenceThreshold = confidenceThreshold;\n    this.data = data;\n}", "path": "incubator-kie-drools/kie-internal/src/main/java/org/kie/internal/task/api/prediction/PredictionOutcome.java", "commit_date": "2019-08-27 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public boolean requiresLeftActivation(final BuildUtils utils,\n                                      final RuleConditionElement rce)", "code": "{\n    final GroupElement ge = (GroupElement) rce;\n\n    final ReteooComponentBuilder builder = this.geBuilders.get( ge.getType() );\n\n    return builder.requiresLeftActivation( utils,\n                                           rce );\n}", "path": "incubator-kie-drools/drools-core/src/main/java/org/drools/core/reteoo/builder/GroupElementBuilder.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * This is the identity function implementation\n *\n * @param val\n * @return\n */\n", "func_signal": "public FEELFnResult<TemporalAmount> invoke(@ParameterName( \"from\" ) TemporalAmount val)", "code": "{\n    if ( val == null ) {\n        return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"cannot be null\"));\n    }\n    return FEELFnResult.ofResult( val );\n}", "path": "incubator-kie-drools/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/DurationFunction.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Closes the Stringreader.\n * \n * @exception IOException\n *                if the original StringReader fails to be closed\n */\n", "func_signal": "public synchronized void close() throws IOException", "code": "{\n    if ( in != null ) {\n        in.close();\n        slack = null;\n        in = null;\n    }\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Construct a <CODE>ReaderInputStream</CODE> for the specified\n * <CODE>Reader</CODE>, with the specified encoding.\n * \n * @param reader\n *            non-null <CODE>Reader</CODE>.\n * @param encoding\n *            non-null <CODE>String</CODE> encoding.\n */\n", "func_signal": "public ReaderInputStream(Reader reader,\n                         String encoding)", "code": "{\n    this( reader );\n    if ( encoding == null ) {\n        throw new IllegalArgumentException( \"encoding must not be null\" );\n    } else {\n        this.encoding = encoding;\n    }\n}", "path": "incubator-kie-drools/drools-decisiontables/src/main/java/org/drools/decisiontable/DecisionTableProviderImpl.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/* (non-Javadoc)\n * @see org.kie.kModule.KieProject#removeKieBaseModel(org.kie.kModule.KieBaseModel)\n */\n", "func_signal": "public void moveKBase(String oldQName, String newQName)", "code": "{\n    Map<String, KieBaseModel> newMap = new HashMap<String, KieBaseModel>();\n    newMap.putAll( this.kBases );\n    KieBaseModel kieBaseModel = newMap.remove( oldQName );\n    newMap.put( newQName, kieBaseModel);\n    setKBases( newMap );\n}", "path": "incubator-kie-drools/drools-compiler/src/main/java/org/drools/compiler/kproject/models/KieModuleModelImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * Convert row to DTDecisionRule\n * @param mainCtx the main context is used to identify the hosted FEELEventManager\n * @param embeddedFEEL a possibly cached embedded FEEL to compile the output expression, error will be reported up to the mainCtx\n * @param index\n * @param rule\n * @param inputSize\n * @return\n */\n", "func_signal": "private static DTDecisionRule toDecisionRule(EvaluationContext mainCtx, FEEL embeddedFEEL, int index, List<?> rule, int inputSize)", "code": "{\n    // TODO should be check indeed block of inputSize n inputs, followed by block of outputs.\n    DTDecisionRule dr = new DTDecisionRule( index );\n    for ( int i = 0; i < rule.size(); i++ ) {\n        Object o = rule.get( i );\n        if ( i < inputSize ) {\n            dr.getInputEntry().add( toUnaryTest( mainCtx, o ) );\n        } else {\n            FEELEventListener ruleListener = event -> mainCtx.notifyEvt( () -> new FEELEventBase(event.getSeverity(),\n                                                                                                 Msg.createMessage(Msg.ERROR_COMPILE_EXPR_DT_FUNCTION_RULE_IDX, index+1, event.getMessage()),\n                                                                                                 event.getSourceException()));\n            embeddedFEEL.addListener(ruleListener);\n            CompiledExpression compiledExpression = embeddedFEEL.compile((String) o, embeddedFEEL.newCompilerContext());\n            dr.getOutputEntry().add( compiledExpression );\n            embeddedFEEL.removeListener(ruleListener);\n        }\n    }\n    return dr;\n}", "path": "incubator-kie-drools/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/DecisionTableFunction.java", "commit_date": "2019-08-02 00:00:00", "repo_name": "apache/incubator-kie-drools", "stars": 5645, "license": "None", "language": "java", "size": 288120}
{"docstring": "/**\n * <code>optional string name = 3;</code>\n */\n", "func_signal": "public Builder setName(\n    java.lang.String value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  bitField0_ |= 0x00000004;\n  name_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.RoutingPart routingIndex = 12;</code>\n */\n", "func_signal": "public Builder addRoutingIndex(\n    int index, net.osmand.binary.OsmandIndex.RoutingPart.Builder builderForValue)", "code": "{\n  ensureRoutingIndexIsMutable();\n  routingIndex_.add(index, builderForValue.build());\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required string fileName = 3;</code>\n */\n", "func_signal": "public Builder setFileNameBytes(\n    com.google.protobuf.ByteString value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  bitField0_ |= 0x00000004;\n  fileName_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.MapLevel levels = 5;</code>\n */\n", "func_signal": "public Builder addLevels(\n    int index, net.osmand.binary.OsmandIndex.MapLevel.Builder builderForValue)", "code": "{\n  ensureLevelsIsMutable();\n  levels_.add(index, builderForValue.build());\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required int64 offset = 2;</code>\n */\n", "func_signal": "public Builder setOffset(long value)", "code": "{\n  bitField0_ |= 0x00000002;\n  offset_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.MapPart mapIndex = 11;</code>\n */\n", "func_signal": "public Builder addMapIndex(\n    int index, net.osmand.binary.OsmandIndex.MapPart.Builder builderForValue)", "code": "{\n  ensureMapIndexIsMutable();\n  mapIndex_.add(index, builderForValue.build());\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>optional string name = 3;</code>\n */\n", "func_signal": "public Builder setNameBytes(\n    com.google.protobuf.ByteString value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  bitField0_ |= 0x00000004;\n  name_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.TransportPart transportIndex = 9;</code>\n */\n", "func_signal": "public Builder addTransportIndex(\n    net.osmand.binary.OsmandIndex.TransportPart.Builder builderForValue)", "code": "{\n  ensureTransportIndexIsMutable();\n  transportIndex_.add(builderForValue.build());\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>optional string name = 3;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getNameBytes()", "code": "{\n  java.lang.Object ref = name_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    name_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required uint32 version = 1;</code>\n */\n", "func_signal": "public Builder clearVersion()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000001);\n  version_ = 0;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated string additionalTags = 9;</code>\n */\n", "func_signal": "public Builder addAllAdditionalTags(\n    java.lang.Iterable<java.lang.String> values)", "code": "{\n  ensureAdditionalTagsIsMutable();\n  super.addAll(values, additionalTags_);\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required int64 offset = 2;</code>\n */\n", "func_signal": "public Builder clearOffset()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000002);\n  offset_ = 0L;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>optional string name = 3;</code>\n */\n", "func_signal": "public java.lang.String getName()", "code": "{\n  java.lang.Object ref = name_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    if (bs.isValidUtf8()) {\n      name_ = s;\n    }\n    return s;\n  }\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.RoutingSubregion subregions = 5;</code>\n */\n", "func_signal": "public Builder addSubregions(\n    int index, net.osmand.binary.OsmandIndex.RoutingSubregion value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  ensureSubregionsIsMutable();\n  subregions_.add(index, value);\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required int32 bottom = 7;</code>\n */\n", "func_signal": "public Builder clearBottom()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000040);\n  bottom_ = 0;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required uint32 shifToData = 8;</code>\n */\n", "func_signal": "public Builder clearShifToData()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000080);\n  shifToData_ = 0;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>repeated .OsmAnd.OBF.PoiPart poiIndex = 10;</code>\n */\n", "func_signal": "public Builder addPoiIndex(net.osmand.binary.OsmandIndex.PoiPart value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  ensurePoiIndexIsMutable();\n  poiIndex_.add(value);\n\n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>required int64 size = 1;</code>\n */\n", "func_signal": "public Builder setSize(long value)", "code": "{\n  bitField0_ |= 0x00000001;\n  size_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>optional int32 left = 4;</code>\n */\n", "func_signal": "public Builder clearLeft()", "code": "{\n  bitField0_ = (bitField0_ & ~0x00000008);\n  left_ = 0;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "/**\n * <code>optional uint32 stopsTableOffset = 10;</code>\n */\n", "func_signal": "public Builder setStopsTableOffset(int value)", "code": "{\n  bitField0_ |= 0x00000200;\n  stopsTableOffset_ = value;\n  \n  return this;\n}", "path": "OsmAnd/OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "osmandapp/OsmAnd", "stars": 4188, "license": "other", "language": "java", "size": 846133}
{"docstring": "// do something much faster than the full parser if\n// we just have something like \"foo\" or \"foo.bar\"\n", "func_signal": "private static Path speculativeFastParsePath(String path)", "code": "{\n    String s = ConfigImplUtil.unicodeTrim(path);\n    if (looksUnsafeForFastParser(s))\n        return null;\n\n    return fastPathBuild(null, s, s.length());\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/PathParser.java", "commit_date": "2015-03-19 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// ONE char has always been consumed, either the # or the first /, but\n// not both slashes\n", "func_signal": "private Token pullComment(int firstChar)", "code": "{\n    boolean doubleSlash = false;\n    if (firstChar == '/') {\n        int discard = nextCharRaw();\n        if (discard != '/')\n            throw new ConfigException.BugOrBroken(\"called pullComment but // not seen\");\n        doubleSlash = true;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (;;) {\n        int c = nextCharRaw();\n        if (c == -1 || c == '\\n') {\n            putBack(c);\n            if (doubleSlash)\n                return Tokens.newCommentDoubleSlash(lineOrigin, sb.toString());\n            else\n                return Tokens.newCommentHash(lineOrigin, sb.toString());\n        } else {\n            sb.appendCodePoint(c);\n        }\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/Tokenizer.java", "commit_date": "2015-07-09 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// For deserialization - uses reflection to set the final origin field on the object\n", "func_signal": "private static <T> void setOriginField(T hasOriginField, Class<T> clazz,\n        ConfigOrigin origin) throws IOException", "code": "{\n    // circumvent \"final\"\n    Field f;\n    try {\n        f = clazz.getDeclaredField(\"origin\");\n    } catch (NoSuchFieldException e) {\n        throw new IOException(clazz.getSimpleName() + \" has no origin field?\", e);\n    } catch (SecurityException e) {\n        throw new IOException(\"unable to fill out origin field in \" +\n                clazz.getSimpleName(), e);\n    }\n    f.setAccessible(true);\n    try {\n        f.set(hasOriginField, origin);\n    } catch (IllegalArgumentException e) {\n        throw new IOException(\"unable to set origin field\", e);\n    } catch (IllegalAccessException e) {\n        throw new IOException(\"unable to set origin field\", e);\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/ConfigException.java", "commit_date": "2019-08-20 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// this is a separate function to prevent bugs writing to the\n// outer stream instead of field.data\n", "func_signal": "private static void writeOriginField(DataOutput out, SerializedField code, Object v)\n        throws IOException", "code": "{\n    switch (code) {\n    case ORIGIN_DESCRIPTION:\n        out.writeUTF((String) v);\n        break;\n    case ORIGIN_LINE_NUMBER:\n        out.writeInt((Integer) v);\n        break;\n    case ORIGIN_END_LINE_NUMBER:\n        out.writeInt((Integer) v);\n        break;\n    case ORIGIN_TYPE:\n        out.writeByte((Integer) v);\n        break;\n    case ORIGIN_URL:\n        out.writeUTF((String) v);\n        break;\n    case ORIGIN_RESOURCE:\n        out.writeUTF((String) v);\n        break;\n    case ORIGIN_COMMENTS:\n        @SuppressWarnings(\"unchecked\")\n        List<String> list = (List<String>) v;\n        int size = list.size();\n        out.writeInt(size);\n        for (String s : list) {\n            out.writeUTF(s);\n        }\n        break;\n    case ORIGIN_NULL_URL: // FALL THRU\n    case ORIGIN_NULL_RESOURCE: // FALL THRU\n    case ORIGIN_NULL_COMMENTS:\n        // nothing to write out besides code and length\n        break;\n    default:\n        throw new IOException(\"Unhandled field from origin: \" + code);\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/SerializedConfigValue.java", "commit_date": "2017-05-10 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// called if the next token IS a simple value,\n// so creates a whitespace token if the previous\n// token also was.\n", "func_signal": "private Token nextIsASimpleValue(ConfigOrigin baseOrigin,\n        int lineNumber)", "code": "{\n    Token t = createWhitespaceTokenFromSaver(baseOrigin, lineNumber);\n    if (!lastTokenWasSimpleValue) {\n        lastTokenWasSimpleValue = true;\n    }\n    return t;\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/Tokenizer.java", "commit_date": "2015-07-09 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// this is only overridden to change the return type\n", "func_signal": "@Override\npublic AbstractConfigValue withFallback(ConfigMergeable mergeable)", "code": "{\n    if (ignoresFallbacks()) {\n        return this;\n    } else {\n        ConfigValue other = ((MergeableValue) mergeable).toFallbackValue();\n\n        if (other instanceof Unmergeable) {\n            return mergedWithTheUnmergeable((Unmergeable) other);\n        } else if (other instanceof AbstractConfigObject) {\n            return mergedWithObject((AbstractConfigObject) other);\n        } else {\n            return mergedWithNonObject((AbstractConfigValue) other);\n        }\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java", "commit_date": "2015-03-05 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// when Java deserializer reads this object, return the contained\n// object instead.\n", "func_signal": "private Object readResolve() throws ObjectStreamException", "code": "{\n    if (wasConfig)\n        return ((ConfigObject) value).toConfig();\n    else\n        return value;\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/SerializedConfigValue.java", "commit_date": "2017-05-10 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// as a side effect, findInObject() will have to resolve all parents of the\n// child being peeked, but NOT the child itself. Caller has to resolve\n// the child itself if needed. ValueWithPath.value can be null but\n// the ValueWithPath instance itself should not be.\n", "func_signal": "static private ResultWithPath findInObject(AbstractConfigObject obj, ResolveContext context, Path path)\n        throws NotPossibleToResolve", "code": "{\n    // resolve ONLY portions of the object which are along our path\n    if (ConfigImpl.traceSubstitutionsEnabled())\n        ConfigImpl.trace(\"*** finding '\" + path + \"' in \" + obj);\n    Path restriction = context.restrictToChild();\n    ResolveResult<? extends AbstractConfigValue> partiallyResolved = context.restrict(path).resolve(obj,\n            new ResolveSource(obj));\n    ResolveContext newContext = partiallyResolved.context.restrict(restriction);\n    if (partiallyResolved.value instanceof AbstractConfigObject) {\n        ValueWithPath pair = findInObject((AbstractConfigObject) partiallyResolved.value, path);\n        return new ResultWithPath(ResolveResult.make(newContext, pair.value), pair.pathFromRoot);\n    } else {\n        throw new ConfigException.BugOrBroken(\"resolved object to non-object \" + obj + \" to \" + partiallyResolved);\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/ResolveSource.java", "commit_date": "2014-12-28 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// if we replace the root with a non-object, use an empty\n// object with nothing in it instead.\n", "func_signal": "private AbstractConfigObject rootMustBeObj(Container value)", "code": "{\n    if (value instanceof AbstractConfigObject) {\n        return (AbstractConfigObject) value;\n    } else {\n        return SimpleConfigObject.empty();\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/ResolveSource.java", "commit_date": "2014-12-28 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// The rules here are intended to maximize convenience while\n// avoiding confusion with real valid JSON. Basically anything\n// that parses as JSON is treated the JSON way and otherwise\n// we assume it's a string and let the parser sort it out.\n", "func_signal": "private Token pullUnquotedText()", "code": "{\n    ConfigOrigin origin = lineOrigin;\n    StringBuilder sb = new StringBuilder();\n    int c = nextCharRaw();\n    while (true) {\n        if (c == -1) {\n            break;\n        } else if (notInUnquotedText.indexOf(c) >= 0) {\n            break;\n        } else if (isWhitespace(c)) {\n            break;\n        } else if (startOfComment(c)) {\n            break;\n        } else {\n            sb.appendCodePoint(c);\n        }\n\n        // we parse true/false/null tokens as such no matter\n        // what is after them, as long as they are at the\n        // start of the unquoted token.\n        if (sb.length() == 4) {\n            String s = sb.toString();\n            if (s.equals(\"true\"))\n                return Tokens.newBoolean(origin, true);\n            else if (s.equals(\"null\"))\n                return Tokens.newNull(origin);\n        } else if (sb.length() == 5) {\n            String s = sb.toString();\n            if (s.equals(\"false\"))\n                return Tokens.newBoolean(origin, false);\n        }\n\n        c = nextCharRaw();\n    }\n\n    // put back the char that ended the unquoted text\n    putBack(c);\n\n    String s = sb.toString();\n    return Tokens.newUnquotedText(origin, s);\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/Tokenizer.java", "commit_date": "2015-07-09 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// the idea is to see if the string has any chars or features\n// that might require the full parser to deal with.\n", "func_signal": "private static boolean looksUnsafeForFastParser(String s)", "code": "{\n    boolean lastWasDot = true; // start of path is also a \"dot\"\n    int len = s.length();\n    if (s.isEmpty())\n        return true;\n    if (s.charAt(0) == '.')\n        return true;\n    if (s.charAt(len - 1) == '.')\n        return true;\n\n    for (int i = 0; i < len; ++i) {\n        char c = s.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_') {\n            lastWasDot = false;\n            continue;\n        } else if (c == '.') {\n            if (lastWasDot)\n                return true; // \"..\" means we need to throw an error\n            lastWasDot = true;\n        } else if (c == '-') {\n            if (lastWasDot)\n                return true;\n            continue;\n        } else {\n            return true;\n        }\n    }\n\n    if (lastWasDot)\n        return true;\n\n    return false;\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/PathParser.java", "commit_date": "2015-03-19 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// returns null if the replacement results in deleting all the nodes.\n", "func_signal": "private static Node<Container> replace(Node<Container> list, Container old, AbstractConfigValue replacement)", "code": "{\n    Container child = list.head();\n    if (child != old)\n        throw new ConfigException.BugOrBroken(\"Can only replace() the top node we're resolving; had \" + child\n                + \" on top and tried to replace \" + old + \" overall list was \" + list);\n    Container parent = list.tail() == null ? null : list.tail().head();\n    if (replacement == null || !(replacement instanceof Container)) {\n        if (parent == null) {\n            return null;\n        } else {\n            /*\n             * we are deleting the child from the stack of containers\n             * because it's either going away or not a container\n             */\n            AbstractConfigValue newParent = parent.replaceChild((AbstractConfigValue) old, null);\n\n            return replace(list.tail(), parent, newParent);\n        }\n    } else {\n        /* we replaced the container with another container */\n        if (parent == null) {\n            return new Node<Container>((Container) replacement);\n        } else {\n            AbstractConfigValue newParent = parent.replaceChild((AbstractConfigValue) old, replacement);\n            Node<Container> newTail = replace(list.tail(), parent, newParent);\n            if (newTail != null)\n                return newTail.prepend((Container) replacement);\n            else\n                return new Node<Container>((Container) replacement);\n        }\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/ResolveSource.java", "commit_date": "2014-12-28 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// called if the next token is not a simple value;\n// discards any whitespace we were saving between\n// simple values.\n", "func_signal": "private Token nextIsNotASimpleValue(ConfigOrigin baseOrigin, int lineNumber)", "code": "{\n    lastTokenWasSimpleValue = false;\n    return createWhitespaceTokenFromSaver(baseOrigin, lineNumber);\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/Tokenizer.java", "commit_date": "2015-07-09 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// We customize serialization because ConfigOrigin isn't\n// serializable and we don't want it to be\n", "func_signal": "private void writeObject(java.io.ObjectOutputStream out) throws IOException", "code": "{\n    out.defaultWriteObject();\n    ConfigImplUtil.writeOrigin(out, origin);\n}", "path": "config/config/src/main/java/com/typesafe/config/ConfigException.java", "commit_date": "2019-08-20 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// this should ONLY be called from nextCharSkippingComments\n// or when inside a quoted string, or when parsing a sequence\n// like ${ or +=, everything else should use\n// nextCharSkippingComments().\n", "func_signal": "private int nextCharRaw()", "code": "{\n    if (buffer.isEmpty()) {\n        try {\n            return input.read();\n        } catch (IOException e) {\n            throw new ConfigException.IO(origin, \"read error: \"\n                    + e.getMessage(), e);\n        }\n    } else {\n        int c = buffer.pop();\n        return c;\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/Tokenizer.java", "commit_date": "2015-07-09 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// merge a bunch of adjacent values into one\n// value; change unquoted text into a string\n// value.\n", "func_signal": "private AbstractConfigValue parseConcatenation(ConfigNodeConcatenation n)", "code": "{\n    // this trick is not done in JSON\n    if (flavor == ConfigSyntax.JSON)\n        throw new ConfigException.BugOrBroken(\"Found a concatenation node in JSON\");\n\n    List<AbstractConfigValue> values = new ArrayList<AbstractConfigValue>(n.children().size());\n\n    for (AbstractConfigNode node : n.children()) {\n        AbstractConfigValue v = null;\n        if (node instanceof AbstractConfigNodeValue) {\n            v = parseValue((AbstractConfigNodeValue)node, null);\n            values.add(v);\n        }\n    }\n\n    return ConfigConcatenation.concatenate(values);\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/ConfigParser.java", "commit_date": "2019-09-03 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "/**\n * Guess configuration syntax from given filename.\n *\n * @param filename configuration filename\n * @return configuration syntax if a match is found. Otherwise, null.\n */\n", "func_signal": "public static ConfigSyntax syntaxFromExtension(String filename)", "code": "{\n    if (filename == null)\n        return null;\n    else if (filename.endsWith(\".json\"))\n        return ConfigSyntax.JSON;\n    else if (filename.endsWith(\".conf\"))\n        return ConfigSyntax.CONF;\n    else if (filename.endsWith(\".properties\"))\n        return ConfigSyntax.PROPERTIES;\n    else\n        return null;\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/ConfigImplUtil.java", "commit_date": "2019-03-21 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// originalText may be null if not available\n", "func_signal": "protected static Path parsePathExpression(Iterator<Token> expression,\n                                        ConfigOrigin origin, String originalText,\n                                        ArrayList<Token> pathTokens,\n                                        ConfigSyntax flavor)", "code": "{\n    // each builder in \"buf\" is an element in the path.\n    List<Element> buf = new ArrayList<Element>();\n    buf.add(new Element(\"\", false));\n\n    if (!expression.hasNext()) {\n        throw new ConfigException.BadPath(origin, originalText,\n                \"Expecting a field name or path here, but got nothing\");\n    }\n\n    while (expression.hasNext()) {\n        Token t = expression.next();\n\n        if (pathTokens != null)\n            pathTokens.add(t);\n\n        // Ignore all IgnoredWhitespace tokens\n        if (Tokens.isIgnoredWhitespace(t))\n            continue;\n\n        if (Tokens.isValueWithType(t, ConfigValueType.STRING)) {\n            AbstractConfigValue v = Tokens.getValue(t);\n            // this is a quoted string; so any periods\n            // in here don't count as path separators\n            String s = v.transformToString();\n\n            addPathText(buf, true, s);\n        } else if (t == Tokens.END) {\n            // ignore this; when parsing a file, it should not happen\n            // since we're parsing a token list rather than the main\n            // token iterator, and when parsing a path expression from the\n            // API, it's expected to have an END.\n        } else {\n            // any periods outside of a quoted string count as\n            // separators\n            String text;\n            if (Tokens.isValue(t)) {\n                // appending a number here may add\n                // a period, but we _do_ count those as path\n                // separators, because we basically want\n                // \"foo 3.0bar\" to parse as a string even\n                // though there's a number in it. The fact that\n                // we tokenize non-string values is largely an\n                // implementation detail.\n                AbstractConfigValue v = Tokens.getValue(t);\n\n                // We need to split the tokens on a . so that we can get sub-paths but still preserve\n                // the original path text when doing an insertion\n                if (pathTokens != null) {\n                    pathTokens.remove(pathTokens.size() - 1);\n                    pathTokens.addAll(splitTokenOnPeriod(t, flavor));\n                }\n                text = v.transformToString();\n            } else if (Tokens.isUnquotedText(t)) {\n                // We need to split the tokens on a . so that we can get sub-paths but still preserve\n                // the original path text when doing an insertion on ConfigNodeObjects\n                if (pathTokens != null) {\n                    pathTokens.remove(pathTokens.size() - 1);\n                    pathTokens.addAll(splitTokenOnPeriod(t, flavor));\n                }\n                text = Tokens.getUnquotedText(t);\n            } else {\n                throw new ConfigException.BadPath(\n                        origin,\n                        originalText,\n                        \"Token not allowed in path expression: \"\n                                + t\n                                + \" (you can double-quote this token if you really want it here)\");\n            }\n\n            addPathText(buf, false, text);\n        }\n    }\n\n    PathBuilder pb = new PathBuilder();\n    for (Element e : buf) {\n        if (e.sb.length() == 0 && !e.canBeEmpty) {\n            throw new ConfigException.BadPath(\n                    origin,\n                    originalText,\n                    \"path has a leading, trailing, or two adjacent period '.' (use quoted \\\"\\\" empty string if you want an empty element)\");\n        } else {\n            pb.appendKey(e.sb.toString());\n        }\n    }\n\n    return pb.result();\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/PathParser.java", "commit_date": "2015-03-19 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// the withFallback() implementation is supposed to avoid calling\n// mergedWith* if we're ignoring fallbacks.\n", "func_signal": "protected final void requireNotIgnoringFallbacks()", "code": "{\n    if (ignoresFallbacks())\n        throw new ConfigException.BugOrBroken(\n                \"method should not have been called with ignoresFallbacks=true \"\n                        + getClass().getSimpleName());\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java", "commit_date": "2015-03-05 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "// this is the heuristic includer\n", "func_signal": "@Override\npublic ConfigObject include(final ConfigIncludeContext context, String name)", "code": "{\n    ConfigObject obj = includeWithoutFallback(context, name);\n\n    // now use the fallback includer if any and merge\n    // its result.\n    if (fallback != null) {\n        return obj.withFallback(fallback.include(context, name));\n    } else {\n        return obj;\n    }\n}", "path": "config/config/src/main/java/com/typesafe/config/impl/SimpleIncluder.java", "commit_date": "2013-07-12 00:00:00", "repo_name": "lightbend/config", "stars": 6075, "license": "None", "language": "java", "size": 4644}
{"docstring": "/**\n * \u540e\u7f6e\u901a\u77e5(\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u8fd4\u56de) \u7528\u4e8e\u62e6\u622aController\u5c42\u64cd\u4f5c\n * @param joinPoint \u5207\u70b9\n */\n", "func_signal": "@After(\"controllerAspect()\")\npublic void after(JoinPoint joinPoint)", "code": "{\n    try {\n        String username= SecurityUtils.getSubject().getPrincipal().toString();\n\n        if (null != username) {\n\n            TbLog tbLog=new TbLog();\n\n            //\u65e5\u5fd7\u6807\u9898\n            tbLog.setName(getControllerMethodDescription(joinPoint));\n            //\u65e5\u5fd7\u7c7b\u578b\n            tbLog.setType(1);\n            //\u65e5\u5fd7\u8bf7\u6c42url\n            tbLog.setUrl(request.getRequestURI());\n            //\u8bf7\u6c42\u65b9\u5f0f\n            tbLog.setRequestType(request.getMethod());\n            //\u8bf7\u6c42\u53c2\u6570\n            Map<String,String[]> logParams = request.getParameterMap();\n            tbLog.setMapToParams(logParams);\n            IPInfoUtil.getInfo(request, ObjectUtil.mapToStringAll(logParams));\n            //\u8bf7\u6c42\u7528\u6237\n            tbLog.setUser(username);\n            //\u8bf7\u6c42IP\n            tbLog.setIp(IPInfoUtil.getIpAddr(request));\n            //IP\u5730\u5740\n            tbLog.setIpInfo(IPInfoUtil.getIpCity(IPInfoUtil.getIpAddr(request)));\n            //\u8bf7\u6c42\u5f00\u59cb\u65f6\u95f4\n            Date logStartTime = beginTimeThreadLocal.get();\n\n            long beginTime = beginTimeThreadLocal.get().getTime();\n            long endTime = System.currentTimeMillis();\n            //\u8bf7\u6c42\u8017\u65f6\n            Long logElapsedTime = endTime - beginTime;\n            tbLog.setTime(Math.toIntExact(logElapsedTime));\n            tbLog.setCreateDate(logStartTime);\n\n            //\u8c03\u7528\u7ebf\u7a0b\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\n            ThreadPoolUtil.getPool().execute(new SaveSystemLogThread(tbLog,systemService));\n        }\n    } catch (Exception e) {\n        log.error(\"AOP\u540e\u7f6e\u901a\u77e5\u5f02\u5e38\", e);\n    }\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/aop/SystemLogAspect.java", "commit_date": "2018-08-28 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u4e0a\u4e2a\u6708\u7684\u7ed3\u675f\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getEndDayOfLastMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 2, 1);\n    int day = calendar.getActualMaximum(5);\n    calendar.set(getNowYear(), getNowMonth() - 2, day);\n    return getDayEndTime(calendar.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u6708\u662f\u54ea\u4e00\u6708\n * @return\n */\n", "func_signal": "public static int getNowMonth()", "code": "{\n    Date date = new Date();\n    GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();\n    gc.setTime(date);\n    return gc.get(2) + 1;\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u5468\u7684\u5f00\u59cb\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getBeginDayOfWeek()", "code": "{\n    Date date = new Date();\n    if (date == null) {\n        return null;\n    }\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    int dayofweek = cal.get(Calendar.DAY_OF_WEEK);\n    if (dayofweek == 1) {\n        dayofweek += 7;\n    }\n    cal.add(Calendar.DATE, 2 - dayofweek);\n    return getDayStartTime(cal.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u6ce8\u89e3\u4e2d\u5bf9\u65b9\u6cd5\u7684\u63cf\u8ff0\u4fe1\u606f \u7528\u4e8eService\u5c42\u6ce8\u89e3\n * @param joinPoint \u5207\u70b9\n * @return \u65b9\u6cd5\u63cf\u8ff0\n * @throws Exception\n */\n", "func_signal": "public static String getServiceMethodDescription(JoinPoint joinPoint) throws Exception", "code": "{\n    //\u83b7\u53d6\u76ee\u6807\u7c7b\u540d\n    String targetName = joinPoint.getTarget().getClass().getName();\n    //\u83b7\u53d6\u65b9\u6cd5\u540d\n    String methodName = joinPoint.getSignature().getName();\n    //\u83b7\u53d6\u76f8\u5173\u53c2\u6570\n    Object[] arguments = joinPoint.getArgs();\n    //\u751f\u6210\u7c7b\u5bf9\u8c61\n    Class targetClass = Class.forName(targetName);\n    //\u83b7\u53d6\u8be5\u7c7b\u4e2d\u7684\u65b9\u6cd5\n    Method[] methods = targetClass.getMethods();\n\n    String description = \"\";\n\n    for(Method method : methods) {\n        if(!method.getName().equals(methodName)) {\n            continue;\n        }\n        Class[] clazzs = method.getParameterTypes();\n        if(clazzs.length != arguments.length) {\n            //\u6bd4\u8f83\u65b9\u6cd5\u4e2d\u53c2\u6570\u4e2a\u6570\u4e0e\u4ece\u5207\u70b9\u4e2d\u83b7\u53d6\u7684\u53c2\u6570\u4e2a\u6570\u662f\u5426\u76f8\u540c\uff0c\u539f\u56e0\u662f\u65b9\u6cd5\u53ef\u4ee5\u91cd\u8f7d\u54e6\n            continue;\n        }\n        description = method.getAnnotation(SystemServiceLog.class).description();\n    }\n    return description;\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/aop/SystemLogAspect.java", "commit_date": "2018-08-28 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u7684\u7ed3\u675f\u65f6\u95f4\n * @param d\n * @return\n */\n", "func_signal": "public static Timestamp getDayEndTime(Date d)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    if(null != d) {\n        calendar.setTime(d);\n    }\n    calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH),    calendar.get(Calendar.DAY_OF_MONTH), 23, 59, 59);\n    calendar.set(Calendar.MILLISECOND, 999);\n    return new Timestamp(calendar.getTimeInMillis());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u6ce8\u89e3\u4e2d\u5bf9\u65b9\u6cd5\u7684\u63cf\u8ff0\u4fe1\u606f \u7528\u4e8eController\u5c42\u6ce8\u89e3\n * @param joinPoint \u5207\u70b9\n * @return \u65b9\u6cd5\u63cf\u8ff0\n * @throws Exception\n */\n", "func_signal": "public static String getControllerMethodDescription(JoinPoint joinPoint) throws Exception", "code": "{\n    //\u83b7\u53d6\u76ee\u6807\u7c7b\u540d\n    String targetName = joinPoint.getTarget().getClass().getName();\n    //\u83b7\u53d6\u65b9\u6cd5\u540d\n    String methodName = joinPoint.getSignature().getName();\n    //\u83b7\u53d6\u76f8\u5173\u53c2\u6570\n    Object[] arguments = joinPoint.getArgs();\n    //\u751f\u6210\u7c7b\u5bf9\u8c61\n    Class targetClass = Class.forName(targetName);\n    //\u83b7\u53d6\u8be5\u7c7b\u4e2d\u7684\u65b9\u6cd5\n    Method[] methods = targetClass.getMethods();\n\n    String description = \"\";\n\n    for(Method method : methods) {\n        if(!method.getName().equals(methodName)) {\n            continue;\n        }\n        Class[] clazzs = method.getParameterTypes();\n        if(clazzs.length != arguments.length) {\n            //\u6bd4\u8f83\u65b9\u6cd5\u4e2d\u53c2\u6570\u4e2a\u6570\u4e0e\u4ece\u5207\u70b9\u4e2d\u83b7\u53d6\u7684\u53c2\u6570\u4e2a\u6570\u662f\u5426\u76f8\u540c\uff0c\u539f\u56e0\u662f\u65b9\u6cd5\u53ef\u4ee5\u91cd\u8f7d\u54e6\n            continue;\n        }\n        description = method.getAnnotation(SystemControllerLog.class).description();\n    }\n    return description;\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/aop/SystemLogAspect.java", "commit_date": "2018-08-28 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u968f\u673aid\u751f\u6210\n */\n", "func_signal": "public static long getRandomId()", "code": "{\n    long millis = System.currentTimeMillis();\n    //\u52a0\u4e0a\u4e24\u4f4d\u968f\u673a\u6570\n    Random random = new Random();\n    int end2 = random.nextInt(99);\n    //\u5982\u679c\u4e0d\u8db3\u4e24\u4f4d\u524d\u9762\u88650\n    String str = millis + String.format(\"%02d\", end2);\n    long id = new Long(str);\n    return id;\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/IDUtil.java", "commit_date": "2017-10-21 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u524d\u7f6e\u901a\u77e5 (\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u8fd4\u56de)\u7528\u4e8e\u62e6\u622aController\u5c42\u8bb0\u5f55\u7528\u6237\u7684\u64cd\u4f5c\u7684\u5f00\u59cb\u65f6\u95f4\n * @param joinPoint \u5207\u70b9\n * @throws InterruptedException\n */\n", "func_signal": "@Before(\"controllerAspect()\")\npublic void doBefore(JoinPoint joinPoint) throws InterruptedException", "code": "{\n\n    //\u7ebf\u7a0b\u7ed1\u5b9a\u53d8\u91cf\uff08\u8be5\u6570\u636e\u53ea\u6709\u5f53\u524d\u8bf7\u6c42\u7684\u7ebf\u7a0b\u53ef\u89c1\uff09\n    Date beginTime=new Date();\n    beginTimeThreadLocal.set(beginTime);\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/aop/SystemLogAspect.java", "commit_date": "2018-08-28 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u5e74\u7684\u7ed3\u675f\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getEndDayOfYear(Integer year)", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.set(Calendar.YEAR, year);\n    cal.set(Calendar.MONTH, Calendar.DECEMBER);\n    cal.set(Calendar.DATE, 31);\n    return getDayEndTime(cal.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n *  \u4f7f\u7528response\u8f93\u51faJSON\n * @param response\n * @param resultMap\n */\n", "func_signal": "public static void out(ServletResponse response, Map<String, Object> resultMap)", "code": "{\n    PrintWriter out = null;\n    try {\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json\");\n        out = response.getWriter();\n        out.println(new Gson().toJson(resultMap));\n    } catch (Exception e) {\n        log.error(e + \"\u8f93\u51faJSON\u51fa\u9519\");\n    }finally{\n        if(out!=null){\n            out.flush();\n            out.close();\n        }\n    }\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/shiro/FilterUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u7684\u5f00\u59cb\u65f6\u95f4\n * @param d\n * @return\n */\n", "func_signal": "public static Timestamp getDayStartTime(Date d)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    if(null != d){\n        calendar.setTime(d);\n    }\n    calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH),    calendar.get(Calendar.DAY_OF_MONTH), 0, 0, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    return new Timestamp(calendar.getTimeInMillis());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u4e0a\u4e2a\u6708\u7684\u5f00\u59cb\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getBeginDayOfLastMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 2, 1);\n    return getDayStartTime(calendar.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u5e74\u7684\u5f00\u59cb\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getBeginDayOfYear(Integer year)", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.set(Calendar.YEAR, year);\n    // cal.set\n    cal.set(Calendar.MONTH, Calendar.JANUARY);\n    cal.set(Calendar.DATE, 1);\n\n    return getDayStartTime(cal.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u662f\u5426\u662fAjax\u8bf7\u6c42\n * @param request\n * @return\n */\n", "func_signal": "public static boolean isAjax(ServletRequest request)", "code": "{\n    String header = ((HttpServletRequest) request).getHeader(\"X-Requested-With\");\n    if(\"XMLHttpRequest\".equalsIgnoreCase(header)){\n        return true;\n    }\n    return false;\n}", "path": "xmall/xmall-manager-web/src/main/java/cn/exrick/manager/shiro/FilterUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u5468\u7684\u7ed3\u675f\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getEndDayOfWeek()", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(getBeginDayOfWeek());\n    cal.add(Calendar.DAY_OF_WEEK, 6);\n    Date weekEndSta = cal.getTime();\n    return getDayEndTime(weekEndSta);\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "//\u4f5c\u7528\u4e8e\u65b9\u6cd5\u4e0a\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface RateLimiter", "code": "{\n\n    int limit() default 5;\n    int timeout() default 1000;\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/annotation/RateLimiter.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u6708\u7684\u5f00\u59cb\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getBeginDayOfMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 1, 1);\n    return getDayStartTime(calendar.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u6708\u7684\u7ed3\u675f\u65f6\u95f4\n * @return\n */\n", "func_signal": "public static Date getEndDayOfMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 1, 1);\n    int day = calendar.getActualMaximum(5);\n    calendar.set(getNowYear(), getNowMonth() - 1, day);\n    return getDayEndTime(calendar.getTime());\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/**\n * \u83b7\u53d6\u4eca\u5e74\u662f\u54ea\u4e00\u5e74\n * @return\n */\n", "func_signal": "public static Integer getNowYear()", "code": "{\n    Date date = new Date();\n    GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();\n    gc.setTime(date);\n    return Integer.valueOf(gc.get(1));\n}", "path": "xmall/xmall-common/src/main/java/cn/exrick/common/utils/TimeUtil.java", "commit_date": "2018-05-31 00:00:00", "repo_name": "Exrick/xmall", "stars": 7077, "license": "gpl-3.0", "language": "java", "size": 110866}
{"docstring": "/*\n* \u8bbe\u7f6e\u63a7\u4ef6\u6240\u5728\u7684\u4f4d\u7f6eY\uff0c\u5e76\u4e14\u4e0d\u6539\u53d8\u5bbd\u9ad8\uff0c\n* Y\u4e3a\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u6b64\u65f6X\u53ef\u80fd\u5f520\n*/\n", "func_signal": "public static void setLayoutY(View view, int y)", "code": "{\n    ViewGroup.MarginLayoutParams margin = new ViewGroup.MarginLayoutParams(view.getLayoutParams());\n    margin.setMargins(margin.leftMargin, y, margin.rightMargin, y + margin.height);\n    RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(margin);\n    view.setLayoutParams(layoutParams);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragmentnet/WidgetController.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u8bfb\u6570\u636e\u6062\u590d\u6570\u636e\n", "func_signal": "@Override\npublic AlbumInfo createFromParcel(Parcel source)", "code": "{\n    AlbumInfo info = new AlbumInfo();\n    Bundle bundle = source.readBundle();\n    info.album_name = bundle.getString(KEY_ALBUM_NAME);\n    info.album_art = bundle.getString(KEY_ALBUM_ART);\n    info.number_of_songs = bundle.getInt(KEY_NUMBER_OF_SONGS);\n    info.album_id = bundle.getInt(KEY_ALBUM_ID);\n    info.album_artist = bundle.getString(KEY_ALBUM_ARTIST);\n    info.album_sort = bundle.getString(KEY_ALBUM_SORT);\n    return info;\n}", "path": "remusic/app/src/main/java/com/wm/remusic/info/AlbumInfo.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/*\n* \u8bbe\u7f6e\u63a7\u4ef6\u6240\u5728\u7684\u4f4d\u7f6eYY\uff0c\u5e76\u4e14\u4e0d\u6539\u53d8\u5bbd\u9ad8\uff0c\n* XY\u4e3a\u7edd\u5bf9\u4f4d\u7f6e\n*/\n", "func_signal": "public static void setLayout(View view, int x, int y)", "code": "{ //ViewGroup.MarginLayoutParams margin = new ViewGroup.MarginLayoutParams(group.getLayoutParams());\n    ViewGroup.MarginLayoutParams margin = new ViewGroup.MarginLayoutParams(view.getLayoutParams());\n    margin.setMargins(x, y, 0, 0);\n    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(margin);\n//        RelativeLayout.LayoutParams vlp = new RelativeLayout.LayoutParams(\n//                ViewGroup.LayoutParams.WRAP_CONTENT,\n//                ViewGroup.LayoutParams.WRAP_CONTENT);\n//        vlp.setMargins(x,y, x+margin.width, y+margin.height);\n    view.setLayoutParams(layoutParams);\n    // view.setLayoutParams(vlp);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragmentnet/WidgetController.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u8bbe\u7f6e\u5206\u5272\u7ebf\n", "func_signal": "private void setItemDecoration()", "code": "{\n    itemDecoration = new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL_LIST);\n    recyclerView.addItemDecoration(itemDecoration);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/FolderFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u66f4\u65b0adapter\u754c\u9762\n", "func_signal": "public void reloadAdapter()", "code": "{\n    new AsyncTask<Void, Void, Void>() {\n        @Override\n        protected Void doInBackground(final Void... unused) {\n            isAZSort = mPreferences.getFoloerSortOrder().equals(SortOrder.FolderSortOrder.FOLDER_A_Z);\n            Log.e(\"sort\", \"foler\" + isAZSort);\n            List<FolderInfo> folderList = MusicUtils.queryFolder(mContext);\n            for (int i = 0; i < folderList.size(); i++) {\n                List<MusicInfo> albumList = MusicUtils.queryMusic(MainApplication.context, folderList.get(i).folder_path, IConstants.START_FROM_FOLDER);\n                folderList.get(i).folder_count = albumList.size();\n            }\n            if (isAZSort) {\n                Collections.sort(folderList, new FolderComparator());\n                for (int i = 0; i < folderList.size(); i++) {\n                    if (positionMap.get(folderList.get(i).folder_sort) == null)\n                        positionMap.put(folderList.get(i).folder_sort, i);\n                }\n            } else {\n                Collections.sort(folderList, new FolderCountComparator());\n            }\n            mAdapter.updateDataSet(folderList);\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(Void aVoid) {\n            if (isAZSort) {\n                recyclerView.addOnScrollListener(scrollListener);\n            } else {\n                sideBar.setVisibility(View.INVISIBLE);\n                recyclerView.removeOnScrollListener(scrollListener);\n            }\n            mAdapter.notifyDataSetChanged();\n        }\n    }.execute();\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/FolderFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u5199\u6570\u636e\u4fdd\u5b58\u6570\u636e\n", "func_signal": "@Override\npublic void writeToParcel(Parcel dest, int flags)", "code": "{\n    Bundle bundle = new Bundle();\n    bundle.putString(KEY_ALBUM_NAME, album_name);\n    bundle.putString(KEY_ALBUM_ART, album_art);\n    bundle.putInt(KEY_NUMBER_OF_SONGS, number_of_songs);\n    bundle.putInt(KEY_ALBUM_ID, album_id);\n    bundle.putString(KEY_ALBUM_ARTIST, album_artist);\n    bundle.putString(KEY_ALBUM_SORT, album_sort);\n    dest.writeBundle(bundle);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/info/AlbumInfo.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * Change the format of the small text showing the percentage of progress.\n * The default is\n * {@link NumberFormat#getPercentInstance() NumberFormat.getPercentageInstnace().}\n * Should not be called during the number is progressing.\n *\n * @param format An instance of a {@link NumberFormat} to generate the\n *               percentage text.  If null, nothing will be shown.\n */\n", "func_signal": "public void setProgressPercentFormat(NumberFormat format)", "code": "{\n    mProgressPercentFormat = format;\n    onProgressChanged();\n}", "path": "remusic/app/src/main/java/com/bilibili/magicasakura/widgets/TintProgressDialog.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u8bbe\u7f6e\u5206\u5272\u7ebf\n", "func_signal": "private void setItemDecoration()", "code": "{\n    RecyclerView.ItemDecoration itemDecoration = new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL_LIST);\n    recyclerView.addItemDecoration(itemDecoration);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/FolderDetailFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * Change the format of the small text showing current and maximum units\n * of progress.  The default is \"%1d/%2d\".\n * Should not be called during the number is progressing.\n *\n * @param format A string passed to {@link String#format String.format()};\n *               use \"%1d\" for the current number and \"%2d\" for the maximum.  If null,\n *               nothing will be shown.\n */\n", "func_signal": "public void setProgressNumberFormat(String format)", "code": "{\n    mProgressNumberFormat = format;\n    onProgressChanged();\n}", "path": "remusic/app/src/main/java/com/bilibili/magicasakura/widgets/TintProgressDialog.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/*\n* \u83b7\u53d6\u63a7\u4ef6\u5bbd\n*/\n", "func_signal": "public static int getWidth(View view)", "code": "{\n    int w = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n    int h = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n    view.measure(w, h);\n    return (view.getMeasuredWidth());\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragmentnet/WidgetController.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * \u83b7\u53d6\u4e13\u8f91\u4fe1\u606f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static List<AlbumInfo> queryAlbums(Context context)", "code": "{\n\n    ContentResolver cr = context.getContentResolver();\n    StringBuilder where = new StringBuilder(Albums._ID\n            + \" in (select distinct \" + Media.ALBUM_ID\n            + \" from audio_meta where (1=1)\");\n    where.append(\" and \" + Media.SIZE + \" > \" + FILTER_SIZE);\n    where.append(\" and \" + Media.DURATION + \" > \" + FILTER_DURATION);\n\n    where.append(\" )\");\n\n    // Media.ALBUM_KEY \u6309\u4e13\u8f91\u540d\u79f0\u6392\u5e8f\n    List<AlbumInfo> list = getAlbumList(cr.query(Albums.EXTERNAL_CONTENT_URI, proj_album,\n            where.toString(), null, PreferencesUtility.getInstance(context).getAlbumSortOrder()));\n    return list;\n\n}", "path": "remusic/app/src/main/java/com/wm/remusic/uitl/MusicUtils.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/*\n* \u83b7\u53d6\u63a7\u4ef6\u9ad8\n*/\n", "func_signal": "public static int getHeight(View view)", "code": "{\n    int w = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n    int h = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n    view.measure(w, h);\n    return (view.getMeasuredHeight());\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragmentnet/WidgetController.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u64ad\u653e\u6587\u4ef6\u5939\n", "func_signal": "@Override\npublic void onClick(View v)", "code": "{\n    HandlerUtil.getInstance(mContext).postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            long[] list = new long[mList.size()];\n            HashMap<Long, MusicInfo> infos = new HashMap();\n            for (int i = 0; i < mList.size(); i++) {\n                MusicInfo info = mList.get(i);\n                list[i] = info.songId;\n                info.islocal = true;\n                info.albumData = MusicUtils.getAlbumArtUri(info.albumId) + \"\";\n                infos.put(list[i], mList.get(i));\n            }\n            MusicPlayer.playAll(infos, list, 0, false);\n        }\n    },70);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/FolderDetailFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/*\n* \u8bbe\u7f6e\u63a7\u4ef6\u6240\u5728\u7684\u4f4d\u7f6eX\uff0c\u5e76\u4e14\u4e0d\u6539\u53d8\u5bbd\u9ad8\uff0c\n* X\u4e3a\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u6b64\u65f6Y\u53ef\u80fd\u5f520\n*/\n", "func_signal": "public static void setLayoutX(View view, int x)", "code": "{\n    ViewGroup.MarginLayoutParams margin = new ViewGroup.MarginLayoutParams(view.getLayoutParams());\n    margin.setMargins(x, margin.topMargin, x + margin.width, margin.bottomMargin);\n    RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(margin);\n    view.setLayoutParams(layoutParams);\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragmentnet/WidgetController.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * \u83b7\u53d6\u6b4c\u624b\u4fe1\u606f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static List<ArtistInfo> queryArtist(Context context)", "code": "{\n\n    Uri uri = MediaStore.Audio.Artists.EXTERNAL_CONTENT_URI;\n    ContentResolver cr = context.getContentResolver();\n    StringBuilder where = new StringBuilder(MediaStore.Audio.Artists._ID\n            + \" in (select distinct \" + Media.ARTIST_ID\n            + \" from audio_meta where (1=1 )\");\n    where.append(\" and \" + Media.SIZE + \" > \" + FILTER_SIZE);\n    where.append(\" and \" + Media.DURATION + \" > \" + FILTER_DURATION);\n\n    where.append(\")\");\n\n    List<ArtistInfo> list = getArtistList(cr.query(uri, proj_artist,\n            where.toString(), null, PreferencesUtility.getInstance(context).getArtistSortOrder()));\n\n    return list;\n\n}", "path": "remusic/app/src/main/java/com/wm/remusic/uitl/MusicUtils.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * Draws a circle centered in the view.\n *\n * @param canvas the canvas to draw on\n * @param cx     the center x coordinate\n * @param cy     the center y coordinate\n * @param color  the color to draw\n * @param pct    the percentage of the view that the circle should cover\n */\n", "func_signal": "private void drawCircle(Canvas canvas, float cx, float cy, int color, float pct)", "code": "{\n    mPaint.setColor(color);\n    canvas.save();\n    canvas.translate(cx, cy);\n    float radiusScale = INTERPOLATOR.getInterpolation(pct);\n    canvas.scale(radiusScale, radiusScale);\n    canvas.drawCircle(0, 0, cx, mPaint);\n    canvas.restore();\n}", "path": "remusic/app/src/main/java/com/wm/remusic/widget/SwipeProgressBar.java", "commit_date": "2016-08-05 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "// Get album art for specified album. This method will not try to\n// fall back to getting artwork directly from the file, nor will\n// it attempt to repair the database.\n", "func_signal": "public static Bitmap getArtworkQuick(Context context, long album_id, int w,\n                                     int h)", "code": "{\n    // NOTE: There is in fact a 1 pixel border on the right side in the\n    // ImageView\n    // used to display this drawable. Take it into account now, so we don't\n    // have to\n    // scale later.\n    w -= 1;\n    ContentResolver res = context.getContentResolver();\n    Uri uri = ContentUris.withAppendedId(sArtworkUri, album_id);\n//        Cursor cursor = res.query(uri, new String[]{}, null, null, null);\n//        if(cursor == null){\n//            return null;\n//        }else {\n\n    if (uri != null) {\n        ParcelFileDescriptor fd = null;\n        try {\n            fd = res.openFileDescriptor(uri, \"r\");\n            if (fd == null) {\n                return null;\n            }\n            int sampleSize = 1;\n\n            // Compute the closest power-of-two scale factor\n            // and pass that to sBitmapOptionsCache.inSampleSize, which will\n            // result in faster decoding and better quality\n            sBitmapOptionsCache.inJustDecodeBounds = true;\n            BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor(),\n                    null, sBitmapOptionsCache);\n            int nextWidth = sBitmapOptionsCache.outWidth >> 1;\n            int nextHeight = sBitmapOptionsCache.outHeight >> 1;\n            while (nextWidth > w && nextHeight > h) {\n                sampleSize <<= 1;\n                nextWidth >>= 1;\n                nextHeight >>= 1;\n            }\n\n            sBitmapOptionsCache.inSampleSize = sampleSize;\n            sBitmapOptionsCache.inJustDecodeBounds = false;\n            Bitmap b = BitmapFactory.decodeFileDescriptor(\n                    fd.getFileDescriptor(), null, sBitmapOptionsCache);\n\n            if (b != null) {\n                // finally rescale to exactly the size we need\n                if (sBitmapOptionsCache.outWidth != w\n                        || sBitmapOptionsCache.outHeight != h) {\n                    Bitmap tmp = Bitmap.createScaledBitmap(b, w, h, true);\n                    // Bitmap.createScaledBitmap() can return the same\n                    // bitmap\n                    if (tmp != b)\n                        b.recycle();\n                    b = tmp;\n                }\n            }\n\n            return b;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fd != null)\n                    fd.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n    return null;\n}\n\n}", "path": "remusic/app/src/main/java/com/wm/remusic/uitl/ImageUtils.java", "commit_date": "2017-01-20 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u5c06\u6570\u636e\u4e0e\u754c\u9762\u8fdb\u884c\u7ed1\u5b9a\n", "func_signal": "@Override\npublic void onBindViewHolder(RecyclerView.ViewHolder holder, int position)", "code": "{\n    MusicInfo model = null;\n    if (position > 0) {\n        model = mList.get(position - 1);\n    }\n    if (holder instanceof ListItemViewHolder) {\n\n        ((ListItemViewHolder) holder).mainTitle.setText(model.musicName.toString());\n        ((ListItemViewHolder) holder).title.setText(model.artist.toString());\n\n        //\u5224\u65ad\u8be5\u6761\u76ee\u97f3\u4e50\u662f\u5426\u5728\u64ad\u653e\n        if (MusicPlayer.getCurrentAudioId() == model.songId) {\n            ((ListItemViewHolder) holder).playState.setVisibility(View.VISIBLE);\n            ((ListItemViewHolder) holder).playState.setImageResource(R.drawable.song_play_icon);\n            ((ListItemViewHolder) holder).playState.setImageTintList(R.color.theme_color_primary);\n        } else {\n            ((ListItemViewHolder) holder).playState.setVisibility(View.GONE);\n        }\n\n    } else if (holder instanceof CommonItemViewHolder) {\n        ((CommonItemViewHolder) holder).textView.setText(\"(\u5171\" + mList.size() + \"\u9996)\");\n\n        ((CommonItemViewHolder) holder).select.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(mContext, SelectActivity.class);\n                intent.putParcelableArrayListExtra(\"ids\", mList);\n                intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n                mContext.startActivity(intent);\n            }\n        });\n\n    }\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/MusicFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * \u83b7\u53d6\u5305\u542b\u97f3\u9891\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u4fe1\u606f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static List<FolderInfo> queryFolder(Context context)", "code": "{\n\n    Uri uri = MediaStore.Files.getContentUri(\"external\");\n    ContentResolver cr = context.getContentResolver();\n    StringBuilder mSelection = new StringBuilder(FileColumns.MEDIA_TYPE\n            + \" = \" + FileColumns.MEDIA_TYPE_AUDIO + \" and \" + \"(\"\n            + FileColumns.DATA + \" like'%.mp3' or \" + Media.DATA\n            + \" like'%.wma')\");\n    // \u67e5\u8be2\u8bed\u53e5\uff1a\u68c0\u7d22\u51fa.mp3\u4e3a\u540e\u7f00\u540d\uff0c\u65f6\u957f\u5927\u4e8e1\u5206\u949f\uff0c\u6587\u4ef6\u5927\u5c0f\u5927\u4e8e1MB\u7684\u5a92\u4f53\u6587\u4ef6\n    mSelection.append(\" and \" + Media.SIZE + \" > \" + FILTER_SIZE);\n    mSelection.append(\" and \" + Media.DURATION + \" > \" + FILTER_DURATION);\n    mSelection.append(\") group by ( \" + FileColumns.PARENT);\n\n    List<FolderInfo> list = getFolderList(cr.query(uri, proj_folder, mSelection.toString(), null,\n            null));\n\n    return list;\n\n}", "path": "remusic/app/src/main/java/com/wm/remusic/uitl/MusicUtils.java", "commit_date": "2016-12-17 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "//\u66f4\u65b0adapter\u754c\u9762\n", "func_signal": "public void reloadAdapter()", "code": "{\n    new AsyncTask<Void, Void, Void>() {\n        @Override\n        protected Void doInBackground(final Void... unused) {\n            List<MusicInfo> albumList = MusicUtils.queryMusic(mContext, folder_path, IConstants.START_FROM_FOLDER);\n            folderDetailAdapter.updateDataSet(albumList);\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(Void aVoid) {\n            folderDetailAdapter.notifyDataSetChanged();\n        }\n    }.execute();\n}", "path": "remusic/app/src/main/java/com/wm/remusic/fragment/FolderDetailFragment.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "aa112901/remusic", "stars": 6207, "license": "None", "language": "java", "size": 115952}
{"docstring": "/**\n * Generates a past date relative to the {@code referenceDate}.\n *\n * @param atMost\n *            at most this amount of time past to the {@code referenceDate} exclusive.\n * @param unit\n *            the time unit.\n * @param referenceDate\n *            the past date relative to this date.\n * @return a past date relative to {@code referenceDate}.\n */\n", "func_signal": "public Date past(int atMost, TimeUnit unit, Date referenceDate)", "code": "{\n    long upperBound = unit.toMillis(atMost);\n\n    long futureMillis = referenceDate.getTime();\n    futureMillis -= 1 + faker.random().nextLong(upperBound - 1);\n\n    return new Date(futureMillis);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a future date from now, with a minimum time.\n *\n * @param atMost\n *            at most this amount of time ahead from now exclusive.\n * @param minimum\n *            the minimum amount of time in the future from now.\n * @param unit\n *            the time unit.\n * @return a future date from now.\n */\n", "func_signal": "public Date future(int atMost, int minimum, TimeUnit unit)", "code": "{\n    Date now = new Date();\n    Date minimumDate = new Date(now.getTime() + unit.toMillis(minimum));\n    return future(atMost - minimum, unit, minimumDate);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Returns a random number\n */\n", "func_signal": "public long randomNumber()", "code": "{\n    int numberOfDigits = decimalBetween(1,10).intValue();\n    return randomNumber(numberOfDigits, false);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a past date from now, with a minimum time.\n *\n * @param atMost\n *            at most this amount of time earlier from now exclusive.\n * @param minimum\n *            the minimum amount of time in the past from now.\n * @param unit\n *            the time unit.\n * @return a past date from now.\n */\n", "func_signal": "public Date past(int atMost, int minimum, TimeUnit unit)", "code": "{\n    Date now = new Date();\n    Date minimumDate = new Date(now.getTime() - unit.toMillis(minimum));\n    return past(atMost - minimum, unit, minimumDate);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Create a sentence with a random number of words within the range (wordCount+1)..(wordCount+randomWordsToAdd).</p>\n * \n * Set {@code randomWordsToAdd} to 0 to generate sentences with a fixed number of words.\n * @param wordCount\n * @param randomWordsToAdd\n * @return a random sentence\n */\n", "func_signal": "public String sentence(int wordCount, int randomWordsToAdd)", "code": "{\n    int numberOfWordsToAdd = randomWordsToAdd == 0 ? 0 : faker.random().nextInt(randomWordsToAdd);\n    return capitalize(join(words(wordCount + numberOfWordsToAdd), \" \") + \".\");\n}", "path": "java-faker/src/main/java/com/github/javafaker/Lorem.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a random date between two dates.\n *\n * @param from\n *            the lower bound inclusive\n * @param to\n *            the upper bound exclusive\n * @return a random date between {@code from} and {@code to}.\n * @throws IllegalArgumentException\n *             if the {@code to} date represents an earlier date than {@code from} date.\n */\n", "func_signal": "public Date between(Date from, Date to) throws IllegalArgumentException", "code": "{\n    if (to.before(from)) {\n        throw new IllegalArgumentException(\"Invalid date range, the upper bound date is before the lower bound.\");\n    }\n\n    if (from.equals(to)) {\n        return from;\n    }\n\n    long offsetMillis = faker.random().nextLong(to.getTime() - from.getTime());\n    return new Date(from.getTime() + offsetMillis);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * @param numberOfDigits the number of digits the generated value should have\n * @param strict         whether or not the generated value should have exactly <code>numberOfDigits</code>\n */\n", "func_signal": "public long randomNumber(int numberOfDigits, boolean strict)", "code": "{\n    long max = (long) Math.pow(10, numberOfDigits);\n    if (strict) {\n        long min = (long) Math.pow(10, numberOfDigits - 1);\n        return faker.random().nextLong(max - min) + min;\n    }\n\n    return faker.random().nextLong(max);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * <p>\n *     A lowercase username composed of the first_name and last_name joined with a '.'. Some examples are:\n *     <ul>\n *         <li>(template) {@link #firstName()}.{@link #lastName()}</li>\n *         <li>jim.jones</li>\n *         <li>jason.leigh</li>\n *         <li>tracy.jordan</li>\n *     </ul>\n * </p>\n * @return a random two part user name.\n * @see Name#firstName() \n * @see Name#lastName()\n */\n", "func_signal": "public String username()", "code": "{\n\n    String username = StringUtils.join(\n            firstName().replaceAll(\"'\", \"\").toLowerCase(),\n            \".\",\n            lastName().replaceAll(\"'\", \"\").toLowerCase()\n    );\n\n    return StringUtils.deleteWhitespace(username);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Name.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "// TODO - move these all out to en.yml by default. \n", "func_signal": "public String university()", "code": "{\n    return faker.fakeValuesService().resolve(\"educator.name\", this, faker) \n            + \" \" \n            + faker.fakeValuesService().resolve(\"educator.tertiary.type\", this, faker);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Educator.java", "commit_date": "2018-12-19 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * This can be overridden by specifying\n * <code>\n *     code:\n *       isbn_registrant: \"some expression\"\n * </code>\n * in the appropriate yml file.\n * @return an ISBN registrant 'element' with separator\n */\n", "func_signal": "public String isbnRegistrant()", "code": "{\n    int ct = faker.random().nextInt(6) + 1;\n    switch (ct) {\n        case 6:\n            return faker.number().numberBetween(0,1) + faker.number().digit() + \"-\" + faker.number().digits(6);\n        case 5:\n            return faker.number().numberBetween(200,699) + \"-\" + faker.number().digits(5);\n        case 4:\n            return faker.number().numberBetween(7000,8499) + \"-\" + faker.number().digits(4);\n        case 3:\n            return faker.number().numberBetween(85000,89999) + \"-\" + faker.number().digits(3);\n        case 2:\n            return faker.number().numberBetween(900000,949999) + \"-\" + faker.number().digits(2);\n        case 1:\n            return faker.number().numberBetween(9500000,9999999) + \"-\" + faker.number().digits(1);\n        default:\n            throw new IllegalStateException(\"Invalid random \" + ct);\n    }\n}", "path": "java-faker/src/main/java/com/github/javafaker/Code.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Returns a random double\n *\n * @param maxNumberOfDecimals maximum number of places\n * @param min                 minimum value\n * @param max                 maximum value\n */\n", "func_signal": "public double randomDouble(int maxNumberOfDecimals, long min, long max)", "code": "{\n    return decimalBetween(min,max)\n            .setScale(maxNumberOfDecimals, BigDecimal.ROUND_HALF_DOWN)\n            .doubleValue();\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Create a string with a fixed size. Can be useful for testing\n * validator based on length string for example\n *\n * @param numberOfLetters size of the expected String\n * @return a string with a fixed size\n */\n", "func_signal": "public String fixedString(int numberOfLetters)", "code": "{\n    StringBuilder builder = new StringBuilder();\n    while (builder.length() < numberOfLetters) {\n        builder.append(sentence());\n    }\n    return StringUtils.substring(builder.toString(), 0, numberOfLetters);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Lorem.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a past date from now. Note that there is a 1 second slack added.\n *\n * @param atMost\n *            at most this amount of time earlier from now exclusive.\n * @param unit\n *            the time unit.\n * @return a past date from now.\n */\n", "func_signal": "public Date past(int atMost, TimeUnit unit)", "code": "{\n    Date now = new Date();\n    Date aBitEarlierThanNow = new Date(now.getTime() - 1000);\n    return past(atMost, unit, aBitEarlierThanNow);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a future date from now. Note that there is a 1 second slack to avoid generating a past date.\n *\n * @param atMost\n *            at most this amount of time ahead from now exclusive.\n * @param unit\n *            the time unit.\n * @return a future date from now.\n */\n", "func_signal": "public Date future(int atMost, TimeUnit unit)", "code": "{\n    Date now = new Date();\n    Date aBitLaterThanNow = new Date(now.getTime() + 1000);\n    return future(atMost, unit, aBitLaterThanNow);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * @see Number#numberBetween(long, long) \n */\n", "func_signal": "public int numberBetween(int min, int max)", "code": "{\n    if (min == max) return min;\n\n    int value = decimalBetween(min,max).setScale(0, BigDecimal.ROUND_HALF_DOWN).intValue();\n    return value == max ? value - 1 : value;\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * @param separator true if you want separators returned, false otherwise\n * @return a valid ISBN13 number with or without separators (ex. 9789604250590, 978-960-425-059-0)\n */\n", "func_signal": "public String isbn13(boolean separator)", "code": "{\n    // The registration group identifier is a 1- to 5-digit number\n    final StringBuilder isbn13 = new StringBuilder()\n        .append(faker.expression(\"#{code.isbn_gs1}\"))\n        .append('-')\n        .append(faker.expression(\"#{code.isbn_group}\"))\n        .append('-')\n        .append(faker.expression(\"#{code.isbn_registrant}\"))\n        .append('-');\n\n    final int checkDigit = isbn13CheckDigit(isbn13);\n    isbn13.append(checkDigit);\n    return separator ? isbn13.toString() : stripIsbnSeparator(isbn13);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Code.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Two things are important here:\n * 1) the message in the exception should be USEFUL\n * 2) a {@link RuntimeException} should be thrown.\n *\n * if the message changes, it's ok to update the test provided\n * the two conditions above are still true.\n */\n", "func_signal": "@Test\npublic void expressionWithValidFakerObjectValidMethodInvalidArgs()", "code": "{\n    expressionShouldFailWith(\"#{Number.number_between 'x','y'}\",\n            \"Unable to resolve #{Number.number_between 'x','y'} directive.\");\n}", "path": "java-faker/src/test/java/com/github/javafaker/service/FakeValuesServiceTest.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Generates a future date relative to the {@code referenceDate}.\n *\n * @param atMost\n *            at most this amount of time ahead to the {@code referenceDate} exclusive.\n * @param unit\n *            the time unit.\n * @param referenceDate\n *            the future date relative to this date.\n * @return a future date relative to {@code referenceDate}.\n */\n", "func_signal": "public Date future(int atMost, TimeUnit unit, Date referenceDate)", "code": "{\n    long upperBound = unit.toMillis(atMost);\n\n    long futureMillis = referenceDate.getTime();\n    futureMillis += 1 + faker.random().nextLong(upperBound - 1);\n\n    return new Date(futureMillis);\n}", "path": "java-faker/src/main/java/com/github/javafaker/DateAndTime.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * @param min inclusive\n * @param max exclusive\n * @return\n */\n", "func_signal": "private BigDecimal decimalBetween(long min, long max)", "code": "{\n    if (min == max) {\n        return new BigDecimal(min);\n    }\n    final long trueMin = Math.min(min, max);\n    final long trueMax = Math.max(min, max);\n\n    final double range = (double) trueMax - (double) trueMin;\n    \n    final double chunkCount = Math.sqrt(Math.abs(range));\n    final double chunkSize = chunkCount;\n    final long randomChunk = faker.random().nextLong((long) chunkCount);\n\n    final double chunkStart = trueMin + randomChunk * chunkSize;\n    final double adj = chunkSize * faker.random().nextDouble();\n    return new BigDecimal(chunkStart + adj);\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Return a number between <em>min</em> and <em>max</em>.  If \n * min == max, then min is returned. So numberBetween(2,2) will yield 2 even though\n * it doesn't make sense.\n *\n * @param min inclusive\n * @param max exclusive (unless min == max)\n */\n", "func_signal": "public long numberBetween(long min, long max)", "code": "{\n    if (min == max) return min;\n\n    long value = decimalBetween(min, max).setScale(0, BigDecimal.ROUND_HALF_DOWN).longValue();\n    return value == max ? value - 1 : value;\n}", "path": "java-faker/src/main/java/com/github/javafaker/Number.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "DiUS/java-faker", "stars": 4503, "license": "other", "language": "java", "size": 6147}
{"docstring": "/**\n * Sets the current sharpness value:\n * 0.0: no change.\n * 1.0: maximum sharpness.\n *\n * @param value new sharpness\n */\n", "func_signal": "@SuppressWarnings(\"WeakerAccess\")\npublic void setSharpness(float value)", "code": "{\n    if (value < 0.0f) value = 0.0f;\n    if (value > 1.0f) value = 1.0f;\n    this.scale = value;\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/filters/SharpnessFilter.java", "commit_date": "2020-01-25 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Videos\n", "func_signal": "@EngineThread\n@Override\nprotected void onTakeVideo(@NonNull VideoResult.Stub stub)", "code": "{\n    LOG.i(\"onTakeVideo\", \"called.\");\n    stub.rotation = getAngles().offset(Reference.SENSOR, Reference.OUTPUT,\n            Axis.RELATIVE_TO_SENSOR);\n    stub.size = getAngles().flip(Reference.SENSOR, Reference.OUTPUT) ?\n            mCaptureSize.flip() : mCaptureSize;\n    // We must restart the session at each time.\n    // Save the pending data and restart the session.\n    LOG.w(\"onTakeVideo\", \"calling restartBind.\");\n    mFullVideoPendingStub = stub;\n    restartBind();\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Start & Stop binding\n", "func_signal": "@NonNull\n@EngineThread\nprivate Task<Void> startBind()", "code": "{\n    return mOrchestrator.scheduleStateChange(CameraState.ENGINE, CameraState.BIND,\n            true,\n            new Callable<Task<Void>>() {\n        @Override\n        public Task<Void> call() {\n            if (getPreview() != null && getPreview().hasSurface()) {\n                return onStartBind();\n            } else {\n                return Tasks.forCanceled();\n            }\n        }\n    });\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "// Note: gcd(0,X) = gcd(X,0) = X (even for X=0)\n", "func_signal": "private static int gcd(int a, int b)", "code": "{\n    while (b != 0) {\n        int c = b;\n        b = a % b;\n        a = c;\n    }\n    return a;\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/size/AspectRatio.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Start & Stop the engine\n", "func_signal": "@NonNull\n@EngineThread\nprivate Task<Void> startEngine()", "code": "{\n    return mOrchestrator.scheduleStateChange(CameraState.OFF, CameraState.ENGINE,\n            true,\n            new Callable<Task<CameraOptions>>() {\n        @Override\n        public Task<CameraOptions> call() {\n            if (!collectCameraInfo(getFacing())) {\n                LOG.e(\"onStartEngine:\", \"No camera available for facing\", getFacing());\n                throw new CameraException(CameraException.REASON_NO_CAMERA);\n            }\n            return onStartEngine();\n        }\n    }).onSuccessTask(new SuccessContinuation<CameraOptions, Void>() {\n        @NonNull\n        @Override\n        public Task<Void> then(@Nullable CameraOptions cameraOptions) {\n            // Put this on the outer task so we're sure it's called after getState() is changed.\n            // This was breaking some tests on rare occasions.\n            if (cameraOptions == null) throw new RuntimeException(\"Null options!\");\n            mCallback.dispatchOnCameraOpened(cameraOptions);\n            return Tasks.forResult(null);\n        }\n    });\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "// Trigger a destroy.\n", "func_signal": "protected void ensureDestroyed()", "code": "{\n    uiSync(new Runnable() {\n        @Override\n        public void run() {\n            rule.getActivity().getContentView().removeView(preview.getRootView());\n        }\n    });\n    assertNotNull(destroyed.await(DELAY));\n}", "path": "CameraView/cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/CameraPreviewTest.java", "commit_date": "2019-12-08 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "// Can be called different threads\n", "func_signal": "@Override\nprotected void onStop(boolean isCameraShutdown)", "code": "{\n    if (isCameraShutdown) {\n        // The renderer callback might never be called. From my tests, it's not,\n        // so we can't wait for that callback to stop the encoder engine.\n        LOG.i(\"Stopping the encoder engine from isCameraShutdown.\");\n        mDesiredState = STATE_NOT_RECORDING;\n        mCurrentState = STATE_NOT_RECORDING;\n        synchronized (mEncoderEngineLock) {\n            if (mEncoderEngine != null) {\n                mEncoderEngine.stop();\n                mEncoderEngine = null;\n            }\n        }\n    } else {\n        mDesiredState = STATE_NOT_RECORDING;\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/video/SnapshotVideoRecorder.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Parameters\n", "func_signal": "private void applyAllParameters(@NonNull CaptureRequest.Builder builder,\n                                @Nullable CaptureRequest.Builder oldBuilder)", "code": "{\n    LOG.i(\"applyAllParameters:\", \"called for tag\", builder.build().getTag());\n    builder.set(CaptureRequest.CONTROL_MODE, CaptureRequest.CONTROL_MODE_AUTO);\n    applyDefaultFocus(builder);\n    applyFlash(builder, Flash.OFF);\n    applyLocation(builder, null);\n    applyWhiteBalance(builder, WhiteBalance.AUTO);\n    applyHdr(builder, Hdr.OFF);\n    applyZoom(builder, 0F);\n    applyExposureCorrection(builder, 0F);\n    applyPreviewFrameRate(builder, 0F);\n\n    if (oldBuilder != null) {\n        // We might be in a metering operation, or the old builder might have some special\n        // metering parameters. Copy these special keys over to the new builder.\n        // These are the keys changed by metering.Parameters, or by us in applyFocusForMetering.\n        builder.set(CaptureRequest.CONTROL_AF_REGIONS,\n                oldBuilder.get(CaptureRequest.CONTROL_AF_REGIONS));\n        builder.set(CaptureRequest.CONTROL_AE_REGIONS,\n                oldBuilder.get(CaptureRequest.CONTROL_AE_REGIONS));\n        builder.set(CaptureRequest.CONTROL_AWB_REGIONS,\n                oldBuilder.get(CaptureRequest.CONTROL_AWB_REGIONS));\n        builder.set(CaptureRequest.CONTROL_AF_MODE,\n                oldBuilder.get(CaptureRequest.CONTROL_AF_MODE));\n        // Do NOT copy exposure or focus triggers!\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * Returns a new frame to be filled. See {@link Frame} for details.\n * @return a new frame\n */\n", "func_signal": "@NonNull\npublic Frame acquireFrame()", "code": "{\n    if (mFramePool.isEmpty()) {\n        throw new RuntimeException(\"Need more frames than this! \" +\n                \"Please increase the pool size.\");\n    } else {\n        //noinspection ConstantConditions\n        return mFramePool.get();\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java", "commit_date": "2020-04-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Stop\n", "func_signal": "@EngineThread\n@NonNull\n@Override\nprotected Task<Void> onStopPreview()", "code": "{\n    LOG.i(\"onStopPreview:\", \"Started.\");\n    if (mVideoRecorder != null) {\n        // This should synchronously call onVideoResult that will reset the repeating builder\n        // to the PREVIEW template. This is very important.\n        mVideoRecorder.stop(true);\n        mVideoRecorder = null;\n    }\n    mPictureRecorder = null;\n    if (hasFrameProcessors()) {\n        getFrameManager().release();\n    }\n    // Removing the part below for now. It hangs on emulators and can take a lot of time\n    // in real devices, for benefits that I'm not 100% sure about.\n    if (false) {\n        try {\n            // Preferring abortCaptures() over stopRepeating(): it makes sure that all\n            // in-flight operations are discarded as fast as possible, which is what we want.\n            // NOTE: this call is asynchronous. Should find a good way to wait for the outcome.\n            LOG.i(\"onStopPreview:\", \"calling abortCaptures().\");\n            mSession.abortCaptures();\n            LOG.i(\"onStopPreview:\", \"called abortCaptures().\");\n        } catch (CameraAccessException e) {\n            // This tells us that we should stop everything. It's better to throw an\n            // unrecoverable exception rather than just swallow, so everything gets stopped.\n            LOG.w(\"onStopPreview:\", \"abortCaptures failed!\", e);\n            throw createCameraException(e);\n        } catch (IllegalStateException e) {\n            // This tells us that the session was already closed.\n            // Not sure if this can happen, but we can swallow it.\n        }\n    }\n    removeRepeatingRequestBuilderSurfaces();\n    mLastRepeatingResult = null;\n    LOG.i(\"onStopPreview:\", \"Returning.\");\n    return Tasks.forResult(null);\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * The surface is now available, which means that step 1 has completed.\n * If we have also completed step 2, go on with binding and streaming.\n */\n", "func_signal": "@SuppressWarnings(\"ConstantConditions\")\n@Override\npublic final void onSurfaceAvailable()", "code": "{\n    LOG.i(\"onSurfaceAvailable:\", \"Size is\", getPreview().getSurfaceSize());\n    startBind();\n    startPreview();\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * Sets up the repeating request builder with default surfaces and extra ones\n * if needed (like a video recording surface).\n */\n", "func_signal": "private void addRepeatingRequestBuilderSurfaces(@NonNull Surface... extraSurfaces)", "code": "{\n    mRepeatingRequestBuilder.addTarget(mPreviewStreamSurface);\n    if (mFrameProcessingSurface != null) {\n        mRepeatingRequestBuilder.addTarget(mFrameProcessingSurface);\n    }\n    for (Surface extraSurface : extraSurfaces) {\n        if (extraSurface == null) {\n            throw new IllegalArgumentException(\"Should not add a null surface.\");\n        }\n        mRepeatingRequestBuilder.addTarget(extraSurface);\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * This sets the CONTROL_AE_MODE to either:\n * - {@link CaptureRequest#CONTROL_AE_MODE_ON}\n * - {@link CaptureRequest#CONTROL_AE_MODE_ON_AUTO_FLASH}\n * - {@link CaptureRequest#CONTROL_AE_MODE_ON_ALWAYS_FLASH}\n *\n * The API offers a high level control through {@link CaptureRequest#CONTROL_AE_MODE},\n * which is what the mapper looks at. It will trigger (if specified) flash only for\n * still captures which is exactly what we want.\n *\n * However, we set CONTROL_AE_MODE to ON/OFF (depending\n * on which is available) with both {@link Flash#OFF} and {@link Flash#TORCH}.\n *\n * When CONTROL_AE_MODE is ON or OFF, the low level control, called\n * {@link CaptureRequest#FLASH_MODE}, becomes effective, and that's where we can actually\n * distinguish between a turned off flash and a torch flash.\n */\n", "func_signal": "@SuppressWarnings(\"WeakerAccess\")\nprotected boolean applyFlash(@NonNull CaptureRequest.Builder builder,\n                             @NonNull Flash oldFlash)", "code": "{\n    if (mCameraOptions.supports(mFlash)) {\n        int[] availableAeModesArray = readCharacteristic(\n                CameraCharacteristics.CONTROL_AE_AVAILABLE_MODES, new int[]{});\n        List<Integer> availableAeModes = new ArrayList<>();\n        for (int mode : availableAeModesArray) { availableAeModes.add(mode); }\n\n        List<Pair<Integer, Integer>> pairs = mMapper.mapFlash(mFlash);\n        for (Pair<Integer, Integer> pair : pairs) {\n            if (availableAeModes.contains(pair.first)) {\n                LOG.i(\"applyFlash: setting CONTROL_AE_MODE to\", pair.first);\n                LOG.i(\"applyFlash: setting FLASH_MODE to\", pair.second);\n                builder.set(CaptureRequest.CONTROL_AE_MODE, pair.first);\n                builder.set(CaptureRequest.FLASH_MODE, pair.second);\n                return true;\n            }\n        }\n    }\n    mFlash = oldFlash;\n    return false;\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * All focus modes support the AF trigger, except OFF and EDOF.\n * However, unlike the preview, we'd prefer AUTO to any CONTINUOUS value.\n * An AUTO value means that focus is locked unless we run the focus trigger,\n * which is what metering does.\n *\n * @param builder builder\n */\n", "func_signal": "@SuppressWarnings(\"WeakerAccess\")\nprotected void applyFocusForMetering(@NonNull CaptureRequest.Builder builder)", "code": "{\n    int[] modesArray = readCharacteristic(CameraCharacteristics.CONTROL_AF_AVAILABLE_MODES,\n            new int[]{});\n    List<Integer> modes = new ArrayList<>();\n    for (int mode : modesArray) { modes.add(mode); }\n    if (modes.contains(CaptureRequest.CONTROL_AF_MODE_AUTO)) {\n        builder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_AUTO);\n        return;\n    }\n    if (getMode() == Mode.VIDEO &&\n            modes.contains(CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_VIDEO)) {\n        builder.set(CaptureRequest.CONTROL_AF_MODE,\n                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_VIDEO);\n        return;\n    }\n\n    if (modes.contains(CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE)) {\n        builder.set(CaptureRequest.CONTROL_AF_MODE,\n                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n        //noinspection UnnecessaryReturnStatement\n        return;\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * Any number of pending events greater than 1 means that we should skip this frame.\n * To avoid skipping too many frames, we'll use 2 for now, but this just means\n * that we'll be drawing the same frame twice.\n *\n * When an event is posted, the textureId data has already been updated so we're\n * too late to draw the old one and it should be skipped.\n *\n * This is especially important if we perform overlay drawing here, since that\n * makes this class thread busy and slows down the event dispatching.\n *\n * @param timestampUs frame timestamp\n * @return true to render\n */\n", "func_signal": "@Override\nprotected boolean shouldRenderFrame(long timestampUs)", "code": "{\n    if (!super.shouldRenderFrame(timestampUs)) {\n        LOG.i(\"shouldRenderFrame - Dropping frame because of super()\");\n        return false;\n    } else if (mFrameNumber <= 10) {\n        // Always render the first few frames, or muxer fails.\n        return true;\n    } else if (getPendingEvents(FRAME_EVENT) > 2) {\n        LOG.i(\"shouldRenderFrame - Dropping, we already have too many pending events:\",\n                getPendingEvents(FRAME_EVENT));\n        return false;\n    } else {\n        return true;\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java", "commit_date": "2020-04-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Actions\n", "func_signal": "@Override\npublic void addAction(final @NonNull Action action)", "code": "{\n    if (!mActions.contains(action)) {\n        mActions.add(action);\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Start\n", "func_signal": "@EngineThread\n@SuppressLint(\"MissingPermission\")\n@NonNull\n@Override\nprotected Task<CameraOptions> onStartEngine()", "code": "{\n    final TaskCompletionSource<CameraOptions> task = new TaskCompletionSource<>();\n    try {\n        // We have a valid camera for this Facing. Go on.\n        mManager.openCamera(mCameraId, new CameraDevice.StateCallback() {\n            @Override\n            public void onOpened(@NonNull CameraDevice camera) {\n                mCamera = camera;\n\n                // Set parameters that might have been set before the camera was opened.\n                try {\n                    LOG.i(\"onStartEngine:\", \"Opened camera device.\");\n                    mCameraCharacteristics = mManager.getCameraCharacteristics(mCameraId);\n                    boolean flip = getAngles().flip(Reference.SENSOR, Reference.VIEW);\n                    int format;\n                    switch (mPictureFormat) {\n                        case JPEG: format = ImageFormat.JPEG; break;\n                        case DNG: format = ImageFormat.RAW_SENSOR; break;\n                        default: throw new IllegalArgumentException(\"Unknown format:\"\n                                + mPictureFormat);\n                    }\n                    mCameraOptions = new Camera2Options(mManager, mCameraId, flip, format);\n                    createRepeatingRequestBuilder(getRepeatingRequestDefaultTemplate());\n                } catch (CameraAccessException e) {\n                    task.trySetException(createCameraException(e));\n                    return;\n                }\n                task.trySetResult(mCameraOptions);\n            }\n\n            @Override\n            public void onDisconnected(@NonNull CameraDevice camera) {\n                // Not sure if this is called INSTEAD of onOpened() or can be called after\n                // as well. Cover both cases with an unrecoverable exception so that the\n                // engine is properly destroyed.\n                CameraException exception\n                        = new CameraException(CameraException.REASON_DISCONNECTED);\n                if (!task.getTask().isComplete()) {\n                    task.trySetException(exception);\n                } else {\n                    LOG.i(\"CameraDevice.StateCallback reported disconnection.\");\n                    throw exception;\n                }\n            }\n\n            @Override\n            public void onError(@NonNull CameraDevice camera, int error) {\n                if (!task.getTask().isComplete()) {\n                    task.trySetException(createCameraException(error));\n                } else {\n                    // This happened while the engine is running. Throw unrecoverable exception\n                    // so that engine is properly destroyed.\n                    LOG.e(\"CameraDevice.StateCallback reported an error:\", error);\n                    throw new CameraException(CameraException.REASON_DISCONNECTED);\n                }\n            }\n        }, null);\n    } catch (CameraAccessException e) {\n        throw createCameraException(e);\n    }\n    return task.getTask();\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "//region Protected APIs\n", "func_signal": "@EngineThread\n@NonNull\n@Override\nprotected List<Size> getPreviewStreamAvailableSizes()", "code": "{\n    try {\n        CameraCharacteristics characteristics = mManager.getCameraCharacteristics(mCameraId);\n        StreamConfigurationMap streamMap =\n                characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n        if (streamMap == null) {\n            throw new RuntimeException(\"StreamConfigurationMap is null. Should not happen.\");\n        }\n        // This works because our previews return either a SurfaceTexture or a SurfaceHolder,\n        // which are accepted class types by the getOutputSizes method.\n        android.util.Size[] sizes = streamMap.getOutputSizes(mPreview.getOutputClass());\n        List<Size> candidates = new ArrayList<>(sizes.length);\n        for (android.util.Size size : sizes) {\n            Size add = new Size(size.getWidth(), size.getHeight());\n            if (!candidates.contains(add)) candidates.add(add);\n        }\n        return candidates;\n    } catch (CameraAccessException e) {\n        throw createCameraException(e);\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * Removes default surfaces from the repeating request builder.\n */\n", "func_signal": "private void removeRepeatingRequestBuilderSurfaces()", "code": "{\n    mRepeatingRequestBuilder.removeTarget(mPreviewStreamSurface);\n    if (mFrameProcessingSurface != null) {\n        mRepeatingRequestBuilder.removeTarget(mFrameProcessingSurface);\n    }\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "/**\n * When creating a new builder, we want to\n * - set it to {@link #mRepeatingRequestBuilder}, the current one\n * - add a tag for the template just in case\n * - apply all the current parameters\n */\n", "func_signal": "@SuppressWarnings(\"UnusedReturnValue\")\n@NonNull\nprivate CaptureRequest.Builder createRepeatingRequestBuilder(int template)\n        throws CameraAccessException", "code": "{\n    CaptureRequest.Builder oldBuilder = mRepeatingRequestBuilder;\n    mRepeatingRequestBuilder = mCamera.createCaptureRequest(template);\n    mRepeatingRequestBuilder.setTag(template);\n    applyAllParameters(mRepeatingRequestBuilder, oldBuilder);\n    return mRepeatingRequestBuilder;\n}", "path": "CameraView/cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "natario1/CameraView", "stars": 4827, "license": "other", "language": "java", "size": 30129}
{"docstring": "// async task thread\n", "func_signal": "protected Integer doInBackground(Void... params)", "code": "{\n           ContentManager contentManager = ContentManager.getInstance();\n\n           Log.d(TAG, \"doInBackground...\");\n           for (int i = 0; i < mTags.length; i++) {\n               mCurrentIndex = i;\n               updateProgress(0);\n               try {\n                   contentManager.prepare(this, mTags[i]);\n               } catch (RuntimeException re) {\n                   mFailure = re;\n                   break;\n               }\n               updateProgress(100);\n           }\n\n           if (mFailure != null) {\n               Log.w(TAG, \"Failed while generating content\", mFailure);\n           } else {\n               Log.d(TAG, \"generation complete\");\n           }\n           return 0;\n       }", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Creates an off-screen surface.\n */\n", "func_signal": "public void createOffscreenSurface(int width, int height)", "code": "{\n    if (mEGLSurface != EGL14.EGL_NO_SURFACE) {\n        throw new IllegalStateException(\"surface already created\");\n    }\n    mEGLSurface = mEglCore.createOffscreenSurface(width, height);\n    mWidth = width;\n    mHeight = height;\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns the singleton instance.\n */\n", "func_signal": "public static ContentManager getInstance()", "code": "{\n    synchronized (sLock) {\n        if (sInstance == null) {\n            sInstance = new ContentManager();\n        }\n        return sInstance;\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Initiates saving the currently-buffered frames to the specified output file.  The\n * data will be written as a .mp4 file.  The call returns immediately.  When the file\n * save completes, the callback will be notified.\n * <p>\n * The file generation is performed on the encoder thread, which means we won't be\n * draining the output buffers while this runs.  It would be wise to stop submitting\n * frames during this time.\n */\n", "func_signal": "public void saveVideo(File outputFile)", "code": "{\n    Handler handler = mEncoderThread.getHandler();\n    handler.sendMessage(handler.obtainMessage(\n            EncoderThread.EncoderHandler.MSG_SAVE_VIDEO, outputFile));\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Calls eglSwapBuffers.  Use this to \"publish\" the current frame.\n *\n * @return false on failure\n */\n", "func_signal": "public boolean swapBuffers()", "code": "{\n    boolean result = mEglCore.swapBuffers(mEGLSurface);\n    if (!result) {\n        Log.d(TAG, \"WARNING: swapBuffers() failed\");\n    }\n    return result;\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Prepares the specified item.\n * <p>\n * This may be called from the async task thread.\n */\n", "func_signal": "private void prepare(ProgressUpdater prog, int tag)", "code": "{\n    GeneratedMovie movie;\n    switch (tag) {\n        case MOVIE_EIGHT_RECTS:\n            movie = new MovieEightRects();\n            movie.create(getPath(tag), prog);\n            synchronized (mContent) {\n                mContent.add(tag, movie);\n            }\n            break;\n        case MOVIE_SLIDERS:\n            movie = new MovieSliders();\n            movie.create(getPath(tag), prog);\n            synchronized (mContent) {\n                mContent.add(tag, movie);\n            }\n            break;\n        default:\n            throw new RuntimeException(\"Unknown tag \" + tag);\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Posts an error dialog, including the message from the failure exception.\n */\n", "func_signal": "private void showFailureDialog(Context context, RuntimeException failure)", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(context);\n    builder.setTitle(R.string.contentGenerationFailedTitle);\n    String msg = context.getString(R.string.contentGenerationFailedMsg,\n            failure.getMessage());\n    builder.setMessage(msg);\n    builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int id) {\n            dialog.dismiss();\n        }\n    });\n    builder.setCancelable(false);\n    AlertDialog dialog = builder.create();\n    dialog.show();\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Thread entry point.\n * <p>\n * Prepares the Looper, Handler, and signals anybody watching that we're ready to go.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    Looper.prepare();\n    mHandler = new EncoderHandler(this);    // must create on encoder thread\n    Log.d(TAG, \"encoder thread ready\");\n    synchronized (mLock) {\n        mReady = true;\n        mLock.notify();    // signal waitUntilReady()\n    }\n\n    Looper.loop();\n\n    synchronized (mLock) {\n        mReady = false;\n        mHandler = null;\n    }\n    Log.d(TAG, \"looper quit\");\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Configures encoder, and prepares the input Surface.\n *\n * @param width Width of encoded video, in pixels.  Should be a multiple of 16.\n * @param height Height of encoded video, in pixels.  Usually a multiple of 16 (1080 is ok).\n * @param bitRate Target bit rate, in bits.\n * @param frameRate Expected frame rate.\n * @param desiredSpanSec How many seconds of video we want to have in our buffer at any time.\n */\n", "func_signal": "public CircularEncoder(int width, int height, int bitRate, int frameRate, int desiredSpanSec,\n        Callback cb) throws IOException", "code": "{\n    // The goal is to size the buffer so that we can accumulate N seconds worth of video,\n    // where N is passed in as \"desiredSpanSec\".  If the codec generates data at roughly\n    // the requested bit rate, we can compute it as time * bitRate / bitsPerByte.\n    //\n    // Sync frames will appear every (frameRate * IFRAME_INTERVAL) frames.  If the frame\n    // rate is higher or lower than expected, various calculations may not work out right.\n    //\n    // Since we have to start muxing from a sync frame, we want to ensure that there's\n    // room for at least one full GOP in the buffer, preferrably two.\n    if (desiredSpanSec < IFRAME_INTERVAL * 2) {\n        throw new RuntimeException(\"Requested time span is too short: \" + desiredSpanSec +\n                \" vs. \" + (IFRAME_INTERVAL * 2));\n    }\n    CircularEncoderBuffer encBuffer = new CircularEncoderBuffer(bitRate, frameRate,\n            desiredSpanSec);\n\n    MediaFormat format = MediaFormat.createVideoFormat(MIME_TYPE, width, height);\n\n    // Set some properties.  Failing to specify some of these can cause the MediaCodec\n    // configure() call to throw an unhelpful exception.\n    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,\n            MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    format.setInteger(MediaFormat.KEY_BIT_RATE, bitRate);\n    format.setInteger(MediaFormat.KEY_FRAME_RATE, frameRate);\n    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, IFRAME_INTERVAL);\n    if (VERBOSE) Log.d(TAG, \"format: \" + format);\n\n    // Create a MediaCodec encoder, and configure it with our format.  Get a Surface\n    // we can use for input and wrap it with a class that handles the EGL work.\n    mEncoder = MediaCodec.createEncoderByType(MIME_TYPE);\n    mEncoder.configure(format, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);\n    mInputSurface = mEncoder.createInputSurface();\n    mEncoder.start();\n\n    // Start the encoder thread last.  That way we're sure it can see all of the state\n    // we've initialized.\n    mEncoderThread = new EncoderThread(mEncoder, encBuffer, cb);\n    mEncoderThread.start();\n    mEncoderThread.waitUntilReady();\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Saves the EGL surface to a file.\n * <p>\n * Expects that this object's EGL surface is current.\n */\n", "func_signal": "public void saveFrame(File file) throws IOException", "code": "{\n    if (!mEglCore.isCurrent(mEGLSurface)) {\n        throw new RuntimeException(\"Expected EGL context/surface is not current\");\n    }\n\n    // glReadPixels fills in a \"direct\" ByteBuffer with what is essentially big-endian RGBA\n    // data (i.e. a byte of red, followed by a byte of green...).  While the Bitmap\n    // constructor that takes an int[] wants little-endian ARGB (blue/red swapped), the\n    // Bitmap \"copy pixels\" method wants the same format GL provides.\n    //\n    // Ideally we'd have some way to re-use the ByteBuffer, especially if we're calling\n    // here often.\n    //\n    // Making this even more interesting is the upside-down nature of GL, which means\n    // our output will look upside down relative to what appears on screen if the\n    // typical GL conventions are used.\n\n    String filename = file.toString();\n\n    int width = getWidth();\n    int height = getHeight();\n    ByteBuffer buf = ByteBuffer.allocateDirect(width * height * 4);\n    buf.order(ByteOrder.LITTLE_ENDIAN);\n    GLES20.glReadPixels(0, 0, width, height,\n            GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buf);\n    GlUtil.checkGlError(\"glReadPixels\");\n    buf.rewind();\n\n    BufferedOutputStream bos = null;\n    try {\n        bos = new BufferedOutputStream(new FileOutputStream(filename));\n        Bitmap bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        bmp.copyPixelsFromBuffer(buf);\n        bmp.compress(Bitmap.CompressFormat.PNG, 90, bos);\n        bmp.recycle();\n    } finally {\n        if (bos != null) bos.close();\n    }\n    Log.d(TAG, \"Saved \" + width + \"x\" + height + \" frame as '\" + filename + \"'\");\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns the Handler used to send messages to the encoder thread.\n */\n", "func_signal": "public EncoderHandler getHandler()", "code": "{\n    synchronized (mLock) {\n        // Confirm ready state.\n        if (!mReady) {\n            throw new RuntimeException(\"not ready\");\n        }\n    }\n    return mHandler;\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Waits until the encoder thread is ready to receive messages.\n * <p>\n * Call from non-encoder thread.\n */\n", "func_signal": "public void waitUntilReady()", "code": "{\n    synchronized (mLock) {\n        while (!mReady) {\n            try {\n                mLock.wait();\n            } catch (InterruptedException ie) { /* not expected */ }\n        }\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns true if all of the content has been created.\n * <p>\n * If this returns false, call createAll.\n */\n", "func_signal": "public boolean isContentCreated(@SuppressWarnings(\"unused\") Context unused)", "code": "{\n    // Ideally this would probe each individual item to see if anything needs to be done,\n    // and a subsequent \"prepare\" call would generate only the necessary items.  This\n    // takes a much simpler approach and just checks to see if the files exist.  If the\n    // content changes the user will need to force a regen (via a menu option) or wipe data.\n\n    for (int i = 0; i < ALL_TAGS.length; i++) {\n        File file = getPath(i);\n        if (!file.canRead()) {\n            Log.d(TAG, \"Can't find readable \" + file);\n            return false;\n        }\n    }\n    return true;\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns the surface's width, in pixels.\n * <p>\n * If this is called on a window surface, and the underlying surface is in the process\n * of changing size, we may not see the new size right away (e.g. in the \"surfaceChanged\"\n * callback).  The size should match after the next buffer swap.\n */\n", "func_signal": "public int getWidth()", "code": "{\n    if (mWidth < 0) {\n        return mEglCore.querySurface(mEGLSurface, EGL14.EGL_WIDTH);\n    } else {\n        return mWidth;\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns the filename for the tag.\n */\n", "func_signal": "private String getFileName(int tag)", "code": "{\n    switch (tag) {\n        case MOVIE_EIGHT_RECTS:\n            return \"gen-eight-rects.mp4\";\n        case MOVIE_SLIDERS:\n            return \"gen-sliders.mp4\";\n        default:\n            throw new RuntimeException(\"Unknown tag \" + tag);\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Creates a window surface.\n * <p>\n * @param surface May be a Surface or SurfaceTexture.\n */\n", "func_signal": "public void createWindowSurface(Object surface)", "code": "{\n    if (mEGLSurface != EGL14.EGL_NO_SURFACE) {\n        throw new IllegalStateException(\"surface already created\");\n    }\n    mEGLSurface = mEglCore.createWindowSurface(surface);\n\n    // Don't cache width/height here, because the size of the underlying surface can change\n    // out from under us (see e.g. HardwareScalerActivity).\n    //mWidth = mEglCore.querySurface(mEGLSurface, EGL14.EGL_WIDTH);\n    //mHeight = mEglCore.querySurface(mEGLSurface, EGL14.EGL_HEIGHT);\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "// UI thread\n", "func_signal": "protected void onProgressUpdate(Integer... progressArray)", "code": "{\n           int index = progressArray[0];\n           int percent = progressArray[1];\n           //Log.d(TAG, \"progress \" + index + \"/\" + percent + \" of \" + mTags.length * 100);\n           if (percent == 0) {\n               TextView name = (TextView) mPrepDialog.findViewById(R.id.workJobName_text);\n               name.setText(ContentManager.getInstance().getFileName(mTags[index]));\n           }\n           mProgressBar.setProgress(index * 100 + percent);\n       }", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Prepares the specified content.  For example, if the caller requires a movie that doesn't\n * exist, this will post a progress dialog and generate the movie.\n * <p>\n * Call from main UI thread.  This returns immediately.  Content generation continues\n * on a background thread.\n */\n", "func_signal": "public void prepareContent(Activity caller, int[] tags)", "code": "{\n    // Put up the progress dialog.\n    AlertDialog.Builder builder = WorkDialog.create(caller, R.string.preparing_content);\n    builder.setCancelable(false);\n    AlertDialog dialog = builder.show();\n\n    // Generate content in async task.\n    GenerateTask genTask = new GenerateTask(caller, dialog, tags);\n    genTask.execute();\n}", "path": "grafika/app/src/main/java/com/android/grafika/ContentManager.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Drains all pending output from the decoder, and adds it to the circular buffer.\n */\n", "func_signal": "public void drainEncoder()", "code": "{\n    final int TIMEOUT_USEC = 0;     // no timeout -- check for buffers, bail if none\n\n    ByteBuffer[] encoderOutputBuffers = mEncoder.getOutputBuffers();\n    while (true) {\n        int encoderStatus = mEncoder.dequeueOutputBuffer(mBufferInfo, TIMEOUT_USEC);\n        if (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {\n            // no output available yet\n            break;\n        } else if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n            // not expected for an encoder\n            encoderOutputBuffers = mEncoder.getOutputBuffers();\n        } else if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n            // Should happen before receiving buffers, and should only happen once.\n            // The MediaFormat contains the csd-0 and csd-1 keys, which we'll need\n            // for MediaMuxer.  It's unclear what else MediaMuxer might want, so\n            // rather than extract the codec-specific data and reconstruct a new\n            // MediaFormat later, we just grab it here and keep it around.\n            mEncodedFormat = mEncoder.getOutputFormat();\n            Log.d(TAG, \"encoder output format changed: \" + mEncodedFormat);\n        } else if (encoderStatus < 0) {\n            Log.w(TAG, \"unexpected result from encoder.dequeueOutputBuffer: \" +\n                    encoderStatus);\n            // let's ignore it\n        } else {\n            ByteBuffer encodedData = encoderOutputBuffers[encoderStatus];\n            if (encodedData == null) {\n                throw new RuntimeException(\"encoderOutputBuffer \" + encoderStatus +\n                        \" was null\");\n            }\n\n            if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n                // The codec config data was pulled out when we got the\n                // INFO_OUTPUT_FORMAT_CHANGED status.  The MediaMuxer won't accept\n                // a single big blob -- it wants separate csd-0/csd-1 chunks --\n                // so simply saving this off won't work.\n                if (VERBOSE) Log.d(TAG, \"ignoring BUFFER_FLAG_CODEC_CONFIG\");\n                mBufferInfo.size = 0;\n            }\n\n            if (mBufferInfo.size != 0) {\n                // adjust the ByteBuffer values to match BufferInfo (not needed?)\n                encodedData.position(mBufferInfo.offset);\n                encodedData.limit(mBufferInfo.offset + mBufferInfo.size);\n\n                mEncBuffer.add(encodedData, mBufferInfo.flags,\n                        mBufferInfo.presentationTimeUs);\n\n                if (VERBOSE) {\n                    Log.d(TAG, \"sent \" + mBufferInfo.size + \" bytes to muxer, ts=\" +\n                            mBufferInfo.presentationTimeUs);\n                }\n            }\n\n            mEncoder.releaseOutputBuffer(encoderStatus, false);\n\n            if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n                Log.w(TAG, \"reached end of stream unexpectedly\");\n                break;      // out of while\n            }\n        }\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/CircularEncoder.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * Returns the surface's height, in pixels.\n */\n", "func_signal": "public int getHeight()", "code": "{\n    if (mHeight < 0) {\n        return mEglCore.querySurface(mEGLSurface, EGL14.EGL_HEIGHT);\n    } else {\n        return mHeight;\n    }\n}", "path": "grafika/app/src/main/java/com/android/grafika/gles/EglSurfaceBase.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "google/grafika", "stars": 5976, "license": "apache-2.0", "language": "java", "size": 1092}
{"docstring": "/**\n * clear method not found in Spring 4.0.\n * @param obj\n * @param param\n */\n", "func_signal": "private void clear(InjectionMetadata obj, PropertyValues param)", "code": "{\n    if(!clearInited){\n        try {\n            cleanMethod = InjectionMetadata.class.getMethod(\"clear\", PropertyValues.class);\n        } catch (NoSuchMethodException e) {\n        }\n        clearInited = true;\n    }\n    if (cleanMethod != null) {\n        try {\n            cleanMethod.invoke(obj, param);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n}", "path": "jetcache/jetcache-anno/src/main/java/com/alicp/jetcache/anno/field/CreateCacheAnnotationBeanPostProcessor.java", "commit_date": "2019-04-05 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//annotation on super interface\n", "func_signal": "public void testGetProxyByAnnotation3()", "code": "{\n    I3_2 c1 = new C3();\n    I3_2 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "/**\n * Created on 2016/12/9.\n *\n * @author <a href=\"mailto:areyouok@gmail.com\">huangli</a>\n */\n", "func_signal": "@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface CreateCache", "code": "{\n    /**\n     * If you want to use multi backend cache system, you can setup multi \"cache area\" in configuration,\n     * this attribute specifies the name of the \"cache area\" you want to use.\n     * @return the name of cache area\n     */\n    String area() default CacheConsts.DEFAULT_AREA;\n\n    /**\n     * The name of this Cache instance, optional. If you do not specify, JetCache will auto generate one.\n     * The name is used to display statistics information and as part of key prefix when using a remote cache.\n     * If two @CreateCache have same name and area, they will point to same Cache instance.\n     * @return the cache name\n     */\n    String name() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Specify the time unit of expire.\n     * @return the time unit of expire\n     */\n    TimeUnit timeUnit() default TimeUnit.SECONDS;\n\n    /**\n     * The default expire time of this Cache instance.\n     * Use global config if the attribute value is absent, and if the global config is not defined either,\n     * use infinity.\n     * @return the default expire time\n     */\n    int expire() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Use to specify the local cache expire time when cacheType=CacheType.BOTH, use \"expire\" if absent.\n     * @return the local cache expire time\n     */\n    int localExpire() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Type of the Cache instance. May be CacheType.REMOTE, CacheType.LOCAL, CacheType.BOTH.\n     * Use two level cache (local+remote) when value is CacheType.BOTH.\n     * @return the cache type\n     */\n    CacheType cacheType() default CacheType.REMOTE;\n\n    /**\n     * Specify max elements in local memory when cacheType is CacheType.LOCAL or CacheType.BOTH.\n     * Use global config if the attribute value is absent, and if the global config is not defined either,\n     * use CacheConsts.DEFAULT_LOCAL_LIMIT instead.\n     * @return local maximal elements of the LOCAL/BOTH cache\n     */\n    int localLimit() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Specify the serialization policy of remote cache when cacheType is CacheType.REMOTE or CacheType.BOTH.\n     * The JetCache build-in serialPolicy are SerialPolicy.JAVA or SerialPolicy.KRYO.\n     * Use global config if the attribute value is absent, and if the global config is not defined either,\n     * use SerialPolicy.JAVA instead.\n     * @return the serialization policy name of cache value\n     */\n    String serialPolicy() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Specify the key convertor. Used to convert the complex key object.\n     * The JetCache build-in keyConvertor are KeyConvertor.FASTJSON or KeyConvertor.NONE.\n     * NONE indicate do not convert, FASTJSON will use fastjson to convert key object to a string.\n     * Use global config if the attribute value is absent.\n     * @return convertor name of cache key\n     */\n    String keyConvertor() default CacheConsts.UNDEFINED_STRING;\n}", "path": "jetcache/jetcache-anno-api/src/main/java/com/alicp/jetcache/anno/CreateCache.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//@Override\n//since 5.1\n", "func_signal": "@SuppressWarnings(\"AliMissingOverrideAnnotation\")\npublic PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)", "code": "{\n    InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);\n    try {\n        metadata.inject(bean, beanName, pvs);\n    } catch (BeanCreationException ex) {\n        throw ex;\n    } catch (Throwable ex) {\n        throw new BeanCreationException(beanName, \"Injection of autowired dependencies failed\", ex);\n    }\n    return pvs;\n}", "path": "jetcache/jetcache-anno/src/main/java/com/alicp/jetcache/anno/field/CreateCacheAnnotationBeanPostProcessor.java", "commit_date": "2019-04-05 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//annotation on intface\n", "func_signal": "public void testGetProxyByAnnotation2()", "code": "{\n    I2 c1 = new C2();\n    I2 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n\n    I2 c3 = new C22();\n    I2 c4 = ProxyUtil.getProxyByAnnotation(c3, configProvider);\n    assertEquals(c2.count(), c4.count());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//enabled=false\n", "func_signal": "public void testGetProxyByAnnotation5()", "code": "{\n    I5 c1 = new C5();\n    I5 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertNotEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n    CacheContext.enableCache(() -> {\n        assertNotEquals(c1.count(), c1.count());\n        assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n        assertEquals(c2.count(), c2.count());\n        assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n        return null;\n    });\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// basic test\n", "func_signal": "@Test\npublic void testStaticInvoke2() throws Throwable", "code": "{\n    Method method = CountClass.class.getMethod(\"count\", String.class, int.class);\n    cachedAnnoConfig.setDefineMethod(method);\n    int x1, x2, x3, x4, x5, x6;\n\n    x1 = invokeQuery(method, new Object[]{\"aaa\", 10});\n    x2 = invokeQuery(method, new Object[]{\"bbb\", 100});\n    x3 = invokeQuery(method, new Object[]{\"ccc\", 10});\n    x4 = invokeQuery(method, new Object[]{\"aaa\", 10});\n    x5 = invokeQuery(method, new Object[]{\"bbb\", 100});\n    x6 = invokeQuery(method, new Object[]{\"ccc\", 10});\n    assertEquals(x1, x4);\n    assertEquals(x2, x5);\n    assertEquals(x3, x6);\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/CacheHandlerTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "/**\n * Enable cache in current thread, for @Cached(enabled=false).\n *\n * @param callback\n * @see EnableCache\n */\n", "func_signal": "public static <T> T enableCache(Supplier<T> callback)", "code": "{\n    CacheThreadLocal var = cacheThreadLocal.get();\n    try {\n        var.setEnabledCount(var.getEnabledCount() + 1);\n        return callback.get();\n    } finally {\n        var.setEnabledCount(var.getEnabledCount() - 1);\n    }\n}", "path": "jetcache/jetcache-anno/src/main/java/com/alicp/jetcache/anno/support/CacheContext.java", "commit_date": "2019-06-23 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//with super interface\n", "func_signal": "public void testGetProxyByAnnotation4()", "code": "{\n    I4_1 c1 = new C4();\n    I4_1 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "/**\n * @author <a href=\"mailto:areyouok@gmail.com\">huangli</a>\n */\n", "func_signal": "@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Cached", "code": "{\n    /**\n     * If you want to use multi backend cache system, you can setup multi \"cache area\" in configuration,\n     * this attribute specifies the name of the \"cache area\" you want to use.\n     * @return the name of cache area\n     */\n    String area() default CacheConsts.DEFAULT_AREA;\n\n    /**\n     * The name of this Cache instance, optional.\n     * If you do not specify, JetCache will auto generate one.\n     * The name is used to display statistics information and as part of key prefix when using a remote cache.\n     * Do not assign same name to different @Cached annotation which with same area.\n     * @return the name of the cache\n     */\n    String name() default CacheConsts.UNDEFINED_STRING;\n\n\n    /**\n     * Specify whether the method caching is enabled.\n     * If set to false, you can enable it in thread context using\n     * {@code CacheContext.enableCache(Supplier<T> callback)}\n     * @return if the method cache is enabled\n     */\n    boolean enabled() default CacheConsts.DEFAULT_ENABLED;\n\n    /**\n     * Specify the time unit of expire.\n     * @return the time unit of expire time\n     */\n    TimeUnit timeUnit() default TimeUnit.SECONDS;\n\n    /**\n     * The expire time. Use global config if the attribute value is absent,\n     * and if the global config is not defined either, use infinity instead.\n     * @return the expire time\n     */\n    int expire() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Use to specify the local cache expire time when cacheType=CacheType.BOTH, use \"expire\" if absent.\n     * @return the local cache expire time\n     */\n    int localExpire() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Type of the Cache instance. May be CacheType.REMOTE, CacheType.LOCAL, CacheType.BOTH.\n     * Create a two level cache (local+remote) when value is CacheType.BOTH.\n     * @return cache type of the method cache\n     */\n    CacheType cacheType() default CacheType.REMOTE;\n\n    /**\n     * Specify max elements in local memory when cacheType is CacheType.LOCAL or CacheType.BOTH.\n     * Use global config if the attribute value is absent, and if the global config is not defined either,\n     * use CacheConsts.DEFAULT_LOCAL_LIMIT instead.\n     * @return local maximal elements of the LOCAL/BOTH cache\n     */\n    int localLimit() default CacheConsts.UNDEFINED_INT;\n\n    /**\n     * Specify the serialization policy of remote cache when cacheType is CacheType.REMOTE or CacheType.BOTH.\n     * The JetCache build-in serialPolicy are SerialPolicy.JAVA or SerialPolicy.KRYO.\n     * Use global config if the attribute value is absent, and if the global config is not defined either,\n     * use SerialPolicy.JAVA instead.\n     * @return the serialization policy name of cache value\n     */\n    String serialPolicy() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Specify the key convertor. Used to convert the complex key object.\n     * The JetCache build-in keyConvertor are KeyConvertor.FASTJSON or KeyConvertor.NONE.\n     * NONE indicate do not convert, FASTJSON will use fastjson to convert key object to a string.\n     * Use global config if the attribute value is absent.\n     * @return convertor name of cache key\n     */\n    String keyConvertor() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Specify the key by expression script, optional. If not specified,\n     * use all parameters of the target method and keyConvertor to generate one.\n     * @return an expression script which specifies key\n     */\n    String key() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Specify whether a null value should be cached.\n     * @return whether a null value should be cached\n     */\n    boolean cacheNullValue() default CacheConsts.DEFAULT_CACHE_NULL_VALUE;\n\n    /**\n     * Expression script used for conditioning the method caching, the cache is not\n     * used when evaluation result is false.\n     * Evaluation occurs before real method invocation.\n     */\n    String condition() default CacheConsts.UNDEFINED_STRING;\n\n    /**\n     * Expression script used for conditioning the method cache updating,\n     * the cache updating action is vetoed when the evaluation result is false.\n     * Evaluation occurs after real method invocation so we can refer <i>result</i> in script.\n     */\n    String postCondition() default CacheConsts.UNDEFINED_STRING;\n\n}", "path": "jetcache/jetcache-anno-api/src/main/java/com/alicp/jetcache/anno/Cached.java", "commit_date": "2018-12-12 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// basic test\n", "func_signal": "@Test\npublic void testStaticInvoke3() throws Throwable", "code": "{\n    DynamicQuery q1 = new DynamicQuery();\n    DynamicQuery q2 = new DynamicQuery();\n    q2.setId(1000);\n    DynamicQuery q3 = new DynamicQuery();\n    q3.setId(1000);\n    q3.setName(\"N1\");\n    DynamicQuery q4 = new DynamicQuery();\n    q4.setId(1000);\n    q4.setName(\"N2\");\n    DynamicQuery q5 = new DynamicQuery();\n    q5.setId(1000);\n    q5.setName(\"N2\");\n    q5.setEmail(\"\");\n    DynamicQuery q6 = new DynamicQuery();//q6=q4\n    q6.setId(1000);\n    q6.setName(\"N2\");\n\n    DynamicQuery[] querys = new DynamicQuery[]{q1, q2, q3, q4, q5, q6};\n    int[] ps = new int[]{10, 9000000, 10};\n\n    for (DynamicQuery Q1 : querys) {\n        for (DynamicQuery Q2 : querys) {\n            for (int P1 : ps) {\n                for (int P2 : ps) {\n                    if (Q1 == Q2 && P1 == P2) {\n                        assertResultEquals(Q1, P1, Q2, P2);\n                    } else if (P1 == P2 && (Q1 == q4 || Q1 == q6) && (Q2 == q4 || Q2 == q6)) {\n                        assertResultEquals(Q1, P1, Q2, P2);\n                    } else {\n                        assertResultNotEquals(Q1, P1, Q2, P2);\n                    }\n                }\n            }\n        }\n    }\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/CacheHandlerTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// basic test\n", "func_signal": "@Test\npublic void testStaticInvoke1() throws Throwable", "code": "{\n    Method method = CountClass.class.getMethod(\"count\");\n    cachedAnnoConfig.setDefineMethod(method);\n    int x1, x2, x3;\n    method.invoke(count);\n\n    x1 = invokeQuery(method, null);\n    x2 = invokeQuery(method, null);\n    x3 = invokeQuery(method, null);\n    assertEquals(x1, x2);\n    assertEquals(x1, x3);\n\n    method = CountClass.class.getMethod(\"count\", int.class);\n    int X1, X2, X3, X4;\n\n    X1 = invokeQuery(method, new Object[]{1000});\n    X2 = invokeQuery(method, new Object[]{2000});\n    X3 = invokeQuery(method, new Object[]{1000});\n    X4 = invokeQuery(method, new Object[]{2000});\n    assertEquals(X1, X3);\n    assertEquals(X2, X4);\n\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/CacheHandlerTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//annotation on class\n", "func_signal": "public void testGetProxyByAnnotation1()", "code": "{\n    I1 c1 = new C1();\n    I1 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "/**\n * Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}.\n * <p>Take care of adding the necessary JSR-107 import if it is available.\n */\n", "func_signal": "private String[] getProxyImports()", "code": "{\n    List<String> result = new ArrayList<String>();\n    result.add(AutoProxyRegistrar.class.getName());\n    result.add(JetCacheProxyConfiguration.class.getName());\n    return result.toArray(new String[result.size()]);\n}", "path": "jetcache/jetcache-anno/src/main/java/com/alicp/jetcache/anno/config/ConfigSelector.java", "commit_date": "2017-01-11 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//enabled=false+EnableCache\uff08enable in caller\uff09\n", "func_signal": "public void testGetProxyByAnnotation7()", "code": "{\n    I7_1 c1_1 = new C7_1();\n    I7_1 c1_2 = ProxyUtil.getProxyByAnnotation(c1_1, configProvider);\n\n    C7_2 c2_1 = new C7_2();\n    c2_1.service = c1_2;\n    I7_2 c2_2 = ProxyUtil.getProxyByAnnotation(c2_1, configProvider);\n    assertNotEquals(c2_1.count(), c2_1.count());\n    assertNotEquals(c2_2.countWithoutCache(), c2_2.countWithoutCache());\n    assertEquals(c2_2.count(), c2_2.count());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "//enabled=false+EnableCache\n", "func_signal": "public void testGetProxyByAnnotation6()", "code": "{\n    I6 c1 = new C6();\n    I6 c2 = ProxyUtil.getProxyByAnnotation(c1, configProvider);\n    assertNotEquals(c1.count(), c1.count());\n    assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache());\n    assertEquals(c2.count(), c2.count());\n    assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache());\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// test enableCache\n", "func_signal": "@Test\npublic void testStaticInvoke_CacheContext() throws Throwable", "code": "{\n    final Method method = CountClass.class.getMethod(\"count\");\n    int x1, x2, x3;\n    Invoker invoker = () -> method.invoke(count);\n\n    CacheInvokeContext context = createCachedInvokeContext(invoker, method, null);\n    cachedAnnoConfig.setEnabled(false);\n    x1 = (Integer) CacheHandler.invoke(context);\n    context = createCachedInvokeContext(invoker, method, null);\n    context.getCacheInvokeConfig().setCachedAnnoConfig(null);\n    x2 = (Integer) CacheHandler.invoke(context);\n    context = createCachedInvokeContext(invoker, method, null);\n    context.getCacheInvokeConfig().setCachedAnnoConfig(null);\n    x3 = (Integer) CacheHandler.invoke(context);\n    assertTrue(x1 != x2 && x1 != x3 && x2 != x3);\n\n    cachedAnnoConfig.setEnabled(false);\n    x1 = invokeQuery(method, null);\n    x2 = invokeQuery(method, null);\n    x3 = invokeQuery(method, null);\n    assertTrue(x1 != x2 && x1 != x3 && x2 != x3);\n\n    cachedAnnoConfig.setEnabled(false);\n    CacheContext.enableCache(() -> {\n        try {\n            int xx1 = invokeQuery(method, null);\n            int xx2 = invokeQuery(method, null);\n            int xx3 = invokeQuery(method, null);\n            assertEquals(xx1, xx2);\n            assertEquals(xx1, xx3);\n        } catch (Throwable e) {\n            fail(e);\n        }\n        return null;\n    });\n\n    cachedAnnoConfig.setEnabled(false);\n    cacheInvokeConfig.setEnableCacheContext(true);\n    x1 = invokeQuery(method, null);\n    x2 = invokeQuery(method, null);\n    x3 = invokeQuery(method, null);\n    assertEquals(x1, x2);\n    assertEquals(x1, x3);\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/CacheHandlerTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// @CacheUpdate and @CacheInvalidate test\n", "func_signal": "public void testGetProxyByAnnotation8()", "code": "{\n    I8 i8 = new C8();\n    I8 i8_proxy = ProxyUtil.getProxyByAnnotation(i8, configProvider);\n\n    int v1 = i8_proxy.count(\"K1\");\n    assertEquals(v1, i8_proxy.count(\"K1\"));\n\n    i8_proxy.delete(\"K1\");\n    int v2 = i8_proxy.count(\"K1\");\n    assertNotEquals(v1, v2);\n    i8_proxy.delete2(\"K1\");\n    assertEquals(v2, i8_proxy.count(\"K1\"));\n\n    i8_proxy.update(\"K1\", 200);\n    assertEquals(200, i8_proxy.count(\"K1\"));\n    i8_proxy.update2(\"K1\", 300);\n    assertEquals(200, i8_proxy.count(\"K1\"));\n\n    assertEquals(i8_proxy.count(\"K1\"), i8_proxy.count(\"K1\"));\n    assertNotEquals(i8_proxy.count(\"K1\"), i8_proxy.count(\"K2\"));\n\n    assertEquals(i8_proxy.randomUpdate(\"K1\"), i8_proxy.count(\"K1\"));\n    assertEquals(i8_proxy.randomUpdate2(\"K1\"), i8_proxy.count(\"K1\"));\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// refresh test\n", "func_signal": "public void testGetProxyByAnnotation9() throws Exception", "code": "{\n    I9 beanProxy = ProxyUtil.getProxyByAnnotation(new C9(), configProvider);\n    {\n        int x1 = beanProxy.count();\n        int x2 = beanProxy.count();\n        assertEquals(x1, x2);\n        int i = 0;\n        while (true) { //auto refreshment may take some time to init\n            assertTrue(i < 10);\n            Thread.sleep(150);\n            if (x2 == beanProxy.count()) {\n                i++;\n                continue;\n            } else {\n                break;\n            }\n        }\n    }\n    {\n        int x1 = beanProxy.count(1, 2);\n        int x2 = beanProxy.count(1, 200);\n        assertEquals(x1, x2);\n        Thread.sleep(150);\n        assertEquals(x1 + 1, beanProxy.count(1, 400));\n    }\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "// protect test\n", "func_signal": "public void testGetProxyByAnnotation10() throws Exception", "code": "{\n    I10 beanProxy = ProxyUtil.getProxyByAnnotation(new C10(), configProvider);\n\n    // preheat\n    beanProxy.count1(1);\n    beanProxy.count2(1);\n\n    {\n        int[] x = new int[1];\n        int[] y = new int[1];\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        new Thread(() -> {\n            x[0] = beanProxy.count1(2);\n            countDownLatch.countDown();\n        }).start();\n        new Thread(() -> {\n            y[0] = beanProxy.count1(2);\n            countDownLatch.countDown();\n        }).start();\n        countDownLatch.await();\n        assertNotEquals(x[0], y[0]);\n    }\n    {\n        int[] x = new int[1];\n        int[] y = new int[1];\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        new Thread(() -> {\n            x[0] = beanProxy.count2(2);\n            countDownLatch.countDown();\n        }).start();\n        new Thread(() -> {\n            y[0] = beanProxy.count2(2);\n            countDownLatch.countDown();\n        }).start();\n        countDownLatch.await();\n        assertEquals(x[0], y[0]);\n    }\n}", "path": "jetcache/jetcache-test/src/test/java/com/alicp/jetcache/anno/method/ProxyUtilTest.java", "commit_date": "2019-06-10 00:00:00", "repo_name": "alibaba/jetcache", "stars": 4554, "license": "apache-2.0", "language": "java", "size": 3742}
{"docstring": "/**\n * Set the generator for the {@link Exception} to be propagated when the maximum amount of retries\n * is exhausted. By default, throws an {@link Exceptions#retryExhausted(String, Throwable)} with the\n * message reflecting the total attempt index, transient attempt index and maximum retry count.\n * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added as the exception's cause.\n *\n * @param retryExhaustedGenerator the {@link Function} that generates the {@link Throwable} for the last\n * {@link reactor.util.retry.Retry.RetrySignal}\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec onRetryExhaustedThrow(BiFunction<RetrySpec, RetrySignal, Throwable> retryExhaustedGenerator)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tObjects.requireNonNull(retryExhaustedGenerator, \"retryExhaustedGenerator\"));\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "// see https://github.com/reactor/reactor-core/issues/477\n", "func_signal": "@Test\npublic void windowWhileUnboundedStartingDelimiterReplenishes()", "code": "{\n\tAtomicLong req = new AtomicLong();\n\tFlux<String> source = Flux.just(\"#\", \"1A\", \"1B\", \"1C\", \"#\", \"2A\", \"2B\", \"2C\", \"2D\", \"#\", \"3A\").hide();\n\n\tStepVerifier.create(\n\tsource\n\t\t\t.doOnRequest(req::addAndGet)\n\t\t\t.log(\"source\", Level.FINE)\n\t\t\t.windowWhile(s -> !\"#\".equals(s), 2)\n\t\t\t.log(\"windowWhile\", Level.FINE)\n\t\t\t.concatMap(w -> w.collectList()\n\t\t\t                 .log(\"window\", Level.FINE)\n\t\t\t\t\t, 1)\n\t\t\t.log(\"downstream\", Level.FINE)\n\t)\n\t            .expectNextMatches(List::isEmpty)\n\t            .assertNext(l -> assertThat(l).containsExactly(\"1A\", \"1B\", \"1C\"))\n\t            .assertNext(l -> assertThat(l).containsExactly(\"2A\", \"2B\", \"2C\", \"2D\"))\n\t            .assertNext(l -> assertThat(l).containsExactly(\"3A\"))\n\t            .expectComplete()\n\t            .verify(Duration.ofSeconds(1));\n\n\t//TODO is there something wrong here? concatMap now falls back to no fusion because of THREAD_BARRIER, and this results in 15 request total, not 13\n\tassertThat(req.get()).isGreaterThanOrEqualTo(13); //11 elements + the prefetch\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/*@Test\npublic void constructors() {\n\tConstructorTestBuilder ctb = new ConstructorTestBuilder(StreamAutoConnect.class);\n\t\n\tctb.addRef(\"source\", Flux.never().publish());\n\tctb.addInt(\"n\", 1, Integer.MAX_VALUE);\n\tctb.addRef(\"cancelSupport\", (Consumer<Runnable>)r -> { });\n\t\n\tctb.test();\n}*/\n", "func_signal": "@Test\npublic void connectImmediately()", "code": "{\n\tSinks.Many<Integer> e = Sinks.many().multicast().onBackpressureBuffer();\n\n\tAtomicReference<Disposable> cancel = new AtomicReference<>();\n\t\n\te.asFlux().publish().autoConnect(0, cancel::set);\n\n\tassertThat(cancel).doesNotHaveValue(null);\n\tassertThat(e.currentSubscriberCount()).as(\"source subscribed\").isPositive();\n\n\tcancel.get().dispose();\n\tassertThat(e.currentSubscriberCount()).as(\"source subscribed\").isZero();\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxAutoConnectTest.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/1452\n", "func_signal": "@Test\npublic void windowWhilePropagatingCancelToSource_disposeOuterFirst()", "code": "{\n\tfinal AtomicBoolean beforeWindowWhileStageCancelled = new AtomicBoolean();\n\tfinal AtomicBoolean afterWindowWhileStageCancelled = new AtomicBoolean();\n\n\tTestPublisher<String> testPublisher = TestPublisher.create();\n\n\tfinal Flux<String> sourceFlux = testPublisher\n\t\t\t.flux()\n\t\t\t.doOnCancel(() -> beforeWindowWhileStageCancelled.set(true));\n\n\tfinal AtomicInteger windowCounter = new AtomicInteger();\n\n\tfinal Disposable.Swap innerDisposable = Disposables.swap();\n\n\tfinal Disposable outerDisposable = sourceFlux\n\t\t\t.windowWhile(s -> !\"#\".equals(s))\n\t\t\t.doOnCancel(() -> afterWindowWhileStageCancelled.set(true))\n\t\t\t.subscribe(next -> {\n\t\t\t\tfinal int windowId = windowCounter.getAndIncrement();\n\n\t\t\t\tinnerDisposable.update(next.subscribe());\n\t\t\t});\n\n\ttestPublisher.next(\"1\");\n\n\t// Dispose outer subscription; we should see cancellation at stage after windowWhile, but not before\n\touterDisposable.dispose();\n\tassertThat(afterWindowWhileStageCancelled).as(\"afterWindowWhileStageCancelled cancelled when outer is disposed\").isTrue();\n\tassertThat(beforeWindowWhileStageCancelled).as(\"beforeWindowWhileStageCancelled cancelled when outer is disposed\").isFalse();\n\n\t// Dispose inner subscription; we should see cancellation propagates all the way up\n\tinnerDisposable.dispose();\n\tassertThat(afterWindowWhileStageCancelled).as(\"afterWindowWhileStageCancelled cancelled when inner is disposed\").isTrue();\n\tassertThat(beforeWindowWhileStageCancelled).as(\"beforeWindowWhileStageCancelled cancelled when inner is disposed\").isTrue();\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Add asynchronous behavior to be executed <strong>before</strong> the current retry trigger in the companion publisher,\n * thus <strong>delaying</strong> the resulting retry trigger with the additional {@link Mono}.\n *\n * @param doAsyncBeforeRetry the asynchronous hook to execute before original retry trigger is emitted\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec doBeforeRetryAsync(\n\t\tFunction<RetrySignal, Mono<Void>> doAsyncBeforeRetry)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\t(rs, m) -> asyncPreRetry.apply(rs, m).then(doAsyncBeforeRetry.apply(rs)),\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/744\n", "func_signal": "@Test\npublic void timeoutDropWhenNoCancelWithoutFallback()", "code": "{\n\tfor (int i = 0; i < 50; i++) {\n\t\tStepVerifier.withVirtualTime(\n\t\t\t\t() -> Flux.just(\"cat\")\n\t\t\t\t          .delaySubscription(Duration.ofMillis(3))\n\t\t\t\t          // We cancel on another scheduler that won't do anything to force it to act like\n\t\t\t\t          // the event is already in flight\n\t\t\t\t          .cancelOn(Schedulers.fromExecutor(r -> {}))\n\t\t\t\t          .timeout(Duration.ofMillis(2))\n\t\t)\n\t\t            .thenAwait(Duration.ofSeconds(5))\n\t\t            .expectError(TimeoutException.class)\n\t\t            .verify();\n\t}\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Allows to augment a previously {@link #filter(Predicate) set} {@link Predicate} with\n * a new condition to allow retries of some exception or not. This can typically be used with\n * {@link Predicate#and(Predicate)} to combine existing predicate(s) with a new one.\n * <p>\n * For example:\n * <pre><code>\n * //given\n * RetrySpec retryTwiceIllegalArgument = Retry.max(2)\n *     .filter(e -> e instanceof IllegalArgumentException);\n *\n * RetrySpec retryTwiceIllegalArgWithCause = retryTwiceIllegalArgument.modifyErrorFilter(old ->\n *     old.and(e -> e.getCause() != null));\n * </code></pre>\n *\n * @param predicateAdjuster a {@link Function} that returns a new {@link Predicate} given the\n * currently in place {@link Predicate} (usually deriving from the old predicate).\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec modifyErrorFilter(\n\t\tFunction<Predicate<Throwable>, Predicate<? super Throwable>> predicateAdjuster)", "code": "{\n\tObjects.requireNonNull(predicateAdjuster, \"predicateAdjuster\");\n\tPredicate<? super Throwable> newPredicate = Objects.requireNonNull(predicateAdjuster.apply(this.errorFilter),\n\t\t\t\"predicateAdjuster must return a new predicate\");\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tnewPredicate,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "// see https://github.com/reactor/reactor-core/issues/477\n", "func_signal": "@Test\npublic void windowWhileOneByOneStartingDelimiterReplenishes()", "code": "{\n\tAtomicLong req = new AtomicLong();\n\tFlux<String> source = Flux.just(\"#\", \"1A\", \"1B\", \"1C\", \"#\", \"2A\", \"2B\", \"2C\", \"2D\", \"#\", \"3A\").hide();\n\n\tStepVerifier.create(\n\t\t\tsource\n\t\t\t.doOnRequest(r -> req.addAndGet(r))\n\t\t\t.log(\"source\", Level.FINE)\n\t\t\t.windowWhile(s -> !\"#\".equals(s), 2)\n\t\t\t.log(\"windowWhile\", Level.FINE)\n\t\t\t.concatMap(w -> w.collectList()\n\t\t\t                 .log(\"window\", Level.FINE)\n\t\t\t\t\t, 1)\n\t\t\t.log(\"downstream\", Level.FINE)\n\t\t, StepVerifierOptions.create().checkUnderRequesting(false).initialRequest(1))\n\t            .expectNextMatches(List::isEmpty)\n\t            .thenRequest(1)\n\t            .assertNext(l -> assertThat(l).containsExactly(\"1A\", \"1B\", \"1C\"))\n\t            .thenRequest(1)\n\t            .assertNext(l -> assertThat(l).containsExactly(\"2A\", \"2B\", \"2C\", \"2D\"))\n\t            .thenRequest(1)\n\t            .assertNext(l -> assertThat(l).containsExactly(\"3A\"))\n                    .expectComplete()\n\t            .verify(Duration.ofSeconds(1));\n\n\t//TODO is there something wrong here? concatMap now falls back to no fusion because of THREAD_BARRIER, and this results in 15 request total, not 13\n\tassertThat(req.get()).isGreaterThanOrEqualTo(13); //11 elements + the prefetch\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Set the {@link Predicate} that will filter which errors can be retried. Exceptions\n * that don't pass the predicate will be propagated downstream and terminate the retry\n * sequence. Defaults to allowing retries for all exceptions.\n *\n * @param errorFilter the predicate to filter which exceptions can be retried\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec filter(Predicate<? super Throwable> errorFilter)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tObjects.requireNonNull(errorFilter, \"errorFilter\"),\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/1739\n", "func_signal": "@Test\npublic void fromExecutorServiceSchedulerId() throws InterruptedException", "code": "{\n\tScheduledExecutorService anonymousExecutor1 = Executors.newSingleThreadScheduledExecutor();\n\tScheduledExecutorService anonymousExecutor2 = Executors.newSingleThreadScheduledExecutor();\n\n\tString anonymousId1 = \"anonymousExecutor@\" + Integer.toHexString(System.identityHashCode(anonymousExecutor1));\n\tString anonymousId2 = \"anonymousExecutor@\" + Integer.toHexString(System.identityHashCode(anonymousExecutor2));\n\n\tafterTest.autoDispose(Schedulers.newParallel(\"foo\", 3));\n\tafterTest.autoDispose(Schedulers.fromExecutorService(anonymousExecutor1));\n\tafterTest.autoDispose(Schedulers.fromExecutorService(anonymousExecutor2));\n\tafterTest.autoDispose(Schedulers.fromExecutorService(Executors.newSingleThreadScheduledExecutor(), \"testService\"));\n\tafterTest.autoDispose(Schedulers.fromExecutorService(Executors.newSingleThreadScheduledExecutor(), \"testService\"));\n\n\tassertThat(\n\t\t\tregistry.getMeters()\n\t\t\t                   .stream()\n\t\t\t                   .map(m -> m.getId().getTag(\"name\"))\n\t\t\t                   .distinct()\n\t)\n\t\t\t.containsExactlyInAnyOrder(\n\t\t\t\t\t\"parallel(3,\\\"foo\\\")-0\",\n\t\t\t\t\t\"parallel(3,\\\"foo\\\")-2\",\n\t\t\t\t\t\"parallel(3,\\\"foo\\\")-1\",\n\t\t\t\t\t\"fromExecutorService(\" + anonymousId1 + \")-0\",\n\t\t\t\t\t\"fromExecutorService(\" + anonymousId2 + \")-0\",\n\t\t\t\t\t\"fromExecutorService(testService)-0\",\n\t\t\t\t\t\"fromExecutorService(testService)#1-0\"\n\t\t\t);\n}", "path": "reactor-core/reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Add synchronous behavior to be executed <strong>after</strong> the retry trigger is emitted in\n * the companion publisher. This should not be blocking, as the companion publisher\n * might be publishing events in a shared thread.\n *\n * @param doAfterRetry the synchronous hook to execute after retry trigger is started\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n * @see #doAfterRetryAsync(Function) andRetryThen for an asynchronous version\n */\n", "func_signal": "public RetrySpec doAfterRetry(Consumer<RetrySignal> doAfterRetry)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry.andThen(doAfterRetry),\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//==========\n// strategy\n//==========\n", "func_signal": "@Override\npublic Flux<Long> generateCompanion(Flux<RetrySignal> flux)", "code": "{\n\treturn flux.concatMap(retryWhenState -> {\n\t\t//capture the state immediately\n\t\tRetrySignal copy = retryWhenState.copy();\n\t\tThrowable currentFailure = copy.failure();\n\t\tlong iteration = isTransientErrors ? copy.totalRetriesInARow() : copy.totalRetries();\n\n\t\tif (currentFailure == null) {\n\t\t\treturn Mono.error(new IllegalStateException(\"RetryWhenState#failure() not expected to be null\"));\n\t\t}\n\t\telse if (!errorFilter.test(currentFailure)) {\n\t\t\treturn Mono.error(currentFailure);\n\t\t}\n\t\telse if (iteration >= maxAttempts) {\n\t\t\treturn Mono.error(retryExhaustedGenerator.apply(this, copy));\n\t\t}\n\t\telse {\n\t\t\treturn applyHooks(copy, Mono.just(iteration), doPreRetry, doPostRetry, asyncPreRetry, asyncPostRetry);\n\t\t}\n\t});\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Add asynchronous behavior to be executed <strong>after</strong> the current retry trigger in the companion publisher,\n * thus <strong>delaying</strong> the resulting retry trigger with the additional {@link Mono}.\n *\n * @param doAsyncAfterRetry the asynchronous hook to execute after original retry trigger is emitted\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec doAfterRetryAsync(\n\t\tFunction<RetrySignal, Mono<Void>> doAsyncAfterRetry)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\t(rs, m) -> asyncPostRetry.apply(rs, m).then(doAsyncAfterRetry.apply(rs)),\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/744\n", "func_signal": "@Test\npublic void timeoutDropWhenNoCancelWithFallback()", "code": "{\n\tfor (int i = 0; i < 50; i++) {\n\t\tStepVerifier.withVirtualTime(\n\t\t\t\t() -> Flux.just(\"cat\")\n\t\t\t\t          .delaySubscription(Duration.ofMillis(3))\n\t\t\t\t          // We cancel on another scheduler that won't do anything to force it to act like\n\t\t\t\t          // the event is already in flight\n\t\t\t\t          .cancelOn(Schedulers.fromExecutor(r -> {}))\n\t\t\t\t          .timeout(Duration.ofMillis(2), Flux.just(\"dog\").delayElements(Duration.ofMillis(5)))\n\t\t)\n\t\t            .thenAwait(Duration.ofSeconds(5))\n\t\t            .expectNext(\"dog\")\n\t\t            .expectComplete()\n\t\t            .verify();\n\t}\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Set the transient error mode, indicating that the strategy being built should use\n * {@link reactor.util.retry.Retry.RetrySignal#totalRetriesInARow()} rather than\n * {@link reactor.util.retry.Retry.RetrySignal#totalRetries()}.\n * Transient errors are errors that could occur in bursts but are then recovered from by\n * a retry (with one or more onNext signals) before another error occurs.\n * <p>\n * In the case of a simple count-based retry, this means that the {@link #maxAttempts(long)}\n * is applied to each burst individually.\n *\n * @param isTransientErrors {@code true} to activate transient mode\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n */\n", "func_signal": "public RetrySpec transientErrors(boolean isTransientErrors)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tisTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Set the maximum number of retry attempts allowed. 1 meaning \"1 retry attempt\":\n * the original subscription plus an extra re-subscription in case of an error, but\n * no more.\n *\n * @param maxAttempts the new retry attempt limit\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as a {@link Retry}\n */\n", "func_signal": "public RetrySpec maxAttempts(long maxAttempts)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tmaxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry,\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/**\n * Add synchronous behavior to be executed <strong>before</strong> the retry trigger is emitted in\n * the companion publisher. This should not be blocking, as the companion publisher\n * might be executing in a shared thread.\n *\n * @param doBeforeRetry the synchronous hook to execute before retry trigger is emitted\n * @return a new copy of the {@link RetrySpec} which can either be further configured or used as {@link Retry}\n * @see #doBeforeRetryAsync(Function) andDelayRetryWith for an asynchronous version\n */\n", "func_signal": "public RetrySpec doBeforeRetry(\n\t\tConsumer<RetrySignal> doBeforeRetry)", "code": "{\n\treturn new RetrySpec(\n\t\t\tthis.retryContext,\n\t\t\tthis.maxAttempts,\n\t\t\tthis.errorFilter,\n\t\t\tthis.isTransientErrors,\n\t\t\tthis.doPreRetry.andThen(doBeforeRetry),\n\t\t\tthis.doPostRetry,\n\t\t\tthis.asyncPreRetry,\n\t\t\tthis.asyncPostRetry,\n\t\t\tthis.retryExhaustedGenerator);\n}", "path": "reactor-core/reactor-core/src/main/java/reactor/util/retry/RetrySpec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/1452\n", "func_signal": "@Test\npublic void windowWhileNotPropagatingCancelToSource_withConcat()", "code": "{\n\t// Similar to windowWhileNotPropagatingCancelToSource_disposeOuterFirst\n\tfinal AtomicBoolean beforeWindowWhileStageCancelled = new AtomicBoolean();\n\tfinal AtomicBoolean afterWindowWhileStageCancelled = new AtomicBoolean();\n\n\tfinal Flux<String> sourceFlux = Flux.<String>create(fluxSink ->\n\t\t\tfluxSink\n\t\t\t\t\t.next(\"0\")\n\t\t\t\t\t.next(\"#\"))\n\t\t\t.doOnCancel(() -> beforeWindowWhileStageCancelled.set(true));\n\n\tfinal Disposable disposable = sourceFlux\n\t\t\t.windowWhile(s -> !\"#\".equals(s))\n\t\t\t.doOnCancel(() -> afterWindowWhileStageCancelled.set(true))\n\t\t\t.as(Flux::concat)\n\t\t\t.subscribe();\n\n\tdisposable.dispose();\n\n\tassertThat(afterWindowWhileStageCancelled).as(\"afterWindowWhileStageCancelled cancelled\").isTrue();\n\tassertThat(beforeWindowWhileStageCancelled).as(\"beforeWindowWhileStageCancelled cancelled\").isTrue();\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//see https://github.com/reactor/reactor-core/issues/1452\n", "func_signal": "@Test\npublic void windowWhileNotPropagatingCancelToSource_disposeInnerFirst()", "code": "{\n\tfinal AtomicBoolean beforeWindowWhileStageCancelled = new AtomicBoolean();\n\tfinal AtomicBoolean afterWindowWhileStageCancelled = new AtomicBoolean();\n\n\tfinal Flux<String> sourceFlux = Flux.<String>create(fluxSink ->\n\t\t\tfluxSink\n\t\t\t\t\t.next(\"0\")\n\t\t\t\t\t.next(\"#\"))\n\t\t\t.doOnCancel(() -> beforeWindowWhileStageCancelled.set(true));\n\n\tfinal AtomicInteger windowCounter = new AtomicInteger();\n\n\tfinal Disposable.Swap innerDisposable = Disposables.swap();\n\n\tfinal Disposable outerDisposable = sourceFlux\n\t\t\t.windowWhile(s -> !\"#\".equals(s))\n\t\t\t.doOnCancel(() -> afterWindowWhileStageCancelled.set(true))\n\t\t\t.subscribe(next -> {\n\t\t\t\tfinal int windowId = windowCounter.getAndIncrement();\n\n\t\t\t\tinnerDisposable.update(next.subscribe());\n\t\t\t});\n\n\t// Dispose inner subscription, outer Flux at before/after the windowWhile stage should not be cancelled yet\n\tinnerDisposable.dispose();\n\tassertThat(afterWindowWhileStageCancelled).as(\"afterWindowWhileStageCancelled cancelled when inner is disposed\").isFalse();\n\tassertThat(beforeWindowWhileStageCancelled).as(\"beforeWindowWhileStageCancelled cancelled when inner is disposed\").isFalse();\n\n\t// Dispose outer subscription; we should see cancellation propagates all the way up\n\touterDisposable.dispose();\n\tassertThat(afterWindowWhileStageCancelled).as(\"afterWindowWhileStageCancelled cancelled when outer is disposed\").isTrue();\n\tassertThat(beforeWindowWhileStageCancelled).as(\"beforeWindowWhileStageCancelled cancelled when outer is disposed\").isTrue();\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "//Fail\n//@Test\n", "func_signal": "public void immediateTimeoutResume()", "code": "{\n\tAssertSubscriber<Integer> ts = AssertSubscriber.create();\n\n\tFlux.range(1, 10)\n\t    .timeout(Flux.empty(), v -> Flux.never(), Flux.range(1, 10))\n\t    .subscribe(ts);\n\n\tts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t  .assertComplete()\n\t  .assertNoError();\n}", "path": "reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "reactor/reactor-core", "stars": 4786, "license": "apache-2.0", "language": "java", "size": 65345}
{"docstring": "/** Set up targets to receive log data */\n", "func_signal": "public void initializeLogging()", "code": "{\n    // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n    // Wraps Android's native log framework\n    LogWrapper logWrapper = new LogWrapper();\n    Log.setLogNode(logWrapper);\n\n    Log.i(TAG, \"Ready\");\n}", "path": "views-widgets-samples/SwipeRefreshLayoutBasic/Application/src/main/java/com/example/android/common/activities/SampleActivityBase.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Formats the log data and prints it out to the LogView.\n *\n * @param priority Log level of the data being logged.  Verbose, Error, etc.\n * @param tag      Tag for for the log data.  Can be used to organize log statements.\n * @param msg      The actual message to be logged. The actual message to be logged.\n * @param tr       If an exception was thrown, this can be sent along for the logging\n *                 facilities\n *                 to extract and print useful information.\n */\n", "func_signal": "@Override\npublic void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n\n    String priorityStr = null;\n\n    // For the purposes of this View, we want to print the priority as readable text.\n    switch (priority) {\n        case android.util.Log.VERBOSE:\n            priorityStr = \"VERBOSE\";\n            break;\n        case android.util.Log.DEBUG:\n            priorityStr = \"DEBUG\";\n            break;\n        case android.util.Log.INFO:\n            priorityStr = \"INFO\";\n            break;\n        case android.util.Log.WARN:\n            priorityStr = \"WARN\";\n            break;\n        case android.util.Log.ERROR:\n            priorityStr = \"ERROR\";\n            break;\n        case android.util.Log.ASSERT:\n            priorityStr = \"ASSERT\";\n            break;\n        default:\n            break;\n    }\n\n    // Handily, the Log class has a facility for converting a stack trace into a usable string.\n    String exceptionStr = null;\n    if (tr != null) {\n        exceptionStr = android.util.Log.getStackTraceString(tr);\n    }\n\n    // Take the priority, tag, message, and exception, and concatenate as necessary\n    // into one usable line of text.\n    final StringBuilder outputBuilder = new StringBuilder();\n\n    String delimiter = \"\\t\";\n    appendIfNotNull(outputBuilder, priorityStr, delimiter);\n    appendIfNotNull(outputBuilder, tag, delimiter);\n    appendIfNotNull(outputBuilder, msg, delimiter);\n    appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n    // In case this was originally called from an AsyncTask or some other off-UI thread,\n    // make sure the update occurs within the UI thread.\n    ((Activity) getContext()).runOnUiThread((new Thread(new Runnable() {\n        @Override\n        public void run() {\n            // Display the text we just generated within the LogView.\n            appendToLog(outputBuilder.toString());\n        }\n    })));\n\n    if (mNext != null) {\n        mNext.println(priority, tag, msg, tr);\n    }\n}", "path": "views-widgets-samples/MultiWindowPlayground/Application/src/main/java/com/example/android/common/logger/LogView.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n * the logger takes so many arguments that might be null, this method helps cut out some of the\n * agonizing tedium of writing the same 3 lines over and over.\n * @param source StringBuilder containing the text to append to.\n * @param addStr The String to append\n * @param delimiter The String to separate the source and appended strings. A tab or comma,\n *                  for instance.\n * @return The fully concatenated String as a StringBuilder\n */\n", "func_signal": "private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter)", "code": "{\n    if (addStr != null) {\n        if (addStr.length() == 0) {\n            delimiter = \"\";\n        }\n\n        return source.append(addStr).append(delimiter);\n    }\n    return source;\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/src/main/java/com/example/android/common/logger/LogView.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Cubic Hermite spline slope differentiated\n */\n", "func_signal": "private static double diff(double h, double x, double y1, double y2, double t1, double t2)", "code": "{\n  double x2 = x * x;\n  return -6 * x2 * y2 + 6 * x * y2 + 6 * x2 * y1 - 6 * x * y1 + 3 * h * t2 * x2 +\n      3 * h * t1 * x2 - 2 * h * t2 * x - 4 * h * t1 * x + h * t1;\n}", "path": "views-widgets-samples/ConstraintLayoutExamples/CycleEditor/src/com/google/androidstudio/motionlayoutcycles/MonotoneSpline.java", "commit_date": "2019-08-01 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Set the custom layout to be inflated for the tab views.\n *\n * @param layoutResId Layout id to be inflated\n * @param textViewId id of the {@link TextView} in the inflated view\n */\n", "func_signal": "public void setCustomTabView(int layoutResId, int textViewId)", "code": "{\n    mTabViewLayoutId = layoutResId;\n    mTabViewTextViewId = textViewId;\n}", "path": "views-widgets-samples/SwipeRefreshLayoutBasic/Application/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Creates a new ViewHolder for the given layout file.\n * <p>\n * The provided layout must be using data binding.\n *\n * @param parent   The RecyclerView\n * @param layoutId The layout id that should be inflated. Must use data binding\n * @param <T>      The type of the Binding class that will be generated for the <code>layoutId</code>.\n * @return A new ViewHolder that has a reference to the binding class\n */\n", "func_signal": "public static <T extends ViewDataBinding> DataBoundViewHolder<T> create(ViewGroup parent,\n                                                                        @LayoutRes int layoutId)", "code": "{\n    T binding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()),\n            layoutId, parent, false);\n    return new DataBoundViewHolder<>(binding);\n}", "path": "views-widgets-samples/DataBindingDataBoundRecyclerView/app/src/main/java/com/example/android/databoundrecyclerview/DataBoundViewHolder.java", "commit_date": "2019-09-18 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Set the children which can trigger a refresh by swiping down when they are visible. These\n * views need to be a descendant of this view.\n */\n", "func_signal": "public void setSwipeableChildren(final int... ids)", "code": "{\n    assert ids != null;\n\n    // Iterate through the ids and find the Views\n    mSwipeableChildren = new View[ids.length];\n    for (int i = 0; i < ids.length; i++) {\n        mSwipeableChildren[i] = findViewById(ids[i]);\n    }\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/src/main/java/com/example/android/swiperefreshmultipleviews/MultiSwipeRefreshLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Sets the associated view pager. Note that the assumption here is that the pager content\n * (number of tabs and tab titles) does not change after this call has been made.\n */\n", "func_signal": "public void setViewPager(ViewPager viewPager)", "code": "{\n    mTabStrip.removeAllViews();\n\n    mViewPager = viewPager;\n    if (viewPager != null) {\n        viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n        populateTabStrip();\n    }\n}", "path": "views-widgets-samples/SwipeRefreshLayoutBasic/Application/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n * the logger takes so many arguments that might be null, this method helps cut out some of the\n * agonizing tedium of writing the same 3 lines over and over.\n *\n * @param source    StringBuilder containing the text to append to.\n * @param addStr    The String to append\n * @param delimiter The String to separate the source and appended strings. A tab or comma,\n *                  for instance.\n * @return The fully concatenated String as a StringBuilder\n */\n", "func_signal": "private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter)", "code": "{\n    if (addStr != null) {\n        if (addStr.length() == 0) {\n            delimiter = \"\";\n        }\n\n        return source.append(addStr).append(delimiter);\n    }\n    return source;\n}", "path": "views-widgets-samples/MultiWindowPlayground/Application/src/main/java/com/example/android/common/logger/LogView.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "// BEGIN_INCLUDE(can_view_scroll_up)\n/**\n * Utility method to check whether a {@link View} can scroll up from it's current position.\n * Handles platform version differences, providing backwards compatible functionality where\n * needed.\n */\n", "func_signal": "private static boolean canViewScrollUp(View view)", "code": "{\n    if (android.os.Build.VERSION.SDK_INT >= 14) {\n        // For ICS and above we can call canScrollVertically() to determine this\n        return ViewCompat.canScrollVertically(view, -1);\n    } else {\n        if (view instanceof AbsListView) {\n            // Pre-ICS we need to manually check the first visible item and the child view's top\n            // value\n            final AbsListView listView = (AbsListView) view;\n            return listView.getChildCount() > 0 &&\n                    (listView.getFirstVisiblePosition() > 0\n                            || listView.getChildAt(0).getTop() < listView.getPaddingTop());\n        } else {\n            // For all other view types we just check the getScrollY() value\n            return view.getScrollY() > 0;\n        }\n    }\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/src/main/java/com/example/android/swiperefreshmultipleviews/MultiSwipeRefreshLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Test that swiping on the empty view triggers a refresh.\n */\n", "func_signal": "public void testSwipingEmptyView()", "code": "{\n    // Given a SwipeRefreshLayout which is displaying the empty view\n\n    // When the swipe refresh layout is dragged\n    TouchUtils.dragViewBy(this,\n            mSwipeRefreshLayout,\n            Gravity.CENTER,\n            0,\n            Math.round(mSwipeRefreshLayout.getHeight() * 0.4f));\n\n    // Then the SwipeRefreshLayout should be refreshing\n    getInstrumentation().runOnMainSync(new Runnable() {\n        @Override\n        public void run() {\n            assertTrue(mSwipeRefreshLayout.isRefreshing());\n        }\n    });\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/tests/src/com/example/android/swiperefreshmultipleviews/tests/SampleTests.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Formats the log data and prints it out to the LogView.\n * @param priority Log level of the data being logged.  Verbose, Error, etc.\n * @param tag Tag for for the log data.  Can be used to organize log statements.\n * @param msg The actual message to be logged. The actual message to be logged.\n * @param tr If an exception was thrown, this can be sent along for the logging facilities\n *           to extract and print useful information.\n */\n", "func_signal": "@Override\npublic void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n\n    \n    String priorityStr = null;\n\n    // For the purposes of this View, we want to print the priority as readable text.\n    switch(priority) {\n        case android.util.Log.VERBOSE:\n            priorityStr = \"VERBOSE\";\n            break;\n        case android.util.Log.DEBUG:\n            priorityStr = \"DEBUG\";\n            break;\n        case android.util.Log.INFO:\n            priorityStr = \"INFO\";\n            break;\n        case android.util.Log.WARN:\n            priorityStr = \"WARN\";\n            break;\n        case android.util.Log.ERROR:\n            priorityStr = \"ERROR\";\n            break;\n        case android.util.Log.ASSERT:\n            priorityStr = \"ASSERT\";\n            break;\n        default:\n            break;\n    }\n\n    // Handily, the Log class has a facility for converting a stack trace into a usable string.\n    String exceptionStr = null;\n    if (tr != null) {\n        exceptionStr = android.util.Log.getStackTraceString(tr);\n    }\n\n    // Take the priority, tag, message, and exception, and concatenate as necessary\n    // into one usable line of text.\n    final StringBuilder outputBuilder = new StringBuilder();\n\n    String delimiter = \"\\t\";\n    appendIfNotNull(outputBuilder, priorityStr, delimiter);\n    appendIfNotNull(outputBuilder, tag, delimiter);\n    appendIfNotNull(outputBuilder, msg, delimiter);\n    appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n    // In case this was originally called from an AsyncTask or some other off-UI thread,\n    // make sure the update occurs within the UI thread.\n    ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n        @Override\n        public void run() {\n            // Display the text we just generated within the LogView.\n            appendToLog(outputBuilder.toString());\n        }\n    })));\n\n    if (mNext != null) {\n        mNext.println(priority, tag, msg, tr);\n    }\n}", "path": "views-widgets-samples/SwipeRefreshLayoutBasic/Application/src/main/java/com/example/android/common/logger/LogView.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Formats the log data and prints it out to the LogView.\n * @param priority Log level of the data being logged.  Verbose, Error, etc.\n * @param tag Tag for for the log data.  Can be used to organize log statements.\n * @param msg The actual message to be logged. The actual message to be logged.\n * @param tr If an exception was thrown, this can be sent along for the logging facilities\n *           to extract and print useful information.\n */\n", "func_signal": "@Override\npublic void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n\n    \n    String priorityStr = null;\n\n    // For the purposes of this View, we want to print the priority as readable text.\n    switch(priority) {\n        case android.util.Log.VERBOSE:\n            priorityStr = \"VERBOSE\";\n            break;\n        case android.util.Log.DEBUG:\n            priorityStr = \"DEBUG\";\n            break;\n        case android.util.Log.INFO:\n            priorityStr = \"INFO\";\n            break;\n        case android.util.Log.WARN:\n            priorityStr = \"WARN\";\n            break;\n        case android.util.Log.ERROR:\n            priorityStr = \"ERROR\";\n            break;\n        case android.util.Log.ASSERT:\n            priorityStr = \"ASSERT\";\n            break;\n        default:\n            break;\n    }\n\n    // Handily, the Log class has a facility for converting a stack trace into a usable string.\n    String exceptionStr = null;\n    if (tr != null) {\n        exceptionStr = android.util.Log.getStackTraceString(tr);\n    }\n\n    // Take the priority, tag, message, and exception, and concatenate as necessary\n    // into one usable line of text.\n    final StringBuilder outputBuilder = new StringBuilder();\n\n    String delimiter = \"\\t\";\n    appendIfNotNull(outputBuilder, priorityStr, delimiter);\n    appendIfNotNull(outputBuilder, tag, delimiter);\n    appendIfNotNull(outputBuilder, msg, delimiter);\n    appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n    // In case this was originally called from an AsyncTask or some other off-UI thread,\n    // make sure the update occurs within the UI thread.\n    ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n        @Override\n        public void run() {\n            // Display the text we just generated within the LogView.\n            appendToLog(outputBuilder.toString());\n        }\n    })));\n\n    if (mNext != null) {\n        mNext.println(priority, tag, msg, tr);\n    }\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/src/main/java/com/example/android/common/logger/LogView.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n* Test if the test fixture has been set up correctly.\n*/\n", "func_signal": "public void testPreconditions()", "code": "{\n    //Try to add a message to add context to your assertions. These messages will be shown if\n    //a tests fails and make it easy to understand why a test failed\n    assertNotNull(\"mTestActivity is null\", mTestActivity);\n    assertNotNull(\"mTestFragment is null\", mTestFragment);\n    assertNotNull(\"mSwipeRefreshLayout is null\", mSwipeRefreshLayout);\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/tests/src/com/example/android/swiperefreshmultipleviews/tests/SampleTests.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "// BEGIN_INCLUDE(can_child_scroll_up)\n/**\n * This method controls when the swipe-to-refresh gesture is triggered. By returning false here\n * we are signifying that the view is in a state where a refresh gesture can start.\n *\n * <p>As {@link android.support.v4.widget.SwipeRefreshLayout} only supports one direct child by\n * default, we need to manually iterate through our swipeable children to see if any are in a\n * state to trigger the gesture. If so we return false to start the gesture.\n */\n", "func_signal": "@Override\npublic boolean canChildScrollUp()", "code": "{\n    if (mSwipeableChildren != null && mSwipeableChildren.length > 0) {\n        // Iterate through the scrollable children and check if any of them can not scroll up\n        for (View view : mSwipeableChildren) {\n            if (view != null && view.isShown() && !canViewScrollUp(view)) {\n                // If the view is shown, and can not scroll upwards, return false and start the\n                // gesture.\n                return false;\n            }\n        }\n    }\n    return true;\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/src/main/java/com/example/android/swiperefreshmultipleviews/MultiSwipeRefreshLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Cubic Hermite spline\n */\n", "func_signal": "private static double length(double h, double x, double y1, double y2, double t1, double t2)", "code": "{\n  double x2 = x * x;\n  double x3 = x2 * x;\n  double x4 = x3 * x;\n  return\n      (-(x4 * y2) / 2) + x3 * y2 + (x4 * y1) / 2 - x3 * y1 + x * y1 + (h * t2 * x4) / 4\n          + (h * t1 * x4) / 4 - (h * t2 * x3) / 3 + ((-2) * h * t1 * x3) / 3\n          + (h * t1 * x2) / 2;\n\n}", "path": "views-widgets-samples/ConstraintLayoutExamples/CycleEditor/src/com/google/androidstudio/motionlayoutcycles/MonotoneSpline.java", "commit_date": "2019-08-01 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n * {@link #setCustomTabView(int, int)}.\n */\n", "func_signal": "protected TextView createDefaultTabView(Context context)", "code": "{\n    TextView textView = new TextView(context);\n    textView.setGravity(Gravity.CENTER);\n    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n    textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        // If we're running on Honeycomb or newer, then we can use the Theme's\n        // selectableItemBackground to ensure that the View has a pressed state\n        TypedValue outValue = new TypedValue();\n        getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n                outValue, true);\n        textView.setBackgroundResource(outValue.resourceId);\n    }\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n        textView.setAllCaps(true);\n    }\n\n    int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n    textView.setPadding(padding, padding, padding, padding);\n\n    return textView;\n}", "path": "views-widgets-samples/SwipeRefreshLayoutBasic/Application/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Cubic Hermite spline\n */\n", "func_signal": "private static double interpolate(double h, double x, double y1, double y2, double t1,\n    double t2)", "code": "{\n  double x2 = x * x;\n  double x3 = x2 * x;\n  return -2 * x3 * y2 + 3 * x2 * y2 + 2 * x3 * y1 - 3 * x2 * y1 + y1\n      + h * t2 * x3 + h * t1 * x3 - h * t2 * x2 - 2 * h * t1 * x2\n      + h * t1 * x;\n}", "path": "views-widgets-samples/ConstraintLayoutExamples/CycleEditor/src/com/google/androidstudio/motionlayoutcycles/MonotoneSpline.java", "commit_date": "2019-08-01 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Test that selecting the refresh menu item triggers a refresh.\n */\n", "func_signal": "public void testRefreshMenuItem()", "code": "{\n    // When the refresh menu item is selected\n    getInstrumentation().invokeMenuActionSync(mTestActivity, R.id.menu_refresh, 0);\n\n    // Then the SwipeRefreshLayout should be refreshing\n    assertTrue(mSwipeRefreshLayout.isRefreshing());\n}", "path": "views-widgets-samples/SwipeRefreshMultipleViews/Application/tests/src/com/example/android/swiperefreshmultipleviews/tests/SampleTests.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Prints data out to the console using Android's native log mechanism.\n *\n * @param priority Log level of the data being logged.  Verbose, Error, etc.\n * @param tag      Tag for for the log data.  Can be used to organize log statements.\n * @param msg      The actual message to be logged. The actual message to be logged.\n * @param tr       If an exception was thrown, this can be sent along for the logging\n *                 facilities\n *                 to extract and print useful information.\n */\n", "func_signal": "@Override\npublic void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n    // There actually are log methods that don't take a msg parameter.  For now,\n    // if that's the case, just convert null to the empty string and move on.\n    String useMsg = msg;\n    if (useMsg == null) {\n        useMsg = \"\";\n    }\n\n    // If an exeption was provided, convert that exception to a usable string and attach\n    // it to the end of the msg method.\n    if (tr != null) {\n        msg += \"\\n\" + Log.getStackTraceString(tr);\n    }\n\n    // This is functionally identical to Log.x(tag, useMsg);\n    // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n    Log.println(priority, tag, useMsg);\n\n    // If this isn't the last node in the chain, move things along.\n    if (mNext != null) {\n        mNext.println(priority, tag, msg, tr);\n    }\n}", "path": "views-widgets-samples/MultiWindowPlayground/Application/src/main/java/com/example/android/common/logger/LogWrapper.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "android/views-widgets-samples", "stars": 4981, "license": "apache-2.0", "language": "java", "size": 63749}
{"docstring": "/**\n * Tests whether swiping an item once triggers UndoCallback#onUndoShown.\n */\n", "func_signal": "public void testUndoShown() throws InterruptedException", "code": "{\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 0);\n\n    verify(mUndoCallback).onUndoShown(any(View.class), eq(0));\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Tests whether the last item is dismissable after some other items have been dismissed.\n */\n", "func_signal": "public void testLastItemDismissable_itemsDismissed() throws InterruptedException", "code": "{\n    /* Given some items are dismissed */\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 0);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 1);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 2);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 0);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 1);\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 2);\n\n    /* When trying to dismiss the last item */\n    int lastPosition = mAbsListView.getAdapter().getCount() - 1;\n    mAbsListView.smoothScrollToPosition(lastPosition);\n\n    Thread.sleep(15000); // Wait for the smooth scroll to settle;\n\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, lastPosition); // Swipe to show undo\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, lastPosition); // Swipe to dismiss\n\n    /* Then I should be notified of dismissing the last item. */\n    verify(mUndoCallback).onDismiss(any(View.class), eq(lastPosition));\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Retrieves the position in the list corresponding to itemId.\n *\n * @return the position of the item in the list, or {@link android.widget.AdapterView#INVALID_POSITION} if the {@code View} corresponding to the id was not found.\n */\n", "func_signal": "private int getPositionForId(final long itemId)", "code": "{\n    View v = getViewForId(itemId);\n    if (v == null) {\n        return AdapterView.INVALID_POSITION;\n    } else {\n        return mWrapper.getPositionForView(v);\n    }\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Creates a new {@code DragAndDropHandler} for the listview implementation\n * in given {@link com.nhaarman.listviewanimations.itemmanipulation.dragdrop.DragAndDropListViewWrapper}\n *\n * @param dragAndDropListViewWrapper the {@code DragAndDropListViewWrapper} which wraps the listview implementation to use.\n */\n", "func_signal": "public DragAndDropHandler(@NonNull final DragAndDropListViewWrapper dragAndDropListViewWrapper)", "code": "{\n    mWrapper = dragAndDropListViewWrapper;\n    if (mWrapper.getAdapter() != null) {\n        setAdapterInternal(mWrapper.getAdapter());\n    }\n\n    mScrollHandler = new ScrollHandler();\n    mWrapper.setOnScrollListener(mScrollHandler);\n\n    mDraggableManager = new DefaultDraggableManager();\n\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n        mSwitchViewAnimator = new KitKatSwitchViewAnimator();\n    } else {\n        mSwitchViewAnimator = new LSwitchViewAnimator();\n    }\n\n    mMobileItemId = INVALID_ID;\n\n    ViewConfiguration vc = ViewConfiguration.get(dragAndDropListViewWrapper.getListView().getContext());\n    mSlop = vc.getScaledTouchSlop();\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Tests whether swiping multiple items triggers onUndoShown, but not onDismiss.\n */\n", "func_signal": "public void testMultipleUndo() throws InterruptedException", "code": "{\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 0);\n\n    verify(mUndoCallback).onUndoShown(any(View.class), eq(0));\n\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 1);\n\n    verify(mUndoCallback).onUndoShown(any(View.class), eq(1));\n\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 2);\n\n    verify(mUndoCallback).onUndoShown(any(View.class), eq(2));\n\n    verify(mUndoCallback, never()).onDismiss(any(View.class), anyInt());\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Tests whether swiping an item twice triggers UndoCallback#onDismiss.\n */\n", "func_signal": "public void testDismiss() throws InterruptedException", "code": "{\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 0);\n\n    verify(mUndoCallback).onUndoShown(any(View.class), eq(0));\n    verify(mUndoCallback, never()).onDismiss(any(View.class), anyInt());\n\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 0);\n\n    verify(mUndoCallback).onDismiss(any(View.class), eq(0));\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Determines if the listview scrolled up enough to reveal a new cell at the\n * top of the list. If so, switches the newly shown view with the mobile view.\n */\n", "func_signal": "private void checkAndHandleFirstVisibleCellChange()", "code": "{\n    if (mHoverDrawable == null || mAdapter == null || mCurrentFirstVisibleItem >= mPreviousFirstVisibleItem) {\n        return;\n    }\n\n    int position = getPositionForId(mMobileItemId);\n    if (position == AdapterView.INVALID_POSITION) {\n        return;\n    }\n\n    long switchItemId = position - 1 - mWrapper.getHeaderViewsCount() >= 0 ? mAdapter.getItemId(position - 1 - mWrapper.getHeaderViewsCount()) : INVALID_ID;\n    View switchView = getViewForId(switchItemId);\n    if (switchView != null) {\n        switchViews(switchView, switchItemId, -switchView.getHeight());\n    }\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Handles the move events.\n * <p/>\n * Applies the {@link MotionEvent} to the hover drawable, and switches {@code View}s if necessary.\n *\n * @param event the {@code MotionEvent}.\n *\n * @return {@code true} if the event was handled, {@code false} otherwise.\n */\n", "func_signal": "private boolean handleMoveEvent(@NonNull final MotionEvent event)", "code": "{\n    boolean handled = false;\n\n    float deltaX = event.getRawX() - mDownX;\n    float deltaY = event.getRawY() - mDownY;\n\n    if (mHoverDrawable == null && Math.abs(deltaY) > mSlop && Math.abs(deltaY) > Math.abs(deltaX)) {\n        int position = mWrapper.pointToPosition((int) event.getX(), (int) event.getY());\n        if (position != AdapterView.INVALID_POSITION) {\n            View downView = mWrapper.getChildAt(position - mWrapper.getFirstVisiblePosition());\n            assert downView != null;\n            if (mDraggableManager.isDraggable(downView, position - mWrapper.getHeaderViewsCount(), event.getX() - downView.getX(), event.getY() - downView.getY())) {\n                startDragging(position - mWrapper.getHeaderViewsCount());\n                handled = true;\n            }\n        }\n    } else if (mHoverDrawable != null) {\n        mHoverDrawable.handleMoveEvent(event);\n\n        switchIfNecessary();\n        mWrapper.getListView().invalidate();\n        handled = true;\n    }\n\n    return handled;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Determines if the listview scrolled down enough to reveal a new cell at the\n * bottom of the list. If so, switches the newly shown view with the mobile view.\n */\n", "func_signal": "private void checkAndHandleLastVisibleCellChange()", "code": "{\n    if (mHoverDrawable == null || mAdapter == null || mCurrentLastVisibleItem <= mPreviousLastVisibleItem) {\n        return;\n    }\n\n    int position = getPositionForId(mMobileItemId);\n    if (position == AdapterView.INVALID_POSITION) {\n        return;\n    }\n\n    long switchItemId = position + 1 - mWrapper.getHeaderViewsCount() < mAdapter.getCount()\n                        ? mAdapter.getItemId(position + 1 - mWrapper.getHeaderViewsCount())\n                        : INVALID_ID;\n    View switchView = getViewForId(switchItemId);\n    if (switchView != null) {\n        switchViews(switchView, switchItemId, switchView.getHeight());\n    }\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Handles the down event.\n * <p/>\n * Finds the position and {@code View} of the touch point and, if allowed by the {@link com.nhaarman.listviewanimations.itemmanipulation.dragdrop.DraggableManager},\n * starts dragging the {@code View}.\n *\n * @param event the {@link android.view.MotionEvent} that was triggered.\n *\n * @return {@code true} if we have started dragging, {@code false} otherwise.\n */\n", "func_signal": "private boolean handleDownEvent(@NonNull final MotionEvent event)", "code": "{\n    mDownX = event.getRawX();\n    mDownY = event.getRawY();\n    return true;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * @throws java.lang.IllegalStateException    if the adapter does not have stable ids.\n * @throws java.lang.IllegalArgumentException if the adapter does not implement {@link com.nhaarman.listviewanimations.util.Swappable}.\n */\n", "func_signal": "private void setAdapterInternal(@NonNull final ListAdapter adapter)", "code": "{\n    ListAdapter actualAdapter = adapter;\n    if (actualAdapter instanceof WrapperListAdapter) {\n        actualAdapter = ((WrapperListAdapter) actualAdapter).getWrappedAdapter();\n    }\n\n    if (!actualAdapter.hasStableIds()) {\n        throw new IllegalStateException(\"Adapter doesn't have stable ids! Make sure your adapter has stable ids, and override hasStableIds() to return true.\");\n    }\n\n    if (!(actualAdapter instanceof Swappable)) {\n        throw new IllegalArgumentException(\"Adapter should implement Swappable!\");\n    }\n\n    mAdapter = actualAdapter;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Starts dragging the item at given position. User must be touching this {@code DynamicListView}.\n *\n * @param position the position of the item in the adapter to start dragging. Be sure to subtract any header views.\n *\n * @throws java.lang.IllegalStateException if the user is not touching this {@code DynamicListView},\n *                                         or if there is no adapter set.\n */\n", "func_signal": "public void startDragging(final int position)", "code": "{\n    if (mMobileItemId != INVALID_ID) {\n        /* We are already dragging */\n        return;\n    }\n\n    if (mLastMotionEventY < 0) {\n        throw new IllegalStateException(\"User must be touching the DynamicListView!\");\n    }\n\n    if (mAdapter == null) {\n        throw new IllegalStateException(\"This DynamicListView has no adapter set!\");\n    }\n\n    if (position < 0 || position >= mAdapter.getCount()) {\n        /* Out of bounds */\n        return;\n    }\n\n\n    mMobileView = mWrapper.getChildAt(position - mWrapper.getFirstVisiblePosition() + mWrapper.getHeaderViewsCount());\n    if (mMobileView != null) {\n        mOriginalMobileItemPosition = position;\n        mMobileItemId = mAdapter.getItemId(position);\n        mHoverDrawable = new HoverDrawable(mMobileView, mLastMotionEventY);\n        mMobileView.setVisibility(View.INVISIBLE);\n    }\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Switches the item that is currently being dragged with the item belonging to given id,\n * by notifying the adapter to swap positions and that the data set has changed.\n *\n * @param switchView   the {@code View} that should be animated towards the old position of the currently dragging item.\n * @param switchId     the id of the item that will take the position of the currently dragging item.\n * @param translationY the distance in pixels the {@code switchView} should animate - i.e. the (positive or negative) height of the {@code View} corresponding to the currently\n *                     dragging item.\n */\n", "func_signal": "private void switchViews(final View switchView, final long switchId, final float translationY)", "code": "{\n    assert mHoverDrawable != null;\n    assert mAdapter != null;\n    assert mMobileView != null;\n\n    final int switchViewPosition = mWrapper.getPositionForView(switchView);\n    int mobileViewPosition = mWrapper.getPositionForView(mMobileView);\n\n    ((Swappable) mAdapter).swapItems(switchViewPosition - mWrapper.getHeaderViewsCount(), mobileViewPosition - mWrapper.getHeaderViewsCount());\n    ((BaseAdapter) mAdapter).notifyDataSetChanged();\n\n    mHoverDrawable.shift(switchView.getHeight());\n    mSwitchViewAnimator.animateSwitchView(switchId, translationY);\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Tests whether multiple dismisses are correctly handled.\n */\n", "func_signal": "public void testMultipleDismisses() throws InterruptedException", "code": "{\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 0);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 1);\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 2);\n\n    verify(mUndoCallback, times(3)).onUndoShown(any(View.class), anyInt());\n    verify(mUndoCallback, never()).onDismiss(any(View.class), anyInt());\n\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 0);\n    dispatchSwipeMotionEvents(getInstrumentation(), mAbsListView, 1);\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 2);\n\n    verify(mUndoCallback, times(3)).onDismiss(any(View.class), anyInt());\n    verify(mUndoCallback).onDismiss(eq(mAbsListView), aryEq(new int[]{2, 1, 0}));\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Dispatches the {@link android.view.MotionEvent}s to their proper methods if applicable.\n *\n * @param event the {@code MotionEvent}.\n *\n * @return {@code true} if the event was handled, {@code false} otherwise.\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(@NonNull final MotionEvent event)", "code": "{\n    boolean handled = false;\n\n    /* We are in the process of animating the hover drawable back, do not start a new drag yet. */\n    if (!mIsSettlingHoverDrawable) {\n        switch (event.getAction() & MotionEvent.ACTION_MASK) {\n            case MotionEvent.ACTION_DOWN:\n                mLastMotionEventY = event.getY();\n                handled = handleDownEvent(event);\n                break;\n            case MotionEvent.ACTION_MOVE:\n                mLastMotionEventY = event.getY();\n                handled = handleMoveEvent(event);\n                break;\n            case MotionEvent.ACTION_UP:\n                handled = handleUpEvent();\n                mLastMotionEventY = -1;\n                break;\n            case MotionEvent.ACTION_CANCEL:\n                handled = handleCancelEvent();\n                mLastMotionEventY = -1;\n                break;\n            default:\n                handled = false;\n                break;\n        }\n    }\n    return handled;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Create a new {@code SimpleSwipeUndoAdapterGen}, decorating given {@link android.widget.BaseAdapter}.\n *\n * @param undoAdapter     the {@link android.widget.BaseAdapter} that is decorated. Must implement\n *                        {@link com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.undo.UndoAdapter}.\n * @param context         the {@link android.content.Context}.\n * @param dismissCallback the {@link com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.OnDismissCallback} that is notified of dismissed items.\n */\n", "func_signal": "public SimpleSwipeUndoAdapter(@NonNull final BaseAdapter adapter, @NonNull final Context context,\n                              @NonNull final OnDismissCallback dismissCallback)", "code": "{\n    // We fix this right away\n    // noinspection ConstantConditions\n    super(adapter, null);\n    setUndoCallback(this);\n\n    BaseAdapter undoAdapter = adapter;\n    while (undoAdapter instanceof BaseAdapterDecorator) {\n        undoAdapter = ((BaseAdapterDecorator) undoAdapter).getDecoratedBaseAdapter();\n    }\n\n    if (!(undoAdapter instanceof UndoAdapter)) {\n        throw new IllegalStateException(\"BaseAdapter must implement UndoAdapter!\");\n    }\n\n    mUndoAdapter = (UndoAdapter) undoAdapter;\n    mContext = context;\n    mOnDismissCallback = dismissCallback;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SimpleSwipeUndoAdapter.java", "commit_date": "2014-08-07 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Retrieves the {@code View} in the list corresponding to itemId.\n *\n * @return the {@code View}, or {@code null} if not found.\n */\n", "func_signal": "@Nullable\nprivate View getViewForId(final long itemId)", "code": "{\n    ListAdapter adapter = mAdapter;\n    if (itemId == INVALID_ID || adapter == null) {\n        return null;\n    }\n\n    int firstVisiblePosition = mWrapper.getFirstVisiblePosition();\n\n    View result = null;\n    for (int i = 0; i < mWrapper.getChildCount() && result == null; i++) {\n        int position = firstVisiblePosition + i;\n        if (position - mWrapper.getHeaderViewsCount() >= 0) {\n            long id = adapter.getItemId(position - mWrapper.getHeaderViewsCount());\n            if (id == itemId) {\n                result = mWrapper.getChildAt(i);\n            }\n        }\n    }\n    return result;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Tests whether the last item is dismissable after some an item has been dismissed and undone.\n */\n", "func_signal": "public void testLastItemDismissable_itemUndone() throws InterruptedException", "code": "{\n    /* Given an item is dismissed and undone */\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, 0);\n    mSwipeUndoTouchListener.undo(mAbsListView.getChildAt(0));\n\n    /* When trying to dismiss the last item */\n    int lastPosition = mAbsListView.getAdapter().getCount() - 1;\n    mAbsListView.smoothScrollToPosition(lastPosition);\n\n    Thread.sleep(5000); // Wait for the smooth scroll to settle;\n\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, lastPosition); // Swipe to show undo\n    mAbsListView.smoothScrollToPosition(lastPosition);\n    Thread.sleep(5000);\n    dispatchSwipeMotionEventsAndWait(getInstrumentation(), mAbsListView, lastPosition); // Swipe to dismiss\n\n    /* Then I should be notified of dismissing the last item. */\n    verify(mUndoCallback).onDismiss(any(View.class), eq(lastPosition));\n}", "path": "ListViewAnimations/lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java", "commit_date": "2014-08-21 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Finds the {@code View} that is a candidate for switching, and executes the switch if necessary.\n */\n", "func_signal": "private void switchIfNecessary()", "code": "{\n    if (mHoverDrawable == null || mAdapter == null) {\n        return;\n    }\n\n    int position = getPositionForId(mMobileItemId);\n    long aboveItemId = position - 1 - mWrapper.getHeaderViewsCount() >= 0 ? mAdapter.getItemId(position - 1 - mWrapper.getHeaderViewsCount()) : INVALID_ID;\n    long belowItemId = position + 1 - mWrapper.getHeaderViewsCount() < mAdapter.getCount()\n                       ? mAdapter.getItemId(position + 1 - mWrapper.getHeaderViewsCount())\n                       : INVALID_ID;\n\n    final long switchId = mHoverDrawable.isMovingUpwards() ? aboveItemId : belowItemId;\n    View switchView = getViewForId(switchId);\n\n    final int deltaY = mHoverDrawable.getDeltaY();\n    if (switchView != null && Math.abs(deltaY) > mHoverDrawable.getIntrinsicHeight()) {\n        switchViews(switchView, switchId, mHoverDrawable.getIntrinsicHeight() * (deltaY < 0 ? -1 : 1));\n    }\n\n    mScrollHandler.handleMobileCellScroll();\n\n    mWrapper.getListView().invalidate();\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Handles the up event.\n * <p/>\n * Animates the hover drawable to its final position, and finalizes our drag properties when the animation has finished.\n * Will also notify the {@link com.nhaarman.listviewanimations.itemmanipulation.dragdrop.OnItemMovedListener} set if applicable.\n *\n * @return {@code true} if the event was handled, {@code false} otherwise.\n */\n", "func_signal": "private boolean handleUpEvent()", "code": "{\n    if (mMobileView == null) {\n        return false;\n    }\n    assert mHoverDrawable != null;\n\n    ValueAnimator valueAnimator = ValueAnimator.ofInt(mHoverDrawable.getTop(), (int) mMobileView.getY());\n    SettleHoverDrawableAnimatorListener listener = new SettleHoverDrawableAnimatorListener(mHoverDrawable, mMobileView);\n    valueAnimator.addUpdateListener(listener);\n    valueAnimator.addListener(listener);\n    valueAnimator.start();\n\n    int newPosition = getPositionForId(mMobileItemId) - mWrapper.getHeaderViewsCount();\n    if (mOriginalMobileItemPosition != newPosition && mOnItemMovedListener != null) {\n        mOnItemMovedListener.onItemMoved(mOriginalMobileItemPosition, newPosition);\n    }\n\n    return true;\n}", "path": "ListViewAnimations/lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/dragdrop/DragAndDropHandler.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "nhaarman/ListViewAnimations", "stars": 5572, "license": "apache-2.0", "language": "java", "size": 25513}
{"docstring": "/**\n * Registers the declared abilities using method reflection. Also, replies are accumulated using the built abilities and standalone methods that return a Reply.\n * <p>\n * <b>Only abilities and replies with the <u>public</u> accessor are registered!</b>\n */\n", "func_signal": "private void registerAbilities()", "code": "{\n    try {\n        // Collect all classes that implement AbilityExtension declared in the bot\n        extensions.addAll(stream(getClass().getMethods())\n                .filter(checkReturnType(AbilityExtension.class))\n                .map(returnExtension(this))\n                .collect(Collectors.toList()));\n\n        // Add the bot itself as it is an AbilityExtension\n        extensions.add(this);\n\n        DefaultAbilities defaultAbs = new DefaultAbilities(this);\n        Stream<Ability> defaultAbsStream = stream(DefaultAbilities.class.getMethods())\n            .filter(checkReturnType(Ability.class))\n            .map(returnAbility(defaultAbs))\n            .filter(ab -> !toggle.isOff(ab))\n            .map(toggle::processAbility);\n\n        // Extract all abilities from every single extension instance\n        abilities = Stream.concat(defaultAbsStream,\n            extensions.stream()\n                .flatMap(ext -> stream(ext.getClass().getMethods())\n                        .filter(checkReturnType(Ability.class))\n                        .map(returnAbility(ext))))\n                // Abilities are immutable, build it respectively\n                .collect(ImmutableMap::<String, Ability>builder,\n                        (b, a) -> b.put(a.name(), a),\n                        (b1, b2) -> b1.putAll(b2.build()))\n                .build();\n\n        // Extract all replies from every single extension instance\n        Stream<Reply> extensionReplies = extensions.stream()\n                .flatMap(ext -> stream(ext.getClass().getMethods())\n                        .filter(checkReturnType(Reply.class))\n                        .map(returnReply(ext)))\n                        .flatMap(Reply::stream);\n\n        // Replies can be standalone or attached to abilities, fetch those too\n        Stream<Reply> abilityReplies = abilities.values().stream()\n                .flatMap(ability -> ability.replies().stream())\n                .flatMap(Reply::stream);\n\n        // Now create the replies registry (list)\n        replies = Stream.concat(abilityReplies, extensionReplies).collect(\n                ImmutableList::<Reply>builder,\n                Builder::add,\n                (b1, b2) -> b1.addAll(b2.build()))\n                .build();\n    } catch (IllegalStateException e) {\n        log.error(\"Duplicate names found while registering abilities. Make sure that the abilities declared don't clash with the reserved ones.\", e);\n        throw new RuntimeException(e);\n    }\n}", "path": "TelegramBots/telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * @param builder builder\n */\n", "func_signal": "private ExponentialBackOff(Builder builder)", "code": "{\n    initialIntervalMillis = builder.initialIntervalMillis;\n    randomizationFactor = builder.randomizationFactor;\n    multiplier = builder.multiplier;\n    maxIntervalMillis = builder.maxIntervalMillis;\n    maxElapsedTimeMillis = builder.maxElapsedTimeMillis;\n    Preconditions.checkArgument(initialIntervalMillis > 0);\n    Preconditions.checkArgument(0 <= randomizationFactor && randomizationFactor < 1);\n    Preconditions.checkArgument(multiplier >= 1);\n    Preconditions.checkArgument(maxIntervalMillis >= initialIntervalMillis);\n    Preconditions.checkArgument(maxElapsedTimeMillis > 0);\n    reset();\n}", "path": "TelegramBots/telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/ExponentialBackOff.java", "commit_date": "2019-07-27 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Returns the command and description of all supplied commands as a formatted String\n * @param botCommands the Commands that should be included in the String\n * @return a formatted String containing command and description for all supplied commands\n */\n", "func_signal": "public static String getHelpText(IBotCommand...botCommands)", "code": "{\n\tStringBuilder reply = new StringBuilder();\n\tfor (IBotCommand com : botCommands) {\n\t\treply.append(com.toString()).append(System.lineSeparator()).append(System.lineSeparator());\n\t}\n\treturn reply.toString();\n}", "path": "TelegramBots/telegrambots-extensions/src/main/java/org/telegram/telegrambots/extensions/bots/commandbot/commands/helpCommand/HelpCommand.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Use this setter to send new file.\n * @param mediaFile File to send\n * @param fileName Name of the file\n * @return This object\n */\n", "func_signal": "public InputFile setMedia(File mediaFile, String fileName)", "code": "{\n    this.newMediaFile = mediaFile;\n    this.mediaName = fileName;\n    this.attachName = \"attach://\" + fileName;\n    this.isNew = true;\n    return this;\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "///< Optional. Inline keyboard attached to the message\n", "func_signal": "@Override\n   public void validate() throws TelegramApiValidationException", "code": "{\n       if (id == null || id.isEmpty()) {\n           throw new TelegramApiValidationException(\"ID parameter can't be empty\", this);\n       }\n       if (stickerFileId == null || stickerFileId.isEmpty()) {\n           throw new TelegramApiValidationException(\"StickerFileId parameter can't be empty\", this);\n       }\n       if (inputMessageContent != null) {\n           inputMessageContent.validate();\n       }\n       if (replyMarkup != null) {\n           replyMarkup.validate();\n       }\n   }", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/cached/InlineQueryResultCachedSticker.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * This method contains the stream of actions that are applied on any update.\n * <p>\n * It will correctly handle addition of users into the DB and the execution of abilities and replies.\n *\n * @param update the update received by Telegram's API\n */\n", "func_signal": "public void onUpdateReceived(Update update)", "code": "{\n    log.info(format(\"[%s] New update [%s] received at %s\", botUsername, update.getUpdateId(), now()));\n    log.info(update.toString());\n    long millisStarted = System.currentTimeMillis();\n\n    Stream.of(update)\n            .filter(this::checkGlobalFlags)\n            .filter(this::checkBlacklist)\n            .map(this::addUser)\n            .filter(this::filterReply)\n            .filter(this::hasUser)\n            .map(this::getAbility)\n            .filter(this::validateAbility)\n            .filter(this::checkPrivacy)\n            .filter(this::checkLocality)\n            .filter(this::checkInput)\n            .filter(this::checkMessageFlags)\n            .map(this::getContext)\n            .map(this::consumeUpdate)\n            .map(this::updateStats)\n            .forEach(this::postConsumption);\n\n    // Commit to DB now after all the actions have been dealt\n    db.commit();\n\n    long processingTime = System.currentTimeMillis() - millisStarted;\n    log.info(format(\"[%s] Processing of update [%s] ended at %s%n---> Processing time: [%d ms] <---%n\", botUsername, update.getUpdateId(), now(), processingTime));\n}", "path": "TelegramBots/telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Constructor to set a new file as stream\n *\n * @param mediaStream File to send\n * @param fileName Name of the file\n */\n", "func_signal": "public InputFile(InputStream mediaStream, String fileName)", "code": "{\n    this();\n    setMedia(mediaStream, fileName);\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Constructor to set a new file\n *\n * @param mediaFile File to send\n * @param fileName Name of the file\n */\n", "func_signal": "public InputFile(File mediaFile, String fileName)", "code": "{\n    this();\n    setMedia(mediaFile, fileName);\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Invokes the method and retrieves its return {@link Ability}.\n *\n * @param obj a bot or extension that this method is invoked with\n * @return a {@link Function} which returns the {@link Ability} returned by the given method\n */\n", "func_signal": "private static Function<? super Method, Ability> returnAbility(Object obj)", "code": "{\n    return method -> {\n        try {\n            return (Ability) method.invoke(obj);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            log.error(\"Could not add ability\", e);\n            throw new RuntimeException(e);\n        }\n    };\n}", "path": "TelegramBots/telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Constructor to set a new file\n *\n * @param mediaFile File to send\n */\n", "func_signal": "public InputFile(File mediaFile)", "code": "{\n    this();\n    setMedia(mediaFile, mediaFile.getName());\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Increments the current interval by multiplying it with the multiplier.\n */\n", "func_signal": "private void incrementCurrentInterval()", "code": "{\n    // Check for overflow, if overflow is detected set the current interval to the max interval.\n    if (currentIntervalMillis >= maxIntervalMillis / multiplier) {\n        currentIntervalMillis = maxIntervalMillis;\n    } else {\n        currentIntervalMillis *= multiplier;\n    }\n}", "path": "TelegramBots/telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/ExponentialBackOff.java", "commit_date": "2019-07-27 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "///< True if the file is new, false if it is a file_id\n", "func_signal": "public InputFile(String attachName)", "code": "{\n       this();\n       setMedia(attachName);\n   }", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "///< Error message\n", "func_signal": "@Override\n   public void validate() throws TelegramApiValidationException", "code": "{\n       if (fileHashes == null || fileHashes.isEmpty()) {\n           throw new TelegramApiValidationException(\"File hash parameter can't be empty\", this);\n       }\n       if (message == null || message.isEmpty()) {\n           throw new TelegramApiValidationException(\"Message parameter can't be empty\", this);\n       }\n       if (type == null || type.isEmpty()) {\n           throw new TelegramApiValidationException(\"Type parameter can't be empty\", this);\n       }\n   }", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/passport/dataerror/PassportElementErrorFiles.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Invokes the method and retrieves its return {@link Reply}.\n *\n * @param obj a bot or extension that this method is invoked with\n * @return a {@link Function} which returns the {@link Reply} returned by the given method\n */\n", "func_signal": "private static Function<? super Method, Reply> returnReply(Object obj)", "code": "{\n    return method -> {\n        try {\n            return (Reply) method.invoke(obj);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            log.error(\"Could not add reply\", e);\n            throw new RuntimeException(e);\n        }\n    };\n}", "path": "TelegramBots/telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Use this setter to send new file.\n * @param mediaFile File to send\n * @return This object\n */\n", "func_signal": "public InputFile setMedia(File mediaFile)", "code": "{\n    this.newMediaFile = mediaFile;\n    this.mediaName = mediaFile.getName();\n    this.attachName = \"attach://\" + mediaFile.getName();\n    this.isNew = true;\n    return this;\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "///< Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode\n", "func_signal": "@Override\n   public void validate() throws TelegramApiValidationException", "code": "{\n       if (id == null || id.isEmpty()) {\n           throw new TelegramApiValidationException(\"ID parameter can't be empty\", this);\n       }\n       if (voiceUrl == null || voiceUrl.isEmpty()) {\n           throw new TelegramApiValidationException(\"VoiceUrl parameter can't be empty\", this);\n       }\n       if (parseMode != null && (captionEntities != null && !captionEntities.isEmpty()) ) {\n           throw new TelegramApiValidationException(\"Parse mode can't be enabled if Entities are provided\", this);\n       }\n       if (inputMessageContent != null) {\n           inputMessageContent.validate();\n       }\n       if (replyMarkup != null) {\n           replyMarkup.validate();\n       }\n   }", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultVoice.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Invokes the method and retrieves its return {@link Reply}.\n *\n * @param obj a bot or extension that this method is invoked with\n * @return a {@link Function} which returns the {@link Reply} returned by the given method\n */\n", "func_signal": "private Function<? super Method, AbilityExtension> returnExtension(Object obj)", "code": "{\n    return method -> {\n        try {\n            return (AbilityExtension) method.invoke(obj);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            log.error(\"Could not add ability extension\", e);\n            throw new RuntimeException(e);\n        }\n    };\n}", "path": "TelegramBots/telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java", "commit_date": "2020-11-24 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "///< Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode\n", "func_signal": "@Override\n   public void validate() throws TelegramApiValidationException", "code": "{\n       if (id == null || id.isEmpty()) {\n           throw new TelegramApiValidationException(\"ID parameter can't be empty\", this);\n       }\n       if (photoFileId == null || photoFileId.isEmpty()) {\n           throw new TelegramApiValidationException(\"PhotoFileId parameter can't be empty\", this);\n       }\n       if (parseMode != null && (captionEntities != null && !captionEntities.isEmpty()) ) {\n           throw new TelegramApiValidationException(\"Parse mode can't be enabled if Entities are provided\", this);\n       }\n       if (inputMessageContent != null) {\n           inputMessageContent.validate();\n       }\n       if (replyMarkup != null) {\n           replyMarkup.validate();\n       }\n   }", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/cached/InlineQueryResultCachedPhoto.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Returns a random value from the interval [randomizationFactor * currentInterval,\n * randomizationFactor * currentInterval].\n */\n", "func_signal": "private static int getRandomValueFromInterval(\n        double randomizationFactor, double random, int currentIntervalMillis)", "code": "{\n    double delta = randomizationFactor * currentIntervalMillis;\n    double minInterval = currentIntervalMillis - delta;\n    double maxInterval = currentIntervalMillis + delta;\n    // Get a random value from the range [minInterval, maxInterval].\n    // The formula used below has a +1 because if the minInterval is 1 and the maxInterval is 3 then\n    // we want a 33% chance for selecting either 1, 2 or 3.\n    return (int) (minInterval + (random * (maxInterval - minInterval + 1)));\n}", "path": "TelegramBots/telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/ExponentialBackOff.java", "commit_date": "2019-07-27 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/**\n * Use this setter to send new file as stream.\n * @param mediaStream File to send\n * @param fileName Name of the file\n * @return This object\n */\n", "func_signal": "public InputFile setMedia(InputStream mediaStream, String fileName)", "code": "{\n    this.newMediaStream = mediaStream;\n    this.mediaName = fileName;\n    this.attachName = \"attach://\" + fileName;\n    this.isNew = true;\n    return this;\n}", "path": "TelegramBots/telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/InputFile.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "rubenlagus/TelegramBots", "stars": 4278, "license": "mit", "language": "java", "size": 3246}
{"docstring": "/** Detects if the class is annotated as @BTrace(trusted=true). */\n", "func_signal": "private boolean hasTrustedAnnotation(ClassTree ct, Element topElement)", "code": "{\n  for (AnnotationTree at : ct.getModifiers().getAnnotations()) {\n    String annFqn = ((JCTree) at.getAnnotationType()).type.tsym.getQualifiedName().toString();\n    if (!annFqn.equals(BTrace.class.getName())) {\n      continue;\n    }\n    // now we have @BTrace, look for unsafe = xxx or trusted = xxx\n    for (ExpressionTree ext : at.getArguments()) {\n      if (!(ext instanceof JCAssign)) {\n        continue;\n      }\n      JCAssign assign = (JCAssign) ext;\n      String name = ((JCIdent) assign.lhs).name.toString();\n      if (!\"unsafe\".equals(name) && !\"trusted\".equals(name)) {\n        continue;\n      }\n      // now rhs is the value of @BTrace.unsafe.\n      // The value can be complex (!!true, 1 == 2, etc.) - we support only booleans\n      String val = assign.rhs.toString();\n      if (\"true\".equals(val)) {\n        return true; // bingo!\n      } else if (!\"false\".equals(val)) {\n        processingEnv\n            .getMessager()\n            .printMessage(Kind.WARNING, Messages.get(\"no.complex.unsafe.value\"), topElement);\n      }\n    }\n  }\n  return false;\n}", "path": "btrace/btrace-compiler/src/main/java/org/openjdk/btrace/compiler/Verifier.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Returns a list of the AggregationKeys that belong to this aggregation.\n *\n * @return a list of aggregationsKeys belonging to this aggregation.\n */\n", "func_signal": "public List<AggregationKey> getKeyData()", "code": "{\n  List<AggregationKey> keyList = new ArrayList<>();\n  List<Entry<AggregationKey, AggregationValue>> sortedContents = sort();\n  for (Entry<AggregationKey, AggregationValue> item : sortedContents) {\n    keyList.add(item.getKey());\n  }\n\n  return keyList;\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "// stack trace functions\n", "func_signal": "private static String stackTraceAllStr(int numFrames, boolean printWarning)", "code": "{\n  Set<Map.Entry<Thread, StackTraceElement[]>> traces = Thread.getAllStackTraces().entrySet();\n  StringBuilder buf = new StringBuilder();\n  for (Map.Entry<Thread, StackTraceElement[]> t : traces) {\n    buf.append(t.getKey());\n    buf.append(LINE_SEPARATOR);\n    buf.append(LINE_SEPARATOR);\n    StackTraceElement[] st = t.getValue();\n    buf.append(stackTraceStr(\"\\t\", st, 0, numFrames, printWarning));\n    buf.append(LINE_SEPARATOR);\n  }\n  return buf.toString();\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/BTraceRuntime.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/** adds a listener for attribution. */\n", "func_signal": "private void prepareContext(Context context)", "code": "{\n  TaskListener otherListener = context.get(TaskListener.class);\n  if (otherListener == null) {\n    context.put(TaskListener.class, listener);\n  } else {\n    // handle cases of multiple listeners\n    context.put(TaskListener.class, (TaskListener) null);\n    TaskListeners listeners = new TaskListeners();\n    listeners.add(otherListener);\n    listeners.add(listener);\n    context.put(TaskListener.class, listeners);\n  }\n}", "path": "btrace/btrace-compiler/src/main/java/org/openjdk/btrace/compiler/Verifier.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Currently used for regex matching in the 'location' attribute\n *\n * @param pattern\n * @param input\n * @return\n */\n", "func_signal": "private boolean matches(String pattern, String input)", "code": "{\n  if (pattern.length() == 0) {\n    return false;\n  }\n  if (pattern.charAt(0) == '/' && Constants.REGEX_SPECIFIER.matcher(pattern).matches()) {\n    try {\n      return input.matches(pattern.substring(1, pattern.length() - 1));\n    } catch (PatternSyntaxException pse) {\n      reportPatternSyntaxException(pattern.substring(1, pattern.length() - 1));\n      return false;\n    }\n  } else {\n    return pattern.equals(input);\n  }\n}", "path": "btrace/btrace-instr/src/main/java/org/openjdk/btrace/instr/Instrumentor.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Leave method is called by every probed method just before the probe actions end (and actual\n * probed method continues).\n */\n", "func_signal": "public static void leave()", "code": "{\n  BTraceRuntime.Impl rt = getRt();\n  if (rt != null) {\n    rt.leave();\n  }\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/BTraceRuntime.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/** Resets all values in the aggregation to their default. */\n", "func_signal": "public void clear()", "code": "{\n  for (AggregationValue value : values.values()) {\n    value.clear();\n  }\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "// verify each BTrace class\n", "func_signal": "private boolean verify(ClassTree ct, Element topElement)", "code": "{\n  currentClass = ct;\n  CompilationUnitTree cut = getCompilationUnit();\n  String className = ct.getSimpleName().toString();\n  ExpressionTree pkgName = cut.getPackageName();\n  if (pkgName != null) {\n    className = pkgName + \".\" + className;\n  }\n  classNames.add(className);\n  if (hasTrustedAnnotation(ct, topElement)) {\n    return true;\n  }\n  Boolean value = ct.accept(new VerifierVisitor(this, topElement), null);\n  return value == null ? true : value;\n}", "path": "btrace/btrace-compiler/src/main/java/org/openjdk/btrace/compiler/Verifier.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * BTrace fields with this annotation are exposed as attributes of the dynamic JMX bean that wraps\n * the BTrace class.\n *\n * @author A. Sundararajan\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Property", "code": "{\n  // by default, the name of the attribute is same as the name\n  // of the field of the BTrace class.\n  String name() default \"\";\n\n  // description of this attribute\n  String description() default \"\";\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/annotations/Property.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Returns a value for the given key if the key has a value associated with it. Returns zero if\n * the key is not valid for this Aggregation.\n *\n * @param key\n * @return the value for the given key, or zero.\n */\n", "func_signal": "public Long getValueForKey(AggregationKey key)", "code": "{\n  AggregationValue aggregationValue = values.get(key);\n  if (aggregationValue != null) {\n    return aggregationValue.getValue();\n  } else {\n    return 0L;\n  }\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "// The following constants are copied from VM code\n// for jvmstat.\n", "func_signal": "public static Unsafe initUnsafe()", "code": "{\n  try {\n    if (unsafe == null) {\n      unsafe = Unsafe.getUnsafe();\n    }\n  } catch (SecurityException e) {\n    DebugSupport.warning(\"Unable to initialize Unsafe. BTrace will not function properly\");\n  }\n  return unsafe;\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/BTraceRuntime.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Adds an item of data to the aggregation with the specified grouping key.\n *\n * @param key the aggregation key\n * @param data the value to be added\n */\n", "func_signal": "public void add(AggregationKey key, long data)", "code": "{\n  AggregationValue aggregationValue = values.get(key);\n  if (aggregationValue == null) {\n    aggregationValue = type.newValue();\n    AggregationValue existing = values.putIfAbsent(key, aggregationValue);\n    if (existing != null) {\n      aggregationValue = existing;\n    }\n  }\n  aggregationValue.add(data);\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Add the instruction sequence to print the message using {@linkplain DebugSupport}\n *\n * @param msg message\n * @return the instruction list\n */\n", "func_signal": "private InsnList debugPrint(String msg)", "code": "{\n  InsnList list = new InsnList();\n  list.add(msg != null ? new LdcInsnNode(msg) : new InsnNode(Opcodes.ACONST_NULL));\n  list.add(\n      new MethodInsnNode(\n          Opcodes.INVOKESTATIC,\n          \"org/openjdk/btrace/core/DebugSupport\",\n          \"info\",\n          \"(Ljava/lang/String;)V\"));\n  return list;\n}", "path": "btrace/btrace-instr/src/main/java/org/openjdk/btrace/instr/Preprocessor.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Time based rolling file writer. Defaults to 100 allowed output chunks.\n *\n * @param output The file to put the output to\n * @param settings The shared settings\n * @return Returns an appropriate {@linkplain TraceOutputWriter} instance or NULL\n */\n", "func_signal": "public static TraceOutputWriter rollingFileWriter(File output, SharedSettings settings)", "code": "{\n  TraceOutputWriter instance = null;\n  try {\n    instance = new TimeBasedRollingFileWriter(output, settings);\n  } catch (IOException e) {\n    // ignore\n  }\n  return instance;\n}", "path": "btrace/btrace-agent/src/main/java/org/openjdk/btrace/agent/TraceOutputWriter.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Reduces the size of the aggregation to the absolute value of <code>count</code>. If count is\n * greater than zero, the largest aggregated values are preserved. If it is less than zero, the\n * smallest aggregated values are preserved. Passing a value of zero clears the aggregation\n * completely.\n *\n * @param count the absolute number indicates the number of aggregated values to preserve.\n */\n", "func_signal": "public void truncate(int count)", "code": "{\n  if (count == 0) {\n    values.clear();\n  } else {\n    List<Map.Entry<AggregationKey, AggregationValue>> sortedContents = sort();\n\n    int collectionSize = sortedContents.size();\n    int numberToRemove = collectionSize - Math.abs(count);\n    if (numberToRemove < 0) {\n      return;\n    }\n    List<Map.Entry<AggregationKey, AggregationValue>> removeContents;\n    if (count > 0) {\n      // Remove from the start of the list\n      removeContents = sortedContents.subList(0, numberToRemove);\n    } else {\n      removeContents = sortedContents.subList(collectionSize - numberToRemove, collectionSize);\n    }\n    for (int i = 0; i < removeContents.size(); i++) {\n      values.remove(removeContents.get(i).getKey());\n    }\n  }\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Returns details of the aggregation in a tabular format which can be serialized across the wire\n * and formatted for display. The data is represented as a List of rows. The last element in each\n * row represents the aggregated value, the elements before this in the row contain the elements\n * of the aggregating key.\n *\n * @return details of the aggregation in a tabular format.\n */\n", "func_signal": "public List<Object[]> getData()", "code": "{\n  List<Entry<AggregationKey, AggregationValue>> sortedContents = sort();\n  List<Object[]> result = new ArrayList<>(sortedContents.size());\n\n  for (Entry<AggregationKey, AggregationValue> item : sortedContents) {\n\n    Object[] keyElements = item.getKey().getElements();\n    int rowSize = keyElements.length + 1;\n\n    Object[] row = new Object[rowSize];\n    System.arraycopy(keyElements, 0, row, 0, keyElements.length);\n    row[rowSize - 1] = item.getValue().getData();\n    result.add(row);\n  }\n\n  return result;\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "// package-private interface to BTraceUtils class.\n", "func_signal": "private static String identityStr(Object obj)", "code": "{\n  int hashCode = java.lang.System.identityHashCode(obj);\n  return obj.getClass().getName() + \"@\" + Integer.toHexString(hashCode);\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/BTraceRuntime.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Plain file writer - all output will go to one specified file\n *\n * @param output The file to put the output to\n * @param settings The settings storage\n * @return Returns an appropriate {@linkplain TraceOutputWriter} instance or NULL\n */\n", "func_signal": "public static TraceOutputWriter fileWriter(File output, SharedSettings settings)", "code": "{\n  TraceOutputWriter instance = null;\n  try {\n    instance = new SimpleFileOutput(output, settings);\n  } catch (IOException e) {\n    // ignore\n  }\n  return instance;\n}", "path": "btrace/btrace-agent/src/main/java/org/openjdk/btrace/agent/TraceOutputWriter.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * @return a list of key/value pairs contained in this aggregation by sorted by ascending value.\n */\n", "func_signal": "private List<Map.Entry<AggregationKey, AggregationValue>> sort()", "code": "{\n  ArrayList<Map.Entry<AggregationKey, AggregationValue>> result =\n      new ArrayList<>(values.entrySet());\n  Collections.sort(\n      result,\n      new Comparator<Map.Entry<AggregationKey, AggregationValue>>() {\n\n        @Override\n        public int compare(\n            Entry<AggregationKey, AggregationValue> o1,\n            Entry<AggregationKey, AggregationValue> o2) {\n          long i1 = o1.getValue().getValue();\n          long i2 = o2.getValue().getValue();\n          if (i1 < i2) {\n            return -1;\n          } else if (i1 == i2) {\n            return 0;\n          } else {\n            return 1;\n          }\n        }\n      });\n  return result;\n}", "path": "btrace/btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/** Maps a list of @OnProbe's to a list @OnMethod's using probe descriptor XML files. */\n", "func_signal": "private void mapOnProbes()", "code": "{\n  ProbeDescriptorLoader pdl = getProbeDescriptorLoader();\n\n  for (OnProbe op : delegate.onprobes()) {\n    String ns = op.getNamespace();\n    if (debug.isDebug()) debug.debug(\"about to load probe descriptor for \" + ns);\n    // load probe descriptor for this namespace\n    ProbeDescriptor probeDesc = pdl.load(ns);\n    if (probeDesc == null) {\n      if (debug.isDebug()) debug.debug(\"failed to find probe descriptor for \" + ns);\n      continue;\n    }\n    // find particular probe mappings using \"local\" name\n    OnProbe foundProbe = probeDesc.findProbe(op.getName());\n    if (foundProbe == null) {\n      if (debug.isDebug()) debug.debug(\"no probe mappings for \" + op.getName());\n      continue;\n    }\n    if (debug.isDebug()) debug.debug(\"found probe mappings for \" + op.getName());\n    Collection<OnMethod> omColl = foundProbe.getOnMethods();\n    for (OnMethod om : omColl) {\n      // copy the info in a new OnMethod so that\n      // we can set target method name and descriptor\n      // Note that the probe descriptor cache is used\n      // across BTrace sessions. So, we should not update\n      // cached OnProbes (and their OnMethods).\n      OnMethod omn = new OnMethod(op.getMethodNode(), debug);\n      omn.copyFrom(om);\n      omn.setTargetName(op.getTargetName());\n      omn.setTargetDescriptor(op.getTargetDescriptor());\n      omn.setClassNameParameter(op.getClassNameParameter());\n      omn.setMethodParameter(op.getMethodParameter());\n      omn.setDurationParameter(op.getDurationParameter());\n      omn.setMethodFqn(op.isMethodFqn());\n      omn.setReturnParameter(op.getReturnParameter());\n      omn.setSelfParameter(op.getSelfParameter());\n      omn.setTargetInstanceParameter(op.getTargetInstanceParameter());\n      omn.setTargetMethodOrFieldFqn(op.isTargetMethodOrFieldFqn());\n      omn.setTargetMethodOrFieldParameter(op.getTargetMethodOrFieldParameter());\n      addOnMethod(omn);\n    }\n  }\n}", "path": "btrace/btrace-instr/src/main/java/org/openjdk/btrace/instr/BTraceProbeNode.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "btraceio/btrace", "stars": 5687, "license": "None", "language": "java", "size": 17437}
{"docstring": "/**\n * Creates a dead VMInfo, representing a jvm in a given state which cannot\n * be attached or other monitoring issues occurred.\n */\n", "func_signal": "public static VMInfo createDeadVM(String pid, VMInfoState state)", "code": "{\n\tVMInfo vmInfo = new VMInfo();\n\tvmInfo.state = state;\n\tvmInfo.pid = pid;\n\treturn vmInfo;\n}", "path": "vjtools/vjtop/src/main/java/com/vip/vjtools/vjtop/VMInfo.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * Executes the given command at some time in the future. The command may execute in a new thread, in a pooled\n * thread, or in the calling thread, at the discretion of the <tt>Executor</tt> implementation. If no threads are\n * available, it will be added to the work queue. If the work queue is full, the system will wait for the specified\n * time and it throw a RejectedExecutionException if the queue is still full after that.\n *\n * @param command the runnable task\n * @param timeout A timeout for the completion of the task\n * @param unit The timeout time unit\n * @throws RejectedExecutionException if this task cannot be accepted for execution - the queue is full\n * @throws NullPointerException if command or unit is null\n */\n", "func_signal": "public void execute(Runnable command, long timeout, TimeUnit unit)", "code": "{\n\tsubmittedCount.incrementAndGet();\n\ttry {\n\t\tsuper.execute(command);\n\t} catch (RejectedExecutionException rx) { // NOSONAR\n\t\t// not to re-throw this exception because this is only used to find out whether the pool is full, not for a\n\t\t// exception purpose\n\t\tfinal ControllableQueue queue = (ControllableQueue) super.getQueue();\n\t\ttry {\n\t\t\tif (!queue.force(command, timeout, unit)) {\n\t\t\t\tsubmittedCount.decrementAndGet();\n\t\t\t\tthrow new RejectedExecutionException(\"Queue capacity is full.\");\n\t\t\t}\n\t\t} catch (InterruptedException ignore) {\n\t\t\tsubmittedCount.decrementAndGet();\n\t\t\tthrow new RejectedExecutionException(ignore);\n\t\t}\n\t}\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/QueuableCachedThreadPool.java", "commit_date": "2018-08-02 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "//\u7ee7\u627f\u5d4c\u5957\u6d4b\u8bd5\n", "func_signal": "@Test\npublic void testInherit()", "code": "{\n\tTestChild child = new TestChild();\n\tchild.setArr(new String[]{\"test11111\"});\n\tchild.setStr(\"test11111\");\n\tList<String> list = new ArrayList<>();\n\tlist.add(\"test11111\");\n\tchild.setList(list);\n\tSet<String> set = new HashSet<>();\n\tset.add(\"test11111\");\n\tchild.setSet(set);\n\n\tTestParent parent = new TestParent();\n\tparent.setChild(child);\n\tparent.setOther(parent);\n\n\tchild = new TestChild();\n\tchild.setArr(new String[]{\"test11111\"});\n\tchild.setStr(\"test11111\");\n\tlist = new ArrayList<>();\n\tlist.add(\"test11111\");\n\tchild.setList(list);\n\tset = new HashSet<>();\n\tset.add(\"test11111\");\n\tchild.setSet(set);\n\tparent.setChildren(Arrays.asList(child));\n\n\tString json = DataMask.toJSONString(parent);\n\tSystem.out.println(json);\n\n\t//\u666e\u901a\u7684\u5b50\u7c7b\n\tparent = JSON.parseObject(json, TestParent.class);\n\tassertThat(parent.getChild().getStr()).contains(\"*\");\n\tassertThat(parent.getChild().getArr()).contains(\"56C082E77E2924421F909BA262AA25BA80626323\");\n\tassertThat(parent.getChild().getList()).contains(\"t********\");\n\tassertThat(parent.getChild().getSet()).contains(\"t********\");\n\t//\u5b50\u7c7blist\n\tassertThat(parent.getChildren().get(0).getStr()).contains(\"*\");\n\tassertThat(parent.getChildren().get(0).getArr()).contains(\"56C082E77E2924421F909BA262AA25BA80626323\");\n\tassertThat(parent.getChildren().get(0).getList()).contains(\"t********\");\n\tassertThat(parent.getChildren().get(0).getSet()).contains(\"t********\");\n\n\t//\u9a8c\u8bc1\u4e0btoString\n\tparent.setOther(null);//\u53bb\u6389\u5faa\u73af\n\tassertThat(DataMask.toString(\n\t\t\t\"TestParent{child=TestChild{str='t********', arr=[5489afe19ca3744d918d2821ed921e7bbc2b824b], list=[t********], set=[t********]}, children=[TestChild{str='t********', arr=[5489afe19ca3744d918d2821ed921e7bbc2b824b], list=[t********], set=[t********]}], other=null}\"));\n\tSystem.out.println(DataMask.toString(parent));\n\n}", "path": "vjtools/vjkit/src/test/java/com/vip/vjtools/vjkit/datamasking/DataMaskTest.java", "commit_date": "2020-06-03 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u6b63\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static long positive(@Nullable String role, long x)", "code": "{\n\tif (x <= 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be > 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u975e\u8d1f\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static Long nonNegative(@Nullable String role, Long x)", "code": "{\n\tif (x.longValue() < 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be >= 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u6b63\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static Integer positive(@Nullable String role, Integer x)", "code": "{\n\tif (x.intValue() <= 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be > 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u7b80\u4fbf\u51fd\u6570, clone\u5e76\u91cd\u65b0\u8bbe\u5b9aMessage\n */\n", "func_signal": "public CloneableException clone(String message)", "code": "{\n\tCloneableException newException = this.clone();\n\tnewException.setMessage(message);\n\treturn newException;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/type/CloneableException.java", "commit_date": "2018-08-02 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "// from WildcardImportsShouldNotBeUsedCheck\n", "func_signal": "private static String fullQualifiedName(Tree tree)", "code": "{\n\tif (tree.is(Tree.Kind.IDENTIFIER)) {\n\t\treturn ((IdentifierTree) tree).name();\n\t} else if (tree.is(Tree.Kind.MEMBER_SELECT)) {\n\t\tMemberSelectExpressionTree m = (MemberSelectExpressionTree) tree;\n\t\treturn fullQualifiedName(m.expression()) + \".\" + m.identifier().name();\n\t}\n\tthrow new UnsupportedOperationException(String.format(\"Kind/Class '%s' not supported\", tree.getClass()));\n}", "path": "vjtools/standard/sonar-vj/src/main/java/com/vip/vjkit/sonarvj/checks/UnusedPrivateFieldCheck.java", "commit_date": "2018-05-30 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u975e\u8d1f\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static double nonNegative(@Nullable String role, double x)", "code": "{\n\tif (!(x >= 0)) { // not x < 0, to work with NaN.\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be >= 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u975e\u8d1f\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static long nonNegative(@Nullable String role, long x)", "code": "{\n\tif (x < 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be >= 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u5c06\u5e26\u5355\u4f4d\u7684\u5927\u5c0f\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5b57\u8282\u6570.\n * \n * \u5355\u4f4d\u5305\u62ec\u4e0d\u5206\u5927\u5c0f\u5199\u7684b(b),k(kb),m(mb),g(gb),t(tb)\n * \n * \u4e0d\u5e26\u4efb\u4f55\u5355\u4f4d\u7684\u8bdd\uff0c\u9ed8\u8ba4\u5355\u4f4d\u662fb\n */\n", "func_signal": "public static long toBytes(String size)", "code": "{\n\tMatcher matcher = NUMBER_AND_UNIT.matcher(size);\n\n\tif (matcher.matches()) {\n\t\tlong number = Long.parseLong(matcher.group(1));\n\n\t\tString unitStr = matcher.group(2);\n\t\tif (unitStr != null) {\n\t\t\tchar unit = unitStr.toLowerCase().charAt(0);\n\n\t\t\tswitch (unit) {\n\t\t\t\tcase 'b':\n\t\t\t\t\treturn number;\n\t\t\t\tcase 'k':\n\t\t\t\t\treturn number * K;\n\t\t\t\tcase 'm':\n\t\t\t\t\treturn number * M;\n\t\t\t\tcase 'g':\n\t\t\t\t\treturn number * G;\n\t\t\t\tcase 't':\n\t\t\t\t\treturn number * T;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalArgumentException(\"unknown size unit :\" + unit);\n\t\t\t}\n\t\t} else {\n\t\t\treturn number;\n\t\t}\n\t} else {\n\t\tthrow new IllegalArgumentException(\"malformed size string: \" + size);\n\t}\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/number/UnitConverter.java", "commit_date": "2018-08-02 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u975e\u8d1f\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static Integer nonNegative(@Nullable String role, Integer x)", "code": "{\n\tif (x.intValue() < 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be >= 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * Creates a new Triple.\n */\n", "func_signal": "public Triple(@Nullable L left, @Nullable M middle, @Nullable R right)", "code": "{\n\tthis.left = left;\n\tthis.middle = middle;\n\tthis.right = right;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/type/Triple.java", "commit_date": "2018-05-29 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u975e\u8d1f\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static int nonNegative(@Nullable String role, int x)", "code": "{\n\tif (x < 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be >= 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * Updates all jvm metrics to the most recent remote values\n */\n", "func_signal": "public void update(boolean needJvmInfo)", "code": "{\n\tif (state == VMInfoState.ERROR_DURING_ATTACH || state == VMInfoState.DETACHED) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tint lastJmxErrorCount = jmxUpdateErrorCount;\n\t\t// \u5c06UPDTATE_ERROR\u91cd\u7f6e\u5f00\u59cb\u65b0\u4e00\u8f6e\u5faa\u73af\n\t\tstate = VMInfoState.ATTACHED;\n\n\t\t// \u6e05\u7a7aJMX\u5185\u90e8\u7f13\u5b58\n\t\tjmxClient.flush();\n\n\t\tupdateUpTime();\n\n\t\tif (needJvmInfo) {\n\t\t\tif (isLinux) {\n\t\t\t\tupdateProcessStatus();\n\t\t\t\tupdateIO();\n\t\t\t}\n\n\t\t\tupdateCpu();\n\t\t\tupdateThreads();\n\t\t\tupdateClassLoader();\n\t\t\tupdateMemoryPool();\n\t\t\tupdateGC();\n\t\t\tupdateSafepoint();\n\t\t}\n\n\t\t// \u65e0\u65b0\u5f02\u5e38\uff0c\u72b6\u6001\u91cd\u65b0\u5224\u5b9a\u4e3a\u6b63\u5e38\n\t\tif (jmxUpdateErrorCount == lastJmxErrorCount) {\n\t\t\tjmxUpdateErrorCount = 0;\n\t\t}\n\t} catch (Throwable e) {\n\t\t// \u5176\u4ed6\u975eJMX\u5f02\u5e38\uff0c\u76f4\u63a5\u9000\u51fa\n\t\te.printStackTrace();\n\t\tSystem.out.flush();\n\t\tstate = VMInfoState.DETACHED;\n\t}\n}", "path": "vjtools/vjtop/src/main/java/com/vip/vjtools/vjtop/VMInfo.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u6b63\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static int positive(@Nullable String role, int x)", "code": "{\n\tif (x <= 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be > 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u521d\u59cb\u5316\u9759\u6001\u6570\u636e\n */\n", "func_signal": "private void init() throws IOException", "code": "{\n\tMap<String, Counter> perfCounters = null;\n\ttry {\n\t\tperfData = PerfData.connect(Integer.parseInt(pid));\n\t\tperfCounters = perfData.getAllCounters();\n\t\tinitPerfCounters(perfCounters);\n\t\tperfDataSupport = true;\n\t} catch (Throwable ignored) {\n\t}\n\n\tif (perfDataSupport) {\n\t\tvmArgs = (String) perfCounters.get(\"java.rt.vmArgs\").getValue();\n\t} else {\n\t\tvmArgs = Formats.join(jmxClient.getRuntimeMXBean().getInputArguments(), \" \");\n\t}\n\n\tstartTime = jmxClient.getRuntimeMXBean().getStartTime();\n\n\tMap<String, String> taregetVMSystemProperties = jmxClient.getRuntimeMXBean().getSystemProperties();\n\tosUser = taregetVMSystemProperties.get(\"user.name\");\n\tjvmVersion = taregetVMSystemProperties.get(\"java.version\");\n\tjvmMajorVersion = Utils.getJavaMajorVersion(taregetVMSystemProperties.get(\"java.specification.version\"));\n\tpermGenName = jvmMajorVersion >= 8 ? \"metaspace\" : \"perm\";\n\tthreadStackSize = 1024\n\t\t\t* Long.parseLong(jmxClient.getHotSpotDiagnosticMXBean().getVMOption(\"ThreadStackSize\").getValue());\n\tmaxDirectMemorySize = Long\n\t\t\t.parseLong(jmxClient.getHotSpotDiagnosticMXBean().getVMOption(\"MaxDirectMemorySize\").getValue());\n\tmaxDirectMemorySize = maxDirectMemorySize == 0 ? -1 : maxDirectMemorySize;\n\n\tprocessors = jmxClient.getOperatingSystemMXBean().getAvailableProcessors();\n\twarningRule.updateProcessor(processors);\n\n\tisLinux = System.getProperty(\"os.name\").toLowerCase(Locale.US).contains(\"linux\");\n}", "path": "vjtools/vjtop/src/main/java/com/vip/vjtools/vjtop/VMInfo.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u7b80\u4fbf\u51fd\u6570, \u91cd\u65b0\u8bbe\u5b9aMessage\n */\n", "func_signal": "public CloneableException setMessage(String message)", "code": "{\n\tthis.message = message;\n\treturn this;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/type/CloneableException.java", "commit_date": "2018-08-02 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u7b80\u4fbf\u51fd\u6570\uff0c\u5b9a\u4e49\u9759\u6001\u5f02\u5e38\u65f6\u4f7f\u7528\n */\n", "func_signal": "public CloneableException setStackTrace(Class<?> throwClazz, String throwMethod)", "code": "{\n\tExceptionUtil.setStackTrace(this, throwClazz, throwMethod);\n\treturn this;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/type/CloneableException.java", "commit_date": "2018-08-02 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * \u6821\u9a8c\u4e3a\u6b63\u6570\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "public static Long positive(@Nullable String role, Long x)", "code": "{\n\tif (x.longValue() <= 0) {\n\t\tthrow new IllegalArgumentException(role + \" (\" + x + \") must be > 0\");\n\t}\n\treturn x;\n}", "path": "vjtools/vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java", "commit_date": "2019-10-05 00:00:00", "repo_name": "vipshop/vjtools", "stars": 7590, "license": "apache-2.0", "language": "java", "size": 2108}
{"docstring": "/**\n * Convert model to request parameters and redirect to the given URL.\n *\n * @param model    the model to convert\n * @param request  the incoming HttpServletRequest\n * @param response the outgoing HttpServletResponse\n * @throws java.io.IOException if there is a problem issuing the redirect\n * @see #appendQueryProperties\n * @see #sendRedirect\n */\n", "func_signal": "public final void renderMergedOutputModel(\n        Map model, HttpServletRequest request, HttpServletResponse response) throws IOException", "code": "{\n\n    // Prepare name URL.\n    StringBuilder targetUrl = new StringBuilder();\n    if (this.contextRelative && getUrl().startsWith(\"/\")) {\n        // Do not apply context path to relative URLs.\n        targetUrl.append(request.getContextPath());\n    }\n    targetUrl.append(getUrl());\n    //change the following method to accept a StringBuilder instead of a StringBuilder for Shiro 2.x:\n    appendQueryProperties(targetUrl, model, this.encodingScheme);\n\n    sendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/RedirectView.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Returns <tt>true</tt> if the method or the class has any Shiro annotations, false otherwise.\n * The annotations inspected are:\n * <ul>\n * <li>{@link org.apache.shiro.authz.annotation.RequiresAuthentication RequiresAuthentication}</li>\n * <li>{@link org.apache.shiro.authz.annotation.RequiresUser RequiresUser}</li>\n * <li>{@link org.apache.shiro.authz.annotation.RequiresGuest RequiresGuest}</li>\n * <li>{@link org.apache.shiro.authz.annotation.RequiresRoles RequiresRoles}</li>\n * <li>{@link org.apache.shiro.authz.annotation.RequiresPermissions RequiresPermissions}</li>\n * </ul>\n *\n * @param method      the method to check for a Shiro annotation\n * @param targetClass the class potentially declaring Shiro annotations\n * @return <tt>true</tt> if the method has a Shiro annotation, false otherwise.\n * @see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, Class)\n */\n", "func_signal": "public boolean matches(Method method, Class targetClass)", "code": "{\n    Method m = method;\n\n    if ( isAuthzAnnotationPresent(m) ) {\n        return true;\n    }\n\n    //The 'method' parameter could be from an interface that doesn't have the annotation.\n    //Check to see if the implementation has it.\n    if ( targetClass != null) {\n        try {\n            m = targetClass.getMethod(m.getName(), m.getParameterTypes());\n            return isAuthzAnnotationPresent(m) || isAuthzAnnotationPresent(targetClass);\n        } catch (NoSuchMethodException ignored) {\n            //default return value is false.  If we can't find the method, then obviously\n            //there is no annotation, so just use the default return value.\n        }\n    }\n\n    return false;\n}", "path": "shiro/support/spring/src/main/java/org/apache/shiro/spring/security/interceptor/AuthorizationAttributeSourceAdvisor.java", "commit_date": "2017-01-06 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Example hard coded Realm bean.\n * @return hard coded Realm bean\n */\n", "func_signal": "@Bean\npublic Realm realm()", "code": "{\n    TextConfigurationRealm realm = new TextConfigurationRealm();\n    realm.setUserDefinitions(\"joe.coder=password,user\\n\" +\n                             \"jill.coder=password,admin\");\n\n    realm.setRoleDefinitions(\"admin=read,write\\n\" +\n                             \"user=read\");\n    realm.setCachingEnabled(true);\n    return realm;\n}", "path": "shiro/samples/spring/src/main/java/org/apache/shiro/samples/spring/CliApp.java", "commit_date": "2016-12-14 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Executes cleanup logic in the {@code finally} code block in the\n * {@link #doFilterInternal(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) doFilterInternal}\n * implementation.\n * <p/>\n * This implementation specifically calls\n * {@link #afterCompletion(javax.servlet.ServletRequest, javax.servlet.ServletResponse, Exception) afterCompletion}\n * as well as handles any exceptions properly.\n *\n * @param request  the incoming {@code ServletRequest}\n * @param response the outgoing {@code ServletResponse}\n * @param existing any exception that might have occurred while executing the {@code FilterChain} or\n *                 pre or post advice, or {@code null} if the pre/chain/post execution did not throw an {@code Exception}.\n * @throws ServletException if any exception other than an {@code IOException} is thrown.\n * @throws IOException      if the pre/chain/post execution throw an {@code IOException}\n */\n", "func_signal": "protected void cleanup(ServletRequest request, ServletResponse response, Exception existing)\n        throws ServletException, IOException", "code": "{\n    Exception exception = existing;\n    try {\n        afterCompletion(request, response, exception);\n        if (log.isTraceEnabled()) {\n            log.trace(\"Successfully invoked afterCompletion method.\");\n        }\n    } catch (Exception e) {\n        if (exception == null) {\n            exception = e;\n        } else {\n            log.debug(\"afterCompletion implementation threw an exception.  This will be ignored to \" +\n                    \"allow the original source exception to be propagated.\", e);\n        }\n    }\n    if (exception != null) {\n        if (exception instanceof ServletException) {\n            throw (ServletException) exception;\n        } else if (exception instanceof IOException) {\n            throw (IOException) exception;\n        } else {\n            if (log.isDebugEnabled()) {\n                String msg = \"Filter execution resulted in an unexpected Exception \" +\n                        \"(not IOException or ServletException as the Filter API recommends).  \" +\n                        \"Wrapping in ServletException and propagating.\";\n                log.debug(msg);\n            }\n            throw new ServletException(exception);\n        }\n    }\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/servlet/AdviceFilter.java", "commit_date": "2010-05-30 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Converts the specified UTF-8 Base64 encoded String and decodes it to a resultant UTF-8 encoded string.\n *\n * @param base64Encoded a UTF-8 Base64 encoded String\n * @return the decoded String, UTF-8 encoded.\n */\n", "func_signal": "public static String decodeToString(String base64Encoded)", "code": "{\n    byte[] encodedBytes = CodecSupport.toBytes(base64Encoded);\n    return decodeToString(encodedBytes);\n}", "path": "shiro/lang/src/main/java/org/apache/shiro/lang/codec/Base64.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Append query properties to the redirect URL.\n * Stringifies, URL-encodes and formats model attributes as query properties.\n *\n * @param targetUrl      the StringBuffer to append the properties to\n * @param model          Map that contains model attributes\n * @param encodingScheme the encoding scheme to use\n * @throws java.io.UnsupportedEncodingException if string encoding failed\n * @see #urlEncode\n * @see #queryProperties\n * @see #urlEncode(String, String)\n */\n", "func_signal": "protected void appendQueryProperties(StringBuilder targetUrl, Map model, String encodingScheme)\n        throws UnsupportedEncodingException", "code": "{\n\n    // Extract anchor fragment, if any.\n    // The following code does not use JDK 1.4's StringBuffer.indexOf(String)\n    // method to retain JDK 1.3 compatibility.\n    String fragment = null;\n    int anchorIndex = targetUrl.toString().indexOf('#');\n    if (anchorIndex > -1) {\n        fragment = targetUrl.substring(anchorIndex);\n        targetUrl.delete(anchorIndex, targetUrl.length());\n    }\n\n    // If there aren't already some parameters, we need a \"?\".\n    boolean first = (getUrl().indexOf('?') < 0);\n    Map queryProps = queryProperties(model);\n\n    if (queryProps != null) {\n        for (Object o : queryProps.entrySet()) {\n            if (first) {\n                targetUrl.append('?');\n                first = false;\n            } else {\n                targetUrl.append('&');\n            }\n            Map.Entry entry = (Map.Entry) o;\n            String encodedKey = urlEncode(entry.getKey().toString(), encodingScheme);\n            String encodedValue =\n                    (entry.getValue() != null ? urlEncode(entry.getValue().toString(), encodingScheme) : \"\");\n            targetUrl.append(encodedKey).append('=').append(encodedValue);\n        }\n    }\n\n    // Append anchor fragment, if any, to end of URL.\n    if (fragment != null) {\n        targetUrl.append(fragment);\n    }\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/RedirectView.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Returns the annotation {@link RequiresPermissions#value value}, from which the Permission will be constructed.\n *\n * @param a the RequiresPermissions annotation being inspected.\n * @return the annotation's <code>value</code>, from which the Permission will be constructed.\n */\n", "func_signal": "protected String[] getAnnotationValue(Annotation a)", "code": "{\n    RequiresPermissions rpAnnotation = (RequiresPermissions) a;\n    return rpAnnotation.value();\n}", "path": "shiro/core/src/main/java/org/apache/shiro/authz/aop/PermissionAnnotationHandler.java", "commit_date": "2010-08-03 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Base64 encodes the specified byte array and then encodes it as a String using Shiro's preferred character\n * encoding (UTF-8).\n *\n * @param bytes the byte array to Base64 encode.\n * @return a UTF-8 encoded String of the resulting Base64 encoded byte array.\n */\n", "func_signal": "public static String encodeToString(byte[] bytes)", "code": "{\n    byte[] encoded = encode(bytes);\n    return CodecSupport.toString(encoded);\n}", "path": "shiro/lang/src/main/java/org/apache/shiro/lang/codec/Base64.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * This implementation acquires the {@code token}'s credentials\n * (via {@link #getCredentials(AuthenticationToken) getCredentials(token)})\n * and then the {@code account}'s credentials\n * (via {@link #getCredentials(org.apache.shiro.authc.AuthenticationInfo) getCredentials(account)}) and then passes both of\n * them to the {@link #equals(Object,Object) equals(tokenCredentials, accountCredentials)} method for equality\n * comparison.\n *\n * @param token the {@code AuthenticationToken} submitted during the authentication attempt.\n * @param info  the {@code AuthenticationInfo} stored in the system matching the token principal.\n * @return {@code true} if the provided token credentials are equal to the stored account credentials,\n *         {@code false} otherwise\n */\n", "func_signal": "public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info)", "code": "{\n    Object tokenCredentials = getCredentials(token);\n    Object accountCredentials = getCredentials(info);\n    return equals(tokenCredentials, accountCredentials);\n}", "path": "shiro/core/src/main/java/org/apache/shiro/authc/credential/SimpleCredentialsMatcher.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Notifies any interested {@link SessionListener}s that a Session has started.  This method is invoked\n * <em>after</em> the {@link #onStart onStart} method is called.\n *\n * @param session the session that has just started that will be delivered to any\n *                {@link #setSessionListeners(java.util.Collection) registered} session listeners.\n * @see SessionListener#onStart(org.apache.shiro.session.Session)\n */\n", "func_signal": "protected void notifyStart(Session session)", "code": "{\n    for (SessionListener listener : this.listeners) {\n        listener.onStart(session);\n    }\n}", "path": "shiro/core/src/main/java/org/apache/shiro/session/mgt/AbstractNativeSessionManager.java", "commit_date": "2013-04-17 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Create a new RedirectView with the given URL.\n *\n * @param url             the URL to redirect to\n * @param contextRelative whether to interpret the given URL as\n *                        relative to the current ServletContext\n */\n", "func_signal": "public RedirectView(String url, boolean contextRelative)", "code": "{\n    this(url);\n    this.contextRelative = contextRelative;\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/RedirectView.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Converts the specified UTF-8 Base64 encoded String and decodes it to a raw Base64 decoded byte array.\n *\n * @param base64Encoded a UTF-8 Base64 encoded String\n * @return the raw Base64 decoded byte array.\n */\n", "func_signal": "public static byte[] decode(String base64Encoded)", "code": "{\n    byte[] bytes = CodecSupport.toBytes(base64Encoded);\n    return decode(bytes);\n}", "path": "shiro/lang/src/main/java/org/apache/shiro/lang/codec/Base64.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Create a new RedirectView with the given URL.\n *\n * @param url              the URL to redirect to\n * @param contextRelative  whether to interpret the given URL as\n *                         relative to the current ServletContext\n * @param http10Compatible whether to stay compatible with HTTP 1.0 clients\n */\n", "func_signal": "public RedirectView(String url, boolean contextRelative, boolean http10Compatible)", "code": "{\n    this(url);\n    this.contextRelative = contextRelative;\n    this.http10Compatible = http10Compatible;\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/RedirectView.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Ensures that the calling <code>Subject</code> has the Annotation's specified permissions, and if not, throws an\n * <code>AuthorizingException</code> indicating access is denied.\n *\n * @param a the RequiresPermission annotation being inspected to check for one or more permissions\n * @throws org.apache.shiro.authz.AuthorizationException\n *          if the calling <code>Subject</code> does not have the permission(s) necessary to\n *          continue access or execution.\n */\n", "func_signal": "public void assertAuthorized(Annotation a) throws AuthorizationException", "code": "{\n    if (!(a instanceof RequiresPermissions)) return;\n\n    RequiresPermissions rpAnnotation = (RequiresPermissions) a;\n    String[] perms = getAnnotationValue(a);\n    Subject subject = getSubject();\n\n    if (perms.length == 1) {\n        subject.checkPermission(perms[0]);\n        return;\n    }\n    if (Logical.AND.equals(rpAnnotation.logical())) {\n        getSubject().checkPermissions(perms);\n        return;\n    }\n    if (Logical.OR.equals(rpAnnotation.logical())) {\n        // Avoid processing exceptions unnecessarily - \"delay\" throwing the exception by calling hasRole first\n        boolean hasAtLeastOnePermission = false;\n        for (String permission : perms) if (getSubject().isPermitted(permission)) hasAtLeastOnePermission = true;\n        // Cause the exception if none of the role match, note that the exception message will be a bit misleading\n        if (!hasAtLeastOnePermission) getSubject().checkPermission(perms[0]);\n        \n    }\n}", "path": "shiro/core/src/main/java/org/apache/shiro/authz/aop/PermissionAnnotationHandler.java", "commit_date": "2010-08-03 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Returns {@code true} if the {@code tokenCredentials} argument is logically equal to the\n * {@code accountCredentials} argument.\n * <p/>\n * <p>If both arguments are either a byte array (byte[]), char array (char[]) or String, they will be both be\n * converted to raw byte arrays via the {@link #toBytes toBytes} method first, and then resulting byte arrays\n * are compared via {@link Arrays#equals(byte[], byte[]) Arrays.equals(byte[],byte[])}.</p>\n * <p/>\n * <p>If either argument cannot be converted to a byte array as described, a simple Object <code>equals</code>\n * comparison is made.</p>\n * <p/>\n * <p>Subclasses should override this method for more explicit equality checks.\n *\n * @param tokenCredentials   the {@code AuthenticationToken}'s associated credentials.\n * @param accountCredentials the {@code AuthenticationInfo}'s stored credentials.\n * @return {@code true} if the {@code tokenCredentials} are equal to the {@code accountCredentials}.\n */\n", "func_signal": "protected boolean equals(Object tokenCredentials, Object accountCredentials)", "code": "{\n    if (log.isDebugEnabled()) {\n        log.debug(\"Performing credentials equality check for tokenCredentials of type [\" +\n                tokenCredentials.getClass().getName() + \" and accountCredentials of type [\" +\n                accountCredentials.getClass().getName() + \"]\");\n    }\n    if (isByteSource(tokenCredentials) && isByteSource(accountCredentials)) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"Both credentials arguments can be easily converted to byte arrays.  Performing \" +\n                    \"array equals comparison\");\n        }\n        byte[] tokenBytes = toBytes(tokenCredentials);\n        byte[] accountBytes = toBytes(accountCredentials);\n        return MessageDigest.isEqual(tokenBytes, accountBytes);\n    } else {\n        return accountCredentials.equals(tokenCredentials);\n    }\n}", "path": "shiro/core/src/main/java/org/apache/shiro/authc/credential/SimpleCredentialsMatcher.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Actually implements the chain execution logic, utilizing\n * {@link #preHandle(javax.servlet.ServletRequest, javax.servlet.ServletResponse) pre},\n * {@link #postHandle(javax.servlet.ServletRequest, javax.servlet.ServletResponse) post}, and\n * {@link #afterCompletion(javax.servlet.ServletRequest, javax.servlet.ServletResponse, Exception) after}\n * advice hooks.\n *\n * @param request  the incoming ServletRequest\n * @param response the outgoing ServletResponse\n * @param chain    the filter chain to execute\n * @throws ServletException if a servlet-related error occurs\n * @throws IOException      if an IO error occurs\n */\n", "func_signal": "public void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)\n        throws ServletException, IOException", "code": "{\n\n    Exception exception = null;\n\n    try {\n\n        boolean continueChain = preHandle(request, response);\n        if (log.isTraceEnabled()) {\n            log.trace(\"Invoked preHandle method.  Continuing chain?: [\" + continueChain + \"]\");\n        }\n\n        if (continueChain) {\n            executeChain(request, response, chain);\n        }\n\n        postHandle(request, response);\n        if (log.isTraceEnabled()) {\n            log.trace(\"Successfully invoked postHandle method\");\n        }\n\n    } catch (Exception e) {\n        exception = e;\n    } finally {\n        cleanup(request, response, exception);\n    }\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/servlet/AdviceFilter.java", "commit_date": "2010-05-30 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Decodes the specified Base64 encoded byte array and returns the decoded result as a UTF-8 encoded.\n *\n * @param base64Encoded a Base64 encoded byte array\n * @return the decoded String, UTF-8 encoded.\n */\n", "func_signal": "public static String decodeToString(byte[] base64Encoded)", "code": "{\n    byte[] decoded = decode(base64Encoded);\n    return CodecSupport.toString(decoded);\n}", "path": "shiro/lang/src/main/java/org/apache/shiro/lang/codec/Base64.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Publishes events on the event bus if the event bus is non-null, otherwise does nothing.\n *\n * @param event the event to publish on the event bus if the event bus exists.\n * @since 1.3\n */\n", "func_signal": "protected void publishEvent(Object event)", "code": "{\n    if (this.eventBus != null) {\n        this.eventBus.publish(event);\n    }\n}", "path": "shiro/core/src/main/java/org/apache/shiro/session/mgt/AbstractNativeSessionManager.java", "commit_date": "2013-04-17 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Constructs a new instance from the given HTTP request.\n *\n * @param request the current request to save.\n */\n", "func_signal": "public SavedRequest(HttpServletRequest request)", "code": "{\n    this.method = request.getMethod();\n    this.queryString = request.getQueryString();\n    this.requestURI = request.getRequestURI();\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/SavedRequest.java", "commit_date": "2010-05-30 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Send a redirect back to the HTTP client\n *\n * @param request          current HTTP request (allows for reacting to request method)\n * @param response         current HTTP response (for sending response headers)\n * @param targetUrl        the name URL to redirect to\n * @param http10Compatible whether to stay compatible with HTTP 1.0 clients\n * @throws IOException if thrown by response methods\n */\n", "func_signal": "protected void sendRedirect(HttpServletRequest request, HttpServletResponse response,\n                            String targetUrl, boolean http10Compatible) throws IOException", "code": "{\n    String encodedRedirectURL = response.encodeRedirectURL(targetUrl);\n    if (http10Compatible) {\n        // Always send status code 302.\n        response.sendRedirect(encodedRedirectURL);\n    } else {\n        // Correct HTTP status code is 303, in particular for POST requests.\n        response.setStatus(303);\n        response.setHeader(\"Location\", encodedRedirectURL);\n    }\n}", "path": "shiro/web/src/main/java/org/apache/shiro/web/util/RedirectView.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/shiro", "stars": 4239, "license": "apache-2.0", "language": "java", "size": 29099}
{"docstring": "/**\n * Check if Kerberos authentication is enabled.\n * This is used by:\n * - HMS\n * In secure scenarios the HMS is logged in (by itself) using Kerberos keytab, hence\n * UGI.getLoginUser().isFromKeytab() returns true.\n * This makes checking against this method the tightest setting we can check against.\n */\n", "func_signal": "private boolean isKerberosEnabled(Configuration conf)", "code": "{\n  try {\n    return UserGroupInformation.getLoginUser().isFromKeytab() &&\n        MetastoreConf.getBoolVar(conf, MetastoreConf.ConfVars.THRIFT_ZOOKEEPER_USE_KERBEROS);\n  } catch (IOException e) {\n    return false;\n  }\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/security/ZooKeeperTokenStore.java", "commit_date": "2020-06-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Create a path if it does not already exist (\"mkdir -p\")\n * @param path string with '/' separator\n * @param acl list of ACL entries\n * @throws TokenStoreException\n */\n", "func_signal": "public void ensurePath(String path, List<ACL> acl)\n    throws TokenStoreException", "code": "{\n  try {\n    CuratorFramework zk = getSession();\n    String node = zk.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT)\n        .withACL(acl).forPath(path);\n    LOGGER.info(\"Created path: {} \", node);\n  } catch (KeeperException.NodeExistsException e) {\n    // node already exists\n  } catch (Exception e) {\n    throw new TokenStoreException(\"Error creating path \" + path, e);\n  }\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/security/ZooKeeperTokenStore.java", "commit_date": "2020-06-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * @param indentFlag\n * @param tail\n *          help to generate correct indent with a specific tail\n * @return\n */\n", "func_signal": "public static String prefixString(int indentFlag, String tail)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for (int index = 0; index < indentFlag; index++) {\n    sb.append(\"  \");\n  }\n  int len = sb.length();\n  return sb.replace(len - tail.length(), len, tail).toString();\n}", "path": "hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParser.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * @param indentFlag\n *          help to generate correct indent\n * @return\n */\n", "func_signal": "public static String prefixString(int indentFlag)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for (int index = 0; index < indentFlag; index++) {\n    sb.append(\"  \");\n  }\n  return sb.toString();\n}", "path": "hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParser.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public WMResourcePlan(WMResourcePlan other)", "code": "{\n  __isset_bitfield = other.__isset_bitfield;\n  if (other.isSetName()) {\n    this.name = other.name;\n  }\n  if (other.isSetStatus()) {\n    this.status = other.status;\n  }\n  this.queryParallelism = other.queryParallelism;\n  if (other.isSetDefaultPoolPath()) {\n    this.defaultPoolPath = other.defaultPoolPath;\n  }\n  if (other.isSetNs()) {\n    this.ns = other.ns;\n  }\n}", "path": "hive/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/WMResourcePlan.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/*\n * Executes the callable task with help of execute() call and gets the result\n * of the task. It also sets job status as COMPLETED if state is not already\n * set to FAILED and returns result to future.\n */\n", "func_signal": "public T call() throws Exception", "code": "{\n\n  /*\n   * Don't catch any execution exceptions here and let the caller catch it.\n   */\n  T result = this.execute();\n\n  if (!this.setJobStateCompleted(result)) {\n   /*\n    * Failed to set job status as COMPLETED which mean the main thread would have\n    * exited and not waiting for the result. Call cleanup() to execute any cleanup.\n    */\n    cleanup();\n    return null;\n  }\n\n  return this.returnResult;\n}", "path": "hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/JobCallable.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "@org.apache.thrift.annotation.Nullable\npublic static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // NAME\n      return NAME;\n    case 2: // STATUS\n      return STATUS;\n    case 3: // QUERY_PARALLELISM\n      return QUERY_PARALLELISM;\n    case 4: // DEFAULT_POOL_PATH\n      return DEFAULT_POOL_PATH;\n    case 5: // NS\n      return NS;\n    default:\n      return null;\n  }\n}", "path": "hive/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/WMResourcePlan.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Checks if the current thread has been interrupted and throws RuntimeException is it has.\n */\n", "func_signal": "public static void checkInterrupted()", "code": "{\n  if (Thread.currentThread().isInterrupted()) {\n    InterruptedException interrupt = null;\n    try {\n      Thread.sleep(0);\n    } catch (InterruptedException e) {\n      interrupt = e;\n    }\n    throw new RuntimeException(\"Interrupted\", interrupt);\n  }\n}", "path": "hive/common/src/java/org/apache/hadoop/hive/common/HiveInterruptUtils.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "// TODO: This test doesn't work since getRemoteHost returns IP address instead of a host name\n", "func_signal": "@Test\npublic void testTrustedDomainAuthentication() throws Exception", "code": "{\n  String port = \"10000\";\n  String urlExtra = \"\";\n  if (hs2TransportMode.equals(HS2_TRANSPORT_MODE_HTTP)) {\n    port = \"10001\";\n    urlExtra = \";transportMode=http;httpPath=cliservice\";\n  }\n\n  String url = \"jdbc:hive2://localhost:\" + port + \"/default\" + urlExtra;\n  Class.forName(\"org.apache.hive.jdbc.HiveDriver\");\n\n  if (properTrustedDomain) {\n    testProperTrustedDomainAuthentication(url);\n  } else {\n    testImproperTrustedDomainAuthentication(url);\n  }\n}", "path": "hive/itests/hive-unit/src/test/java/org/apache/hive/service/auth/TrustDomainAuthenticationTest.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/*\n * This helper method copies the group keys from one vectorized row batch to another,\n * but does not increment the outputBatch.size (i.e. the next output position).\n * \n * It was designed for VectorGroupByOperator's sorted reduce group batch processing mode\n * to copy the group keys at startGroup.\n */\n", "func_signal": "public void copyGroupKey(VectorizedRowBatch inputBatch, VectorizedRowBatch outputBatch,\n        DataOutputBuffer buffer) throws HiveException", "code": "{\n\n  for(int i = 0; i< longIndices.length; ++i) {\n    final int outputColumnNum = longIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    LongColumnVector inputColumnVector = (LongColumnVector) inputBatch.cols[inputColumnNum];\n    LongColumnVector outputColumnVector = (LongColumnVector) outputBatch.cols[outputColumnNum];\n\n    // This vectorized code pattern says: \n    //    If the input batch has no nulls at all (noNulls is true) OR\n    //    the input row is NOT NULL, copy the value.\n    //\n    //    Otherwise, we have a NULL input value.  The standard way to mark a NULL in the\n    //    output batch is: turn off noNulls indicating there is at least one NULL in the batch\n    //    and mark that row as NULL.\n    //\n    //    When a vectorized row batch is reset, noNulls is set to true and the isNull array\n    //    is zeroed.\n    //\n    // We grab the key at index 0.  We don't care about selected or repeating since all keys\n    // in the input batch are suppose to be the same.\n    //\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n      outputColumnVector.vector[outputBatch.size] = inputColumnVector.vector[0];\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n  for(int i=0;i<doubleIndices.length; ++i) {\n    final int outputColumnNum = doubleIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    DoubleColumnVector inputColumnVector = (DoubleColumnVector) inputBatch.cols[inputColumnNum];\n    DoubleColumnVector outputColumnVector = (DoubleColumnVector) outputBatch.cols[outputColumnNum];\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n      outputColumnVector.vector[outputBatch.size] = inputColumnVector.vector[0];\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n  for(int i=0;i<stringIndices.length; ++i) {\n    final int outputColumnNum = stringIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    BytesColumnVector inputColumnVector = (BytesColumnVector) inputBatch.cols[inputColumnNum];\n    BytesColumnVector outputColumnVector = (BytesColumnVector) outputBatch.cols[outputColumnNum];\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n      // Copy bytes into scratch buffer.\n      int start = buffer.getLength();\n      int length = inputColumnVector.length[0];\n      try {\n        buffer.write(inputColumnVector.vector[0], inputColumnVector.start[0], length);\n      } catch (IOException ioe) {\n        throw new IllegalStateException(\"bad write\", ioe);\n      }\n      outputColumnVector.setRef(outputBatch.size, buffer.getData(), start, length);\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n  for(int i=0;i<decimalIndices.length; ++i) {\n    final int outputColumnNum = decimalIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    DecimalColumnVector inputColumnVector = (DecimalColumnVector) inputBatch.cols[inputColumnNum];\n    DecimalColumnVector outputColumnVector = (DecimalColumnVector) outputBatch.cols[outputColumnNum];\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n\n      // Since we store references to HiveDecimalWritable instances, we must use the update method instead\n      // of plain assignment.\n      outputColumnVector.set(outputBatch.size, inputColumnVector.vector[0]);\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n  for(int i=0;i<timestampIndices.length; ++i) {\n    final int outputColumnNum = timestampIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    TimestampColumnVector inputColumnVector = (TimestampColumnVector) inputBatch.cols[inputColumnNum];\n    TimestampColumnVector outputColumnVector = (TimestampColumnVector) outputBatch.cols[outputColumnNum];\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n      outputColumnVector.isNull[outputBatch.size] = false;\n      outputColumnVector.setElement(outputBatch.size, 0, inputColumnVector);\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n  for(int i=0;i<intervalDayTimeIndices.length; ++i) {\n    final int outputColumnNum = intervalDayTimeIndices[i];\n    final int inputColumnNum = inputColumnNums[outputColumnNum];\n    IntervalDayTimeColumnVector inputColumnVector = (IntervalDayTimeColumnVector) inputBatch.cols[inputColumnNum];\n    IntervalDayTimeColumnVector outputColumnVector = (IntervalDayTimeColumnVector) outputBatch.cols[outputColumnNum];\n    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {\n      outputColumnVector.isNull[outputBatch.size] = false;\n      outputColumnVector.setElement(outputBatch.size, 0, inputColumnVector);\n    } else {\n      outputColumnVector.noNulls = false;\n      outputColumnVector.isNull[outputBatch.size] = true;\n    }\n  }\n}", "path": "hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorGroupKeyHelper.java", "commit_date": "2018-08-16 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Parse ACL permission string, from ZooKeeperMain private method\n * @param permString\n * @return\n */\n", "func_signal": "public static int getPermFromString(String permString)", "code": "{\n    int perm = 0;\n    for (int i = 0; i < permString.length(); i++) {\n        switch (permString.charAt(i)) {\n        case 'r':\n            perm |= ZooDefs.Perms.READ;\n            break;\n        case 'w':\n            perm |= ZooDefs.Perms.WRITE;\n            break;\n        case 'c':\n            perm |= ZooDefs.Perms.CREATE;\n            break;\n        case 'd':\n            perm |= ZooDefs.Perms.DELETE;\n            break;\n        case 'a':\n            perm |= ZooDefs.Perms.ADMIN;\n            break;\n        default:\n            LOGGER.error(\"Unknown perm type: \" + permString.charAt(i));\n        }\n    }\n    return perm;\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/security/ZooKeeperTokenStore.java", "commit_date": "2020-06-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * For exporting Acid table, change the \"pointer\" to the temp table.\n * This has to be done after the temp table is populated and all necessary Partition objects\n * exist in the metastore.\n * See {@link org.apache.hadoop.hive.ql.parse.AcidExportSemanticAnalyzer#isAcidExport(ASTNode)}\n * for more info.\n */\n", "func_signal": "public void acidPostProcess(Hive db) throws HiveException", "code": "{\n  if (acidFqTableName != null) {\n    LOG.info(\"Swapping export of \" + tableSpec.getTableName().getTable() + \" to \" + acidFqTableName +\n        \" using partSpec=\" + tableSpec.partSpec);\n    tableSpec = new TableSpec(db, acidFqTableName, tableSpec.partSpec, true);\n  }\n}", "path": "hive/ql/src/java/org/apache/hadoop/hive/ql/plan/ExportWork.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * @param acidFqTableName if exporting Acid table, this is temp table - null otherwise\n */\n", "func_signal": "public ExportWork(String exportRootDirName, TableSpec tableSpec, ReplicationSpec replicationSpec,\n    String astRepresentationForErrorMsg, String acidFqTableName, MmContext mmContext)", "code": "{\n  this.exportRootDirName = exportRootDirName;\n  this.tableSpec = tableSpec;\n  this.replicationSpec = replicationSpec;\n  this.astRepresentationForErrorMsg = astRepresentationForErrorMsg;\n  this.mmContext = mmContext;\n  this.acidFqTableName = acidFqTableName;\n}", "path": "hive/ql/src/java/org/apache/hadoop/hive/ql/plan/ExportWork.java", "commit_date": "2019-11-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Parse comma separated list of ACL entries to secure generated nodes, e.g.\n * <code>sasl:hive/host1@MY.DOMAIN:cdrwa,sasl:hive/host2@MY.DOMAIN:cdrwa</code>\n * @param aclString\n * @return ACL list\n */\n", "func_signal": "public static List<ACL> parseACLs(String aclString)", "code": "{\n  String[] aclComps = StringUtils.splitByWholeSeparator(aclString, \",\");\n  List<ACL> acl = new ArrayList<ACL>(aclComps.length);\n  for (String a : aclComps) {\n    if (StringUtils.isBlank(a)) {\n       continue;\n    }\n    a = a.trim();\n    // from ZooKeeperMain private method\n    int firstColon = a.indexOf(':');\n    int lastColon = a.lastIndexOf(':');\n    if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {\n       LOGGER.error(a + \" does not have the form scheme:id:perm\");\n       continue;\n    }\n    ACL newAcl = new ACL();\n    newAcl.setId(new Id(a.substring(0, firstColon), a.substring(\n        firstColon + 1, lastColon)));\n    newAcl.setPerms(getPermFromString(a.substring(lastColon + 1)));\n    acl.add(newAcl);\n  }\n  return acl;\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/security/ZooKeeperTokenStore.java", "commit_date": "2020-06-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Only add operation is safe for concurrent operations.\n */\n", "func_signal": "public void add(String entry) throws SemanticException", "code": "{\n  if (thresholdHit && !fileListStreamer.isAlive()) {\n    throw new SemanticException(\"List is not getting saved anymore to file \" + backingFile.toString());\n  }\n  try {\n    cache.put(entry);\n  } catch (InterruptedException e) {\n    throw new SemanticException(e);\n  }\n  if (!thresholdHit && cache.size() >= thresholdPoint) {\n    initStoreToFile(cache.size());\n  }\n}", "path": "hive/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/util/FileList.java", "commit_date": "2020-08-24 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new java.lang.IllegalArgumentException();\n  }\n\n  switch (field) {\n  case NAME:\n    return isSetName();\n  case STATUS:\n    return isSetStatus();\n  case QUERY_PARALLELISM:\n    return isSetQueryParallelism();\n  case DEFAULT_POOL_PATH:\n    return isSetDefaultPoolPath();\n  case NS:\n    return isSetNs();\n  }\n  throw new java.lang.IllegalStateException();\n}", "path": "hive/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/WMResourcePlan.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * @param comment\n * @param name\n * @param type\n */\n", "func_signal": "public MFieldSchema(String name, String type, String comment)", "code": "{\n  this.comment = comment;\n  this.name = name;\n  this.type = type;\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/model/MFieldSchema.java", "commit_date": "2018-07-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Default ACLs for CuratorFrameworkFactory.\n */\n", "func_signal": "private List<ACL> getDefaultAcl(Configuration conf)", "code": "{\n  List<ACL> nodeAcls = new ArrayList<>();\n  if (isKerberosEnabled(conf)) {\n    nodeAcls.add(new ACL(Perms.ALL, Ids.AUTH_IDS));\n  } else {\n    nodeAcls.addAll(Ids.OPEN_ACL_UNSAFE);\n  }\n  return nodeAcls;\n}", "path": "hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/security/ZooKeeperTokenStore.java", "commit_date": "2020-06-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "hive/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/WMResourcePlan.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/*\n * Sets the job state and result. Returns true if status and result are set.\n * Otherwise, it returns false.\n */\n", "func_signal": "private synchronized boolean setStateAndResult(JobState jobState, T result)", "code": "{\n  if (this.jobState == JobState.STARTED) {\n    this.jobState = jobState;\n    this.returnResult = result;\n    return true;\n  } else {\n    LOG.info(\"Failed to set job state to \" + jobState + \" due to job state \"\n                + this.jobState + \". Expected state is \" + JobState.STARTED);\n  }\n\n  return false;\n}", "path": "hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/JobCallable.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "apache/hive", "stars": 5264, "license": "apache-2.0", "language": "java", "size": 692975}
{"docstring": "/**\n * Internal Method to select a tab\n *\n * @param newPosition     to select a tab after bottom navigation bar is initialised\n * @param firstTab        if firstTab the no ripple animation will be done\n * @param callListener    is listener callbacks enabled for this change\n * @param forcedSelection if bottom navigation bar forced to select tab (in this case call on selected irrespective of previous state\n */\n", "func_signal": "private void selectTabInternal(int newPosition, boolean firstTab, boolean callListener, boolean forcedSelection)", "code": "{\n    int oldPosition = mSelectedPosition;\n    if (mSelectedPosition != newPosition) {\n        if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {\n            if (mSelectedPosition != -1)\n                mBottomNavigationTabs.get(mSelectedPosition).unSelect(true, mAnimationDuration);\n            mBottomNavigationTabs.get(newPosition).select(true, mAnimationDuration);\n        } else if (mBackgroundStyle == BACKGROUND_STYLE_RIPPLE) {\n            if (mSelectedPosition != -1)\n                mBottomNavigationTabs.get(mSelectedPosition).unSelect(false, mAnimationDuration);\n            mBottomNavigationTabs.get(newPosition).select(false, mAnimationDuration);\n\n            final BottomNavigationTab clickedView = mBottomNavigationTabs.get(newPosition);\n            if (firstTab) {\n                // Running a ripple on the opening app won't be good so on firstTab this won't run.\n                mContainer.setBackgroundColor(clickedView.getActiveColor());\n                mBackgroundOverlay.setVisibility(View.GONE);\n            } else {\n                mBackgroundOverlay.post(new Runnable() {\n                    @Override\n                    public void run() {\n//                            try {\n                        BottomNavigationHelper.setBackgroundWithRipple(clickedView, mContainer, mBackgroundOverlay, clickedView.getActiveColor(), mRippleAnimationDuration);\n//                            } catch (Exception e) {\n//                                mContainer.setBackgroundColor(clickedView.getActiveColor());\n//                                mBackgroundOverlay.setVisibility(View.GONE);\n//                            }\n                    }\n                });\n            }\n        }\n        mSelectedPosition = newPosition;\n    }\n\n    if (callListener) {\n        sendListenerCall(oldPosition, newPosition, forcedSelection);\n    }\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Used to add a new tab.\n *\n * @param item bottom navigation tab details\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar addItem(BottomNavigationItem item)", "code": "{\n    mBottomNavigationItems.add(item);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param inActiveColorCode color code in string format for the default in-active color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setInActiveColor(String inActiveColorCode)", "code": "{\n    this.mInActiveColor = Color.parseColor(inActiveColorCode);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param inActiveColor res code for the default in-active color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setInActiveColor(@ColorRes int inActiveColor)", "code": "{\n    this.mInActiveColor = ContextCompat.getColor(getContext(), inActiveColor);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Internal method to setup tabs\n *\n * @param isNoTitleMode       if no title mode is required\n * @param bottomNavigationTab Tab item\n * @param currentItem         data structure for tab item\n * @param itemWidth           tab item in-active width\n * @param itemActiveWidth     tab item active width\n */\n", "func_signal": "private void setUpTab(boolean isNoTitleMode, BottomNavigationTab bottomNavigationTab, BottomNavigationItem currentItem, int itemWidth, int itemActiveWidth)", "code": "{\n    bottomNavigationTab.setIsNoTitleMode(isNoTitleMode);\n    bottomNavigationTab.setInactiveWidth(itemWidth);\n    bottomNavigationTab.setActiveWidth(itemActiveWidth);\n    bottomNavigationTab.setPosition(mBottomNavigationItems.indexOf(currentItem));\n\n    bottomNavigationTab.setOnClickListener(new OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            BottomNavigationTab bottomNavigationTabView = (BottomNavigationTab) v;\n            selectTabInternal(bottomNavigationTabView.getPosition(), false, true, false);\n        }\n    });\n\n    mBottomNavigationTabs.add(bottomNavigationTab);\n\n    BottomNavigationHelper.bindTabWithData(currentItem, bottomNavigationTab, this);\n\n    bottomNavigationTab.initialise(mBackgroundStyle == BACKGROUND_STYLE_STATIC);\n\n    mTabContainer.addView(bottomNavigationTab);\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Internal method used to send callbacks to listener\n *\n * @param oldPosition     old selected tab position, -1 if this is first call\n * @param newPosition     newly selected tab position\n * @param forcedSelection if bottom navigation bar forced to select tab (in this case call on selected irrespective of previous state\n */\n", "func_signal": "private void sendListenerCall(int oldPosition, int newPosition, boolean forcedSelection)", "code": "{\n    if (mTabSelectedListener != null) {\n//                && oldPosition != -1) {\n        if (forcedSelection) {\n            mTabSelectedListener.onTabSelected(newPosition);\n        } else {\n            if (oldPosition == newPosition) {\n                mTabSelectedListener.onTabReselected(newPosition);\n            } else {\n                mTabSelectedListener.onTabSelected(newPosition);\n                if (oldPosition != -1) {\n                    mTabSelectedListener.onTabUnselected(oldPosition);\n                }\n            }\n        }\n    }\n}\n\n///////////////////////////////////////////////////////////////////////////\n// Animating methods\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * show BottomNavigationBar if it is hidden and hide if it is shown\n */\npublic void toggle() {\n    toggle(true);\n}\n\n/**\n * show BottomNavigationBar if it is hidden and hide if it is shown\n *\n * @param animate is animation enabled for toggle\n */\npublic void toggle(boolean animate) {\n    if (mIsHidden) {\n        show(animate);\n    } else {\n        hide(animate);\n    }\n}\n\n/**\n * hide with animation\n */\npublic void hide() {\n    hide(true);\n}\n\n/**\n * @param animate is animation enabled for hide\n */\npublic void hide(boolean animate) {\n    mIsHidden = true;\n    setTranslationY(this.getHeight(), animate);\n}\n\n/**\n * show with animation\n */\npublic void show() {\n    show(true);\n}\n\n/**\n * @param animate is animation enabled for show\n */\npublic void show(boolean animate) {\n    mIsHidden = false;\n    setTranslationY(0, animate);\n}\n\n/**\n * @param offset  offset needs to be set\n * @param animate is animation enabled for translation\n */\nprivate void setTranslationY(int offset, boolean animate) {\n    if (animate) {\n        animateOffset(offset);\n    } else {\n        if (mTranslationAnimator != null) {\n            mTranslationAnimator.cancel();\n        }\n        this.setTranslationY(offset);\n    }\n}\n\n/**\n * Internal Method\n * <p>\n * used to set animation and\n * takes care of cancelling current animation\n * and sets duration and interpolator for animation\n *\n * @param offset translation offset that needs to set with animation\n */\nprivate void animateOffset(final int offset) {\n    if (mTranslationAnimator == null) {\n        mTranslationAnimator = ViewCompat.animate(this);\n        mTranslationAnimator.setDuration(mRippleAnimationDuration);\n        mTranslationAnimator.setInterpolator(INTERPOLATOR);\n    } else {\n        mTranslationAnimator.cancel();\n    }\n    mTranslationAnimator.translationY(offset).start();\n}\n\npublic boolean isHidden() {\n    return mIsHidden;\n}\n\n///////////////////////////////////////////////////////////////////////////\n// Behaviour Handing Handling\n///////////////////////////////////////////////////////////////////////////\n\npublic boolean isAutoHideEnabled() {\n    return mAutoHideEnabled;\n}\n\npublic void setAutoHideEnabled(boolean mAutoHideEnabled) {\n    this.mAutoHideEnabled = mAutoHideEnabled;\n}\n\npublic void setFab(FloatingActionButton fab) {\n    ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();\n    if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {\n        CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;\n        BottomNavBarFabBehaviour bottomNavBarFabBehaviour = new BottomNavBarFabBehaviour();\n        coLayoutParams.setBehavior(bottomNavBarFabBehaviour);\n    }\n}\n\n// scheduled for next\nprivate void setFab(FloatingActionButton fab, @FabBehaviour int fabBehaviour) {\n    ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();\n    if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {\n        CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;\n        BottomNavBarFabBehaviour bottomNavBarFabBehaviour = new BottomNavBarFabBehaviour();\n        coLayoutParams.setBehavior(bottomNavBarFabBehaviour);\n    }\n}\n\n\n///////////////////////////////////////////////////////////////////////////\n// Getters\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @return activeColor\n */\npublic int getActiveColor() {\n    return mActiveColor;\n}\n\n/**\n * @return in-active color\n */\npublic int getInActiveColor() {\n    return mInActiveColor;\n}\n\n/**\n * @return background color\n */\npublic int getBackgroundColor() {\n    return mBackgroundColor;\n}\n\n/**\n * @return current selected position\n */\npublic int getCurrentSelectedPosition() {\n    return mSelectedPosition;\n}\n\n/**\n * @return animation duration\n */\npublic int getAnimationDuration() {\n    return mAnimationDuration;\n}\n\n///////////////////////////////////////////////////////////////////////////\n// Listener interfaces\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * Callback interface invoked when a tab's selection state changes.\n */\npublic interface OnTabSelectedListener {\n\n    /**\n     * Called when a tab enters the selected state.\n     *\n     * @param position The position of the tab that was selected\n     */\n    void onTabSelected(int position);\n\n    /**\n     * Called when a tab exits the selected state.\n     *\n     * @param position The position of the tab that was unselected\n     */\n    void onTabUnselected(int position);\n\n    /**\n     * Called when a tab that is already selected is chosen again by the user. Some applications\n     * may use this action to return to the top level of a category.\n     *\n     * @param position The position of the tab that was reselected.\n     */\n    void onTabReselected(int position);\n}\n\n/**\n * Simple implementation of the OnTabSelectedListener interface with stub implementations of each method.\n * Extend this if you do not intend to override every method of OnTabSelectedListener.\n */\npublic static class SimpleOnTabSelectedListener implements OnTabSelectedListener {\n    @Override\n    public void onTabSelected(int position) {\n    }\n\n    @Override\n    public void onTabUnselected(int position) {\n    }\n\n    @Override\n    public void onTabReselected(int position) {\n    }\n}\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * This method initiates the bottomNavigationBar and handles layout related values\n */\n", "func_signal": "private void init()", "code": "{\n\n//        MarginLayoutParams marginParams = new ViewGroup.MarginLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (int) getContext().getResources().getDimension(R.dimen.bottom_navigation_padded_height)));\n//        marginParams.setMargins(0, (int) getContext().getResources().getDimension(R.dimen.bottom_navigation_top_margin_correction), 0, 0);\n\n    setLayoutParams(new ViewGroup.LayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)));\n\n    LayoutInflater inflater = LayoutInflater.from(getContext());\n    View parentView = inflater.inflate(R.layout.bottom_navigation_bar_container, this, true);\n    mBackgroundOverlay = parentView.findViewById(R.id.bottom_navigation_bar_overLay);\n    mContainer = parentView.findViewById(R.id.bottom_navigation_bar_container);\n    mTabContainer = parentView.findViewById(R.id.bottom_navigation_bar_item_container);\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        this.setOutlineProvider(ViewOutlineProvider.BOUNDS);\n    } else {\n        //to do\n    }\n\n    ViewCompat.setElevation(this, mElevation);\n    setClipToPadding(false);\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Used to remove a tab.\n * you should call initialise() after this to see the results effected.\n *\n * @param item bottom navigation tab details\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar removeItem(BottomNavigationItem item)", "code": "{\n    mBottomNavigationItems.remove(item);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * ripple animation will be 2.5 times this animation duration.\n *\n * @param animationDuration animation duration for tab animations\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setAnimationDuration(int animationDuration)", "code": "{\n    this.mAnimationDuration = animationDuration;\n    this.mRippleAnimationDuration = (int) (animationDuration * 2.5);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param activeColorCode color code in string format for the default active color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setActiveColor(String activeColorCode)", "code": "{\n    this.mActiveColor = Color.parseColor(activeColorCode);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param firstSelectedPosition position of tab that needs to be selected by default\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setFirstSelectedPosition(int firstSelectedPosition)", "code": "{\n    this.mFirstSelectedPosition = firstSelectedPosition;\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Clears all stored data and this helps to re-initialise tabs from scratch\n */\n", "func_signal": "public void clearAll()", "code": "{\n    mTabContainer.removeAllViews();\n    mBottomNavigationTabs.clear();\n    mBottomNavigationItems.clear();\n    mBackgroundOverlay.setVisibility(View.GONE);\n    mContainer.setBackgroundColor(Color.TRANSPARENT);\n    mSelectedPosition = DEFAULT_SELECTED_POSITION;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param backgroundColorCode color code in string format for the default background color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setBarBackgroundColor(String backgroundColorCode)", "code": "{\n    this.mBackgroundColor = Color.parseColor(backgroundColorCode);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param tabSelectedListener callback listener for tabs\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setTabSelectedListener(OnTabSelectedListener tabSelectedListener)", "code": "{\n    this.mTabSelectedListener = tabSelectedListener;\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * will be public once all bugs are resolved.\n */\n", "func_signal": "private BottomNavigationBar setScrollable(boolean scrollable)", "code": "{\n    mScrollable = scrollable;\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * This method initiates the bottomNavigationBar properties,\n * Tries to get them form XML if not preset sets them to their default values.\n *\n * @param context context of the bottomNavigationBar\n * @param attrs   attributes mentioned in the layout XML by user\n */\n", "func_signal": "private void parseAttrs(Context context, AttributeSet attrs)", "code": "{\n    if (attrs != null) {\n        TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs, R.styleable.BottomNavigationBar, 0, 0);\n\n        mActiveColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbActiveColor, Utils.fetchContextColor(context, R.attr.colorAccent));\n        mInActiveColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbInactiveColor, Color.LTGRAY);\n        mBackgroundColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbBackgroundColor, Color.WHITE);\n        mAutoHideEnabled = typedArray.getBoolean(R.styleable.BottomNavigationBar_bnbAutoHideEnabled, true);\n        mElevation = typedArray.getDimension(R.styleable.BottomNavigationBar_bnbElevation, getResources().getDimension(R.dimen.bottom_navigation_elevation));\n\n        setAnimationDuration(typedArray.getInt(R.styleable.BottomNavigationBar_bnbAnimationDuration, DEFAULT_ANIMATION_DURATION));\n\n        switch (typedArray.getInt(R.styleable.BottomNavigationBar_bnbMode, MODE_DEFAULT)) {\n            case MODE_FIXED:\n                mMode = MODE_FIXED;\n                break;\n\n            case MODE_SHIFTING:\n                mMode = MODE_SHIFTING;\n                break;\n\n            case MODE_FIXED_NO_TITLE:\n                mMode = MODE_FIXED_NO_TITLE;\n                break;\n\n            case MODE_SHIFTING_NO_TITLE:\n                mMode = MODE_SHIFTING_NO_TITLE;\n                break;\n\n            case MODE_DEFAULT:\n            default:\n                mMode = MODE_DEFAULT;\n                break;\n        }\n\n        switch (typedArray.getInt(R.styleable.BottomNavigationBar_bnbBackgroundStyle, BACKGROUND_STYLE_DEFAULT)) {\n            case BACKGROUND_STYLE_STATIC:\n                mBackgroundStyle = BACKGROUND_STYLE_STATIC;\n                break;\n\n            case BACKGROUND_STYLE_RIPPLE:\n                mBackgroundStyle = BACKGROUND_STYLE_RIPPLE;\n                break;\n\n            case BACKGROUND_STYLE_DEFAULT:\n            default:\n                mBackgroundStyle = BACKGROUND_STYLE_DEFAULT;\n                break;\n        }\n\n        typedArray.recycle();\n    } else {\n        mActiveColor = Utils.fetchContextColor(context, R.attr.colorAccent);\n        mInActiveColor = Color.LTGRAY;\n        mBackgroundColor = Color.WHITE;\n        mElevation = getResources().getDimension(R.dimen.bottom_navigation_elevation);\n    }\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param backgroundColor res code for the default background color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setBarBackgroundColor(@ColorRes int backgroundColor)", "code": "{\n    this.mBackgroundColor = ContextCompat.getColor(getContext(), backgroundColor);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * This method should be called at the end of all customisation method.\n * This method will take all changes in to consideration and redraws tabs.\n */\n", "func_signal": "public void initialise()", "code": "{\n    mSelectedPosition = DEFAULT_SELECTED_POSITION;\n    mBottomNavigationTabs.clear();\n\n    if (!mBottomNavigationItems.isEmpty()) {\n        mTabContainer.removeAllViews();\n        if (mMode == MODE_DEFAULT) {\n            if (mBottomNavigationItems.size() <= MIN_SIZE) {\n                mMode = MODE_FIXED;\n            } else {\n                mMode = MODE_SHIFTING;\n            }\n        }\n        if (mBackgroundStyle == BACKGROUND_STYLE_DEFAULT) {\n            if (mMode == MODE_FIXED) {\n                mBackgroundStyle = BACKGROUND_STYLE_STATIC;\n            } else {\n                mBackgroundStyle = BACKGROUND_STYLE_RIPPLE;\n            }\n        }\n\n        if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {\n            mBackgroundOverlay.setVisibility(View.GONE);\n            mContainer.setBackgroundColor(mBackgroundColor);\n        }\n\n        int screenWidth = Utils.getScreenWidth(getContext());\n\n        if (mMode == MODE_FIXED || mMode == MODE_FIXED_NO_TITLE) {\n\n            int[] widths = BottomNavigationHelper.getMeasurementsForFixedMode(getContext(), screenWidth, mBottomNavigationItems.size(), mScrollable);\n            int itemWidth = widths[0];\n\n            for (BottomNavigationItem currentItem : mBottomNavigationItems) {\n                FixedBottomNavigationTab bottomNavigationTab = new FixedBottomNavigationTab(getContext());\n                setUpTab(mMode == MODE_FIXED_NO_TITLE, bottomNavigationTab, currentItem, itemWidth, itemWidth);\n            }\n\n        } else if (mMode == MODE_SHIFTING || mMode == MODE_SHIFTING_NO_TITLE) {\n\n            int[] widths = BottomNavigationHelper.getMeasurementsForShiftingMode(getContext(), screenWidth, mBottomNavigationItems.size(), mScrollable);\n\n            int itemWidth = widths[0];\n            int itemActiveWidth = widths[1];\n\n            for (BottomNavigationItem currentItem : mBottomNavigationItems) {\n                ShiftingBottomNavigationTab bottomNavigationTab = new ShiftingBottomNavigationTab(getContext());\n                setUpTab(mMode == MODE_SHIFTING_NO_TITLE, bottomNavigationTab, currentItem, itemWidth, itemActiveWidth);\n            }\n        }\n\n        if (mBottomNavigationTabs.size() > mFirstSelectedPosition) {\n            selectTabInternal(mFirstSelectedPosition, true, false, false);\n        } else if (!mBottomNavigationTabs.isEmpty()) {\n            selectTabInternal(0, true, false, false);\n        }\n    }\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param activeColor res code for the default active color\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setActiveColor(@ColorRes int activeColor)", "code": "{\n    this.mActiveColor = ContextCompat.getColor(getContext(), activeColor);\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * @param backgroundStyle any of the three Background Styles supported by library\n * @return this, to allow builder pattern\n */\n", "func_signal": "public BottomNavigationBar setBackgroundStyle(@BackgroundStyle int backgroundStyle)", "code": "{\n    this.mBackgroundStyle = backgroundStyle;\n    return this;\n}", "path": "BottomNavigation/bottom-navigation-bar/src/main/java/com/ashokvarma/bottomnavigation/BottomNavigationBar.java", "commit_date": "2020-02-29 00:00:00", "repo_name": "Ashok-Varma/BottomNavigation", "stars": 4356, "license": "apache-2.0", "language": "java", "size": 3928}
{"docstring": "/**\n * Prefer to execute request using POST\n * \n * @param app\n * @param ip\n * @param port\n * @param api\n * @param params\n * @return\n */\n", "func_signal": "private CompletableFuture<String> executeCommand(String app, String ip, int port, String api, Map<String, String> params, boolean useHttpPost)", "code": "{\n    CompletableFuture<String> future = new CompletableFuture<>();\n    if (StringUtil.isBlank(ip) || StringUtil.isBlank(api)) {\n        future.completeExceptionally(new IllegalArgumentException(\"Bad URL or command name\"));\n        return future;\n    }\n    StringBuilder urlBuilder = new StringBuilder();\n    urlBuilder.append(\"http://\");\n    urlBuilder.append(ip).append(':').append(port).append('/').append(api);\n    if (params == null) {\n        params = Collections.emptyMap();\n    }\n    boolean supportPost = StringUtil.isNotEmpty(app) && Optional.ofNullable(appManagement.getDetailApp(app))\n            .flatMap(e -> e.getMachine(ip, port))\n            .flatMap(m -> VersionUtils.parseVersion(m.getVersion())\n                .map(v -> v.greaterOrEqual(version160)))\n            .orElse(false);\n    if (!useHttpPost || !supportPost) {\n        // Using GET in older versions, append parameters after url\n        if (!params.isEmpty()) {\n            if (urlBuilder.indexOf(\"?\") == -1) {\n                urlBuilder.append('?');\n            } else {\n                urlBuilder.append('&');\n            }\n            urlBuilder.append(queryString(params));\n        }\n        return executeCommand(new HttpGet(urlBuilder.toString()));\n    } else {\n        // Using POST\n        return executeCommand(postRequest(urlBuilder.toString(), params));\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * This node is visible when this.visible==true or one of this's parents is visible,\n * root node is always invisible.\n */\n", "func_signal": "private static void visit(ResourceTreeNode node, List<ResourceVo> list, boolean parentVisible, boolean isRoot)", "code": "{\n    boolean visible = !isRoot && (node.isVisible() || parentVisible);\n    //boolean visible = node.isVisible();\n    if (visible) {\n        ResourceVo vo = new ResourceVo();\n        vo.parentTtId = node.getParentId();\n        vo.ttId = node.getId();\n        vo.resource = node.getResource();\n        vo.threadNum = node.getThreadNum();\n        vo.passQps = node.getPassQps();\n        vo.blockQps = node.getBlockQps();\n        vo.totalQps = node.getTotalQps();\n        vo.averageRt = node.getAverageRt();\n        vo.exceptionQps = node.getExceptionQps();\n        vo.oneMinutePass = node.getOneMinutePass();\n        vo.oneMinuteBlock = node.getOneMinuteBlock();\n        vo.oneMinuteException = node.getOneMinuteException();\n        vo.oneMinuteTotal = node.getOneMinuteTotal();\n        vo.visible = node.isVisible();\n        list.add(vo);\n    }\n    for (ResourceTreeNode c : node.getChildren()) {\n        visit(c, list, visible, false);\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/domain/vo/ResourceVo.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * {@link #rt} = {@code avgRt * successQps}\n *\n * @param avgRt      average rt of {@code successQps}\n * @param successQps\n */\n", "func_signal": "public synchronized void setRtAndSuccessQps(double avgRt, Long successQps)", "code": "{\n    this.rt = avgRt * successQps;\n    this.successQps = successQps;\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/datasource/entity/MetricEntity.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Fetch all parameter flow rules from provided machine.\n *\n * @param app  application name\n * @param ip   machine client IP\n * @param port machine client port\n * @return all retrieved parameter flow rules\n * @since 0.2.1\n */\n", "func_signal": "public CompletableFuture<List<ParamFlowRuleEntity>> fetchParamFlowRulesOfMachine(String app, String ip, int port)", "code": "{\n    try {\n        AssertUtil.notEmpty(app, \"Bad app name\");\n        AssertUtil.notEmpty(ip, \"Bad machine IP\");\n        AssertUtil.isTrue(port > 0, \"Bad machine port\");\n        return fetchItemsAsync(ip, port, GET_PARAM_RULE_PATH, null, ParamFlowRule.class)\n            .thenApply(rules -> rules.stream()\n                .map(e -> ParamFlowRuleEntity.fromAuthorityRule(app, ip, port, e))\n                .collect(Collectors.toList())\n            );\n    } catch (Exception e) {\n        logger.error(\"Error when fetching parameter flow rules\", e);\n        return AsyncUtils.newFailedFuture(e);\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Fetch all authority rules from provided machine.\n *\n * @param app  application name\n * @param ip   machine client IP\n * @param port machine client port\n * @return all retrieved authority rules\n * @since 0.2.1\n */\n", "func_signal": "public List<AuthorityRuleEntity> fetchAuthorityRulesOfMachine(String app, String ip, int port)", "code": "{\n    AssertUtil.notEmpty(app, \"Bad app name\");\n    AssertUtil.notEmpty(ip, \"Bad machine IP\");\n    AssertUtil.isTrue(port > 0, \"Bad machine port\");\n    Map<String, String> params = new HashMap<>(1);\n    params.put(\"type\", AUTHORITY_TYPE);\n    List<AuthorityRule> rules = fetchRules(ip, port, AUTHORITY_TYPE, AuthorityRule.class);\n    return Optional.ofNullable(rules).map(r -> r.stream()\n                .map(e -> AuthorityRuleEntity.fromAuthorityRule(app, ip, port, e))\n                .collect(Collectors.toList())\n            ).orElse(null);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * @author \u7fdf\u6c38\u8d85\n * @create 2017/6/24.\n * @blog http://blog.didispace.com\n */\n", "func_signal": "@FeignClient(\"eureka-client\")\npublic interface DcClient", "code": "{\n\n    @GetMapping(\"/dc\")\n    String consumer();\n\n}", "path": "SpringCloud-Learning/2-Dalston\u7248\u6559\u7a0b\u793a\u4f8b/eureka-consumer-feign/src/main/java/com/didispace/DcClient.java", "commit_date": "2017-06-26 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * whether dead should be removed\n * \n * @return\n */\n", "func_signal": "public boolean isDead()", "code": "{\n    if (DashboardConfig.getAutoRemoveMachineMillis() > 0) {\n        long delta = System.currentTimeMillis() - lastHeartbeat;\n        return delta > DashboardConfig.getAutoRemoveMachineMillis();\n    }\n    return false;\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/discovery/MachineInfo.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "// Cluster related\n", "func_signal": "public CompletableFuture<ClusterStateSimpleEntity> fetchClusterMode(String ip, int port)", "code": "{\n    if (StringUtil.isBlank(ip) || port <= 0) {\n        return AsyncUtils.newFailedFuture(new IllegalArgumentException(\"Invalid parameter\"));\n    }\n    try {\n        return executeCommand(ip, port, FETCH_CLUSTER_MODE_PATH, false)\n            .thenApply(r -> JSON.parseObject(r, ClusterStateSimpleEntity.class));\n    } catch (Exception ex) {\n        logger.warn(\"Error when fetching cluster mode\", ex);\n        return AsyncUtils.newFailedFuture(ex);\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * whether dead should be removed\n * \n * @return\n */\n", "func_signal": "public boolean isDead()", "code": "{\n    if (DashboardConfig.getAutoRemoveMachineMillis() > 0) {\n        long delta = System.currentTimeMillis() - lastHeartbeat;\n        return delta > DashboardConfig.getAutoRemoveMachineMillis();\n    }\n    return false;\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/discovery/MachineInfo.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Parse version of Sentinel from raw string.\n *\n * @param versionFull version string\n * @return parsed {@link SentinelVersion} if the version is valid; empty if\n * there is something wrong with the format\n */\n", "func_signal": "public static Optional<SentinelVersion> parseVersion(String s)", "code": "{\n    if (StringUtil.isBlank(s)) {\n        return Optional.empty();\n    }\n    try {\n        String versionFull = s;\n        SentinelVersion version = new SentinelVersion();\n        \n        // postfix\n        int index = versionFull.indexOf(\"-\");\n        if (index == 0) {\n            // Start with \"-\"\n            return Optional.empty();\n        }\n        if (index == versionFull.length() - 1) {\n            // End with \"-\"\n        } else if (index > 0) {\n            version.setPostfix(versionFull.substring(index + 1));\n        }\n        \n        if (index >= 0) {\n            versionFull = versionFull.substring(0, index);\n        }\n        \n        // x.x.x\n        int segment = 0;\n        int[] ver = new int[3];\n        while (segment < ver.length) {\n            index = versionFull.indexOf('.');\n            if (index < 0) {\n                if (versionFull.length() > 0) {\n                    ver[segment] = Integer.valueOf(versionFull);\n                }\n                break;\n            }\n            ver[segment] = Integer.valueOf(versionFull.substring(0, index));\n            versionFull = versionFull.substring(index + 1);\n            segment ++;\n        }\n        \n        if (ver[0] < 1) {\n            // Wrong format, return empty.\n            return Optional.empty();\n        } else {\n            return Optional.of(version\n                    .setMajorVersion(ver[0])\n                    .setMinorVersion(ver[1])\n                    .setFixVersion(ver[2]));\n        }\n    } catch (Exception ex) {\n        // Parse fail, return empty.\n        return Optional.empty();\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/util/VersionUtils.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * fetch metric between [startTime, endTime], both side inclusive\n */\n", "func_signal": "private void fetchOnce(String app, long startTime, long endTime, int maxWaitSeconds)", "code": "{\n    if (maxWaitSeconds <= 0) {\n        throw new IllegalArgumentException(\"maxWaitSeconds must > 0, but \" + maxWaitSeconds);\n    }\n    AppInfo appInfo = appManagement.getDetailApp(app);\n    // auto remove for app\n    if (appInfo.isDead()) {\n        logger.info(\"Dead app removed: {}\", app);\n        appManagement.removeApp(app);\n        return;\n    }\n    Set<MachineInfo> machines = appInfo.getMachines();\n    logger.debug(\"enter fetchOnce(\" + app + \"), machines.size()=\" + machines.size()\n        + \", time intervalMs [\" + startTime + \", \" + endTime + \"]\");\n    if (machines.isEmpty()) {\n        return;\n    }\n    final String msg = \"fetch\";\n    AtomicLong unhealthy = new AtomicLong();\n    final AtomicLong success = new AtomicLong();\n    final AtomicLong fail = new AtomicLong();\n\n    long start = System.currentTimeMillis();\n    /** app_resource_timeSecond -> metric */\n    final Map<String, MetricEntity> metricMap = new ConcurrentHashMap<>(16);\n    final CountDownLatch latch = new CountDownLatch(machines.size());\n    for (final MachineInfo machine : machines) {\n        // auto remove\n        if (machine.isDead()) {\n            latch.countDown();\n            appManagement.getDetailApp(app).removeMachine(machine.getIp(), machine.getPort());\n            logger.info(\"Dead machine removed: {}:{} of {}\", machine.getIp(), machine.getPort(), app);\n            continue;\n        }\n        if (!machine.isHealthy()) {\n            latch.countDown();\n            unhealthy.incrementAndGet();\n            continue;\n        }\n        final String url = \"http://\" + machine.getIp() + \":\" + machine.getPort() + \"/\" + METRIC_URL_PATH\n            + \"?startTime=\" + startTime + \"&endTime=\" + endTime + \"&refetch=\" + false;\n        final HttpGet httpGet = new HttpGet(url);\n        httpGet.setHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n        httpclient.execute(httpGet, new FutureCallback<HttpResponse>() {\n            @Override\n            public void completed(final HttpResponse response) {\n                try {\n                    handleResponse(response, machine, metricMap);\n                    success.incrementAndGet();\n                } catch (Exception e) {\n                    logger.error(msg + \" metric \" + url + \" error:\", e);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void failed(final Exception ex) {\n                latch.countDown();\n                fail.incrementAndGet();\n                httpGet.abort();\n                if (ex instanceof SocketTimeoutException) {\n                    logger.error(\"Failed to fetch metric from <{}>: socket timeout\", url);\n                } else if (ex instanceof ConnectException) {\n                    logger.error(\"Failed to fetch metric from <{}> (ConnectionException: {})\", url, ex.getMessage());\n                } else {\n                    logger.error(msg + \" metric \" + url + \" error\", ex);\n                }\n            }\n\n            @Override\n            public void cancelled() {\n                latch.countDown();\n                fail.incrementAndGet();\n                httpGet.abort();\n            }\n        });\n    }\n    try {\n        latch.await(maxWaitSeconds, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        logger.info(msg + \" metric, wait http client error:\", e);\n    }\n    long cost = System.currentTimeMillis() - start;\n    //logger.info(\"finished \" + msg + \" metric for \" + app + \", time intervalMs [\" + startTime + \", \" + endTime\n    //    + \"], total machines=\" + machines.size() + \", dead=\" + dead + \", fetch success=\"\n    //    + success + \", fetch fail=\" + fail + \", time cost=\" + cost + \" ms\");\n    writeMetric(metricMap);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Get cluster state list of all available machines of provided application.\n *\n * @param app application name\n * @return cluster state list of all available machines of the application\n * @since 1.4.1\n */\n", "func_signal": "public CompletableFuture<List<ClusterUniversalStatePairVO>> getClusterUniversalState(String app)", "code": "{\n    if (StringUtil.isBlank(app)) {\n        return AsyncUtils.newFailedFuture(new IllegalArgumentException(\"app cannot be empty\"));\n    }\n    AppInfo appInfo = appManagement.getDetailApp(app);\n    if (appInfo == null || appInfo.getMachines() == null) {\n        return CompletableFuture.completedFuture(new ArrayList<>());\n    }\n\n    List<CompletableFuture<ClusterUniversalStatePairVO>> futures = appInfo.getMachines().stream()\n        .filter(e -> e.isHealthy())\n        .map(machine -> getClusterUniversalState(app, machine.getIp(), machine.getPort())\n            .thenApply(e -> new ClusterUniversalStatePairVO(machine.getIp(), machine.getPort(), e)))\n        .collect(Collectors.toList());\n\n    return AsyncUtils.sequenceSuccessFuture(futures);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/service/ClusterConfigService.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Traverse each APP, and then pull the metric of all machines for that APP.\n */\n", "func_signal": "private void fetchAllApp()", "code": "{\n    List<String> apps = appManagement.getAppNames();\n    if (apps == null) {\n        return;\n    }\n    for (final String app : apps) {\n        fetchService.submit(() -> {\n            try {\n                doFetchAppMetric(app);\n            } catch (Exception e) {\n                logger.error(\"fetchAppMetric error\", e);\n            }\n        });\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Get cluster state list of all available machines of provided application.\n *\n * @param app application name\n * @return cluster state list of all available machines of the application\n * @since 1.4.1\n */\n", "func_signal": "public CompletableFuture<List<ClusterUniversalStatePairVO>> getClusterUniversalState(String app)", "code": "{\n    if (StringUtil.isBlank(app)) {\n        return AsyncUtils.newFailedFuture(new IllegalArgumentException(\"app cannot be empty\"));\n    }\n    AppInfo appInfo = appManagement.getDetailApp(app);\n    if (appInfo == null || appInfo.getMachines() == null) {\n        return CompletableFuture.completedFuture(new ArrayList<>());\n    }\n\n    List<CompletableFuture<ClusterUniversalStatePairVO>> futures = appInfo.getMachines().stream()\n        .filter(e -> e.isHealthy())\n        .map(machine -> getClusterUniversalState(app, machine.getIp(), machine.getPort())\n            .thenApply(e -> new ClusterUniversalStatePairVO(machine.getIp(), machine.getPort(), e)))\n        .collect(Collectors.toList());\n\n    return AsyncUtils.sequenceSuccessFuture(futures);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/service/ClusterConfigService.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Fetch cluster node.\n *\n * @param ip          ip to fetch\n * @param port        port of the ip\n * @param includeZero whether zero value should in the result list.\n * @return\n */\n", "func_signal": "public List<NodeVo> fetchClusterNodeOfMachine(String ip, int port, boolean includeZero)", "code": "{\n    String type = \"noZero\";\n    if (includeZero) {\n        type = \"zero\";\n    }\n    return fetchItems(ip, port, CLUSTER_NODE_PATH, type, NodeVo.class);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Traverse each APP, and then pull the metric of all machines for that APP.\n */\n", "func_signal": "private void fetchAllApp()", "code": "{\n    List<String> apps = appManagement.getAppNames();\n    if (apps == null) {\n        return;\n    }\n    for (final String app : apps) {\n        fetchService.submit(() -> {\n            try {\n                doFetchAppMetric(app);\n            } catch (Exception e) {\n                logger.error(\"fetchAppMetric error\", e);\n            }\n        });\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Parse version of Sentinel from raw string.\n *\n * @param versionFull version string\n * @return parsed {@link SentinelVersion} if the version is valid; empty if\n * there is something wrong with the format\n */\n", "func_signal": "public static Optional<SentinelVersion> parseVersion(String s)", "code": "{\n    if (StringUtil.isBlank(s)) {\n        return Optional.empty();\n    }\n    try {\n        String versionFull = s;\n        SentinelVersion version = new SentinelVersion();\n        \n        // postfix\n        int index = versionFull.indexOf(\"-\");\n        if (index == 0) {\n            // Start with \"-\"\n            return Optional.empty();\n        }\n        if (index == versionFull.length() - 1) {\n            // End with \"-\"\n        } else if (index > 0) {\n            version.setPostfix(versionFull.substring(index + 1));\n        }\n        \n        if (index >= 0) {\n            versionFull = versionFull.substring(0, index);\n        }\n        \n        // x.x.x\n        int segment = 0;\n        int[] ver = new int[3];\n        while (segment < ver.length) {\n            index = versionFull.indexOf('.');\n            if (index < 0) {\n                if (versionFull.length() > 0) {\n                    ver[segment] = Integer.valueOf(versionFull);\n                }\n                break;\n            }\n            ver[segment] = Integer.valueOf(versionFull.substring(0, index));\n            versionFull = versionFull.substring(index + 1);\n            segment ++;\n        }\n        \n        if (ver[0] < 1) {\n            // Wrong format, return empty.\n            return Optional.empty();\n        } else {\n            return Optional.of(version\n                    .setMajorVersion(ver[0])\n                    .setMinorVersion(ver[1])\n                    .setFixVersion(ver[2]));\n        }\n    } catch (Exception ex) {\n        // Parse fail, return empty.\n        return Optional.empty();\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/util/VersionUtils.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * fetch metric between [startTime, endTime], both side inclusive\n */\n", "func_signal": "private void fetchOnce(String app, long startTime, long endTime, int maxWaitSeconds)", "code": "{\n    if (maxWaitSeconds <= 0) {\n        throw new IllegalArgumentException(\"maxWaitSeconds must > 0, but \" + maxWaitSeconds);\n    }\n    AppInfo appInfo = appManagement.getDetailApp(app);\n    // auto remove for app\n    if (appInfo.isDead()) {\n        logger.info(\"Dead app removed: {}\", app);\n        appManagement.removeApp(app);\n        return;\n    }\n    Set<MachineInfo> machines = appInfo.getMachines();\n    logger.debug(\"enter fetchOnce(\" + app + \"), machines.size()=\" + machines.size()\n        + \", time intervalMs [\" + startTime + \", \" + endTime + \"]\");\n    if (machines.isEmpty()) {\n        return;\n    }\n    final String msg = \"fetch\";\n    AtomicLong unhealthy = new AtomicLong();\n    final AtomicLong success = new AtomicLong();\n    final AtomicLong fail = new AtomicLong();\n\n    long start = System.currentTimeMillis();\n    /** app_resource_timeSecond -> metric */\n    final Map<String, MetricEntity> metricMap = new ConcurrentHashMap<>(16);\n    final CountDownLatch latch = new CountDownLatch(machines.size());\n    for (final MachineInfo machine : machines) {\n        // auto remove\n        if (machine.isDead()) {\n            latch.countDown();\n            appManagement.getDetailApp(app).removeMachine(machine.getIp(), machine.getPort());\n            logger.info(\"Dead machine removed: {}:{} of {}\", machine.getIp(), machine.getPort(), app);\n            continue;\n        }\n        if (!machine.isHealthy()) {\n            latch.countDown();\n            unhealthy.incrementAndGet();\n            continue;\n        }\n        final String url = \"http://\" + machine.getIp() + \":\" + machine.getPort() + \"/\" + METRIC_URL_PATH\n            + \"?startTime=\" + startTime + \"&endTime=\" + endTime + \"&refetch=\" + false;\n        final HttpGet httpGet = new HttpGet(url);\n        httpGet.setHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n        httpclient.execute(httpGet, new FutureCallback<HttpResponse>() {\n            @Override\n            public void completed(final HttpResponse response) {\n                try {\n                    handleResponse(response, machine, metricMap);\n                    success.incrementAndGet();\n                } catch (Exception e) {\n                    logger.error(msg + \" metric \" + url + \" error:\", e);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void failed(final Exception ex) {\n                latch.countDown();\n                fail.incrementAndGet();\n                httpGet.abort();\n                if (ex instanceof SocketTimeoutException) {\n                    logger.error(\"Failed to fetch metric from <{}>: socket timeout\", url);\n                } else if (ex instanceof ConnectException) {\n                    logger.error(\"Failed to fetch metric from <{}> (ConnectionException: {})\", url, ex.getMessage());\n                } else {\n                    logger.error(msg + \" metric \" + url + \" error\", ex);\n                }\n            }\n\n            @Override\n            public void cancelled() {\n                latch.countDown();\n                fail.incrementAndGet();\n                httpGet.abort();\n            }\n        });\n    }\n    try {\n        latch.await(maxWaitSeconds, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        logger.info(msg + \" metric, wait http client error:\", e);\n    }\n    long cost = System.currentTimeMillis() - start;\n    //logger.info(\"finished \" + msg + \" metric for \" + app + \", time intervalMs [\" + startTime + \", \" + endTime\n    //    + \"], total machines=\" + machines.size() + \", dead=\" + dead + \", fetch success=\"\n    //    + success + \", fetch fail=\" + fail + \", time cost=\" + cost + \" ms\");\n    writeMetric(metricMap);\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * \u4fdd\u7559\u8d44\u6e90\u540d\u4e3aidentity\u7684\u7ed3\u679c\u3002\n *\n * @param entities \u901a\u8fc7hashCode\u67e5\u627e\u5230\u7684MetricEntities\n * @param identity \u771f\u6b63\u9700\u8981\u67e5\u627e\u7684\u8d44\u6e90\u540d\n * @return\n */\n", "func_signal": "public static List<MetricVo> fromMetricEntities(Collection<MetricEntity> entities, String identity)", "code": "{\n    List<MetricVo> list = new ArrayList<>();\n    if (entities != null) {\n        for (MetricEntity entity : entities) {\n            if (entity.getResource().equals(identity)) {\n                list.add(fromMetricEntity(entity));\n            }\n        }\n    }\n    return list;\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-nacos/src/main/java/com/alibaba/csp/sentinel/dashboard/domain/vo/MetricVo.java", "commit_date": "2019-05-21 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * This node is visible when this.visible==true or one of this's parents is visible,\n * root node is always invisible.\n */\n", "func_signal": "private static void visit(ResourceTreeNode node, List<ResourceVo> list, boolean parentVisible, boolean isRoot)", "code": "{\n    boolean visible = !isRoot && (node.isVisible() || parentVisible);\n    //boolean visible = node.isVisible();\n    if (visible) {\n        ResourceVo vo = new ResourceVo();\n        vo.parentTtId = node.getParentId();\n        vo.ttId = node.getId();\n        vo.resource = node.getResource();\n        vo.threadNum = node.getThreadNum();\n        vo.passQps = node.getPassQps();\n        vo.blockQps = node.getBlockQps();\n        vo.totalQps = node.getTotalQps();\n        vo.averageRt = node.getAverageRt();\n        vo.exceptionQps = node.getExceptionQps();\n        vo.oneMinutePass = node.getOneMinutePass();\n        vo.oneMinuteBlock = node.getOneMinuteBlock();\n        vo.oneMinuteException = node.getOneMinuteException();\n        vo.oneMinuteTotal = node.getOneMinuteTotal();\n        vo.visible = node.isVisible();\n        list.add(vo);\n    }\n    for (ResourceTreeNode c : node.getChildren()) {\n        visit(c, list, visible, false);\n    }\n}", "path": "SpringCloud-Learning/4-Finchley/alibaba-sentinel-dashboard-apollo/src/main/java/com/alibaba/csp/sentinel/dashboard/domain/vo/ResourceVo.java", "commit_date": "2019-05-05 00:00:00", "repo_name": "dyc87112/SpringCloud-Learning", "stars": 7319, "license": "None", "language": "java", "size": 1265}
{"docstring": "/**\n * Returns {@code true} if the provided JAR entry must be mentioned in signed JAR archive's\n * manifest.\n */\n", "func_signal": "public static boolean isJarEntryDigestNeededInManifest(String entryName)", "code": "{\n    // See https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Signed_JAR_File\n\n    // Entries outside of META-INF must be listed in the manifest.\n    if (!entryName.startsWith(\"META-INF/\")) {\n        return true;\n    }\n    // Entries in subdirectories of META-INF must be listed in the manifest.\n    if (entryName.indexOf('/', \"META-INF/\".length()) != -1) {\n        return true;\n    }\n\n    // Ignored file names (case-insensitive) in META-INF directory:\n    //   MANIFEST.MF\n    //   *.SF\n    //   *.RSA\n    //   *.DSA\n    //   *.EC\n    //   SIG-*\n    String fileNameLowerCase =\n            entryName.substring(\"META-INF/\".length()).toLowerCase(Locale.US);\n    if ((\"manifest.mf\".equals(fileNameLowerCase))\n            || (fileNameLowerCase.endsWith(\".sf\"))\n            || (fileNameLowerCase.endsWith(\".rsa\"))\n            || (fileNameLowerCase.endsWith(\".dsa\"))\n            || (fileNameLowerCase.endsWith(\".ec\"))\n            || (fileNameLowerCase.startsWith(\"sig-\"))) {\n        return false;\n    }\n    return true;\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * get string (UTF-8) by id\n *\n * @param apkFile apk file\n * @return null if not found\n */\n", "func_signal": "public static String getString(final File apkFile, final int id)", "code": "{\n    final byte[] bytes = PayloadReader.get(apkFile, id);\n    if (bytes == null) {\n        return null;\n    }\n    try {\n        return new String(bytes, ApkUtil.DEFAULT_CHARSET);\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "walle/payload_reader/src/main/java/com/meituan/android/walle/PayloadReader.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Signs the provided APK using JAR signing (aka v1 signature scheme) and returns the list of\n * JAR entries which need to be added to the APK as part of the signature.\n *\n * @param signerConfigs signer configurations, one for each signer. At least one signer config\n *        must be provided.\n *\n * @throws InvalidKeyException if a signing key is not suitable for this signature scheme or\n *         cannot be used in general\n * @throws SignatureException if an error occurs when computing digests of generating\n *         signatures\n */\n", "func_signal": "public static List<Pair<String, byte[]>> sign(\n        List<SignerConfig> signerConfigs,\n        DigestAlgorithm jarEntryDigestAlgorithm,\n        Map<String, byte[]> jarEntryDigests,\n        List<Integer> apkSigningSchemeIds,\n        byte[] sourceManifestBytes)\n                throws InvalidKeyException, CertificateEncodingException, SignatureException", "code": "{\n    if (signerConfigs.isEmpty()) {\n        throw new IllegalArgumentException(\"At least one signer config must be provided\");\n    }\n    OutputManifestFile manifest =\n            generateManifestFile(jarEntryDigestAlgorithm, jarEntryDigests, sourceManifestBytes);\n\n    return signManifest(signerConfigs, jarEntryDigestAlgorithm, apkSigningSchemeIds, manifest);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Sets the offset of the start of the ZIP Central Directory in the archive.\n *\n * <p>NOTE: Byte order of {@code zipEndOfCentralDirectory} must be little-endian.\n */\n", "func_signal": "public static void setZipEocdCentralDirectoryOffset(\n        ByteBuffer zipEndOfCentralDirectory, long offset)", "code": "{\n    assertByteOrderLittleEndian(zipEndOfCentralDirectory);\n    setUnsignedInt32(\n            zipEndOfCentralDirectory,\n            zipEndOfCentralDirectory.position() + ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET,\n            offset);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the size (in bytes) of the ZIP Central Directory.\n *\n * <p>NOTE: Byte order of {@code zipEndOfCentralDirectory} must be little-endian.\n */\n", "func_signal": "public static long getZipEocdCentralDirectorySizeBytes(ByteBuffer zipEndOfCentralDirectory)", "code": "{\n    assertByteOrderLittleEndian(zipEndOfCentralDirectory);\n    return getUnsignedInt32(\n            zipEndOfCentralDirectory,\n            zipEndOfCentralDirectory.position() + ZIP_EOCD_CENTRAL_DIR_SIZE_FIELD_OFFSET);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Gets the APK Signature Scheme v2 signature algorithms to be used for signing an APK using the\n * provided key.\n *\n * @param minSdkVersion minimum API Level of the platform on which the APK may be installed (see\n *        AndroidManifest.xml minSdkVersion attribute).\n *\n * @throws InvalidKeyException if the provided key is not suitable for signing APKs using\n *         APK Signature Scheme v2\n */\n", "func_signal": "public static List<SignatureAlgorithm> getSuggestedSignatureAlgorithms(\n        PublicKey signingKey, int minSdkVersion) throws InvalidKeyException", "code": "{\n    String keyAlgorithm = signingKey.getAlgorithm();\n    if (\"RSA\".equalsIgnoreCase(keyAlgorithm)) {\n        // Use RSASSA-PKCS1-v1_5 signature scheme instead of RSASSA-PSS to guarantee\n        // deterministic signatures which make life easier for OTA updates (fewer files\n        // changed when deterministic signature schemes are used).\n\n        // Pick a digest which is no weaker than the key.\n        int modulusLengthBits = ((RSAKey) signingKey).getModulus().bitLength();\n        if (modulusLengthBits <= 3072) {\n            // 3072-bit RSA is roughly 128-bit strong, meaning SHA-256 is a good fit.\n            return Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256);\n        } else {\n            // Keys longer than 3072 bit need to be paired with a stronger digest to avoid the\n            // digest being the weak link. SHA-512 is the next strongest supported digest.\n            return Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512);\n        }\n    } else if (\"DSA\".equalsIgnoreCase(keyAlgorithm)) {\n        // DSA is supported only with SHA-256.\n        return Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256);\n    } else if (\"EC\".equalsIgnoreCase(keyAlgorithm)) {\n        // Pick a digest which is no weaker than the key.\n        int keySizeBits = ((ECKey) signingKey).getParams().getOrder().bitLength();\n        if (keySizeBits <= 256) {\n            // 256-bit Elliptic Curve is roughly 128-bit strong, meaning SHA-256 is a good fit.\n            return Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256);\n        } else {\n            // Keys longer than 256 bit need to be paired with a stronger digest to avoid the\n            // digest being the weak link. SHA-512 is the next strongest supported digest.\n            return Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512);\n        }\n    } else {\n        throw new InvalidKeyException(\"Unsupported key algorithm: \" + keyAlgorithm);\n    }\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v2/V2SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Finds the main ZIP sections of the provided APK.\n *\n * @throws IOException if an I/O error occurred while reading the APK\n * @throws ZipFormatException if the APK is malformed\n */\n", "func_signal": "public static ZipSections findZipSections(DataSource apk)\n        throws IOException, ZipFormatException", "code": "{\n    Pair<ByteBuffer, Long> eocdAndOffsetInFile =\n            ZipUtils.findZipEndOfCentralDirectoryRecord(apk);\n    if (eocdAndOffsetInFile == null) {\n        throw new ZipFormatException(\"ZIP End of Central Directory record not found\");\n    }\n\n    ByteBuffer eocdBuf = eocdAndOffsetInFile.getFirst();\n    long eocdOffset = eocdAndOffsetInFile.getSecond();\n    if (ZipUtils.isZip64EndOfCentralDirectoryLocatorPresent(apk, eocdOffset)) {\n        throw new ZipFormatException(\"ZIP64 APK not supported\");\n    }\n    eocdBuf.order(ByteOrder.LITTLE_ENDIAN);\n    long cdStartOffset = ZipUtils.getZipEocdCentralDirectoryOffset(eocdBuf);\n    if (cdStartOffset >= eocdOffset) {\n        throw new ZipFormatException(\n                \"ZIP Central Directory start offset out of range: \" + cdStartOffset\n                    + \". ZIP End of Central Directory offset: \" + eocdOffset);\n    }\n\n    long cdSizeBytes = ZipUtils.getZipEocdCentralDirectorySizeBytes(eocdBuf);\n    long cdEndOffset = cdStartOffset + cdSizeBytes;\n    if (cdEndOffset > eocdOffset) {\n        throw new ZipFormatException(\n                \"ZIP Central Directory overlaps with End of Central Directory\"\n                        + \". CD end: \" + cdEndOffset\n                        + \", EoCD start: \" + eocdOffset);\n    }\n\n    int cdRecordCount = ZipUtils.getZipEocdCentralDirectoryTotalRecordCount(eocdBuf);\n\n    return new ZipSections(\n            cdStartOffset,\n            cdSizeBytes,\n            cdRecordCount,\n            eocdOffset,\n            eocdBuf);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/apk/ApkUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Constructs a new {@code JarEntry} with the provided name and data.\n *\n * @param data uncompressed data of the entry. Changes to this array will not be\n *        reflected in {@link #getData()}.\n */\n", "func_signal": "public JarEntry(String name, byte[] data)", "code": "{\n    mName = name;\n    mData = data.clone();\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/ApkSignerEngine.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns a new {@link MessageDigest} instance corresponding to the provided digest algorithm.\n */\n", "func_signal": "public static MessageDigest getMessageDigestInstance(DigestAlgorithm digestAlgorithm)", "code": "{\n    String jcaAlgorithm = digestAlgorithm.getJcaMessageDigestAlgorithm();\n    try {\n        return MessageDigest.getInstance(jcaAlgorithm);\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException(\"Failed to obtain \" + jcaAlgorithm + \" MessageDigest\", e);\n    }\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Generated and returns the {@code META-INF/MANIFEST.MF} file based on the provided (optional)\n * input {@code MANIFEST.MF} and digests of JAR entries covered by the manifest.\n */\n", "func_signal": "public static OutputManifestFile generateManifestFile(\n        DigestAlgorithm jarEntryDigestAlgorithm,\n        Map<String, byte[]> jarEntryDigests,\n        byte[] sourceManifestBytes)", "code": "{\n    Manifest sourceManifest = null;\n    if (sourceManifestBytes != null) {\n        try {\n            sourceManifest = new Manifest(new ByteArrayInputStream(sourceManifestBytes));\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Failed to parse source MANIFEST.MF\", e);\n        }\n    }\n    ByteArrayOutputStream manifestOut = new ByteArrayOutputStream();\n    Attributes mainAttrs = new Attributes();\n    // Copy the main section from the source manifest (if provided). Otherwise use defaults.\n    if (sourceManifest != null) {\n        mainAttrs.putAll(sourceManifest.getMainAttributes());\n    } else {\n        mainAttrs.put(Attributes.Name.MANIFEST_VERSION, ATTRIBUTE_VALUE_MANIFEST_VERSION);\n        mainAttrs.put(ATTRIBUTE_NAME_CREATED_BY, ATTRIBUTE_DEFALT_VALUE_CREATED_BY);\n    }\n\n    try {\n        ManifestWriter.writeMainSection(manifestOut, mainAttrs);\n    } catch (IOException e) {\n        throw new RuntimeException(\"Failed to write in-memory MANIFEST.MF\", e);\n    }\n\n    List<String> sortedEntryNames = new ArrayList<>(jarEntryDigests.keySet());\n    Collections.sort(sortedEntryNames);\n    SortedMap<String, byte[]> invidualSectionsContents = new TreeMap<>();\n    String entryDigestAttributeName = getEntryDigestAttributeName(jarEntryDigestAlgorithm);\n    for (String entryName : sortedEntryNames) {\n        byte[] entryDigest = jarEntryDigests.get(entryName);\n        Attributes entryAttrs = new Attributes();\n        entryAttrs.putValue(\n                entryDigestAttributeName,\n                Base64.getEncoder().encodeToString(entryDigest));\n        ByteArrayOutputStream sectionOut = new ByteArrayOutputStream();\n        byte[] sectionBytes;\n        try {\n            ManifestWriter.writeIndividualSection(sectionOut, entryName, entryAttrs);\n            sectionBytes = sectionOut.toByteArray();\n            manifestOut.write(sectionBytes);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to write in-memory MANIFEST.MF\", e);\n        }\n        invidualSectionsContents.put(entryName, sectionBytes);\n    }\n\n    OutputManifestFile result = new OutputManifestFile();\n    result.contents = manifestOut.toByteArray();\n    result.mainSectionAttributes = mainAttrs;\n    result.individualSectionsContents = invidualSectionsContents;\n    return result;\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the position at which ZIP End of Central Directory record starts in the provided\n * buffer or {@code -1} if the record is not present.\n *\n * <p>NOTE: Byte order of {@code zipContents} must be little-endian.\n */\n", "func_signal": "private static int findZipEndOfCentralDirectoryRecord(ByteBuffer zipContents)", "code": "{\n    assertByteOrderLittleEndian(zipContents);\n\n    // ZIP End of Central Directory (EOCD) record is located at the very end of the ZIP archive.\n    // The record can be identified by its 4-byte signature/magic which is located at the very\n    // beginning of the record. A complication is that the record is variable-length because of\n    // the comment field.\n    // The algorithm for locating the ZIP EOCD record is as follows. We search backwards from\n    // end of the buffer for the EOCD record signature. Whenever we find a signature, we check\n    // the candidate record's comment length is such that the remainder of the record takes up\n    // exactly the remaining bytes in the buffer. The search is bounded because the maximum\n    // size of the comment field is 65535 bytes because the field is an unsigned 16-bit number.\n\n    int archiveSize = zipContents.capacity();\n    if (archiveSize < ZIP_EOCD_REC_MIN_SIZE) {\n        return -1;\n    }\n    int maxCommentLength = Math.min(archiveSize - ZIP_EOCD_REC_MIN_SIZE, UINT16_MAX_VALUE);\n    int eocdWithEmptyCommentStartPosition = archiveSize - ZIP_EOCD_REC_MIN_SIZE;\n    for (int expectedCommentLength = 0; expectedCommentLength < maxCommentLength;\n            expectedCommentLength++) {\n        int eocdStartPos = eocdWithEmptyCommentStartPosition - expectedCommentLength;\n        if (zipContents.getInt(eocdStartPos) == ZIP_EOCD_REC_SIG) {\n            int actualCommentLength =\n                    getUnsignedInt16(\n                            zipContents, eocdStartPos + ZIP_EOCD_COMMENT_LENGTH_FIELD_OFFSET);\n            if (actualCommentLength == expectedCommentLength) {\n                return eocdStartPos;\n            }\n        }\n    }\n\n    return -1;\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the names of JAR entries which this signer will produce as part of v1 signature.\n */\n", "func_signal": "public static Set<String> getOutputEntryNames(List<SignerConfig> signerConfigs)", "code": "{\n    Set<String> result = new HashSet<>(2 * signerConfigs.size() + 1);\n    for (SignerConfig signerConfig : signerConfigs) {\n        String signerName = signerConfig.name;\n        result.add(\"META-INF/\" + signerName + \".SF\");\n        PublicKey publicKey = signerConfig.certificates.get(0).getPublicKey();\n        String signatureBlockFileName =\n                \"META-INF/\" + signerName + \".\"\n                        + publicKey.getAlgorithm().toUpperCase(Locale.US);\n        result.add(signatureBlockFileName);\n    }\n    result.add(MANIFEST_ENTRY_NAME);\n    return result;\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns a {@link DataSource} backed by the provided {@link ByteBuffer}. The data source\n * represents the data contained between the position and limit of the buffer. Changes to the\n * buffer's contents will be visible in the data source.\n */\n", "func_signal": "public static DataSource asDataSource(ByteBuffer buffer)", "code": "{\n    if (buffer == null) {\n        throw new NullPointerException();\n    }\n    return new ByteBufferDataSource(buffer);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/util/DataSources.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Sets the offset of the start of the ZIP Central Directory in the APK's ZIP End of Central\n * Directory record.\n *\n * @param zipEndOfCentralDirectory APK's ZIP End of Central Directory record\n * @param offset offset of the ZIP Central Directory relative to the start of the archive. Must\n *        be between {@code 0} and {@code 2^32 - 1} inclusive.\n */\n", "func_signal": "public static void setZipEocdCentralDirectoryOffset(\n        ByteBuffer zipEndOfCentralDirectory, long offset)", "code": "{\n    ByteBuffer eocd = zipEndOfCentralDirectory.slice();\n    eocd.order(ByteOrder.LITTLE_ENDIAN);\n    ZipUtils.setZipEocdCentralDirectoryOffset(eocd, offset);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/apk/ApkUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the ZIP End of Central Directory record of the provided ZIP file.\n *\n * @param maxCommentSize maximum accepted size (in bytes) of EoCD comment field. The permitted\n *        value is from 0 to 65535 inclusive. The smaller the value, the faster this method\n *        locates the record, provided its comment field is no longer than this value.\n *\n * @return contents of the ZIP End of Central Directory record and the record's offset in the\n *         file or {@code null} if the file does not contain the record.\n *\n * @throws IOException if an I/O error occurs while reading the file.\n */\n", "func_signal": "private static Pair<ByteBuffer, Long> findZipEndOfCentralDirectoryRecord(\n        DataSource zip, int maxCommentSize) throws IOException", "code": "{\n    // ZIP End of Central Directory (EOCD) record is located at the very end of the ZIP archive.\n    // The record can be identified by its 4-byte signature/magic which is located at the very\n    // beginning of the record. A complication is that the record is variable-length because of\n    // the comment field.\n    // The algorithm for locating the ZIP EOCD record is as follows. We search backwards from\n    // end of the buffer for the EOCD record signature. Whenever we find a signature, we check\n    // the candidate record's comment length is such that the remainder of the record takes up\n    // exactly the remaining bytes in the buffer. The search is bounded because the maximum\n    // size of the comment field is 65535 bytes because the field is an unsigned 16-bit number.\n\n    if ((maxCommentSize < 0) || (maxCommentSize > UINT16_MAX_VALUE)) {\n        throw new IllegalArgumentException(\"maxCommentSize: \" + maxCommentSize);\n    }\n\n    long fileSize = zip.size();\n    if (fileSize < ZIP_EOCD_REC_MIN_SIZE) {\n        // No space for EoCD record in the file.\n        return null;\n    }\n    // Lower maxCommentSize if the file is too small.\n    maxCommentSize = (int) Math.min(maxCommentSize, fileSize - ZIP_EOCD_REC_MIN_SIZE);\n\n    int maxEocdSize = ZIP_EOCD_REC_MIN_SIZE + maxCommentSize;\n    long bufOffsetInFile = fileSize - maxEocdSize;\n    ByteBuffer buf = zip.getByteBuffer(bufOffsetInFile, maxEocdSize);\n    buf.order(ByteOrder.LITTLE_ENDIAN);\n    int eocdOffsetInBuf = findZipEndOfCentralDirectoryRecord(buf);\n    if (eocdOffsetInBuf == -1) {\n        // No EoCD record found in the buffer\n        return null;\n    }\n    // EoCD found\n    buf.position(eocdOffsetInBuf);\n    ByteBuffer eocd = buf.slice();\n    eocd.order(ByteOrder.LITTLE_ENDIAN);\n    return Pair.of(eocd, bufOffsetInFile + eocdOffsetInBuf);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Signs the provided APK using JAR signing (aka v1 signature scheme) and returns the list of\n * JAR entries which need to be added to the APK as part of the signature.\n *\n * @param signerConfigs signer configurations, one for each signer. At least one signer config\n *        must be provided.\n *\n * @throws InvalidKeyException if a signing key is not suitable for this signature scheme or\n *         cannot be used in general\n * @throws SignatureException if an error occurs when computing digests of generating\n *         signatures\n */\n", "func_signal": "public static List<Pair<String, byte[]>> signManifest(\n        List<SignerConfig> signerConfigs,\n        DigestAlgorithm digestAlgorithm,\n        List<Integer> apkSigningSchemeIds,\n        OutputManifestFile manifest)\n                throws InvalidKeyException, CertificateEncodingException, SignatureException", "code": "{\n    if (signerConfigs.isEmpty()) {\n        throw new IllegalArgumentException(\"At least one signer config must be provided\");\n    }\n\n    // For each signer output .SF and .(RSA|DSA|EC) file, then output MANIFEST.MF.\n    List<Pair<String, byte[]>> signatureJarEntries =\n            new ArrayList<>(2 * signerConfigs.size() + 1);\n    byte[] sfBytes =\n            generateSignatureFile(apkSigningSchemeIds, digestAlgorithm, manifest);\n    for (SignerConfig signerConfig : signerConfigs) {\n        String signerName = signerConfig.name;\n        byte[] signatureBlock;\n        try {\n            signatureBlock = generateSignatureBlock(signerConfig, sfBytes);\n        } catch (InvalidKeyException e) {\n            throw new InvalidKeyException(\n                    \"Failed to sign using signer \\\"\" + signerName + \"\\\"\", e);\n        } catch (CertificateEncodingException e) {\n            throw new CertificateEncodingException(\n                    \"Failed to sign using signer \\\"\" + signerName + \"\\\"\", e);\n        } catch (SignatureException e) {\n            throw new SignatureException(\n                    \"Failed to sign using signer \\\"\" + signerName + \"\\\"\", e);\n        }\n        signatureJarEntries.add(Pair.of(\"META-INF/\" + signerName + \".SF\", sfBytes));\n        PublicKey publicKey = signerConfig.certificates.get(0).getPublicKey();\n        String signatureBlockFileName =\n                \"META-INF/\" + signerName + \".\"\n                        + publicKey.getAlgorithm().toUpperCase(Locale.US);\n        signatureJarEntries.add(\n                Pair.of(signatureBlockFileName, signatureBlock));\n    }\n    signatureJarEntries.add(Pair.of(MANIFEST_ENTRY_NAME, manifest.contents));\n    return signatureJarEntries;\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Gets the JAR signing digest algorithm to be used for signing an APK using the provided key.\n *\n * @param minSdkVersion minimum API Level of the platform on which the APK may be installed (see\n *        AndroidManifest.xml minSdkVersion attribute)\n *\n * @throws InvalidKeyException if the provided key is not suitable for signing APKs using\n *         JAR signing (aka v1 signature scheme)\n */\n", "func_signal": "public static DigestAlgorithm getSuggestedSignatureDigestAlgorithm(\n        PublicKey signingKey, int minSdkVersion) throws InvalidKeyException", "code": "{\n    String keyAlgorithm = signingKey.getAlgorithm();\n    if (\"RSA\".equalsIgnoreCase(keyAlgorithm)) {\n        // Prior to API Level 18, only SHA-1 can be used with RSA.\n        if (minSdkVersion < 18) {\n            return DigestAlgorithm.SHA1;\n        }\n        return DigestAlgorithm.SHA256;\n    } else if (\"DSA\".equalsIgnoreCase(keyAlgorithm)) {\n        // Prior to API Level 21, only SHA-1 can be used with DSA\n        if (minSdkVersion < 21) {\n            return DigestAlgorithm.SHA1;\n        } else {\n            return DigestAlgorithm.SHA256;\n        }\n    } else if (\"EC\".equalsIgnoreCase(keyAlgorithm)) {\n        if (minSdkVersion < 18) {\n            throw new InvalidKeyException(\n                    \"ECDSA signatures only supported for minSdkVersion 18 and higher\");\n        }\n        // Prior to API Level 21, only SHA-1 can be used with ECDSA\n        if (minSdkVersion < 21) {\n            return DigestAlgorithm.SHA1;\n        } else {\n            return DigestAlgorithm.SHA256;\n        }\n    } else {\n        throw new InvalidKeyException(\"Unsupported key algorithm: \" + keyAlgorithm);\n    }\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/apk/v1/V1SchemeSigner.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * get bytes by id <br/>\n *\n * @param apkFile apk file\n * @param id      id\n * @return bytes\n */\n", "func_signal": "public static byte[] get(final File apkFile, final int id)", "code": "{\n    final Map<Integer, ByteBuffer> idValues = getAll(apkFile);\n    if (idValues == null) {\n        return null;\n    }\n    final ByteBuffer byteBuffer = idValues.get(id);\n    if (byteBuffer == null) {\n        return null;\n    }\n    return getBytes(byteBuffer);\n}", "path": "walle/payload_reader/src/main/java/com/meituan/android/walle/PayloadReader.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the offset of the start of the ZIP Central Directory in the archive.\n *\n * <p>NOTE: Byte order of {@code zipEndOfCentralDirectory} must be little-endian.\n */\n", "func_signal": "public static long getZipEocdCentralDirectoryOffset(ByteBuffer zipEndOfCentralDirectory)", "code": "{\n    assertByteOrderLittleEndian(zipEndOfCentralDirectory);\n    return getUnsignedInt32(\n            zipEndOfCentralDirectory,\n            zipEndOfCentralDirectory.position() + ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Returns the total number of records in ZIP Central Directory.\n *\n * <p>NOTE: Byte order of {@code zipEndOfCentralDirectory} must be little-endian.\n */\n", "func_signal": "public static int getZipEocdCentralDirectoryTotalRecordCount(\n        ByteBuffer zipEndOfCentralDirectory)", "code": "{\n    assertByteOrderLittleEndian(zipEndOfCentralDirectory);\n    return getUnsignedInt16(\n            zipEndOfCentralDirectory,\n            zipEndOfCentralDirectory.position()\n                    + ZIP_EOCD_CENTRAL_DIR_TOTAL_RECORD_COUNT_OFFSET);\n}", "path": "walle/plugin/src/main/java/com/android/apksigner/core/internal/zip/ZipUtils.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "Meituan-Dianping/walle", "stars": 6688, "license": "apache-2.0", "language": "java", "size": 528}
{"docstring": "/**\n * Creates a token from an encoded token string.\n *\n * @param token the (non-null) encoded token (three Base-64 encoded strings separated\n * by \".\" characters)\n */\n", "func_signal": "public static Jwt decode(String token)", "code": "{\n\tint firstPeriod = token.indexOf('.');\n\tint lastPeriod = token.lastIndexOf('.');\n\n\tif (firstPeriod <= 0 || lastPeriod <= firstPeriod) {\n\t\tthrow new IllegalArgumentException(\"JWT must have 3 tokens\");\n\t}\n\tCharBuffer buffer = CharBuffer.wrap(token, 0, firstPeriod);\n\t// TODO: Use a Reader which supports CharBuffer\n\tJwtHeader header = JwtHeaderHelper.create(buffer.toString());\n\n\tbuffer.limit(lastPeriod).position(firstPeriod + 1);\n\tbyte[] claims = b64UrlDecode(buffer);\n\tboolean emptyCrypto = lastPeriod == token.length() - 1;\n\n\tbyte[] crypto;\n\n\tif (emptyCrypto) {\n\t\tif (!\"none\".equals(header.parameters.alg)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Signed or encrypted token must have non-empty crypto segment\");\n\t\t}\n\t\tcrypto = new byte[0];\n\t}\n\telse {\n\t\tbuffer.limit(token.length()).position(lastPeriod + 1);\n\t\tcrypto = b64UrlDecode(buffer);\n\t}\n\treturn new JwtImpl(header, claims, crypto);\n}", "path": "spring-security-oauth/spring-security-jwt/src/main/java/org/springframework/security/jwt/JwtHelper.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * tests getting the signature method.\n */\n", "func_signal": "@Test\npublic void testGetSignatureMethod() throws Exception", "code": "{\n\tCoreOAuthSignatureMethodFactory factory = new CoreOAuthSignatureMethodFactory();\n\tOAuthProviderTokenImpl token = new OAuthProviderTokenImpl();\n\ttoken.setSecret(\"token_SHHHHHHHHHHHHHH\");\n\tSharedConsumerSecret sharedSecret = new SharedConsumerSecretImpl(\"consumer_shhhhhhhhhh\");\n\ttry {\n\t\tfactory.getSignatureMethod(\"unknown\", sharedSecret, token.getSecret());\n\t\tfail(\"should fail with unknown signature method.\");\n\t} catch (UnsupportedSignatureMethodException e) {\n\t\t// fall thru...\n\t}\n\n\ttry {\n\t\tfactory.getSignatureMethod(PlainTextSignatureMethod.SIGNATURE_NAME, sharedSecret, token.getSecret());\n\t\tfail(\"plain text shouldn't be supported by default.\");\n\t} catch (UnsupportedSignatureMethodException e) {\n\t\t// fall thru...\n\t}\n\n\tfactory.setSupportPlainText(true);\n\tOAuthSignatureMethod signatureMethod = factory.getSignatureMethod(PlainTextSignatureMethod.SIGNATURE_NAME,\n\t\t\tsharedSecret, token.getSecret());\n\tassertTrue(signatureMethod instanceof PlainTextSignatureMethod);\n\tassertEquals(\"consumer_shhhhhhhhhh%26token_SHHHHHHHHHHHHHH\",\n\t\t\t((PlainTextSignatureMethod) signatureMethod).getSecret());\n\n\tsignatureMethod = factory.getSignatureMethod(HMAC_SHA1SignatureMethod.SIGNATURE_NAME, sharedSecret,\n\t\t\ttoken.getSecret());\n\tassertTrue(signatureMethod instanceof HMAC_SHA1SignatureMethod);\n\tSecretKeySpec spec = new SecretKeySpec(\"consumer_shhhhhhhhhh&token_SHHHHHHHHHHHHHH\".getBytes(\"UTF-8\"),\n\t\t\tHMAC_SHA1SignatureMethod.MAC_NAME);\n\tassertTrue(Arrays.equals(spec.getEncoded(), ((HMAC_SHA1SignatureMethod) signatureMethod).getSecretKey()\n\t\t\t.getEncoded()));\n\n\tKeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n\tgenerator.initialize(1024);\n\tKeyPair keyPair = generator.generateKeyPair();\n\tsignatureMethod = factory.getSignatureMethod(RSA_SHA1SignatureMethod.SIGNATURE_NAME,\n\t\t\tnew RSAKeySecret(keyPair.getPrivate(), keyPair.getPublic()), token.getSecret());\n\tassertTrue(signatureMethod instanceof RSA_SHA1SignatureMethod);\n\tassertEquals(keyPair.getPrivate(), ((RSA_SHA1SignatureMethod) signatureMethod).getPrivateKey());\n\tassertEquals(keyPair.getPublic(), ((RSA_SHA1SignatureMethod) signatureMethod).getPublicKey());\n}", "path": "spring-security-oauth/spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/CoreOAuthSignatureMethodFactoryTests.java", "commit_date": "2019-03-20 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Get the verification key for the token signatures.\n *\n * @return the key used to verify tokens\n */\n", "func_signal": "public Map<String, String> getKey()", "code": "{\n\tMap<String, String> result = new LinkedHashMap<String, String>();\n\tresult.put(\"alg\", signer.algorithm());\n\tresult.put(\"value\", verifierKey);\n\treturn result;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "// gh-1015\n", "func_signal": "@Test\npublic void readAuthenticationUsingCustomAccessTokenConverterThenAuthenticationDetailsContainsClaims() throws Exception", "code": "{\n\tAccessTokenConverter customAccessTokenConverter = mock(AccessTokenConverter.class);\n\twhen(customAccessTokenConverter.extractAuthentication(anyMapOf(String.class, String.class))).thenAnswer(new Answer<OAuth2Authentication>() {\n\t\t@Override\n\t\tpublic OAuth2Authentication answer(InvocationOnMock invocation) throws Throwable {\n\t\t\tMap<String, String> claims = (Map<String, String>)invocation.getArguments()[0];\n\t\t\tOAuth2Authentication authentication = new OAuth2Authentication(mock(OAuth2Request.class), null);\n\t\t\tauthentication.setDetails(claims);\n\t\t\treturn authentication;\n\t\t}\n\t});\n\n\tJwkVerifyingJwtAccessTokenConverter jwtVerifyingAccessTokenConverter =\n\t\t\tnew JwkVerifyingJwtAccessTokenConverter(mock(JwkDefinitionSource.class));\n\tjwtVerifyingAccessTokenConverter = spy(jwtVerifyingAccessTokenConverter);\n\tjwtVerifyingAccessTokenConverter.setAccessTokenConverter(customAccessTokenConverter);\n\n\tMap<String, String> claims = new LinkedHashMap<String, String>();\n\tclaims.put(\"claim1\", \"value1\");\n\tclaims.put(\"claim2\", \"value2\");\n\tclaims.put(\"claim3\", \"value3\");\n\tdoReturn(claims).when(jwtVerifyingAccessTokenConverter).decode((anyString()));\n\n\tJwkTokenStore spy = spy(this.jwkTokenStore);\n\tJwtTokenStore delegate = new JwtTokenStore(jwtVerifyingAccessTokenConverter);\n\n\tField field = ReflectionUtils.findField(spy.getClass(), \"delegate\");\n\tfield.setAccessible(true);\n\tReflectionUtils.setField(field, spy, delegate);\n\n\tOAuth2Authentication authentication = spy.readAuthentication(anyString());\n\tassertEquals(claims, authentication.getDetails());\n}", "path": "spring-security-oauth/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreTests.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Convenience method for super admin users to remove all tokens (useful for testing, not really in production)\n */\n", "func_signal": "public void clear()", "code": "{\n\taccessTokenStore.clear();\n\tauthenticationToAccessTokenStore.clear();\n\tclientIdToAccessTokenStore.clear();\n\trefreshTokenStore.clear();\n\taccessTokenToRefreshTokenStore.clear();\n\tauthenticationStore.clear();\n\trefreshTokenAuthenticationStore.clear();\n\trefreshTokenToAccessTokenStore.clear();\n\texpiryQueue.clear();\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/InMemoryTokenStore.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "// gh-1010\n", "func_signal": "@Test\npublic void getVerifierWhenModulusMostSignificantBitIs1ThenVerifierStillVerifyContentSignature() throws Exception", "code": "{\n\tString jwkSetUrl = JwkDefinitionSourceTests.class.getResource(\"jwk-set.json\").toString();\n\tJwkDefinitionSource jwkDefinitionSource = new JwkDefinitionSource(jwkSetUrl);\n\tSignatureVerifier verifier = jwkDefinitionSource.getDefinitionLoadIfNecessary(\"_Ci3-VfV_N0YAG22NQOgOUpFBDDcDe_rJxpu5JK702o\", null).getSignatureVerifier();\n\tString token = this.readToken(\"token.jwt\");\n\tint secondPeriodIndex = token.indexOf('.', token.indexOf('.') + 1);\n\tString contentString = token.substring(0, secondPeriodIndex);\n\tbyte[] content = contentString.getBytes(Charsets.UTF_8);\n\tString signatureString = token.substring(secondPeriodIndex + 1);\n\tbyte[] signature = Codecs.b64UrlDecode(signatureString);\n\tverifier.verify(content, signature);\n}", "path": "spring-security-oauth/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSourceTests.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * tests that we get the correct error response if the media type is unacceptable.\n */\n", "func_signal": "@Test\npublic void testUnsupportedMediaTypeWithInvalidToken() throws Exception", "code": "{\n\tHttpHeaders headers = new HttpHeaders();\n\theaders.set(\"Authorization\", String.format(\"%s %s\", OAuth2AccessToken.BEARER_TYPE, \"FOO\"));\n\theaders.setAccept(Arrays.asList(MediaType.valueOf(\"text/foo\")));\n\tassertEquals(HttpStatus.NOT_ACCEPTABLE, serverRunning.getStatusCode(\"/sparklr2/photos/user/message\", headers));\n}", "path": "spring-security-oauth/samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ResourceOwnerPasswordProviderTests.java", "commit_date": "2014-02-14 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Extract a map from a query string.\n * \n * @param query a query (or fragment) string from a URI\n * @return a Map of the values in the query\n */\n", "func_signal": "public static Map<String, String> extractMap(String query)", "code": "{\n\tMap<String, String> map = new HashMap<String, String>();\n\tProperties properties = StringUtils.splitArrayElementsIntoProperties(\n\t\t\tStringUtils.delimitedListToStringArray(query, \"&\"), \"=\");\n\tif (properties != null) {\n\t\tfor (Object key : properties.keySet()) {\n\t\t\tmap.put(key.toString(), properties.get(key).toString());\n\t\t}\n\t}\n\treturn map;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * @param value\n */\n", "func_signal": "public DefaultExpiringOAuth2RefreshToken(String value, Date expiration)", "code": "{\n\tsuper(value);\n\tthis.expiration = expiration;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/DefaultExpiringOAuth2RefreshToken.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * tests that we get the correct error response if the media type is unacceptable.\n */\n", "func_signal": "@Test\npublic void testMissingGrantType() throws Exception", "code": "{\n\tHttpHeaders headers = new HttpHeaders();\n\theaders.set(\"Authorization\", String.format(\"Basic %s\", new String(Base64.encode(\"my-trusted-client:\".getBytes()))));\n\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n\tResponseEntity<String> response = serverRunning.postForString(\"/sparklr2/oauth/token\", headers, new LinkedMultiValueMap<String, String>());\n\tassertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n\tassertTrue(response.getBody().contains(\"invalid_request\"));\n}", "path": "spring-security-oauth/samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ResourceOwnerPasswordProviderTests.java", "commit_date": "2014-02-14 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * @param jwtClaimsSetVerifier the {@link JwtClaimsSetVerifier} used to verify the claim(s) in the JWT Claims Set\n */\n", "func_signal": "public void setJwtClaimsSetVerifier(JwtClaimsSetVerifier jwtClaimsSetVerifier)", "code": "{\n\tAssert.notNull(jwtClaimsSetVerifier, \"jwtClaimsSetVerifier cannot be null\");\n\tthis.jwtClaimsSetVerifier = jwtClaimsSetVerifier;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Compare 2 sets and check that one contains all members of the other.\n * \n * @param target set of strings to check\n * @param members the members to compare to\n * @return true if all members are in the target\n */\n", "func_signal": "public static boolean containsAll(Set<String> target, Set<String> members)", "code": "{\n\ttarget = new HashSet<String>(target);\n\ttarget.retainAll(members);\n\treturn target.size() == members.size();\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * @return the mapping from default endpoint paths to custom ones (or the default if no customization is known)\n */\n", "func_signal": "public String getPath(String defaultPath)", "code": "{\n\tString result = defaultPath;\n\tif (mappings.containsKey(defaultPath)) {\n\t\tresult = mappings.get(defaultPath);\n\t}\n\treturn result;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Custom mappings for framework endpoint paths. The keys in the map are the default framework endpoint path, e.g.\n * \"/oauth/authorize\", and the values are the desired runtime paths.\n * \n * @param patternMap the mappings to set\n */\n", "func_signal": "public void setMappings(Map<String, String> patternMap)", "code": "{\n\tthis.mappings = new HashMap<String, String>(patternMap);\n\tfor (String key : mappings.keySet()) {\n\t\tString result = mappings.get(key);\n\t\tif (result.startsWith(FORWARD)) {\n\t\t\tresult = result.substring(FORWARD.length());\n\t\t}\n\t\tif (result.startsWith(REDIRECT)) {\n\t\t\tresult = result.substring(REDIRECT.length());\n\t\t}\n\t\tmappings.put(key, result);\n\t}\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Sets the JWT signing key. It can be either a simple MAC key or an RSA key. RSA keys\n * should be in OpenSSH format, as produced by <tt>ssh-keygen</tt>.\n *\n * @param key the key to be used for signing JWTs.\n */\n", "func_signal": "public void setSigningKey(String key)", "code": "{\n\tAssert.hasText(key);\n\tkey = key.trim();\n\n\tthis.signingKey = key;\n\n\tif (isPublic(key)) {\n\t\tsigner = new RsaSigner(key);\n\t\tlogger.info(\"Configured with RSA signing key\");\n\t}\n\telse {\n\t\t// Assume it's a MAC key\n\t\tthis.verifierKey = key;\n\t\tsigner = new MacSigner(key);\n\t}\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * @param prefix the prefix to set\n */\n", "func_signal": "public void setPrefix(String prefix)", "code": "{\n\tif (!StringUtils.hasText(prefix)) {\n\t\tprefix = \"\";\n\t}\n\telse\n\t\twhile (prefix.endsWith(\"/\")) {\n\t\t\tprefix = prefix.substring(0, prefix.lastIndexOf(\"/\"));\n\t\t}\n\tthis.prefix = prefix;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Allows retrieval of the full token.\n *\n * @return the encoded header, claims and crypto segments concatenated with \".\"\n * characters\n */\n", "func_signal": "@Override\npublic byte[] bytes()", "code": "{\n\treturn concat(b64UrlEncode(header.bytes()), JwtHelper.PERIOD,\n\t\t\tb64UrlEncode(content), JwtHelper.PERIOD, b64UrlEncode(crypto));\n}", "path": "spring-security-oauth/spring-security-jwt/src/main/java/org/springframework/security/jwt/JwtHelper.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Parses a string parameter value into a set of strings.\n * \n * @param values The values of the set.\n * @return The set.\n */\n", "func_signal": "public static Set<String> parseParameterList(String values)", "code": "{\n\tSet<String> result = new TreeSet<String>();\n\tif (values != null && values.trim().length() > 0) {\n\t\t// the spec says the scope is separated by spaces\n\t\tString[] tokens = values.split(\"[\\\\s+]\");\n\t\tresult.addAll(Arrays.asList(tokens));\n\t}\n\treturn result;\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "// gh-1268\n", "func_signal": "@Test\npublic void testGetAccessTokenReturnsHeaderContentTypeJson() throws Exception", "code": "{\n\twhen(clientDetailsService.loadClientByClientId(clientId)).thenReturn(clientDetails);\n\n\tHashMap<String, String> parameters = new HashMap<String, String>();\n\tparameters.put(\"client_id\", clientId);\n\tparameters.put(\"scope\", \"read\");\n\tparameters.put(\"grant_type\", \"authorization_code\");\n\tparameters.put(\"code\", \"kJAHDFG\");\n\n\tOAuth2AccessToken expectedToken = new DefaultOAuth2AccessToken(\"FOO\");\n\n\twhen(tokenGranter.grant(eq(\"authorization_code\"), any(TokenRequest.class))).thenReturn(expectedToken);\n\n\twhen(authorizationRequestFactory.createTokenRequest(any(Map.class), eq(clientDetails))).thenReturn(\n\t\t\tcreateFromParameters(parameters));\n\n\tResponseEntity<OAuth2AccessToken> response = endpoint.postAccessToken(clientAuthentication, parameters);\n\n\tassertNotNull(response);\n\tassertEquals(HttpStatus.OK, response.getStatusCode());\n\tassertEquals(\"application/json;charset=UTF-8\", response.getHeaders().get(\"Content-Type\").iterator().next());\n}", "path": "spring-security-oauth/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java", "commit_date": "2020-04-08 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "/**\n * Copy constructor for access token.\n * \n * @param accessToken\n */\n", "func_signal": "public DefaultOAuth2AccessToken(OAuth2AccessToken accessToken)", "code": "{\n\tthis(accessToken.getValue());\n\tsetAdditionalInformation(accessToken.getAdditionalInformation());\n\tsetRefreshToken(accessToken.getRefreshToken());\n\tsetExpiration(accessToken.getExpiration());\n\tsetScope(accessToken.getScope());\n\tsetTokenType(accessToken.getTokenType());\n}", "path": "spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/DefaultOAuth2AccessToken.java", "commit_date": "2019-11-13 00:00:00", "repo_name": "spring-attic/spring-security-oauth", "stars": 4686, "license": "apache-2.0", "language": "java", "size": 7273}
{"docstring": "//RecyclerAdapter <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n", "func_signal": "@Override\npublic BV onCreateViewHolder(final ViewGroup parent, int viewType)", "code": "{\n    final BV bv = createView(viewType, parent);\n    bv.createView();\n    bv.setOnViewClickListener(onViewClickListener);\n    bv.itemView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            if (onItemClickListener != null) {\n                AdapterView pv = parent instanceof AdapterView ? (AdapterView) parent : null;\n                onItemClickListener.onItemClick(pv, v, bv.position, getItemId(bv.position));\n            }\n        }\n    });\n    bv.itemView.setOnLongClickListener(new View.OnLongClickListener() {\n        @Override\n        public boolean onLongClick(View v) {\n            if (onItemLongClickListener == null) {\n                return false;\n            }\n            AdapterView pv = parent instanceof AdapterView ? (AdapterView) parent : null;\n            return onItemLongClickListener.onItemLongClick(pv, v, bv.position, getItemId(bv.position));\n        }\n    });\n    return bv;\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/base/BaseAdapter.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Constructor. Call this in the host activity onCreate method after its\n * content view has been set. You should always create new instances when\n * the host activity is recreated.\n *\n * @param activity The host activity.\n */\n", "func_signal": "@TargetApi(19)\npublic SystemBarTintManager(Activity activity)", "code": "{\n\n    Window win = activity.getWindow();\n    ViewGroup decorViewGroup = (ViewGroup) win.getDecorView();\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // check theme attrs\n        int[] attrs = {android.R.attr.windowTranslucentStatus,\n                android.R.attr.windowTranslucentNavigation};\n        TypedArray a = activity.obtainStyledAttributes(attrs);\n        try {\n            mStatusBarAvailable = a.getBoolean(0, false);\n            mNavBarAvailable = a.getBoolean(1, false);\n        } finally {\n            a.recycle();\n        }\n\n        // check window flags\n        WindowManager.LayoutParams winParams = win.getAttributes();\n        int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;\n        if ((winParams.flags & bits) != 0) {\n            mStatusBarAvailable = true;\n        }\n        bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION;\n        if ((winParams.flags & bits) != 0) {\n            mNavBarAvailable = true;\n        }\n    }\n\n    mConfig = new SystemBarConfig(activity, mStatusBarAvailable, mNavBarAvailable);\n    // device might not have virtual navigation keys\n    if (!mConfig.hasNavigtionBar()) {\n        mNavBarAvailable = false;\n    }\n\n    if (mStatusBarAvailable) {\n        setupStatusBarView(activity, decorViewGroup);\n    }\n    if (mNavBarAvailable) {\n        setupNavBarView(activity, decorViewGroup);\n    }\n\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified color tint to the system status bar.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setStatusBarTintColor(int color)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundColor(color);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable or color resource to all system UI bars.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setTintResource(int res)", "code": "{\n    setStatusBarTintResource(res);\n    setNavigationBarTintResource(res);\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable to all system UI bars.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "public void setTintDrawable(Drawable drawable)", "code": "{\n    setStatusBarTintDrawable(drawable);\n    setNavigationBarTintDrawable(drawable);\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified alpha to the system status bar.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "@TargetApi(11)\npublic void setStatusBarAlpha(float alpha)", "code": "{\n    if (mStatusBarAvailable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        mStatusBarTintView.setAlpha(alpha);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Enable tinting of the system navigation bar.\n *\n * If the platform does not have soft navigation keys, is running Jelly Bean\n * or earlier, or translucent system UI modes have not been enabled in either\n * the theme or via window flags, then this method does nothing.\n *\n * @param enabled True to enable tinting, false to disable it (default).\n */\n", "func_signal": "public void setNavigationBarTintEnabled(boolean enabled)", "code": "{\n    mNavBarTintEnabled = enabled;\n    if (mNavBarAvailable) {\n        mNavBarTintView.setVisibility(enabled ? View.VISIBLE : View.GONE);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable or color resource to the system status bar.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setStatusBarTintResource(int res)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundResource(res);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable or color resource to the system navigation bar.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setNavigationBarTintResource(int res)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundResource(res);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified color tint to the system navigation bar.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setNavigationBarTintColor(int color)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundColor(color);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Notifies the attached observers that the underlying data has been changed\n * and any View reflecting the data set should refresh itself.\n */\n", "func_signal": "public void notifyListDataSetChanged()", "code": "{\n    notifyDataSetChanged(); //\u4ec5\u5bf9 RecyclerView \u6709\u6548\n    mDataSetObservable.notifyChanged();\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/base/BaseAdapter.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**bv\u7684\u663e\u793a\u65b9\u6cd5\n * @param position\n * @param bv\n */\n", "func_signal": "@Override\npublic void bindView(int position, BV bv)", "code": "{\n    bv.selected = isSelected(position);\n    bv.bindView(getItem(position), position, getItemViewType(position));\n    if (SettingUtil.preload && onLoadListener != null && position >= getCount() - 1 - preloadCount) {\n        onLoadListener.onLoadMore();\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/base/BaseAdapter.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable to the system navigation bar.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setNavigationBarTintDrawable(Drawable drawable)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundDrawable(drawable);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified color tint to all system UI bars.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setTintColor(int color)", "code": "{\n    setStatusBarTintColor(color);\n    setNavigationBarTintColor(color);\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Get the layout inset for any system UI that appears at the bottom of the screen.\n *\n * @return The layout inset (in pixels).\n */\n", "func_signal": "public int getPixelInsetBottom()", "code": "{\n    if (mTranslucentNavBar && isNavigationAtBottom()) {\n        return mNavigationBarHeight;\n    } else {\n        return 0;\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified alpha to all system UI bars.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "public void setTintAlpha(float alpha)", "code": "{\n    setStatusBarAlpha(alpha);\n    setNavigationBarAlpha(alpha);\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified drawable to the system status bar.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setStatusBarTintDrawable(Drawable drawable)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundDrawable(drawable);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Enable tinting of the system status bar.\n *\n * If the platform is running Jelly Bean or earlier, or translucent system\n * UI modes have not been enabled in either the theme or via window flags,\n * then this method does nothing.\n *\n * @param enabled True to enable tinting, false to disable it (default).\n */\n", "func_signal": "public void setStatusBarTintEnabled(boolean enabled)", "code": "{\n    mStatusBarTintEnabled = enabled;\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setVisibility(enabled ? View.VISIBLE : View.GONE);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Apply the specified alpha to the system navigation bar.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "@TargetApi(11)\npublic void setNavigationBarAlpha(float alpha)", "code": "{\n    if (mNavBarAvailable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        mNavBarTintView.setAlpha(alpha);\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Get the layout inset for any system UI that appears at the right of the screen.\n *\n * @return The layout inset (in pixels).\n */\n", "func_signal": "public int getPixelInsetRight()", "code": "{\n    if (mTranslucentNavBar && !isNavigationAtBottom()) {\n        return mNavigationBarWidth;\n    } else {\n        return 0;\n    }\n}", "path": "Android-ZBLibrary/ZBLibrary/src/main/java/zuo/biao/library/manager/SystemBarTintManager.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "TommyLemon/Android-ZBLibrary", "stars": 5403, "license": "apache-2.0", "language": "java", "size": 32773}
{"docstring": "/**\n * Recording audio mode, finger moved right button (cancel button)\n */\n", "func_signal": "@Override\npublic void onMovedRight()", "code": "{\n    mChronometer.setVisibility(INVISIBLE);\n    mRecordHintTv.setVisibility(VISIBLE);\n    mRecordHintTv.setText(getContext().getString(R.string.cancel_record_voice_hint));\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Set camera capture file path and file name. If user didn't invoke this\n * method, will save in default path.\n *\n * @param path     Photo to be saved in.\n * @param fileName File name.\n */\n", "func_signal": "@Deprecated\npublic void setCameraCaptureFile(String path, String fileName)", "code": "{\n    File destDir = new File(path);\n    if (!destDir.exists()) {\n        destDir.mkdirs();\n    }\n    mPhoto = new File(path, fileName + \".png\");\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * \u63d2\u5165emoji\u8868\u60c5\u96c6\n *\n * @param pageSetAdapter\n * @param context\n * @param emoticonClickListener\n */\n", "func_signal": "public static void addEmojiPageSetEntity(PageSetAdapter pageSetAdapter, Context context, final EmoticonClickListener emoticonClickListener)", "code": "{\n    ArrayList<EmojiBean> emojiArray = new ArrayList<>();\n    Collections.addAll(emojiArray, DefEmoticons.sEmojiArray);\n    EmoticonPageSetEntity emojiPageSetEntity\n            = new EmoticonPageSetEntity.Builder()\n            .setLine(3)\n            .setRow(7)\n            .setEmoticonList(emojiArray)\n            .setIPageViewInstantiateItem(getDefaultEmoticonPageViewInstantiateItem(new EmoticonDisplayListener<Object>() {\n                @Override\n                public void onBindView(int position, ViewGroup parent, EmoticonsAdapter.ViewHolder viewHolder, Object object, final boolean isDelBtn) {\n                    final EmojiBean emojiBean = (EmojiBean) object;\n                    if (emojiBean == null && !isDelBtn) {\n                        return;\n                    }\n\n                    viewHolder.ly_root.setBackgroundResource(R.drawable.bg_emoticon);\n\n                    if (isDelBtn) {\n                        viewHolder.iv_emoticon.setImageResource(R.drawable.icon_del);\n                    } else {\n                        viewHolder.iv_emoticon.setImageResource(emojiBean.icon);\n                    }\n\n                    viewHolder.rootView.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            if (emoticonClickListener != null) {\n                                emoticonClickListener.onEmoticonClick(emojiBean, Constants.EMOTICON_CLICK_TEXT, isDelBtn);\n                            }\n                        }\n                    });\n                }\n            }))\n            .setShowDelBtn(EmoticonPageEntity.DelBtnStatus.LAST)\n            .setIconUri(ImageBase.Scheme.DRAWABLE.toUri(\"icon_emoji\"))\n            .build();\n    pageSetAdapter.add(emojiPageSetEntity);\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/utils/SimpleCommonUtils.java", "commit_date": "2018-10-17 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * \u8ba1\u7b97\u538b\u7f29\u6bd4\u4f8b\u503c\n *\n * @param options   \u89e3\u6790\u56fe\u7247\u7684\u914d\u7f6e\u4fe1\u606f\n * @param reqWidth  \u6240\u9700\u56fe\u7247\u538b\u7f29\u5c3a\u5bf8\u6700\u5c0f\u5bbd\u5ea6\n * @param reqHeight \u6240\u9700\u56fe\u7247\u538b\u7f29\u5c3a\u5bf8\u6700\u5c0f\u9ad8\u5ea6\n * @return \u538b\u7f29\u6bd4\u4f8b\n */\n", "func_signal": "private int calculateInSampleSize(BitmapFactory.Options options,\n                                  int reqWidth, int reqHeight)", "code": "{\n    // \u4fdd\u5b58\u56fe\u7247\u539f\u5bbd\u9ad8\u503c\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n\n    // \u521d\u59cb\u5316\u538b\u7f29\u6bd4\u4f8b\u4e3a1\n    int inSampleSize = 1;\n\n    // \u5f53\u56fe\u7247\u5bbd\u9ad8\u503c\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e\u6240\u9700\u538b\u7f29\u56fe\u7247\u5bbd\u9ad8\u503c\u65f6,\u8fdb\u5165\u5faa\u73af\u8ba1\u7b97\u7cfb\u7edf\n    if (height > reqHeight || width > reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        // \u538b\u7f29\u6bd4\u4f8b\u503c\u6bcf\u6b21\u5faa\u73af\u4e24\u500d\u589e\u52a0,\n        // \u76f4\u5230\u539f\u56fe\u5bbd\u9ad8\u503c\u7684\u4e00\u534a\u9664\u4ee5\u538b\u7f29\u503c\u540e\u90fd~\u5927\u4e8e\u6240\u9700\u5bbd\u9ad8\u503c\u4e3a\u6b62\n        while ((halfHeight / inSampleSize) >= reqHeight\n                && (halfWidth / inSampleSize) >= reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}", "path": "aurora-imui/ReactNative/android/src/main/java/cn/jiguang/imui/messagelist/LoadImageAsync.java", "commit_date": "2017-11-10 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Update current position before update the UI\n */\n", "func_signal": "public final void setCurrentPos(int current)", "code": "{\n    mLastPos = mCurrentPos;\n    mCurrentPos = current;\n    onUpdatePos(current, mLastPos);\n}", "path": "aurora-imui/Android/messagelist/src/main/java/cn/jiguang/imui/messages/ptr/PtrIndicator.java", "commit_date": "2017-11-03 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Resets the Matrix back to FIT_CENTER, and then displays it.s\n */\n", "func_signal": "private void resetMatrix()", "code": "{\n\tmSuppMatrix.reset();\n\tsetImageViewMatrix(getDisplayMatrix());\n\tcheckMatrixBounds();\n}", "path": "aurora-imui/Android/sample/exampleui/src/main/java/imui/jiguang/cn/imuisample/views/photoview/PhotoViewAttacher.java", "commit_date": "2018-02-23 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Recording audio mode, finger moved right button and release\n */\n", "func_signal": "@Override\npublic void onRightUpTapped()", "code": "{\n    mChronometer.stop();\n    mChronometer.setText(\"00:00\");\n    mChronometer.setVisibility(INVISIBLE);\n    mRecordHintTv.setText(getContext().getString(R.string.record_voice_hint));\n    mRecordHintTv.setVisibility(VISIBLE);\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Record audio widget finger on touch record button callback\n */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n    Log.e(\"ChatInputView\", \"starting chronometer\");\n    mChronometer.setVisibility(VISIBLE);\n    mRecordHintTv.setVisibility(INVISIBLE);\n    mChronometer.setBase(SystemClock.elapsedRealtime());\n    mChronometer.start();\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * \u6839\u636ekey\u6765\u83b7\u53d6\u5185\u5b58\u4e2d\u7684\u56fe\u7247\n *\n * @param key path\n * @return bitmap\n */\n", "func_signal": "public Bitmap getBitmapFromMemCache(String key)", "code": "{\n    if (key == null) {\n        return null;\n    } else {\n        return mMemoryCache.get(key);\n    }\n}", "path": "aurora-imui/Android/messagelist/src/main/java/cn/jiguang/imui/utils/BitmapCache.java", "commit_date": "2018-03-08 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Helper method that 'unpacks' a Matrix and returns the required value\n * \n * @param matrix - Matrix to unpack\n * @param whichValue - Which value from Matrix.M* to return\n * @return float - returned value\n */\n", "func_signal": "private float getValue(Matrix matrix, int whichValue)", "code": "{\n\tmatrix.getValues(mMatrixValues);\n\treturn mMatrixValues[whichValue];\n}", "path": "aurora-imui/Android/sample/exampleui/src/main/java/imui/jiguang/cn/imuisample/views/photoview/PhotoViewAttacher.java", "commit_date": "2018-02-23 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Helper method that maps the supplied Matrix to the current Drawable\n * \n * @param matrix - Matrix to map Drawable against\n * @return RectF - Displayed Rectangle\n */\n", "func_signal": "private RectF getDisplayRect(Matrix matrix)", "code": "{\n\tImageView imageView = getImageView();\n\n\tif (null != imageView) {\n\t\tDrawable d = imageView.getDrawable();\n\t\tif (null != d) {\n\t\t\tmDisplayRect.set(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());\n\t\t\tmatrix.mapRect(mDisplayRect);\n\t\t\treturn mDisplayRect;\n\t\t}\n\t}\n\treturn null;\n}", "path": "aurora-imui/Android/sample/exampleui/src/main/java/imui/jiguang/cn/imuisample/views/photoview/PhotoViewAttacher.java", "commit_date": "2018-02-23 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Recording audio mode, finger moved left button and release\n */\n", "func_signal": "@Override\npublic void onLeftUpTapped()", "code": "{\n    mChronometer.stop();\n    mRecordTime = SystemClock.elapsedRealtime() - mChronometer.getBase();\n    mPreviewPlayBtn.setMax(Math.round(mRecordTime / 1000));\n    mChronometer.setVisibility(VISIBLE);\n    mRecordHintTv.setVisibility(INVISIBLE);\n    mPreviewPlayLl.setVisibility(VISIBLE);\n    mRecordContentLl.setVisibility(GONE);\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Calculate Matrix for FIT_CENTER\n * \n * @param d - Drawable being displayed\n */\n", "func_signal": "private void updateBaseMatrix(Drawable d)", "code": "{\n\tImageView imageView = getImageView();\n\tif (null == imageView || null == d) {\n\t\treturn;\n\t}\n\n\tfinal float viewWidth = imageView.getWidth();\n\tfinal float viewHeight = imageView.getHeight();\n\tfinal int drawableWidth = d.getIntrinsicWidth();\n\tfinal int drawableHeight = d.getIntrinsicHeight();\n\n\tmBaseMatrix.reset();\n\n\tfinal float widthScale = viewWidth / drawableWidth;\n\tfinal float heightScale = viewHeight / drawableHeight;\n\n\tif (mScaleType == ScaleType.CENTER) {\n\t\tmBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F, (viewHeight - drawableHeight) / 2F);\n\n\t} else if (mScaleType == ScaleType.CENTER_CROP) {\n\t\tfloat scale = Math.max(widthScale, heightScale);\n\t\tmBaseMatrix.postScale(scale, scale);\n\t\tmBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,\n\t\t\t\t(viewHeight - drawableHeight * scale) / 2F);\n\n\t} else if (mScaleType == ScaleType.CENTER_INSIDE) {\n\t\tfloat scale = Math.min(1.0f, Math.min(widthScale, heightScale));\n\t\tmBaseMatrix.postScale(scale, scale);\n\t\tmBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,\n\t\t\t\t(viewHeight - drawableHeight * scale) / 2F);\n\n\t} else {\n\t\tRectF mTempSrc = new RectF(0, 0, drawableWidth, drawableHeight);\n\t\tRectF mTempDst = new RectF(0, 0, viewWidth, viewHeight);\n\n\t\tswitch (mScaleType) {\n\t\t\tcase FIT_CENTER:\n\t\t\t\tmBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.CENTER);\n\t\t\t\tbreak;\n\n\t\t\tcase FIT_START:\n\t\t\t\tmBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.START);\n\t\t\t\tbreak;\n\n\t\t\tcase FIT_END:\n\t\t\t\tmBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.END);\n\t\t\t\tbreak;\n\n\t\t\tcase FIT_XY:\n\t\t\t\tmBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.FILL);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tresetMatrix();\n}", "path": "aurora-imui/Android/sample/exampleui/src/main/java/imui/jiguang/cn/imuisample/views/photoview/PhotoViewAttacher.java", "commit_date": "2018-02-23 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "// play audio\n", "func_signal": "private void playVoice()", "code": "{\n    try {\n        mMediaPlayer.reset();\n        mFIS = new FileInputStream(mRecordVoiceBtn.getRecordFile());\n        mFD = mFIS.getFD();\n        mMediaPlayer.setDataSource(mFD);\n        if (mIsEarPhoneOn) {\n            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_VOICE_CALL);\n        } else {\n            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n        }\n        mMediaPlayer.prepare();\n        mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n            @Override\n            public void onPrepared(final MediaPlayer mp) {\n                mChronometer.setBase(SystemClock.elapsedRealtime());\n                mPreviewPlayBtn.startPlay();\n                mChronometer.start();\n                mp.start();\n                mPlaying = true;\n            }\n        });\n        mMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\n            @Override\n            public void onCompletion(MediaPlayer mp) {\n                mp.stop();\n                mSetData = false;\n                mChronometer.stop();\n                mPlaying = false;\n                mPreviewPlayBtn.finishPlay();\n            }\n        });\n    } catch (Exception e) {\n        Toast.makeText(getContext(), getContext().getString(R.string.file_not_found_toast), Toast.LENGTH_SHORT)\n                .show();\n        e.printStackTrace();\n    } finally {\n        try {\n            if (mFIS != null) {\n                mFIS.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Cancel select photo callback\n */\n", "func_signal": "@Override\npublic void onFileDeselected()", "code": "{\n    int size = mSelectPhotoView.getSelectFiles().size();\n    Log.i(\"ChatInputView\", \"deselect file size: \" + size);\n    if (size > 0) {\n        mSendCountTv.setText(String.valueOf(size));\n    } else {\n        mSendCountTv.setVisibility(View.INVISIBLE);\n        if (mInput.length() == 0) {\n            triggerSendButtonAnimation(mSendBtn, false, true);\n        }\n    }\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Set menu container's height, invoke this method once the menu was\n * initialized.\n *\n * @param height Height of menu, set same height as soft keyboard so that\n *               display to perfection.\n */\n", "func_signal": "public void setMenuContainerHeight(int height)", "code": "{\n    if (height > 0) {\n        sMenuHeight = height;\n        ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,\n                height);\n        mMenuContainer.setLayoutParams(params);\n    }\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Full screen mode\n */\n", "func_signal": "private void fullScreen()", "code": "{\n    // hide top status bar\n    Activity activity = (Activity) getContext();\n    WindowManager.LayoutParams attrs = activity.getWindow().getAttributes();\n    attrs.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;\n    activity.getWindow().setAttributes(attrs);\n    activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);\n    mFullScreenBtn.setBackgroundResource(R.drawable.aurora_preview_recover_screen);\n    mFullScreenBtn.setVisibility(VISIBLE);\n    mChatInputContainer.setVisibility(GONE);\n    mMenuItemContainer.setVisibility(GONE);\n    int height = mHeight;\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        Display display = mWindow.getWindowManager().getDefaultDisplay();\n        DisplayMetrics dm = getResources().getDisplayMetrics();\n        display.getRealMetrics(dm);\n        height = dm.heightPixels;\n    }\n    MarginLayoutParams marginParams1 = new MarginLayoutParams(mCaptureBtn.getLayoutParams());\n    marginParams1.setMargins(marginParams1.leftMargin, marginParams1.topMargin, marginParams1.rightMargin,\n            dp2px(40));\n    FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(marginParams1);\n    params.gravity = Gravity.BOTTOM | Gravity.CENTER;\n    mCaptureBtn.setLayoutParams(params);\n\n    MarginLayoutParams marginParams2 = new MarginLayoutParams(mRecordVideoBtn.getLayoutParams());\n    marginParams2.setMargins(dp2px(20), marginParams2.topMargin, marginParams2.rightMargin, dp2px(48));\n    FrameLayout.LayoutParams params2 = new FrameLayout.LayoutParams(marginParams2);\n    params2.gravity = Gravity.BOTTOM | Gravity.START;\n    mRecordVideoBtn.setLayoutParams(params2);\n\n    MarginLayoutParams marginParams3 = new MarginLayoutParams(mSwitchCameraBtn.getLayoutParams());\n    marginParams3.setMargins(marginParams3.leftMargin, marginParams3.topMargin, dp2px(20), dp2px(48));\n    FrameLayout.LayoutParams params3 = new FrameLayout.LayoutParams(marginParams3);\n    params3.gravity = Gravity.BOTTOM | Gravity.END;\n    mSwitchCameraBtn.setLayoutParams(params3);\n\n//        mMenuContainer.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, height));\n    mMenuContainer.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));\n    mTextureView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, height));\n    mIsFullScreen = true;\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Recording audio mode, finger moving callback\n */\n", "func_signal": "@Override\npublic void onMoving()", "code": "{\n    mChronometer.setVisibility(VISIBLE);\n    mRecordHintTv.setVisibility(INVISIBLE);\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Select photo callback\n */\n", "func_signal": "@Override\npublic void onFileSelected()", "code": "{\n    int size = mSelectPhotoView.getSelectFiles().size();\n    Log.i(\"ChatInputView\", \"select file size: \" + size);\n    if (mInput.length() == 0 && size == 1) {\n        triggerSendButtonAnimation(mSendBtn, true, true);\n    } else if (mInput.length() > 0 && mSendCountTv.getVisibility() != View.VISIBLE) {\n        mSendCountTv.setVisibility(View.VISIBLE);\n    }\n    mSendCountTv.setText(String.valueOf(size));\n}", "path": "aurora-imui/Android/chatinput/src/main/java/cn/jiguang/imui/chatinput/ChatInputView.java", "commit_date": "2019-01-09 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Clean-up the resources attached to this object. This needs to be called\n * when the ImageView is no longer used. A good example is from\n * {@link View#onDetachedFromWindow()} or from {@link Activity#onDestroy()}.\n * This is automatically called if you are using {@link uk.co.senab.photoview.PhotoView}.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic final void cleanup()", "code": "{\n\tif (null != mImageView) {\n\t\tmImageView.get().getViewTreeObserver().removeGlobalOnLayoutListener(this);\n\t}\n\tmViewTreeObserver = null;\n\n\t// Clear listeners too\n\tmMatrixChangeListener = null;\n\tmPhotoTapListener = null;\n\tmViewTapListener = null;\n\n\t// Finally, clear ImageView\n\tmImageView = null;\n}", "path": "aurora-imui/Android/sample/exampleui/src/main/java/imui/jiguang/cn/imuisample/views/photoview/PhotoViewAttacher.java", "commit_date": "2018-02-23 00:00:00", "repo_name": "jpush/aurora-imui", "stars": 5690, "license": "mit", "language": "java", "size": 11470}
{"docstring": "/**\n * Inserts an int array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value an int array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putIntArray(String key, int[] value)", "code": "{\n  bundle.putIntArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a double value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a double\n * @return this\n */\n", "func_signal": "public Bundler putDouble(String key, double value)", "code": "{\n  bundle.putDouble(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a float value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a float\n * @return this\n */\n", "func_signal": "public Bundler putFloat(String key, float value)", "code": "{\n  bundle.putFloat(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a Parcelable value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a Parcelable object, or null\n * @return this\n */\n", "func_signal": "public Bundler putParcelable(String key, Parcelable value)", "code": "{\n  bundle.putParcelable(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a Boolean value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a Boolean, or null\n * @return this\n */\n", "func_signal": "public Bundler putBoolean(String key, boolean value)", "code": "{\n  bundle.putBoolean(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a long array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a long array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putLongArray(String key, long[] value)", "code": "{\n  bundle.putLongArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a long value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a long\n * @return this\n */\n", "func_signal": "public Bundler putLong(String key, long value)", "code": "{\n  bundle.putLong(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts an ArrayList<String> value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value an ArrayList<String> object, or null\n * @return this\n */\n", "func_signal": "public Bundler putStringArrayList(String key, ArrayList<String> value)", "code": "{\n  bundle.putStringArrayList(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a float array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a float array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putFloatArray(String key, float[] value)", "code": "{\n  bundle.putFloatArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a SparceArray of Parcelable values into the mapping of this\n * Bundle, replacing any existing value for the given key.  Either key\n * or value may be null.\n *\n * @param key a String, or null\n * @param value a SparseArray of Parcelable objects, or null\n * @return this\n */\n", "func_signal": "public Bundler putSparseParcelableArray(String key,\n    SparseArray<? extends Parcelable> value)", "code": "{\n  bundle.putSparseParcelableArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a char value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a char, or null\n * @return this\n */\n", "func_signal": "public Bundler putChar(String key, char value)", "code": "{\n  bundle.putChar(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a short array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a short array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putShortArray(String key, short[] value)", "code": "{\n  bundle.putShortArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a byte value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a byte\n * @return this\n */\n", "func_signal": "public Bundler putByte(String key, byte value)", "code": "{\n  bundle.putByte(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a Size value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a Size object, or null\n * @return this\n */\n", "func_signal": "@TargetApi(21)\npublic Bundler putSize(String key, Size value)", "code": "{\n  bundle.putSize(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a SizeF value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a SizeF object, or null\n * @return this\n */\n", "func_signal": "@TargetApi(21)\npublic Bundler putSizeF(String key, SizeF value)", "code": "{\n  bundle.putSizeF(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts all mappings from the given Bundle into this Bundle.\n *\n * @param bundle a Bundle\n * @return this\n */\n", "func_signal": "public Bundler putAll(Bundle bundle)", "code": "{\n  this.bundle.putAll(bundle);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a byte array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a byte array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putByteArray(String key, byte[] value)", "code": "{\n  bundle.putByteArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a char array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a char array object, or null\n * @return this\n */\n", "func_signal": "public Bundler putCharArray(String key, char[] value)", "code": "{\n  bundle.putCharArray(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts an int value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value an int, or null\n * @return this\n */\n", "func_signal": "public Bundler putInt(String key, int value)", "code": "{\n  bundle.putInt(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Inserts a Bundle value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a Bundle object, or null\n * @return this\n */\n", "func_signal": "public Bundler putBundle(String key, Bundle value)", "code": "{\n  bundle.putBundle(key, value);\n  return this;\n}", "path": "SmartTabLayout/utils-v4/src/main/java/com/ogaclejapan/smarttablayout/utils/v4/Bundler.java", "commit_date": "2019-03-09 00:00:00", "repo_name": "ogaclejapan/SmartTabLayout", "stars": 7074, "license": "apache-2.0", "language": "java", "size": 14671}
{"docstring": "/**\n * Sets the handler to use when thread execution is blocked due to thread bounds and queue\n * capacities are reached.\n *\n * <p>By default, {@link AbortPolicy} is used for rejected execution, which throws the {@link\n * java.util.concurrent.RejectedExecutionException}.\n */\n", "func_signal": "public BuilderImplT setRejectedExecutionHandler(\n    RejectedExecutionHandler rejectedExecutionHandler)", "code": "{\n  this.rejectedExecutionHandler = checkNotNull(rejectedExecutionHandler);\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Starts the command and uses the passed executor to collect output and error streams.\n *\n * <p>IMPORTANT: The stream collection uses an IO blocking method and the passed executor must be\n * well suited for the task. {@link ThreadPoolExecutor} is a viable option.\n *\n * @param executor The executor to collect output and error streams.\n * @return Started {@link Process} object.\n */\n", "func_signal": "public Process execute(Executor executor)\n    throws IOException, InterruptedException, ExecutionException", "code": "{\n  logger.atInfo().log(\"Executing the following command: '%s'\", COMMAND_ARGS_JOINER.join(args));\n  process = processBuilder.start();\n  output =\n      CompletableFuture.supplyAsync(() -> collectStream(process.getInputStream()), executor)\n          .get();\n  error =\n      CompletableFuture.supplyAsync(() -> collectStream(process.getErrorStream()), executor)\n          .get();\n  return process;\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/command/CommandExecutor.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Retrieves the first {@link PortScanner} plugin if present. */\n", "func_signal": "public Optional<PluginMatchingResult<PortScanner>> getPortScanner()", "code": "{\n  ImmutableList<PluginMatchingResult<PortScanner>> allPortScanners = getPortScanners();\n\n  return allPortScanners.isEmpty() ? Optional.empty() : Optional.of(allPortScanners.get(0));\n}", "path": "tsunami-security-scanner/plugin/src/main/java/com/google/tsunami/plugin/PluginManager.java", "commit_date": "2020-09-09 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * An annotation for marking the target software and target version for a Tsunami {@link\n * com.google.tsunami.plugin.VulnDetector} plugin.\n *\n * <p>If annotated by this annotation, the {@link com.google.tsunami.plugin.VulnDetector} will only\n * be executed by the scanner when the scan target is running the matching software behind a network\n * service.\n *\n * Example usage:\n *\n * <pre>{@code\n * {@literal @}ForSoftware(\n *   name = \"WordPress\",\n *   versions = {\n *     \"0.8\",\n *     \"0.9\",\n *     \"[1.3,2.0)\"\n *   }\n * )\n * public class ExamplePlugin implements VulnDetector {\n *   // ...\n * }\n * }</pre>\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ForSoftware", "code": "{\n\n  /** Name of the target software, case insensitive. */\n  // TODO(b/145315535): handle name conflicts, include other properties that uniquely identify\n  // software.\n  String name();\n\n  /**\n   * Array of versions and version ranges of the target software.\n   *\n   * <p>Some version and version range examples are:\n   *\n   * <ul>\n   *   <li><code>1.0</code> Version 1.0.\n   *   <li><code>[1.0,2.0)</code> Version 1.0 (inclusive) to 2.0 (exclusive).\n   *   <li><code>[1.0,2.0]</code> Version 1.0 to 2.0 (both inclusive).\n   *   <li><code>[1.0,)</code> Version 1.0 (inclusive) and higher.\n   *   <li><code>(,1.0]</code> Version 1.0 (inclusive) and lower.\n   * </ul>\n   *\n   * Example value for this field:\n   *\n   * <ul>\n   *   <li><code>[ 1.0 ]</code>\n   *   <li><code>[ 1.0, [1.1, 1.5) ]</code>\n   *   <li><code>[ 1.0, [1.1, 1.5), 1.7, 1.8 ]</code>\n   *   <li><code>[ (,1.0], [1.1, 1.3), [1.4,) ]</code>\n   * </ul>\n   */\n  String[] versions() default {};\n}", "path": "tsunami-security-scanner/plugin/src/main/java/com/google/tsunami/plugin/annotations/ForSoftware.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets the priority for threads created by the pool. */\n", "func_signal": "public BuilderImplT setPriority(int priority)", "code": "{\n  factoryBuilder.setPriority(priority);\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets the binding annotation. */\n", "func_signal": "public BuilderImplT setAnnotation(Class<? extends Annotation> annotationClass)", "code": "{\n  key = Key.get(executorServiceTypeClass, checkNotNull(annotationClass));\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "// TODO(b/145315535): add default output for the fake plugins and test the output of the workflow.\n", "func_signal": "@Test\npublic void run_whenNoPortScannerInstalled_returnsFailedScanResult()\n    throws ExecutionException, InterruptedException", "code": "{\n  Injector injector =\n      Guice.createInjector(\n          new FakeUtcClockModule(),\n          new FakePluginExecutionModule(),\n          new FakeServiceFingerprinterBootstrapModule(),\n          new FakeVulnDetectorBootstrapModule());\n  scanningWorkflow = injector.getInstance(DefaultScanningWorkflow.class);\n\n  ScanResults scanResults = scanningWorkflow.run(buildScanTarget());\n\n  assertThat(scanResults.getScanStatus()).isEqualTo(ScanStatus.FAILED);\n  assertThat(scanResults.getStatusMessage())\n      .contains(\"At least one PortScanner plugin is required\");\n  assertThat(scanResults.getScanFindingsList()).isEmpty();\n}", "path": "tsunami-security-scanner/workflow/src/test/java/com/google/tsunami/workflow/DefaultScanningWorkflowTest.java", "commit_date": "2020-09-10 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Get the {@link CharSequence} data stored in {@code storage} at {@code gcsUrl}. */\n", "func_signal": "public CharSequence getStoredCharSequence(Storage storage, String gcsUrl)", "code": "{\n  if (!delegatedArchivers.containsKey(storage)) {\n    throw new NoSuchElementException(String.format(\"Storage '%s' not found\", storage));\n  }\n  return delegatedArchivers.get(storage).getStoredCharSequence(gcsUrl);\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/io/archiving/testing/FakeGoogleCloudStorageArchivers.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Sets how long the JVM should wait to exit for daemon threads to complete.\n *\n * <p>This has no effect if the pool does not use daemon threads.\n */\n", "func_signal": "public BuilderImplT setDelayedShutdown(Duration shutdownDelay)", "code": "{\n  this.shutdownDelay = checkNotNull(shutdownDelay);\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets the binding annotation. */\n", "func_signal": "public BuilderImplT setAnnotation(Annotation annotation)", "code": "{\n  key = Key.get(executorServiceTypeClass, checkNotNull(annotation));\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Sets the name used to name the threads; automatically suffixed with \"-%s\"to incorporate the\n * thread number\n */\n", "func_signal": "public BuilderImplT setName(String name)", "code": "{\n  checkArgument(!Strings.isNullOrEmpty(name), \"Name should not be empty\");\n  this.name = name;\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Advances the clock by the given duration.\n *\n * <p>NOTE: this method can be called with a negative duration if the clock needs to go back in\n * time.\n *\n * @param increment the duration to advance the clock by\n * @return this\n */\n", "func_signal": "public FakeUtcClock advance(Duration increment)", "code": "{\n  checkNotNull(increment);\n  nowReference.getAndUpdate(now -> now.plus(increment));\n  return this;\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/time/testing/FakeUtcClock.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Sets the return value of {@link #instant()}.\n *\n * @param now the instant that this clock points to\n * @return this\n */\n", "func_signal": "public FakeUtcClock setNow(Instant now)", "code": "{\n  nowReference.set(checkNotNull(now));\n  return this;\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/time/testing/FakeUtcClock.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Get the byte array data stored in {@code storage} at {@code gcsUrl}. */\n", "func_signal": "public byte[] getStoredByteArrays(Storage storage, String gcsUrl)", "code": "{\n  if (!delegatedArchivers.containsKey(storage)) {\n    throw new NoSuchElementException(String.format(\"Storage '%s' not found\", storage));\n  }\n  return delegatedArchivers.get(storage).getStoredByteArrays(gcsUrl);\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/io/archiving/testing/FakeGoogleCloudStorageArchivers.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * Enumerates all sub-paths for a given URL. All query parameters and fragments are removed.\n *\n * <p>For example:\n *\n * <ul>\n *   <li>given <code>\"http://localhost/\"</code>, it returns <code>[\"http://localhost/\"]</code>\n *   <li>given <code>\"http://localhost/a/b/\"</code>, it returns <code>\n *       [\"http://localhost/\", \"http://localhost/a/\", \"http://localhost/a/b/\"]</code>\n * </ul>\n *\n * @param url the URL to be enumerated.\n * @return all sub-paths URLs for the given URL.\n */\n", "func_signal": "public static ImmutableSet<HttpUrl> allSubPaths(HttpUrl url)", "code": "{\n  if (url == null) {\n    return ImmutableSet.of();\n  }\n\n  // Url at root.\n  List<String> pathSegments = url.encodedPathSegments();\n  if (pathSegments.size() == 1 && pathSegments.get(0).isEmpty()) {\n    return ImmutableSet.of(url.newBuilder().query(null).fragment(null).build());\n  }\n\n  // Url has sub-paths.\n  ImmutableSet.Builder<HttpUrl> allSubUrlsBuilder = ImmutableSet.builder();\n  for (int pathEnd = 0; pathEnd <= pathSegments.size(); pathEnd++) {\n    List<String> subPathSegments = Lists.newArrayList(pathSegments.subList(0, pathEnd));\n    // Ensure sub-path has leading slash.\n    if (subPathSegments.isEmpty() || !subPathSegments.get(0).isEmpty()) {\n      subPathSegments.add(0, \"\");\n    }\n    // Ensure sub-path has trailing slash.\n    if (subPathSegments.size() == 1 || !Iterables.getLast(subPathSegments).isEmpty()) {\n      subPathSegments.add(\"\");\n    }\n    allSubUrlsBuilder.add(\n        url.newBuilder()\n            .encodedPath(PATH_JOINER.join(subPathSegments))\n            .query(null)\n            .fragment(null)\n            .build());\n  }\n  return allSubUrlsBuilder.build();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/net/UrlUtils.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets the keep alive time in seconds for the threads not in core pool. */\n", "func_signal": "public BuilderImplT setKeepAliveSeconds(long keepAliveSeconds)", "code": "{\n  checkArgument(keepAliveSeconds >= 0, \"The keep alive time should be non-negative.\");\n  this.keepAliveSeconds = keepAliveSeconds;\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Retrieves a {@link ServiceFingerprinter} plugin for the given {@link NetworkService}. */\n", "func_signal": "public Optional<PluginMatchingResult<ServiceFingerprinter>> getServiceFingerprinter(\n    NetworkService networkService)", "code": "{\n  return tsunamiPlugins.entrySet().stream()\n      .filter(entry -> entry.getKey().type().equals(PluginType.SERVICE_FINGERPRINT))\n      .filter(entry -> hasMatchingServiceName(networkService, entry.getKey()))\n      .map(\n          entry ->\n              PluginMatchingResult.<ServiceFingerprinter>builder()\n                  .setPluginDefinition(entry.getKey())\n                  .setTsunamiPlugin((ServiceFingerprinter) entry.getValue().get())\n                  .addMatchedService(networkService)\n                  .build())\n      .findFirst();\n}", "path": "tsunami-security-scanner/plugin/src/main/java/com/google/tsunami/plugin/PluginManager.java", "commit_date": "2020-09-09 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets the size of the thread pool. */\n", "func_signal": "public Builder setSize(int size)", "code": "{\n  checkArgument(size > 0, \"Thread pool size should be positive.\");\n  setCoreSize(size);\n  setMaxSize(size);\n  return this;\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/ScheduledThreadPoolModule.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Retrieves all {@link PortScanner} plugins. */\n", "func_signal": "public ImmutableList<PluginMatchingResult<PortScanner>> getPortScanners()", "code": "{\n  return tsunamiPlugins.entrySet().stream()\n      .filter(entry -> entry.getKey().type().equals(PluginType.PORT_SCAN))\n      .map(\n          entry ->\n              PluginMatchingResult.<PortScanner>builder()\n                  .setPluginDefinition(entry.getKey())\n                  .setTsunamiPlugin((PortScanner) entry.getValue().get())\n                  .build())\n      .collect(toImmutableList());\n}", "path": "tsunami-security-scanner/plugin/src/main/java/com/google/tsunami/plugin/PluginManager.java", "commit_date": "2020-09-09 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/** Sets whether or not new threads created by the pool will be daemon threads. */\n", "func_signal": "public BuilderImplT setDaemon(boolean daemon)", "code": "{\n  factoryBuilder.setDaemon(daemon);\n  this.daemon = daemon;\n  return self();\n}", "path": "tsunami-security-scanner/common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "google/tsunami-security-scanner", "stars": 8047, "license": "apache-2.0", "language": "java", "size": 576}
{"docstring": "/**\n * \u5904\u7406\u624b\u6307\u6ed1\u52a8\u4e8b\u4ef6\n *\n * @param event\n * @return true\u8868\u793a\u81ea\u5df1\u6d88\u8017\u6389\u8be5\u4e8b\u4ef6\uff0cfalse\u8868\u793a\u4e0d\u6d88\u8017\u8be5\u4e8b\u4ef6\n */\n", "func_signal": "private boolean handleActionMove(MotionEvent event)", "code": "{\n    if (mCurrentRefreshStatus == RefreshStatus.REFRESHING || mIsLoadingMore) {\n        return false;\n    }\n\n    if ((mCustomHeaderView == null || !mIsCustomHeaderViewScrollable) && mRefreshDownY == -1) {\n        mRefreshDownY = (int) event.getY();\n    }\n    if (mCustomHeaderView != null && mIsCustomHeaderViewScrollable && isCustomHeaderViewCompleteVisible() && mRefreshDownY == -1) {\n        mRefreshDownY = (int) event.getY();\n    }\n\n    int refreshDiffY = (int) event.getY() - mRefreshDownY;\n    refreshDiffY = (int) (refreshDiffY / mRefreshViewHolder.getPaddingTopScale());\n\n    // \u5982\u679c\u662f\u5411\u4e0b\u62c9\uff0c\u5e76\u4e14\u5f53\u524d\u53ef\u89c1\u7684\u7b2c\u4e00\u4e2a\u6761\u76ee\u7684\u7d22\u5f15\u7b49\u4e8e0\uff0c\u624d\u5904\u7406\u6574\u4e2a\u5934\u90e8\u63a7\u4ef6\u7684padding\n    if (refreshDiffY > 0 && shouldHandleRefresh() && isCustomHeaderViewCompleteVisible()) {\n        int paddingTop = mMinWholeHeaderViewPaddingTop + refreshDiffY;\n        if (paddingTop > 0 && mCurrentRefreshStatus != RefreshStatus.RELEASE_REFRESH) {\n            // \u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u5b8c\u5168\u663e\u793a\uff0c\u5e76\u4e14\u5f53\u524d\u72b6\u6001\u6ca1\u6709\u5904\u4e8e\u91ca\u653e\u5f00\u59cb\u5237\u65b0\u72b6\u6001\n            mCurrentRefreshStatus = RefreshStatus.RELEASE_REFRESH;\n            handleRefreshStatusChanged();\n\n            mRefreshViewHolder.handleScale(1.0f, refreshDiffY);\n\n            if (mRefreshScaleDelegate != null) {\n                mRefreshScaleDelegate.onRefreshScaleChanged(1.0f, refreshDiffY);\n            }\n        } else if (paddingTop < 0) {\n            // \u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u6ca1\u6709\u5b8c\u5168\u663e\u793a\uff0c\u5e76\u4e14\u5f53\u524d\u72b6\u6001\u6ca1\u6709\u5904\u4e8e\u4e0b\u62c9\u5237\u65b0\u72b6\u6001\n            if (mCurrentRefreshStatus != RefreshStatus.PULL_DOWN) {\n                boolean isPreRefreshStatusNotIdle = mCurrentRefreshStatus != RefreshStatus.IDLE;\n                mCurrentRefreshStatus = RefreshStatus.PULL_DOWN;\n                if (isPreRefreshStatusNotIdle) {\n                    handleRefreshStatusChanged();\n                }\n            }\n            float scale = 1 - paddingTop * 1.0f / mMinWholeHeaderViewPaddingTop;\n            /**\n             * \u5f80\u4e0b\u6ed1\n             * paddingTop    mMinWholeHeaderViewPaddingTop \u5230 0\n             * scale         0 \u5230 1\n             * \u5f80\u4e0a\u6ed1\n             * paddingTop    0 \u5230 mMinWholeHeaderViewPaddingTop\n             * scale         1 \u5230 0\n             */\n            mRefreshViewHolder.handleScale(scale, refreshDiffY);\n\n            if (mRefreshScaleDelegate != null) {\n                mRefreshScaleDelegate.onRefreshScaleChanged(scale, refreshDiffY);\n            }\n        }\n        paddingTop = Math.min(paddingTop, mMaxWholeHeaderViewPaddingTop);\n        mWholeHeaderView.setPadding(0, paddingTop, 0, 0);\n\n        if (mRefreshViewHolder.canChangeToRefreshingStatus()) {\n            mWholeHeaderDownY = -1;\n            mRefreshDownY = -1;\n\n            beginRefreshing();\n        }\n\n        return true;\n    }\n\n\n    if (mCustomHeaderView != null && mIsCustomHeaderViewScrollable) {\n        if (mWholeHeaderDownY == -1) {\n            mWholeHeaderDownY = (int) event.getY();\n\n            if (mCustomHeaderView != null) {\n                mWholeHeaderViewDownPaddingTop = mWholeHeaderView.getPaddingTop();\n            }\n        }\n\n        int wholeHeaderDiffY = (int) event.getY() - mWholeHeaderDownY;\n        if ((mPullDownRefreshEnable && !isWholeHeaderViewCompleteInvisible()) || (wholeHeaderDiffY > 0 && shouldInterceptToMoveCustomHeaderViewDown()) || (wholeHeaderDiffY < 0 && shouldInterceptToMoveCustomHeaderViewUp())) {\n\n            int paddingTop = mWholeHeaderViewDownPaddingTop + wholeHeaderDiffY;\n            if (paddingTop < mMinWholeHeaderViewPaddingTop - mCustomHeaderView.getMeasuredHeight()) {\n                paddingTop = mMinWholeHeaderViewPaddingTop - mCustomHeaderView.getMeasuredHeight();\n            }\n            mWholeHeaderView.setPadding(0, paddingTop, 0, 0);\n\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u63a7\u4ef6\n *\n * @return\n */\n", "func_signal": "private void initLoadMoreFooterView()", "code": "{\n    mLoadMoreFooterView = mRefreshViewHolder.getLoadMoreFooterView();\n    if (mLoadMoreFooterView != null) {\n        // \u6d4b\u91cf\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u63a7\u4ef6\u7684\u9ad8\u5ea6\n        mLoadMoreFooterView.measure(0, 0);\n        mLoadMoreFooterViewHeight = mLoadMoreFooterView.getMeasuredHeight();\n        mLoadMoreFooterView.setVisibility(GONE);\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u5934\u90e8\u89c6\u56fe\u662f\u5426\u5df2\u7ecf\u5b8c\u5168\u9690\u85cf\n *\n * @return\n */\n", "func_signal": "private boolean isHeaderViewCompleteInvisible()", "code": "{\n    // 0\u8868\u793ax\uff0c1\u8868\u793ay\n    int[] location = new int[2];\n    getLocationOnScreen(location);\n    int contentOnScreenTopY = location[1] + getPaddingTop();\n\n    mNavView.getLocationOnScreen(location);\n    MarginLayoutParams params = (MarginLayoutParams) mNavView.getLayoutParams();\n    int navViewTopOnScreenY = location[1] - params.topMargin;\n\n    if (navViewTopOnScreenY == contentOnScreenTopY) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGAStickyNavLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u83b7\u53d6\u5bfc\u822a\u89c6\u56fe\u7684\u9ad8\u5ea6\uff0c\u5305\u62ectopMargin\u548cbottomMargin\n *\n * @return\n */\n", "func_signal": "private int getNavViewHeight()", "code": "{\n    MarginLayoutParams layoutParams = (MarginLayoutParams) mNavView.getLayoutParams();\n    return mNavView.getMeasuredHeight() + layoutParams.topMargin + layoutParams.bottomMargin;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGAStickyNavLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u7684paddingTop\u52300\uff0c\u5e26\u52a8\u753b\n */\n", "func_signal": "private void changeRefreshHeaderViewToZero()", "code": "{\n    ValueAnimator animator = ValueAnimator.ofInt(mWholeHeaderView.getPaddingTop(), 0);\n    animator.setDuration(mRefreshViewHolder.getTopAnimDuration());\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            int paddingTop = (int) animation.getAnimatedValue();\n            mWholeHeaderView.setPadding(0, paddingTop, 0, 0);\n        }\n    });\n    animator.start();\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u7ed3\u675f\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\n */\n", "func_signal": "public void endLoadingMore()", "code": "{\n    if (mIsLoadingMore) {\n        if (mIsShowLoadingMoreView) {\n            // \u907f\u514dWiFi\u73af\u5883\u4e0b\u8bf7\u6c42\u6570\u636e\u592a\u5feb\uff0c\u52a0\u8f7d\u66f4\u591a\u63a7\u4ef6\u4e00\u95ea\u800c\u8fc7\n            mHandler.postDelayed(mDelayHiddenLoadingMoreViewTask, 300);\n        } else {\n            mIsLoadingMore = false;\n        }\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u7ed3\u675f\u4e0b\u62c9\u5237\u65b0\n */\n", "func_signal": "public void endRefreshing()", "code": "{\n    if (mCurrentRefreshStatus == RefreshStatus.REFRESHING) {\n        mCurrentRefreshStatus = RefreshStatus.IDLE;\n        hiddenRefreshHeaderView();\n        handleRefreshStatusChanged();\n        mRefreshViewHolder.onEndRefreshing();\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u5904\u7406\u5bf9\u7528\u6237\u662f\u5426\u53ef\u89c1\n *\n * @param isVisibleToUser\n */\n", "func_signal": "private void handleOnVisibilityChangedToUser(boolean isVisibleToUser)", "code": "{\n    if (isVisibleToUser) {\n        // \u5bf9\u7528\u6237\u53ef\u89c1\n        if (!mIsLoadedData) {\n            mIsLoadedData = true;\n            onLazyLoadOnce();\n        }\n        onVisibleToUser();\n    } else {\n        // \u5bf9\u7528\u6237\u4e0d\u53ef\u89c1\n        onInvisibleToUser();\n    }\n}", "path": "BGARefreshLayout-Android/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/ui/fragment/BaseFragment.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "// \u5982\u679c\u7b49\u4e8e\u5206\u5272\u7ebf\u7684\u5bbd\u5ea6\u6216\u9ad8\u5ea6\u7684\u8bdd\u53ef\u4ee5\u4e0d\u7528\u91cd\u5199\u8be5\u65b9\u6cd5\n", "func_signal": "@Override\npublic void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)", "code": "{\n    if (parent.getChildAdapterPosition(view) == parent.getAdapter().getItemCount() - 1) {\n        outRect.set(0, 0, 0, 0);\n    } else {\n        outRect.set(0, 0, 0, mDividerDrawable.getIntrinsicHeight());\n    }\n}", "path": "BGARefreshLayout-Android/demo/src/main/java/cn/bingoogolapple/refreshlayout/demo/widget/Divider.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u9690\u85cf\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\uff0c\u5e26\u52a8\u753b\n */\n", "func_signal": "private void hiddenRefreshHeaderView()", "code": "{\n    ValueAnimator animator = ValueAnimator.ofInt(mWholeHeaderView.getPaddingTop(), mMinWholeHeaderViewPaddingTop);\n    animator.setDuration(mRefreshViewHolder.getTopAnimDuration());\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            int paddingTop = (int) animation.getAnimatedValue();\n            mWholeHeaderView.setPadding(0, paddingTop, 0, 0);\n        }\n    });\n    animator.start();\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u6574\u4e2a\u5934\u90e8\u63a7\u4ef6\u662f\u5426\u5df2\u7ecf\u5b8c\u5168\u9690\u85cf\n *\n * @return true\u8868\u793a\u5b8c\u5168\u9690\u85cf\uff0cfalse\u8868\u793a\u6ca1\u6709\u5b8c\u5168\u9690\u85cf\n */\n", "func_signal": "private boolean isWholeHeaderViewCompleteInvisible()", "code": "{\n    if (mCustomHeaderView != null && mIsCustomHeaderViewScrollable) {\n        // 0\u8868\u793ax\uff0c1\u8868\u793ay\n        int[] location = new int[2];\n        getLocationOnScreen(location);\n        int mOnScreenY = location[1];\n\n        mWholeHeaderView.getLocationOnScreen(location);\n        int wholeHeaderViewOnScreenY = location[1];\n        if (wholeHeaderViewOnScreenY + mWholeHeaderView.getMeasuredHeight() <= mOnScreenY) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u5207\u6362\u5230\u6b63\u5728\u5237\u65b0\u72b6\u6001\uff0c\u4f1a\u8c03\u7528delegate\u7684onBGARefreshLayoutBeginRefreshing\u65b9\u6cd5\n */\n", "func_signal": "public void beginRefreshing()", "code": "{\n    if (mCurrentRefreshStatus != RefreshStatus.REFRESHING && mDelegate != null) {\n        mCurrentRefreshStatus = RefreshStatus.REFRESHING;\n        changeRefreshHeaderViewToZero();\n        handleRefreshStatusChanged();\n        mDelegate.onBGARefreshLayoutBeginRefreshing(this);\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u5904\u7406\u624b\u6307\u62ac\u8d77\u4e8b\u4ef6\n *\n * @return true\u8868\u793a\u81ea\u5df1\u6d88\u8017\u6389\u8be5\u4e8b\u4ef6\uff0cfalse\u8868\u793a\u4e0d\u6d88\u8017\u8be5\u4e8b\u4ef6\n */\n", "func_signal": "private boolean handleActionUpOrCancel(MotionEvent event)", "code": "{\n    boolean isReturnTrue = false;\n    // \u5982\u679c\u5f53\u524d\u5934\u90e8\u5237\u65b0\u63a7\u4ef6\u6ca1\u6709\u5b8c\u5168\u9690\u85cf\uff0c\u5219\u9700\u8981\u8fd4\u56detrue\uff0c\u81ea\u5df1\u6d88\u8017ACTION_UP\u4e8b\u4ef6\n    if ((mCustomHeaderView == null || (mCustomHeaderView != null && !mIsCustomHeaderViewScrollable)) && mWholeHeaderView.getPaddingTop() != mMinWholeHeaderViewPaddingTop) {\n        isReturnTrue = true;\n    }\n\n    if (mCurrentRefreshStatus == RefreshStatus.PULL_DOWN || mCurrentRefreshStatus == RefreshStatus.IDLE) {\n        // \u5904\u4e8e\u4e0b\u62c9\u5237\u65b0\u72b6\u6001\uff0c\u677e\u624b\u65f6\u9690\u85cf\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\n        if (mCustomHeaderView == null || (mCustomHeaderView != null && mWholeHeaderView.getPaddingTop() < 0 && mWholeHeaderView.getPaddingTop() > mMinWholeHeaderViewPaddingTop)) {\n            hiddenRefreshHeaderView();\n        }\n        mCurrentRefreshStatus = RefreshStatus.IDLE;\n        handleRefreshStatusChanged();\n    } else if (mCurrentRefreshStatus == RefreshStatus.RELEASE_REFRESH) {\n        // \u5904\u4e8e\u677e\u5f00\u8fdb\u5165\u5237\u65b0\u72b6\u6001\uff0c\u677e\u624b\u65f6\u5b8c\u5168\u663e\u793a\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\uff0c\u8fdb\u5165\u6b63\u5728\u5237\u65b0\u72b6\u6001\n        beginRefreshing();\n    }\n\n    if (mRefreshDownY == -1) {\n        mRefreshDownY = (int) event.getY();\n    }\n    int diffY = (int) event.getY() - mRefreshDownY;\n    if (shouldHandleLoadingMore() && diffY <= 0) {\n        // \u5904\u7406\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\uff0c\u9700\u8981\u8fd4\u56detrue\uff0c\u81ea\u5df1\u6d88\u8017ACTION_UP\u4e8b\u4ef6\n        isReturnTrue = true;\n        beginLoadingMore();\n    }\n\n    mWholeHeaderDownY = -1;\n    mRefreshDownY = -1;\n    return isReturnTrue;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u662f\u5426\u6ee1\u8db3\u5904\u7406\u5237\u65b0\u7684\u6761\u4ef6\n *\n * @return\n */\n", "func_signal": "private boolean shouldHandleRefresh()", "code": "{\n    if (!mPullDownRefreshEnable || mIsLoadingMore || mCurrentRefreshStatus == RefreshStatus.REFRESHING || mRefreshHeaderView == null || mDelegate == null) {\n        return false;\n    }\n\n    return isContentViewToTop();\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6574\u4e2a\u5934\u90e8\u63a7\u4ef6\n */\n", "func_signal": "private void initWholeHeaderView()", "code": "{\n    mWholeHeaderView = new LinearLayout(getContext());\n    mWholeHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n    mWholeHeaderView.setOrientation(LinearLayout.VERTICAL);\n    addView(mWholeHeaderView);\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u91cd\u65b0\u83b7\u53d6\u5d4c\u5957\u7684\u5185\u5bb9\u89c6\u56fe\n */\n", "func_signal": "private void regetNestedContentView()", "code": "{\n    int currentItem = mDirectViewPager.getCurrentItem();\n    PagerAdapter adapter = mDirectViewPager.getAdapter();\n    if (adapter instanceof FragmentPagerAdapter || adapter instanceof FragmentStatePagerAdapter) {\n        Fragment item = (Fragment) adapter.instantiateItem(mDirectViewPager, currentItem);\n        mNestedContentView = item.getView();\n\n        // \u6e05\u7a7a\u4e4b\u524d\u7684\n        mNestedNormalView = null;\n        mNestedAbsListView = null;\n        mNestedRecyclerView = null;\n        mNestedScrollView = null;\n        mNestedWebView = null;\n\n        if (mNestedContentView instanceof AbsListView) {\n            mNestedAbsListView = (AbsListView) mNestedContentView;\n            mNestedAbsListView.setOnScrollListener(mLvOnScrollListener);\n\n            if (!isHeaderViewCompleteInvisible()) {\n                mNestedAbsListView.setSelection(0);\n            }\n        } else if (mNestedContentView instanceof RecyclerView) {\n            mNestedRecyclerView = (RecyclerView) mNestedContentView;\n            mNestedRecyclerView.removeOnScrollListener(mRvOnScrollListener);\n            mNestedRecyclerView.addOnScrollListener(mRvOnScrollListener);\n\n            if (!isHeaderViewCompleteInvisible()) {\n                mNestedRecyclerView.scrollToPosition(0);\n            }\n        } else if (mNestedContentView instanceof ScrollView) {\n            mNestedScrollView = (ScrollView) mNestedContentView;\n\n            if (!isHeaderViewCompleteInvisible()) {\n                mNestedScrollView.scrollTo(mNestedScrollView.getScrollX(), 0);\n            }\n        } else if (mNestedContentView instanceof WebView) {\n            mNestedWebView = (WebView) mNestedContentView;\n\n            if (!isHeaderViewCompleteInvisible()) {\n                mNestedWebView.scrollTo(mNestedWebView.getScrollX(), 0);\n            }\n        } else {\n            mNestedNormalView = mNestedContentView;\n        }\n    } else {\n        throw new IllegalStateException(BGAStickyNavLayout.class.getSimpleName() + \"\u7684\u7b2c\u4e09\u4e2a\u5b50\u63a7\u4ef6\u4e3aViewPager\u65f6\uff0c\u5176adapter\u5fc5\u987b\u662fFragmentPagerAdapter\u6216\u8005FragmentStatePagerAdapter\");\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGAStickyNavLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6RecyclerView\u7684item\u7684topInset\n *\n * @param layoutParams\n * @return\n */\n", "func_signal": "private static int getRecyclerViewItemTopInset(RecyclerView.LayoutParams layoutParams)", "code": "{\n    try {\n        Field field = RecyclerView.LayoutParams.class.getDeclaredField(\"mDecorInsets\");\n        field.setAccessible(true);\n        // \u5f00\u53d1\u8005\u81ea\u5b9a\u4e49\u7684\u6eda\u52a8\u76d1\u542c\u5668\n        Rect decorInsets = (Rect) field.get(layoutParams);\n        return decorInsets.top;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/util/BGARefreshScrollingUtil.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u4e0b\u65b9\u7684\u81ea\u5b9a\u4e49\u63a7\u4ef6\n *\n * @param customHeaderView \u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u4e0b\u65b9\u7684\u81ea\u5b9a\u4e49\u63a7\u4ef6\n * @param scrollable       \u662f\u5426\u53ef\u4ee5\u6eda\u52a8\n */\n", "func_signal": "public void setCustomHeaderView(View customHeaderView, boolean scrollable)", "code": "{\n    if (mCustomHeaderView != null && mCustomHeaderView.getParent() != null) {\n        ViewGroup parent = (ViewGroup) mCustomHeaderView.getParent();\n        parent.removeView(mCustomHeaderView);\n    }\n    mCustomHeaderView = customHeaderView;\n    if (mCustomHeaderView != null) {\n        mCustomHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n        mWholeHeaderView.addView(mCustomHeaderView);\n        mIsCustomHeaderViewScrollable = scrollable;\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u5934\u90e8\u63a7\u4ef6\u662f\u5426\u5df2\u7ecf\u5b8c\u5168\u663e\u793a\n *\n * @return true\u8868\u793a\u5df2\u7ecf\u5b8c\u5168\u663e\u793a\uff0cfalse\u8868\u793a\u6ca1\u6709\u5b8c\u5168\u663e\u793a\n */\n", "func_signal": "private boolean isCustomHeaderViewCompleteVisible()", "code": "{\n    if (mCustomHeaderView != null) {\n        // 0\u8868\u793ax\uff0c1\u8868\u793ay\n        int[] location = new int[2];\n        getLocationOnScreen(location);\n        int mOnScreenY = location[1];\n\n        mCustomHeaderView.getLocationOnScreen(location);\n        int customHeaderViewOnScreenY = location[1];\n        if (mOnScreenY <= customHeaderViewOnScreenY) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n    return true;\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * \u5904\u7406\u4e0b\u62c9\u5237\u65b0\u63a7\u4ef6\u72b6\u6001\u53d8\u5316\n */\n", "func_signal": "private void handleRefreshStatusChanged()", "code": "{\n    switch (mCurrentRefreshStatus) {\n        case IDLE:\n            mRefreshViewHolder.changeToIdle();\n            break;\n        case PULL_DOWN:\n            mRefreshViewHolder.changeToPullDown();\n            break;\n        case RELEASE_REFRESH:\n            mRefreshViewHolder.changeToReleaseRefresh();\n            break;\n        case REFRESHING:\n            mRefreshViewHolder.changeToRefreshing();\n            break;\n        default:\n            break;\n    }\n}", "path": "BGARefreshLayout-Android/library/src/main/java/cn/bingoogolapple/refreshlayout/BGARefreshLayout.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "bingoogolapple/BGARefreshLayout-Android", "stars": 4312, "license": "None", "language": "java", "size": 7561}
{"docstring": "/**\n * You should implement this function to specify whether the given url\n * should be crawled or not (based on your crawling logic).\n */\n", "func_signal": "@Override\npublic boolean shouldVisit(Page referringPage, WebURL url)", "code": "{\n    String href = url.getURL().toLowerCase();\n    // Ignore the url if it has an extension that matches our defined set of image extensions.\n    if (IMAGE_EXTENSIONS.matcher(href).matches()) {\n        numSeenImages.incrementAndGet();\n        return false;\n    }\n\n    // Only accept the url if it is in the \"www.ics.uci.edu\" domain and protocol is \"http\".\n    return href.startsWith(\"https://www.ics.uci.edu/\");\n}", "path": "crawler4j/crawler4j-examples/crawler4j-examples-base/src/test/java/edu/uci/ics/crawler4j/examples/basic/BasicCrawler.java", "commit_date": "2019-02-24 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * You should implement this function to specify whether\n * the given url should be crawled or not (based on your\n * crawling logic).\n */\n", "func_signal": "@Override\npublic boolean shouldVisit(Page referringPage, WebURL url)", "code": "{\n    String href = url.getURL().toLowerCase();\n    return !FILTERS.matcher(href).matches() && href.startsWith(\"https://www.ics.uci.edu/\");\n}", "path": "crawler4j/crawler4j-examples/crawler4j-examples-base/src/test/java/edu/uci/ics/crawler4j/examples/statushandler/StatusHandlerCrawler.java", "commit_date": "2018-09-29 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Please note that in the case of a bad URL, TRUE will be returned\n *\n * @throws InterruptedException\n * @throws IOException\n */\n", "func_signal": "public boolean allows(WebURL webURL) throws IOException, InterruptedException", "code": "{\n    if (!config.isEnabled()) {\n        return true;\n    }\n    try {\n        URL url = new URL(webURL.getURL());\n        String host = getHost(url);\n        String path = url.getPath();\n\n        HostDirectives directives = host2directivesCache.get(host);\n\n        if (directives != null && directives.needsRefetch()) {\n            synchronized (host2directivesCache) {\n                host2directivesCache.remove(host);\n                directives = null;\n            }\n        }\n        if (directives == null) {\n            directives = fetchDirectives(url);\n        }\n        return directives.allows(path);\n    } catch (MalformedURLException e) {\n        logger.error(\"Bad URL in Robots.txt: \" + webURL.getURL(), e);\n    }\n\n    logger.warn(\"RobotstxtServer: default: allow\", webURL.getURL());\n    return true;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/robotstxt/RobotstxtServer.java", "commit_date": "2019-11-01 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Read contents from an entity, with a specified maximum. This is a replacement of\n * EntityUtils.toByteArray because that function does not impose a maximum size.\n *\n * @param entity The entity from which to read\n * @param maxBytes The maximum number of bytes to read\n * @return A byte array containing maxBytes or fewer bytes read from the entity\n *\n * @throws IOException Thrown when reading fails for any reason\n */\n", "func_signal": "protected byte[] toByteArray(HttpEntity entity, int maxBytes) throws IOException", "code": "{\n    if (entity == null) {\n        return new byte[0];\n    }\n    try (InputStream is = entity.getContent()) {\n        int size = (int) entity.getContentLength();\n        int readBufferLength = size;\n\n        if (readBufferLength <= 0) {\n            readBufferLength = 4096;\n        }\n        // in case when the maxBytes is less than the actual page size\n        readBufferLength = Math.min(readBufferLength, maxBytes);\n\n        // We allocate the buffer with either the actual size of the entity (if available)\n        // or with the default 4KiB if the server did not return a value to avoid allocating\n        // the full maxBytes (for the cases when the actual size will be smaller than maxBytes).\n        ByteArrayBuffer buffer = new ByteArrayBuffer(readBufferLength);\n\n        byte[] tmpBuff = new byte[4096];\n        int dataLength;\n\n        while ((dataLength = is.read(tmpBuff)) != -1) {\n            if (maxBytes > 0 && (buffer.length() + dataLength) > maxBytes) {\n                truncated = true;\n                dataLength = maxBytes - buffer.length();\n            }\n            buffer.append(tmpBuff, 0, dataLength);\n            if (truncated) {\n                break;\n            }\n        }\n        return buffer.toByteArray();\n    }\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/crawler/Page.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/*\n * Returns true if specified string is a valid scheme name.\n */\n", "func_signal": "private static boolean isValidScheme(final String scheme)", "code": "{\n    final int length = scheme.length();\n    if (length < 1) {\n        return false;\n    }\n    char c = scheme.charAt(0);\n    if (!Character.isLetter(c)) {\n        return false;\n    }\n    for (int i = 1; i < length; i++) {\n        c = scheme.charAt(i);\n        if (!Character.isLetterOrDigit(c) && (c != '.') && (c != '+') && (c != '-')) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Parses a given specification using the algorithm depicted in\n * <a href=\"http://www.faqs.org/rfcs/rfc1808.html\">RFC1808</a>:\n *\n * Section 2.4: Parsing a URL\n *\n *   An accepted method for parsing URLs is useful to clarify the\n *   generic-RL syntax of Section 2.2 and to describe the algorithm for\n *   resolving relative URLs presented in Section 4. This section\n *   describes the parsing rules for breaking down a URL (relative or\n *   absolute) into the component parts described in Section 2.1.  The\n *   rules assume that the URL has already been separated from any\n *   surrounding text and copied to a \"parse string\". The rules are\n *   listed in the order in which they would be applied by the parser.\n *\n * @param spec The specification to parse.\n * @return the parsed specification.\n */\n", "func_signal": "private static Url parseUrl(final String spec)", "code": "{\n    final Url url = new Url();\n    int startIndex = 0;\n    int endIndex = spec.length();\n\n    // Section 2.4.1: Parsing the Fragment Identifier\n    //\n    //   If the parse string contains a crosshatch \"#\" character, then the\n    //   substring after the first (left-most) crosshatch \"#\" and up to the\n    //   end of the parse string is the <fragment> identifier. If the\n    //   crosshatch is the last character, or no crosshatch is present, then\n    //   the fragment identifier is empty. The matched substring, including\n    //   the crosshatch character, is removed from the parse string before\n    //   continuing.\n    //\n    //   Note that the fragment identifier is not considered part of the URL.\n    //   However, since it is often attached to the URL, parsers must be able\n    //   to recognize and set aside fragment identifiers as part of the\n    //   process.\n    final int crosshatchIndex = indexOf(spec, '#', startIndex, endIndex);\n\n    if (crosshatchIndex >= 0) {\n        url.fragment = spec.substring(crosshatchIndex + 1, endIndex);\n        endIndex = crosshatchIndex;\n    }\n    // Section 2.4.2: Parsing the Scheme\n    //\n    //   If the parse string contains a colon \":\" after the first character\n    //   and before any characters not allowed as part of a scheme name (i.e.,\n    //   any not an alphanumeric, plus \"+\", period \".\", or hyphen \"-\"), the\n    //   <scheme> of the URL is the substring of characters up to but not\n    //   including the first colon. These characters and the colon are then\n    //   removed from the parse string before continuing.\n    final int colonIndex = indexOf(spec, ':', startIndex, endIndex);\n\n    if (colonIndex > 0) {\n        final String scheme = spec.substring(startIndex, colonIndex);\n        if (isValidScheme(scheme)) {\n            url.scheme = scheme;\n            startIndex = colonIndex + 1;\n        }\n    }\n    // Section 2.4.3: Parsing the Network Location/Login\n    //\n    //   If the parse string begins with a double-slash \"//\", then the\n    //   substring of characters after the double-slash and up to, but not\n    //   including, the next slash \"/\" character is the network location/login\n    //   (<net_loc>) of the URL. If no trailing slash \"/\" is present, the\n    //   entire remaining parse string is assigned to <net_loc>. The double-\n    //   slash and <net_loc> are removed from the parse string before\n    //   continuing.\n    //\n    // Note: We also accept a question mark \"?\" or a semicolon \";\" character as\n    //       delimiters for the network location/login (<net_loc>) of the URL.\n    final int locationStartIndex;\n    int locationEndIndex;\n\n    if (spec.startsWith(\"//\", startIndex)) {\n        locationStartIndex = startIndex + 2;\n        locationEndIndex = indexOf(spec, '/', locationStartIndex, endIndex);\n        if (locationEndIndex >= 0) {\n            startIndex = locationEndIndex;\n        }\n    } else {\n        locationStartIndex = -1;\n        locationEndIndex = -1;\n    }\n    // Section 2.4.4: Parsing the Query Information\n    //\n    //   If the parse string contains a question mark \"?\" character, then the\n    //   substring after the first (left-most) question mark \"?\" and up to the\n    //   end of the parse string is the <query> information. If the question\n    //   mark is the last character, or no question mark is present, then the\n    //   query information is empty. The matched substring, including the\n    //   question mark character, is removed from the parse string before\n    //   continuing.\n    final int questionMarkIndex = indexOf(spec, '?', startIndex, endIndex);\n\n    if (questionMarkIndex >= 0) {\n        if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n            // The substring of characters after the double-slash and up to, but not\n            // including, the question mark \"?\" character is the network location/login\n            // (<net_loc>) of the URL.\n            locationEndIndex = questionMarkIndex;\n            startIndex = questionMarkIndex;\n        }\n        url.query = spec.substring(questionMarkIndex + 1, endIndex);\n        endIndex = questionMarkIndex;\n    }\n    // Section 2.4.5: Parsing the Parameters\n    //\n    //   If the parse string contains a semicolon \";\" character, then the\n    //   substring after the first (left-most) semicolon \";\" and up to the end\n    //   of the parse string is the parameters (<params>). If the semicolon\n    //   is the last character, or no semicolon is present, then <params> is\n    //   empty. The matched substring, including the semicolon character, is\n    //   removed from the parse string before continuing.\n    final int semicolonIndex = indexOf(spec, ';', startIndex, endIndex);\n\n    if (semicolonIndex >= 0) {\n        if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n            // The substring of characters after the double-slash and up to, but not\n            // including, the semicolon \";\" character is the network location/login\n            // (<net_loc>) of the URL.\n            locationEndIndex = semicolonIndex;\n            startIndex = semicolonIndex;\n        }\n        url.parameters = spec.substring(semicolonIndex + 1, endIndex);\n        endIndex = semicolonIndex;\n    }\n    // Section 2.4.6: Parsing the Path\n    //\n    //   After the above steps, all that is left of the parse string is the\n    //   URL <path> and the slash \"/\" that may precede it. Even though the\n    //   initial slash is not part of the URL path, the parser must remember\n    //   whether or not it was present so that later processes can\n    //   differentiate between relative and absolute paths. Often this is\n    //   done by simply storing the preceding slash along with the path.\n    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n        // The entire remaining parse string is assigned to the network\n        // location/login (<net_loc>) of the URL.\n        locationEndIndex = endIndex;\n    } else if (startIndex < endIndex) {\n        url.path = spec.substring(startIndex, endIndex);\n    }\n    // Set the network location/login (<net_loc>) of the URL.\n    if ((locationStartIndex >= 0) && (locationEndIndex >= 0)) {\n        url.location = spec.substring(locationStartIndex, locationEndIndex);\n    }\n    return url;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Returns the index within the specified string of the first occurrence of\n * the specified search character.\n *\n * @param s the string to search\n * @param searchChar the character to search for\n * @param beginIndex the index at which to start the search\n * @param endIndex the index at which to stop the search\n * @return the index of the first occurrence of the character in the string or <tt>-1</tt>\n */\n", "func_signal": "private static int indexOf(final String s, final char searchChar, final int beginIndex,\n                           final int endIndex)", "code": "{\n    for (int i = beginIndex; i < endIndex; i++) {\n        if (s.charAt(i) == searchChar) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Returns a string representation of the <tt>Url</tt> object.\n *\n * @return a string representation of the <tt>Url</tt> object.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    final StringBuilder sb = new StringBuilder();\n\n    if (scheme != null) {\n        sb.append(scheme);\n        sb.append(':');\n    }\n    if (location != null) {\n        sb.append(\"//\");\n        sb.append(location);\n    }\n    if (path != null) {\n        sb.append(path);\n    }\n    if (parameters != null) {\n        sb.append(';');\n        sb.append(parameters);\n    }\n    if (query != null) {\n        sb.append('?');\n        sb.append(query);\n    }\n    if (fragment != null) {\n        sb.append('#');\n        sb.append(fragment);\n    }\n    return sb.toString();\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Constructor\n *\n * @param username Username used for Authentication\n * @param password Password used for Authentication\n * @param loginUrl Full Login URL beginning with \"http...\" till the end of the url\n *\n * @throws MalformedURLException Make sure your URL is valid\n */\n", "func_signal": "public BasicAuthInfo(String username, String password, String loginUrl)\n    throws MalformedURLException", "code": "{\n    super(AuthenticationType.BASIC_AUTHENTICATION, MethodType.GET, loginUrl, username,\n          password);\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/crawler/authentication/BasicAuthInfo.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * This constructor should only be used by extending classes\n *\n * @param authenticationType Pick the one which matches your authentication\n * @param httpMethod Choose POST / GET\n * @param loginUrl Full URL of the login page\n * @param username Username for Authentication\n * @param password Password for Authentication\n *\n * @throws MalformedURLException Make sure your URL is valid\n */\n", "func_signal": "protected AuthInfo(AuthenticationType authenticationType, MethodType httpMethod,\n                   String loginUrl, String username, String password)\n        throws MalformedURLException", "code": "{\n    this.authenticationType = authenticationType;\n    this.httpMethod = httpMethod;\n    URL url = new URL(loginUrl);\n    this.protocol = url.getProtocol();\n    this.host = url.getHost();\n    this.port =\n            url.getPort() == -1 ? url.getDefaultPort() : url.getPort();\n    this.loginTarget = url.getFile();\n\n    this.username = username;\n    this.password = password;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/crawler/authentication/AuthInfo.java", "commit_date": "2018-09-29 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "//www.ics.uci.edu/\";\n", "func_signal": "@Override\n    public boolean shouldVisit(Page referringPage, WebURL url)", "code": "{\n        String href = url.getURL().toLowerCase();\n        return !FILTERS.matcher(href).matches() && href.startsWith(DOMAIN);\n    }", "path": "crawler4j/crawler4j-examples/crawler4j-examples-base/src/test/java/edu/uci/ics/crawler4j/examples/shutdown/BasicCrawler.java", "commit_date": "2018-09-29 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Loads the content of this page from a fetched HttpEntity.\n *\n * @param entity HttpEntity\n * @param maxBytes The maximum number of bytes to read\n * @throws IOException when load fails\n */\n", "func_signal": "public void load(HttpEntity entity, int maxBytes) throws IOException", "code": "{\n\n    contentType = null;\n    Header type = entity.getContentType();\n    if (type != null) {\n        contentType = type.getValue();\n    }\n\n    contentEncoding = null;\n    Header encoding = entity.getContentEncoding();\n    if (encoding != null) {\n        contentEncoding = encoding.getValue();\n    }\n\n    Charset charset;\n    try {\n        charset = ContentType.getOrDefault(entity).getCharset();\n    } catch (Exception e) {\n        logger.warn(\"parse charset failed: {}\", e.getMessage());\n        charset = Charset.forName(\"UTF-8\");\n    }\n\n    if (charset != null) {\n        contentCharset = charset.displayName();\n    }\n\n    contentData = toByteArray(entity, maxBytes);\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/crawler/Page.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Resolves a given relative URL against a base URL using the algorithm\n * depicted in <a href=\"http://www.faqs.org/rfcs/rfc1808.html\">RFC1808</a>:\n *\n * Section 4: Resolving Relative URLs\n *\n *   This section describes an example algorithm for resolving URLs within\n *   a context in which the URLs may be relative, such that the result is\n *   always a URL in absolute form. Although this algorithm cannot\n *   guarantee that the resulting URL will equal that intended by the\n *   original author, it does guarantee that any valid URL (relative or\n *   absolute) can be consistently transformed to an absolute form given a\n *   valid base URL.\n *\n * @param baseUrl     The base URL in which to resolve the specification.\n * @param relativeUrl The relative URL to resolve against the base URL.\n * @return the resolved specification.\n */\n", "func_signal": "private static Url resolveUrl(final Url baseUrl, final String relativeUrl)", "code": "{\n    final Url url = parseUrl(relativeUrl);\n    // Step 1: The base URL is established according to the rules of\n    //         Section 3.  If the base URL is the empty string (unknown),\n    //         the embedded URL is interpreted as an absolute URL and\n    //         we are done.\n    if (baseUrl == null) {\n        return url;\n    }\n    // Step 2: Both the base and embedded URLs are parsed into their\n    //         component parts as described in Section 2.4.\n    //      a) If the embedded URL is entirely empty, it inherits the\n    //         entire base URL (i.e., is set equal to the base URL)\n    //         and we are done.\n    if (relativeUrl.isEmpty()) {\n        return new Url(baseUrl);\n    }\n    //      b) If the embedded URL starts with a scheme name, it is\n    //         interpreted as an absolute URL and we are done.\n    if (url.scheme != null) {\n        return url;\n    }\n    //      c) Otherwise, the embedded URL inherits the scheme of\n    //         the base URL.\n    url.scheme = baseUrl.scheme;\n    // Step 3: If the embedded URL's <net_loc> is non-empty, we skip to\n    //         Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n    //         (if any) of the base URL.\n    if (url.location != null) {\n        return url;\n    }\n    url.location = baseUrl.location;\n    // Step 4: If the embedded URL path is preceded by a slash \"/\", the\n    //         path is not relative and we skip to Step 7.\n    if ((url.path != null) && ((!url.path.isEmpty()) && (url.path.charAt(0) == '/'))) {\n        url.path = removeLeadingSlashPoints(url.path);\n        return url;\n    }\n    // Step 5: If the embedded URL path is empty (and not preceded by a\n    //         slash), then the embedded URL inherits the base URL path,\n    //         and\n    if (url.path == null) {\n        url.path = baseUrl.path;\n        //  a) if the embedded URL's <params> is non-empty, we skip to\n        //     step 7; otherwise, it inherits the <params> of the base\n        //     URL (if any) and\n        if (url.parameters != null) {\n            return url;\n        }\n        url.parameters = baseUrl.parameters;\n        //  b) if the embedded URL's <query> is non-empty, we skip to\n        //     step 7; otherwise, it inherits the <query> of the base\n        //     URL (if any) and we skip to step 7.\n        if (url.query != null) {\n            return url;\n        }\n        url.query = baseUrl.query;\n        return url;\n    }\n    // Step 6: The last segment of the base URL's path (anything\n    //         following the rightmost slash \"/\", or the entire path if no\n    //         slash is present) is removed and the embedded URL's path is\n    //         appended in its place.  The following operations are\n    //         then applied, in order, to the new path:\n    final String basePath = baseUrl.path;\n    String path = \"\";\n\n    if (basePath != null) {\n        final int lastSlashIndex = basePath.lastIndexOf('/');\n\n        if (lastSlashIndex >= 0) {\n            path = basePath.substring(0, lastSlashIndex + 1);\n        }\n    } else {\n        path = \"/\";\n    }\n    path = path.concat(url.path);\n    //      a) All occurrences of \"./\", where \".\" is a complete path\n    //         segment, are removed.\n    int pathSegmentIndex;\n\n    while ((pathSegmentIndex = path.indexOf(\"/./\")) >= 0) {\n        path = path.substring(0, pathSegmentIndex + 1)\n                   .concat(path.substring(pathSegmentIndex + 3));\n    }\n    //      b) If the path ends with \".\" as a complete path segment,\n    //         that \".\" is removed.\n    if (path.endsWith(\"/.\")) {\n        path = path.substring(0, path.length() - 1);\n    }\n    //      c) All occurrences of \"<segment>/../\", where <segment> is a\n    //         complete path segment not equal to \"..\", are removed.\n    //         Removal of these path segments is performed iteratively,\n    //         removing the leftmost matching pattern on each iteration,\n    //         until no matching pattern remains.\n    while ((pathSegmentIndex = path.indexOf(\"/../\")) > 0) {\n        final String pathSegment = path.substring(0, pathSegmentIndex);\n        final int slashIndex = pathSegment.lastIndexOf('/');\n\n        if (slashIndex < 0) {\n            continue;\n        }\n        if (!\"..\".equals(pathSegment.substring(slashIndex))) {\n            path =\n                path.substring(0, slashIndex + 1).concat(path.substring(pathSegmentIndex + 4));\n        }\n    }\n    //      d) If the path ends with \"<segment>/..\", where <segment> is a\n    //         complete path segment not equal to \"..\", that\n    //         \"<segment>/..\" is removed.\n    if (path.endsWith(\"/..\")) {\n        final String pathSegment = path.substring(0, path.length() - 3);\n        final int slashIndex = pathSegment.lastIndexOf('/');\n\n        if (slashIndex >= 0) {\n            path = path.substring(0, slashIndex + 1);\n        }\n    }\n\n    path = removeLeadingSlashPoints(path);\n\n    url.path = path;\n    // Step 7: The resulting URL components, including any inherited from\n    //         the base URL, are recombined to give the absolute form of\n    //         the embedded URL.\n    return url;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Returns the docid of an already seen url.\n *\n * @param url the URL for which the docid is returned.\n * @return the docid of the url if it is seen before. Otherwise -1 is returned.\n */\n", "func_signal": "public int getDocId(String url)", "code": "{\n    synchronized (mutex) {\n        OperationStatus result = null;\n        DatabaseEntry value = new DatabaseEntry();\n        try {\n            DatabaseEntry key = new DatabaseEntry(url.getBytes());\n            result = docIDsDB.get(null, key, value, null);\n\n        } catch (RuntimeException e) {\n            if (config.isHaltOnError()) {\n                throw e;\n            } else {\n                logger.error(\"Exception thrown while getting DocID\", e);\n                return -1;\n            }\n        }\n\n        if ((result == OperationStatus.SUCCESS) && (value.getData().length > 0)) {\n            return Util.byteArray2Int(value.getData());\n        }\n\n        return -1;\n    }\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/frontier/DocIDServer.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Takes a query string, separates the constituent name-value pairs, and\n * stores them in a LinkedHashMap ordered by their original order.\n *\n * @return Null if there is no query string.\n */\n", "func_signal": "private static Map<String, String> createParameterMap(String queryString)", "code": "{\n    if ((queryString == null) || queryString.isEmpty()) {\n        return null;\n    }\n\n    final String[] pairs = queryString.split(\"&\");\n    final Map<String, String> params = new LinkedHashMap<>(pairs.length);\n\n    for (final String pair : pairs) {\n        if (pair.isEmpty()) {\n            continue;\n        }\n\n        String[] tokens = pair.split(\"=\", 2);\n        switch (tokens.length) {\n            case 1:\n                if (pair.charAt(0) == '=') {\n                    params.put(\"\", tokens[0]);\n                } else {\n                    params.put(tokens[0], \"\");\n                }\n                break;\n            case 2:\n                params.put(tokens[0], tokens[1]);\n                break;\n        }\n    }\n    return new LinkedHashMap<>(params);\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/URLCanonicalizer.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Canonicalize the query string.\n *\n * @param paramsMap\n *            Parameter map whose name-value pairs are in order of insertion.\n * @param charset\n *            Charset of html page\n * @return Canonical form of query string.\n * @throws UnsupportedEncodingException\n */\n", "func_signal": "private static String canonicalize(Map<String, String> paramsMap, Charset charset)\n        throws UnsupportedEncodingException", "code": "{\n    if ((paramsMap == null) || paramsMap.isEmpty()) {\n        return \"\";\n    }\n\n    final StringBuilder sb = new StringBuilder(100);\n    for (Map.Entry<String, String> pair : paramsMap.entrySet()) {\n        final String key = pair.getKey().toLowerCase();\n        if (\"jsessionid\".equals(key) || \"phpsessid\".equals(key) || \"aspsessionid\".equals(key)) {\n            continue;\n        }\n        if (sb.length() > 0) {\n            sb.append('&');\n        }\n        sb.append(percentEncodeRfc3986(pair.getKey(), charset));\n        if (!pair.getValue().isEmpty()) {\n            sb.append('=');\n            sb.append(percentEncodeRfc3986(pair.getValue(), charset));\n        }\n    }\n    return sb.toString();\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/URLCanonicalizer.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * This function is called when a page is fetched and ready to be processed\n * by your program.\n */\n", "func_signal": "@Override\npublic void visit(Page page)", "code": "{\n    int docid = page.getWebURL().getDocid();\n    String url = page.getWebURL().getURL();\n    String domain = page.getWebURL().getDomain();\n    String path = page.getWebURL().getPath();\n    String subDomain = page.getWebURL().getSubDomain();\n    String parentUrl = page.getWebURL().getParentUrl();\n    String anchor = page.getWebURL().getAnchor();\n\n    logger.debug(\"Docid: {}\", docid);\n    logger.info(\"URL: {}\", url);\n    logger.debug(\"Domain: '{}'\", domain);\n    logger.debug(\"Sub-domain: '{}'\", subDomain);\n    logger.debug(\"Path: '{}'\", path);\n    logger.debug(\"Parent page: {}\", parentUrl);\n    logger.debug(\"Anchor text: {}\", anchor);\n\n    if (page.getParseData() instanceof HtmlParseData) {\n        HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();\n        String text = htmlParseData.getText();\n        String html = htmlParseData.getHtml();\n        Set<WebURL> links = htmlParseData.getOutgoingUrls();\n\n        logger.debug(\"Text length: {}\", text.length());\n        logger.debug(\"Html length: {}\", html.length());\n        logger.debug(\"Number of outgoing links: {}\", links.size());\n    }\n\n    Header[] responseHeaders = page.getFetchResponseHeaders();\n    if (responseHeaders != null) {\n        logger.debug(\"Response headers:\");\n        for (Header header : responseHeaders) {\n            logger.debug(\"\\t{}: {}\", header.getName(), header.getValue());\n        }\n    }\n\n    logger.debug(\"=============\");\n}", "path": "crawler4j/crawler4j-examples/crawler4j-examples-base/src/test/java/edu/uci/ics/crawler4j/examples/basic/BasicCrawler.java", "commit_date": "2019-02-24 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Creates a <tt>Url</tt> object from the specified\n * <tt>Url</tt> object.\n *\n * @param url a <tt>Url</tt> object.\n */\n", "func_signal": "private Url(Url url)", "code": "{\n    scheme = url.scheme;\n    location = url.location;\n    path = url.path;\n    parameters = url.parameters;\n    query = url.query;\n    fragment = url.fragment;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * \"/..\" at the beginning should be removed as browsers do (not in RFC)\n */\n", "func_signal": "private static String removeLeadingSlashPoints(String path)", "code": "{\n    while (path.startsWith(\"/..\")) {\n        path = path.substring(3);\n    }\n\n    return path;\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * Resolves a given relative URL against a base URL. See\n * <a href=\"http://www.faqs.org/rfcs/rfc1808.html\">RFC1808</a>\n * Section 4 for more details.\n *\n * @param baseUrl     The base URL in which to resolve the specification.\n * @param relativeUrl The relative URL to resolve against the base URL.\n * @return the resolved specification.\n */\n", "func_signal": "public static String resolveUrl(String baseUrl, String relativeUrl)", "code": "{\n    if (baseUrl == null) {\n        throw new IllegalArgumentException(\"Base URL must not be null\");\n    }\n\n    if (relativeUrl == null) {\n        throw new IllegalArgumentException(\"Relative URL must not be null\");\n    }\n\n    final Url url = resolveUrl(parseUrl(baseUrl.trim()), relativeUrl.trim());\n    return url.toString();\n}", "path": "crawler4j/crawler4j/src/main/java/edu/uci/ics/crawler4j/url/UrlResolver.java", "commit_date": "2017-08-18 00:00:00", "repo_name": "yasserg/crawler4j", "stars": 4475, "license": "apache-2.0", "language": "java", "size": 1186}
{"docstring": "/**\n * JDK\u9ed8\u8ba4\u503c60\u79d2\u592a\u9ad8\uff0c\u5982\u9ad8\u8fbe1000\u7ebf\u7a0b\u65f6\uff0c\u8981\u4f4e\u4e8e16QPS\u65f6\u624d\u4f1a\u5f00\u59cb\u56de\u6536\u7ebf\u7a0b, \u56e0\u6b64\u6539\u4e3a\u9ed8\u8ba410\u79d2.\n */\n", "func_signal": "public CachedThreadPoolBuilder setKeepAliveSecs(int keepAliveSecs)", "code": "{\n\tthis.keepAliveSecs = keepAliveSecs;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u8ba1\u7b97\u5355\u4f4d\u65f6\u95f4\u5185\u7684metrics\u503c, \u5b58\u5165\u8be5Metrics\u7684Snapshot\u4e2d\uff0c\u5e76\u6e05\u96f6\u539f\u59cb\u6570\u636e.\n */\n", "func_signal": "public CounterMetric calculateMetric()", "code": "{\n\tlong latestCount = counter.getAndSet(0);\n\tlong currentTime = clock.getCurrentTime();\n\n\tCounterMetric metric = new CounterMetric();\n\n\ttotalCount += latestCount;\n\tlong totalElapsed = currentTime - startTime;\n\tmetric.avgRate = (totalCount * 1000) / totalElapsed;\n\n\tmetric.latestCount = latestCount;\n\tmetric.totalCount = totalCount;\n\n\tlong elapsed = currentTime - lastReportTime;\n\tif (elapsed > 0) {\n\t\tmetric.latestRate = (latestCount * 1000) / elapsed;\n\t}\n\n\tlastReportTime = currentTime;\n\n\tlatestMetric = metric;\n\n\treturn metric;\n}", "path": "springside4/modules/metrics/src/main/java/org/springside/modules/metrics/metric/Counter.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * Max\u9ed8\u8ba4Integer.MAX_VALUE\u7684\uff0c\u5efa\u8bae\u8bbe\u7f6e\n */\n", "func_signal": "public CachedThreadPoolBuilder setMaxSize(int maxSize)", "code": "{\n\tthis.maxSize = maxSize;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0d\u8bbe\u7f6e\u65f6\u9ed8\u8ba4\u4e3a-1, \u4f7f\u7528\u65e0\u9650\u957f\u7684LinkedBlockingQueue.\n * \n * \u4e3a\u6b63\u6570\u65f6\u4f7f\u7528ArrayBlockingQueue.\n */\n", "func_signal": "public FixedThreadPoolBuilder setQueueSize(int queueSize)", "code": "{\n\tthis.queueSize = queueSize;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4ee5\u62fc\u63a5\u8def\u5f84\u540d\n */\n", "func_signal": "public static String concat(String baseName, String... appendName)", "code": "{\n\tif (appendName.length == 0) {\n\t\treturn baseName;\n\t}\n\n\tStringBuilder concatName = new StringBuilder();\n\tif (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {\n\t\tconcatName.append(baseName).append(appendName[0]);\n\t} else {\n\t\tconcatName.append(baseName).append(Platforms.FILE_PATH_SEPARATOR_CHAR).append(appendName[0]);\n\t}\n\n\tif (appendName.length > 1) {\n\t\tfor (int i = 1; i < appendName.length; i++) {\n\t\t\tconcatName.append(Platforms.FILE_PATH_SEPARATOR_CHAR).append(appendName[i]);\n\t\t}\n\t}\n\n\treturn concatName.toString();\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/io/FilePathUtil.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * Pool\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a1\uff0c\u5373singleThreadPool\n */\n", "func_signal": "public FixedThreadPoolBuilder setPoolSize(int poolSize)", "code": "{\n\tValidate.isTrue(poolSize >= 1);\n\tthis.poolSize = poolSize;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadNamePrefix\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public CachedThreadPoolBuilder setThreadFactory(ThreadFactory threadFactory)", "code": "{\n\tthis.threadFactory = threadFactory;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadNamePrefix\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public ScheduledThreadPoolBuilder setThreadFactory(ThreadFactory threadFactory)", "code": "{\n\tthis.threadFactory = threadFactory;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadFactory\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public QueuableCachedThreadPoolBuilder setThreadNamePrefix(String threadNamePrefix)", "code": "{\n\tthis.threadNamePrefix = threadNamePrefix;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6563\u5217, \u652f\u6301md5\u4e0esha1\u7b97\u6cd5.\n */\n", "func_signal": "private static byte[] digest(@NotNull byte[] input, MessageDigest digest, byte[] salt, int iterations)", "code": "{\n\t// \u5e26\u76d0\n\tif (salt != null) {\n\t\tdigest.update(salt);\n\t}\n\n\t// \u7b2c\u4e00\u6b21\u6563\u5217\n\tbyte[] result = digest.digest(input);\n\n\t// \u5982\u679c\u8fed\u4ee3\u6b21\u6570>1\uff0c\u8fdb\u4e00\u6b65\u8fed\u4ee3\u6563\u5217\n\tfor (int i = 1; i < iterations; i++) {\n\t\tdigest.reset();\n\t\tresult = digest.digest(result);\n\t}\n\n\treturn result;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/text/HashUtil.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadFactory\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public CachedThreadPoolBuilder setThreadNamePrefix(String threadNamePrefix)", "code": "{\n\tthis.threadNamePrefix = threadNamePrefix;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0eThreadFactory\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public FixedThreadPoolBuilder setThreadNamePrefix(String threadNamePrefix)", "code": "{\n\tthis.threadNamePrefix = threadNamePrefix;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4f18\u5148\u4f7f\u7528threadFactory\uff0c\u5426\u5219\u5982\u679cthreadNamePrefix\u4e0d\u4e3a\u7a7a\u5219\u4f7f\u7528\u81ea\u5efaThreadFactory\uff0c\u5426\u5219\u4f7f\u7528defaultThreadFactory\n */\n", "func_signal": "private static ThreadFactory createThreadFactory(ThreadFactory threadFactory, String threadNamePrefix,\n\t\tBoolean daemon)", "code": "{\n\tif (threadFactory != null) {\n\t\treturn threadFactory;\n\t}\n\n\tif (threadNamePrefix != null) {\n\t\tif (daemon != null) {\n\t\t\treturn ThreadPoolUtil.buildThreadFactory(threadNamePrefix, daemon);\n\t\t} else {\n\t\t\treturn ThreadPoolUtil.buildThreadFactory(threadNamePrefix);\n\t\t}\n\t}\n\n\treturn Executors.defaultThreadFactory();\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadNamePrefix\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n */\n", "func_signal": "public QueuableCachedThreadPoolBuilder setThreadFactory(ThreadFactory threadFactory)", "code": "{\n\tthis.threadFactory = threadFactory;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * LinkedQueue\u957f\u5ea6, \u9ed8\u8ba4100\n */\n", "func_signal": "public QueuableCachedThreadPoolBuilder setQueueSize(int queueSize)", "code": "{\n\tthis.queueSize = queueSize;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u5728Windows\u73af\u5883\u91cc\uff0c\u517c\u5bb9Windows\u4e0a\u7684\u8def\u5f84\u5206\u5272\u7b26\uff0c\u5c06 '/' \u8f6c\u56de '\\'\n */\n", "func_signal": "public static String normalizePath(String path)", "code": "{\n\tif (Platforms.FILE_PATH_SEPARATOR_CHAR == Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR\n\t\t\t&& StringUtils.indexOf(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR) != -1) {\n\t\treturn StringUtils.replaceChars(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR,\n\t\t\t\tPlatforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR);\n\t}\n\treturn path;\n\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/io/FilePathUtil.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u4e0ethreadFactory\u4e92\u65a5, \u4f18\u5148\u4f7f\u7528ThreadFactory\n * \n * \u9ed8\u8ba4\u4e3aNULL\uff0c\u4e0d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f7f\u7528JDK\u7684\u9ed8\u8ba4\u503c.\n */\n", "func_signal": "public FixedThreadPoolBuilder setDaemon(Boolean daemon)", "code": "{\n\tthis.daemon = daemon;\n\treturn this;\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/concurrent/threadpool/ThreadPoolBuilder.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884ccrc32\u6563\u5217\u8fd4\u56deint, \u8fd4\u56de\u503c\u6709\u53ef\u80fd\u662f\u8d1f\u6570.\n * \n * Guava\u4e5f\u6709crc32\u5b9e\u73b0, \u4f46\u8fd4\u56de\u503c\u65e0\u6cd5\u8fd4\u56delong\uff0c\u6240\u4ee5\u7edf\u4e00\u4f7f\u7528JDK\u9ed8\u8ba4\u5b9e\u73b0\n */\n", "func_signal": "public static int crc32AsInt(@NotNull byte[] input)", "code": "{\n\tCRC32 crc32 = new CRC32();\n\tcrc32.update(input);\n\t// CRC32 \u53ea\u662f 32bit int\uff0c\u4e3a\u4e86CheckSum\u63a5\u53e3\u5f3a\u8f6c\u6210long\uff0c\u6b64\u5904\u518d\u6b21\u8f6c\u56de\u6765\n\treturn (int) crc32.getValue();\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/text/HashUtil.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u91cd\u8bbecounter\uff0c\u53ef\u6e05\u9664\u5386\u53f2\u7684totalCount\u548cavgRate\n */\n", "func_signal": "public void reset()", "code": "{\n\tlatestMetric = new CounterMetric();\n\tcounter.set(0);\n\ttotalCount = 0L;\n\tstartTime = clock.getCurrentTime();\n\tlastReportTime = startTime;\n}", "path": "springside4/modules/metrics/src/main/java/org/springside/modules/metrics/metric/Counter.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * \u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884ccrc32\u6563\u5217\uff0c\u4e0ephp\u517c\u5bb9\uff0c\u572864bit\u7cfb\u7edf\u4e0b\u8fd4\u56de\u6c38\u8fdc\u662f\u6b63\u6570\u7684long\n * \n * Guava\u4e5f\u6709crc32\u5b9e\u73b0, \u4f46\u8fd4\u56de\u503c\u65e0\u6cd5\u8fd4\u56delong\uff0c\u6240\u4ee5\u7edf\u4e00\u4f7f\u7528JDK\u9ed8\u8ba4\u5b9e\u73b0\n */\n", "func_signal": "public static long crc32AsLong(@NotNull byte[] input)", "code": "{\n\tCRC32 crc32 = new CRC32();\n\tcrc32.update(input);\n\treturn crc32.getValue();\n}", "path": "springside4/modules/utils/src/main/java/org/springside/modules/utils/text/HashUtil.java", "commit_date": "2018-01-25 00:00:00", "repo_name": "springside/springside4", "stars": 5739, "license": "apache-2.0", "language": "java", "size": 4837}
{"docstring": "/**\n * Set the margin between content view and Dialog border.\n * @param left The left margin size in pixels.\n * @param top The top margin size in pixels.\n * @param right The right margin size in pixels.\n * @param bottom The bottom margin size in pixels.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog contentMargin(int left, int top, int right, int bottom)", "code": "{\n    mCardView.setContentMargin(left, top, right, bottom);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the background drawable of all action buttons.\n * @param id The resourceId of drawable.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog actionBackground(int id)", "code": "{\n    positiveActionBackground(id);\n    negativeActionBackground(id);\n    neutralActionBackground(id);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color, size, style of neutral action button from the specified TextAppearance resource.\n * @param resId The resourceId value.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog neutralActionTextAppearance(int resId)", "code": "{\n    mNeutralAction.setTextAppearance(getContext(), resId);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the content view of this Dialog.\n * @param v The content view.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog contentView(View v)", "code": "{\n    if(mContent != v) {\n        if(mContent != null)\n            mCardView.removeView(mContent);\n\n        mContent = v;\n    }\n\n    if(mContent != null)\n        mCardView.addView(mContent);\n\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the text of positive action button.\n * @param action\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog positiveAction(CharSequence action)", "code": "{\n    mPositiveAction.setText(action);\n    mPositiveAction.setVisibility(TextUtils.isEmpty(action) ? View.GONE : View.VISIBLE);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the maximum elevation value of this Dialog.\n * @param elevation\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog maxElevation(float elevation)", "code": "{\n    mCardView.setMaxCardElevation(elevation);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the RippleEffect of neutral action button.\n * @param resId The resourceId of style.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog neutralActionRipple(int resId)", "code": "{\n    RippleDrawable drawable = new RippleDrawable.Builder(getContext(), resId).build();\n    return neutralActionBackground(drawable);\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the text of negative action button.\n * @param action\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog negativeAction(CharSequence action)", "code": "{\n    mNegativeAction.setText(action);\n    mNegativeAction.setVisibility(TextUtils.isEmpty(action) ? View.GONE : View.VISIBLE);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color of positive action button.\n * @param color\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog positiveActionTextColor(int color)", "code": "{\n    mPositiveAction.setTextColor(color);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color of neutral action button.\n * @param color\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog neutralActionTextColor(ColorStateList color)", "code": "{\n    mNeutralAction.setTextColor(color);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color, size, style of positive action button from the specified TextAppearance resource.\n * @param resId The resourceId value.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog positiveActionTextAppearance(int resId)", "code": "{\n    mPositiveAction.setTextAppearance(getContext(), resId);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set a listener will be called when neutral action button is clicked.\n * @param listener The {@link View.OnClickListener} will be called.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog neutralActionClickListener(View.OnClickListener listener)", "code": "{\n    mNeutralAction.setOnClickListener(listener);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color of negative action button.\n * @param color\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog negativeActionTextColor(ColorStateList color)", "code": "{\n    mNegativeAction.setTextColor(color);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the title of this Dialog.\n * @param title The title text.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog title(CharSequence title)", "code": "{\n    mTitle.setText(title);\n    mTitle.setVisibility(TextUtils.isEmpty(title) ? View.GONE : View.VISIBLE);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the animation when Dialog exit the screen.\n * @param resId The resourceId of animation.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog outAnimation(int resId)", "code": "{\n    mOutAnimationId = resId;\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the maximum width of this Dialog layout.\n * @param width The maximum width in pixels.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog maxWidth(int width)", "code": "{\n    mMaxWidth = width;\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color of all action buttons.\n * @param color\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog actionTextColor(ColorStateList color)", "code": "{\n    positiveActionTextColor(color);\n    negativeActionTextColor(color);\n    neutralActionTextColor(color);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the height of divider of this Dialog.\n * @param height The size value in pixels.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog dividerHeight(int height)", "code": "{\n    mCardView.setDividerHeight(height);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Set the RippleEffect of positive action button.\n * @param resId The resourceId of style.\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog positiveActionRipple(int resId)", "code": "{\n    RippleDrawable drawable = new RippleDrawable.Builder(getContext(), resId).build();\n    return positiveActionBackground(drawable);\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * Sets the text color of negative action button.\n * @param color\n * @return The Dialog for chaining methods.\n */\n", "func_signal": "public Dialog negativeActionTextColor(int color)", "code": "{\n    mNegativeAction.setTextColor(color);\n    return this;\n}", "path": "material/material/src/main/java/com/rey/material/app/Dialog.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "rey5137/material", "stars": 6023, "license": "apache-2.0", "language": "java", "size": 3901}
{"docstring": "/**\n * \u70b9\u51fb\u683c\u5b50\n * @param column \u5217\n * @param position \u4f4d\u7f6e\n * @param value \u503c\n * @param data \u6570\u636e\n */\n", "func_signal": "private void clickColumn(Column column, int position, String value, Object data)", "code": "{\n    if (!isClickPoint && column.getOnColumnItemClickListener() != null) {\n        column.getOnColumnItemClickListener().onClick(column, value, data, position);\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u7ed8\u5236\u5185\u5bb9\n * @param canvas \u753b\u5e03\n */\n", "func_signal": "private void drawContent(Canvas canvas)", "code": "{\n    float top;\n    float left = scaleRect.left;\n    List<Column> columns = tableData.getChildColumns();\n    clipRect.set(showRect);\n    TableInfo info = tableData.getTableInfo();\n    int columnSize = columns.size();\n    int dis = config.isFixedCountRow() ? info.getCountHeight()\n            : showRect.bottom + info.getCountHeight() - scaleRect.bottom;\n    int fillBgBottom = showRect.bottom - Math.max(dis, 0);\n    if(config.getContentBackground() !=null){\n        tempRect.set(showRect.left, showRect.top, showRect.right, fillBgBottom);\n        config.getContentBackground().drawBackground(canvas,tempRect,config.getPaint());\n    }\n    if (config.isFixedCountRow()) {\n        canvas.save();\n        canvas.clipRect(showRect.left, showRect.top, showRect.right, showRect.bottom - info.getCountHeight());\n    }\n    List<ColumnInfo> childColumnInfo = tableData.getChildColumnInfos();\n    boolean isPerFixed = false;\n    int clipCount = 0;\n    Rect correctCellRect;\n    TableInfo tableInfo = tableData.getTableInfo();\n    for (int i = 0; i < columnSize; i++) {\n        top = scaleRect.top;\n        Column column = columns.get(i);\n        float width = column.getComputeWidth()*config.getZoom();\n        float tempLeft = left;\n        //\u6839\u636e\u6839\u90e8\u6807\u9898\u662f\u5426\u56fa\u5b9a\n        Column topColumn = childColumnInfo.get(i).getTopParent().column;\n        if (topColumn.isFixed()) {\n            isPerFixed = false;\n            if(tempLeft < clipRect.left){\n                left = clipRect.left;\n                clipRect.left +=width;\n                isPerFixed = true;\n            }\n        }else if(isPerFixed){\n            canvas.save();\n            canvas.clipRect(clipRect);\n            isPerFixed = false;\n           clipCount++;\n        }\n        float right = left + width;\n\n        if (left < showRect.right) {\n            int size = column.getDatas().size();\n            int realPosition = 0;\n            for (int j = 0; j < size; j++) {\n                String value = column.format(j);\n                int skip =tableInfo.getSeizeCellSize(column,j);\n                int totalLineHeight =0;\n                for(int k = realPosition;k<realPosition+skip;k++){\n                    totalLineHeight += info.getLineHeightArray()[k];\n                }\n                realPosition+=skip;\n                float bottom = top + totalLineHeight*config.getZoom();\n                tempRect.set((int) left, (int) top, (int) right, (int) bottom);\n                correctCellRect = gridDrawer.correctCellRect(j, i, tempRect, config.getZoom()); //\u77eb\u6b63\u683c\u5b50\u7684\u5927\u5c0f\n                if (correctCellRect != null) {\n                if (correctCellRect.top < showRect.bottom) {\n                    if (correctCellRect.right > showRect.left && correctCellRect.bottom > showRect.top) {\n                        Object data = column.getDatas().get(j);\n                            if (DrawUtils.isClick(correctCellRect, clickPoint)) {\n                                operation.setSelectionRect(i, j, correctCellRect);\n                                tipPoint.x = (left + right) / 2;\n                                tipPoint.y = (top + bottom) / 2;\n                                tipColumn = column;\n                                tipPosition = j;\n                                clickColumn(column, j, value, data);\n                                isClickPoint = true;\n                                clickPoint.set(-Integer.MAX_VALUE, -Integer.MAX_VALUE);\n                            }\n                            operation.checkSelectedPoint(i, j, correctCellRect);\n                            cellInfo.set(column,data,value,i,j);\n                            drawContentCell(canvas,cellInfo,correctCellRect,config);\n\n                        }\n                    } else {\n                        break;\n                    }\n                }\n                top = bottom;\n            }\n            left = tempLeft + width;\n        } else {\n            break;\n        }\n    }\n    for(int i = 0;i < clipCount;i++){\n        canvas.restore();\n    }\n    if (config.isFixedCountRow()) {\n        canvas.restore();\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**Ruturnthesizeofobservers*/\n", "func_signal": "public int countObservers()", "code": "{\n    synchronized(observables){\n        return observables.size();\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/listener/Observable.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u7ed8\u5236\u5217\u6807\u9898\n * @param canvas \u753b\u5e03\n */\n", "func_signal": "private void drawTitle(Canvas canvas)", "code": "{\n    int dis = showRect.top - scaleRect.top;\n    TableInfo tableInfo = tableData.getTableInfo();\n    int titleHeight = tableInfo.getTitleHeight() * tableInfo.getMaxLevel();\n    int clipHeight = config.isFixedTitle() ? titleHeight : Math.max(0, titleHeight - dis);\n    if(config.getColumnTitleBackground() !=null){\n        tempRect.set(showRect.left, showRect.top, showRect.right,\n                showRect.top + clipHeight);\n        config.getColumnTitleBackground().drawBackground(canvas,tempRect,config.getPaint());\n    }\n    clipRect.set(showRect);\n    List<ColumnInfo> columnInfoList = tableData.getColumnInfos();\n    float zoom = config.getZoom();\n    boolean isPerColumnFixed = false;\n    int clipCount = 0;\n    ColumnInfo parentColumnInfo = null;\n    for (ColumnInfo info : columnInfoList) {\n        int left = (int) (info.left*zoom + scaleRect.left);\n        //\u6839\u636etop ==0\u662f\u6839\u90e8\uff0c\u6839\u636e\u6700\u6839\u90e8\u7684Title\u5224\u65ad\u662f\u5426\u9700\u8981\u56fa\u5b9a\n        if (info.top == 0 && info.column.isFixed()) {\n            if (left < clipRect.left) {\n                parentColumnInfo = info;\n                left = clipRect.left;\n                fillColumnTitle(canvas, info, left);\n                clipRect.left += info.width * zoom;\n                isPerColumnFixed = true;\n                continue;\n            }\n            //\u6839\u90e8\u9700\u8981\u56fa\u5b9a\uff0c\u540c\u65f6\u56fa\u5b9a\u6240\u6709\u5b50\u7c7b\n        }else if(isPerColumnFixed && info.top != 0){\n                left = (int) (clipRect.left - info.width * zoom);\n                left += (info.left -parentColumnInfo.left);\n        }else if(isPerColumnFixed){\n            canvas.save();\n            canvas.clipRect(clipRect.left, showRect.top, showRect.right,\n                    showRect.top + clipHeight);\n            isPerColumnFixed = false;\n            clipCount++;\n        }\n        fillColumnTitle(canvas, info, left);\n    }\n    for(int i = 0;i < clipCount;i++){\n        canvas.restore();\n    }\n    if (config.isFixedTitle()) {\n        scaleRect.top += titleHeight;\n        showRect.top += titleHeight;\n    } else {\n        showRect.top += clipHeight;\n        scaleRect.top += titleHeight;\n    }\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * sp\u8f6cpx\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int sp2px(Context context, float spVal)", "code": "{\n\n    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,\n\n            spVal, context.getResources().getDisplayMetrics());\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/utils/DensityUtils.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int dp2px(Context context, float dpVal)", "code": "{\n\n    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,\n\n            dpVal, context.getResources().getDisplayMetrics());\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/utils/DensityUtils.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * px\u8f6cdp\n *\n * @param context\n * @param pxVal\n * @return\n */\n", "func_signal": "public static float px2dp(Context context, float pxVal)", "code": "{\n\n    final float scale = context.getResources().getDisplayMetrics().density;\n\n    return (pxVal / scale);\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/utils/DensityUtils.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u586b\u5145\u5217\u6807\u9898\n * @param canvas \u753b\u5e03\n * @param info \u5217\u4fe1\u606f\n * @param left \u5de6\u8fb9\n */\n", "func_signal": "private void fillColumnTitle(Canvas canvas, ColumnInfo info, int left)", "code": "{\n\n    int top = (int)(info.top*config.getZoom())\n            + (config.isFixedTitle() ? showRect.top : scaleRect.top);\n    int right = (int) (left + info.width *config.getZoom());\n    int bottom = (int) (top + info.height*config.getZoom());\n    if (DrawUtils.isMixRect(showRect, left, top, right, bottom)) {\n        if (!isClickPoint && onColumnClickListener != null) {\n            if (DrawUtils.isClick(left, top, right, bottom, clickPoint)) {\n                isClickPoint = true;\n                clickColumnInfo = info;\n                clickPoint.set(-1, -1);\n            }\n        }\n        Paint paint = config.getPaint();\n        tempRect.set(left,top,right,bottom);\n        if(config.getTableGridFormat() !=null) {\n            config.getColumnTitleGridStyle().fillPaint(paint);\n            int position = tableData.getChildColumns().indexOf(info.column);\n            config.getTableGridFormat().drawColumnTitleGrid(canvas,tempRect,info.column,position,paint);\n        }\n        tableData.getTitleDrawFormat().draw(canvas, info.column, tempRect, config);\n\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "//Excel \u56e0\u4e3a\u6bcf\u683c\u7684\u5927\u5c0f\u90fd\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u9ad8\u5ea6\u548c\u5bbd\u5ea6\n", "func_signal": "@Override\npublic int measureWidth(Column<K> column, int position, TableConfig config)", "code": "{\n    if(softReference.get() == null){\n        return 0;\n    }\n    int width = 0;\n    K cell = column.getDatas().get(position);\n    if (cell != null) {\n        int fontSize = (int) (getFontSize(softReference.get(),(T) cell) * fontScale); //\u589e\u52a0\u5b57\u4f53\uff0c\u6548\u679c\u66f4\u597d\u770b\n        config.getPaint().setTextSize(DensityUtils.sp2px(softReference.get(), fontSize));\n        width = DrawUtils.getMultiTextWidth(config.getPaint(),getSplitString(column.format(position)));\n    }\n    return width;\n}", "path": "smartTable/app/src/main/java/com/bin/david/smarttable/excel/BaseExcel2Table.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u8ba1\u7b97\u4efb\u4f55point\u5728View\u7684\u4f4d\u7f6e\n * @param row \u5217\n * @param col \u884c\n * @return\n */\n", "func_signal": "public int[] getPointLocation(double row,double col)", "code": "{\n    List<Column> childColumns = tableData.getChildColumns();\n    int[] lineHeights =  tableData.getTableInfo().getLineHeightArray();\n    int x=0,y =0;\n    int columnSize = childColumns.size();\n    for(int i = 0; i <= (columnSize > col+1 ? col+1 : columnSize-1);i++){\n        int w = childColumns.get(i).getComputeWidth();\n        if(i == (int)col+1){\n            x +=w *(col-(int)col);\n        }else {\n            x += w;\n        }\n    }\n    for(int i = 0; i <= (lineHeights.length > row+1 ? row+1 : lineHeights.length-1);i++){\n        int h = lineHeights[i];\n        if(i == (int)row+1){\n            y +=h *(row-(int)row);\n        }else {\n            y += h;\n        }\n    }\n    x *= config.getZoom();\n    y *= config.getZoom();\n    x += scaleRect.left;\n    y +=scaleRect.top;\n    return new int[]{x,y};\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u7ed8\u5236\n * @param canvas \u753b\u5e03\n * @param scaleRect \u7f29\u653eRect\n * @param showRect \u663e\u793aRect\n * @param tableData \u8868\u683c\u6570\u636e\n * @param config \u914d\u7f6e\n */\n", "func_signal": "public void onDraw(Canvas canvas, Rect scaleRect, Rect showRect,\n                   TableData<T> tableData, TableConfig config)", "code": "{\n    setData(scaleRect, showRect, tableData, config);\n    canvas.save();\n    canvas.clipRect(this.showRect);\n    drawColumnTitle(canvas, config);\n    drawCount(canvas);\n    drawContent(canvas);\n    operation.draw(canvas,showRect,config);\n    if(drawOver !=null)\n        drawOver.draw(canvas,scaleRect,showRect,config);\n    canvas.restore();\n    if (isClickPoint && clickColumnInfo != null) {\n        onColumnClickListener.onClick(clickColumnInfo);\n    }\n    if (tipColumn != null) {\n        drawTip(canvas, tipPoint.x, tipPoint.y, tipColumn, tipPosition);\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**AttachObserver\uff08\u901a\u8fc7\u5b9e\u4f8b\u6ce8\u518c\u89c2\u5bdf\u8005\uff09\n **/\n", "func_signal": "public void register(T observer)", "code": "{\n    if(observer==null) throw new NullPointerException();\n    synchronized(observables){\n        if(!observables.contains(observer)){\n            observables.add(observer);\n        }\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/listener/Observable.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u8ba1\u7b97\u4efb\u4f55point\u5728View\u7684\u5927\u5c0f\n * @param row \u5217\n * @param col \u884c\n * @return\n */\n", "func_signal": "public int[] getPointSize(int row,int col)", "code": "{\n    List<Column> childColumns = tableData.getChildColumns();\n    int[] lineHeights =  tableData.getTableInfo().getLineHeightArray();\n    col= col < childColumns.size() ? col:childColumns.size()-1;//\u5217\n    row = row< lineHeights.length ? row:lineHeights.length;//\u884c\n    col = col< 0 ? 0 : col;\n    row = row< 0 ? 0 : row;\n    return new int[]{(int) (childColumns.get(col).getComputeWidth()*config.getZoom()),\n            (int) (lineHeights[row]*config.getZoom())};\n\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**UnattachObserver\uff08\u6ce8\u9500\u89c2\u5bdf\u8005\uff09\n **/\n", "func_signal": "public void unRegister(T observer)", "code": "{\n    if(observer==null) throw new NullPointerException();\n    if(observables.contains(observer)){\n        observables.remove(observer);\n    }\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/listener/Observable.java", "commit_date": "2017-11-08 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u6d4b\u8bd5\u662f\u5426\u53ef\u4ee5\u517c\u5bb9\u4e4b\u524dsmartChart\n * @param tableName\n * @param chartYDataList\n * @param list\n */\n", "func_signal": "private void showChartDialog(String tableName,List<String> chartYDataList,List<Integer> list )", "code": "{\n    View chartView = View.inflate(this,R.layout.dialog_chart,null);\n    LineChart lineChart = (LineChart) chartView.findViewById(R.id.lineChart);\n    lineChart.setLineModel(LineChart.CURVE_MODEL);\n    Resources res = getResources();\n    com.daivd.chart.data.style.FontStyle.setDefaultTextSpSize(this,12);\n    List<LineData> ColumnDatas = new ArrayList<>();\n    ArrayList<Double> tempList1 = new ArrayList<>();\n    ArrayList<String> ydataList = new ArrayList<>();\n    for(int i = 0;i <30;i++){\n        String value = chartYDataList.get(i);\n        ydataList.add(value);\n    }\n    for(int i = 0;i <30;i++){\n        int value = list.get(i);\n        tempList1.add(Double.valueOf(value));\n    }\n    LineData columnData1 = new LineData(tableName,\"\", IAxis.AxisDirection.LEFT,getResources().getColor(R.color.arc1),tempList1);\n    ColumnDatas.add(columnData1);\n    ChartData<LineData> chartData2 = new ChartData<>(\"Area Chart\",ydataList,ColumnDatas);\n    lineChart.getChartTitle().setDirection(IComponent.TOP);\n    lineChart.getLegend().setDirection(IComponent.BOTTOM);\n    lineChart.setLineModel(LineChart.CURVE_MODEL);\n    BaseAxis verticalAxis =  lineChart.getLeftVerticalAxis();\n    BaseAxis horizontalAxis=  lineChart.getHorizontalAxis();\n    //\u8bbe\u7f6e\u7ad6\u8f74\u65b9\u5411\n    verticalAxis.setAxisDirection(IAxis.AxisDirection.LEFT);\n    //\u8bbe\u7f6e\u7f51\u683c\n    verticalAxis.setDrawGrid(true);\n    //\u8bbe\u7f6e\u6a2a\u8f74\u65b9\u5411\n    horizontalAxis.setAxisDirection(IAxis.AxisDirection.BOTTOM);\n    horizontalAxis.setDrawGrid(true);\n    //\u8bbe\u7f6e\u7ebf\u6761\u6837\u5f0f\n    verticalAxis.getAxisStyle().setWidth(this,1);\n    DashPathEffect effects = new DashPathEffect(new float[] { 1, 2, 4, 8}, 1);\n    verticalAxis.getGridStyle().setWidth(this,1).setColor(res.getColor(R.color.arc_text)).setEffect(effects);\n    horizontalAxis.getGridStyle().setWidth(this,1).setColor(res.getColor(R.color.arc_text)).setEffect(effects);\n    lineChart.setZoom(true);\n    //\u5f00\u542f\u5341\u5b57\u67b6\n    lineChart.getProvider().setOpenCross(true);\n    lineChart.getProvider().setCross(new VerticalCross());\n    lineChart.getProvider().setShowText(true);\n    //\u5f00\u542fMarkView\n    lineChart.getProvider().setOpenMark(true);\n    //\u8bbe\u7f6eMarkView\n    lineChart.getProvider().setMarkView(new BubbleMarkView(this));\n\n    //\u8bbe\u7f6e\u663e\u793a\u6807\u9898\n    lineChart.setShowChartName(true);\n    //\u8bbe\u7f6e\u6807\u9898\u6837\u5f0f\n    com.daivd.chart.data.style.FontStyle fontStyle = lineChart.getChartTitle().getFontStyle();\n    fontStyle.setTextColor(res.getColor(R.color.arc_temp));\n    fontStyle.setTextSpSize(this,15);\n    LevelLine levelLine = new LevelLine(30);\n    DashPathEffect effects2 = new DashPathEffect(new float[] { 1, 2,2,4}, 1);\n    levelLine.getLineStyle().setWidth(this,1).setColor(res.getColor(R.color.arc23)).setEffect(effects);\n    levelLine.getLineStyle().setEffect(effects2);\n    lineChart.getProvider().addLevelLine(levelLine);\n    Point legendPoint = (Point) lineChart.getLegend().getPoint();\n    PointStyle style = legendPoint.getPointStyle();\n    style.setShape(PointStyle.SQUARE);\n    lineChart.getProvider().setArea(true);\n    lineChart.getHorizontalAxis().setRotateAngle(90);\n    lineChart.setChartData(chartData2);\n    lineChart.startChartAnim(400);\n    BaseDialog dialog = new  BaseDialog.Builder(this).setFillWidth(true).setContentView(chartView).create();\n    dialog.show();\n}", "path": "smartTable/app/src/main/java/com/bin/david/smarttable/ParseModeActivity.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u8bbe\u7f6e\u57fa\u672c\u4fe1\u606f\u548c\u6e05\u9664\u6570\u636e\n * @param scaleRect \u7f29\u653eRect\n * @param showRect \u663e\u793aRect\n * @param tableData \u8868\u683c\u6570\u636e\n * @param config \u914d\u7f6e\n */\n", "func_signal": "private void setData(Rect scaleRect, Rect showRect, TableData<T> tableData, TableConfig config)", "code": "{\n    isClickPoint = false;\n    clickColumnInfo = null;\n    tipColumn = null;\n    operation.reset();\n    this.scaleRect = scaleRect;\n    this.showRect = showRect;\n    this.config = config;\n    this.tableData = tableData;\n    gridDrawer.setTableData(tableData);\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u83b7\u53d6\u8f93\u51fa\u6d41\n * @param context\n * @return\n * @throws IOException\n */\n", "func_signal": "public InputStream getInputStream(Context context,String fileName) throws IOException", "code": "{\n    InputStream is;\n    if(isAssetsFile)\n        is = context.getAssets().open(fileName);\n    else\n        is = new FileInputStream(fileName);\n    return is;\n}", "path": "smartTable/app/src/main/java/com/bin/david/smarttable/excel/BaseExcel2Table.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n *\u7ed8\u5236\u5185\u5bb9\u683c\u5b50\n * @param c \u753b\u5e03\n * @param cellInfo \u683c\u5b50\u4fe1\u606f\n * @param rect \u65b9\u4f4d\n * @param config \u8868\u683c\u914d\u7f6e\n */\n", "func_signal": "protected void drawContentCell(Canvas c, CellInfo<T> cellInfo, Rect rect,TableConfig config)", "code": "{\n\n    if(config.getContentCellBackgroundFormat()!= null){\n        config.getContentCellBackgroundFormat().drawBackground(c,rect,cellInfo,config.getPaint());\n    }\n    if(config.getTableGridFormat() !=null){\n        config.getContentGridStyle().fillPaint(config.getPaint());\n        config.getTableGridFormat().drawContentGrid(c,cellInfo.col,cellInfo.row,rect,cellInfo,config.getPaint());\n    }\n    rect.left += config.getTextLeftOffset();\n    cellInfo.column.getDrawFormat().draw(c,rect, cellInfo,  config);\n}", "path": "smartTable/form/src/main/java/com/bin/david/form/component/TableProvider.java", "commit_date": "2018-04-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * \u7ed8\u5236\u56fe\u7247\n * @param c \u753b\u5e03\n * @param rect \u7ed8\u5236\u5927\u5c0f\n * @param bitmap \u4f4d\u56fe\n * @param config \u914d\u7f6e\n */\n", "func_signal": "public static void drawBitmap(Canvas c, Rect rect, Bitmap bitmap, TableConfig config)", "code": "{\n        if (bitmap != null) {\n            config.getPaint().setStyle(Paint.Style.FILL);\n            int width = bitmap.getWidth();\n            int height = bitmap.getHeight();\n            Rect imgRect= new Rect(0,0,width,height);\n            float scaleX = (float) width / rect.width();\n            float scaleY = (float) height / rect.height();\n            if (scaleX > 1 || scaleY > 1) {\n                if (scaleX > scaleY) {\n                    width = (int) (width / scaleX);\n                    height = rect.height();\n                } else {\n                    height = (int) (height / scaleY);\n                    width = rect.width();\n                }\n            }\n            width = (int) (width * config.getZoom());\n            height = (int) (height * config.getZoom());\n            int disX = (rect.right - rect.left - width) / 2;\n            int disY = (rect.bottom - rect.top - height) / 2;\n            Rect drawRect = new Rect();\n            drawRect.left = rect.left + disX;\n            drawRect.top = rect.top + disY;\n            drawRect.right = rect.right - disX;\n            drawRect.bottom = rect.bottom - disY;\n            c.drawBitmap(bitmap, imgRect, drawRect, config.getPaint());\n        }\n    }", "path": "smartTable/app/src/main/java/com/bin/david/smarttable/utils/DrawHelper.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "//\u9ed8\u8ba4\u4eceAssets\u6587\u4ef6\u8bfb\u53d6\n   /**\n    * \u521d\u59cb\u5316\u9ed8\u8ba4\u914d\u7f6e\n    * @param context\n    * @param table\n    */\n", "func_signal": "@Override\n   public void initTableConfig(final Context context,SmartTable<T> table)", "code": "{\n       this.smartTable = table;\n       table.getConfig().setFixedYSequence(true);\n       table.getConfig().setFixedXSequence(true);\n       table.getConfig().setShowTableTitle(false);\n       int backgroundColor = ContextCompat.getColor(context, R.color.arc_bg);\n       int xyGridColor = ContextCompat.getColor(context,R.color.excel_bg); //x,y\u5e8f\u5217\u7f51\u683c\u989c\u8272\n       //\u914d\u7f6e\n       table.getConfig().setHorizontalPadding(DensityUtils.dp2px(context,10))\n               .setColumnTitleHorizontalPadding(DensityUtils.dp2px(context,5))\n               .setXSequenceBackground(new BaseBackgroundFormat(backgroundColor))\n               .setYSequenceBackground(new BaseBackgroundFormat(backgroundColor))\n               .setLeftAndTopBackgroundColor(backgroundColor)\n               .setSequenceGridStyle(new LineStyle().setColor(xyGridColor))\n               .setLeftTopDrawFormat(new LeftTopDrawFormat() { //\u8bbe\u7f6e\u5de6\u4e0a\u89d2\u4e09\u89d2\u5f62\n                   @Override\n                   protected int getResourceID() {\n                       return R.mipmap.excel_triangle;\n                   }\n\n                   @Override\n                   protected Context getContext() {\n                       return context;\n                   }\n               });\n       //\u8bbe\u7f6e\u8868\u683c\u80cc\u666f\u989c\u8272\n       table.getConfig().setContentCellBackgroundFormat(new BaseCellBackgroundFormat<CellInfo>() {\n           @Override\n           public int getBackGroundColor(CellInfo cellInfo) {\n              if(cellInfo.data !=null) {\n                  return getBackgroundColor(context, (T) cellInfo.data);\n              }\n              return TableConfig.INVALID_COLOR;\n           }\n\n       });\n       table.setZoom(true,3,0.5f);\n       //\u7ed8\u5236\u9009\u4e2d\u533a\u57df\n       table.setSelectFormat(new BaseSelectFormat());\n       //\u589e\u52a0\u6279\u6ce8\n       FontStyle fontStyle = new FontStyle();\n       fontStyle.setTextColor(context.getResources().getColor(android.R.color.white));\n       MultiLineBubbleTip<Column> tip = new MultiLineBubbleTip<Column>(context,R.mipmap.round_rect,R.mipmap.triangle,fontStyle) {\n           @Override\n           public boolean isShowTip(Column column, int position) {\n               T cell = (T) column.getDatas().get(position);\n               if(cell !=null ){\n                  return hasComment(cell);\n               }\n               return false;\n           }\n\n\n           @Override\n           public String[] format(Column column, int position) {\n               T cell = (T) column.getDatas().get(position);\n               String comment = getComment(cell);\n               return comment.split(\"\\n\");\n           }\n       };\n       tip.setColorFilter(ContextCompat.getColor(context,R.color.column_bg));\n       tip.setAlpha(0.9f);\n       table.getProvider().setTip(tip);\n   }", "path": "smartTable/app/src/main/java/com/bin/david/smarttable/excel/BaseExcel2Table.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "huangyanbin/smartTable", "stars": 5077, "license": "None", "language": "java", "size": 63951}
{"docstring": "/**\n * Set the size of the selected font.\n * \n * @param size\n *            the size of the selected font\n *\n * @see #getSelectedFontSize\n **/\n", "func_signal": "public void setSelectedFontSize(int size)", "code": "{\n\tString sizeString = String.valueOf(size);\n\tfor (int i = 0; i < this.fontSizeStrings.length; i++) {\n\t\tif (this.fontSizeStrings[i].equals(sizeString)) {\n\t\t\tgetFontSizeList().setSelectedIndex(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tgetFontSizeTextField().setText(sizeString);\n\tupdateSampleFont();\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Do not load, get the loaded instance\n */\n", "func_signal": "private void loadConfig()", "code": "{\n\tdecompilerSettings = new DecompilerSettings();\n\tif (decompilerSettings.getJavaFormattingOptions() == null) {\n\t\tdecompilerSettings.setJavaFormattingOptions(JavaFormattingOptions.createDefault());\n\t}\n\tluytenPreferences = new LuytenPreferences();\n\tmainWindowPosition = new WindowPosition();\n\tfindWindowPosition = new WindowPosition();\n\ttry {\n\t\tPreferences prefs = Preferences.userNodeForPackage(ConfigSaver.class);\n\t\tif (!prefs.get(LANGUAGE_NAME_ID, decompilerSettings.getLanguage().getName())\n\t\t\t\t.equals(decompilerSettings.getLanguage().getName()))\n\t\t\tprefs.put(LANGUAGE_NAME_ID, decompilerSettings.getLanguage().getName());\n\n\t\tdecompilerSettings.setFlattenSwitchBlocks(\n\t\t\t\tprefs.getBoolean(FLATTEN_SWITCH_BLOCKS_ID, decompilerSettings.getFlattenSwitchBlocks()));\n\t\tdecompilerSettings.setForceExplicitImports(\n\t\t\t\tprefs.getBoolean(FORCE_EXPLICIT_IMPORTS_ID, decompilerSettings.getForceExplicitImports()));\n\t\tdecompilerSettings.setShowSyntheticMembers(\n\t\t\t\tprefs.getBoolean(SHOW_SYNTHETIC_MEMBERS_ID, decompilerSettings.getShowSyntheticMembers()));\n\t\tdecompilerSettings.setExcludeNestedTypes(\n\t\t\t\tprefs.getBoolean(EXCLUDE_NESTED_TYPES_ID, decompilerSettings.getExcludeNestedTypes()));\n\t\tdecompilerSettings.setForceExplicitTypeArguments(prefs.getBoolean(FORCE_EXPLICIT_TYPE_ARGUMENTS_ID,\n\t\t\t\tdecompilerSettings.getForceExplicitTypeArguments()));\n\t\tdecompilerSettings.setRetainRedundantCasts(\n\t\t\t\tprefs.getBoolean(RETAIN_REDUNDANT_CASTS_ID, decompilerSettings.getRetainRedundantCasts()));\n\t\tdecompilerSettings.setIncludeErrorDiagnostics(\n\t\t\t\tprefs.getBoolean(INCLUDE_ERROR_DIAGNOSTICS_ID, decompilerSettings.getIncludeErrorDiagnostics()));\n\t\tdecompilerSettings.setLanguage(\n\t\t\t\tfindLanguageByName(prefs.get(LANGUAGE_NAME_ID, decompilerSettings.getLanguage().getName())));\n\t\tdecompilerSettings.setUnicodeOutputEnabled(prefs.getBoolean(UNICODE_REPLACE_ENABLED_ID, false));\n\n\t\tmainWindowPosition = loadWindowPosition(prefs, MAIN_WINDOW_ID_PREFIX);\n\t\tfindWindowPosition = loadWindowPosition(prefs, FIND_WINDOW_ID_PREFIX);\n\t\tluytenPreferences = loadLuytenPreferences(prefs);\n\t} catch (Exception e) {\n\t\tLuyten.showExceptionDialog(\"Exception!\", e);\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/ConfigSaver.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Constructs a <code>JFontChooser</code> object using the given font size\n * array.\n * \n * @param fontSizeStrings\n *            the array of font size string.\n **/\n", "func_signal": "public JFontChooser(String[] fontSizeStrings)", "code": "{\n\tif (fontSizeStrings == null) {\n\t\tfontSizeStrings = DEFAULT_FONT_SIZE_STRINGS;\n\t}\n\tthis.fontSizeStrings = fontSizeStrings;\n\n\tJPanel selectPanel = new JPanel();\n\tselectPanel.setLayout(new BoxLayout(selectPanel, BoxLayout.X_AXIS));\n\tselectPanel.add(getFontFamilyPanel());\n\tselectPanel.add(getFontStylePanel());\n\tselectPanel.add(getFontSizePanel());\n\n\tJPanel contentsPanel = new JPanel();\n\tcontentsPanel.setLayout(new GridLayout(2, 1));\n\tcontentsPanel.add(selectPanel, BorderLayout.NORTH);\n\tcontentsPanel.add(getSamplePanel(), BorderLayout.CENTER);\n\n\tthis.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n\tthis.add(contentsPanel);\n\tthis.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\tthis.setSelectedFont(DEFAULT_SELECTED_FONT);\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Get the style of the selected font.\n * \n * @return the style of the selected font. <code>Font.PLAIN</code>,\n *         <code>Font.BOLD</code>, <code>Font.ITALIC</code>,\n *         <code>Font.BOLD|Font.ITALIC</code>\n *\n * @see java.awt.Font#PLAIN\n * @see java.awt.Font#BOLD\n * @see java.awt.Font#ITALIC\n * @see #setSelectedFontStyle\n **/\n", "func_signal": "public int getSelectedFontStyle()", "code": "{\n\tint index = getFontStyleList().getSelectedIndex();\n\treturn FONT_STYLE_CODES[index];\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// refresh currently opened menu\n// (if user selected a menu before it was ready)\n", "func_signal": "private void refreshMenuPopup(JMenu menu)", "code": "{\n\ttry {\n\t\tif (menu.isPopupMenuVisible()) {\n\t\t\tmenu.getPopupMenu().setVisible(false);\n\t\t\tmenu.getPopupMenu().setVisible(true);\n\t\t}\n\t} catch (Exception e) {\n\t\tLuyten.showExceptionDialog(\"Exception!\", e);\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/MainMenuBar.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Get the size of the selected font.\n * \n * @return the size of the selected font\n *\n * @see #setSelectedFontSize\n **/\n", "func_signal": "public int getSelectedFontSize()", "code": "{\n\tint fontSize = 1;\n\tString fontSizeString = getFontSizeTextField().getText();\n\twhile (true) {\n\t\ttry {\n\t\t\tfontSize = Integer.parseInt(fontSizeString);\n\t\t\tbreak;\n\t\t} catch (NumberFormatException e) {\n\t\t\tfontSizeString = (String) getFontSizeList().getSelectedValue();\n\t\t\tgetFontSizeTextField().setText(fontSizeString);\n\t\t}\n\t}\n\n\treturn fontSize;\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Set the selected font.\n * \n * @param font\n *            the selected font\n *\n * @see #getSelectedFont\n * @see java.awt.Font\n **/\n", "func_signal": "public void setSelectedFont(Font font)", "code": "{\n\tsetSelectedFontFamily(font.getFamily());\n\tsetSelectedFontStyle(font.getStyle());\n\tsetSelectedFontSize(font.getSize());\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Set the family name of the selected font.\n * \n * @param name\n *            the family name of the selected font.\n *\n * @see getSelectedFontFamily\n **/\n", "func_signal": "public void setSelectedFontFamily(String name)", "code": "{\n\tString[] names = getFontFamilies();\n\tfor (int i = 0; i < names.length; i++) {\n\t\tif (names[i].toLowerCase().equals(name.toLowerCase())) {\n\t\t\tgetFontFamilyList().setSelectedIndex(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tupdateSampleFont();\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Method allows for users to copy the stacktrace for reporting any issues.\n * Add Cool Hyperlink Enhanced for mouse users.\n * \n * @param message\n * @param e\n */\n", "func_signal": "public static void showExceptionDialog(String message, Exception e)", "code": "{\n\tStringWriter sw = new StringWriter();\n\tPrintWriter pw = new PrintWriter(sw);\n\te.printStackTrace(pw);\n\tString stacktrace = sw.toString();\n\ttry {\n\t\tsw.close();\n\t\tpw.close();\n\t} catch (IOException e1) {\n\t\te1.printStackTrace();\n\t}\n\tSystem.out.println(stacktrace);\n\n\tJPanel pane = new JPanel();\n\tpane.setLayout(new BoxLayout(pane, BoxLayout.PAGE_AXIS));\n\tif (message.contains(\"\\n\")) {\n\t\tfor (String s : message.split(\"\\n\")) {\n\t\t\tpane.add(new JLabel(s));\n\t\t}\n\t} else {\n\t\tpane.add(new JLabel(message));\n\t}\n\tpane.add(new JLabel(\" \\n\")); // Whitespace\n\tfinal JTextArea exception = new JTextArea(25, 100);\n\texception.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 10));\n\texception.setText(stacktrace);\n\texception.addMouseListener(new MouseAdapter() {\n\t\t@Override\n\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\tif (SwingUtilities.isRightMouseButton(e)) {\n\t\t\t\tnew JPopupMenu() {\n\t\t\t\t\t{\n\t\t\t\t\t\tJMenuItem menuitem = new JMenuItem(\"Select All\");\n\t\t\t\t\t\tmenuitem.addActionListener(new ActionListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\t\t\t\texception.requestFocus();\n\t\t\t\t\t\t\t\texception.selectAll();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.add(menuitem);\n\t\t\t\t\t\tmenuitem = new JMenuItem(\"Copy\");\n\t\t\t\t\t\tmenuitem.addActionListener(new DefaultEditorKit.CopyAction());\n\t\t\t\t\t\tthis.add(menuitem);\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate static final long serialVersionUID = 562054483562666832L;\n\t\t\t\t}.show(e.getComponent(), e.getX(), e.getY());\n\t\t\t}\n\t\t}\n\t});\n\tJScrollPane scroll = new JScrollPane(exception);\n\tscroll.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Stacktrace\"),\n\t\t\tnew BevelBorder(BevelBorder.LOWERED)));\n\tpane.add(scroll);\n\tfinal String issue = \"https://github.com/deathmarine/Luyten/issues\";\n\tfinal JLabel link = new JLabel(\"<HTML>Submit to <FONT color=\\\"#000099\\\"><U>\" + issue + \"</U></FONT></HTML>\");\n\tlink.setCursor(new Cursor(Cursor.HAND_CURSOR));\n\tlink.addMouseListener(new MouseAdapter() {\n\t\t@Override\n\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\ttry {\n\t\t\t\tDesktop.getDesktop().browse(new URI(issue));\n\t\t\t} catch (Exception e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseEntered(MouseEvent e) {\n\t\t\tlink.setText(\"<HTML>Submit to <FONT color=\\\"#00aa99\\\"><U>\" + issue + \"</U></FONT></HTML>\");\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseExited(MouseEvent e) {\n\t\t\tlink.setText(\"<HTML>Submit to <FONT color=\\\"#000099\\\"><U>\" + issue + \"</U></FONT></HTML>\");\n\t\t}\n\t});\n\tpane.add(link);\n\tJOptionPane.showMessageDialog(null, pane, \"Error!\", JOptionPane.ERROR_MESSAGE);\n}", "path": "Luyten/src/us/deathmarine/luyten/Luyten.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// load preferences by their java variable names\n", "func_signal": "private LuytenPreferences loadLuytenPreferences(Preferences prefs) throws Exception", "code": "{\n\tLuytenPreferences newLuytenPrefs = new LuytenPreferences();\n\tfor (Field field : LuytenPreferences.class.getDeclaredFields()) {\n\t\tif (Modifier.isStatic(field.getModifiers()))\n\t\t\tcontinue;\n\t\tfield.setAccessible(true);\n\t\tString prefId = field.getName();\n\t\tObject defaultVal = field.get(newLuytenPrefs);\n\n\t\tif (field.getType() == String.class) {\n\t\t\tString defaultStr = (String) (defaultVal == null ? \"\" : defaultVal);\n\t\t\tfield.set(newLuytenPrefs, prefs.get(prefId, defaultStr));\n\n\t\t} else if (field.getType() == Boolean.class || field.getType() == boolean.class) {\n\t\t\tBoolean defaultBool = (Boolean) (defaultVal == null ? new Boolean(false) : defaultVal);\n\t\t\tfield.setBoolean(newLuytenPrefs, prefs.getBoolean(prefId, defaultBool));\n\n\t\t} else if (field.getType() == Integer.class || field.getType() == int.class) {\n\t\t\tInteger defaultInt = (Integer) (defaultVal == null ? new Integer(0) : defaultVal);\n\t\t\tfield.setInt(newLuytenPrefs, prefs.getInt(prefId, defaultInt));\n\t\t}\n\t}\n\treturn newLuytenPrefs;\n}", "path": "Luyten/src/us/deathmarine/luyten/ConfigSaver.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// Function which opens the given file in the instance, if it's running -\n// and if not, it processes the files\n", "func_signal": "public static void addToPendingFiles(File fileToOpen)", "code": "{\n\tsynchronized (pendingFiles) {\n\t\tif (fileToOpen != null) {\n\t\t\tpendingFiles.add(fileToOpen);\n\t\t}\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/Luyten.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Get the family name of the selected font.\n * \n * @return the font family of the selected font.\n *\n * @see #setSelectedFontFamily\n **/\n", "func_signal": "public String getSelectedFontFamily()", "code": "{\n\tString fontName = (String) getFontFamilyList().getSelectedValue();\n\treturn fontName;\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// Function which exits the application if it's running\n", "func_signal": "public static void quitInstance()", "code": "{\n\tfinal MainWindow mainWindow = mainWindowRef.get();\n\tif (mainWindow != null) {\n\t\tmainWindow.onExitMenu();\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/Luyten.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Get the selected font.\n * \n * @return the selected font\n *\n * @see #setSelectedFont\n * @see java.awt.Font\n **/\n", "func_signal": "public Font getSelectedFont()", "code": "{\n\tFont font = new Font(getSelectedFontFamily(), getSelectedFontStyle(), getSelectedFontSize());\n\treturn font;\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// (assertion: mass does not contain null elements)\n", "func_signal": "@Override\npublic int compare(String o1, String o2)", "code": "{\n\tint comp = o1.replaceAll(\"[^\\\\.]*\\\\.\", \"\").compareTo(o2.replaceAll(\"[^\\\\.]*\\\\.\", \"\"));\n\tif (comp != 0)\n\t\treturn comp;\n\treturn o1.compareTo(o2);\n}", "path": "Luyten/src/us/deathmarine/luyten/Model.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Set the style of the selected font.\n * \n * @param style\n *            the size of the selected font. <code>Font.PLAIN</code>,\n *            <code>Font.BOLD</code>, <code>Font.ITALIC</code>, or\n *            <code>Font.BOLD|Font.ITALIC</code>.\n *\n * @see java.awt.Font#PLAIN\n * @see java.awt.Font#BOLD\n * @see java.awt.Font#ITALIC\n * @see #getSelectedFontStyle\n **/\n", "func_signal": "public void setSelectedFontStyle(int style)", "code": "{\n\tfor (int i = 0; i < FONT_STYLE_CODES.length; i++) {\n\t\tif (FONT_STYLE_CODES[i] == style) {\n\t\t\tgetFontStyleList().setSelectedIndex(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tupdateSampleFont();\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * sun.swing.CachedPainter holds on OpenFile for a while even after\n * JTabbedPane.remove(component)\n */\n", "func_signal": "public void close()", "code": "{\n\tlinkProvider = null;\n\ttype = null;\n\tinvalidateContent();\n\tclearLinksCache();\n}", "path": "Luyten/src/us/deathmarine/luyten/OpenFile.java", "commit_date": "2019-11-08 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Show font selection dialog.\n * \n * @param parent\n *            Dialog's Parent component.\n * @return OK_OPTION, CANCEL_OPTION or ERROR_OPTION\n *\n * @see #OK_OPTION\n * @see #CANCEL_OPTION\n * @see #ERROR_OPTION\n **/\n", "func_signal": "public int showDialog(Component parent)", "code": "{\n\tdialogResultValue = ERROR_OPTION;\n\tJDialog dialog = createDialog(parent);\n\tdialog.addWindowListener(new WindowAdapter() {\n\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\tdialogResultValue = CANCEL_OPTION;\n\t\t}\n\t});\n\n\tdialog.setVisible(true);\n\tdialog.dispose();\n\tdialog = null;\n\n\treturn dialogResultValue;\n}", "path": "Luyten/src/us/deathmarine/luyten/JFontChooser.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// save preferences by their java variable names\n", "func_signal": "private void saveLuytenPreferences(Preferences prefs) throws Exception", "code": "{\n\tfor (Field field : LuytenPreferences.class.getDeclaredFields()) {\n\t\tif (Modifier.isStatic(field.getModifiers()))\n\t\t\tcontinue;\n\t\tfield.setAccessible(true);\n\t\tString prefId = field.getName();\n\t\tObject value = field.get(luytenPreferences);\n\n\t\tif (field.getType() == String.class) {\n\t\t\tprefs.put(prefId, (String) (value == null ? \"\" : value));\n\n\t\t} else if (field.getType() == Boolean.class || field.getType() == boolean.class) {\n\t\t\tprefs.putBoolean(prefId, (Boolean) (value == null ? new Boolean(false) : value));\n\n\t\t} else if (field.getType() == Integer.class || field.getType() == int.class) {\n\t\t\tprefs.putInt(prefId, (Integer) (value == null ? new Integer(0) : value));\n\t\t}\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/ConfigSaver.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "// Private function which processes all pending files - synchronized on the\n// list of pending files\n", "func_signal": "public static void processPendingFiles()", "code": "{\n\tfinal MainWindow mainWindow = mainWindowRef.get();\n\tif (mainWindow != null) {\n\t\tsynchronized (pendingFiles) {\n\t\t\tfor (File f : pendingFiles) {\n\t\t\t\tmainWindow.loadNewFile(f);\n\t\t\t}\n\t\t\tpendingFiles.clear();\n\t\t}\n\t}\n}", "path": "Luyten/src/us/deathmarine/luyten/Luyten.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "deathmarine/Luyten", "stars": 4902, "license": "other", "language": "java", "size": 5857}
{"docstring": "/**\n * Emits query results one by one to the given consumer (synchronously).\n * Once this method returns, the consumer will have received all result object).\n * It \"streams\" each object from the database to the consumer, which is very memory efficient.\n * Because this is run in a read transaction, the consumer gets a consistent view on the data.\n * Like {@link #findLazy()}, this method can be used for a high amount of data.\n * <p>\n * Note: because the consumer is called within a read transaction it may not write to the database.\n */\n", "func_signal": "public void forEach(final QueryConsumer<T> consumer)", "code": "{\n    ensureNoComparator();\n    box.getStore().runInReadTx(() -> {\n        LazyList<T> lazyList = new LazyList<>(box, findIds(), false);\n        int size = lazyList.size();\n        for (int i = 0; i < size; i++) {\n            T entity = lazyList.get(i);\n            if (entity == null) {\n                throw new IllegalStateException(\"Internal error: data object was null\");\n            }\n            if (filter != null) {\n                if (!filter.keep(entity)) {\n                    continue;\n                }\n            }\n            if (eagerRelations != null) {\n                resolveEagerRelationForNonNullEagerRelations(entity, i);\n            }\n            try {\n                consumer.accept(entity);\n            } catch (BreakForEach breakForEach) {\n                break;\n            }\n        }\n    });\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to new values.\n */\n", "func_signal": "public Query<T> setParameters(Property<?> property, int[] values)", "code": "{\n    nativeSetParameters(handle, property.getEntityId(), property.getId(), null, values);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * The returned Single emits one Query result as a List.\n */\n", "func_signal": "public static <T> Single<List<T>> single(final Query<T> query)", "code": "{\n    return Single.create(emitter -> {\n        query.subscribe().single().observer(data -> {\n            if (!emitter.isDisposed()) {\n                emitter.onSuccess(data);\n            }\n        });\n        // no need to cancel, single never subscribes\n    });\n}", "path": "objectbox-java/objectbox-rxjava3/src/main/java/io/objectbox/rx3/RxQuery.java", "commit_date": "2020-04-28 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Transforms the original data from the publisher to something that is more helpful to your application.\n * The transformation is done in an asynchronous thread.\n * The observer will be called in the same asynchronous thread unless a Scheduler is defined using\n * {@link #on(Scheduler)}.\n * <p>\n * This is roughly equivalent to the map operator as known in Rx and Kotlin.\n *\n * @param <TO> The class the data is transformed to\n */\n", "func_signal": "public <TO> SubscriptionBuilder<TO> transform(final DataTransformer<T, TO> transformer)", "code": "{\n    if (this.transformer != null) {\n        throw new IllegalStateException(\"Only one transformer allowed\");\n    }\n    this.transformer = (DataTransformer<T, Object>) transformer;\n    return (SubscriptionBuilder<TO>) this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/reactive/SubscriptionBuilder.java", "commit_date": "2020-04-06 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "// finalize()\n", "func_signal": "@Override\n   protected void finalize() throws Throwable", "code": "{\n       close();\n       super.finalize();\n   }", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/sync/server/SyncServerImpl.java", "commit_date": "2020-10-19 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to new values.\n */\n", "func_signal": "public Query<T> setParameters(Property<?> property, String[] values)", "code": "{\n    nativeSetParameters(handle, property.getEntityId(), property.getId(), null, values);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to new values.\n */\n", "func_signal": "public Query<T> setParameters(Property<?> property, long[] values)", "code": "{\n    nativeSetParameters(handle, property.getEntityId(), property.getId(), null, values);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to new values.\n *\n * @param alias as defined using {@link QueryBuilder#parameterAlias(String)}.\n */\n", "func_signal": "public Query<T> setParameters(String alias, int[] values)", "code": "{\n    nativeSetParameters(handle, 0, 0, alias, values);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Find the first Object matching the query.\n */\n", "func_signal": "@Nullable\npublic T findFirst()", "code": "{\n    ensureNoFilterNoComparator();\n    return callInReadTx(() -> {\n        @SuppressWarnings(\"unchecked\")\n        T entity = (T) nativeFindFirst(handle, cursorHandle());\n        resolveEagerRelation(entity);\n        return entity;\n    });\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to a new value.\n *\n * @param alias as defined using {@link QueryBuilder#parameterAlias(String)}.\n */\n", "func_signal": "public Query<T> setParameter(String alias, long value)", "code": "{\n    nativeSetParameter(handle, 0, 0, alias, value);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to a new value.\n *\n * @param alias as defined using {@link QueryBuilder#parameterAlias(String)}.\n */\n", "func_signal": "public Query<T> setParameter(String alias, double value)", "code": "{\n    nativeSetParameter(handle, 0, 0, alias, value);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to new values.\n *\n * @param alias as defined using {@link QueryBuilder#parameterAlias(String)}.\n */\n", "func_signal": "public Query<T> setParameters(String alias, long[] values)", "code": "{\n    nativeSetParameters(handle, 0, 0, alias, values);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Sets a parameter previously given to the {@link QueryBuilder} to a new value.\n *\n * @param alias as defined using {@link QueryBuilder#parameterAlias(String)}.\n */\n", "func_signal": "public Query<T> setParameter(String alias, String value)", "code": "{\n    nativeSetParameter(handle, 0, 0, alias, value);\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * The given {@link ErrorObserver} is notified when the {@link DataTransformer}\n * ({@link #transform(DataTransformer)}) or {@link DataObserver} ({@link #observer(DataObserver)})\n * threw an exception.\n */\n", "func_signal": "public SubscriptionBuilder<T> onError(ErrorObserver errorObserver)", "code": "{\n    if (this.errorObserver != null) {\n        throw new IllegalStateException(\"Only one errorObserver allowed\");\n    }\n    this.errorObserver = errorObserver;\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/reactive/SubscriptionBuilder.java", "commit_date": "2020-04-06 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Find all Objects matching the query between the given offset and limit. This helps with pagination.\n */\n", "func_signal": "@Nonnull\npublic List<T> find(final long offset, final long limit)", "code": "{\n    ensureNoFilterNoComparator();\n    return callInReadTx(() -> {\n        List<T> entities = nativeFind(handle, cursorHandle(), offset, limit);\n        resolveEagerRelations(entities);\n        return entities;\n    });\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "//    private boolean sync;\n", "func_signal": "@Internal\npublic SubscriptionBuilder(DataPublisher<T> publisher, @Nullable Object param, ExecutorService threadPool)", "code": "{\n    this.publisher = publisher;\n    publisherParam = param;\n    this.threadPool = threadPool;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/reactive/SubscriptionBuilder.java", "commit_date": "2020-04-06 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Find all Objects matching the query.\n */\n", "func_signal": "@Nonnull\npublic List<T> find()", "code": "{\n    return callInReadTx(() -> {\n        List<T> entities = nativeFind(Query.this.handle, cursorHandle(), 0, 0);\n        if (filter != null) {\n            Iterator<T> iterator = entities.iterator();\n            while (iterator.hasNext()) {\n                T entity = iterator.next();\n                if (!filter.keep(entity)) {\n                    iterator.remove();\n                }\n            }\n        }\n        resolveEagerRelations(entities);\n        if (comparator != null) {\n            Collections.sort(entities, comparator);\n        }\n        return entities;\n    });\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Like {@link #findIds()}, but wraps the Object IDs in an unmodifiable, caching {@link LazyList}\n * so Objects can be retrieved on demand. The LazyList caches retrieved Objects supporting almost\n * all {@link List} operations, at the expense of used memory. See {@link LazyList} for details.\n */\n", "func_signal": "@Nonnull\npublic LazyList<T> findLazyCached()", "code": "{\n    ensureNoFilterNoComparator();\n    return new LazyList<>(box, findIds(), true);\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Like {@link #findIds()}, but wraps the Object IDs in an unmodifiable {@link LazyList}\n * so Objects can be retrieved on demand. The LazyList does not cache retrieved Objects, so only basic\n * {@link List} operations like getting or iterating list items are supported. See {@link LazyList} for details.\n */\n", "func_signal": "@Nonnull\npublic LazyList<T> findLazy()", "code": "{\n    ensureNoFilterNoComparator();\n    return new LazyList<>(box, findIds(), false);\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/query/Query.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Uses a weak reference for the observer.\n * It is still advised to remove observers explicitly if possible: relying on the garbage collection may cause\n * non-deterministic timing. Until the weak reference is actually cleared by GC, it may still receive notifications.\n */\n", "func_signal": "public SubscriptionBuilder<T> weak()", "code": "{\n    weak = true;\n    return this;\n}", "path": "objectbox-java/objectbox-java/src/main/java/io/objectbox/reactive/SubscriptionBuilder.java", "commit_date": "2020-04-06 00:00:00", "repo_name": "objectbox/objectbox-java", "stars": 4284, "license": "apache-2.0", "language": "java", "size": 2692}
{"docstring": "/**\n * Set OnItemMoveListener.\n *\n * @param listener {@link OnItemMoveListener}.\n */\n", "func_signal": "public void setOnItemMoveListener(OnItemMoveListener listener)", "code": "{\n    initializeItemTouchHelper();\n    this.mItemTouchHelper.setOnItemMoveListener(listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set to click menu listener.\n */\n", "func_signal": "public void setOnItemMenuClickListener(OnItemMenuClickListener listener)", "code": "{\n    if (listener == null) return;\n    checkAdapterExist(\"Cannot set menu item click listener, setAdapter has already been called.\");\n    this.mOnItemMenuClickListener = new ItemMenuClickListener(this, listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Use the default to load more View.\n */\n", "func_signal": "public void useDefaultLoadMore()", "code": "{\n    DefaultLoadMoreView defaultLoadMoreView = new DefaultLoadMoreView(getContext());\n    addFooterView(defaultLoadMoreView);\n    setLoadMoreView(defaultLoadMoreView);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Close menu.\n */\n", "func_signal": "public void smoothCloseMenu()", "code": "{\n    if (mOldSwipedLayout != null && mOldSwipedLayout.isMenuOpen()) {\n        mOldSwipedLayout.smoothCloseMenu();\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Star swipe a item.\n *\n * @param viewHolder the ViewHolder to start swiping. It must be a direct child of RecyclerView.\n */\n", "func_signal": "public void startSwipe(ViewHolder viewHolder)", "code": "{\n    initializeItemTouchHelper();\n    this.mItemTouchHelper.startSwipe(viewHolder);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Add view at the footer.\n */\n", "func_signal": "public void addFooterView(View view)", "code": "{\n    mFooterViewList.add(view);\n    if (mAdapterWrapper != null) {\n        mAdapterWrapper.addFooterViewAndNotify(view);\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Get size of footer.\n */\n", "func_signal": "public int getFooterCount()", "code": "{\n    if (mAdapterWrapper == null) return 0;\n    return mAdapterWrapper.getFooterCount();\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Remove view from header.\n */\n", "func_signal": "public void removeHeaderView(View view)", "code": "{\n    mHeaderViewList.remove(view);\n    if (mAdapterWrapper != null) {\n        mAdapterWrapper.removeHeaderViewAndNotify(view);\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Get size of headers.\n */\n", "func_signal": "public int getHeaderCount()", "code": "{\n    if (mAdapterWrapper == null) return 0;\n    return mAdapterWrapper.getHeaderCount();\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set OnItemStateChangedListener.\n *\n * @param listener {@link OnItemStateChangedListener}.\n */\n", "func_signal": "public void setOnItemStateChangedListener(OnItemStateChangedListener listener)", "code": "{\n    initializeItemTouchHelper();\n    this.mItemTouchHelper.setOnItemStateChangedListener(listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set the item menu to enable status.\n *\n * @param position the position of the item.\n * @param enabled true means available, otherwise not available; default is true.\n */\n", "func_signal": "public void setSwipeItemMenuEnabled(int position, boolean enabled)", "code": "{\n    if (enabled) {\n        if (mDisableSwipeItemMenuList.contains(position)) {\n            mDisableSwipeItemMenuList.remove(Integer.valueOf(position));\n        }\n    } else {\n        if (!mDisableSwipeItemMenuList.contains(position)) {\n            mDisableSwipeItemMenuList.add(position);\n        }\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Add view at the headers.\n */\n", "func_signal": "public void addHeaderView(View view)", "code": "{\n    mHeaderViewList.add(view);\n    if (mAdapterWrapper != null) {\n        mAdapterWrapper.addHeaderViewAndNotify(view);\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set OnItemMovementListener.\n *\n * @param listener {@link OnItemMovementListener}.\n */\n", "func_signal": "public void setOnItemMovementListener(OnItemMovementListener listener)", "code": "{\n    initializeItemTouchHelper();\n    this.mItemTouchHelper.setOnItemMovementListener(listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Load more done.\n *\n * @param dataEmpty data is empty ?\n * @param hasMore has more data ?\n */\n", "func_signal": "public final void loadMoreFinish(boolean dataEmpty, boolean hasMore)", "code": "{\n    isLoadMore = false;\n    isLoadError = false;\n\n    mDataEmpty = dataEmpty;\n    mHasMore = hasMore;\n\n    if (mLoadMoreView != null) {\n        mLoadMoreView.onLoadFinish(dataEmpty, hasMore);\n    }\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Get the original adapter.\n */\n", "func_signal": "public Adapter getOriginAdapter()", "code": "{\n    if (mAdapterWrapper == null) return null;\n    return mAdapterWrapper.getOriginAdapter();\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set item click listener.\n */\n", "func_signal": "public void setOnItemLongClickListener(OnItemLongClickListener listener)", "code": "{\n    if (listener == null) return;\n    checkAdapterExist(\"Cannot set item long click listener, setAdapter has already been called.\");\n    this.mOnItemLongClickListener = new ItemLongClickListener(this, listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Set item click listener.\n */\n", "func_signal": "public void setOnItemClickListener(OnItemClickListener listener)", "code": "{\n    if (listener == null) return;\n    checkAdapterExist(\"Cannot set item click listener, setAdapter has already been called.\");\n    this.mOnItemClickListener = new ItemClickListener(this, listener);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Start drag a item.\n *\n * @param viewHolder the ViewHolder to start dragging. It must be a direct child of RecyclerView.\n */\n", "func_signal": "public void startDrag(ViewHolder viewHolder)", "code": "{\n    initializeItemTouchHelper();\n    this.mItemTouchHelper.startDrag(viewHolder);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Get ViewType of item.\n */\n", "func_signal": "public int getItemViewType(int position)", "code": "{\n    if (mAdapterWrapper == null) return 0;\n    return mAdapterWrapper.getItemViewType(position);\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Get can long press drag.\n *\n * @return drag true, otherwise is can't.\n */\n", "func_signal": "public boolean isLongPressDragEnabled()", "code": "{\n    initializeItemTouchHelper();\n    return this.mItemTouchHelper.isLongPressDragEnabled();\n}", "path": "SwipeRecyclerView/support/src/main/java/com/yanzhenjie/recyclerview/SwipeRecyclerView.java", "commit_date": "2019-01-18 00:00:00", "repo_name": "yanzhenjie/SwipeRecyclerView", "stars": 5552, "license": "apache-2.0", "language": "java", "size": 29347}
{"docstring": "/**\n * Returns the cache entry with the specified key if it exists, null otherwise.\n */\n", "func_signal": "@Override\npublic synchronized Entry get(String key)", "code": "{\n    CacheHeader entry = mEntries.get(key);\n    // if the entry does not exist, return.\n    if (entry == null) {\n        return null;\n    }\n\n    File file = getFileForKey(key);\n    CountingInputStream cis = null;\n    try {\n        cis = new CountingInputStream(new BufferedInputStream(new FileInputStream(file)));\n        CacheHeader.readHeader(cis); // eat header\n        byte[] data = streamToBytes(cis, (int) (file.length() - cis.bytesRead));\n        return entry.toCacheEntry(data);\n    } catch (IOException e) {\n        VolleyLog.d(\"%s: %s\", file.getAbsolutePath(), e.toString());\n        remove(key);\n        return null;\n    }  catch (NegativeArraySizeException e) {\n        VolleyLog.d(\"%s: %s\", file.getAbsolutePath(), e.toString());\n        remove(key);\n        return null;\n    } finally {\n        if (cis != null) {\n            try {\n                cis.close();\n            } catch (IOException ioe) {\n                return null;\n            }\n        }\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Removes the specified key from the cache if it exists.\n */\n", "func_signal": "@Override\npublic synchronized void remove(String key)", "code": "{\n    boolean deleted = getFileForKey(key).delete();\n    removeEntry(key);\n    if (!deleted) {\n        VolleyLog.d(\"Could not delete cache entry for key=%s, filename=%s\",\n                key, getFilenameForKey(key));\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param jsonRequest A {@link JSONObject} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonArrayRequest(int method, String url, JSONObject jsonRequest,\n                        Listener<JSONArray> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,\n            errorListener);\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/JsonArrayRequest.java", "commit_date": "2015-03-20 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "// TODO: this isn't really \"until empty\" it's \"until next call to take() after empty\"\n", "func_signal": "public void waitUntilEmpty(long timeoutMillis)\n        throws TimeoutException, InterruptedException", "code": "{\n    add(mStopRequest);\n    if (!mStopEvent.tryAcquire(timeoutMillis, TimeUnit.MILLISECONDS)) {\n        throw new TimeoutException();\n    }\n}", "path": "android-volley/src/test/java/com/android/volley/mock/WaitableQueue.java", "commit_date": "2014-12-05 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Reads the header off of an InputStream and returns a CacheHeader object.\n * @param is The InputStream to read from.\n * @throws IOException\n */\n", "func_signal": "public static CacheHeader readHeader(InputStream is) throws IOException", "code": "{\n    CacheHeader entry = new CacheHeader();\n    int magic = readInt(is);\n    if (magic != CACHE_MAGIC) {\n        // don't bother deleting, it'll get pruned eventually\n        throw new IOException();\n    }\n    entry.key = readString(is);\n    entry.etag = readString(is);\n    if (entry.etag.equals(\"\")) {\n        entry.etag = null;\n    }\n    entry.serverDate = readLong(is);\n    entry.lastModified = readLong(is);\n    entry.ttl = readLong(is);\n    entry.softTtl = readLong(is);\n    entry.responseHeaders = readStringStringMap(is);\n\n    return entry;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Constructs an instance of the DiskBasedCache at the specified directory.\n * @param rootDirectory The root directory of the cache.\n * @param maxCacheSizeInBytes The maximum size of the cache in bytes.\n */\n", "func_signal": "public DiskBasedCache(File rootDirectory, int maxCacheSizeInBytes)", "code": "{\n    mRootDirectory = rootDirectory;\n    mMaxCacheSizeInBytes = maxCacheSizeInBytes;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Simple wrapper around {@link InputStream#read()} that throws EOFException\n * instead of returning -1.\n */\n", "func_signal": "private static int read(InputStream is) throws IOException", "code": "{\n    int b = is.read();\n    if (b == -1) {\n        throw new EOFException();\n    }\n    return b;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Puts the entry with the specified key into the cache.\n */\n", "func_signal": "@Override\npublic synchronized void put(String key, Entry entry)", "code": "{\n    pruneIfNeeded(entry.data.length);\n    File file = getFileForKey(key);\n    try {\n        BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n        CacheHeader e = new CacheHeader(key, entry);\n        boolean success = e.writeHeader(fos);\n        if (!success) {\n            fos.close();\n            VolleyLog.d(\"Failed to write header for %s\", file.getAbsolutePath());\n            throw new IOException();\n        }\n        fos.write(entry.data);\n        fos.close();\n        putEntry(key, e);\n        return;\n    } catch (IOException e) {\n    }\n    boolean deleted = file.delete();\n    if (!deleted) {\n        VolleyLog.d(\"Could not clean up file %s\", file.getAbsolutePath());\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is\n * <code>null</code>, <code>POST</code> otherwise.\n *\n * @see #JsonArrayRequest(int, String, JSONArray, Listener, ErrorListener)\n */\n", "func_signal": "public JsonArrayRequest(String url, JSONArray jsonRequest, Listener<JSONArray> listener,\n                        ErrorListener errorListener)", "code": "{\n    this(jsonRequest == null ? Method.GET : Method.POST, url, jsonRequest,\n            listener, errorListener);\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/JsonArrayRequest.java", "commit_date": "2015-03-20 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is\n * <code>null</code>, <code>POST</code> otherwise.\n *\n * @see #JsonArrayRequest(int, String, JSONObject, Listener, ErrorListener)\n */\n", "func_signal": "public JsonArrayRequest(String url, JSONObject jsonRequest, Listener<JSONArray> listener,\n                         ErrorListener errorListener)", "code": "{\n    this(jsonRequest == null ? Method.GET : Method.POST, url, jsonRequest,\n            listener, errorListener);\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/JsonArrayRequest.java", "commit_date": "2015-03-20 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Creates a pseudo-unique filename for the specified cache key.\n * @param key The key to generate a file name for.\n * @return A pseudo-unique filename.\n */\n", "func_signal": "private String getFilenameForKey(String key)", "code": "{\n    int firstHalfLength = key.length() / 2;\n    String localFilename = String.valueOf(key.substring(0, firstHalfLength).hashCode());\n    localFilename += String.valueOf(key.substring(firstHalfLength).hashCode());\n    return localFilename;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Removes the entry identified by 'key' from the cache.\n */\n", "func_signal": "private void removeEntry(String key)", "code": "{\n    CacheHeader entry = mEntries.get(key);\n    if (entry != null) {\n        mTotalSize -= entry.size;\n        mEntries.remove(key);\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Creates a default instance of the worker pool and calls {@link RequestQueue#start()} on it.\n * You may set a maximum size of the disk cache in bytes.\n *\n * @param context A {@link Context} to use for creating the cache dir.\n * @param stack An {@link HttpStack} to use for the network, or null for default.\n * @param maxDiskCacheBytes the maximum size of the disk cache, in bytes. Use -1 for default size.\n * @return A started {@link RequestQueue} instance.\n */\n", "func_signal": "public static RequestQueue newRequestQueue(Context context, HttpStack stack, int maxDiskCacheBytes)", "code": "{\n    File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);\n\n    String userAgent = \"volley/0\";\n    try {\n        String packageName = context.getPackageName();\n        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);\n        userAgent = packageName + \"/\" + info.versionCode;\n    } catch (NameNotFoundException e) {\n    }\n\n    if (stack == null) {\n        if (Build.VERSION.SDK_INT >= 9) {\n            stack = new HurlStack();\n        } else {\n            // Prior to Gingerbread, HttpUrlConnection was unreliable.\n            // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n            stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));\n        }\n    }\n\n    Network network = new BasicNetwork(stack);\n    \n    RequestQueue queue;\n    if (maxDiskCacheBytes <= -1)\n    {\n    \t// No maximum size specified\n    \tqueue = new RequestQueue(new DiskBasedCache(cacheDir), network);\n    }\n    else\n    {\n    \t// Disk cache size specified\n    \tqueue = new RequestQueue(new DiskBasedCache(cacheDir, maxDiskCacheBytes), network);\n    }\n\n    queue.start();\n\n    return queue;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/Volley.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param jsonRequest A {@link JSONArray} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonArrayRequest(int method, String url, JSONArray jsonRequest, \n        Listener<JSONArray> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,\n            errorListener);\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/JsonArrayRequest.java", "commit_date": "2015-03-20 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Prunes the cache to fit the amount of bytes specified.\n * @param neededSpace The amount of bytes we are trying to fit into the cache.\n */\n", "func_signal": "private void pruneIfNeeded(int neededSpace)", "code": "{\n    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {\n        return;\n    }\n    if (VolleyLog.DEBUG) {\n        VolleyLog.v(\"Pruning old cache entries.\");\n    }\n\n    long before = mTotalSize;\n    int prunedFiles = 0;\n    long startTime = SystemClock.elapsedRealtime();\n\n    Iterator<Map.Entry<String, CacheHeader>> iterator = mEntries.entrySet().iterator();\n    while (iterator.hasNext()) {\n        Map.Entry<String, CacheHeader> entry = iterator.next();\n        CacheHeader e = entry.getValue();\n        boolean deleted = getFileForKey(e.key).delete();\n        if (deleted) {\n            mTotalSize -= e.size;\n        } else {\n           VolleyLog.d(\"Could not delete cache entry for key=%s, filename=%s\",\n                   e.key, getFilenameForKey(e.key));\n        }\n        iterator.remove();\n        prunedFiles++;\n\n        if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {\n            break;\n        }\n    }\n\n    if (VolleyLog.DEBUG) {\n        VolleyLog.v(\"pruned %d files, %d bytes, %d ms\",\n                prunedFiles, (mTotalSize - before), SystemClock.elapsedRealtime() - startTime);\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Creates a cache entry for the specified data.\n */\n", "func_signal": "public Entry toCacheEntry(byte[] data)", "code": "{\n    Entry e = new Entry();\n    e.data = data;\n    e.etag = etag;\n    e.serverDate = serverDate;\n    e.lastModified = lastModified;\n    e.ttl = ttl;\n    e.softTtl = softTtl;\n    e.responseHeaders = responseHeaders;\n    return e;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Reads the contents of an InputStream into a byte[].\n * */\n", "func_signal": "private static byte[] streamToBytes(InputStream in, int length) throws IOException", "code": "{\n    byte[] bytes = new byte[length];\n    int count;\n    int pos = 0;\n    while (pos < length && ((count = in.read(bytes, pos, length - pos)) != -1)) {\n        pos += count;\n    }\n    if (pos != length) {\n        throw new IOException(\"Expected \" + length + \" bytes, read \" + pos + \" bytes\");\n    }\n    return bytes;\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Prepares for the next retry by applying a backoff to the timeout.\n * @param error The error code of the last attempt.\n */\n", "func_signal": "@Override\npublic void retry(VolleyError error) throws VolleyError", "code": "{\n    mCurrentRetryCount++;\n    mCurrentTimeoutMs += (mCurrentTimeoutMs * mBackoffMultiplier);\n    if (!hasAttemptRemaining()) {\n        throw error;\n    }\n}", "path": "android-volley/src/main/java/com/android/volley/DefaultRetryPolicy.java", "commit_date": "2015-03-19 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Constructs a new retry policy.\n * @param initialTimeoutMs The initial timeout for the policy.\n * @param maxNumRetries The maximum number of retries.\n * @param backoffMultiplier Backoff multiplier for the policy.\n */\n", "func_signal": "public DefaultRetryPolicy(int initialTimeoutMs, int maxNumRetries, float backoffMultiplier)", "code": "{\n    mCurrentTimeoutMs = initialTimeoutMs;\n    mMaxNumRetries = maxNumRetries;\n    mBackoffMultiplier = backoffMultiplier;\n}", "path": "android-volley/src/main/java/com/android/volley/DefaultRetryPolicy.java", "commit_date": "2015-03-19 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * Puts the entry with the specified key into the cache.\n * @param key The key to identify the entry by.\n * @param entry The entry to cache.\n */\n", "func_signal": "private void putEntry(String key, CacheHeader entry)", "code": "{\n    if (!mEntries.containsKey(key)) {\n        mTotalSize += entry.size;\n    } else {\n        CacheHeader oldEntry = mEntries.get(key);\n        mTotalSize += (entry.size - oldEntry.size);\n    }\n    mEntries.put(key, entry);\n}", "path": "android-volley/src/main/java/com/android/volley/toolbox/DiskBasedCache.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "mcxiaoke/android-volley", "stars": 4300, "license": "None", "language": "java", "size": 952}
{"docstring": "/**\n * \u6298\u6263\u8ba1\u7b97\n * 1. \u4f7f\u7528\u5546\u54c1\u4ef7\u683c\u4e58\u4ee5\u6298\u6263\u6bd4\u4f8b\uff0c\u4e3a\u6700\u540e\u652f\u4ed8\u91d1\u989d\n * 2. \u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\n * 3. \u6700\u4f4e\u652f\u4ed8\u91d1\u989d1\u5143\n */\n", "func_signal": "public BigDecimal discountAmount(Double couponInfo, BigDecimal skuPrice)", "code": "{\n    BigDecimal discountAmount = skuPrice.multiply(new BigDecimal(couponInfo)).setScale(2, BigDecimal.ROUND_HALF_UP);\n    if (discountAmount.compareTo(BigDecimal.ZERO) < 1) return BigDecimal.ONE;\n    return discountAmount;\n}", "path": "itstack-demo-design/itstack-demo-design-20-02/src/main/java/org/itstack/demo/design/impl/ZKCouponDiscount.java", "commit_date": "2020-07-05 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u5f97\u5230\u5f53\u524dClassLoader\n *\n * @param clazz \u67d0\u4e2a\u7c7b\n * @return ClassLoader\n */\n", "func_signal": "public static ClassLoader getClassLoader(Class<?> clazz)", "code": "{\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (loader != null) {\n        return loader;\n    }\n    if (clazz != null) {\n        loader = clazz.getClassLoader();\n        if (loader != null) {\n            return loader;\n        }\n        return clazz.getClassLoader();\n    }\n    return ClassLoader.getSystemClassLoader();\n}", "path": "itstack-demo-design/itstack-demo-design-2-02/src/main/java/org/itstack/demo/desgin/util/ClassLoaderUtils.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u4e71\u5e8fMap\u5143\u7d20\uff0c\u8bb0\u5f55\u5bf9\u5e94\u7b54\u6848key\n * @param option \u9898\u76ee\n * @param key    \u7b54\u6848\n * @return Topic \u4e71\u5e8f\u540e {A=c., B=d., C=a., D=b.}\n */\n", "func_signal": "static public Topic random(Map<String, String> option, String key)", "code": "{\n    Set<String> keySet = option.keySet();\n    ArrayList<String> keyList = new ArrayList<String>(keySet);\n    Collections.shuffle(keyList);\n    HashMap<String, String> optionNew = new HashMap<String, String>();\n    int idx = 0;\n    String keyNew = \"\";\n    for (String next : keySet) {\n        String randomKey = keyList.get(idx++);\n        if (key.equals(next)) {\n            keyNew = randomKey;\n        }\n        optionNew.put(randomKey, option.get(next));\n    }\n    return new Topic(optionNew, keyNew);\n}", "path": "itstack-demo-design/itstack-demo-design-4-02/src/main/java/org/itstack/demo/design/util/TopicRandomUtil.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "//\u83b7\u53d6\u5c5e\u6027\u503c\n", "func_signal": "private String getFiledValue(String filed, Object[] args)", "code": "{\n    String filedValue = null;\n    for (Object arg : args) {\n        try {\n            if (null == filedValue || \"\".equals(filedValue)) {\n                filedValue = BeanUtils.getProperty(arg, filed);\n            } else {\n                break;\n            }\n        } catch (Exception e) {\n            if (args.length == 1) {\n                return args[0].toString();\n            }\n        }\n    }\n    return filedValue;\n}", "path": "itstack-demo-design/itstack-demo-design-10-02/src/main/java/org/itstack/demo/design/door/DoJoinPoint.java", "commit_date": "2020-06-11 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "// \u83b7\u53d6SQL\u8bed\u53e5\u4fe1\u606f\n", "func_signal": "private Map<String, XNode> mapperElement(List<Element> list)", "code": "{\n    Map<String, XNode> map = new HashMap<>();\n\n    Element element = list.get(0);\n    List content = element.content();\n    for (Object o : content) {\n        Element e = (Element) o;\n        String resource = e.attributeValue(\"resource\");\n\n        try {\n            Reader reader = Resources.getResourceAsReader(resource);\n            SAXReader saxReader = new SAXReader();\n            Document document = saxReader.read(new InputSource(reader));\n            Element root = document.getRootElement();\n            //\u547d\u540d\u7a7a\u95f4\n            String namespace = root.attributeValue(\"namespace\");\n\n            // SELECT\n            List<Element> selectNodes = root.selectNodes(\"select\");\n            for (Element node : selectNodes) {\n                String id = node.attributeValue(\"id\");\n                String parameterType = node.attributeValue(\"parameterType\");\n                String resultType = node.attributeValue(\"resultType\");\n                String sql = node.getText();\n\n                // ? \u5339\u914d\n                Map<Integer, String> parameter = new HashMap<>();\n                Pattern pattern = Pattern.compile(\"(#\\\\{(.*?)})\");\n                Matcher matcher = pattern.matcher(sql);\n                for (int i = 1; matcher.find(); i++) {\n                    String g1 = matcher.group(1);\n                    String g2 = matcher.group(2);\n                    parameter.put(i, g2);\n                    sql = sql.replace(g1, \"?\");\n                }\n\n                XNode xNode = new XNode();\n                xNode.setNamespace(namespace);\n                xNode.setId(id);\n                xNode.setParameterType(parameterType);\n                xNode.setResultType(resultType);\n                xNode.setSql(sql);\n                xNode.setParameter(parameter);\n\n                map.put(namespace + \".\" + id, xNode);\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n\n    }\n    return map;\n}", "path": "itstack-demo-design/itstack-demo-design-16-02/src/main/java/org/itstack/demo/design/mediator/SqlSessionFactoryBuilder.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u751f\u6210\u5546\u54c1\u63a8\u5e7f\u6d77\u62a5\n *\n * @param skuUrl \u5546\u54c1\u5730\u5740(\u4eac\u4e1c\u3001\u6dd8\u5b9d\u3001\u5f53\u5f53)\n * @return \u6d77\u62a5\u56fe\u7247base64\u4f4d\u4fe1\u606f\n */\n", "func_signal": "public String generateGoodsPoster(String skuUrl)", "code": "{\n    if (!login(uId, uPwd)) return null;             // 1. \u9a8c\u8bc1\u767b\u5f55\n    Map<String, String> reptile = reptile(skuUrl);  // 2. \u722c\u866b\u5546\u54c1\n    return createBase64(reptile);                   // 3. \u7ec4\u88c5\u6d77\u62a5\n}", "path": "itstack-demo-design/itstack-demo-design-21-00/src/main/java/org/itstack/demo/design/NetMall.java", "commit_date": "2020-07-07 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u8ba2\u9605\n * @param eventType \u4e8b\u4ef6\u7c7b\u578b\n * @param listener  \u76d1\u542c\n */\n", "func_signal": "public void subscribe(Enum<EventType> eventType, EventListener listener)", "code": "{\n    List<EventListener> users = listeners.get(eventType);\n    users.add(listener);\n}", "path": "itstack-demo-design/itstack-demo-design-18-02/src/main/java/org/itstack/demo/design/event/EventManager.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u6d3b\u52a8\u72b6\u6001\u53d8\u66f4\n * 1. \u7f16\u8f91\u4e2d -> \u63d0\u5ba1\u3001\u5173\u95ed\n * 2. \u5ba1\u6838\u901a\u8fc7 -> \u62d2\u7edd\u3001\u5173\u95ed\u3001\u6d3b\u52a8\u4e2d\n * 3. \u5ba1\u6838\u62d2\u7edd -> \u64a4\u5ba1\u3001\u5173\u95ed\n * 4. \u6d3b\u52a8\u4e2d -> \u5173\u95ed\n * 5. \u6d3b\u52a8\u5173\u95ed -> \u5f00\u542f\n * 6. \u6d3b\u52a8\u5f00\u542f -> \u5173\u95ed\n *\n * @param activityId   \u6d3b\u52a8ID\n * @param beforeStatus \u53d8\u66f4\u524d\u72b6\u6001\n * @param afterStatus  \u53d8\u66f4\u540e\u72b6\u6001\n * @return \u8fd4\u56de\u7ed3\u679c\n */\n", "func_signal": "public Result execStatus(String activityId, Enum<Status> beforeStatus, Enum<Status> afterStatus)", "code": "{\n\n    // 1. \u7f16\u8f91\u4e2d -> \u63d0\u5ba1\u3001\u5173\u95ed\n    if (Status.Editing.equals(beforeStatus)) {\n        if (Status.Check.equals(afterStatus) || Status.Close.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    // 2. \u5ba1\u6838\u901a\u8fc7 -> \u62d2\u7edd\u3001\u5173\u95ed\u3001\u6d3b\u52a8\u4e2d\n    if (Status.Pass.equals(beforeStatus)) {\n        if (Status.Refuse.equals(afterStatus) || Status.Doing.equals(afterStatus) || Status.Close.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    // 3. \u5ba1\u6838\u62d2\u7edd -> \u64a4\u5ba1\u3001\u5173\u95ed\n    if (Status.Refuse.equals(beforeStatus)) {\n        if (Status.Editing.equals(afterStatus) || Status.Close.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    // 4. \u6d3b\u52a8\u4e2d -> \u5173\u95ed\n    if (Status.Doing.equals(beforeStatus)) {\n        if (Status.Close.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    // 5. \u6d3b\u52a8\u5173\u95ed -> \u5f00\u542f\n    if (Status.Close.equals(beforeStatus)) {\n        if (Status.Open.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    // 6. \u6d3b\u52a8\u5f00\u542f -> \u5173\u95ed\n    if (Status.Open.equals(beforeStatus)) {\n        if (Status.Close.equals(afterStatus)) {\n            ActivityService.execStatus(activityId, beforeStatus, afterStatus);\n            return new Result(\"0000\", \"\u53d8\u66f4\u72b6\u6001\u6210\u529f\");\n        } else {\n            return new Result(\"0001\", \"\u53d8\u66f4\u72b6\u6001\u62d2\u7edd\");\n        }\n    }\n\n    return new Result(\"0001\", \"\u975e\u53ef\u5904\u7406\u7684\u6d3b\u52a8\u72b6\u6001\u53d8\u66f4\");\n\n}", "path": "itstack-demo-design/itstack-demo-design-19-01/src/main/java/org/itstack/demo/design/ActivityExecStatusController.java", "commit_date": "2020-07-02 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u53d6\u6d88\u8ba2\u9605\n * @param eventType \u4e8b\u4ef6\u7c7b\u578b\n * @param listener  \u76d1\u542c\n */\n", "func_signal": "public void unsubscribe(Enum<EventType> eventType, EventListener listener)", "code": "{\n    List<EventListener> users = listeners.get(eventType);\n    users.remove(listener);\n}", "path": "itstack-demo-design/itstack-demo-design-18-02/src/main/java/org/itstack/demo/design/event/EventManager.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u901a\u77e5\n * @param eventType \u4e8b\u4ef6\u7c7b\u578b\n * @param result    \u7ed3\u679c\n */\n", "func_signal": "public void notify(Enum<EventType> eventType, LotteryResult result)", "code": "{\n    List<EventListener> users = listeners.get(eventType);\n    for (EventListener listener : users) {\n        listener.doEvent(result);\n    }\n}", "path": "itstack-demo-design/itstack-demo-design-18-02/src/main/java/org/itstack/demo/design/event/EventManager.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u6267\u884c\u72b6\u6001\u53d8\u66f4\n *\n * @param activityId   \u6d3b\u52a8ID\n * @param beforeStatus \u53d8\u66f4\u524d\u72b6\u6001\n * @param afterStatus  \u53d8\u66f4\u540e\u72b6\u6001 b\n */\n", "func_signal": "public static synchronized void execStatus(String activityId, Enum<Status> beforeStatus, Enum<Status> afterStatus)", "code": "{\n    if (!beforeStatus.equals(statusMap.get(activityId))) return;\n    statusMap.put(activityId, afterStatus);\n}", "path": "itstack-demo-design/itstack-demo-design-19-00/src/main/java/org/itstack/demo/design/ActivityService.java", "commit_date": "2020-07-02 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u6ee1\u51cf\u8ba1\u7b97\n * 1. \u5224\u65ad\u6ee1\u8db3x\u5143\u540e-n\u5143\uff0c\u5426\u5219\u4e0d\u51cf\n * 2. \u6700\u4f4e\u652f\u4ed8\u91d1\u989d1\u5143\n */\n", "func_signal": "public BigDecimal discountAmount(Map<String,String> couponInfo, BigDecimal skuPrice)", "code": "{\n    String x = couponInfo.get(\"x\");\n    String o = couponInfo.get(\"n\");\n\n    // \u5c0f\u4e8e\u5546\u54c1\u91d1\u989d\u6761\u4ef6\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u5546\u54c1\u539f\u4ef7\n    if (skuPrice.compareTo(new BigDecimal(x)) < 0) return skuPrice;\n    // \u51cf\u53bb\u4f18\u60e0\u91d1\u989d\u5224\u65ad\n    BigDecimal discountAmount = skuPrice.subtract(new BigDecimal(o));\n    if (discountAmount.compareTo(BigDecimal.ZERO) < 1) return BigDecimal.ONE;\n\n    return discountAmount;\n}", "path": "itstack-demo-design/itstack-demo-design-20-02/src/main/java/org/itstack/demo/design/impl/MJCouponDiscount.java", "commit_date": "2020-07-05 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u5207\u9762\u5b9a\u4e49\n * \u516c\u4f17\u53f7\uff1abugstack\u866b\u6d1e\u6808 | \u6c89\u6dc0\u3001\u5206\u4eab\u3001\u6210\u957f\uff0c\u8ba9\u81ea\u5df1\u548c\u4ed6\u4eba\u90fd\u80fd\u6709\u6240\u6536\u83b7\uff01\n * \u535a  \u5ba2\uff1ahttp://bugstack.cn\n * Create by \u5c0f\u5085\u54e5 on @2020\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DoDoor", "code": "{\n\n    String key() default \"\";\n\n    String returnJson() default \"\";\n\n}", "path": "itstack-demo-design/itstack-demo-design-10-02/src/main/java/org/itstack/demo/design/door/annotation/DoDoor.java", "commit_date": "2020-06-11 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "// \u65f6\u95f4\u683c\u5f0f\u5316\n", "func_signal": "public AuthInfo doAuth(String uId, String orderId, Date authDate) throws ParseException", "code": "{\n\n        // \u4e09\u7ea7\u5ba1\u6279\n        Date date = AuthService.queryAuthInfo(\"1000013\", orderId);\n        if (null == date) return new AuthInfo(\"0001\", \"\u5355\u53f7\uff1a\", orderId, \" \u72b6\u6001\uff1a\u5f85\u4e09\u7ea7\u5ba1\u6279\u8d1f\u8d23\u4eba \", \"\u738b\u5de5\");\n\n        // \u4e8c\u7ea7\u5ba1\u6279\n        if (authDate.after(f.parse(\"2020-06-01 00:00:00\")) && authDate.before(f.parse(\"2020-06-25 23:59:59\"))) {\n            date = AuthService.queryAuthInfo(\"1000012\", orderId);\n            if (null == date) return new AuthInfo(\"0001\", \"\u5355\u53f7\uff1a\", orderId, \" \u72b6\u6001\uff1a\u5f85\u4e8c\u7ea7\u5ba1\u6279\u8d1f\u8d23\u4eba \", \"\u5f20\u7ecf\u7406\");\n        }\n\n        // \u4e00\u7ea7\u5ba1\u6279\n        if (authDate.after(f.parse(\"2020-06-11 00:00:00\")) && authDate.before(f.parse(\"2020-06-20 23:59:59\"))) {\n            date = AuthService.queryAuthInfo(\"1000011\", orderId);\n            if (null == date) return new AuthInfo(\"0001\", \"\u5355\u53f7\uff1a\", orderId, \" \u72b6\u6001\uff1a\u5f85\u4e00\u7ea7\u5ba1\u6279\u8d1f\u8d23\u4eba \", \"\u6bb5\u603b\");\n        }\n\n        return new AuthInfo(\"0001\", \"\u5355\u53f7\uff1a\", orderId, \" \u72b6\u6001\uff1a\u5ba1\u6279\u5b8c\u6210\");\n    }", "path": "itstack-demo-design/itstack-demo-design-13-01/src/main/java/org/itstack/demo/design/AuthController.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u76f4\u51cf\u8ba1\u7b97\n * 1. \u4f7f\u7528\u5546\u54c1\u4ef7\u683c\u51cf\u53bb\u4f18\u60e0\u4ef7\u683c\n * 2. \u6700\u4f4e\u652f\u4ed8\u91d1\u989d1\u5143\n */\n", "func_signal": "public BigDecimal discountAmount(Double couponInfo, BigDecimal skuPrice)", "code": "{\n    BigDecimal discountAmount = skuPrice.subtract(new BigDecimal(couponInfo));\n    if (discountAmount.compareTo(BigDecimal.ZERO) < 1) return BigDecimal.ONE;\n    return discountAmount;\n}", "path": "itstack-demo-design/itstack-demo-design-20-02/src/main/java/org/itstack/demo/design/impl/ZJCouponDiscount.java", "commit_date": "2020-07-05 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "// \u83b7\u53d6\u6570\u636e\u6e90\u914d\u7f6e\u4fe1\u606f\n", "func_signal": "private Map<String, String> dataSource(List<Element> list)", "code": "{\n    Map<String, String> dataSource = new HashMap<>(4);\n    Element element = list.get(0);\n    List content = element.content();\n    for (Object o : content) {\n        Element e = (Element) o;\n        String name = e.attributeValue(\"name\");\n        String value = e.attributeValue(\"value\");\n        dataSource.put(name, value);\n    }\n    return dataSource;\n}", "path": "itstack-demo-design/itstack-demo-design-16-02/src/main/java/org/itstack/demo/design/mediator/SqlSessionFactoryBuilder.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u5f97\u5230\u5f53\u524dClassLoader\n *\n * @return ClassLoader\n */\n", "func_signal": "public static ClassLoader getCurrentClassLoader()", "code": "{\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    if (cl == null) {\n        cl = ClassLoaderUtils.class.getClassLoader();\n    }\n    return cl == null ? ClassLoader.getSystemClassLoader() : cl;\n}", "path": "itstack-demo-design/itstack-demo-design-2-02/src/main/java/org/itstack/demo/desgin/util/ClassLoaderUtils.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u6d4b\u8bd5\u94fe\u63a5\n * \u4eac\u4e1c\uff1bhttps://item.jd.com/100008348542.html\n * \u6dd8\u5b9d\uff1bhttps://detail.tmall.com/item.htm\n * \u5f53\u5f53\uff1bhttp://product.dangdang.com/1509704171.html\n */\n", "func_signal": "@Test\npublic void test_NetMall()", "code": "{\n    NetMall netMall = new JDNetMall(\"1000001\",\"*******\");\n    String base64 = netMall.generateGoodsPoster(\"https://item.jd.com/100008348542.html\");\n    logger.info(\"\u6d4b\u8bd5\u7ed3\u679c\uff1a{}\", base64);\n}", "path": "itstack-demo-design/itstack-demo-design-21-00/src/test/java/org/itstack/demo/design/test/ApiTest.java", "commit_date": "2020-07-07 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u67e5\u8be2\u6d3b\u52a8\u4fe1\u606f\n *\n * @param activityId \u6d3b\u52a8ID\n * @return \u67e5\u8be2\u7ed3\u679c\n */\n", "func_signal": "public static ActivityInfo queryActivityInfo(String activityId)", "code": "{\n    // \u6a21\u62df\u67e5\u8be2\u6d3b\u52a8\u4fe1\u606f\n    ActivityInfo activityInfo = new ActivityInfo();\n    activityInfo.setActivityId(activityId);\n    activityInfo.setActivityName(\"\u65e9\u8d77\u5b66\u4e60\u6253\u5361\u9886\u5956\u6d3b\u52a8\");\n    activityInfo.setStatus(statusMap.get(activityId));\n    activityInfo.setBeginTime(new Date());\n    activityInfo.setEndTime(new Date());\n    return activityInfo;\n}", "path": "itstack-demo-design/itstack-demo-design-19-00/src/main/java/org/itstack/demo/design/ActivityService.java", "commit_date": "2020-07-02 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61(\u53ea\u68c0\u6d4b\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u5176\u5b83\u4e0d\u7ba1\uff09\n *\n * @param clazz \u5bf9\u8c61\u7c7b\n * @param <T>   \u5bf9\u8c61\u5177\u4f53\u7c7b\n * @return \u5bf9\u8c61\u5b9e\u4f8b\n * @throws Exception \u6ca1\u6709\u627e\u5230\u65b9\u6cd5\uff0c\u6216\u8005\u65e0\u6cd5\u5904\u7406\uff0c\u6216\u8005\u521d\u59cb\u5316\u65b9\u6cd5\u5f02\u5e38\u7b49\n */\n", "func_signal": "public static <T> T newInstance(Class<T> clazz) throws Exception", "code": "{\n    if (primitiveSet.contains(clazz)) {\n        return null;\n    }\n    if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {\n        Constructor constructorList[] = clazz.getDeclaredConstructors();\n        Constructor defaultConstructor = null;\n        for (Constructor con : constructorList) {\n            if (con.getParameterTypes().length == 1) {\n                defaultConstructor = con;\n                break;\n            }\n        }\n        if (defaultConstructor != null) {\n            if (defaultConstructor.isAccessible()) {\n                return (T) defaultConstructor.newInstance(new Object[]{null});\n            } else {\n                try {\n                    defaultConstructor.setAccessible(true);\n                    return (T) defaultConstructor.newInstance(new Object[]{null});\n                } finally {\n                    defaultConstructor.setAccessible(false);\n                }\n            }\n        } else {\n            throw new Exception(\"The \" + clazz.getCanonicalName() + \" has no default constructor!\");\n        }\n    }\n    try {\n        return clazz.newInstance();\n    } catch (Exception e) {\n        Constructor<T> constructor = clazz.getDeclaredConstructor();\n        if (constructor.isAccessible()) {\n            throw new Exception(\"The \" + clazz.getCanonicalName() + \" has no default constructor!\", e);\n        } else {\n            try {\n                constructor.setAccessible(true);\n                return constructor.newInstance();\n            } finally {\n                constructor.setAccessible(false);\n            }\n        }\n    }\n}", "path": "itstack-demo-design/itstack-demo-design-2-02/src/main/java/org/itstack/demo/desgin/util/ClassLoaderUtils.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "fuzhengwei/itstack-demo-design", "stars": 6069, "license": "apache-2.0", "language": "java", "size": 1817}
{"docstring": "/**\n * Indicates whether this reader is ready to be read without blocking.\n *\n * @return {@code true} if this reader will not block when {@code read} is\n *         called, {@code false} if unknown or blocking will occur.\n * @throws IOException\n *             if this reader is closed or some other I/O error occurs.\n * @see #read()\n * @see #read(char[], int, int)\n * @see #readLine()\n */\n", "func_signal": "public boolean ready() throws IOException", "code": "{\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        return ((count - pos) > 0) || in.ready();\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Skips {@code amount} characters in this reader. Subsequent\n * {@code read()}s will not return these characters unless {@code reset()}\n * is used. Skipping characters may invalidate a mark if {@code readlimit}\n * is surpassed.\n *\n * @param amount\n *            the maximum number of characters to skip.\n * @return the number of characters actually skipped.\n * @throws IllegalArgumentException\n *             if {@code amount < 0}.\n * @throws IOException\n *             if this reader is closed or some other I/O error occurs.\n * @see #mark(int)\n * @see #markSupported()\n * @see #reset()\n */\n", "func_signal": "public long skip(long amount) throws IOException", "code": "{\n    if (amount < 0) {\n        throw new IllegalArgumentException();\n    }\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        if (amount < 1) {\n            return 0;\n        }\n        if (count - pos >= amount) {\n            pos += amount;\n            return amount;\n        }\n\n        long read = count - pos;\n        pos = count;\n        while (read < amount) {\n            if (fillbuf() == -1) {\n                return read;\n            }\n            if (count - pos >= amount - read) {\n                pos += amount - read;\n                return amount;\n            }\n            // Couldn't get all the characters, skip what we read\n            read += (count - pos);\n            pos = count;\n        }\n        return amount;\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Reads at most {@code length} characters from this reader and stores them\n * at {@code offset} in the character array {@code buffer}. Returns the\n * number of characters actually read or -1 if the end of the source reader\n * has been reached. If all the buffered characters have been used, a mark\n * has not been set and the requested number of characters is larger than\n * this readers buffer size, BufferedReader bypasses the buffer and simply\n * places the results directly into {@code buffer}.\n *\n * @param buffer\n *            the character array to store the characters read.\n * @param offset\n *            the initial position in {@code buffer} to store the bytes read\n *            from this reader.\n * @param length\n *            the maximum number of characters to read, must be\n *            non-negative.\n * @return number of characters read or -1 if the end of the source reader\n *         has been reached.\n * @throws IndexOutOfBoundsException\n *             if {@code offset < 0} or {@code length < 0}, or if\n *             {@code offset + length} is greater than the size of\n *             {@code buffer}.\n * @throws IOException\n *             if this reader is closed or some other I/O error occurs.\n */\n", "func_signal": "public int read(char[] buffer, int offset, int length) throws IOException", "code": "{\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        if (length == 0) {\n            return 0;\n        }\n        int required;\n        if (pos < count) {\n            /* There are bytes available in the buffer. */\n            int copylength = count - pos >= length ? length : count - pos;\n            System.arraycopy(buf, pos, buffer, offset, copylength);\n            pos += copylength;\n            if (copylength == length || !in.ready()) {\n                return copylength;\n            }\n            offset += copylength;\n            required = length - copylength;\n        } else {\n            required = length;\n        }\n\n        while (true) {\n            int read;\n            /*\n             * If we're not marked and the required size is greater than the\n             * buffer, simply read the bytes directly bypassing the buffer.\n             */\n            if (markpos == -1 && required >= buf.length) {\n                read = in.read(buffer, offset, required);\n                if (read == -1) {\n                    return required == length ? -1 : length - required;\n                }\n            } else {\n                if (fillbuf() == -1) {\n                    return required == length ? -1 : length - required;\n                }\n                read = count - pos >= required ? required : count - pos;\n                System.arraycopy(buf, pos, buffer, offset, read);\n                pos += read;\n            }\n            required -= read;\n            if (required == 0) {\n                return length;\n            }\n            if (!in.ready()) {\n                return length - required;\n            }\n            offset += read;\n        }\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "protected void onObscured()", "code": "{\n  onPause();\n  super.onObscured();\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/AuthenticatorScreen.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Returns the next line of text available from this reader. A line is\n * represented by zero or more characters followed by {@code '\\n'},\n * {@code '\\r'}, {@code \"\\r\\n\"} or the end of the reader. The string does\n * not include the newline sequence.\n *\n * @return the contents of the line or {@code null} if no characters were\n *         read before the end of the reader has been reached.\n * @throws IOException\n *             if this reader is closed or some other I/O error occurs.\n */\n", "func_signal": "public String readLine() throws IOException", "code": "{\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        /* Are there buffered characters available? */\n        if ((pos >= count) && (fillbuf() == -1)) {\n            return null;\n        }\n        for (int charPos = pos; charPos < count; charPos++) {\n            char ch = buf[charPos];\n            if (ch > '\\r') {\n                continue;\n            }\n            if (ch == '\\n') {\n                String res = new String(buf, pos, charPos - pos);\n                pos = charPos + 1;\n                return res;\n            } else if (ch == '\\r') {\n                String res = new String(buf, pos, charPos - pos);\n                pos = charPos + 1;\n                if (((pos < count) || (fillbuf() != -1))\n                        && (buf[pos] == '\\n')) {\n                    pos++;\n                }\n                return res;\n            }\n        }\n\n        char eol = '\\0';\n        StringBuffer result = new StringBuffer(80);\n        /* Typical Line Length */\n\n        result.append(buf, pos, count - pos);\n        pos = count;\n        while (true) {\n            /* Are there buffered characters available? */\n            if (pos >= count) {\n                if (eol == '\\n') {\n                    return result.toString();\n                }\n                // attempt to fill buffer\n                if (fillbuf() == -1) {\n                    // characters or null.\n                    return result.length() > 0 || eol != '\\0' ? result\n                            .toString() : null;\n                }\n            }\n            for (int charPos = pos; charPos < count; charPos++) {\n                if (eol == '\\0') {\n                    if ((buf[charPos] == '\\n' || buf[charPos] == '\\r')) {\n                        eol = buf[charPos];\n                    }\n                } else if (eol == '\\r' && (buf[charPos] == '\\n')) {\n                    if (charPos > pos) {\n                        result.append(buf, pos, charPos - pos - 1);\n                    }\n                    pos = charPos + 1;\n                    return result.toString();\n                } else if (eol != '\\0') {\n                    if (charPos > pos) {\n                        result.append(buf, pos, charPos - pos - 1);\n                    }\n                    pos = charPos;\n                    return result.toString();\n                }\n            }\n            if (eol == '\\0') {\n                result.append(buf, pos, count - pos);\n            } else {\n                result.append(buf, pos, count - pos - 1);\n            }\n            pos = count;\n        }\n    }\n\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Reads a single character from this reader and returns it with the two\n * higher-order bytes set to 0. If possible, BufferedReader returns a\n * character from the buffer. If there are no characters available in the\n * buffer, it fills the buffer and then returns a character. It returns -1\n * if there are no more characters in the source reader.\n *\n * @return the character read or -1 if the end of the source reader has been\n *         reached.\n * @throws IOException\n *             if this reader is closed or some other I/O error occurs.\n */\n", "func_signal": "public int read() throws IOException", "code": "{\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        /* Are there buffered characters available? */\n        if (pos < count || fillbuf() != -1) {\n            return buf[pos++];\n        }\n        return -1;\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Constructs a new BufferedReader on the Reader {@code in}. The\n * buffer gets the default size (8 KB).\n *\n * @param in\n *            the Reader that is buffered.\n */\n", "func_signal": "public BufferedReader(Reader in)", "code": "{\n    super(in);\n    this.in = in;\n    buf = new char[8192];\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Encodes the given string {@code s} in a x-www-form-urlencoded string\n * using the specified encoding scheme {@code enc}.\n * <p>\n * All characters except letters ('a'..'z', 'A'..'Z') and numbers ('0'..'9')\n * and characters '.', '-', '*', '_' are converted into their hexadecimal\n * value prepended by '%'. For example: '#' -> %23. In addition, spaces are\n * substituted by '+'\n * </p>\n *\n * @param s\n *            the string to be encoded.\n * @param enc\n *            the encoding scheme to be used.\n * @return the encoded string.\n * @throws UnsupportedEncodingException\n *             if the specified encoding scheme is invalid.\n */\n", "func_signal": "public static String encode(String s, String enc)\n        throws UnsupportedEncodingException", "code": "{\n    if (s == null || enc == null) {\n        throw new NullPointerException();\n    }\n    // check for UnsupportedEncodingException\n    \"\".getBytes(enc); //$NON-NLS-1$\n\n    StringBuffer buf = new StringBuffer();\n    int start = -1;\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')\n                || (ch >= '0' && ch <= '9') || \" .-*_\".indexOf(ch) > -1) { //$NON-NLS-1$\n            if (start >= 0) {\n                convert(s.substring(start, i), buf, enc);\n                start = -1;\n            }\n            if (ch != ' ') {\n                buf.append(ch);\n            } else {\n                buf.append('+');\n            }\n        } else {\n            if (start < 0) {\n                start = i;\n            }\n        }\n    }\n    if (start >= 0) {\n        convert(s.substring(start, s.length()), buf, enc);\n    }\n    return buf.toString();\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/URLEncoder.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Computes the one-time PIN given the secret key.\n * \n * @param secret\n *          the secret key\n * @return the PIN\n * @throws GeneralSecurityException\n * @throws DecodingException\n *           If the key string is improperly encoded.\n */\n", "func_signal": "public static String computePin(String secret, Long counter)", "code": "{\n  try {\n    final byte[] keyBytes = Base32String.decode(secret);\n    Mac mac = new HMac(new SHA1Digest());\n    mac.init(new KeyParameter(keyBytes));\n    PasscodeGenerator pcg = new PasscodeGenerator(mac);\n    if (counter == null) { // time-based totp\n      return pcg.generateTimeoutCode();\n    } else { // counter-based hotp\n      return pcg.generateResponseCode(counter.longValue());\n    }\n  } catch (RuntimeException e) {\n    return \"General security exception\";\n  } catch (DecodingException e) {\n    return \"Decoding exception\";\n  }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/AuthenticatorScreen.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Resets this reader's position to the last {@code mark()} location.\n * Invocations of {@code read()} and {@code skip()} will occur from this new\n * location.\n *\n * @throws IOException\n *             if this reader is closed or no mark has been set.\n * @see #mark(int)\n * @see #markSupported()\n */\n", "func_signal": "public void reset() throws IOException", "code": "{\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        if (markpos == -1) {\n            throw new IOException();\n        }\n        pos = markpos;\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int indexOfList(ListField listField, String prefix, int start)", "code": "{\n  for (int i = start; i < mItems.length; i++) {\n    PinInfo item = mItems[i];\n    // Check if username starts with prefix (ignoring case)\n    if (item.mUser.regionMatches(true, 0, prefix, 0, prefix.length())) {\n      return i;\n    }\n  }\n  return -1;\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/PinListFieldCallback.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Closes this reader. This implementation closes the buffered source reader\n * and releases the buffer. Nothing is done if this reader has already been\n * closed.\n *\n * @throws IOException\n *             if an error occurs while closing this reader.\n */\n", "func_signal": "public void close() throws IOException", "code": "{\n    synchronized (lock) {\n        if (!isClosed()) {\n            in.close();\n            buf = null;\n        }\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Constructs a new BufferedReader on the Reader {@code in}. The buffer\n * size is specified by the parameter {@code size}.\n *\n * @param in\n *            the Reader that is buffered.\n * @param size\n *            the size of the buffer to allocate.\n * @throws IllegalArgumentException\n *             if {@code size <= 0}.\n */\n", "func_signal": "public BufferedReader(Reader in, int size)", "code": "{\n    super(in);\n    if (size <= 0) {\n        throw new IllegalArgumentException();\n    }\n    this.in = in;\n    buf = new char[size];\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Tells the user to visit a web page to get a secret key.\n */\n", "func_signal": "private void tellUserToGetSecretKey()", "code": "{\n  // TODO: fill this in with code to send our phone number to the server\n  String notInitialized = sResources.getString(NOT_INITIALIZED);\n  mEnterPinTextView.setText(notInitialized);\n  FieldUtils.setVisible(mEnterPinTextView, true);\n  FieldUtils.setVisible(mUserList, false);\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/AuthenticatorScreen.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void drawListRow(ListField listField, Graphics graphics, int index,\n    int y, int width)", "code": "{\n  PinInfo item = mItems[index];\n  \n  int iconWidth = mIcon.getWidth();\n  int iconHeight = mIcon.getHeight();\n  int iconX = width - PADDING - iconWidth; \n  int iconY = y + Math.max(0, (mRowHeight - iconHeight) / 2);\n  graphics.drawBitmap(iconX, iconY, iconWidth, iconHeight, mIcon, 0, 0);\n  \n  int textWidth = Math.max(0, width - iconWidth - PADDING * 3);\n  int textX = PADDING;\n  int textY = y + PADDING;\n  int flags = Graphics.ELLIPSIS;\n  Font savedFont = graphics.getFont();\n  graphics.setFont(mUserFont);\n  graphics.drawText(item.mUser, textX, textY, flags, textWidth);\n  textY += mUserFont.getHeight();\n  graphics.setFont(mPinFont);\n  graphics.drawText(item.mPin, textX, textY, flags, textWidth);\n  graphics.setFont(savedFont);\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/PinListFieldCallback.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "protected void onExposed()", "code": "{\n  super.onExposed();\n  onResume();\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/AuthenticatorScreen.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Menu getMenu(int instance)", "code": "{\n  if (instance == Menu.INSTANCE_CONTEXT) {\n    // Show the full menu instead of the context menu \n    return super.getMenu(Menu.INSTANCE_DEFAULT);\n  } else {\n    return super.getMenu(instance);\n  }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/AuthenticatorScreen.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void run()", "code": "{\n  try {\n    // Visit the original download URL and read the JAD;\n    // if the MIDlet-Version has changed, invoke the callback.\n    String url = Build.DOWNLOAD_URL;\n    String applicationVersion = getApplicationVersion();\n    String userAgent = getUserAgent();\n    String language = getLanguage();\n    for (int redirectCount = 0; redirectCount < 10; redirectCount++) {\n      HttpConnection c = null;\n      InputStream s = null;\n      try {\n        c = connect(url);\n        c.setRequestMethod(HttpConnection.GET);\n        c.setRequestProperty(\"User-Agent\", userAgent);\n        c.setRequestProperty(\"Accept-Language\", language);\n\n        int responseCode = c.getResponseCode();\n        if (responseCode == HttpConnection.HTTP_MOVED_PERM\n            || responseCode == HttpConnection.HTTP_MOVED_TEMP) {\n          String location = c.getHeaderField(\"Location\");\n          if (location != null) {\n            url = location;\n            continue;\n          } else {\n            throw new IOException(\"Location header missing\");\n          }\n        } else if (responseCode != HttpConnection.HTTP_OK) {\n          throw new IOException(\"Unexpected response code: \" + responseCode);\n        }\n        s = c.openInputStream();\n        String enc = getEncoding(c);\n        Reader reader = new InputStreamReader(s, enc);\n        final String version = getMIDletVersion(reader);\n        if (version == null) {\n          throw new IOException(\"MIDlet-Version not found\");\n        } else if (!version.equals(applicationVersion)) {\n          Application application = Application.getApplication();\n          application.invokeLater(new Runnable() {\n            public void run() {\n              mCallback.onUpdate(version);\n            }\n          });\n        } else {\n          // Already running latest version\n        }\n      } finally {\n        if (s != null) {\n          s.close();\n        }\n        if (c != null) {\n          c.close();\n        }\n      }\n    }\n  } catch (Exception e) {\n    System.out.println(e);\n  }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/UpdateTask.java", "commit_date": "2010-04-07 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Sets a mark position in this reader. The parameter {@code readlimit}\n * indicates how many characters can be read before the mark is invalidated.\n * Calling {@code reset()} will reposition the reader back to the marked\n * position if {@code readlimit} has not been surpassed.\n *\n * @param readlimit\n *            the number of characters that can be read before the mark is\n *            invalidated.\n * @throws IllegalArgumentException\n *             if {@code readlimit < 0}.\n * @throws IOException\n *             if an error occurs while setting a mark in this reader.\n * @see #markSupported()\n * @see #reset()\n */\n", "func_signal": "public void mark(int readlimit) throws IOException", "code": "{\n    if (readlimit < 0) {\n        throw new IllegalArgumentException();\n    }\n    synchronized (lock) {\n        if (isClosed()) {\n            throw new IOException();\n        }\n        marklimit = readlimit;\n        markpos = pos;\n    }\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/BufferedReader.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "/**\n * Encodes a given string {@code s} in a x-www-form-urlencoded string using\n * the specified encoding scheme {@code enc}.\n * <p>\n * All characters except letters ('a'..'z', 'A'..'Z') and numbers ('0'..'9')\n * and characters '.', '-', '*', '_' are converted into their hexadecimal\n * value prepended by '%'. For example: '#' -> %23. In addition, spaces are\n * substituted by '+'\n * </p>\n *\n * @param s\n *            the string to be encoded.\n * @return the encoded string.\n * @deprecated use {@link #encode(String, String)} instead.\n */\n", "func_signal": "public static String encode(String s)", "code": "{\n    StringBuffer buf = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')\n                || (ch >= '0' && ch <= '9') || \".-*_\".indexOf(ch) > -1) { //$NON-NLS-1$\n            buf.append(ch);\n        } else if (ch == ' ') {\n            buf.append('+');\n        } else {\n            byte[] bytes = new String(new char[] { ch }).getBytes();\n            for (int j = 0; j < bytes.length; j++) {\n                buf.append('%');\n                buf.append(digits.charAt((bytes[j] & 0xf0) >> 4));\n                buf.append(digits.charAt(bytes[j] & 0xf));\n            }\n        }\n    }\n    return buf.toString();\n}", "path": "google-authenticator/mobile/blackberry/src/com/google/authenticator/blackberry/URLEncoder.java", "commit_date": "2010-03-25 00:00:00", "repo_name": "google/google-authenticator", "stars": 5124, "license": "apache-2.0", "language": "java", "size": 2433}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PUBLIC METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public static synchronized void initialize(Configuration configuration)", "code": "{\n\tif (sIsInitialized) {\n\t\tLog.v(\"ActiveAndroid already initialized.\");\n\t\treturn;\n\t}\n\n\tsContext = configuration.getContext();\n\tsModelInfo = new ModelInfo(configuration);\n\tsDatabaseHelper = new DatabaseHelper(configuration);\n\n\t// TODO: It would be nice to override sizeOf here and calculate the memory\n\t// actually used, however at this point it seems like the reflection\n\t// required would be too costly to be of any benefit. We'll just set a max\n\t// object size instead.\n\tsEntities = new LruCache<String, Model>(configuration.getCacheSize());\n\n\topenDatabase();\n\n\tsIsInitialized = true;\n\n\tLog.v(\"ActiveAndroid initialized successfully.\");\n}", "path": "ActiveAndroid/src/com/activeandroid/Cache.java", "commit_date": "2014-01-30 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "// Database creation\n", "func_signal": "public static ArrayList<String> createUniqueDefinition(TableInfo tableInfo)", "code": "{\n\tfinal ArrayList<String> definitions = new ArrayList<String>();\n\tsUniqueGroupMap = new HashMap<String, List<String>>();\n\tsOnUniqueConflictsMap = new HashMap<String, ConflictAction>();\n\n\tfor (Field field : tableInfo.getFields()) {\n\t\tcreateUniqueColumnDefinition(tableInfo, field);\n\t}\n\n\tif (sUniqueGroupMap.isEmpty()) {\n\t\treturn definitions;\n\t}\n\n\tSet<String> keySet = sUniqueGroupMap.keySet();\n\tfor (String key : keySet) {\n\t\tList<String> group = sUniqueGroupMap.get(key);\n\t\tConflictAction conflictAction = sOnUniqueConflictsMap.get(key);\n\n\t\tdefinitions.add(String.format(\"UNIQUE (%s) ON CONFLICT %s\",\n\t\t\t\tTextUtils.join(\", \", group), conflictAction.toString()));\n\t}\n\n\treturn definitions;\n}", "path": "ActiveAndroid/src/com/activeandroid/util/SQLiteUtils.java", "commit_date": "2014-05-28 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PUBLIC METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic boolean onCreate()", "code": "{\n\tActiveAndroid.initialize(getConfiguration());\n\tsAuthority = getAuthority();\n\n\tfinal List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());\n\tfinal int size = tableInfos.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tfinal TableInfo tableInfo = tableInfos.get(i);\n\t\tfinal int tableKey = (i * 2) + 1;\n\t\tfinal int itemKey = (i * 2) + 2;\n\n\t\t// content://<authority>/<table>\n\t\tURI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase(), tableKey);\n\t\tTYPE_CODES.put(tableKey, tableInfo.getType());\n\n\t\t// content://<authority>/<table>/<id>\n\t\tURI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase() + \"/#\", itemKey);\n\t\tTYPE_CODES.put(itemKey, tableInfo.getType());\n\t}\n\n\treturn true;\n}", "path": "ActiveAndroid/src/com/activeandroid/content/ContentProvider.java", "commit_date": "2013-08-30 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PRIVATE METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "private Class<? extends Model> getModelType(Uri uri)", "code": "{\n\tfinal int code = URI_MATCHER.match(uri);\n\tif (code != UriMatcher.NO_MATCH) {\n\t\treturn TYPE_CODES.get(code);\n\t}\n\n\treturn null;\n}", "path": "ActiveAndroid/src/com/activeandroid/content/ContentProvider.java", "commit_date": "2013-08-30 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PUBLIC METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public static Uri createUri(Class<? extends Model> type, Long id)", "code": "{\n\tfinal StringBuilder uri = new StringBuilder();\n\turi.append(\"content://\");\n\turi.append(sAuthority);\n\turi.append(\"/\");\n\turi.append(Cache.getTableName(type).toLowerCase());\n\n\tif (id != null) {\n\t\turi.append(\"/\");\n\t\turi.append(id.toString());\n\t}\n\n\treturn Uri.parse(uri.toString());\n}", "path": "ActiveAndroid/src/com/activeandroid/content/ContentProvider.java", "commit_date": "2013-08-30 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n     * Test to check the join of two (or more) tables with some fields in common when not use a projection on select.\n     * Test the issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)\n     */\n", "func_signal": "public void testJoinWithSameNames()", "code": "{\n        //create a parent entity and store\n        ParentJoinMockModel parent = new ParentJoinMockModel();\n        parent.booleanField = true;\n        parent.dateField = new Date();\n        parent.doubleField = 2.0;\n        parent.intField = 1;\n        parent.save();\n\n        //the values to assign to child\n        Date dateValue = new Date();\n        double doubleValue = 30.0;\n        int intValue = 3;\n\n        //create two child entities, relate with parent and save\n        ChildMockModel child1 = new ChildMockModel();\n        child1.booleanField = false;\n        child1.dateField = dateValue;\n        child1.doubleField = doubleValue;\n        child1.intField = intValue;\n        child1.parent = parent;\n        child1.save();\n\n        ChildMockModel child2 = new ChildMockModel();\n        child2.booleanField = false;\n        child2.dateField = dateValue;\n        child2.doubleField = doubleValue;\n        child2.intField = intValue;\n        child2.parent = parent;\n        child2.save();\n\n        //Store the ids assigned to child entities when persists\n        List<Long> ids = new ArrayList<Long>();\n        ids.add(child1.getId());\n        ids.add(child2.getId());\n\n        //make the query with a join\n        List<ChildMockModel> result = new Select().from(ChildMockModel.class).\n                join(ParentJoinMockModel.class).on(\"ParentJoinMockModel.Id = ChildMockModel.parent\").execute();\n\n        //check result\n        assertNotNull(result);\n        assertEquals(result.size(), 2);\n        for(ChildMockModel currentModel : result){\n            assertFalse(currentModel.booleanField);\n            assertEquals(currentModel.intField, intValue);\n            assertEquals(currentModel.doubleField, doubleValue);\n            assertTrue(ids.contains(currentModel.getId()));\n        }\n\n    }", "path": "ActiveAndroid/tests/src/com/activeandroid/test/ModelTest.java", "commit_date": "2014-05-28 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PUBLIC METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Builder setCacheSize(int cacheSize)", "code": "{\n\tmCacheSize = cacheSize;\n\treturn this;\n}", "path": "ActiveAndroid/src/com/activeandroid/Configuration.java", "commit_date": "2014-04-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// CONSTRUCTORS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public DatabaseHelper(Configuration configuration)", "code": "{\n\tsuper(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());\n\tcopyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());\n\tmSqlParser = configuration.getSqlParser();\n}", "path": "ActiveAndroid/src/com/activeandroid/DatabaseHelper.java", "commit_date": "2014-05-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * @return The Id of the record at position.\n */\n", "func_signal": "@Override\npublic long getItemId(int position)", "code": "{\n\tT item = getItem(position);\n\n\tif (item != null) {\n\t\treturn item.getId();\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}", "path": "ActiveAndroid/src/com/activeandroid/widget/ModelAdapter.java", "commit_date": "2014-10-07 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PRIVATE METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "private void executePragmas(SQLiteDatabase db)", "code": "{\n\tif (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {\n\t\tdb.execSQL(\"PRAGMA foreign_keys=ON;\");\n\t\tLog.i(\"Foreign Keys supported. Enabling foreign key features.\");\n\t}\n}", "path": "ActiveAndroid/src/com/activeandroid/DatabaseHelper.java", "commit_date": "2014-05-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * Boolean should handle integer (0/1) and boolean (false/true) values.\n */\n", "func_signal": "public void testBooleanColumnType()", "code": "{\n    MockModel mockModel = new MockModel();\n    mockModel.booleanField = false;\n    Long id = mockModel.save();\n\n    boolean databaseBooleanValue = MockModel.load( MockModel.class, id ).booleanField;\n\n    assertEquals( false, databaseBooleanValue );\n\n    // Test passing both a integer and a boolean into the where conditional.\n    assertEquals(\n            mockModel,\n            new Select().from(MockModel.class).where(\"booleanField = ?\", 0).executeSingle() );\n\n    assertEquals(\n            mockModel,\n            new Select().from(MockModel.class).where(\"booleanField = ?\", false).executeSingle() );\n\n    assertNull( new Select().from(MockModel.class).where(\"booleanField = ?\", 1).executeSingle() );\n\n    assertNull( new Select().from(MockModel.class).where(\"booleanField = ?\", true).executeSingle() );\n}", "path": "ActiveAndroid/tests/src/com/activeandroid/test/ModelTest.java", "commit_date": "2014-05-28 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * <p>\n * Unconditionally close a {@link Cursor}.\n * </p>\n * Equivalent to {@link Cursor#close()}, except any exceptions will be ignored. This is\n * typically used in finally blocks.\n * @param cursor A {@link Cursor} to close.\n */\n", "func_signal": "public static void closeQuietly(final Cursor cursor)", "code": "{\n\n    if (cursor == null) {\n        return;\n    }\n\n    try {\n        cursor.close();\n    } catch (final Exception e) {\n        Log.e(\"Couldn't close cursor.\", e);\n    }\n}", "path": "ActiveAndroid/src/com/activeandroid/util/IOUtils.java", "commit_date": "2014-10-07 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// CONSTRUCTORS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Builder(Context context)", "code": "{\n\tmContext = context.getApplicationContext();\n\tmCacheSize = DEFAULT_CACHE_SIZE;\n}", "path": "ActiveAndroid/src/com/activeandroid/Configuration.java", "commit_date": "2014-04-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * Two rows in a table should have different hashcodes.\n */\n", "func_signal": "public void testHashCodeDifferentRows()", "code": "{\n\tSet<Model> set = new HashSet<Model>();\n\tModel m1 = new MockModel();\n\tModel m2 = new MockModel();\n\tModel m3;\n\n\tm1.save();\n\tm2.save();\n\tm3 = Model.load(MockModel.class, m1.getId());\n\n\tassertEquals(m1.hashCode(), m3.hashCode());\n\tassertFalse(m1.hashCode() == m2.hashCode());\n\tset.add(m1);\n\tset.add(m2);\n\tset.add(m3);\n\tassertEquals(2, set.size());\n}", "path": "ActiveAndroid/tests/src/com/activeandroid/test/ModelTest.java", "commit_date": "2014-05-28 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * Column names should default to the field name.\n */\n", "func_signal": "public void testColumnNamesDefaulToFieldNames()", "code": "{\n    TableInfo tableInfo = Cache.getTableInfo(MockModel.class);\n\n    for ( Field field : tableInfo.getFields() ) {\n        // Id column is a special case, we'll ignore that one.\n        if ( field.getName().equals(\"mId\") ) continue;\n\n        assertEquals(field.getName(), tableInfo.getColumnName(field));\n    }\n}", "path": "ActiveAndroid/tests/src/com/activeandroid/test/ModelTest.java", "commit_date": "2014-05-28 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "// SQLite methods\n", "func_signal": "@Override\npublic Uri insert(Uri uri, ContentValues values)", "code": "{\n\tfinal Class<? extends Model> type = getModelType(uri);\n\tfinal Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);\n\n\tif (id != null && id > 0) {\n\t\tUri retUri = createUri(type, id);\n\t\tnotifyChange(retUri);\n\n\t\treturn retUri;\n\t}\n\n\treturn null;\n}", "path": "ActiveAndroid/src/com/activeandroid/content/ContentProvider.java", "commit_date": "2013-08-30 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "//////////////////////////////////////////////////////////////////////////////////////\n// PUBLIC METHODS\n//////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public void copyAttachedDatabase(Context context, String databaseName)", "code": "{\n\tfinal File dbPath = context.getDatabasePath(databaseName);\n\n\t// If the database already exists, return\n\tif (dbPath.exists()) {\n\t\treturn;\n\t}\n\n\t// Make sure we have a path to the file\n\tdbPath.getParentFile().mkdirs();\n\n\t// Try to copy database file\n\ttry {\n\t\tfinal InputStream inputStream = context.getAssets().open(databaseName);\n\t\tfinal OutputStream output = new FileOutputStream(dbPath);\n\n\t\tbyte[] buffer = new byte[8192];\n\t\tint length;\n\n\t\twhile ((length = inputStream.read(buffer, 0, 8192)) > 0) {\n\t\t\toutput.write(buffer, 0, length);\n\t\t}\n\n\t\toutput.flush();\n\t\toutput.close();\n\t\tinputStream.close();\n\t}\n\tcatch (IOException e) {\n\t\tLog.e(\"Failed to open file\", e);\n\t}\n}", "path": "ActiveAndroid/src/com/activeandroid/DatabaseHelper.java", "commit_date": "2014-05-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "// Meta-data methods\n", "func_signal": "private String getMetaDataDatabaseNameOrDefault()", "code": "{\n\tString aaName = ReflectionUtils.getMetaData(mContext, AA_DB_NAME);\n\tif (aaName == null) {\n\t\taaName = DEFAULT_DB_NAME;\n\t}\n\n\treturn aaName;\n}", "path": "ActiveAndroid/src/com/activeandroid/Configuration.java", "commit_date": "2014-04-16 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * <p>\n * Unconditionally close a {@link Closeable}.\n * </p>\n * Equivalent to {@link Closeable#close()}, except any exceptions will be ignored. This is\n * typically used in finally blocks.\n * @param closeable A {@link Closeable} to close.\n */\n", "func_signal": "public static void closeQuietly(final Closeable closeable)", "code": "{\n\n    if (closeable == null) {\n        return;\n    }\n\n    try {\n        closeable.close();\n    } catch (final IOException e) {\n        Log.e(\"Couldn't close closeable.\", e);\n    }\n}", "path": "ActiveAndroid/src/com/activeandroid/util/IOUtils.java", "commit_date": "2014-10-07 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * Clears the adapter and, if data != null, fills if with new Items.\n *\n * @param collection A Collection&lt;? extends T&gt; which members get added to the adapter.\n */\n", "func_signal": "public void setData(Collection<? extends T> collection)", "code": "{\n\tclear();\n\n\tif (collection != null) {\n\t\tfor (T item : collection) {\n\t\t\tadd(item);\n\t\t}\n\t}\n}", "path": "ActiveAndroid/src/com/activeandroid/widget/ModelAdapter.java", "commit_date": "2014-10-07 00:00:00", "repo_name": "pardom-zz/ActiveAndroid", "stars": 4710, "license": "None", "language": "java", "size": 18083}
{"docstring": "/**\n * If rect is off screen, scroll just enough to get it (or at least the\n * first screen size chunk of it) on screen.\n *\n * @param rect      The rectangle.\n * @param immediate True to scroll immediately without animation\n * @return true if scrolling was performed\n */\n", "func_signal": "private boolean scrollToChildRect(Rect rect, boolean immediate)", "code": "{\n  final int delta = computeScrollDeltaToGetChildRectOnScreen(rect);\n  final boolean scroll = delta != 0;\n  if (scroll) {\n    if (immediate) {\n      scrollBy(0, delta);\n    } else {\n      smoothScrollBy(0, delta);\n    }\n  }\n  return scroll;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Smooth scroll by a Y delta\n *\n * @param delta the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "private void doScrollY(int delta)", "code": "{\n  if (delta != 0) {\n    if (mSmoothScrollingEnabled) {\n      smoothScrollBy(0, delta);\n    } else {\n      scrollBy(0, delta);\n    }\n  }\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Handle scrolling in response to an up or down arrow click.\n *\n * @param direction The direction corresponding to the arrow key that was\n *                  pressed\n * @return True if we consumed the event, false otherwise\n */\n", "func_signal": "public boolean arrowScroll(int direction)", "code": "{\n\n  View currentFocused = findFocus();\n  if (currentFocused == this) currentFocused = null;\n\n  View nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused, direction);\n\n  final int maxJump = getMaxScrollAmount();\n\n  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused, maxJump, getHeight())) {\n    nextFocused.getDrawingRect(mTempRect);\n    offsetDescendantRectToMyCoords(nextFocused, mTempRect);\n    int scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n    doScrollY(scrollDelta);\n    nextFocused.requestFocus(direction);\n  } else {\n    // no new focus\n    int scrollDelta = maxJump;\n\n    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {\n      scrollDelta = getScrollY();\n    } else if (direction == View.FOCUS_DOWN) {\n      if (getChildCount() > 0) {\n        int daBottom = getChildAt(0).getBottom();\n        int screenBottom = getScrollY() + getHeight() - getPaddingBottom();\n        if (daBottom - screenBottom < maxJump) {\n          scrollDelta = daBottom - screenBottom;\n        }\n      }\n    }\n    if (scrollDelta == 0) {\n      return false;\n    }\n    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);\n  }\n\n  if (currentFocused != null && currentFocused.isFocused()\n      && isOffScreen(currentFocused)) {\n    // previously focused item still has focus and is off screen, give\n    // it up (take it back to ourselves)\n    // (also, need to temporarily force FOCUS_BEFORE_DESCENDANTS so we are\n    // sure to\n    // get it)\n    final int descendantFocusability = getDescendantFocusability();  // save\n    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);\n    requestFocus();\n    setDescendantFocusability(descendantFocusability);  // restore\n  }\n  return true;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * When looking for focus in children of a scroll view, need to be a little\n * more careful not to give focus to something that is scrolled off screen.\n *\n * This is more expensive than the default {@link android.view.ViewGroup}\n * implementation, otherwise this behavior might have been made the default.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n                                              Rect previouslyFocusedRect)", "code": "{\n\n  // convert from forward / backward notation to up / down / left / right\n  // (ugh).\n  if (direction == View.FOCUS_FORWARD) {\n    direction = View.FOCUS_DOWN;\n  } else if (direction == View.FOCUS_BACKWARD) {\n    direction = View.FOCUS_UP;\n  }\n\n  final View nextFocus = previouslyFocusedRect == null ?\n      FocusFinder.getInstance().findNextFocus(this, null, direction) :\n      FocusFinder.getInstance().findNextFocusFromRect(this,\n          previouslyFocusedRect, direction);\n\n  if (nextFocus == null) {\n    return false;\n  }\n\n  if (isOffScreen(nextFocus)) {\n    return false;\n  }\n\n  return nextFocus.requestFocus(direction, previouslyFocusedRect);\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * <p>Handles scrolling in response to a \"page up/down\" shortcut press. This\n * method will scroll the view by one page up or down and give the focus\n * to the topmost/bottommost component in the new visible area. If no\n * component is a good candidate for focus, this scrollview reclaims the\n * focus.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go one page up or\n *                  {@link android.view.View#FOCUS_DOWN} to go one page down\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean pageScroll(int direction)", "code": "{\n  boolean down = direction == View.FOCUS_DOWN;\n  int height = getHeight();\n\n  if (down) {\n    mTempRect.top = getScrollY() + height;\n    int count = getChildCount();\n    if (count > 0) {\n      View view = getChildAt(count - 1);\n      if (mTempRect.top + height > view.getBottom()) {\n        mTempRect.top = view.getBottom() - height;\n      }\n    }\n  } else {\n    mTempRect.top = getScrollY() - height;\n    if (mTempRect.top < 0) {\n      mTempRect.top = 0;\n    }\n  }\n  mTempRect.bottom = mTempRect.top + height;\n\n  return scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Fling the scroll view\n *\n * @param velocityY The initial velocity in the Y direction. Positive\n *                  numbers mean that the finger/cursor is moving down the screen,\n *                  which means we want to scroll towards the top.\n */\n", "func_signal": "public void fling(int velocityY)", "code": "{\n  if (getChildCount() > 0) {\n    int height = getHeight() - getPaddingBottom() - getPaddingTop();\n    int bottom = getChildAt(0).getHeight();\n\n    mScroller.fling(getScrollX(), getScrollY(), 0, velocityY, 0, 0, 0,\n        Math.max(0, bottom - height), 0, height/2);\n\n    postInvalidateOnAnimation();\n  }\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Return true if child is a descendant of parent, (or equal to the parent).\n */\n", "func_signal": "private static boolean isViewDescendantOf(View child, View parent)", "code": "{\n  if (child == parent) {\n    return true;\n  }\n\n  final ViewParent theParent = child.getParent();\n  return (theParent instanceof ViewGroup) && isViewDescendantOf((View) theParent, parent);\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * <p>The scroll range of a scroll view is the overall height of all of its\n * children.</p>\n */\n", "func_signal": "@Override\nprotected int computeVerticalScrollRange()", "code": "{\n  final int count = getChildCount();\n  final int contentHeight = getHeight() - getPaddingBottom() - getPaddingTop();\n  if (count == 0) {\n    return contentHeight;\n  }\n\n  int scrollRange = getChildAt(0).getBottom();\n  final int scrollY = getScrollY();\n  final int overscrollBottom = Math.max(0, scrollRange - contentHeight);\n  if (scrollY < 0) {\n    scrollRange -= scrollY;\n  } else if (scrollY > overscrollBottom) {\n    scrollRange += scrollY - overscrollBottom;\n  }\n\n  return scrollRange;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n  mTempRect.setEmpty();\n\n  if (!canScroll()) {\n    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {\n      View currentFocused = findFocus();\n      if (currentFocused == this) currentFocused = null;\n      View nextFocused = FocusFinder.getInstance().findNextFocus(this,\n          currentFocused, View.FOCUS_DOWN);\n      return nextFocused != null\n          && nextFocused != this\n          && nextFocused.requestFocus(View.FOCUS_DOWN);\n    }\n    return false;\n  }\n\n  boolean handled = false;\n  if (event.getAction() == KeyEvent.ACTION_DOWN) {\n    switch (event.getKeyCode()) {\n      case KeyEvent.KEYCODE_DPAD_UP:\n        if (!event.isAltPressed()) {\n          handled = arrowScroll(View.FOCUS_UP);\n        } else {\n          handled = fullScroll(View.FOCUS_UP);\n        }\n        break;\n      case KeyEvent.KEYCODE_DPAD_DOWN:\n        if (!event.isAltPressed()) {\n          handled = arrowScroll(View.FOCUS_DOWN);\n        } else {\n          handled = fullScroll(View.FOCUS_DOWN);\n        }\n        break;\n      case KeyEvent.KEYCODE_SPACE:\n        pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);\n        break;\n    }\n  }\n\n  return handled;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * <p>Scrolls the view to make the area defined by <code>top</code> and\n * <code>bottom</code> visible. This method attempts to give the focus\n * to a component visible in this area. If no component can be focused in\n * the new visible area, the focus is reclaimed by this ScrollView.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go upward, {@link android.view.View#FOCUS_DOWN} to downward\n * @param top       the top offset of the new area to be made visible\n * @param bottom    the bottom offset of the new area to be made visible\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "private boolean scrollAndFocus(int direction, int top, int bottom)", "code": "{\n  boolean handled = true;\n\n  int height = getHeight();\n  int containerTop = getScrollY();\n  int containerBottom = containerTop + height;\n  boolean up = direction == View.FOCUS_UP;\n\n  View newFocused = findFocusableViewInBounds(up, top, bottom);\n  if (newFocused == null) {\n    newFocused = this;\n  }\n\n  if (top >= containerTop && bottom <= containerBottom) {\n    handled = false;\n  } else {\n    int delta = up ? (top - containerTop) : (bottom - containerBottom);\n    doScrollY(delta);\n  }\n\n  if (newFocused != findFocus()) newFocused.requestFocus(direction);\n\n  return handled;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * constructor for the SpringConfig\n * @param tension tension value for the SpringConfig\n * @param friction friction value for the SpringConfig\n */\n", "func_signal": "public SpringConfig(double tension, double friction)", "code": "{\n  this.tension = tension;\n  this.friction = friction;\n}", "path": "rebound/rebound-core/src/main/java/com/facebook/rebound/SpringConfig.java", "commit_date": "2015-01-03 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * @return Returns true this ScrollView can be scrolled\n */\n", "func_signal": "private boolean canScroll()", "code": "{\n  View child = getChildAt(0);\n  if (child != null) {\n    int childHeight = child.getHeight();\n    return getHeight() < childHeight + getPaddingTop() + getPaddingBottom();\n  }\n  return false;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Scrolls the view to the given child.\n *\n * @param child the View to scroll to\n */\n", "func_signal": "private void scrollToChild(View child)", "code": "{\n  child.getDrawingRect(mTempRect);\n\n      /* Offset from child's local coordinates to ScrollView coordinates */\n  offsetDescendantRectToMyCoords(child, mTempRect);\n\n  int scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n\n  if (scrollDelta != 0) {\n    scrollBy(0, scrollDelta);\n  }\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * <p>Handles scrolling in response to a \"home/end\" shortcut press. This\n * method will scroll the view to the top or bottom and give the focus\n * to the topmost/bottommost component in the new visible area. If no\n * component is a good candidate for focus, this scrollview reclaims the\n * focus.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go the top of the view or\n *                  {@link android.view.View#FOCUS_DOWN} to go the bottom\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean fullScroll(int direction)", "code": "{\n  boolean down = direction == View.FOCUS_DOWN;\n  int height = getHeight();\n\n  mTempRect.top = 0;\n  mTempRect.bottom = height;\n\n  if (down) {\n    int count = getChildCount();\n    if (count > 0) {\n      View view = getChildAt(count - 1);\n      mTempRect.bottom = view.getBottom() + getPaddingBottom();\n      mTempRect.top = mTempRect.bottom - height;\n    }\n  }\n\n  return scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>This version also clamps the scrolling to the bounds of our child.\n */\n", "func_signal": "@Override\npublic void scrollTo(int x, int y)", "code": "{\n  // we rely on the fact the View.scrollBy calls scrollTo.\n  if (getChildCount() > 0) {\n    if (x != getScrollX() || y != getScrollY()) {\n      super.scrollTo(x, y);\n    }\n  }\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * A helper to make creating a SpringConfig easier with values mapping to the Origami values.\n * @param qcTension tension as defined in the Quartz Composition\n * @param qcFriction friction as defined in the Quartz Composition\n * @return a SpringConfig that maps to these values\n */\n", "func_signal": "public static SpringConfig fromOrigamiTensionAndFriction(double qcTension, double qcFriction)", "code": "{\n  return new SpringConfig(\n      OrigamiValueConverter.tensionFromOrigamiValue(qcTension),\n      OrigamiValueConverter.frictionFromOrigamiValue(qcFriction)\n  );\n}", "path": "rebound/rebound-core/src/main/java/com/facebook/rebound/SpringConfig.java", "commit_date": "2015-01-03 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * @return whether the descendant of this scroll view is within delta\n *  pixels of being on the screen.\n */\n", "func_signal": "private boolean isWithinDeltaOfScreen(View descendant, int delta, int height)", "code": "{\n  descendant.getDrawingRect(mTempRect);\n  offsetDescendantRectToMyCoords(descendant, mTempRect);\n\n  return (mTempRect.bottom + delta) >= getScrollY()\n      && (mTempRect.top - delta) <= (getScrollY() + height);\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.\n *\n * @param dx the number of pixels to scroll by on the X axis\n * @param dy the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "public final void smoothScrollBy(int dx, int dy)", "code": "{\n  if (getChildCount() == 0) {\n    // Nothing to do.\n    return;\n  }\n  long duration = AnimationUtils.currentAnimationTimeMillis() - mLastScroll;\n  if (duration > ANIMATED_SCROLL_GAP) {\n    final int height = getHeight() - getPaddingBottom() - getPaddingTop();\n    final int bottom = getChildAt(0).getHeight();\n    final int maxY = Math.max(0, bottom - height);\n    final int scrollY = getScrollY();\n    dy = Math.max(0, Math.min(scrollY + dy, maxY)) - scrollY;\n\n    mScroller.startScroll(getScrollX(), scrollY, 0, dy);\n    postInvalidateOnAnimation();\n  } else {\n    if (!mScroller.isFinished()) {\n      mScroller.abortAnimation();\n    }\n    scrollBy(dx, dy);\n  }\n  mLastScroll = AnimationUtils.currentAnimationTimeMillis();\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * Compute the amount to scroll in the Y direction in order to get\n * a rectangle completely on the screen (or, if taller than the screen,\n * at least the first screen size chunk of it).\n *\n * @param rect The rect.\n * @return The scroll delta.\n */\n", "func_signal": "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "code": "{\n  if (getChildCount() == 0) return 0;\n\n  int height = getHeight();\n  int screenTop = getScrollY();\n  int screenBottom = screenTop + height;\n\n  int fadingEdge = getVerticalFadingEdgeLength();\n\n  // leave room for top fading edge as long as rect isn't at very top\n  if (rect.top > 0) {\n    screenTop += fadingEdge;\n  }\n\n  // leave room for bottom fading edge as long as rect isn't at very bottom\n  if (rect.bottom < getChildAt(0).getHeight()) {\n    screenBottom -= fadingEdge;\n  }\n\n  int scrollYDelta = 0;\n\n  if (rect.bottom > screenBottom && rect.top > screenTop) {\n    // need to move down to get it in view: move down just enough so\n    // that the entire rectangle is in view (or at least the first\n    // screen size chunk).\n\n    if (rect.height() > height) {\n      // just enough to get screen size chunk on\n      scrollYDelta += (rect.top - screenTop);\n    } else {\n      // get entire rect at bottom of screen\n      scrollYDelta += (rect.bottom - screenBottom);\n    }\n\n    // make sure we aren't scrolling beyond the end of our content\n    int bottom = getChildAt(0).getBottom();\n    int distanceToBottom = bottom - screenBottom;\n    scrollYDelta = Math.min(scrollYDelta, distanceToBottom);\n\n  } else if (rect.top < screenTop && rect.bottom < screenBottom) {\n    // need to move up to get it in view: move up just enough so that\n    // entire rectangle is in view (or at least the first screen\n    // size chunk of it).\n\n    if (rect.height() > height) {\n      // screen size chunk\n      scrollYDelta -= (screenBottom - rect.bottom);\n    } else {\n      // entire rect at top\n      scrollYDelta -= (screenTop - rect.top);\n    }\n\n    // make sure we aren't scrolling any further than the top our content\n    scrollYDelta = Math.max(scrollYDelta, -getScrollY());\n  }\n  return scrollYDelta;\n}", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "//  @Override\n//  public boolean onGenericMotionEvent(MotionEvent event) {\n//    if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0) {\n//      switch (event.getAction()) {\n//        case MotionEvent.ACTION_SCROLL: {\n//          if (!mIsBeingDragged) {\n//            final float vscroll = event.getAxisValue(MotionEvent.AXIS_VSCROLL);\n//            if (vscroll != 0) {\n//              final int delta = (int) (vscroll * getVerticalScrollFactor());\n//              final int range = getScrollRange();\n//              int oldScrollY = getScrollY();\n//              int newScrollY = oldScrollY - delta;\n//              if (newScrollY < 0) {\n//                newScrollY = 0;\n//              } else if (newScrollY > range) {\n//                newScrollY = range;\n//              }\n//              if (newScrollY != oldScrollY) {\n//                super.scrollTo(getScrollX(), newScrollY);\n//                return true;\n//              }\n//            }\n//          }\n//        }\n//      }\n//    }\n//    return super.onGenericMotionEvent(event);\n//  }\n", "func_signal": "@Override\n  protected void onOverScrolled(int scrollX, int scrollY,\n                                boolean clampedX, boolean clampedY)", "code": "{\n    // Treat animating scrolls differently; see #computeScroll() for why.\n    if (!mScroller.isFinished()) {\n      final int oldX = getScrollX();\n      final int oldY = getScrollY();\n      setScrollX(scrollX);\n      setScrollY(scrollY);\n      invalidateParentIfNeeded();\n      onScrollChanged(getScrollX(), getScrollY(), oldX, oldY);\n      if (clampedY) {\n        mScroller.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange());\n      }\n    } else {\n      super.scrollTo(scrollX, scrollY);\n    }\n\n    awakenScrollBars();\n  }", "path": "rebound/rebound-android-playground/src/main/java/com/facebook/rebound/playground/examples/scrollview/SpringScrollView.java", "commit_date": "2015-01-02 00:00:00", "repo_name": "facebookarchive/rebound", "stars": 5438, "license": "other", "language": "java", "size": 23623}
{"docstring": "/**\n * A lambda converter implementation for the {@link #getUserType()}.\n * \n */\n", "func_signal": "public ForcedType withLambdaConverter(LambdaConverter value)", "code": "{\n    setLambdaConverter(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A Java regular expression matching data types to be forced to have this\n * type. If provided, both \"includeExpression\" and \"includeTypes\" must match.\n * \n */\n", "func_signal": "public ForcedType withIncludeTypes(String value)", "code": "{\n    setIncludeTypes(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A SQL statement that produces a table with one column containing the matched qualified or unqualified column names.\n * \n */\n", "func_signal": "public ForcedType withSql(String value)", "code": "{\n    setSql(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * Whether this forced type should apply to all object types, or only to specific ones\n * \n */\n", "func_signal": "public ForcedType withObjectType(ForcedTypeObjectType value)", "code": "{\n    setObjectType(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A Java regular expression matching data types\n * which must not have this type. Excludes match before includes, i.e.\n * excludes have a higher priority.\n * \n */\n", "func_signal": "public ForcedType withExcludeTypes(String value)", "code": "{\n    setExcludeTypes(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * The same as {@link #getIncludeTypes()}. This is kept for backwards compatibility reasons.\n * \n */\n", "func_signal": "public ForcedType withTypes(String value)", "code": "{\n    setTypes(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "// -------------------------------------------------------------------------\n// The Object API\n// -------------------------------------------------------------------------\n", "func_signal": "@Override\npublic boolean equals(Object that)", "code": "{\n    if (that instanceof Euler) {\n        return true;\n    }\n    else\n        return super.equals(that);\n}", "path": "jOOQ/jOOQ/src/main/java/org/jooq/impl/Euler.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * The same as {@link #getIncludeExpression()}. This is kept for backwards compatibility reasons.\n * \n */\n", "func_signal": "public ForcedType withExpression(String value)", "code": "{\n    setExpression(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A Java regular expression matching columns, parameters, attributes,\n * etc. to be forced to have this type. If provided, both \"includeExpression\" and\n * \"includeTypes\" must match.\n * \n */\n", "func_signal": "public ForcedType withIncludeExpression(String value)", "code": "{\n    setIncludeExpression(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * The same as {@link #getIncludeExpression()}. This is kept for backwards compatibility reasons.\n * \n */\n", "func_signal": "public ForcedType withExpressions(String value)", "code": "{\n    setExpressions(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * The type of the user type - e.g. java.time.LocalDateTime.\n * <p>\n * If provided, {@link #getName()} will be ignored, and either {@link #getConverter()}\n * or {@link #getBinding()} is required\n * \n */\n", "func_signal": "public ForcedType withUserType(String value)", "code": "{\n    setUserType(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * The name (in {@link org.jooq.impl.SQLDataType}) to force any matches to\n * \n */\n", "func_signal": "public ForcedType withName(String value)", "code": "{\n    setName(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A Java regular expression matching columns, parameters, attributes,\n * etc. which must not have this type. Excludes match before includes, i.e.\n * excludes have a higher priority.\n * \n */\n", "func_signal": "public ForcedType withExcludeExpression(String value)", "code": "{\n    setExcludeExpression(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A converter implementation for the {@link #getUserType()}.\n * \n */\n", "func_signal": "public ForcedType withConverter(String value)", "code": "{\n    setConverter(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * Whether this forced type should apply to nullable / non-nullable / all columns\n * \n */\n", "func_signal": "public ForcedType withNullability(Nullability value)", "code": "{\n    setNullability(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "// -------------------------------------------------------------------------\n// XXX: Object API\n// -------------------------------------------------------------------------\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((onCommit == null) ? 0 : onCommit.hashCode());\n    result = prime * result + ((select == null) ? 0 : select.hashCode());\n    result = prime * result + ((source == null) ? 0 : source.hashCode());\n    result = prime * result + ((type == null) ? 0 : type.hashCode());\n    return result;\n}", "path": "jOOQ/jOOQ/src/main/java/org/jooq/TableOptions.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "// -------------------------------------------------------------------------\n// XXX: QueryPart API\n// -------------------------------------------------------------------------\n", "func_signal": "@Override\npublic final void accept(Context<?> ctx)", "code": "{\n    switch (ctx.family()) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        case CUBRID:\n        case DERBY:\n        case FIREBIRD:\n        case H2:\n        case HSQLDB:\n        case MARIADB:\n        case MYSQL:\n        case POSTGRES:\n            ctx.visit(DSL.exp(one()));\n            return;\n\n        case SQLITE:\n            ctx.visit(inline(Math.E, BigDecimal.class));\n            return;\n\n        // The Euler number doesn't seem to exist in any dialect...\n        default:\n            ctx.visit(function(N_E, getDataType()));\n            return;\n    }\n}", "path": "jOOQ/jOOQ/src/main/java/org/jooq/impl/Euler.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * Create a new routine call instance\n */\n", "func_signal": "public _GroupConcat()", "code": "{\n    super(\"_group_concat\", Public.PUBLIC, org.jooq.impl.SQLDataType.CLOB);\n\n    setReturnParameter(RETURN_VALUE);\n    addInParameter(_1);\n    addInParameter(_2);\n}", "path": "jOOQ/jOOQ-examples/jOOQ-spark-chart-example/src/main/java/org/jooq/example/chart/db/routines/_GroupConcat.java", "commit_date": "2020-01-06 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * A {@link org.jooq.Binding} implementation for the custom type.\n * \n */\n", "func_signal": "public ForcedType withBinding(String value)", "code": "{\n    setBinding(value);\n    return this;\n}", "path": "jOOQ/jOOQ-meta/src/main/java/org/jooq/meta/jaxb/ForcedType.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * Get a new {@link TableOptions} object for a given table type.\n */\n", "func_signal": "@NotNull\npublic static final TableOptions of(TableType tableType)", "code": "{\n    switch (tableType) {\n        case EXPRESSION:\n            return expression();\n        case FUNCTION:\n            return function();\n        case MATERIALIZED_VIEW:\n            return materializedView();\n        case TEMPORARY:\n            return temporaryTable();\n        case VIEW:\n            return view();\n        case TABLE:\n        case UNKNOWN:\n        default:\n            return table();\n    }\n}", "path": "jOOQ/jOOQ/src/main/java/org/jooq/TableOptions.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "jOOQ/jOOQ", "stars": 5840, "license": "other", "language": "java", "size": 266384}
{"docstring": "/**\n * Create a detached, initialised FortuneRecord\n */\n", "func_signal": "public FortuneRecord(UInteger id, String message)", "code": "{\n    super(Fortune.FORTUNE);\n\n    set(0, id);\n    set(1, message);\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/FortuneRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Return a list of World objects as JSON, selected randomly from the World\n * table.  For each row that is retrieved, that row will have its \n * randomNumber field updated and then the row will be persisted.  We\n * assume the table has 10,000 rows.\n */\n", "func_signal": "@PathSegment\npublic boolean update()", "code": "{\n  final Random random = ThreadLocalRandom.current();\n  final int queries = query().getInt(\"queries\", 1, 1, 500);\n  final World[] worlds = new World[queries];\n\n  for (int i = 0; i < queries; i++)\n  {\n    worlds[i] = store.get(World.class, random.nextInt(DB_ROWS) + 1);\n    worlds[i].setRandomNumber(random.nextInt(DB_ROWS) + 1);\n  }\n\n  store.putAll(Arrays.asList(worlds));\n  \n  return json(worlds);\n}", "path": "FrameworkBenchmarks/frameworks/Java/gemini/servlet/src/main/java/hello/home/handler/HelloHandler.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic FortuneRecord value1(UInteger value)", "code": "{\n    setId(value);\n    return this;\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/FortuneRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Constructor.\n */\n", "func_signal": "public HelloHandler(GeminiApplication app)", "code": "{\n  super(app, \"hllo\");\n  this.store = app.getStore();\n}", "path": "FrameworkBenchmarks/frameworks/Java/gemini/servlet/src/main/java/hello/home/handler/HelloHandler.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Constructs a new fortune object with the given parameters.\n *\n * @param id the ID of the fortune\n * @param message the message of the fortune\n */\n", "func_signal": "public Fortune(int id, String message)", "code": "{\n    this.id = id;\n    this.message = message;\n}", "path": "FrameworkBenchmarks/frameworks/Java/light-java/src/main/java/com/networknt/techempower/model/Fortune.java", "commit_date": "2017-02-11 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Constructs a new fortune object with the given parameters.\n *\n * @param id the ID of the fortune\n * @param message the message of the fortune\n */\n", "func_signal": "public Fortune(int id, String message)", "code": "{\n  this.id = id;\n  this.message = message;\n}", "path": "FrameworkBenchmarks/frameworks/Java/vertx-web/src/main/java/io/vertx/benchmark/model/Fortune.java", "commit_date": "2017-09-16 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic FortuneRecord value2(String value)", "code": "{\n    setMessage(value);\n    return this;\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/FortuneRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic WorldRecord values(UInteger value1, Integer value2)", "code": "{\n    value1(value1);\n    value2(value2);\n    return this;\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/WorldRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic FortuneRecord values(UInteger value1, String value2)", "code": "{\n    value1(value1);\n    value2(value2);\n    return this;\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/FortuneRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Return \"hello world\" as a JSON-encoded message.\n */\n", "func_signal": "@PathSegment(\"json\")\npublic boolean helloworld()", "code": "{\n  final Map<String,String> resp = new HashMap<>(1);\n  resp.put(GeminiConstants.GEMINI_MESSAGE, \"Hello, World!\");\n  \n  return json(resp);\n}", "path": "FrameworkBenchmarks/frameworks/Java/gemini/servlet/src/main/java/hello/home/handler/HelloHandler.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic WorldRecord value2(Integer value)", "code": "{\n    setRandomnumber(value);\n    return this;\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/WorldRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Also according to benchmark requirements, except that in this special case\n * of the update test we need to ensure we'll actually generate an update operation:\n * for this we need to generate a random number between 1 to 10000, but different\n * from the current field value.\n * @param previousRead\n * @return\n */\n", "func_signal": "private int randomWorldNumber(final int previousRead)", "code": "{\n    //conceptually split the random space in those before previousRead,\n    //and those after: this approach makes sure to not affect the random characteristics.\n    final int trueRandom = ThreadLocalRandom.current().nextInt(9999) + 2;\n    if (trueRandom<=previousRead) {\n        //all figures equal or before the current field read need to be shifted back by one\n        //so to avoid hitting the same number while not affecting the distribution.\n        return trueRandom - 1;\n    }\n    else {\n        //Those after are generated by taking the generated value 2...10000 as is.\n        return trueRandom;\n    }\n}", "path": "FrameworkBenchmarks/frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/resource/DbResource.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "// =========== helper ===================\n", "func_signal": "private static int getQueryCount(String queries)", "code": "{\n\ttry {\n\t\tint count = Integer.parseInt(queries);\n\t\treturn (count < 1) ? 1 : (count > 500) ? 500 : count;\n\t} catch (NumberFormatException ex) {\n\t\treturn 1;\n\t}\n}", "path": "FrameworkBenchmarks/frameworks/Java/officefloor/src/woof_benchmark_async/src/main/java/net/officefloor/benchmark/Logic.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "//0.0.0.0:8080/\");\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\ttry {\n\t\t\tfinal HttpServer server = GrizzlyHttpServerFactory.createHttpServer(BASE_URI,\n\t\t\t\t\tcreateApp(), false);\n\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tserver.shutdownNow();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Some modifications\n\t\t\tNetworkListener defaultListener = server.getListener(\"grizzly\");\n\t\t\tdefaultListener.getKeepAlive().setIdleTimeoutInSeconds(-1);\n\t\t\tdefaultListener.getKeepAlive().setMaxRequestsCount(-1);\n\t\t\tdefaultListener.getFileCache().setEnabled(false);\n\t\t\tdefaultListener.registerAddOn(new SimplifyAddOn());\n\t\t\tdefaultListener.registerAddOn(new HttpPipelineOptAddOn());\n\n\t\t\tfinal TCPNIOTransport transport = defaultListener.getTransport();\n\t\t\ttransport.setWorkerThreadPoolConfig(null); // force to not\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// initialize worker\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// thread pool\n\t\t\ttransport.setSelectorRunnersCount(Runtime.getRuntime().availableProcessors() * 2);\n\t\t\ttransport.setMemoryManager(new PooledMemoryManager());\n\n\t\t\tserver.start();\n\n\t\t\tSystem.out.println(String\n\t\t\t\t\t.format(\"TFBApplication started.%nStop the application using CTRL+C\"));\n\n\t\t\tThread.currentThread().join();\n\t\t} catch (IOException | InterruptedException ex) {\n\t\t\tLogger.getLogger(WebServer.class.getName()).log(Level.SEVERE, null, ex);\n\t\t}\n\t}", "path": "FrameworkBenchmarks/frameworks/Java/grizzly/src-jersey/main/java/hello/WebServer.java", "commit_date": "2019-04-03 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Create a detached, initialised WorldRecord\n */\n", "func_signal": "public WorldRecord(UInteger id, Integer randomnumber)", "code": "{\n    super(World.WORLD);\n\n    set(0, id);\n    set(1, randomnumber);\n}", "path": "FrameworkBenchmarks/frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/WorldRecord.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Return a list of World objects as JSON, selected randomly from the World\n * table.  Assume the table has 10,000 rows.\n */\n", "func_signal": "@PathSegment(\"cached_query\")\npublic boolean multipleCachedQueries()", "code": "{\n  final Random random = ThreadLocalRandom.current();\n  final int queries = query().getInt(\"queries\", 1, 1, 500);\n  final CachedWorld[] worlds = new CachedWorld[queries];\n\n  for (int i = 0; i < queries; i++)\n  {\n    worlds[i] = store.get(CachedWorld.class, random.nextInt(DB_ROWS) + 1);\n  }\n\n  return json(worlds);\n}", "path": "FrameworkBenchmarks/frameworks/Java/gemini/servlet/src/main/java/hello/home/handler/HelloHandler.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "//  private static final Logger LOGGER = LoggerFactory.getLogger(\n//      RequestExceptionMapper.class);\n", "func_signal": "@Override\n  public Response toResponse(Exception exception)", "code": "{\n    exception.printStackTrace();\n    System.err.println(exception.toString());\n    return Response.status(Status.NOT_FOUND).build();\n  }", "path": "FrameworkBenchmarks/frameworks/Java/undertow-jersey/src/main/java/hello/RequestExceptionMapper.java", "commit_date": "2018-02-26 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "//Rules: https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#database-updates\n//N.B. the benchmark seems to be designed to get in deadlocks when using a \"safe pattern\" of updating\n// the entity within the same transaction as the one which read it.\n// We therefore need to do a \"read then write\" while relinquishing the transaction between the two operations, as\n// all other tested frameworks seem to do.\n", "func_signal": "public World[] updates(@QueryParam(\"queries\") String queries)", "code": "{\n    final int count = parseQueryCount(queries);\n    final Collection<World> worlds = randomWorldForRead(count);\n    worlds.forEach( w -> {\n        //Read the one field, as required by the following rule:\n        // # vi. At least the randomNumber field must be read from the database result set.\n        final int previousRead = w.getRandomNumber();\n        //Update it, but make sure to exclude the current number as Hibernate optimisations would have us \"fail\"\n        //the verification:\n        w.setRandomNumber(randomWorldNumber(previousRead));\n    } );\n    worldRepository.updateAll(worlds);\n    return worlds.toArray(new World[0]);\n}", "path": "FrameworkBenchmarks/frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/resource/DbResource.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Return a list of World objects as JSON, selected randomly from the World\n * table.  Assume the table has 10,000 rows.\n */\n", "func_signal": "@PathSegment(\"query\")\npublic boolean multipleQueries()", "code": "{\n  final Random random = ThreadLocalRandom.current();\n  final int queries = query().getInt(\"queries\", 1, 1, 500);\n  final World[] worlds = new World[queries];\n\n  for (int i = 0; i < queries; i++)\n  {\n    worlds[i] = store.get(World.class, random.nextInt(DB_ROWS) + 1);\n  }\n  \n  return json(worlds);\n}", "path": "FrameworkBenchmarks/frameworks/Java/gemini/servlet/src/main/java/hello/home/handler/HelloHandler.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Constructs a new world object with the given parameters.\n *\n * @param id the ID of the world\n * @param randomNumber the random number of the world\n */\n", "func_signal": "public World(int id, int randomNumber)", "code": "{\n  this.id = id;\n  this.randomNumber = randomNumber;\n}", "path": "FrameworkBenchmarks/frameworks/Java/vertx/src/main/java/vertx/model/World.java", "commit_date": "2017-09-14 00:00:00", "repo_name": "TechEmpower/FrameworkBenchmarks", "stars": 7313, "license": "other", "language": "java", "size": 309291}
{"docstring": "/**\n * Tests indexing boolean\n */\n", "func_signal": "@Test\npublic void testBooleanIndexing()", "code": "{\n    PropertyKey name = makeKey(\"visible\", Boolean.class);\n    mgmt.buildIndex(\"booleanIndex\", Vertex.class).\n            addKey(name).buildMixedIndex(INDEX);\n    finishSchema();\n    clopen();\n\n    TitanVertex v1 = graph.addVertex();\n    v1.property(\"visible\", true);\n\n    TitanVertex v2 = graph.addVertex();\n    v2.property(\"visible\", false);\n\n    assertCount(2, graph.vertices());\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"visible\", true)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"visible\", false)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"visible\", Cmp.NOT_EQUAL, true)));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"visible\", Cmp.NOT_EQUAL, false)));\n\n    clopen();//Flush the index\n    assertCount(2, graph.vertices());\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"visible\", true)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"visible\", false)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"visible\", Cmp.NOT_EQUAL, true)));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"visible\", Cmp.NOT_EQUAL, false)));\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests indexing dates\n */\n", "func_signal": "@Test\npublic void testDateIndexing()", "code": "{\n    PropertyKey name = makeKey(\"date\", Date.class);\n    mgmt.buildIndex(\"dateIndex\", Vertex.class).\n            addKey(name).buildMixedIndex(INDEX);\n    finishSchema();\n    clopen();\n\n    TitanVertex v1 = graph.addVertex();\n    v1.property(\"date\", new Date(1));\n\n    TitanVertex v2 = graph.addVertex();\n    v2.property(\"date\", new Date(2000));\n\n\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"date\", Cmp.EQUAL, new Date(1))));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"date\", Cmp.GREATER_THAN, new Date(1))));\n    assertEquals(Sets.newHashSet(v1, v2), Sets.newHashSet(graph.query().has(\"date\", Cmp.GREATER_THAN_EQUAL, new Date(1)).vertices()));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"date\", Cmp.LESS_THAN, new Date(2000))));\n    assertEquals(Sets.newHashSet(v1, v2), Sets.newHashSet(graph.query().has(\"date\", Cmp.LESS_THAN_EQUAL, new Date(2000)).vertices()));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"date\", Cmp.NOT_EQUAL, new Date(1))));\n\n    clopen();//Flush the index\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"date\", Cmp.EQUAL, new Date(1))));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"date\", Cmp.GREATER_THAN, new Date(1))));\n    assertEquals(Sets.newHashSet(v1, v2), Sets.newHashSet(graph.query().has(\"date\", Cmp.GREATER_THAN_EQUAL, new Date(1)).vertices()));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"date\", Cmp.LESS_THAN, new Date(2000))));\n    assertEquals(Sets.newHashSet(v1, v2), Sets.newHashSet(graph.query().has(\"date\", Cmp.LESS_THAN_EQUAL, new Date(2000)).vertices()));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"date\", Cmp.NOT_EQUAL, new Date(1))));\n\n\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests index parameters (mapping and names) with raw indexQuery\n */\n", "func_signal": "@Test\npublic void testRawQueries()", "code": "{\n    if (!supportsLuceneStyleQueries()) return;\n\n    int numV = 1000;\n    String[] strs = {\"Uncle Berry has a farm\", \"and on his farm he has five ducks\", \"ducks are beautiful animals\", \"the sky is very blue today\"};\n    setupChainGraph(numV, strs, true);\n    clopen();\n\n    assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"v.text:ducks\").vertices());\n    assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"v.text:(farm uncle berry)\").vertices());\n    assertCount(numV / strs.length, graph.indexQuery(VINDEX, \"v.text:(farm uncle berry) AND v.name:\\\"Uncle Berry has a farm\\\"\").vertices());\n    assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"v.text:(beautiful are ducks)\").vertices());\n    assertCount(numV / strs.length * 2 - 10, graph.indexQuery(VINDEX, \"v.text:(beautiful are ducks)\").offset(10).vertices());\n    assertCount(10, graph.indexQuery(VINDEX, \"v.\\\"text\\\":(beautiful are ducks)\").limit(10).vertices());\n    assertCount(10, graph.indexQuery(VINDEX, \"v.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(10).vertices());\n    assertCount(0, graph.indexQuery(VINDEX, \"v.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(numV).vertices());\n    //Test name mapping\n    assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"xtext:ducks\").vertices());\n    assertCount(0, graph.indexQuery(VINDEX, \"text:ducks\").vertices());\n    //Test custom element identifier\n    assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"$v$text:ducks\").setElementIdentifier(\"$v$\").vertices());\n    //assertCount(0, graph.indexQuery(VINDEX, \"v.\\\"text\\\":ducks\").setElementIdentifier(\"$v$\").vertices()));\n\n    //Same queries for edges\n    assertCount(numV / strs.length * 2, graph.indexQuery(EINDEX, \"e.text:ducks\").edges());\n    assertCount(numV / strs.length * 2, graph.indexQuery(EINDEX, \"e.text:(farm uncle berry)\").edges());\n    assertCount(numV / strs.length, graph.indexQuery(EINDEX, \"e.text:(farm uncle berry) AND e.name:\\\"Uncle Berry has a farm\\\"\").edges());\n    assertCount(numV / strs.length * 2, graph.indexQuery(EINDEX, \"e.text:(beautiful are ducks)\").edges());\n    assertCount(numV / strs.length * 2 - 10, graph.indexQuery(EINDEX, \"e.text:(beautiful are ducks)\").offset(10).edges());\n    assertCount(10, graph.indexQuery(EINDEX, \"e.\\\"text\\\":(beautiful are ducks)\").limit(10).edges());\n    assertCount(10, graph.indexQuery(EINDEX, \"e.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(10).edges());\n    assertCount(0, graph.indexQuery(EINDEX, \"e.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(numV).edges());\n    //Test name mapping\n    assertCount(numV / strs.length * 2, graph.indexQuery(EINDEX, \"text:ducks\").edges());\n\n    //Same queries for edges\n    assertCount(numV / strs.length * 2, graph.indexQuery(PINDEX, \"p.text:ducks\").properties());\n    assertCount(numV / strs.length * 2, graph.indexQuery(PINDEX, \"p.text:(farm uncle berry)\").properties());\n    assertCount(numV / strs.length, graph.indexQuery(PINDEX, \"p.text:(farm uncle berry) AND p.name:\\\"Uncle Berry has a farm\\\"\").properties());\n    assertCount(numV / strs.length * 2, graph.indexQuery(PINDEX, \"p.text:(beautiful are ducks)\").properties());\n    assertCount(numV / strs.length * 2 - 10, graph.indexQuery(PINDEX, \"p.text:(beautiful are ducks)\").offset(10).properties());\n    assertCount(10, graph.indexQuery(PINDEX, \"p.\\\"text\\\":(beautiful are ducks)\").limit(10).properties());\n    assertCount(10, graph.indexQuery(PINDEX, \"p.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(10).properties());\n    assertCount(0, graph.indexQuery(PINDEX, \"p.\\\"text\\\":(beautiful are ducks)\").limit(10).offset(numV).properties());\n    //Test name mapping\n    assertCount(numV / strs.length * 2, graph.indexQuery(PINDEX, \"text:ducks\").properties());\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Load a bunch of key-column-values in a way that vaguely resembles a lower\n * triangular matrix.\n * <p/>\n * Iterate over key values {@code k} in the half-open long interval\n * {@code [offset, offset + dimension -1)}. For each {@code k}, iterate over\n * the column values {@code c} in the half-open integer interval\n * {@code [offset, k]}.\n * <p/>\n * For each key-column coordinate specified by a {@code (k, c} pair in the\n *iteration, write a value one byte long with all bits set (unsigned -1 or\n *signed 255).\n *\n * @param dimension size of loaded data (must be positive)\n * @param offset    offset (must be positive)\n * @throws StorageException unexpected failure\n */\n", "func_signal": "public void loadLowerTriangularValues(int dimension, int offset) throws BackendException", "code": "{\n\n    Preconditions.checkArgument(0 < dimension);\n    ByteBuffer val = ByteBuffer.allocate(1);\n    val.put((byte) -1);\n    StaticBuffer staticVal = StaticArrayBuffer.of(val);\n\n    List<Entry> rowAdditions = new ArrayList<Entry>(dimension);\n\n    for (int k = 0; k < dimension; k++) {\n\n        rowAdditions.clear();\n\n        ByteBuffer key = ByteBuffer.allocate(8);\n        key.putInt(0);\n        key.putInt(k + offset);\n        key.flip();\n        StaticBuffer staticKey = StaticArrayBuffer.of(key);\n\n        for (int c = 0; c <= k; c++) {\n            ByteBuffer col = ByteBuffer.allocate(4);\n            col.putInt(c + offset);\n            col.flip();\n            StaticBuffer staticCol = StaticArrayBuffer.of(col);\n            rowAdditions.add(StaticArrayEntry.of(staticCol, staticVal));\n        }\n\n        store.mutate(staticKey, rowAdditions, Collections.<StaticBuffer>emptyList(), tx);\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests conditional indexing and the different management features\n */\n", "func_signal": "@Test\npublic void testConditionalIndexing()", "code": "{\n    PropertyKey name = makeKey(\"name\", String.class);\n    PropertyKey weight = makeKey(\"weight\", Double.class);\n    PropertyKey text = makeKey(\"text\", String.class);\n\n    VertexLabel person = mgmt.makeVertexLabel(\"person\").make();\n    VertexLabel org = mgmt.makeVertexLabel(\"org\").make();\n\n    TitanGraphIndex index1 = mgmt.buildIndex(\"index1\", Vertex.class).\n            addKey(name, getStringMapping()).buildMixedIndex(INDEX);\n    TitanGraphIndex index2 = mgmt.buildIndex(\"index2\", Vertex.class).indexOnly(person).\n            addKey(text, getTextMapping()).addKey(weight).buildMixedIndex(INDEX);\n    TitanGraphIndex index3 = mgmt.buildIndex(\"index3\", Vertex.class).indexOnly(org).\n            addKey(text, getTextMapping()).addKey(weight).buildMixedIndex(INDEX);\n\n    // ########### INSPECTION & FAILURE ##############\n    assertTrue(mgmt.containsGraphIndex(\"index1\"));\n    assertFalse(mgmt.containsGraphIndex(\"index\"));\n    assertCount(3, mgmt.getGraphIndexes(Vertex.class));\n    assertNull(mgmt.getGraphIndex(\"indexx\"));\n\n    name = mgmt.getPropertyKey(\"name\");\n    weight = mgmt.getPropertyKey(\"weight\");\n    text = mgmt.getPropertyKey(\"text\");\n    person = mgmt.getVertexLabel(\"person\");\n    org = mgmt.getVertexLabel(\"org\");\n    index1 = mgmt.getGraphIndex(\"index1\");\n    index2 = mgmt.getGraphIndex(\"index2\");\n    index3 = mgmt.getGraphIndex(\"index3\");\n\n    assertTrue(Vertex.class.isAssignableFrom(index1.getIndexedElement()));\n    assertEquals(\"index2\", index2.name());\n    assertEquals(INDEX, index3.getBackingIndex());\n    assertFalse(index2.isUnique());\n    assertEquals(2, index3.getFieldKeys().length);\n    assertEquals(1, index1.getFieldKeys().length);\n    assertEquals(3, index3.getParametersFor(text).length);\n    assertEquals(2, index3.getParametersFor(weight).length);\n\n    try {\n        //Already exists\n        mgmt.buildIndex(\"index2\", Vertex.class).addKey(weight).buildMixedIndex(INDEX);\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n    try {\n        //Already exists\n        mgmt.buildIndex(\"index2\", Vertex.class).addKey(weight).buildCompositeIndex();\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n    try {\n        //Key is already added\n        mgmt.addIndexKey(index2, weight);\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n\n    finishSchema();\n    clopen();\n\n    // ########### INSPECTION & FAILURE (copied from above) ##############\n    assertTrue(mgmt.containsGraphIndex(\"index1\"));\n    assertFalse(mgmt.containsGraphIndex(\"index\"));\n    assertCount(3, mgmt.getGraphIndexes(Vertex.class));\n    assertNull(mgmt.getGraphIndex(\"indexx\"));\n\n    name = mgmt.getPropertyKey(\"name\");\n    weight = mgmt.getPropertyKey(\"weight\");\n    text = mgmt.getPropertyKey(\"text\");\n    person = mgmt.getVertexLabel(\"person\");\n    org = mgmt.getVertexLabel(\"org\");\n    index1 = mgmt.getGraphIndex(\"index1\");\n    index2 = mgmt.getGraphIndex(\"index2\");\n    index3 = mgmt.getGraphIndex(\"index3\");\n\n    assertTrue(Vertex.class.isAssignableFrom(index1.getIndexedElement()));\n    assertEquals(\"index2\", index2.name());\n    assertEquals(INDEX, index3.getBackingIndex());\n    assertFalse(index2.isUnique());\n    assertEquals(2, index3.getFieldKeys().length);\n    assertEquals(1, index1.getFieldKeys().length);\n    assertEquals(3, index3.getParametersFor(text).length);\n    assertEquals(2, index3.getParametersFor(weight).length);\n\n    try {\n        //Already exists\n        mgmt.buildIndex(\"index2\", Vertex.class).addKey(weight).buildMixedIndex(INDEX);\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n    try {\n        //Already exists\n        mgmt.buildIndex(\"index2\", Vertex.class).addKey(weight).buildCompositeIndex();\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n    try {\n        //Key is already added\n        mgmt.addIndexKey(index2, weight);\n        fail();\n    } catch (IllegalArgumentException e) {\n    }\n\n\n    // ########### TRANSACTIONAL ##############\n    weight = tx.getPropertyKey(\"weight\");\n\n\n    final int numV = 200;\n    String[] strs = {\"houseboat\", \"humanoid\", \"differential\", \"extraordinary\"};\n    String[] strs2 = new String[strs.length];\n    for (int i = 0; i < strs.length; i++) strs2[i] = strs[i] + \" \" + strs[i];\n    final int modulo = 5;\n    assert numV % (modulo * strs.length * 2) == 0;\n\n    for (int i = 0; i < numV; i++) {\n        TitanVertex v = tx.addVertex(i % 2 == 0 ? \"person\" : \"org\");\n        v.property(\"name\", strs[i % strs.length]);\n        v.property(\"text\", strs[i % strs.length]);\n        v.property(\"weight\", (i % modulo) + 0.5);\n    }\n\n    //########## QUERIES ################\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index2.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\").orderBy(\"weight\", decr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.DESC, index2.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[3]).has(LABEL_NAME, Cmp.EQUAL, \"org\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index3.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[1]).has(LABEL_NAME, Cmp.EQUAL, \"org\").orderBy(\"weight\", decr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.DESC, index3.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(\"weight\", Cmp.EQUAL, 2.5).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / (modulo * strs.length), new boolean[]{true, true}, index2.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[2]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[3]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            0, new boolean[]{false, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[0]), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[2]).has(\"text\", Text.CONTAINS, strs[2]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index1.name(), index2.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[0]).has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\").orderBy(\"weight\", incr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.ASC, index1.name(), index2.name());\n\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, true});\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).orderBy(\"weight\", incr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, false}, weight, Order.ASC);\n\n    clopen();\n    weight = tx.getPropertyKey(\"weight\");\n\n    //########## QUERIES (copied from above) ################\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index2.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\").orderBy(\"weight\", decr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.DESC, index2.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[3]).has(LABEL_NAME, Cmp.EQUAL, \"org\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index3.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[1]).has(LABEL_NAME, Cmp.EQUAL, \"org\").orderBy(\"weight\", decr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.DESC, index3.name());\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).has(\"weight\", Cmp.EQUAL, 2.5).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / (modulo * strs.length), new boolean[]{true, true}, index2.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[2]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[3]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            0, new boolean[]{false, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[0]), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index1.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[2]).has(\"text\", Text.CONTAINS, strs[2]).has(LABEL_NAME, Cmp.EQUAL, \"person\"), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, index1.name(), index2.name());\n    evaluateQuery(tx.query().has(\"name\", Cmp.EQUAL, strs[0]).has(\"text\", Text.CONTAINS, strs[0]).has(LABEL_NAME, Cmp.EQUAL, \"person\").orderBy(\"weight\", incr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{true, true}, weight, Order.ASC, index1.name(), index2.name());\n\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, true});\n    evaluateQuery(tx.query().has(\"text\", Text.CONTAINS, strs[0]).orderBy(\"weight\", incr), ElementCategory.VERTEX,\n            numV / strs.length, new boolean[]{false, false}, weight, Order.ASC);\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Test {@code getKeys} with columns slice values chosen to trigger\n * potential fencepost bugs.\n * <p/>\n * Description of data generated for and queried by this test:\n * <p/>\n * Generate a sequence of keys as unsigned integers, starting at zero. Each\n * row has as many columns as the key value. The columns are generated in\n * the same way as the keys. This results in a sort of \"lower triangular\"\n * data space, with no values above the diagonal.\n *\n * @throws BackendException shouldn't happen\n * @throws IOException      shouldn't happen\n */\n", "func_signal": "@Test\npublic void testGetKeysColumnSlicesOnLowerTriangular() throws BackendException, IOException", "code": "{\n    if (manager.getFeatures().hasScan()) {\n        final int offset = 10;\n        final int size = 10;\n        final int midpoint = size / 2 + offset;\n        final int upper = offset + size;\n        final int step = 1;\n        Preconditions.checkArgument(0 == size % 2);\n        Preconditions.checkArgument(0 == offset % 2);\n        Preconditions.checkArgument(4 <= size);\n        Preconditions.checkArgument(1 <= offset);\n\n        loadLowerTriangularValues(size, offset);\n\n        boolean executed = false;\n\n        if (manager.getFeatures().hasUnorderedScan()) {\n\n            Collection<StaticBuffer> expected = new HashSet<StaticBuffer>(size);\n\n            for (int start = midpoint; start >= offset - step; start -= step) {\n                for (int end = midpoint + 1; end <= upper + step; end += step) {\n                    Preconditions.checkArgument(start < end);\n\n                    // Set column bounds\n                    StaticBuffer startCol = BufferUtil.getIntBuffer(start);\n                    StaticBuffer endCol = BufferUtil.getIntBuffer(end);\n                    SliceQuery sq = new SliceQuery(startCol, endCol);\n\n                    // Compute expectation\n                    expected.clear();\n                    for (long l = Math.max(start, offset); l < upper; l++) {\n                        expected.add(BufferUtil.getLongBuffer(l));\n                    }\n\n                    // Compute actual\n                    KeyIterator i = store.getKeys(sq, tx);\n                    Collection<StaticBuffer> actual = Sets.newHashSet(i);\n\n                    // Check\n                    log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                            new Object[]{startCol, endCol, expected.size()});\n                    Assert.assertEquals(expected, actual);\n                    i.close();\n                    executed = true;\n                }\n            }\n\n        } else if (manager.getFeatures().hasOrderedScan()) {\n\n            Collection<StaticBuffer> expected = new ArrayList<StaticBuffer>(size);\n\n            for (int start = midpoint; start >= offset - step; start -= step) {\n                for (int end = midpoint + 1; end <= upper + step; end += step) {\n                    Preconditions.checkArgument(start < end);\n\n                    // Set column bounds\n                    StaticBuffer startCol = BufferUtil.getIntBuffer(start);\n                    StaticBuffer endCol = BufferUtil.getIntBuffer(end);\n                    SliceQuery sq = new SliceQuery(startCol, endCol);\n\n                    // Set key bounds\n                    StaticBuffer keyStart = BufferUtil.getLongBuffer(start);\n                    StaticBuffer keyEnd = BufferUtil.getLongBuffer(end);\n                    KeyRangeQuery krq = new KeyRangeQuery(keyStart, keyEnd, sq);\n\n                    // Compute expectation\n                    expected.clear();\n                    for (long l = Math.max(start, offset); l < Math.min(upper, end); l++) {\n                        expected.add(BufferUtil.getLongBuffer(l));\n                    }\n\n                    // Compute actual\n                    KeyIterator i = store.getKeys(krq, tx);\n                    Collection<StaticBuffer> actual = Lists.newArrayList(i);\n\n                    log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                            new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                    Assert.assertEquals(expected, actual);\n                    i.close();\n                    executed = true;\n                }\n            }\n\n        } else {\n            throw new UnsupportedOperationException(\n                    \"Illegal store configuration: supportsScan()=true but supportsOrderedScan()=supportsUnorderedScan()=false\");\n        }\n\n        Preconditions.checkArgument(executed);\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "//@Test\n", "func_signal": "public void compareStores() throws BackendException", "code": "{\n    int keys = 1000, columns = 2000; boolean normalMode=true;\n    String[][] values = new String[keys*2][];\n    for (int i = 0; i < keys*2; i++) {\n        if(i%2==0) {\n            if (normalMode) {\n                values[i]=new String[columns + 4];\n            } else {\n                values[i]=new String[4];\n            }\n        } else {\n            if (normalMode) {\n                values[i]=new String[0];\n            } else {\n                values[i]=new String[columns];\n            }\n        }\n        for (int j = 0; j < values[i].length; j++) {\n            values[i][j] = RandomGenerator.randomString(30,35);\n        }\n    }\n    log.debug(\"Loading values: \" + keys + \"x\" + columns);\n    long time = System.currentTimeMillis();\n    loadValues(values);\n    clopen();\n    System.out.println(\"Loading time (ms): \" + (System.currentTimeMillis() - time));\n    //print(values);\n    Random r = new Random();\n    int trials = 500;\n    log.debug(\"Reading values: \" + trials + \" trials\");\n    for (int i=0; i<10;i++) {\n        time = System.currentTimeMillis();\n        for (int t = 0; t < trials; t++) {\n            int key = r.nextInt(keys)*2;\n            assertEquals(2,store.getSlice(new KeySliceQuery(KeyValueStoreUtil.getBuffer(key), KeyValueStoreUtil.getBuffer(2002), KeyValueStoreUtil.getBuffer(2004)), tx).size());\n        }\n\n        System.out.println(\"Reading time (ms): \" + (System.currentTimeMillis() - time));\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests index parameters (mapping and names) and various string predicates\n */\n", "func_signal": "@Test\npublic void testIndexParameters()", "code": "{\n    int numV = 1000;\n    String[] strs = {\"Uncle Berry has a farm\", \"and on his farm he has five ducks\", \"ducks are beautiful animals\", \"the sky is very blue today\"};\n    setupChainGraph(numV, strs, false);\n\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.VERTEX, numV / strs.length * 2, new boolean[]{true, true}, VINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").vertices());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").vertices());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.VERTEX, numV / strs.length, new boolean[]{true, true}, VINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").vertices());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).vertices());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(\"name\", Cmp.NOT_EQUAL, strs[2]).vertices());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").vertices());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").vertices());\n\n    //Same queries for edges\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.EDGE, numV / strs.length * 2, new boolean[]{true, true}, EINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").edges());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").edges());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.EDGE, numV / strs.length, new boolean[]{true, true}, EINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").edges());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).edges());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(\"name\", Cmp.NOT_EQUAL, strs[2]).edges());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").edges());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").edges());\n\n    //Same queries for properties\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.PROPERTY, numV / strs.length * 2, new boolean[]{true, true}, PINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").properties());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").properties());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.PROPERTY, numV / strs.length, new boolean[]{true, true}, PINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").properties());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).properties());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(LABEL_NAME, \"uid\").has(\"name\", Cmp.NOT_EQUAL, strs[2]).properties());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").properties());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").properties());\n\n\n    clopen();\n    /* =======================================\n    Same queries as above but against backend */\n\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.VERTEX, numV / strs.length * 2, new boolean[]{true, true}, VINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").vertices());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").vertices());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.VERTEX, numV / strs.length, new boolean[]{true, true}, VINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").vertices());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).vertices());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(\"name\", Cmp.NOT_EQUAL, strs[2]).vertices());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").vertices());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").vertices());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").vertices());\n\n    //Same queries for edges\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.EDGE, numV / strs.length * 2, new boolean[]{true, true}, EINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").edges());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").edges());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.EDGE, numV / strs.length, new boolean[]{true, true}, EINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").edges());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).edges());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(\"name\", Cmp.NOT_EQUAL, strs[2]).edges());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").edges());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").edges());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").edges());\n\n    //Same queries for properties\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS, \"ducks\"),\n            ElementCategory.PROPERTY, numV / strs.length * 2, new boolean[]{true, true}, PINDEX);\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"ducks\").properties());\n    assertCount(numV / strs.length * 2, graph.query().has(\"text\", Text.CONTAINS, \"farm\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS, \"beautiful\").properties());\n    evaluateQuery(graph.query().has(\"text\", Text.CONTAINS_PREFIX, \"beauti\"),\n            ElementCategory.PROPERTY, numV / strs.length, new boolean[]{true, true}, PINDEX);\n    assertCount(numV / strs.length, graph.query().has(\"text\", Text.CONTAINS_REGEX, \"be[r]+y\").properties());\n    assertCount(0, graph.query().has(\"text\", Text.CONTAINS, \"lolipop\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Cmp.EQUAL, strs[1]).properties());\n    assertCount(numV / strs.length * (strs.length - 1), graph.query().has(LABEL_NAME, \"uid\").has(\"name\", Cmp.NOT_EQUAL, strs[2]).properties());\n    assertCount(0, graph.query().has(\"name\", Cmp.EQUAL, \"farm\").properties());\n    assertCount(numV / strs.length, graph.query().has(\"name\", Text.PREFIX, \"ducks\").properties());\n    assertCount(numV / strs.length * 2, graph.query().has(\"name\", Text.REGEX, \"(.*)ducks(.*)\").properties());\n\n    //Test name mapping\n    if (supportsLuceneStyleQueries()) {\n        assertCount(numV / strs.length * 2, graph.indexQuery(VINDEX, \"xtext:ducks\").vertices());\n        assertCount(0, graph.indexQuery(EINDEX, \"xtext:ducks\").edges());\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/* ---------------------------------------------------------------\n * Query Execution\n\t * ---------------------------------------------------------------\n\t */\n", "func_signal": "@Override\npublic Iterable<TitanVertex> vertices()", "code": "{\n    GraphCentricQuery query = constructQuery(ElementCategory.VERTEX);\n    return Iterables.filter(new QueryProcessor<GraphCentricQuery, TitanElement, JointIndexQuery>(query, tx.elementProcessor), TitanVertex.class);\n}", "path": "titan/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/graph/GraphCentricQueryBuilder.java", "commit_date": "2015-05-19 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Returns the edge label of this edge\n *\n * @return edge label of this edge\n */\n", "func_signal": "public default EdgeLabel edgeLabel()", "code": "{\n    assert getType() instanceof EdgeLabel;\n    return (EdgeLabel)getType();\n}", "path": "titan/titan-core/src/main/java/com/thinkaurelius/titan/core/TitanEdge.java", "commit_date": "2015-04-11 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests indexing boolean\n */\n", "func_signal": "@Test\npublic void testUUIDIndexing()", "code": "{\n    PropertyKey name = makeKey(\"uid\", UUID.class);\n    mgmt.buildIndex(\"uuidIndex\", Vertex.class).\n            addKey(name).buildMixedIndex(INDEX);\n    finishSchema();\n    clopen();\n\n    UUID uid1 = UUID.randomUUID();\n    UUID uid2 = UUID.randomUUID();\n\n    TitanVertex v1 = graph.addVertex();\n    v1.property(\"uid\", uid1);\n\n    TitanVertex v2 = graph.addVertex();\n    v2.property(\"uid\", uid2);\n\n    assertCount(2, graph.query().vertices());\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"uid\", uid1)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"uid\", uid2)));\n\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"uid\", Cmp.NOT_EQUAL, uid1)));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"uid\", Cmp.NOT_EQUAL, uid2)));\n\n    clopen();//Flush the index\n    assertCount(2, graph.query().vertices());\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"uid\", uid1)));\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"uid\", uid2)));\n\n    assertEquals(v2, getOnlyVertex(graph.query().has(\"uid\", Cmp.NOT_EQUAL, uid1)));\n    assertEquals(v1, getOnlyVertex(graph.query().has(\"uid\", Cmp.NOT_EQUAL, uid2)));\n\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests indexing instants\n */\n", "func_signal": "@Test\npublic void testInstantIndexing()", "code": "{\n    PropertyKey name = makeKey(\"instant\", Instant.class);\n    mgmt.buildIndex(\"instantIndex\", Vertex.class).\n            addKey(name).buildMixedIndex(INDEX);\n    finishSchema();\n    clopen();\n    Instant firstTimestamp = Instant.ofEpochMilli(1);\n    Instant secondTimestamp = Instant.ofEpochMilli(2000);\n\n    TitanVertex v1 = graph.addVertex();\n    v1.property(\"instant\", firstTimestamp);\n\n    TitanVertex v2 = graph.addVertex();\n    v2.property(\"instant\", secondTimestamp);\n\n    testInstant(firstTimestamp, secondTimestamp, v1, v2);\n\n    firstTimestamp = Instant.ofEpochSecond(0, 1);\n    v1 = (TitanVertex) graph.vertices(v1.id()).next();\n    v1.property(\"instant\", firstTimestamp);\n    if (indexFeatures.supportsNanoseconds()) {\n        testInstant(firstTimestamp, secondTimestamp, v1, v2);\n    } else {\n        clopen();//Flush the index\n        try {\n            assertEquals(v1, getOnlyVertex(graph.query().has(\"instant\", Cmp.EQUAL, firstTimestamp)));\n            Assert.fail(\"Should have failed to update the index\");\n        } catch (Exception e) {\n\n        }\n    }\n\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Check that {@code getKeys} methods respect column slice bounds. Uses\n * nearly the same data as {@link #testOrderedGetKeysRespectsKeyLimit()},\n * except that all columns on every 10th row exceed the {@code getKeys}\n * slice limit.\n * <p/>\n * For each row in this test, either all columns match the slice bounds or\n * all columns fall outside the slice bounds. For this reason, it could be\n * described as a \"coarse-grained\" or \"simple\" test of {@code getKeys}'s\n * column bounds checking.\n *\n * @throws BackendException\n */\n", "func_signal": "@Test\npublic void testGetKeysColumnSlicesSimple()\n        throws BackendException", "code": "{\n    if (manager.getFeatures().hasScan()) {\n\n        final int shiftEveryNthRows = 10;\n        final int expectedKeyCount = numKeys / shiftEveryNthRows * (shiftEveryNthRows - 1);\n\n        Preconditions.checkArgument(0 == numKeys % shiftEveryNthRows);\n        Preconditions.checkArgument(10 < numKeys / shiftEveryNthRows);\n\n        String[][] values = generateValues();\n        loadValues(values, shiftEveryNthRows, 4);\n\n        RecordIterator<StaticBuffer> i;\n        i = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        Assert.assertEquals(expectedKeyCount, KeyValueStoreUtil.count(i));\n\n        clopen();\n\n        i = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        Assert.assertEquals(expectedKeyCount, KeyValueStoreUtil.count(i));\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "//cfToEntries(currentRow.cf, sliceQuery).iterator();\n", "func_signal": "@Override\n                public boolean hasNext()", "code": "{\n   ensureOpen();\n   return columns.hasNext();\n                }", "path": "titan/titan-cassandra/src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore.java", "commit_date": "2015-08-29 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Tests indexing using _all virtual field\n */\n", "func_signal": "@Test\npublic void testWidcardQuery()", "code": "{\n    if (supportsWildcardQuery()) {\n        PropertyKey p1 = makeKey(\"p1\", String.class);\n        PropertyKey p2 = makeKey(\"p2\", String.class);\n        mgmt.buildIndex(\"mixedIndex\", Vertex.class).addKey(p1).addKey(p2).buildMixedIndex(INDEX);\n\n        finishSchema();\n        clopen();\n\n        TitanVertex v1 = graph.addVertex();\n        v1.property(\"p1\", \"test1\");\n        v1.property(\"p2\", \"test2\");\n\n        clopen();//Flush the index\n        assertEquals(v1, graph.indexQuery(\"mixedIndex\", \"v.*:\\\"test1\\\"\").vertices().iterator().next().getElement());\n        assertEquals(v1, graph.indexQuery(\"mixedIndex\", \"v.*:\\\"test2\\\"\").vertices().iterator().next().getElement());\n    }\n\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "commit_date": "2015-05-18 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Create a RangeSliceCommand and run it against the StorageProxy.\n * <p>\n * To match the behavior of the standard Cassandra thrift API endpoint, the\n * {@code nowMillis} argument should be the number of milliseconds since the\n * UNIX Epoch (e.g. System.currentTimeMillis() or equivalent obtained\n * through a {@link TimestampProvider}). This is per\n * {@link org.apache.cassandra.thrift.CassandraServer#get_range_slices(ColumnParent, SlicePredicate, KeyRange, ConsistencyLevel)},\n * which passes the server's System.currentTimeMillis() to the\n * {@code RangeSliceCommand} constructor.\n */\n", "func_signal": "private List<Row> getKeySlice(Token start,\n                              Token end,\n                              @Nullable SliceQuery sliceQuery,\n                              int pageSize,\n                              long nowMillis) throws BackendException", "code": "{\n    IPartitioner partitioner = StorageService.getPartitioner();\n\n    SliceRange columnSlice = new SliceRange();\n    if (sliceQuery == null) {\n        columnSlice.setStart(ArrayUtils.EMPTY_BYTE_ARRAY)\n                .setFinish(ArrayUtils.EMPTY_BYTE_ARRAY)\n                .setCount(5);\n    } else {\n        columnSlice.setStart(sliceQuery.getSliceStart().asByteBuffer())\n                .setFinish(sliceQuery.getSliceEnd().asByteBuffer())\n                .setCount(sliceQuery.hasLimit() ? sliceQuery.getLimit() : Integer.MAX_VALUE);\n    }\n    /* Note: we need to fetch columns for each row as well to remove \"range ghosts\" */\n    SlicePredicate predicate = new SlicePredicate().setSlice_range(columnSlice);\n\n    RowPosition startPosition = start.minKeyBound(partitioner);\n    RowPosition endPosition = end.minKeyBound(partitioner);\n\n    List<Row> rows;\n\n    try {\n        CFMetaData cfm = Schema.instance.getCFMetaData(keyspace, columnFamily);\n        IDiskAtomFilter filter = ThriftValidation.asIFilter(predicate, cfm, null);\n\n        RangeSliceCommand cmd = new RangeSliceCommand(keyspace, columnFamily, nowMillis, filter, new Bounds<RowPosition>(startPosition, endPosition), pageSize);\n\n        rows = StorageProxy.getRangeSlice(cmd, ConsistencyLevel.QUORUM);\n    } catch (Exception e) {\n        throw new PermanentBackendException(e);\n    }\n\n    return rows;\n}", "path": "titan/titan-cassandra/src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore.java", "commit_date": "2015-08-29 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Loads a block of data where keys are longs on [idOffset, idOffset +\n * numKeys) and the columns are longs on [idOffset, idOffset + numColumns).\n * {@code idOffset} is {@link KeyValueStoreUtil#idOffset}. Note that\n * identical columns appear on every key. The loaded values are randomly\n * generated strings converted to bytes.\n * <p/>\n * Calls the store's supported {@code getKeys} method depending on whether\n * it supports ordered or unordered scan. This logic is delegated to\n * {@link KCVSUtil#getKeys(KeyColumnValueStore, StoreFeatures, int, int, StoreTransaction)}\n * . That method uses all-zero and all-one buffers for the key and column\n * limits and retrieves every key.\n * <p/>\n * This method does nothing and returns immediately if the store supports no\n * scans.\n */\n", "func_signal": "@Test\npublic void scanTest() throws BackendException", "code": "{\n    if (manager.getFeatures().hasScan()) {\n        String[][] values = generateValues();\n        loadValues(values);\n        KeyIterator iterator0 = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        verifyIterator(iterator0,numKeys,1);\n        clopen();\n        KeyIterator iterator1 = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        KeyIterator iterator2 = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        // The idea is to open an iterator without using it\n        // to make sure that closing a transaction will clean it up.\n        // (important for BerkeleyJE where leaving cursors open causes exceptions)\n        @SuppressWarnings(\"unused\")\n        KeyIterator iterator3 = KCVSUtil.getKeys(store, storeFeatures(), 8, 4, tx);\n        verifyIterator(iterator1,numKeys,1);\n        verifyIterator(iterator2,numKeys,1);\n    }\n}", "path": "titan/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/* ---------------------------------------------------------------\n * Query Construction\n\t * ---------------------------------------------------------------\n\t */\n", "func_signal": "public GraphCentricQueryBuilder profiler(QueryProfiler profiler)", "code": "{\n    Preconditions.checkNotNull(profiler);\n    this.profiler=profiler;\n    return this;\n}", "path": "titan/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/graph/GraphCentricQueryBuilder.java", "commit_date": "2015-05-19 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * If the iterator argument is non-null, then return a new\n * {@code MetricInstrumentedIterator} wrapping it. Metrics for method calls\n * on the wrapped instance will be prefixed with the string {@code prefix}\n * which must be non-null. If the iterator argument is null, then return\n * null.\n * \n * @param keyIterator\n *            the iterator to wrap with Metrics measurements\n * @param prefix\n *            the Metrics name prefix string\n * \n * @return a wrapper around {@code keyIterator} or null if\n *         {@code keyIterator} is null\n */\n", "func_signal": "public static MetricInstrumentedIterator of(KeyIterator keyIterator, String... prefix)", "code": "{\n    if (keyIterator == null) {\n        return null;\n    }\n\n    Preconditions.checkNotNull(prefix);\n    return new MetricInstrumentedIterator(keyIterator, StringUtils.join(prefix,\".\"));\n}", "path": "titan/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedIterator.java", "commit_date": "2014-01-29 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Only use this in testing.\n * <p>\n * This deletes all entries in the global map of namespaces to mediators\n * whose namespace key equals the argument.\n *\n * @param prefix\n */\n", "func_signal": "public void clear(String namespace)", "code": "{\n    Iterator<Entry<String, LocalLockMediator<?>>> iter = mediators.entrySet().iterator();\n\n    while (iter.hasNext()) {\n        Entry<String, LocalLockMediator<?>> e = iter.next();\n\n        if (e.getKey().equals(namespace)) {\n            iter.remove();\n        }\n    }\n}", "path": "titan/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/locking/LocalLockMediators.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "thinkaurelius/titan", "stars": 5245, "license": "apache-2.0", "language": "java", "size": 91250}
{"docstring": "/**\n * Draw a bitmap with the result points highlighted instead of the live scanning display.\n *\n * @param result An image of the result.\n */\n", "func_signal": "public void drawResultBitmap(Bitmap result)", "code": "{\n    resultBitmap = result;\n    invalidate();\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/ViewfinderView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Only call from the UI thread.\n *\n * @param point a point to draw, relative to the preview frame\n */\n", "func_signal": "public void addPossibleResultPoint(ResultPoint point)", "code": "{\n    if (possibleResultPoints.size() < MAX_RESULT_POINTS)\n        possibleResultPoints.add(point);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/ViewfinderView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Construct a new CameraInstance with a specific CameraManager.\n *\n * @param cameraManager the CameraManager to use\n */\n", "func_signal": "public CameraInstance(CameraManager cameraManager)", "code": "{\n    Util.validateMainThread();\n\n    this.cameraManager = cameraManager;\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/CameraInstance.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Sort previews based on their suitability.\n *\n * In most cases, {@link #getBestPreviewSize(List, Size)} should be used instead.\n *\n * The sizes list may be reordered by this call.\n *\n * @param sizes supported preview sizes, containing at least one size. Sizes are in natural camera orientation.\n * @param desired The desired viewfinder size, in the same orientation\n * @return an ordered list, best preview first\n */\n", "func_signal": "public List<Size> getBestPreviewOrder(List<Size> sizes, final Size desired)", "code": "{\n    if (desired == null) {\n        return sizes;\n    }\n\n    Collections.sort(sizes, new Comparator<Size>() {\n        @Override\n        public int compare(Size a, Size b) {\n            float aScore = getScore(a, desired);\n            float bScore = getScore(b, desired);\n            // Bigger score first\n            return Float.compare(bScore, aScore);\n        }\n    });\n\n\n    return sizes;\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/PreviewScalingStrategy.java", "commit_date": "2016-07-04 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Construct a new CameraInstance.\n *\n * A new CameraManager is created.\n *\n * @param context the Android Context\n */\n", "func_signal": "public CameraInstance(Context context)", "code": "{\n    Util.validateMainThread();\n\n    this.cameraThread = CameraThread.getInstance();\n    this.cameraManager = new CameraManager(context);\n    this.cameraManager.setCameraSettings(cameraSettings);\n    this.mainHandler = new Handler();\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/CameraInstance.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Get a score for our size.\n *\n * Based on heuristics for penalizing scaling and cropping.\n *\n * 1.0 is perfect (exact match).\n * 0.0 means we can't use it at all.\n *\n * @param size the camera preview size (that can be scaled)\n * @param desired the viewfinder size\n * @return the score\n */\n", "func_signal": "@Override\nprotected float getScore(Size size, Size desired)", "code": "{\n    if (size.width <= 0 || size.height <= 0) {\n        return 0f;\n    }\n    float scaleX = absRatio(size.width * 1.0f / desired.width);\n    float scaleY = absRatio(size.height * 1.0f / desired.height);\n\n    float scaleScore = 1.0f / scaleX / scaleY;\n\n    float distortion = absRatio((1.0f * size.width / size.height) / (1.0f * desired.width / desired.height));\n\n    // Distortion is bad!\n    float distortionScore = 1.0f / distortion / distortion / distortion;\n\n    return scaleScore * distortionScore;\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/FitXYStrategy.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Cancel the activity timer.\n */\n", "func_signal": "public void cancel()", "code": "{\n    cancelCallback();\n    unregisterReceiver();\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/google/zxing/client/android/InactivityTimer.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "// This constructor is used when the class is built from an XML resource.\n", "func_signal": "public ViewfinderView(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    // Initialize these once for performance rather than calling them every time in onDraw().\n    paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    Resources resources = getResources();\n\n    // Get setted attributes on view\n    TypedArray attributes = getContext().obtainStyledAttributes(attrs, R.styleable.zxing_finder);\n\n    this.maskColor = attributes.getColor(R.styleable.zxing_finder_zxing_viewfinder_mask,\n            resources.getColor(R.color.zxing_viewfinder_mask));\n    this.resultColor = attributes.getColor(R.styleable.zxing_finder_zxing_result_view,\n            resources.getColor(R.color.zxing_result_view));\n    this.laserColor = attributes.getColor(R.styleable.zxing_finder_zxing_viewfinder_laser,\n            resources.getColor(R.color.zxing_viewfinder_laser));\n    this.resultPointColor = attributes.getColor(R.styleable.zxing_finder_zxing_possible_result_points,\n            resources.getColor(R.color.zxing_possible_result_points));\n    this.laserVisibility = attributes.getBoolean(R.styleable.zxing_finder_zxing_viewfinder_laser_visibility,\n            true);\n\n    attributes.recycle();\n\n    scannerAlpha = 0;\n    possibleResultPoints = new ArrayList<>(MAX_RESULT_POINTS);\n    lastPossibleResultPoints = new ArrayList<>(MAX_RESULT_POINTS);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/ViewfinderView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Get a score for our size.\n *\n * Based on heuristics for penalizing scaling and cropping.\n *\n * 1.0 is perfect (exact match).\n * 0.0 means we can't use it at all.\n *\n * @param size the camera preview size (that can be scaled)\n * @param desired the viewfinder size\n * @return the score\n */\n", "func_signal": "@Override\nprotected float getScore(Size size, Size desired)", "code": "{\n    if (size.width <= 0 || size.height <= 0) {\n        return 0f;\n    }\n    Size scaled = size.scaleFit(desired);\n    // Scaling preserves aspect ratio\n    float scaleRatio = scaled.width * 1.0f / size.width;\n\n    // Treat downscaling as slightly better than upscaling\n    float scaleScore;\n    if (scaleRatio > 1.0f) {\n        // Upscaling\n        scaleScore = (float)Math.pow(1.0f / scaleRatio, 1.1);\n    } else {\n        // Downscaling\n        scaleScore = scaleRatio;\n    }\n\n    // Ratio of scaledDimension / dimension.\n    // Note that with scaleCrop, only one dimension is cropped.\n    float cropRatio = (desired.width * 1.0f / scaled.width) *\n            (desired.height * 1.0f / scaled.height);\n\n    // Cropping is very bad, since it's used-visible for centerFit\n    // 1.0 means no cropping.\n    float cropScore = 1.0f / cropRatio / cropRatio / cropRatio;\n\n    return scaleScore * cropScore;\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/FitCenterStrategy.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * This only has an effect if the camera is not opened yet.\n *\n * @param cameraSettings the new camera settings\n */\n", "func_signal": "public void setCameraSettings(CameraSettings cameraSettings)", "code": "{\n    if (!open) {\n        this.cameraSettings = cameraSettings;\n        this.cameraManager.setCameraSettings(cameraSettings);\n    }\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/CameraInstance.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Trigger activity, resetting the timer.\n */\n", "func_signal": "public void activity()", "code": "{\n    cancelCallback();\n    if (onBattery) {\n        handler.postDelayed(callback, INACTIVITY_DELAY_MS);\n    }\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/google/zxing/client/android/InactivityTimer.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Start the activity timer.\n */\n", "func_signal": "public void start()", "code": "{\n    registerReceiver();\n    activity();\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/google/zxing/client/android/InactivityTimer.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Turn off the device's flashlight.\n */\n", "func_signal": "public void setTorchOff()", "code": "{\n    barcodeView.setTorch(false);\n\n    if (torchListener != null) {\n        torchListener.onTorchOff();\n    }\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/DecoratedBarcodeView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Changes the settings for Camera.\n *\n * @param callback {@link CameraParametersCallback}\n */\n", "func_signal": "public void changeCameraParameters(final CameraParametersCallback callback)", "code": "{\n    Util.validateMainThread();\n\n    if (open) {\n        cameraThread.enqueue(() -> cameraManager.changeCameraParameters(callback));\n    }\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/CameraInstance.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Initialize the view with the xml configuration based on styleable attributes.\n *\n * @param attrs The attributes to use on view.\n */\n", "func_signal": "private void initialize(AttributeSet attrs)", "code": "{\n    // Get attributes set on view\n    TypedArray attributes = getContext().obtainStyledAttributes(attrs, R.styleable.zxing_view);\n\n    int scannerLayout = attributes.getResourceId(\n            R.styleable.zxing_view_zxing_scanner_layout, R.layout.zxing_barcode_scanner);\n\n    attributes.recycle();\n\n    inflate(getContext(), scannerLayout, this);\n\n    barcodeView = findViewById(R.id.zxing_barcode_surface);\n\n    if (barcodeView == null) {\n        throw new IllegalArgumentException(\n            \"There is no a com.journeyapps.barcodescanner.BarcodeView on provided layout \" +\n            \"with the id \\\"zxing_barcode_surface\\\".\");\n    }\n\n    // Pass on any preview-related attributes\n    barcodeView.initializeAttributes(attrs);\n\n\n    viewFinder = findViewById(R.id.zxing_viewfinder_view);\n\n    if (viewFinder == null) {\n        throw new IllegalArgumentException(\n            \"There is no a com.journeyapps.barcodescanner.ViewfinderView on provided layout \" +\n            \"with the id \\\"zxing_viewfinder_view\\\".\");\n    }\n\n    viewFinder.setCameraPreview(barcodeView);\n\n    // statusView is optional\n    statusView = findViewById(R.id.zxing_status_view);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/DecoratedBarcodeView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Choose the best preview size, based on our viewfinder size.\n *\n * The default implementation lets subclasses calculate a score for each size, the picks the one\n * with the best score.\n *\n * The sizes list may be reordered by this call.\n *\n * @param sizes supported preview sizes, containing at least one size. Sizes are in natural camera orientation.\n * @param desired The desired viewfinder size, in the same orientation\n * @return the best preview size, never null\n */\n", "func_signal": "public Size getBestPreviewSize(List<Size> sizes, final Size desired)", "code": "{\n    // Sample of supported preview sizes:\n    // http://www.kirill.org/ar/ar.php\n\n    List<Size> ordered = getBestPreviewOrder(sizes, desired);\n\n    Log.i(TAG, \"Viewfinder size: \" + desired);\n    Log.i(TAG, \"Preview in order of preference: \" + ordered);\n\n    return ordered.get(0);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/PreviewScalingStrategy.java", "commit_date": "2016-07-04 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Handles focus, camera, volume up and volume down keys.\n *\n * Note that this view is not usually focused, so the Activity should call this directly.\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    switch (keyCode) {\n        case KeyEvent.KEYCODE_FOCUS:\n        case KeyEvent.KEYCODE_CAMERA:\n            // Handle these events so they don't launch the Camera app\n            return true;\n        // Use volume up/down to turn on light\n        case KeyEvent.KEYCODE_VOLUME_DOWN:\n            setTorchOff();\n            return true;\n        case KeyEvent.KEYCODE_VOLUME_UP:\n            setTorchOn();\n            return true;\n    }\n    return super.onKeyDown(keyCode, event);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/DecoratedBarcodeView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Scale the preview to cover the viewfinder, then center it.\n *\n * Aspect ratio is preserved.\n *\n * @param previewSize the size of the preview (camera), in current display orientation\n * @param viewfinderSize the size of the viewfinder (display), in current display orientation\n * @return a rect placing the preview\n */\n", "func_signal": "public Rect scalePreview(Size previewSize, Size viewfinderSize)", "code": "{\n    // We avoid scaling if feasible.\n    Size scaledPreview = previewSize.scaleFit(viewfinderSize);\n    Log.i(TAG, \"Preview: \" + previewSize + \"; Scaled: \" + scaledPreview + \"; Want: \" + viewfinderSize);\n\n    int dx = (scaledPreview.width - viewfinderSize.width) / 2;\n    int dy = (scaledPreview.height - viewfinderSize.height) / 2;\n\n    return new Rect(-dx, -dy, scaledPreview.width - dx, scaledPreview.height - dy);\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/camera/FitCenterStrategy.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Convenience method to initialize camera id, decode formats and prompt message from an intent.\n *\n * @param intent the intent, as generated by IntentIntegrator\n */\n", "func_signal": "public void initializeFromIntent(Intent intent)", "code": "{\n    // Scan the formats the intent requested, and return the result to the calling activity.\n    Set<BarcodeFormat> decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);\n    Map<DecodeHintType, Object> decodeHints = DecodeHintManager.parseDecodeHints(intent);\n\n    CameraSettings settings = new CameraSettings();\n\n    if (intent.hasExtra(Intents.Scan.CAMERA_ID)) {\n        int cameraId = intent.getIntExtra(Intents.Scan.CAMERA_ID, -1);\n        if (cameraId >= 0) {\n            settings.setRequestedCameraId(cameraId);\n        }\n    }\n\n    if (intent.hasExtra(Intents.Scan.TORCH_ENABLED)) {\n        if (intent.getBooleanExtra(Intents.Scan.TORCH_ENABLED, false)) {\n            this.setTorchOn();\n        }\n    }\n\n    String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);\n    if (customPromptMessage != null) {\n        setStatusText(customPromptMessage);\n    }\n\n    // Check what type of scan. Default: normal scan\n    int scanType = intent.getIntExtra(Intents.Scan.SCAN_TYPE, 0);\n\n    String characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);\n\n    MultiFormatReader reader = new MultiFormatReader();\n    reader.setHints(decodeHints);\n\n    barcodeView.setCameraSettings(settings);\n    barcodeView.setDecoderFactory(new DefaultDecoderFactory(decodeFormats, decodeHints, characterSet, scanType));\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/DecoratedBarcodeView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/**\n * Turn on the device's flashlight.\n */\n", "func_signal": "public void setTorchOn()", "code": "{\n    barcodeView.setTorch(true);\n\n    if (torchListener != null) {\n        torchListener.onTorchOn();\n    }\n}", "path": "zxing-android-embedded/zxing-android-embedded/src/com/journeyapps/barcodescanner/DecoratedBarcodeView.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "journeyapps/zxing-android-embedded", "stars": 5620, "license": "apache-2.0", "language": "java", "size": 8388}
{"docstring": "/*\n * (non-Javadoc)\n * @see me.ziccard.secureit.motiondetection.IMotionDetector#detectMotion(int[], int[], int, int)\n */\n", "func_signal": "public List<Integer> detectMotion(int[] oldImage, int[] newImage, int width,\n\t\tint height)", "code": "{\n\tif (oldImage == null || newImage == null) throw new NullPointerException();\n\tif (oldImage.length != newImage.length) throw new IllegalArgumentException();\n\t\n\tArrayList<Integer> differentPixels = new ArrayList<>();\n\tint differentPixelNumber = 0;\n\tfor (int ij=0; ij < height*width; ij++) {\n\t  int newPixelValue = newImage[ij];\n          int oldPixelValue = oldImage[ij];\n          if (Math.abs(newPixelValue - oldPixelValue) >= VALUE_THRESHOLD) {\n            differentPixelNumber++;\n            differentPixels.add(ij);\n          }\n\t}\n\t\n\tif (differentPixelNumber > NUMBER_THRESHOLD) {\n\t  return differentPixels;\n\t}\n\t\n\treturn null;\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/motion/LuminanceMotionDetector.java", "commit_date": "2018-01-19 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * On event fetched update {@link #mEvent} and set Activity title\n */\n", "func_signal": "private void onEventFetched(@NonNull Event event)", "code": "{\n    mEvent = event;\n    String title = mEvent.getStartTime().toLocaleString();\n    setTitle(title);\n    CollapsingToolbarLayout collapsingToolbarLayout = findViewById(R.id.toolbar_layout);\n    collapsingToolbarLayout.setTitle(title);\n\n    //((TextView)findViewById(R.id.toolbar_title)).setText(mEvent.getStartTime().toLocaleString());\n}", "path": "haven/src/main/java/org/havenapp/main/ui/EventActivity.java", "commit_date": "2019-02-20 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * On event trigger list fetched for {@link #mEvent} update {@link #eventTriggerList},\n * {@link #eventTriggerImagePaths} and {@link #mAdapter} data set\n */\n", "func_signal": "private void onEventTriggerListFetched(@NonNull List<EventTrigger> eventTriggerList)", "code": "{\n    this.eventTriggerList = eventTriggerList;\n    setEventTriggerImagePaths();\n    mAdapter.setEventTriggers(eventTriggerList);\n}", "path": "haven/src/main/java/org/havenapp/main/ui/EventActivity.java", "commit_date": "2019-02-20 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Generates the presentation time for frame N, in microseconds.\n */\n", "func_signal": "private static long computePresentationTime(int frameIndex)", "code": "{\n    long value = frameIndex;\n    return 132 + value * 1000000 / FRAME_RATE;\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java", "commit_date": "2018-09-26 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Rotates a bitmat of the given degrees\n * @param bmp\n * @param degrees\n * @return\n */\n", "func_signal": "public static Bitmap rotate(Bitmap bmp, int degrees, boolean reflex)", "code": "{\n    if (bmp==null) throw new NullPointerException();\n    \n\t\t//getting scales of the image  \n\t\tint width = bmp.getWidth();  \n\t\tint height = bmp.getHeight();  \n\t\t\n\t\t//Creating a Matrix and rotating it to specified degrees   \n\t\tMatrix matrix = new Matrix();\n\t\tmatrix.postRotate(degrees);\n\t\tif (reflex)   matrix.postScale(-1, 1);\n\t\t\n\t\t//Getting the rotated Bitmap  \n\t\tBitmap rotatedBmp = Bitmap.createBitmap(bmp, 0, 0, width, height, matrix, true);\n\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n\t\trotatedBmp.compress(Bitmap.CompressFormat.JPEG, 100, stream); \n\t\treturn rotatedBmp;\n\t}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/ImageCodec.java", "commit_date": "2019-02-08 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Returns true if this is a color format that this test code understands\n * (i.e. we know how to read and generate frames in this format).\n */\n", "func_signal": "private static boolean isRecognizedFormat(int colorFormat)", "code": "{\n    switch (colorFormat)\n    {\n        // these are the formats we know how to handle for\n        case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:\n        case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:\n        case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:\n        case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:\n        case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:\n            return true;\n        default:\n            return false;\n    }\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java", "commit_date": "2018-09-26 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Called on the creation of the surface:\n * setting camera parameters to lower possible resolution\n * (preferred is 640x480)\n * in order to minimize CPU usage\n */\n", "func_signal": "public void startCamera()", "code": "{\n\n\n        updateCamera();\n\n        cameraView.setPlaySounds(false);\n        cameraView.setPreviewStreamSize(new SizeSelector() {\n            @NonNull\n            @Override\n            public List<Size> select(@NonNull List<Size> source) {\n                ArrayList<Size> result = new ArrayList<>();\n\n                for (Size size : source)\n                {\n                    if (size.getWidth()<MAX_CAMERA_WIDTH)\n                        result.add(size);\n                }\n\n                return result;\n            }\n        });\n        cameraView.open();\n\n        cameraView.addFrameProcessor(new FrameProcessor() {\n            @Override\n            public void process(@NonNull Frame frame) {\n                long now = System.currentTimeMillis();\n                if (now < CameraViewHolder.this.lastTimestamp + DETECTION_INTERVAL_MS)\n                    return;\n\n                CameraViewHolder.this.lastTimestamp = now;\n                byte[] data = frame.getData();\n                Size size = frame.getSize();\n\n                // Frame video encoding was here previously, but is now\n                // done by android system functions in the CameraView library.\n\n                mDecodeThreadPool.execute(() -> processNewFrame(data, size));\n            }\n        });\n\n\n    }", "path": "haven/src/main/java/org/havenapp/main/ui/CameraViewHolder.java", "commit_date": "2020-10-08 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Show a notification while this service is running.\n */\n", "func_signal": "private void showNotification()", "code": "{\n\n\tIntent toLaunch = new Intent(getApplicationContext(),\n\t                                          MonitorActivity.class);\n\n    toLaunch.setAction(Intent.ACTION_MAIN);\n    toLaunch.addCategory(Intent.CATEGORY_LAUNCHER);\n    toLaunch.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n    PendingIntent resultPendingIntent =\n            PendingIntent.getActivity(\n                    this,\n                    0,\n                    toLaunch,\n                    PendingIntent.FLAG_UPDATE_CURRENT\n            );\n\n    // In this sample, we'll use the same text for the ticker and the expanded notification\n    CharSequence text = getText(R.string.secure_service_started);\n\n\t\tNotificationCompat.Builder mBuilder =\n\t\t\t\tnew NotificationCompat.Builder(this, channelId)\n\t\t\t\t\t\t.setSmallIcon(R.drawable.ic_stat_haven)\n\t\t\t\t\t\t.setContentTitle(getString(R.string.app_name))\n\t\t\t\t\t\t.setContentText(text);\n\n\t\tmBuilder.setPriority(NotificationCompat.PRIORITY_MIN);\n    mBuilder.setContentIntent(resultPendingIntent);\n    mBuilder.setWhen(System.currentTimeMillis());\n    mBuilder.setVisibility(NotificationCompat.VISIBILITY_SECRET);\n\n\t\tstartForeground(1, mBuilder.build());\n\n}", "path": "haven/src/main/java/org/havenapp/main/service/MonitorService.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Returns a color format that is supported by the codec and by this test\n * code. If no match is found, this throws a test failure -- the set of\n * formats known to the test should be expanded for new platforms.\n */\n", "func_signal": "private static int selectColorFormat(MediaCodecInfo codecInfo,\n                                     String mimeType)", "code": "{\n    MediaCodecInfo.CodecCapabilities capabilities = codecInfo\n            .getCapabilitiesForType(mimeType);\n    for (int i = 0; i < capabilities.colorFormats.length; i++)\n    {\n        int colorFormat = capabilities.colorFormats[i];\n        if (isRecognizedFormat(colorFormat))\n        {\n            return colorFormat;\n        }\n    }\n    return 0; // not reached\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java", "commit_date": "2018-09-26 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Called on service destroy, cancels persistent notification\n * and shows a toast\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n\n    wakeLock.release();\n    stopSensors();\n\t\tstopForeground(true);\n\n}", "path": "haven/src/main/java/org/havenapp/main/service/MonitorService.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * When user closes the activity\n */\n", "func_signal": "@Override\npublic void onBackPressed()", "code": "{\n\n    if (mIsMonitoring) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            enterPictureInPictureMode(new PictureInPictureParams.Builder().build());\n        }\n        else\n        {\n            finish();\n        }\n    }\n    else\n    {\n        finish();\n    }\n\n\n}", "path": "haven/src/main/java/org/havenapp/main/MonitorActivity.java", "commit_date": "2019-02-11 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Extracts the luminance component from the\n * given YCbCr 420 image\n */\n", "func_signal": "public static int[] N21toLuma(byte[] YUVimage, int width, int height)", "code": "{\n\tif (YUVimage == null) throw new NullPointerException();\n\t\n\tfinal int frameSize = width*height;\n\tint[] lumaImage = new int[frameSize];\n\t\n\tfor (int ij = 0; ij < height*width; ij++) {\n\t  int luminance = (0xff & ((int) YUVimage[ij])) - 16;\n          if (luminance < 0) luminance = 0;\n          lumaImage[ij] = luminance;\n\t}\n\treturn lumaImage;\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/ImageCodec.java", "commit_date": "2019-02-08 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "//hPa or mbar\n", "func_signal": "public BarometerMonitor(Context context)", "code": "{\n       prefs = new PreferenceManager(context);\n\n\n\n       context.bindService(new Intent(context,\n               MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);\n\n       sensorMgr = (SensorManager) context.getSystemService(AppCompatActivity.SENSOR_SERVICE);\n       sensor = sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);\n\n       if (sensor == null) {\n           Log.i(\"Pressure\", \"Warning: no barometer sensor\");\n       } else {\n           sensorMgr.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n       }\n\n   }", "path": "haven/src/main/java/org/havenapp/main/sensors/BarometerMonitor.java", "commit_date": "2019-02-27 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Returns the first codec capable of encoding the specified MIME type, or\n * null if no match was found.\n */\n", "func_signal": "private static MediaCodecInfo selectCodec(String mimeType)", "code": "{\n    int numCodecs = MediaCodecList.getCodecCount();\n    for (int i = 0; i < numCodecs; i++)\n    {\n        MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);\n        if (!codecInfo.isEncoder())\n        {\n            continue;\n        }\n        String[] types = codecInfo.getSupportedTypes();\n        for (int j = 0; j < types.length; j++)\n        {\n            if (types[j].equalsIgnoreCase(mimeType))\n            {\n                return codecInfo;\n            }\n        }\n    }\n    return null;\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java", "commit_date": "2018-09-26 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Converts a luminance matrix to a RGB grayscale bitmap\n * @param lum\n * @param width\n * @param height\n * @return\n */\n", "func_signal": "public static int[] lumaToGreyscale(int[] lum, int width, int height)", "code": "{\n        if (lum==null) throw new NullPointerException();\n        \n        int[] greyscale = new int[height*width];\n        for (int ij=0; ij<greyscale.length; ij++) {\n          // create the RGB-grey color corresponding to the specified luma component\n          greyscale[ij] = ((((lum[ij]<<8)|lum[ij])<<8)|lum[ij])&0x00FFFFFF;\n        }\n        return greyscale;\n    }", "path": "haven/src/main/java/org/havenapp/main/sensors/media/ImageCodec.java", "commit_date": "2019-02-08 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n* Sends an alert according to type of connectivity\n*/\n", "func_signal": "public void alert(int alertType, String value)", "code": "{\n\n    Date now = new Date();\n    boolean doNotification = false;\n\n    //for the UI visual\n    Intent iEvent = new Intent(\"event\");\n    iEvent.putExtra(\"type\",alertType);\n    LocalBroadcastManager.getInstance(this).sendBroadcast(iEvent);\n\n    if (TextUtils.isEmpty(value))\n        return;\n\n    if (mLastEvent == null) {\n        mLastEvent = new Event();\n        long eventId = HavenEventDB.getDatabase(getApplicationContext())\n                .getEventDAO().insert(mLastEvent);\n        mLastEvent.setId(eventId);\n        doNotification = true;\n    }\n    else if (mPrefs.getNotificationTimeMs() == 0)\n    {\n        doNotification = true;\n    }\n    else if (mPrefs.getNotificationTimeMs() > 0 && mLastNotification != null)\n    {\n        //check if time window is within configured notification time window\n        doNotification = ((now.getTime()-mLastNotification.getTime())>mPrefs.getNotificationTimeMs());\n    }\n\n    if (doNotification)\n    {\n        doNotification = !(mPrefs.getVideoMonitoringActive() && alertType == EventTrigger.CAMERA);\n    }\n\n    EventTrigger eventTrigger = new EventTrigger();\n    eventTrigger.setType(alertType);\n    eventTrigger.setPath(value);\n\n    mLastEvent.addEventTrigger(eventTrigger);\n\n    //we don't need to resave the event, only the trigger\n    long eventTriggerId = HavenEventDB.getDatabase(getApplicationContext())\n            .getEventTriggerDAO().insert(eventTrigger);\n    eventTrigger.setId(eventTriggerId);\n\n    if (doNotification) {\n\n        mLastNotification = new Date();\n        /*\n         * If SMS mode is on we send an SMS or Signal alert to the specified\n         * number\n         */\n        StringBuilder alertMessage = new StringBuilder();\n        alertMessage.append(getString(R.string.intrusion_detected,\n                eventTrigger.getStringType(new ResourceManager(this))));\n\n        if (mPrefs.isRemoteNotificationActive() && mPrefs.isSignalVerified()) {\n            //since this is a secure channel, we can add the Onion address\n            if (mPrefs.getRemoteAccessActive() && (!TextUtils.isEmpty(mPrefs.getRemoteAccessOnion()))) {\n                alertMessage.append(\" http://\").append(mPrefs.getRemoteAccessOnion())\n                        .append(':').append(WebServer.LOCAL_PORT);\n            }\n\n            SignalSender sender = SignalSender.getInstance(this, mPrefs.getSignalUsername());\n            ArrayList<String> recips = new ArrayList<>();\n            StringTokenizer st = new StringTokenizer(mPrefs.getRemotePhoneNumber(), \",\");\n            while (st.hasMoreTokens())\n                recips.add(st.nextToken());\n\n            String attachment = null;\n            if (eventTrigger.getType() == EventTrigger.CAMERA) {\n                attachment = eventTrigger.getPath();\n            } else if (eventTrigger.getType() == EventTrigger.MICROPHONE) {\n                attachment = eventTrigger.getPath();\n            }\n            else if (eventTrigger.getType() == EventTrigger.CAMERA_VIDEO) {\n                attachment = eventTrigger.getPath();\n            }\n\n            sender.sendMessage(recips, alertMessage.toString(), attachment, null);\n        }\n    }\n\n}", "path": "haven/src/main/java/org/havenapp/main/service/MonitorService.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "// recordNewFrame replaced by CameraView's internal android system encoding\n", "func_signal": "private void finishVideoEncoding ()", "code": "{\n    cameraView.stopVideo();\n\n    if (serviceMessenger != null) {\n        Message message = new Message();\n        message.what = EventTrigger.CAMERA_VIDEO;\n        message.getData().putString(MonitorService.KEY_PATH, videoFile.getAbsolutePath());\n        try {\n            serviceMessenger.send(message);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "haven/src/main/java/org/havenapp/main/ui/CameraViewHolder.java", "commit_date": "2020-10-08 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Sets the desired frame size and bit rate.\n */\n", "func_signal": "private void setParameters(int width, int height, int bitRate)", "code": "{\n    if ((width % 16) != 0 || (height % 16) != 0)\n    {\n        Log.w(TAG, \"WARNING: width or height not multiple of 16\");\n    }\n    mWidth = width;\n    mHeight = height;\n    mBitRate = bitRate;\n}", "path": "haven/src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java", "commit_date": "2018-09-26 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Called on service creation, sends a notification\n */\n", "func_signal": "@Override\n    public void onCreate()", "code": "{\n\n        sInstance = this;\n\n        mApp = (HavenApp)getApplication();\n\n        mPrefs = new PreferenceManager(this);\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            setupNotificationChannel();\n        }\n\n        startSensors();\n\n        showNotification();\n\n      //  startCamera();\n\n        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);\n        wakeLock = powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK,\n                \"haven:MyWakelockTag\");\n        wakeLock.acquire();\n    }", "path": "haven/src/main/java/org/havenapp/main/service/MonitorService.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Get the battery level from the device, from official docs:\n * https://developer.android.com/training/monitoring-device-state/battery-monitoring#MonitorLevel\n * @param context\n * @return an integer corresponding to the battery percentage without any symbols\n */\n", "func_signal": "public static int getBatteryPercentage(Context context)", "code": "{\n\n    IntentFilter iFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\n    Intent batteryStatus = context.registerReceiver(null, iFilter);\n\n    int level = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) : -1;\n    int scale = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1) : -1;\n\n    float batteryPct = level / (float) scale;\n\n    return (int) (batteryPct * 100);\n}", "path": "haven/src/main/java/org/havenapp/main/Utils.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "guardianproject/haven", "stars": 6518, "license": "gpl-3.0", "language": "java", "size": 24387}
{"docstring": "/**\n * Set the corner-radius of the shadow.\n *\n * @param shadowCornerRadius corner-radius of the shadow\n * @return the builder\n */\n", "func_signal": "public T shadowCornerRadius(int shadowCornerRadius)", "code": "{\n    this.shadowCornerRadius = shadowCornerRadius;\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The resource of color of boom-button when it is at unable-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param unableColorRes resource of unable color\n * @return the builder\n */\n", "func_signal": "public T unableColorRes(int unableColorRes)", "code": "{\n    if (this.unableColorRes != unableColorRes) {\n        this.unableColorRes = unableColorRes;\n        BoomButton button = button();\n        if (button != null) {\n            button.unableColorRes = unableColorRes;\n            button.updateButtonDrawable();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The color of boom-button when it is just a piece.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param pieceColor color of piece\n * @return the builder\n */\n", "func_signal": "public T pieceColor(int pieceColor)", "code": "{\n    if (this.pieceColor == null || this.pieceColor != pieceColor) {\n        this.pieceColor = pieceColor;\n        BoomButton button = button();\n        if (button != null) button.pieceColor = pieceColor;\n        if (piece != null) piece.setColor(pieceColor);\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set listener for when the boom-button is clicked.\n *\n * @param onBMClickListener OnBMClickListener\n * @return the builder\n */\n", "func_signal": "public T listener(OnBMClickListener onBMClickListener)", "code": "{\n    this.onBMClickListener = onBMClickListener;\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The color of boom-button when it is at highlighted-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param highlightedColor the highlighted color\n * @return the builder\n */\n", "func_signal": "public T highlightedColor(int highlightedColor)", "code": "{\n    if (this.highlightedColor != highlightedColor) {\n        this.highlightedColor = highlightedColor;\n        BoomButton button = button();\n        if (button != null) {\n            button.highlightedColor = highlightedColor;\n            button.updateButtonDrawable();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The color of boom-button when it is at unable-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param unableColor the unable color\n * @return the builder\n */\n", "func_signal": "public T unableColor(int unableColor)", "code": "{\n    if (this.unableColor != unableColor) {\n        this.unableColor = unableColor;\n        BoomButton button = button();\n        if (button != null) {\n            button.unableColor = unableColor;\n            button.updateButtonDrawable();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Whether the boom-button should have a shadow effect.\n *\n * @param shadowEffect have shadow effect or not\n * @return the builder\n */\n", "func_signal": "public T shadowEffect(boolean shadowEffect)", "code": "{\n    this.shadowEffect = shadowEffect;\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the image drawable when boom-button is at highlighted-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param highlightedImageDrawable the highlighted image drawable\n * @return the builder\n */\n", "func_signal": "public T highlightedImageDrawable(Drawable highlightedImageDrawable)", "code": "{\n    if (this.highlightedImageDrawable != highlightedImageDrawable) {\n        this.highlightedImageDrawable = highlightedImageDrawable;\n        BoomButton button = button();\n        if (button != null) {\n            button.highlightedImageDrawable = highlightedImageDrawable;\n            button.updateImage();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The resource of color of boom-button when it is at highlighted-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param highlightedColorRes resource of highlighted color\n * @return the builder\n */\n", "func_signal": "public T highlightedColorRes(int highlightedColorRes)", "code": "{\n    if (this.highlightedColorRes != highlightedColorRes) {\n        this.highlightedColorRes = highlightedColorRes;\n        BoomButton button = button();\n        if (button != null) {\n            button.highlightedColorRes = highlightedColorRes;\n            button.updateButtonDrawable();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * The resource of color of boom-button when it is just a piece.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param pieceColorRes resource of color of piece\n * @return the builder\n */\n", "func_signal": "public T pieceColorRes(int pieceColorRes)", "code": "{\n    if (this.pieceColorRes != pieceColorRes) {\n        this.pieceColorRes = pieceColorRes;\n        BoomButton button = button();\n        if (button != null) button.pieceColorRes = pieceColorRes;\n        if (piece != null) piece.setColorRes(pieceColorRes);\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the image resource when boom-button is at highlighted-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param highlightedImageRes the highlighted image res\n * @return the builder\n */\n", "func_signal": "public T highlightedImageRes(int highlightedImageRes)", "code": "{\n    if (this.highlightedImageRes != highlightedImageRes) {\n        this.highlightedImageRes = highlightedImageRes;\n        BoomButton button = button();\n        if (button != null) {\n            button.highlightedImageRes = highlightedImageRes;\n            button.updateImage();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the image drawable when boom-button is at normal-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param normalImageDrawable the normal image drawable\n * @return the builder\n */\n", "func_signal": "public T normalImageDrawable(Drawable normalImageDrawable)", "code": "{\n    if (this.normalImageDrawable != normalImageDrawable) {\n        this.normalImageDrawable = normalImageDrawable;\n        BoomButton button = button();\n        if (button != null) {\n            button.normalImageDrawable = normalImageDrawable;\n            button.updateImage();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the listener of the boom-button, only used in BMB package.\n *\n * @param listener the listener\n * @return the builder\n */\n", "func_signal": "public BoomButtonBuilder innerListener(InnerOnBoomButtonClickListener listener)", "code": "{\n    this.listener = listener;\n    return this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Get number of pieces from a piece-place-enum.\n *\n * @return the number of pieces\n */\n", "func_signal": "public int pieceNumber()", "code": "{\n    switch (this) {\n        case DOT_1:\n        case HAM_1: return 1;\n        case DOT_2_1:\n        case DOT_2_2:\n        case HAM_2: return 2;\n        case DOT_3_1:\n        case DOT_3_2:\n        case DOT_3_3:\n        case DOT_3_4:\n        case HAM_3: return 3;\n        case DOT_4_1:\n        case DOT_4_2:\n        case HAM_4: return 4;\n        case DOT_5_1:\n        case DOT_5_2:\n        case DOT_5_3:\n        case DOT_5_4:\n        case HAM_5: return 5;\n        case DOT_6_1:\n        case DOT_6_2:\n        case DOT_6_3:\n        case DOT_6_4:\n        case DOT_6_5:\n        case DOT_6_6:\n        case HAM_6: return 6;\n        case DOT_7_1:\n        case DOT_7_2:\n        case DOT_7_3:\n        case DOT_7_4:\n        case DOT_7_5:\n        case DOT_7_6: return 7;\n        case DOT_8_1:\n        case DOT_8_2:\n        case DOT_8_3:\n        case DOT_8_4:\n        case DOT_8_5:\n        case DOT_8_6:\n        case DOT_8_7: return 8;\n        case DOT_9_1:\n        case DOT_9_2:\n        case DOT_9_3: return 9;\n        case Unknown: return 0;\n        default: return -1;\n    }\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/Piece/PiecePlaceEnum.java", "commit_date": "2017-05-26 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the image drawable when boom-button is at unable-state.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param unableImageDrawable the unable image drawable\n * @return the builder\n */\n", "func_signal": "public T unableImageDrawable(Drawable unableImageDrawable)", "code": "{\n    if (this.unableImageDrawable != unableImageDrawable) {\n        this.unableImageDrawable = unableImageDrawable;\n        BoomButton button = button();\n        if (button != null) {\n            button.unableImageDrawable = unableImageDrawable;\n            button.updateImage();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the padding of image.\n * By this method, you can control the padding in the image-view.\n * For instance, builder.imagePadding(new Rect(10, 10, 10, 10)) will make the\n * image-view content 10-pixel padding to itself.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param imagePadding the image padding\n * @return the builder\n */\n", "func_signal": "public T imagePadding(Rect imagePadding)", "code": "{\n    if (this.imagePadding != imagePadding) {\n        this.imagePadding = imagePadding;\n        BoomButton button = button();\n        if (button != null) {\n            button.imagePadding = imagePadding;\n            button.updateImagePadding();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Get the piece color, only used in BMB package.\n *\n * @param context context\n * @return color of piece\n */\n", "func_signal": "public int pieceColor(Context context)", "code": "{\n    if (pieceColor == null && pieceColorRes == 0)\n        if (unable) return Util.getColor(context, unableColorRes, unableColor);\n        else return Util.getColor(context, normalColorRes, normalColor);\n    else if (pieceColor == null) return Util.getColor(context, pieceColorRes);\n    else return Util.getColor(context, pieceColorRes, pieceColor);\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Whether the boom-button is unable, default value is false.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param unable the unable\n * @return the builder\n */\n", "func_signal": "public T unable(boolean unable)", "code": "{\n    if (this.unable != unable) {\n        this.unable = unable;\n        BoomButton button = button();\n        if (button != null) {\n            button.unable = unable;\n            button.updateUnable();\n            if (piece != null) piece.setColor(button.pieceColor());\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Set the rect of image.\n * By this method, you can set the position and size of the image-view in boom-button.\n * For example, builder.imageRect(new Rect(0, 50, 100, 100)) will make the\n * image-view's size to be 100 * 50 and margin-top to be 50 pixel.\n * <br><br>\n * <STRONG>Synchronicity:</STRONG> If the boom-button existed,\n * then synchronize this change to boom-button.\n *\n * @param imageRect the image rect, in pixel.\n * @return the builder\n */\n", "func_signal": "public T imageRect(Rect imageRect)", "code": "{\n    if (this.imageRect != imageRect) {\n        this.imageRect = imageRect;\n        BoomButton button = button();\n        if (button != null) {\n            button.imageRect = imageRect;\n            button.updateImageRect();\n        }\n    }\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "/**\n * Whether the image-view should rotate.\n *\n * @param rotateImage rotate or not\n * @return the builder\n */\n", "func_signal": "public T rotateImage(boolean rotateImage)", "code": "{\n    this.rotateImage = rotateImage;\n    return (T) this;\n}", "path": "BoomMenu/boommenu/src/main/java/com/nightonke/boommenu/BoomButtons/BoomButtonBuilder.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "Nightonke/BoomMenu", "stars": 5801, "license": "None", "language": "java", "size": 103934}
{"docstring": "// to be removed before 2.0\n", "func_signal": "public <R extends SingleRel> RemoveEmptySingleRule(Class<R> clazz,\n       com.google.common.base.Predicate<R> predicate,\n       RelBuilderFactory relBuilderFactory, String description)", "code": "{\n     this(Config.EMPTY.withRelBuilderFactory(relBuilderFactory)\n         .withDescription(description)\n         .as(Config.class)\n         .withOperandFor(clazz, predicate::apply));\n   }", "path": "calcite/core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Returns the calls to aggregate functions that have the {@code DISTINT} flag.\n *\n * <p>An aggregate function call like <code>COUNT(DISTINCT COL)</code> in Pig\n * is achieved via two statements in a {@code FOREACH} that follows a\n * {@code GROUP} statement:\n *\n * <blockquote>\n * <code>\n * TABLE = GROUP TABLE ALL;<br>\n * TABLE = FOREACH TABLE {<br>\n * &nbsp;&nbsp;<b>COL.DISTINCT = DISTINCT COL;<br>\n * &nbsp;&nbsp;GENERATE COUNT(COL.DISTINCT) AS C;</b><br>\n * }</code>\n * </blockquote>\n */\n", "func_signal": "private List<String> getDistinctCalls(Implementor implementor)", "code": "{\n  final String relAlias = implementor.getPigRelationAlias(this);\n  final List<String> result = new ArrayList<>();\n  for (AggregateCall aggCall : aggCalls) {\n    if (aggCall.isDistinct()) {\n      for (int fieldIndex : aggCall.getArgList()) {\n        String fieldName = getInputFieldName(fieldIndex);\n        result.add(\"  \" + fieldName + DISTINCT_FIELD_SUFFIX + \" = DISTINCT \"\n            + relAlias + '.' + fieldName + \";\\n\");\n      }\n    }\n  }\n  return result;\n}", "path": "calcite/pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "// to be removed before 2.0\n", "func_signal": "public <R extends SingleRel> RemoveEmptySingleRule(Class<R> clazz,\n       String description)", "code": "{\n     this(Config.EMPTY.withDescription(description)\n         .as(Config.class)\n         .withOperandFor(clazz, singleRel -> true));\n   }", "path": "calcite/core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns a bit set with every bit moved up {@code offset} positions.\n * Offset may be negative, but throws if any bit ends up negative. */\n", "func_signal": "public ImmutableBitSet shift(int offset)", "code": "{\n  if (offset == 0) {\n    return this;\n  }\n  final Builder builder = builder();\n  for (int i = nextSetBit(0); i >= 0; i = nextSetBit(i + 1)) {\n    builder.set(i + offset);\n  }\n  return builder.build();\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns a bit set the same as this but with a given bit set (if b is\n * true) or unset (if b is false). */\n", "func_signal": "public ImmutableBitSet set(int i, boolean b)", "code": "{\n  if (get(i) == b) {\n    return this;\n  }\n  return b ? set(i) : clear(i);\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Adds each element of {@code elements} to the\n * {@code ImmutableNullableSet}.\n *\n * @param elements the {@code Iterable} to add to the\n *     {@code ImmutableNullableSet}\n * @return this {@code Builder} object\n * @throws NullPointerException if {@code elements} is null\n */\n", "func_signal": "public Builder<E> addAll(Iterable<? extends E> elements)", "code": "{\n  Iterables.addAll(contents, elements);\n  return this;\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableNullableSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Returns the index of the first bit that is set to {@code false}\n * that occurs on or after the specified starting index.\n *\n * @param  fromIndex the index to start checking from (inclusive)\n * @return the index of the next clear bit\n * @throws IndexOutOfBoundsException if the specified index is negative\n */\n", "func_signal": "public int nextClearBit(int fromIndex)", "code": "{\n  if (fromIndex < 0) {\n    throw new IndexOutOfBoundsException(\"fromIndex < 0: \" + fromIndex);\n  }\n  int u = wordIndex(fromIndex);\n  if (u >= words.length) {\n    return fromIndex;\n  }\n  long word = ~words[u] & (WORD_MASK << fromIndex);\n\n  while (true) {\n    if (word != 0) {\n      return (u * BITS_PER_WORD) + Long.numberOfTrailingZeros(word);\n    }\n    if (++u == words.length) {\n      return words.length * BITS_PER_WORD;\n    }\n    word = ~words[u];\n  }\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Creates a Collector. */\n", "func_signal": "public static Collector<Integer, ImmutableBitSet.Builder, ImmutableBitSet>\n    toImmutableBitSet()", "code": "{\n  return Collector.of(ImmutableBitSet::builder, Builder::set,\n      Builder::combine, Builder::build);\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Creates a view onto this bit set as a set of integers.\n *\n * <p>The {@code size} and {@code contains} methods are both O(n), but the\n * iterator is efficient. */\n", "func_signal": "public Set<Integer> asSet()", "code": "{\n  return new AbstractSet<Integer>() {\n    @Override public Iterator<Integer> iterator() {\n      return ImmutableBitSet.this.iterator();\n    }\n\n    @Override public int size() {\n      return cardinality();\n    }\n\n    @Override public boolean contains(@Nullable Object o) {\n      return ImmutableBitSet.this.get((Integer) requireNonNull(o, \"o\"));\n    }\n  };\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns the field types of this CSV table. */\n", "func_signal": "public List<CsvFieldType> getFieldTypes(RelDataTypeFactory typeFactory)", "code": "{\n  if (fieldTypes == null) {\n    fieldTypes = new ArrayList<>();\n    CsvEnumerator.deduceRowType((JavaTypeFactory) typeFactory, source,\n        fieldTypes, isStream());\n  }\n  return fieldTypes;\n}", "path": "calcite/file/src/main/java/org/apache/calcite/adapter/file/CsvTable.java", "commit_date": "2020-10-06 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Adds each element of {@code elements} to the\n * {@code ImmutableNullableSet}.\n *\n * @param elements the elements to add to the {@code ImmutableNullableSet}\n * @return this {@code Builder} object\n * @throws NullPointerException if {@code elements} is null\n */\n", "func_signal": "public Builder<E> add(E... elements)", "code": "{\n  for (E element : elements) {\n    add(element);\n  }\n  return this;\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableNullableSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Builds an ImmutableBitSet from the contents of this Builder, using\n * an existing ImmutableBitSet if it happens to have the same contents.\n *\n * <p>Supplying the existing bit set if useful for set operations,\n * where there is a significant chance that the original bit set is\n * unchanged. We save memory because we use the same copy. For example:\n *\n * <blockquote><pre>\n * ImmutableBitSet primeNumbers;\n * ImmutableBitSet hundreds = ImmutableBitSet.of(100, 200, 300);\n * return primeNumbers.except(hundreds);</pre></blockquote>\n *\n * <p>After calling this method, the Builder cannot be used again. */\n", "func_signal": "public ImmutableBitSet build(ImmutableBitSet bitSet)", "code": "{\n  if (wouldEqual(bitSet)) {\n    return bitSet;\n  }\n  return build();\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Creates a CsvStreamReader with supplied separator and quote char.\n *\n * @param source The file to an underlying CSV source\n * @param separator The delimiter to use for separating entries\n * @param quoteChar The character to use for quoted elements\n * @param escape The character to use for escaping a separator or quote\n * @param line The line number to skip for start reading\n * @param strictQuotes Sets if characters outside the quotes are ignored\n * @param ignoreLeadingWhiteSpace If true, parser should ignore\n *  white space before a quote in a field\n */\n", "func_signal": "private CsvStreamReader(Source source, char separator, char quoteChar,\n    char escape, int line, boolean strictQuotes,\n    boolean ignoreLeadingWhiteSpace)", "code": "{\n  super(new StringReader(\"\")); // dummy call to base constructor\n  contentQueue = new ArrayDeque<>();\n  TailerListener listener = new CsvContentListener(contentQueue);\n  tailer = Tailer.create(source.file(), listener, DEFAULT_MONITOR_DELAY,\n      false, true, 4096);\n  this.parser = new CSVParser(separator, quoteChar, escape, strictQuotes,\n      ignoreLeadingWhiteSpace);\n  this.skipLines = line;\n  try {\n    // wait for tailer to capture data\n    Thread.sleep(DEFAULT_MONITOR_DELAY);\n  } catch (InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "calcite/file/src/main/java/org/apache/calcite/adapter/file/CsvStreamReader.java", "commit_date": "2020-10-06 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Reads the next line from the buffer and converts to a string array.\n *\n * @return a string array with each comma-separated element as a separate entry.\n *\n * @throws IOException if bad things happen during the read\n */\n", "func_signal": "@Override public String[] readNext() throws IOException", "code": "{\n  String[] result = null;\n  do {\n    String nextLine = getNextLine();\n    if (nextLine == null) {\n      return null;\n    }\n    String[] r = parser.parseLineMulti(nextLine);\n    if (r.length > 0) {\n      if (result == null) {\n        result = r;\n      } else {\n        String[] t = new String[result.length + r.length];\n        System.arraycopy(result, 0, t, 0, result.length);\n        System.arraycopy(r, 0, t, result.length, r.length);\n        result = t;\n      }\n    }\n  } while (parser.isPending());\n  return result;\n}", "path": "calcite/file/src/main/java/org/apache/calcite/adapter/file/CsvStreamReader.java", "commit_date": "2020-10-06 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns a bit set with all the bits set in both this set and in\n * another.\n *\n * @see BitSet#and */\n", "func_signal": "public ImmutableBitSet intersect(ImmutableBitSet that)", "code": "{\n  final Builder builder = rebuild();\n  builder.intersect(that);\n  return builder.build();\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Compares this object against the specified object.\n * The result is {@code true} if and only if the argument is\n * not {@code null} and is a {@code ImmutableBitSet} object that has\n * exactly the same set of bits set to {@code true} as this bit\n * set.\n *\n * @param  obj the object to compare with\n * @return {@code true} if the objects are the same;\n *         {@code false} otherwise\n * @see    #size()\n */\n", "func_signal": "@Override public boolean equals(@Nullable Object obj)", "code": "{\n  if (this == obj) {\n    return true;\n  }\n  if (!(obj instanceof ImmutableBitSet)) {\n    return false;\n  }\n  ImmutableBitSet set = (ImmutableBitSet) obj;\n  return Arrays.equals(words, set.words);\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns whether the bit set that would be created by this Builder would\n * equal a given bit set. */\n", "func_signal": "public boolean wouldEqual(ImmutableBitSet bitSet)", "code": "{\n  if (words == null) {\n    throw new IllegalArgumentException(\"can only use builder once\");\n  }\n  return Arrays.equals(words, bitSet.words);\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Returns the value of the bit with the specified index. The value\n * is {@code true} if the bit with the index {@code bitIndex}\n * is currently set in this {@code ImmutableBitSet}; otherwise, the result\n * is {@code false}.\n *\n * @param  bitIndex   the bit index\n * @return the value of the bit with the specified index\n * @throws IndexOutOfBoundsException if the specified index is negative\n */\n", "func_signal": "public boolean get(int bitIndex)", "code": "{\n  if (bitIndex < 0) {\n    throw new IndexOutOfBoundsException(\"bitIndex < 0: \" + bitIndex);\n  }\n  int wordIndex = wordIndex(bitIndex);\n  return (wordIndex < words.length)\n      && ((words[wordIndex] & (1L << bitIndex)) != 0);\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/** Returns a bit set with all the bits in this set that are not in\n * another.\n *\n * @see BitSet#andNot(java.util.BitSet) */\n", "func_signal": "public ImmutableBitSet except(ImmutableBitSet that)", "code": "{\n  final Builder builder = rebuild();\n  builder.removeAll(that);\n  return builder.build();\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * The ordinal of a given bit, or -1 if it is not set.\n */\n", "func_signal": "public int indexOf(int bit)", "code": "{\n  for (int i = nextSetBit(0), k = 0;; i = nextSetBit(i + 1), ++k) {\n    if (i < 0) {\n      return -1;\n    }\n    if (i == bit) {\n      return k;\n    }\n  }\n}", "path": "calcite/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "commit_date": "2020-11-29 00:00:00", "repo_name": "apache/calcite", "stars": 4278, "license": "apache-2.0", "language": "java", "size": 97468}
{"docstring": "/**\n * Constructs a new STSAssumeRoleSessionCredentialsProvider, which makes a\n * request to the AWS Security Token Service (STS), uses the provided\n * {@link #roleArn} to assume a role and then request short lived session\n * credentials, which will then be returned by this class's\n * {@link #getCredentials()} method.\n * @param roleArn\n *            The AWS ARN of the Role to be assumed.\n * @param clientConfiguration\n *            The AWS ClientConfiguration to use when making AWS API requests.\n */\n", "func_signal": "public STSAssumeRoleSessionCredentialsProvider(String roleArn, ClientConfiguration clientConfiguration)", "code": "{\n    this.roleArn = roleArn;\n    securityTokenService = new AWSSecurityTokenServiceClient(clientConfiguration);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructor.\n * @param awsClient the AWS client\n * @param ctx the context\n */\n", "func_signal": "public InstanceJanitor(AWSClient awsClient, AbstractJanitor.Context ctx)", "code": "{\n    super(ctx, AWSResourceType.INSTANCE);\n    Validate.notNull(awsClient);\n    this.awsClient = awsClient;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/janitor/InstanceJanitor.java", "commit_date": "2013-01-03 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Starts a new session by sending a request to the AWS Security Token\n * Service (STS) to assume a Role using the long lived AWS credentials. This\n * class then vends the short lived session credentials for the assumed Role\n * sent back from STS.\n */\n", "func_signal": "private void startSession()", "code": "{\n    AssumeRoleResult assumeRoleResult = securityTokenService.assumeRole(new AssumeRoleRequest()\n            .withRoleArn(roleArn).withDurationSeconds(DEFAULT_DURATION_SECONDS).withRoleSessionName(\"SimianArmy\"));\n    Credentials stsCredentials = assumeRoleResult.getCredentials();\n    sessionCredentials = new BasicSessionCredentials(stsCredentials.getAccessKeyId(),\n            stsCredentials.getSecretAccessKey(), stsCredentials.getSessionToken());\n    sessionCredentialsExpiration = stsCredentials.getExpiration();\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * The constructor.\n */\n", "func_signal": "public BasicJanitorMonkeyContext()", "code": "{\n    super(\"simianarmy.properties\", \"client.properties\", \"janitor.properties\");\n\n    monkeyRegion = region();\n    monkeyCalendar = calendar();\n\n    String resourceDomain = configuration().getStrOrElse(\"simianarmy.janitor.resources.sdb.domain\", \"SIMIAN_ARMY\");\n\n    Set<String> enabledResourceSet = getEnabledResourceSet();\n\n    String dbDriver = configuration().getStr(\"simianarmy.recorder.db.driver\");\n    String dbUser = configuration().getStr(\"simianarmy.recorder.db.user\");\n    String dbPass = configuration().getStr(\"simianarmy.recorder.db.pass\");\n    String dbUrl = configuration().getStr(\"simianarmy.recorder.db.url\");\n    String dbTable = configuration().getStr(\"simianarmy.janitor.resources.db.table\");\n    \n    if (dbDriver == null) {       \n    \tjanitorResourceTracker = new SimpleDBJanitorResourceTracker(awsClient(), resourceDomain);\n    } else {\n    \tRDSJanitorResourceTracker rdsTracker = new RDSJanitorResourceTracker(dbDriver, dbUser, dbPass, dbUrl, dbTable);\n    \trdsTracker.init();\n    \tjanitorResourceTracker = rdsTracker;\n    }\n\n    janitorEmailBuilder = new BasicJanitorEmailBuilder();\n    sesClient = new AmazonSimpleEmailServiceClient();\n    if (configuration().getStr(\"simianarmy.aws.email.region\") != null) {\n       sesClient.setRegion(Region.getRegion(Regions.fromName(configuration().getStr(\"simianarmy.aws.email.region\"))));\n    }\n    defaultEmail = configuration().getStrOrElse(\"simianarmy.janitor.notification.defaultEmail\", \"\");\n    ccEmails = StringUtils.split(\n            configuration().getStrOrElse(\"simianarmy.janitor.notification.ccEmails\", \"\"), \",\");\n    sourceEmail = configuration().getStrOrElse(\"simianarmy.janitor.notification.sourceEmail\", \"\");\n    ownerEmailDomain = configuration().getStrOrElse(\"simianarmy.janitor.notification.ownerEmailDomain\", \"\");\n    daysBeforeTermination =\n            (int) configuration().getNumOrElse(\"simianarmy.janitor.notification.daysBeforeTermination\", 3);\n\n    emailNotifier = new JanitorEmailNotifier(getJanitorEmailNotifierContext());\n\n    janitors = new ArrayList<AbstractJanitor>();\n    if (enabledResourceSet.contains(\"ASG\")) {\n        janitors.add(getASGJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"INSTANCE\")) {\n        janitors.add(getInstanceJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"EBS_VOLUME\")) {\n        janitors.add(getEBSVolumeJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"EBS_SNAPSHOT\")) {\n        janitors.add(getEBSSnapshotJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"LAUNCH_CONFIG\")) {\n        janitors.add(getLaunchConfigJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"IMAGE\")) {\n        janitors.add(getImageJanitor());\n    }\n\n    if (enabledResourceSet.contains(\"ELB\")) {\n        janitors.add(getELBJanitor());\n    }\n\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/basic/janitor/BasicJanitorMonkeyContext.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Parses a SimpleDB item into a cluster.\n * @param item the item from SimpleDB\n * @return the cluster for the SimpleDB item\n */\n", "func_signal": "protected Cluster parseCluster(Item item)", "code": "{\n    Map<String, String> fieldToValue = new HashMap<String, String>();\n    for (Attribute attr : item.getAttributes()) {\n        String name = attr.getName();\n        String value = attr.getValue();\n        if (name != null && value != null) {\n            fieldToValue.put(name, value);\n        }\n    }\n    return Cluster.parseFieldToValueMap(fieldToValue);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/conformity/SimpleDBConformityClusterTracker.java", "commit_date": "2013-07-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructs a new STSAssumeRoleSessionCredentialsProvider, which will use\n * the specified credentials provider (which vends long lived AWS\n * credentials) to make a request to the AWS Security Token Service (STS),\n * uses the provided {@link #roleArn} to assume a role and then request\n * short lived session credentials, which will then be returned by this\n * class's {@link #getCredentials()} method.\n * @param longLivedCredentialsProvider\n *            Credentials provider for the main AWS credentials for a user's\n *            account.\n * @param roleArn\n *            The AWS ARN of the Role to be assumed.\n * @param clientConfiguration\n *            Client configuration connection parameters.\n */\n", "func_signal": "public STSAssumeRoleSessionCredentialsProvider(AWSCredentialsProvider longLivedCredentialsProvider, String roleArn,\n        ClientConfiguration clientConfiguration)", "code": "{\n    this.roleArn = roleArn;\n    securityTokenService = new AWSSecurityTokenServiceClient(longLivedCredentialsProvider, clientConfiguration);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void addOrUpdate(Cluster cluster)", "code": "{\n    List<ReplaceableAttribute> attrs = new ArrayList<ReplaceableAttribute>();\n    Map<String, String> fieldToValueMap = cluster.getFieldToValueMap();\n    for (Map.Entry<String, String> entry : fieldToValueMap.entrySet()) {\n        attrs.add(new ReplaceableAttribute(entry.getKey(), StringUtils.left(entry.getValue(), MAX_ATTR_SIZE),\n                true));\n    }\n    PutAttributesRequest putReqest = new PutAttributesRequest(domain, getSimpleDBItemName(cluster), attrs);\n    LOGGER.debug(String.format(\"Saving cluster %s to SimpleDB domain %s\",\n            cluster.getName(), domain));\n    this.simpleDBClient.putAttributes(putReqest);\n    LOGGER.debug(\"Successfully saved.\");\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/conformity/SimpleDBConformityClusterTracker.java", "commit_date": "2013-07-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructs a new STSAssumeRoleSessionCredentialsProvider, which makes a\n * request to the AWS Security Token Service (STS), uses the provided\n * {@link #roleArn} to assume a role and then request short lived session\n * credentials, which will then be returned by this class's\n * {@link #getCredentials()} method.\n * @param roleArn\n *            The AWS ARN of the Role to be assumed.\n */\n", "func_signal": "public STSAssumeRoleSessionCredentialsProvider(String roleArn)", "code": "{\n    this.roleArn = roleArn;\n    securityTokenService = new AWSSecurityTokenServiceClient();\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructor.\n * @param region the region of the janitor\n * @param ruleEngine the rule engine used by the janitor\n * @param crawler the crawler used by the janitor\n * @param resourceTracker the resource tracker used by the janitor\n * @param calendar the calendar used by the janitor\n * @param config the monkey configuration used by the janitor\n */\n", "func_signal": "public BasicJanitorContext(String region, JanitorRuleEngine ruleEngine, JanitorCrawler crawler,\n        JanitorResourceTracker resourceTracker, MonkeyCalendar calendar, MonkeyConfiguration config,\n        MonkeyRecorder recorder)", "code": "{\n    this.region = region;\n    this.resourceTracker = resourceTracker;\n    this.ruleEngine = ruleEngine;\n    this.crawler = crawler;\n    this.calendar = calendar;\n    this.config = config;\n    this.recorder = recorder;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/basic/janitor/BasicJanitorMonkeyContext.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructor.\n * @param awsCredentialsProvider\n *      The AWS credentials provider\n * @param instanceAgeThreshold\n *      The age in days that makes an instance be considered too old.\n */\n", "func_signal": "public InstanceTooOld(AWSCredentialsProvider awsCredentialsProvider, int instanceAgeThreshold)", "code": "{\n    this.awsCredentialsProvider = awsCredentialsProvider;\n    Validate.isTrue(instanceAgeThreshold > 0);\n    this.instanceAgeThreshold = instanceAgeThreshold;\n    this.reason = String.format(\"Instances are older than %d days\", instanceAgeThreshold);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/conformity/rule/InstanceTooOld.java", "commit_date": "2013-08-16 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Returns true if the instance is registered in Eureka/Discovery.\n * @param instanceId the instance id\n * @return true if the instance is active, false otherwise\n */\n", "func_signal": "private boolean isActiveInstance(String instanceId)", "code": "{\n    Validate.notNull(instanceId);\n    LOGGER.debug(String.format(\"Checking if instance %s is active\", instanceId));\n    List<InstanceInfo> instanceInfos = discoveryClient.getInstancesById(instanceId);\n    for (InstanceInfo info : instanceInfos) {\n        InstanceStatus status = info.getStatus();\n        if (status == InstanceStatus.UP || status == InstanceStatus.STARTING) {\n            LOGGER.debug(String.format(\"Instance %s is active in Discovery.\", instanceId));\n            return true;\n        }\n    }\n    LOGGER.debug(String.format(\"Instance %s is not active in Discovery.\", instanceId));\n    return false;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/janitor/rule/asg/DiscoveryASGInstanceValidator.java", "commit_date": "2013-01-25 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * The constructor.\n */\n", "func_signal": "public BasicConformityMonkeyContext()", "code": "{\n    super(\"simianarmy.properties\", \"client.properties\", \"conformity.properties\");\n    regions = Lists.newArrayList(region());\n\n    // By default, the monkey is leashed\n    leashed = configuration().getBoolOrElse(\"simianarmy.conformity.leashed\", true);\n\n    LOGGER.info(String.format(\"Conformity Monkey is running in: %s\", regions));\n\n    String sdbDomain = configuration().getStrOrElse(\"simianarmy.conformity.sdb.domain\", \"SIMIAN_ARMY\");\n\n    String dbDriver = configuration().getStr(\"simianarmy.recorder.db.driver\");\n    String dbUser = configuration().getStr(\"simianarmy.recorder.db.user\");\n    String dbPass = configuration().getStr(\"simianarmy.recorder.db.pass\");\n    String dbUrl = configuration().getStr(\"simianarmy.recorder.db.url\");\n    String dbTable = configuration().getStr(\"simianarmy.conformity.resources.db.table\");\n    \n    if (dbDriver == null) {       \n    \tclusterTracker = new SimpleDBConformityClusterTracker(awsClient(), sdbDomain);\n    } else {\n    \tRDSConformityClusterTracker rdsClusterTracker = new RDSConformityClusterTracker(dbDriver, dbUser, dbPass, dbUrl, dbTable);\n    \trdsClusterTracker.init();\n    \tclusterTracker = rdsClusterTracker;\n    }\n\n    ruleEngine = new ConformityRuleEngine();\n    boolean eurekaEnabled = configuration().getBoolOrElse(\"simianarmy.conformity.Eureka.enabled\", false);\n\n    if (eurekaEnabled) {\n        LOGGER.info(\"Initializing Discovery client.\");\n        Injector injector = Guice.createInjector(new EurekaModule());\n        DiscoveryClient discoveryClient = injector.getInstance(DiscoveryClient.class);\n        ConformityEurekaClient conformityEurekaClient = new BasicConformityEurekaClient(discoveryClient);\n        if (configuration().getBoolOrElse(\n                \"simianarmy.conformity.rule.InstanceIsHealthyInEureka.enabled\", false)) {\n            ruleEngine.addRule(new InstanceIsHealthyInEureka(conformityEurekaClient));\n        }\n        if (configuration().getBoolOrElse(\n                \"simianarmy.conformity.rule.InstanceHasHealthCheckUrl.enabled\", false)) {\n            ruleEngine.addRule(new InstanceHasHealthCheckUrl(conformityEurekaClient));\n        }\n        if (configuration().getBoolOrElse(\n                \"simianarmy.conformity.rule.InstanceHasStatusUrl.enabled\", false)) {\n            ruleEngine.addRule(new InstanceHasStatusUrl(conformityEurekaClient));\n        }\n    } else {\n        LOGGER.info(\"Discovery/Eureka is not enabled, the conformity rules that need Eureka are not added.\");\n    }\n\n    if (configuration().getBoolOrElse(\n            \"simianarmy.conformity.rule.InstanceInSecurityGroup.enabled\", false)) {\n        String requiredSecurityGroups = configuration().getStr(\n                \"simianarmy.conformity.rule.InstanceInSecurityGroup.requiredSecurityGroups\");\n        if (!StringUtils.isBlank(requiredSecurityGroups)) {\n            ruleEngine.addRule(new InstanceInSecurityGroup(getAwsCredentialsProvider(),\n                    StringUtils.split(requiredSecurityGroups, \",\")));\n        } else {\n            LOGGER.info(\"No required security groups is specified, \"\n                    + \"the conformity rule InstanceInSecurityGroup is ignored.\");\n        }\n    }\n\n    if (configuration().getBoolOrElse(\n            \"simianarmy.conformity.rule.InstanceTooOld.enabled\", false)) {\n            ruleEngine.addRule(new InstanceTooOld(getAwsCredentialsProvider(), (int) configuration().getNumOrElse(\n                    \"simianarmy.conformity.rule.InstanceTooOld.instanceAgeThreshold\", 180)));\n    }\n\n    if (configuration().getBoolOrElse(\n            \"simianarmy.conformity.rule.SameZonesInElbAndAsg.enabled\", false)) {\n        ruleEngine().addRule(new SameZonesInElbAndAsg(getAwsCredentialsProvider()));\n    }\n\n    if (configuration().getBoolOrElse(\n            \"simianarmy.conformity.rule.InstanceInVPC.enabled\", false)) {\n            ruleEngine.addRule(new InstanceInVPC(getAwsCredentialsProvider()));\n    }\n\n    if (configuration().getBoolOrElse(\n            \"simianarmy.conformity.rule.CrossZoneLoadBalancing.enabled\", false)) {\n            ruleEngine().addRule(new CrossZoneLoadBalancing(getAwsCredentialsProvider()));\n    }\n    \n    createClient(region());\n    regionToAwsClient.put(region(), awsClient());\n\n    clusterCrawler = new AWSClusterCrawler(regionToAwsClient, configuration());\n    sesClient = new AmazonSimpleEmailServiceClient();\n    if (configuration().getStr(\"simianarmy.aws.email.region\") != null) {\n      sesClient.setRegion(Region.getRegion(Regions.fromName(configuration().getStr(\"simianarmy.aws.email.region\"))));\n    }        \n    defaultEmail = configuration().getStrOrElse(\"simianarmy.conformity.notification.defaultEmail\", null);\n    ccEmails = StringUtils.split(\n            configuration().getStrOrElse(\"simianarmy.conformity.notification.ccEmails\", \"\"), \",\");\n    sourceEmail = configuration().getStrOrElse(\"simianarmy.conformity.notification.sourceEmail\", null);\n    conformityEmailBuilder = new BasicConformityEmailBuilder();\n    emailNotifier = new ConformityEmailNotifier(getConformityEmailNotifierContext());\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/basic/conformity/BasicConformityMonkeyContext.java", "commit_date": "2016-06-03 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructs a new STSAssumeRoleSessionCredentialsProvider, which will use\n * the specified long lived AWS credentials to make a request to the AWS\n * Security Token Service (STS), uses the provided {@link #roleArn} to\n * assume a role and then request short lived session credentials, which\n * will then be returned by this class's {@link #getCredentials()} method.\n * @param longLivedCredentials\n *            The main AWS credentials for a user's account.\n * @param roleArn\n *            The AWS ARN of the Role to be assumed.\n * @param clientConfiguration\n *            Client configuration connection parameters.\n */\n", "func_signal": "public STSAssumeRoleSessionCredentialsProvider(AWSCredentials longLivedCredentials, String roleArn,\n        ClientConfiguration clientConfiguration)", "code": "{\n    this.roleArn = roleArn;\n    securityTokenService = new AWSSecurityTokenServiceClient(longLivedCredentials, clientConfiguration);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Gets the launch time (in milliseconds) for a list of instance ids of the same region. The default\n * implementation is using an AWS client. The method can be overridden in subclasses to get the instance\n * launch times differently.\n * @param region\n *      the region of the instances\n * @param instanceIds\n *      the instance ids, all instances should be in the same region.\n * @return\n *      the map from instance id to the launch time in milliseconds\n */\n", "func_signal": "protected Map<String, Long> getInstanceLaunchTimes(String region, String... instanceIds)", "code": "{\n    Map<String, Long> result = Maps.newHashMap();\n    if (instanceIds == null || instanceIds.length == 0) {\n        return result;\n    }\n    AWSClient awsClient = new AWSClient(region, awsCredentialsProvider);\n    for (Instance instance : awsClient.describeInstances(instanceIds)) {\n        if (instance.getLaunchTime() != null) {\n            result.put(instance.getInstanceId(), instance.getLaunchTime().getTime());\n        } else {\n            LOGGER.warn(String.format(\"No launch time found for instance %s\", instance.getInstanceId()));\n        }\n    }\n    return result;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/conformity/rule/InstanceTooOld.java", "commit_date": "2013-08-16 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "//    @Test TODO: disable while debugging issues with this functionality\n", "func_signal": "public static void testJanitorWithUnmarkingUserTerminated()", "code": "{\n        Collection<Resource> crawledResources = new ArrayList<Resource>();\n        Map<String, Resource> trackedResources = new HashMap<String, Resource>();\n        int n = 10;\n        DateTime now = DateTime.now();\n        Date markTime = new Date(now.minusDays(5).getMillis());\n        Date notifyTime = new Date(now.minusDays(4).getMillis());\n        Date terminationTime = new Date(now.minusDays(1).getMillis());\n        for (Resource r : generateTestingResources(n)) {\n            if (Integer.parseInt(r.getId()) % 3 != 0) {\n                crawledResources.add(r);\n            } else {\n                trackedResources.put(r.getId(), r);\n                r.setState(CleanupState.MARKED);\n                r.setMarkTime(markTime);\n                r.setNotificationTime(notifyTime);\n                r.setExpectedTerminationTime(terminationTime);\n            }\n        }\n\n        TestJanitorCrawler crawler = new TestJanitorCrawler(crawledResources);\n        TestJanitorResourceTracker resourceTracker = new TestJanitorResourceTracker(trackedResources);\n        TestAbstractJanitor janitor = new TestAbstractJanitor(\n                new TestJanitorContext(TEST_REGION,\n                        new BasicJanitorRuleEngine().addRule(new IsEvenRule()),\n                        crawler,\n                        resourceTracker,\n                        new TestMonkeyCalendar()), TestResourceType.TEST_RESOURCE_TYPE);\n        janitor.setLeashed(false);\n        Assert.assertEquals(\n                crawler.resources(TestResourceType.TEST_RESOURCE_TYPE).size(),\n                n - n / 3);\n        Assert.assertEquals(resourceTracker.getResources(\n                TestResourceType.TEST_RESOURCE_TYPE, CleanupState.MARKED, TEST_REGION).size(),\n                n / 3);\n        janitor.markResources();\n        // n/3 resources should be considered user terminated\n        Assert.assertEquals(janitor.getMarkedResources().size(), n / 2 - n / 3 + n / 6);\n        Assert.assertEquals(janitor.getUnmarkedResources().size(), n / 3);\n\n        janitor.cleanupResources();\n        Assert.assertEquals(janitor.getCleanedResources().size(), n / 2 - n / 3 + n / 6);\n        Assert.assertEquals(janitor.getFailedToCleanResources().size(), 0);\n        Assert.assertEquals(janitor.getResourcesCleanedCount(), janitor.cleanedResourceIds.size());\n        Assert.assertEquals(janitor.getMarkedResourcesCount(), janitor.markedResourceIds.size());\n        Assert.assertEquals(janitor.getFailedToCleanResourcesCount(), 0);\n        Assert.assertEquals(janitor.getUnmarkedResourcesCount(), n / 3);\n    }", "path": "SimianArmy/src/test/java/com/netflix/simianarmy/janitor/TestAbstractJanitor.java", "commit_date": "2018-06-13 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean hasActiveInstance(Resource resource)", "code": "{\n    String instanceIds = resource.getAdditionalField(ASGJanitorCrawler.ASG_FIELD_INSTANCES);\n    String maxSizeStr = resource.getAdditionalField(ASGJanitorCrawler.ASG_FIELD_MAX_SIZE);\n    if (StringUtils.isBlank(instanceIds)) {\n        if (maxSizeStr != null && Integer.parseInt(maxSizeStr) == 0) {\n            // The ASG is empty when it has no instance and the max size of the ASG is 0.\n            // If the max size is not 0, the ASG could probably be in the process of starting new instances.\n            LOGGER.info(String.format(\"ASG %s is empty.\", resource.getId()));\n            return false;\n        } else {\n            LOGGER.info(String.format(\"ASG %s does not have instances but the max size is %s\",\n                    resource.getId(), maxSizeStr));\n            return true;\n        }\n    }\n    String[] instances = StringUtils.split(instanceIds, \",\");\n    LOGGER.debug(String.format(\"Checking if the %d instances in ASG %s are active.\",\n            instances.length, resource.getId()));\n    for (String instanceId : instances) {\n        if (isActiveInstance(instanceId)) {\n            LOGGER.info(String.format(\"ASG %s has active instance.\", resource.getId()));\n            return true;\n        }\n    }\n    LOGGER.info(String.format(\"ASG %s has no active instance.\", resource.getId()));\n    return false;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/janitor/rule/asg/DiscoveryASGInstanceValidator.java", "commit_date": "2013-01-25 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Instantiates a new simple db cluster tracker for conformity monkey.\n *\n * @param awsClient\n *            the AWS Client\n * @param domain\n *            the domain\n */\n", "func_signal": "public SimpleDBConformityClusterTracker(AWSClient awsClient, String domain)", "code": "{\n    Validate.notNull(awsClient);\n    Validate.notNull(domain);\n    this.domain = domain;\n    this.simpleDBClient = awsClient.sdbClient();\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/conformity/SimpleDBConformityClusterTracker.java", "commit_date": "2013-07-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructs a new STSAssumeRoleSessionCredentialsProvider, which will use\n * the specified credentials provider (which vends long lived AWS\n * credentials) to make a request to the AWS Security Token Service (STS),\n * usess the provided {@link #roleArn} to assume a role and then request\n * short lived session credentials, which will then be returned by this\n * class's {@link #getCredentials()} method.\n * @param longLivedCredentialsProvider\n *            Credentials provider for the main AWS credentials for a user's\n *            account.\n * @param roleArn\n *            The AWS ARN of the Role to be assumed.\n */\n", "func_signal": "public STSAssumeRoleSessionCredentialsProvider(AWSCredentialsProvider longLivedCredentialsProvider,\n        String roleArn)", "code": "{\n    this.roleArn = roleArn;\n    securityTokenService = new AWSSecurityTokenServiceClient(longLivedCredentialsProvider);\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Returns true if a new STS session needs to be started. A new STS session\n * is needed when no session has been started yet, or if the last session is\n * within {@link #EXPIRY_TIME_MILLIS} seconds of expiring.\n * @return True if a new STS session needs to be started.\n */\n", "func_signal": "private boolean needsNewSession()", "code": "{\n    if (sessionCredentials == null) {\n        return true;\n    }\n    long timeRemaining = sessionCredentialsExpiration.getTime() - System.currentTimeMillis();\n    return timeRemaining < EXPIRY_TIME_MILLIS;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/STSAssumeRoleSessionCredentialsProvider.java", "commit_date": "2014-11-17 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "/**\n * Constructor.\n * @param discoveryClient\n *          the client to access the Discovery/Eureka service for checking the status of instances.\n */\n", "func_signal": "public DiscoveryASGInstanceValidator(DiscoveryClient discoveryClient)", "code": "{\n    Validate.notNull(discoveryClient);\n    this.discoveryClient = discoveryClient;\n}", "path": "SimianArmy/src/main/java/com/netflix/simianarmy/aws/janitor/rule/asg/DiscoveryASGInstanceValidator.java", "commit_date": "2013-01-25 00:00:00", "repo_name": "Netflix/SimianArmy", "stars": 7955, "license": "apache-2.0", "language": "java", "size": 15326}
{"docstring": "//-------------------\u6d89\u53ca\u6c47\u7387\u8f6c\u6362--------------------\n", "func_signal": "public List<String> findPricesInUSDJava7(String product)", "code": "{\n    ExecutorService executor = Executors.newCachedThreadPool();\n    List<Future<Double>> priceFutures = new ArrayList<>();\n    for (Shop shop : shops) {\n        final Future<Double> futureRate = executor.submit(new Callable<Double>() {\n            public Double call() {\n                return ExchangeService.getRate(Money.EUR, ExchangeService.Money.USD);\n            }\n        });\n        Future<Double> futurePriceInUSD = executor.submit(new Callable<Double>() {\n            public Double call() {\n                try {\n                    double priceInEUR = shop.getPrice(product);\n                    return priceInEUR * futureRate.get();\n                } catch (InterruptedException | ExecutionException e) {\n                    throw new RuntimeException(e.getMessage(), e);\n                }\n            }\n        });\n        priceFutures.add(futurePriceInUSD);\n    }\n    List<String> prices = new ArrayList<>();\n    for (Future<Double> priceFuture : priceFutures) {\n        try {\n            prices.add(/*shop.getName() +*/ \" price is \" + priceFuture.get());\n        } catch (ExecutionException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    return prices;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/async/v1/BestPriceFinder.java", "commit_date": "2017-03-28 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "//synchronized\n", "func_signal": "public void testMethod()", "code": "{\n    try {\n        System.out.println(\"threadName= \" + Thread.currentThread().getName() + \" in sub \u4e0b\u4e00\u6b65 sleep begin time =\" + System.currentTimeMillis());\n        Thread.sleep(2000);\n        System.out.println(\"threadName= \" + Thread.currentThread().getName() + \" in sub \u4e0b\u4e00\u6b65 sleep end time =\" + System.currentTimeMillis());\n        super.testMethod();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}", "path": "java-learning/java-multithread/src/main/java/com/brianway/learning/java/multithread/synchronize/example7/Sub.java", "commit_date": "2016-08-21 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * for \u5faa\u73af\u7684\u8fed\u4ee3\n */\n", "func_signal": "public static long iterativeSum(long n)", "code": "{\n    long result = 0;\n    for (long i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/parallel/ParallelStreams.java", "commit_date": "2017-03-24 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u4ec5\u7528\u8d28\u6570\u4f5c\u9664\u6570\n *\n * @param primes \u90e8\u5206\u7ed3\u679c\n * @param candidate \u8981\u5224\u65ad\u7684\u6570\n * @return\n */\n", "func_signal": "public static boolean isPrime(List<Integer> primes, Integer candidate)", "code": "{\n    double candidateRoot = Math.sqrt((double) candidate);\n    //return primes.stream().filter(p -> p < candidateRoot).noneMatch(p -> candidate % p == 0);\n    return takeWhile(primes, i -> i <= candidateRoot).stream().noneMatch(i -> candidate % i == 0);\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/PartitionPrimeNumbers.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u5f02\u5e38\u4e0e Optional \u7684\u5bf9\u6bd4\n */\n", "func_signal": "public static Optional<Integer> stringToInt(String s)", "code": "{\n    try {\n        return Optional.of(Integer.parseInt(s));\n    } catch (NumberFormatException e) {\n        return Optional.empty();\n    }\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/optional/OptionalInAction.java", "commit_date": "2017-03-27 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u6309\u5b50\u6570\u7ec4\u6536\u96c6\u6570\u636e,\u628a\u6536\u96c6\u5668\u7684\u7ed3\u679c\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\n */\n", "func_signal": "private static Map<Dish.Type, Dish> mostCaloricDishesByTypeWithoutOprionals()", "code": "{\n    return menu.stream().collect(\n            groupingBy(Dish::getType,\n                    collectingAndThen(\n                            maxBy(Comparator.comparingInt(Dish::getCalories)),\n                            Optional::get)));\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/Grouping.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u8d28\u6570\n */\n", "func_signal": "public static boolean isPrime(int candidate)", "code": "{\n    return IntStream.rangeClosed(2, candidate - 1)\n            .limit((long) Math.floor(Math.sqrt((double) candidate)) - 1)\n            .noneMatch(i -> candidate % i == 0);\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/PartitionPrimeNumbers.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u8fd4\u56de\u5143\u7d20\u6ee1\u8db3\u8c13\u8bcd\u7684\u6700\u957f\u524d\u7f00\n */\n", "func_signal": "public static <A> List<A> takeWhile(List<A> list, Predicate<A> p)", "code": "{\n    int i = 0;\n    for (A item : list) {\n        if (!p.test(item)) {\n            return list.subList(0, i);\n        }\n        i++;\n    }\n    return list;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/PartitionPrimeNumbers.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u6839\u636e\u5546\u54c1\u540d\u968f\u673a\u751f\u6210\u4ef7\u683c\n */\n", "func_signal": "private double calculatePrice(String product)", "code": "{\n    delay();\n    return random.nextDouble() * product.charAt(0) + product.charAt(1);\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/async/v1/Shop.java", "commit_date": "2017-03-28 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u683c\u5f0f\u5316\u7684\u5185\u5b58\u8f93\u5165\n */\n", "func_signal": "public static void readFormattedInput(String filename)", "code": "{\n    try {\n        DataInputStream in = new DataInputStream(\n                new ByteArrayInputStream(\n                        BufferedInputFile.read(filename)\n                                .getBytes()));\n        while (in.available() != 0) {\n            System.out.print((char) in.readByte());\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "java-learning/java-io/src/main/java/com/brianway/learning/java/io/MemoryInput.java", "commit_date": "2016-11-29 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u4e0e groupingBy \u8054\u5408\u4f7f\u7528\u7684\u5176\u4ed6\u6536\u96c6\u5668\u4f8b\u5b50\n */\n", "func_signal": "private static Map<Dish.Type, Integer> sumCaloriesByType()", "code": "{\n    return menu.stream().collect(groupingBy(Dish::getType,\n            summingInt(Dish::getCalories)));\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/Grouping.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u4ece\u5185\u5b58\u8f93\u5165\n */\n", "func_signal": "public static void useStringReader(String filename)", "code": "{\n    try {\n        StringReader in = new StringReader(\n                BufferedInputFile.read(filename));\n        int c;\n        while ((c = in.read()) != -1)\n            System.out.print((char) c);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n}", "path": "java-learning/java-io/src/main/java/com/brianway/learning/java/io/MemoryInput.java", "commit_date": "2016-11-29 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * JDK 1.8\n * true\n * false\n * intern()\u4e0d\u4f1a\u518d\u590d\u5236\u5b9e\u4f8b,\u53ea\u662f\u5728\u5e38\u91cf\u6c60\u4e2d\u8bb0\u5f55\u9996\u6b21\u51fa\u73b0\u7684\u5b9e\u4f8b\u5f15\u7528\n */\n", "func_signal": "private static void testEqual()", "code": "{\n    String str1 = new StringBuilder(\"\u8ba1\u7b97\u673a\").append(\"\u8f6f\u4ef6\").toString();\n    System.out.println(str1.intern() == str1);// true\n\n    String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n    System.out.println(str2.intern() == str2);// false\n}", "path": "java-learning/java-jvm/src/main/java/com/brianway/learning/java/jvm/memory/RuntimeConstantPoolOOM.java", "commit_date": "2017-03-02 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u6839\u636e\u62bd\u8c61\u6761\u4ef6\u7b5b\u9009\n * \u5c06\u8fed\u4ee3\u96c6\u5408\u7684\u903b\u8f91\u548c\u8981\u5e94\u7528\u5230\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u884c\u4e3a\u533a\u5206\u5f00\n *\n * @param inventory\n * @param p\n * @return\n */\n", "func_signal": "public static List<Apple> filter(List<Apple> inventory, Predicate<Apple> p)", "code": "{\n    List<Apple> result = new ArrayList<>();\n    for (Apple apple : inventory) {\n        if (p.test(apple)) {\n            result.add(apple);\n        }\n    }\n    return result;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/lambda/FilteringApples.java", "commit_date": "2017-03-27 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u5171\u4eab\u4e86\u53ef\u53d8\u72b6\u6001,\u5bfc\u81f4\u6bcf\u6b21\u7ed3\u679c\u4e0d\u4e00\u81f4\n */\n", "func_signal": "public static long sideEffectParallelSum(long n)", "code": "{\n    Accumulator accumulator = new Accumulator();\n    LongStream.rangeClosed(1, n).parallel().forEach(accumulator::add);\n    return accumulator.total;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/parallel/ParallelStreams.java", "commit_date": "2017-03-24 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u7528 Optional \u5c01\u88c5\u53ef\u80fd\u4e3a null \u7684\u503c\n */\n", "func_signal": "public static Optional<Object> getValue(String key)", "code": "{\n    Optional<Object> value = Optional.ofNullable(map.get(key));\n    return value;\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/optional/OptionalInAction.java", "commit_date": "2017-03-27 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u5206\u4e86\u4e09\u6b65:\n * 1. \u83b7\u53d6\u4ef7\u683c\n * 2. \u89e3\u6790\u62a5\u4ef7\n * 3. \u4e3a\u8ba1\u7b97\u6298\u6263\u4ef7\u683c\u6784\u9020 Future\n */\n", "func_signal": "public Stream<CompletableFuture<String>> findPricesStream(String product)", "code": "{\n    return shops.stream()\n            .map(shop -> CompletableFuture.supplyAsync(() -> shop.getPrice(product), executor))\n            .map(future -> future.thenApply(Quote::parse))\n            .map(future -> future.thenCompose(quote -> CompletableFuture.supplyAsync(\n                    () -> Discount.applyDiscount(quote), executor)));\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/async/BestPriceFinder.java", "commit_date": "2017-03-28 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u4fee\u6539\u7b2c\u4e00\u4e2a\u7d2f\u52a0\u5668,\u5c06\u5176\u4e0e\u7b2c\u4e8c\u4e2a\u7d2f\u52a0\u5668\u7684\u5185\u5bb9\u5408\u5e76\n * \u8fd4\u56de\u7b2c\u4e00\u4e2a\u7d2f\u52a0\u5668\n */\n", "func_signal": "@Override\npublic BinaryOperator<List<T>> combiner()", "code": "{\n    return (list1, list2) -> {\n        list1.addAll(list2);\n        return list1;\n    };\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/streamapi/collect/ToListCollector.java", "commit_date": "2017-03-22 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "/**\n * \u54cd\u5e94 CompletableFuture \u7684 completion \u4e8b\u4ef6\n * \u628a Util \u7c7b\u4e2d\u7684 delay \u8c03\u4e00\u4e0b\u6548\u679c\u66f4\u660e\u663e\n */\n", "func_signal": "public void printPricesStream(String product)", "code": "{\n    long start = System.nanoTime();\n    CompletableFuture[] futures = findPricesStream(product)\n            .map(f -> f.thenAccept(s -> System.out.println(s + \" (done in \" + ((System.nanoTime() - start) / 1_000_000) + \" msecs)\")))\n            .toArray(CompletableFuture[]::new);\n    CompletableFuture.allOf(futures).join();\n    System.out.println(\"All shops have now responded in \" + ((System.nanoTime() - start) / 1_000_000) + \" msecs\");\n}", "path": "java-learning/java8/src/main/java/com/brianway/learning/java8/effective/async/BestPriceFinder.java", "commit_date": "2017-03-28 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "//synchronized\n", "func_signal": "private static void addCount()", "code": "{\n    for (int i = 0; i < 100; i++) {\n        count++;\n    }\n    System.out.println(\"count=\" + count);\n}", "path": "java-learning/java-multithread/src/main/java/com/brianway/learning/java/multithread/synchronize/example16/MyThread.java", "commit_date": "2016-08-21 00:00:00", "repo_name": "brianway/java-learning", "stars": 4196, "license": "None", "language": "java", "size": 800}
{"docstring": "// end of copied from protobuf\n", "func_signal": "public static int getVLongSize(long val)", "code": "{\n  int rPos = 0;\n  while ((val & ~0x7F) != 0) {\n    val >>>= 7;\n    rPos++;\n  }\n  return rPos + 1;\n}", "path": "hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/AbstractByteRange.java", "commit_date": "2020-01-01 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Set up monitor status if it is not created.\n */\n", "func_signal": "private MonitoredTask getMonitorStatus()", "code": "{\n  if (monitorStatus == null) {\n    monitorStatus = TaskMonitor.get().createStatus(\"Cloning  snapshot '\" + snapshot.getName() +\n      \"' to table \" + getTableName());\n  }\n  return monitorStatus;\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Add regions to hbase:meta table.\n * @param env MasterProcedureEnv\n * @throws IOException\n */\n", "func_signal": "private void addRegionsToMeta(final MasterProcedureEnv env) throws IOException", "code": "{\n  newRegions = CreateTableProcedure.addTableToMeta(env, tableDescriptor, newRegions);\n\n  // TODO: parentsToChildrenPairMap is always empty, which makes updateMetaParentRegions()\n  // a no-op. This part seems unnecessary. Figure out. - Appy 12/21/17\n  RestoreSnapshotHelper.RestoreMetaChanges metaChanges =\n      new RestoreSnapshotHelper.RestoreMetaChanges(\n              tableDescriptor, parentsToChildrenPairMap);\n  metaChanges.updateMetaParentRegions(env.getMasterServices().getConnection(), newRegions);\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"{ NAME=> '\");\n  sb.append(name);\n  sb.append('\\'');\n  for (Map.Entry<QName,Object> e : attrs.entrySet()) {\n    sb.append(\", \");\n    sb.append(e.getKey().getLocalPart());\n    sb.append(\" => '\");\n    sb.append(e.getValue().toString());\n    sb.append('\\'');\n  }\n  sb.append(\", COLUMNS => [ \");\n  Iterator<ColumnSchemaModel> i = columns.iterator();\n  while (i.hasNext()) {\n    ColumnSchemaModel family = i.next();\n    sb.append(family.toString());\n    if (i.hasNext()) {\n      sb.append(',');\n    }\n    sb.append(' ');\n  }\n  sb.append(\"] }\");\n  return sb.toString();\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "//\n// methods used for comparison\n//\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n  if (isHashCached()) {// hash is already calculated and cached\n    return hash;\n  }\n  if (this.isEmpty()) {// return 0 for empty ByteRange\n    hash = 0;\n    return hash;\n  }\n  int off = offset;\n  hash = 0;\n  for (int i = 0; i < length; i++) {\n    hash = 31 * hash + bytes[off++];\n  }\n  return hash;\n}", "path": "hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/AbstractByteRange.java", "commit_date": "2020-01-01 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * @return true if READONLY attribute exists and is truel\n */\n", "func_signal": "public boolean __getReadOnly()", "code": "{\n  Object o = attrs.get(READONLY);\n  return o != null ? Boolean.parseBoolean(o.toString()) : TableDescriptorBuilder.DEFAULT_READONLY;\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Constructor\n * @param env MasterProcedureEnv\n * @param tableDescriptor the table to operate on\n * @param snapshot snapshot to clone from\n */\n", "func_signal": "public CloneSnapshotProcedure(final MasterProcedureEnv env,\n    final TableDescriptor tableDescriptor, final SnapshotDescription snapshot,\n    final boolean restoreAcl)", "code": "{\n  super(env);\n  this.tableDescriptor = tableDescriptor;\n  this.snapshot = snapshot;\n  this.restoreAcl = restoreAcl;\n\n  getMonitorStatus();\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "//\n// methods for duplicating the current instance\n//\n", "func_signal": "@Override\npublic byte[] deepCopyToNewArray()", "code": "{\n  byte[] result = new byte[length];\n  System.arraycopy(bytes, offset, result, 0, length);\n  return result;\n}", "path": "hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/AbstractByteRange.java", "commit_date": "2020-01-01 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "// Copied from com.google.protobuf.CodedInputStream v2.5.0 readRawVarint64\n", "func_signal": "@Override\npublic long getVLong(int index)", "code": "{\n  int shift = 0;\n  long result = 0;\n  while (shift < 64) {\n    final byte b = get(index++);\n    result |= (long) (b & 0x7F) << shift;\n    if ((b & 0x80) == 0) {\n      break;\n    }\n    shift += 7;\n  }\n  return result;\n}", "path": "hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/AbstractByteRange.java", "commit_date": "2020-01-01 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Move table temp mob directory to the hbase root location\n * @param mfs The master file system\n * @param tableDescriptor The table to operate on\n * @param tempMobTableDir The temp mob directory of table\n * @throws IOException If failed to move temp mob dir to hbase root dir\n */\n", "func_signal": "private void moveTempMobDirectoryToHBaseRoot(final MasterFileSystem mfs,\n    final TableDescriptor tableDescriptor, final Path tempMobTableDir) throws IOException", "code": "{\n  FileSystem fs = mfs.getFileSystem();\n  final Path tableMobDir =\n      MobUtils.getMobTableDir(mfs.getRootDir(), tableDescriptor.getTableName());\n  if (!fs.delete(tableMobDir, true) && fs.exists(tableMobDir)) {\n    throw new IOException(\"Couldn't delete mob table \" + tableMobDir);\n  }\n  if (!fs.exists(tableMobDir.getParent())) {\n    fs.mkdirs(tableMobDir.getParent());\n  }\n  if (!fs.rename(tempMobTableDir, tableMobDir)) {\n    throw new IOException(\"Unable to move mob table from temp=\" + tempMobTableDir\n        + \" to hbase root=\" + tableMobDir);\n  }\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Return a table descriptor value as a string. Calls toString() on the\n * object stored in the descriptor value map.\n * @param name the attribute name\n * @return the attribute value\n */\n", "func_signal": "public String getAttribute(String name)", "code": "{\n  Object o = attrs.get(new QName(name));\n  return o != null ? o.toString() : null;\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * @return true if IS_ROOT attribute exists and is truel\n */\n", "func_signal": "public boolean __getIsRoot()", "code": "{\n  Object o = attrs.get(IS_ROOT);\n  return o != null && Boolean.parseBoolean(o.toString());\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Create region layout in file system.\n * @param env MasterProcedureEnv\n * @throws IOException\n */\n", "func_signal": "private List<RegionInfo> createFsLayout(\n  final MasterProcedureEnv env,\n  final TableDescriptor tableDescriptor,\n  List<RegionInfo> newRegions,\n  final CreateHdfsRegions hdfsRegionHandler) throws IOException", "code": "{\n  final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n  final Path tempdir = mfs.getTempDir();\n\n  // 1. Create Table Descriptor\n  // using a copy of descriptor, table will be created enabling first\n  final Path tempTableDir = CommonFSUtils.getTableDir(tempdir, tableDescriptor.getTableName());\n  if (CommonFSUtils.isExists(mfs.getFileSystem(), tempTableDir)) {\n    // if the region dirs exist, will cause exception and unlimited retry (see HBASE-24546)\n    LOG.warn(\"temp table dir already exists on disk: {}, will be deleted.\", tempTableDir);\n    CommonFSUtils.deleteDirectory(mfs.getFileSystem(), tempTableDir);\n  }\n  ((FSTableDescriptors) (env.getMasterServices().getTableDescriptors()))\n    .createTableDescriptorForTableDirectory(tempTableDir,\n      TableDescriptorBuilder.newBuilder(tableDescriptor).build(), false);\n\n  // 2. Create Regions\n  newRegions = hdfsRegionHandler.createHdfsRegions(\n    env, tempdir, tableDescriptor.getTableName(), newRegions);\n\n  // 3. Move Table temp directory to the hbase root location\n  CreateTableProcedure.moveTempDirectoryToHBaseRoot(env, tableDescriptor, tempTableDir);\n  // Move Table temp mob directory to the hbase root location\n  Path tempMobTableDir = MobUtils.getMobTableDir(tempdir, tableDescriptor.getTableName());\n  if (mfs.getFileSystem().exists(tempMobTableDir)) {\n    moveTempMobDirectoryToHBaseRoot(mfs, tableDescriptor, tempMobTableDir);\n  }\n  return newRegions;\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Action before any real action of cloning from snapshot.\n * @param env MasterProcedureEnv\n */\n", "func_signal": "private void prepareClone(final MasterProcedureEnv env) throws IOException", "code": "{\n  final TableName tableName = getTableName();\n  if (env.getMasterServices().getTableDescriptors().exists(tableName)) {\n    throw new TableExistsException(tableName);\n  }\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Bitwise comparison of each byte in the array. Unsigned comparison, not\n * paying attention to java's signed bytes.\n */\n", "func_signal": "@Override\npublic int compareTo(ByteRange other)", "code": "{\n  return Bytes.compareTo(bytes, offset, length, other.getBytes(), other.getOffset(),\n      other.getLength());\n}", "path": "hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/AbstractByteRange.java", "commit_date": "2020-01-01 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Action after cloning from snapshot.\n * @param env MasterProcedureEnv\n * @throws IOException\n * @throws InterruptedException\n */\n", "func_signal": "private void postCloneSnapshot(final MasterProcedureEnv env)\n    throws IOException, InterruptedException", "code": "{\n  final MasterCoprocessorHost cpHost = env.getMasterCoprocessorHost();\n  if (cpHost != null) {\n    final RegionInfo[] regions = (newRegions == null) ? null :\n      newRegions.toArray(new RegionInfo[newRegions.size()]);\n    cpHost.postCompletedCreateTableAction(tableDescriptor, regions, getUser());\n  }\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Action before cloning from snapshot.\n * @param env MasterProcedureEnv\n * @throws IOException\n * @throws InterruptedException\n */\n", "func_signal": "private void preCloneSnapshot(final MasterProcedureEnv env)\n    throws IOException, InterruptedException", "code": "{\n  if (!getTableName().isSystemTable()) {\n    // Check and update namespace quota\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n\n    SnapshotManifest manifest = SnapshotManifest.open(\n      env.getMasterConfiguration(),\n      mfs.getFileSystem(),\n      SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshot, mfs.getRootDir()),\n      snapshot);\n\n    ProcedureSyncWait.getMasterQuotaManager(env)\n      .checkNamespaceTableAndRegionQuota(getTableName(), manifest.getRegionManifestsMap().size());\n  }\n\n  final MasterCoprocessorHost cpHost = env.getMasterCoprocessorHost();\n  if (cpHost != null) {\n    cpHost.preCreateTableAction(tableDescriptor, null, getUser());\n  }\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Create regions in file system.\n * @param env MasterProcedureEnv\n * @throws IOException\n */\n", "func_signal": "private List<RegionInfo> createFilesystemLayout(\n  final MasterProcedureEnv env,\n  final TableDescriptor tableDescriptor,\n  final List<RegionInfo> newRegions) throws IOException", "code": "{\n  return createFsLayout(env, tableDescriptor, newRegions, new CreateHdfsRegions() {\n    @Override\n    public List<RegionInfo> createHdfsRegions(\n      final MasterProcedureEnv env,\n      final Path tableRootDir, final TableName tableName,\n      final List<RegionInfo> newRegions) throws IOException {\n\n      final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n      final FileSystem fs = mfs.getFileSystem();\n      final Path rootDir = mfs.getRootDir();\n      final Configuration conf = env.getMasterConfiguration();\n      final ForeignExceptionDispatcher monitorException = new ForeignExceptionDispatcher();\n\n      getMonitorStatus().setStatus(\"Clone snapshot - creating regions for table: \" + tableName);\n\n      try {\n        // 1. Execute the on-disk Clone\n        Path snapshotDir = SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshot, rootDir);\n        SnapshotManifest manifest = SnapshotManifest.open(conf, fs, snapshotDir, snapshot);\n        RestoreSnapshotHelper restoreHelper = new RestoreSnapshotHelper(\n          conf, fs, manifest, tableDescriptor, tableRootDir, monitorException, monitorStatus);\n        RestoreSnapshotHelper.RestoreMetaChanges metaChanges = restoreHelper.restoreHdfsRegions();\n\n        // Clone operation should not have stuff to restore or remove\n        Preconditions.checkArgument(\n          !metaChanges.hasRegionsToRestore(), \"A clone should not have regions to restore\");\n        Preconditions.checkArgument(\n          !metaChanges.hasRegionsToRemove(), \"A clone should not have regions to remove\");\n\n        // At this point the clone is complete. Next step is enabling the table.\n        String msg =\n          \"Clone snapshot=\"+ snapshot.getName() +\" on table=\" + tableName + \" completed!\";\n        LOG.info(msg);\n        monitorStatus.setStatus(msg + \" Waiting for table to be enabled...\");\n\n        // 2. Let the next step to add the regions to meta\n        return metaChanges.getRegionsToAdd();\n      } catch (Exception e) {\n        String msg = \"clone snapshot=\" + ClientSnapshotDescriptionUtils.toString(snapshot) +\n          \" failed because \" + e.getMessage();\n        LOG.error(msg, e);\n        IOException rse = new RestoreSnapshotException(msg, e,\n            ProtobufUtil.createSnapshotDesc(snapshot));\n\n        // these handlers aren't futures so we need to register the error here.\n        monitorException.receive(new ForeignException(\"Master CloneSnapshotProcedure\", rse));\n        throw rse;\n      }\n    }\n  });\n}", "path": "hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/CloneSnapshotProcedure.java", "commit_date": "2020-08-30 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * @return true if IS_META attribute exists and is truel\n */\n", "func_signal": "public boolean __getIsMeta()", "code": "{\n  Object o = attrs.get(IS_META);\n  return o != null && Boolean.parseBoolean(o.toString());\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * @return a table descriptor\n */\n", "func_signal": "@JsonIgnore\npublic TableDescriptor getTableDescriptor()", "code": "{\n  TableDescriptorBuilder tableDescriptorBuilder =\n    TableDescriptorBuilder.newBuilder(TableName.valueOf(getName()));\n  for (Map.Entry<QName, Object> e : getAny().entrySet()) {\n    tableDescriptorBuilder.setValue(e.getKey().getLocalPart(), e.getValue().toString());\n  }\n  for (ColumnSchemaModel column : getColumns()) {\n    ColumnFamilyDescriptorBuilder cfdb = ColumnFamilyDescriptorBuilder\n      .newBuilder(Bytes.toBytes(column.getName()));\n    for (Map.Entry<QName, Object> e : column.getAny().entrySet()) {\n      cfdb.setValue(e.getKey().getLocalPart(), e.getValue().toString());\n    }\n    tableDescriptorBuilder.setColumnFamily(cfdb.build());\n  }\n  return tableDescriptorBuilder.build();\n}", "path": "hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/model/TableSchemaModel.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "apache/hbase", "stars": 5070, "license": "apache-2.0", "language": "java", "size": 481373}
{"docstring": "/**\n * Simulate a Cleaner operation cleaning up an instant.\n *\n * @param instant Instant to be cleaner\n * @param files List of files to be deleted\n * @param cleanInstant Cleaner Instant\n */\n", "func_signal": "private void performClean(String instant, List<String> files, String cleanInstant)\n    throws IOException", "code": "{\n  Map<String, List<String>> partititonToFiles = deleteFiles(files);\n  List<HoodieCleanStat> cleanStats = partititonToFiles.entrySet().stream().map(e ->\n      new HoodieCleanStat(HoodieCleaningPolicy.KEEP_LATEST_COMMITS, e.getKey(), e.getValue(), e.getValue(),\n      new ArrayList<>(), Integer.toString(Integer.parseInt(instant) + 1))).collect(Collectors.toList());\n\n  HoodieInstant cleanInflightInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, cleanInstant);\n  metaClient.getActiveTimeline().createNewInstant(cleanInflightInstant);\n  HoodieCleanMetadata cleanMetadata = CleanerUtils.convertCleanMetadata(cleanInstant, Option.empty(), cleanStats);\n  metaClient.getActiveTimeline().saveAsComplete(cleanInflightInstant,\n      TimelineMetadataUtils.serializeCleanMetadata(cleanMetadata));\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Simulates one of more cleaning, incrementally sync the view and validate the view.\n *\n * @param view Hoodie View\n * @param newCleanerInstants Cleaner Instants\n * @param deltaInstantMap File-Slice Base Instants to Delta Instants\n * @param instantsToFiles List of files associated with each instant\n * @param cleanedInstants List of cleaned instants\n */\n", "func_signal": "private void testCleans(SyncableFileSystemView view, List<String> newCleanerInstants,\n    Map<String, List<String>> deltaInstantMap, Map<String, List<String>> instantsToFiles,\n    List<String> cleanedInstants, int numFilesAddedPerInstant, int numFilesReplacedPerInstant)", "code": "{\n  final int netFilesAddedPerInstant = numFilesAddedPerInstant - numFilesReplacedPerInstant;\n  assertEquals(newCleanerInstants.size(), cleanedInstants.size());\n  long exp = partitions.stream().mapToLong(p1 -> view.getAllFileSlices(p1).count()).findAny().getAsLong();\n  LOG.info(\"Initial File Slices :\" + exp);\n  for (int idx = 0; idx < newCleanerInstants.size(); idx++) {\n    String instant = cleanedInstants.get(idx);\n    try {\n      List<String> filesToDelete = new ArrayList<>(instantsToFiles.get(instant));\n      deltaInstantMap.get(instant).forEach(n -> filesToDelete.addAll(instantsToFiles.get(n)));\n\n      performClean(instant, filesToDelete, newCleanerInstants.get(idx));\n\n      exp -= fileIdsPerPartition.size() - numFilesReplacedPerInstant;\n      final long expTotalFileSlicesPerPartition = exp;\n      view.sync();\n      assertTrue(view.getLastInstant().isPresent());\n      assertEquals(newCleanerInstants.get(idx), view.getLastInstant().get().getTimestamp());\n      assertEquals(State.COMPLETED, view.getLastInstant().get().getState());\n      assertEquals(HoodieTimeline.CLEAN_ACTION, view.getLastInstant().get().getAction());\n      partitions.forEach(p -> {\n        LOG.info(\"PARTITION : \" + p);\n        LOG.info(\"\\tFileSlices :\" + view.getAllFileSlices(p).collect(Collectors.toList()));\n      });\n\n      final int instantIdx = newCleanerInstants.size() - idx;\n      partitions.forEach(p -> assertEquals(fileIdsPerPartition.size() + instantIdx * netFilesAddedPerInstant, view.getLatestFileSlices(p).count()));\n      partitions.forEach(p -> assertEquals(expTotalFileSlicesPerPartition, view.getAllFileSlices(p).count()));\n\n      metaClient.reloadActiveTimeline();\n      SyncableFileSystemView newView = getFileSystemView(metaClient);\n      areViewsConsistent(view, newView, expTotalFileSlicesPerPartition * partitions.size());\n    } catch (IOException e) {\n      throw new HoodieException(e);\n    }\n  }\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Add all rows.\n * \n * @param rows Rows to be added\n * @return\n */\n", "func_signal": "public Table addAllRows(List<Comparable[]> rows)", "code": "{\n  rows.forEach(r -> add(Arrays.asList(r)));\n  return this;\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Tests FS View incremental syncing behavior when multiple instants gets committed.\n */\n", "func_signal": "@Test\npublic void testMultipleTransitions() throws IOException", "code": "{\n\n  SyncableFileSystemView view1 = getFileSystemView(metaClient);\n  view1.sync();\n  Map<String, List<String>> instantsToFiles;\n\n  /*\n   * Case where incremental syncing is catching up on more than one ingestion at a time\n   */\n  // Run 1 ingestion on MOR table (1 delta commits). View1 is now sync up to this point\n  instantsToFiles = testMultipleWriteSteps(view1, Collections.singletonList(\"11\"), true, \"11\");\n\n  SyncableFileSystemView view2 =\n      getFileSystemView(new HoodieTableMetaClient(metaClient.getHadoopConf(), metaClient.getBasePath()));\n\n  // Run 2 more ingestion on MOR table. View1 is not yet synced but View2 is\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Arrays.asList(\"12\", \"13\"), true, \"11\"));\n\n  // Now Sync view1 and add 1 more ingestion. Check if view1 is able to catchup correctly\n  instantsToFiles.putAll(testMultipleWriteSteps(view1, Collections.singletonList(\"14\"), true, \"11\"));\n\n  view2.sync();\n  SyncableFileSystemView view3 =\n      getFileSystemView(new HoodieTableMetaClient(metaClient.getHadoopConf(), metaClient.getBasePath()));\n  view3.sync();\n  areViewsConsistent(view1, view2, partitions.size() * fileIdsPerPartition.size());\n\n  /*\n   * Case where a compaction is scheduled and then unscheduled\n   */\n  scheduleCompaction(view2, \"15\");\n  unscheduleCompaction(view2, \"15\", \"14\", \"11\");\n  view1.sync();\n  areViewsConsistent(view1, view2, partitions.size() * fileIdsPerPartition.size());\n  SyncableFileSystemView view4 =\n      getFileSystemView(new HoodieTableMetaClient(metaClient.getHadoopConf(), metaClient.getBasePath()));\n  view4.sync();\n\n  /*\n   * Case where a compaction is scheduled, 2 ingestion happens and then a compaction happens\n   */\n  scheduleCompaction(view2, \"16\");\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Arrays.asList(\"17\", \"18\"), true, \"16\", 2));\n  // Compaction\n  testMultipleWriteSteps(view2, Collections.singletonList(\"16\"), false, \"16\", 2,\n      Collections.singletonList(new HoodieInstant(State.COMPLETED, HoodieTimeline.DELTA_COMMIT_ACTION, \"18\")));\n  view1.sync();\n  areViewsConsistent(view1, view2, partitions.size() * fileIdsPerPartition.size() * 2);\n  SyncableFileSystemView view5 =\n      getFileSystemView(new HoodieTableMetaClient(metaClient.getHadoopConf(), metaClient.getBasePath()));\n  view5.sync();\n\n  /*\n   * Case where a clean happened and then rounds of ingestion and compaction happened\n   */\n  testCleans(view2, Collections.singletonList(\"19\"),\n      new HashMap<String, List<String>>() {\n          {\n            put(\"11\", Arrays.asList(\"12\", \"13\", \"14\"));\n          }\n      },\n      instantsToFiles, Collections.singletonList(\"11\"), 0, 0);\n  scheduleCompaction(view2, \"20\");\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Arrays.asList(\"21\", \"22\"), true, \"20\", 2));\n  // Compaction\n  testMultipleWriteSteps(view2, Collections.singletonList(\"20\"), false, \"20\", 2,\n      Collections.singletonList(new HoodieInstant(State.COMPLETED, HoodieTimeline.DELTA_COMMIT_ACTION, \"22\")));\n  // Run one more round of ingestion\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Arrays.asList(\"23\", \"24\"), true, \"20\", 2));\n  view1.sync();\n  areViewsConsistent(view1, view2, partitions.size() * fileIdsPerPartition.size() * 2);\n  SyncableFileSystemView view6 =\n      getFileSystemView(new HoodieTableMetaClient(metaClient.getHadoopConf(), metaClient.getBasePath()));\n  view6.sync();\n\n  /*\n   * Case where multiple restores and ingestions happened\n   */\n  testRestore(view2, Collections.singletonList(\"25\"), new HashMap<>(), Collections.singletonList(getHoodieCommitInstant(\"24\", true)), \"29\", true);\n  testRestore(view2, Collections.singletonList(\"26\"), new HashMap<>(), Collections.singletonList(getHoodieCommitInstant(\"23\", true)), \"29\", false);\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Collections.singletonList(\"27\"), true, \"20\", 2));\n  scheduleCompaction(view2, \"28\");\n  instantsToFiles.putAll(testMultipleWriteSteps(view2, Collections.singletonList(\"29\"), true, \"28\", 3));\n  // Compaction\n  testMultipleWriteSteps(view2, Collections.singletonList(\"28\"), false, \"28\", 3,\n      Collections.singletonList(new HoodieInstant(State.COMPLETED, HoodieTimeline.DELTA_COMMIT_ACTION, \"29\")));\n\n  Arrays.asList(view1, view2, view3, view4, view5, view6).forEach(v -> {\n    v.sync();\n    areViewsConsistent(v, view1, partitions.size() * fileIdsPerPartition.size() * 3);\n  });\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Prepares for rendering. Rows are sorted and limited\n */\n", "func_signal": "private void sortAndLimit()", "code": "{\n  this.renderRows = new ArrayList<>();\n  final int limit = this.limitOptional.orElse(rawRows.size());\n  final List<List<Comparable>> orderedRows = orderRows();\n  renderRows = orderedRows.stream().limit(limit).map(row -> IntStream.range(0, rowHeader.getNumFields()).mapToObj(idx -> {\n    String fieldName = rowHeader.get(idx);\n    if (fieldNameToConverterMap.containsKey(fieldName)) {\n      return fieldNameToConverterMap.get(fieldName).apply(row.get(idx));\n    }\n    Object v = row.get(idx);\n    return v == null ? \"null\" : v.toString();\n  }).collect(Collectors.toList())).collect(Collectors.toList());\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "// pick one fileId from each partition to replace and remove it from 'instantsToFiles'\n", "func_signal": "private Map<String, List<String>> pickFilesToReplace(Map<String, List<String>> instantsToFiles)", "code": "{\n  if (instantsToFiles.isEmpty()) {\n    return Collections.emptyMap();\n  }\n\n  String maxInstant = instantsToFiles.keySet().stream().max(Comparator.naturalOrder()).get();\n  Map<String, List<String>> partitionToFileIdsList = instantsToFiles.get(maxInstant).stream().map(file -> {\n    int lastPartition = file.lastIndexOf(\"/\");\n    return Pair.of(file.substring(0, lastPartition), file.substring(lastPartition + 1));\n  }).collect(Collectors.groupingBy(Pair::getKey, Collectors.mapping(Pair::getValue, Collectors.toList())));\n  return partitions.stream()\n      .map(p -> Pair.of(p, FSUtils.getFileId(partitionToFileIdsList.get(p).get(0))))\n      .collect(Collectors.groupingBy(Pair::getKey, Collectors.mapping(Pair::getValue, Collectors.toList())));\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Schedule a pending compaction and validate.\n *\n * @param view Hoodie View\n * @param instantTime COmpaction Instant Time\n */\n", "func_signal": "private void scheduleCompaction(SyncableFileSystemView view, String instantTime) throws IOException", "code": "{\n  List<Pair<String, FileSlice>> slices = partitions.stream()\n      .flatMap(p -> view.getLatestFileSlices(p).map(s -> Pair.of(p, s))).collect(Collectors.toList());\n\n  long initialExpTotalFileSlices = partitions.stream().mapToLong(p -> view.getAllFileSlices(p).count()).sum();\n\n  HoodieCompactionPlan plan = CompactionUtils.buildFromFileSlices(slices, Option.empty(), Option.empty());\n  HoodieInstant compactionInstant = new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, instantTime);\n  metaClient.getActiveTimeline().saveToCompactionRequested(compactionInstant,\n      TimelineMetadataUtils.serializeCompactionPlan(plan));\n\n  view.sync();\n  partitions.forEach(p -> {\n    view.getLatestFileSlices(p).forEach(fs -> {\n      assertEquals(instantTime, fs.getBaseInstantTime());\n      assertEquals(p, fs.getPartitionPath());\n      assertFalse(fs.getBaseFile().isPresent());\n    });\n    view.getLatestMergedFileSlicesBeforeOrOn(p, instantTime).forEach(fs -> {\n      assertTrue(HoodieTimeline.compareTimestamps(instantTime, HoodieTimeline.GREATER_THAN, fs.getBaseInstantTime()));\n      assertEquals(p, fs.getPartitionPath());\n    });\n  });\n\n  metaClient.reloadActiveTimeline();\n  SyncableFileSystemView newView = getFileSystemView(metaClient);\n  areViewsConsistent(view, newView, initialExpTotalFileSlices + partitions.size() * fileIdsPerPartition.size());\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Main API to add row to the table.\n * \n * @param row Row\n */\n", "func_signal": "public Table add(List<Comparable> row)", "code": "{\n  if (finishedAdding) {\n    throw new IllegalStateException(\"Container already marked done for adding. No more entries can be added.\");\n  }\n\n  if (rowHeader.getFieldNames().size() != row.size()) {\n    throw new IllegalArgumentException(\"Incorrect number of fields in row. Expected: \"\n        + rowHeader.getFieldNames().size() + \", Got: \" + row.size() + \", Row: \" + row);\n  }\n\n  this.rawRows.add(new ArrayList<>(row));\n  return this;\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Add all rows.\n * \n * @param rows Rows to be added\n * @return\n */\n", "func_signal": "public Table addAll(List<List<Comparable>> rows)", "code": "{\n  rows.forEach(this::add);\n  return this;\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "// Check if record level metadata is aggregated properly at the end of write.\n", "func_signal": "@Test\npublic void testMetadataAggregateFromWriteStatus() throws Exception", "code": "{\n  // Prepare the AvroParquetIO\n  HoodieWriteConfig config =\n      makeHoodieClientConfigBuilder().withWriteStatusClass(MetadataMergeWriteStatus.class).build();\n  String firstCommitTime = makeNewCommitTime();\n  metaClient = HoodieTableMetaClient.reload(metaClient);\n\n  HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n\n  // Get some records belong to the same partition (2016/01/31)\n  String recordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":12}\";\n  String recordStr2 = \"{\\\"_row_key\\\":\\\"8eb5b87b-1feu-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:20:41.415Z\\\",\\\"number\\\":100}\";\n  String recordStr3 = \"{\\\"_row_key\\\":\\\"8eb5b87c-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n\n  List<HoodieRecord> records = new ArrayList<>();\n  RawTripTestPayload rowChange1 = new RawTripTestPayload(recordStr1);\n  records.add(new HoodieRecord(new HoodieKey(rowChange1.getRowKey(), rowChange1.getPartitionPath()), rowChange1));\n  RawTripTestPayload rowChange2 = new RawTripTestPayload(recordStr2);\n  records.add(new HoodieRecord(new HoodieKey(rowChange2.getRowKey(), rowChange2.getPartitionPath()), rowChange2));\n  RawTripTestPayload rowChange3 = new RawTripTestPayload(recordStr3);\n  records.add(new HoodieRecord(new HoodieKey(rowChange3.getRowKey(), rowChange3.getPartitionPath()), rowChange3));\n\n  // Insert new records\n  BaseSparkCommitActionExecutor actionExecutor = new SparkInsertCommitActionExecutor(context, config, table,\n      firstCommitTime, jsc.parallelize(records));\n  List<WriteStatus> writeStatuses = jsc.parallelize(Arrays.asList(1)).map(x -> {\n    return actionExecutor.handleInsert(FSUtils.createNewFileIdPfx(), records.iterator());\n  }).flatMap(Transformations::flattenAsIterator).collect();\n\n  Map<String, String> allWriteStatusMergedMetadataMap =\n      MetadataMergeWriteStatus.mergeMetadataForWriteStatuses(writeStatuses);\n  assertTrue(allWriteStatusMergedMetadataMap.containsKey(\"InputRecordCount_1506582000\"));\n  // For metadata key InputRecordCount_1506582000, value is 2 for each record. So sum of this\n  // should be 2 * 3\n  assertEquals(\"6\", allWriteStatusMergedMetadataMap.get(\"InputRecordCount_1506582000\"));\n}", "path": "hudi/hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/table/action/commit/TestCopyOnWriteActionExecutor.java", "commit_date": "2020-10-19 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "// TODO (weiy): Add testcases for crossing file writing.\n", "func_signal": "@Test\npublic void testUpdateRecords() throws Exception", "code": "{\n  // Prepare the AvroParquetIO\n  HoodieWriteConfig config = makeHoodieClientConfig();\n  String firstCommitTime = makeNewCommitTime();\n  SparkRDDWriteClient writeClient = getHoodieWriteClient(config);\n  writeClient.startCommitWithTime(firstCommitTime);\n  metaClient = HoodieTableMetaClient.reload(metaClient);\n\n  String partitionPath = \"2016/01/31\";\n  HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n\n  // Get some records belong to the same partition (2016/01/31)\n  String recordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":12}\";\n  String recordStr2 = \"{\\\"_row_key\\\":\\\"8eb5b87b-1feu-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:20:41.415Z\\\",\\\"number\\\":100}\";\n  String recordStr3 = \"{\\\"_row_key\\\":\\\"8eb5b87c-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n  String recordStr4 = \"{\\\"_row_key\\\":\\\"8eb5b87d-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":51}\";\n\n  List<HoodieRecord> records = new ArrayList<>();\n  RawTripTestPayload rowChange1 = new RawTripTestPayload(recordStr1);\n  records.add(new HoodieRecord(new HoodieKey(rowChange1.getRowKey(), rowChange1.getPartitionPath()), rowChange1));\n  RawTripTestPayload rowChange2 = new RawTripTestPayload(recordStr2);\n  records.add(new HoodieRecord(new HoodieKey(rowChange2.getRowKey(), rowChange2.getPartitionPath()), rowChange2));\n  RawTripTestPayload rowChange3 = new RawTripTestPayload(recordStr3);\n  records.add(new HoodieRecord(new HoodieKey(rowChange3.getRowKey(), rowChange3.getPartitionPath()), rowChange3));\n\n  // Insert new records\n  final HoodieSparkCopyOnWriteTable cowTable = table;\n  writeClient.insert(jsc.parallelize(records, 1), firstCommitTime);\n\n  FileStatus[] allFiles = getIncrementalFiles(partitionPath, \"0\", -1);\n  assertEquals(1, allFiles.length);\n\n  // Read out the bloom filter and make sure filter can answer record exist or not\n  Path parquetFilePath = allFiles[0].getPath();\n  BloomFilter filter = ParquetUtils.readBloomFilterFromParquetMetadata(hadoopConf, parquetFilePath);\n  for (HoodieRecord record : records) {\n    assertTrue(filter.mightContain(record.getRecordKey()));\n  }\n\n  // Read the parquet file, check the record content\n  List<GenericRecord> fileRecords = ParquetUtils.readAvroRecords(hadoopConf, parquetFilePath);\n  GenericRecord newRecord;\n  int index = 0;\n  for (GenericRecord record : fileRecords) {\n    //System.out.println(\"Got :\" + record.get(\"_row_key\").toString() + \", Exp :\" + records.get(index).getRecordKey());\n    assertEquals(records.get(index).getRecordKey(), record.get(\"_row_key\").toString());\n    index++;\n  }\n\n  // We update the 1st record & add a new record\n  String updateRecordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n      + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n  RawTripTestPayload updateRowChanges1 = new RawTripTestPayload(updateRecordStr1);\n  HoodieRecord updatedRecord1 = new HoodieRecord(\n      new HoodieKey(updateRowChanges1.getRowKey(), updateRowChanges1.getPartitionPath()), updateRowChanges1);\n\n  RawTripTestPayload rowChange4 = new RawTripTestPayload(recordStr4);\n  HoodieRecord insertedRecord1 =\n      new HoodieRecord(new HoodieKey(rowChange4.getRowKey(), rowChange4.getPartitionPath()), rowChange4);\n\n  List<HoodieRecord> updatedRecords = Arrays.asList(updatedRecord1, insertedRecord1);\n\n  Thread.sleep(1000);\n  String newCommitTime = makeNewCommitTime();\n  metaClient = HoodieTableMetaClient.reload(metaClient);\n  writeClient.startCommitWithTime(newCommitTime);\n  List<WriteStatus> statuses = writeClient.upsert(jsc.parallelize(updatedRecords), newCommitTime).collect();\n\n  allFiles = getIncrementalFiles(partitionPath, firstCommitTime, -1);\n  assertEquals(1, allFiles.length);\n  // verify new incremental file group is same as the previous one\n  assertEquals(FSUtils.getFileId(parquetFilePath.getName()), FSUtils.getFileId(allFiles[0].getPath().getName()));\n\n  // Check whether the record has been updated\n  Path updatedParquetFilePath = allFiles[0].getPath();\n  BloomFilter updatedFilter =\n      ParquetUtils.readBloomFilterFromParquetMetadata(hadoopConf, updatedParquetFilePath);\n  for (HoodieRecord record : records) {\n    // No change to the _row_key\n    assertTrue(updatedFilter.mightContain(record.getRecordKey()));\n  }\n\n  assertTrue(updatedFilter.mightContain(insertedRecord1.getRecordKey()));\n  records.add(insertedRecord1);// add this so it can further check below\n\n  ParquetReader updatedReader = ParquetReader.builder(new AvroReadSupport<>(), updatedParquetFilePath).build();\n  index = 0;\n  while ((newRecord = (GenericRecord) updatedReader.read()) != null) {\n    assertEquals(newRecord.get(\"_row_key\").toString(), records.get(index).getRecordKey());\n    if (index == 0) {\n      assertEquals(\"15\", newRecord.get(\"number\").toString());\n    }\n    index++;\n  }\n  updatedReader.close();\n  // Also check the numRecordsWritten\n  WriteStatus writeStatus = statuses.get(0);\n  assertEquals(1, statuses.size(), \"Should be only one file generated\");\n  assertEquals(4, writeStatus.getStat().getNumWrites());// 3 rewritten records + 1 new record\n}", "path": "hudi/hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/table/action/commit/TestCopyOnWriteActionExecutor.java", "commit_date": "2020-10-19 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Check for equality of views.\n *\n * @param view1 View1\n * @param view2 View2\n */\n", "func_signal": "private void areViewsConsistent(SyncableFileSystemView view1, SyncableFileSystemView view2,\n    long expectedTotalFileSlices)", "code": "{\n  // Timeline check\n  assertEquals(view1.getLastInstant(), view2.getLastInstant());\n\n  // View Checks\n  Map<HoodieFileGroupId, HoodieFileGroup> fileGroupsMap1 = partitions.stream().flatMap(view1::getAllFileGroups)\n      .collect(Collectors.toMap(HoodieFileGroup::getFileGroupId, fg -> fg));\n  Map<HoodieFileGroupId, HoodieFileGroup> fileGroupsMap2 = partitions.stream().flatMap(view2::getAllFileGroups)\n      .collect(Collectors.toMap(HoodieFileGroup::getFileGroupId, fg -> fg));\n  assertEquals(fileGroupsMap1.keySet(), fileGroupsMap2.keySet());\n  long gotSlicesCount = fileGroupsMap1.keySet().stream()\n      .map(k -> Pair.of(fileGroupsMap1.get(k), fileGroupsMap2.get(k))).mapToLong(e -> {\n        HoodieFileGroup fg1 = e.getKey();\n        HoodieFileGroup fg2 = e.getValue();\n        assertEquals(fg1.getFileGroupId(), fg2.getFileGroupId());\n        List<FileSlice> slices1 = fg1.getAllRawFileSlices().collect(Collectors.toList());\n        List<FileSlice> slices2 = fg2.getAllRawFileSlices().collect(Collectors.toList());\n        assertEquals(slices1.size(), slices2.size());\n        IntStream.range(0, slices1.size()).mapToObj(idx -> Pair.of(slices1.get(idx), slices2.get(idx)))\n            .forEach(e2 -> {\n              FileSlice slice1 = e2.getKey();\n              FileSlice slice2 = e2.getValue();\n              assertEquals(slice1.getBaseInstantTime(), slice2.getBaseInstantTime());\n              assertEquals(slice1.getFileId(), slice2.getFileId());\n              assertEquals(slice1.getBaseFile().isPresent(), slice2.getBaseFile().isPresent());\n              if (slice1.getBaseFile().isPresent()) {\n                HoodieBaseFile df1 = slice1.getBaseFile().get();\n                HoodieBaseFile df2 = slice2.getBaseFile().get();\n                assertEquals(df1.getCommitTime(), df2.getCommitTime());\n                assertEquals(df1.getFileId(), df2.getFileId());\n                assertEquals(df1.getFileName(), df2.getFileName());\n                assertEquals(Path.getPathWithoutSchemeAndAuthority(new Path(df1.getPath())),\n                    Path.getPathWithoutSchemeAndAuthority(new Path(df2.getPath())));\n              }\n              List<Path> logPaths1 = slice1.getLogFiles()\n                  .map(lf -> Path.getPathWithoutSchemeAndAuthority(lf.getPath())).collect(Collectors.toList());\n              List<Path> logPaths2 = slice2.getLogFiles()\n                  .map(lf -> Path.getPathWithoutSchemeAndAuthority(lf.getPath())).collect(Collectors.toList());\n              assertEquals(logPaths1, logPaths2);\n            });\n        return slices1.size();\n      }).sum();\n  assertEquals(expectedTotalFileSlices, gotSlicesCount);\n\n  // Pending Compaction Operations Check\n  Set<Pair<String, CompactionOperation>> ops1 = view1.getPendingCompactionOperations().collect(Collectors.toSet());\n  Set<Pair<String, CompactionOperation>> ops2 = view2.getPendingCompactionOperations().collect(Collectors.toSet());\n  assertEquals(ops1, ops2);\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * API to let the table know writing is over and reading is going to start.\n */\n", "func_signal": "public Table flip()", "code": "{\n  this.finishedAdding = true;\n  sortAndLimit();\n  return this;\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/*\n ********************************************************************************************************\n * HELPER METHODS\n *********************************************************************************************************\n */\n/**\n * Helper to run one or more rounds of cleaning, incrementally syncing the view and then validate.\n */\n", "func_signal": "private void testCleans(SyncableFileSystemView view, List<String> newCleanerInstants,\n    Map<String, List<String>> instantsToFiles, List<String> cleanedInstants, int numberOfFilesAddedPerInstant,\n    int numberOfFilesReplacedPerInstant)", "code": "{\n  Map<String, List<String>> deltaInstantMap = cleanedInstants.stream().map(e -> Pair.of(e, new ArrayList()))\n      .collect(Collectors.toMap(Pair::getKey, Pair::getValue));\n  testCleans(view, newCleanerInstants, deltaInstantMap, instantsToFiles, cleanedInstants, numberOfFilesAddedPerInstant, numberOfFilesReplacedPerInstant);\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Sorting of rows by a specified field.\n * \n * @return\n */\n", "func_signal": "private List<List<Comparable>> orderRows()", "code": "{\n  return orderingFieldNameOptional.map(orderingColumnName -> {\n    return rawRows.stream().sorted((row1, row2) -> {\n      Comparable fieldForRow1 = row1.get(rowHeader.indexOf(orderingColumnName));\n      Comparable fieldForRow2 = row2.get(rowHeader.indexOf(orderingColumnName));\n      int cmpRawResult = fieldForRow1.compareTo(fieldForRow2);\n      return isDescendingOptional.map(isDescending -> isDescending ? -1 * cmpRawResult : cmpRawResult).orElse(cmpRawResult);\n    }).collect(Collectors.toList());\n  }).orElse(rawRows);\n}", "path": "hudi/hudi-cli/src/main/java/org/apache/hudi/cli/Table.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Perform one or more rounds of ingestion/compaction and validate incremental timeline syncing.\n *\n * @param view Hoodie View\n * @param instants Ingestion/Commit INstants\n * @param deltaCommit Delta COmmit ?\n * @param baseInstantForDeltaCommit Base Instant to be used in case of delta-commit\n * @param begin initial file-slice offset\n * @return List of new file created\n */\n", "func_signal": "private Map<String, List<String>> testMultipleWriteSteps(SyncableFileSystemView view, List<String> instants,\n    boolean deltaCommit, String baseInstantForDeltaCommit, int begin) throws IOException", "code": "{\n  return testMultipleWriteSteps(view, instants, deltaCommit, baseInstantForDeltaCommit, begin,\n      instants.stream()\n          .map(i -> new HoodieInstant(State.COMPLETED,\n              deltaCommit ? HoodieTimeline.DELTA_COMMIT_ACTION : HoodieTimeline.COMMIT_ACTION, i))\n          .collect(Collectors.toList()));\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Compares the min record key of two nodes, followed by max record key.\n *\n * @param that the {@link KeyRangeNode} to be compared with\n * @return the result of comparison. 0 if both min and max are equal in both. 1 if this {@link KeyRangeNode} is\n * greater than the {@code that} keyRangeNode. -1 if {@code that} keyRangeNode is greater than this {@link\n * KeyRangeNode}\n */\n", "func_signal": "@Override\npublic int compareTo(KeyRangeNode that)", "code": "{\n  int compareValue = minRecordKey.compareTo(that.minRecordKey);\n  if (compareValue == 0) {\n    return maxRecordKey.compareTo(that.maxRecordKey);\n  } else {\n    return compareValue;\n  }\n}", "path": "hudi/hudi-client/hudi-client-common/src/main/java/org/apache/hudi/index/bloom/KeyRangeNode.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Unschedule a compaction instant and validate incremental fs view.\n *\n * @param view Hoodie View\n * @param compactionInstantTime Compaction Instant to be removed\n * @param newLastInstant New Last instant\n * @param newBaseInstant New Base instant of last file-slice\n */\n", "func_signal": "private void unscheduleCompaction(SyncableFileSystemView view, String compactionInstantTime, String newLastInstant,\n    String newBaseInstant) throws IOException", "code": "{\n  HoodieInstant instant = new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, compactionInstantTime);\n  boolean deleted = metaClient.getFs().delete(new Path(metaClient.getMetaPath(), instant.getFileName()), false);\n  ValidationUtils.checkArgument(deleted, \"Unable to delete compaction instant.\");\n\n  view.sync();\n  assertEquals(newLastInstant, view.getLastInstant().get().getTimestamp());\n  partitions.forEach(p -> view.getLatestFileSlices(p).forEach(fs -> assertEquals(newBaseInstant, fs.getBaseInstantTime())));\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Perform one or more rounds of ingestion/compaction and validate incremental timeline syncing.\n *\n * @param view Hoodie View\n * @param instants Ingestion/Commit INstants\n * @param deltaCommit Delta COmmit ?\n * @param baseInstantForDeltaCommit Base Instant to be used in case of delta-commit\n * @param begin initial file-slice offset\n * @param lastInstants List of Last Instants at each time we ingest/compact\n * @return List of new file created\n */\n", "func_signal": "private Map<String, List<String>> testMultipleWriteSteps(SyncableFileSystemView view, List<String> instants,\n    boolean deltaCommit, String baseInstantForDeltaCommit, int begin, List<HoodieInstant> lastInstants)\n    throws IOException", "code": "{\n  Map<String, List<String>> instantToFiles = new HashMap<>();\n\n  int multiple = begin;\n  for (int idx = 0; idx < instants.size(); idx++) {\n    String instant = instants.get(idx);\n    LOG.info(\"Adding instant=\" + instant);\n    HoodieInstant lastInstant = lastInstants.get(idx);\n    // Add a non-empty ingestion to COW table\n    List<String> filePaths =\n        addInstant(metaClient, instant, deltaCommit, deltaCommit ? baseInstantForDeltaCommit : instant);\n    view.sync();\n    assertTrue(view.getLastInstant().isPresent());\n    assertEquals(lastInstant.getTimestamp(), view.getLastInstant().get().getTimestamp());\n    assertEquals(State.COMPLETED, view.getLastInstant().get().getState());\n    assertEquals(lastInstant.getAction(), view.getLastInstant().get().getAction(),\n        \"Expected Last=\" + lastInstant + \", Found Instants=\"\n            + view.getTimeline().getInstants().collect(Collectors.toList()));\n    partitions.forEach(p -> assertEquals(fileIdsPerPartition.size(), view.getLatestFileSlices(p).count()));\n    final long expTotalFileSlicesPerPartition = fileIdsPerPartition.size() * multiple;\n    partitions.forEach(p -> assertEquals(expTotalFileSlicesPerPartition, view.getAllFileSlices(p).count()));\n    if (deltaCommit) {\n      partitions.forEach(p ->\n          view.getLatestFileSlices(p).forEach(f -> assertEquals(baseInstantForDeltaCommit, f.getBaseInstantTime()))\n      );\n    } else {\n      partitions.forEach(p -> view.getLatestBaseFiles(p).forEach(f -> assertEquals(instant, f.getCommitTime())));\n    }\n\n    metaClient.reloadActiveTimeline();\n    SyncableFileSystemView newView = getFileSystemView(metaClient);\n    areViewsConsistent(view, newView, fileIdsPerPartition.size() * partitions.size() * multiple);\n    instantToFiles.put(instant, filePaths);\n    if (!deltaCommit) {\n      multiple++;\n    }\n  }\n  return instantToFiles;\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * Simulate Restore of an instant in timeline and fsview.\n *\n * @param instant Instant to be rolled-back\n * @param files List of files to be deleted as part of rollback\n * @param rollbackInstant Restore Instant\n */\n", "func_signal": "private void performRestore(HoodieInstant instant, List<String> files, String rollbackInstant,\n    boolean isRestore) throws IOException", "code": "{\n  Map<String, List<String>> partititonToFiles = deleteFiles(files);\n  List<HoodieRollbackStat> rollbackStats = partititonToFiles.entrySet().stream().map(e ->\n      new HoodieRollbackStat(e.getKey(), e.getValue(), new ArrayList<>(), new HashMap<>())\n  ).collect(Collectors.toList());\n\n  List<HoodieInstant> rollbacks = new ArrayList<>();\n  rollbacks.add(instant);\n\n  HoodieRollbackMetadata rollbackMetadata =\n      TimelineMetadataUtils.convertRollbackMetadata(rollbackInstant, Option.empty(), rollbacks, rollbackStats);\n  if (isRestore) {\n    List<HoodieRollbackMetadata> rollbackM = new ArrayList<>();\n    rollbackM.add(rollbackMetadata);\n    HoodieRestoreMetadata metadata = TimelineMetadataUtils.convertRestoreMetadata(rollbackInstant,\n        100, Collections.singletonList(instant), CollectionUtils.createImmutableMap(rollbackInstant, rollbackM));\n\n    HoodieInstant restoreInstant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, rollbackInstant);\n    metaClient.getActiveTimeline().createNewInstant(restoreInstant);\n    metaClient.getActiveTimeline().saveAsComplete(restoreInstant, TimelineMetadataUtils.serializeRestoreMetadata(metadata));\n  } else {\n    metaClient.getActiveTimeline().createNewInstant(\n        new HoodieInstant(true, HoodieTimeline.ROLLBACK_ACTION, rollbackInstant));\n    metaClient.getActiveTimeline().saveAsComplete(\n        new HoodieInstant(true, HoodieTimeline.ROLLBACK_ACTION, rollbackInstant),\n        TimelineMetadataUtils.serializeRollbackMetadata(rollbackMetadata));\n  }\n  boolean deleted = metaClient.getFs().delete(new Path(metaClient.getMetaPath(), instant.getFileName()), false);\n  assertTrue(deleted);\n}", "path": "hudi/hudi-common/src/test/java/org/apache/hudi/common/table/view/TestIncrementalFSViewSync.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "apache/hudi", "stars": 4973, "license": "apache-2.0", "language": "java", "size": 1066353}
{"docstring": "/**\n * \u540c\u540d API \u517c\u5bb9\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.M)\n@Override\npublic void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error)", "code": "{\n    if (request.isForMainFrame()) {\n        onReceivedError(view,\n                error.getErrorCode(), error.getDescription().toString(),\n                request.getUrl().toString());\n    }\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u8bbe\u7f6e\u6700\u5927\u9009\u62e9\u6570\u91cf\n */\n", "func_signal": "public Builder setMaxSelect(int count)", "code": "{\n    mAdapter.setMaxSelect(count);\n    return this;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * {@link BottomNavigationView.OnNavigationItemSelectedListener}\n */\n", "func_signal": "@Override\npublic boolean onNavigationItemSelected(@NonNull MenuItem item)", "code": "{\n    switch (item.getItemId()) {\n        case R.id.menu_home:\n            mViewPager.setCurrentItem(0);\n            return true;\n        case R.id.home_found:\n            mViewPager.setCurrentItem(1);\n            return true;\n        case R.id.home_message:\n            mViewPager.setCurrentItem(2);\n            return true;\n        case R.id.home_me:\n            mViewPager.setCurrentItem(3);\n            return true;\n        default:\n            break;\n    }\n    return false;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/activity/HomeActivity.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u8bbe\u7f6e\u6700\u5c0f\u9009\u62e9\u6570\u91cf\n */\n", "func_signal": "public Builder setMinSelect(int count)", "code": "{\n    mAdapter.setMinSelect(count);\n    return this;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * {@link BaseAdapter.OnItemClickListener}\n */\n", "func_signal": "@SuppressWarnings(\"all\")\n@Override\npublic void onItemClick(RecyclerView recyclerView, View itemView, int position)", "code": "{\n    if (mAutoDismiss) {\n        dismiss();\n    }\n\n    if (mListener != null) {\n        mListener.onSelected(getDialog(), position, mAdapter.getItem(position));\n    }\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u8bbe\u7f6e\u5355\u9009\u6a21\u5f0f\n */\n", "func_signal": "public Builder setSingleSelect()", "code": "{\n    mAdapter.setSingleSelect();\n    return this;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u7f51\u9875\u5f39\u51fa\u8b66\u544a\u6846\n */\n", "func_signal": "@Override\npublic boolean onJsAlert(WebView view, String url, String message, JsResult result)", "code": "{\n    new HintDialog.Builder(mWebView.getContext())\n            .setIcon(HintDialog.ICON_WARNING)\n            .setMessage(message)\n            .addOnDismissListener(dialog -> result.confirm())\n            .show();\n    return true;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7684 url\n *\n * @return      \u8fd4\u56de\u539f\u59cb\u7684 url\uff0c\u56e0\u4e3a\u6709\u4e9burl\u662f\u88abWebView\u89e3\u7801\u8fc7\u7684\n */\n", "func_signal": "@Override\npublic String getUrl()", "code": "{\n    String originalUrl = super.getOriginalUrl();\n    // \u907f\u514d\u5f00\u59cb\u65f6\u540c\u65f6\u52a0\u8f7d\u4e24\u4e2a\u5730\u5740\u800c\u5bfc\u81f4\u7684\u5d29\u6e83\n    if (originalUrl != null) {\n        return originalUrl;\n    }\n    return super.getUrl();\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * {@link BaseAdapter.OnItemClickListener}\n */\n", "func_signal": "@Override\npublic void onItemClick(RecyclerView recyclerView, View itemView, int position)", "code": "{\n    if (mSelectSet.containsKey(position)) {\n        // \u5f53\u524d\u5fc5\u987b\u4e0d\u662f\u5355\u9009\u6a21\u5f0f\u624d\u80fd\u53d6\u6d88\u9009\u4e2d\n        if (!isSingleSelect()) {\n            mSelectSet.remove(position);\n            notifyItemChanged(position);\n        }\n    } else {\n        if (mMaxSelect == 1) {\n            mSelectSet.clear();\n            notifyDataSetChanged();\n        }\n\n        if (mSelectSet.size() < mMaxSelect) {\n            mSelectSet.put(position, getItem(position));\n            notifyItemChanged(position);\n        } else {\n            ToastUtils.show(String.format(getString(R.string.select_max_hint), mMaxSelect));\n        }\n    }\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * {@link BaseAdapter.OnItemClickListener}\n */\n", "func_signal": "@Override\npublic void onItemClick(RecyclerView recyclerView, View itemView, int position)", "code": "{\n    switch (mAdapter.getItemViewType(position)) {\n        case KeyboardAdapter.TYPE_DELETE:\n            // \u70b9\u51fb\u56de\u9000\u6309\u94ae\u5220\u9664\n            if (mRecordList.size() != 0) {\n                mRecordList.removeLast();\n            }\n            break;\n        case KeyboardAdapter.TYPE_EMPTY:\n            // \u70b9\u51fb\u7a7a\u767d\u7684\u5730\u65b9\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\n            break;\n        default:\n            // \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5df2\u7ecf\u8f93\u5165\u5b8c\u6bd5\n            if (mRecordList.size() < PasswordView.PASSWORD_COUNT) {\n                // \u70b9\u51fb\u6570\u5b57\uff0c\u663e\u793a\u5728\u5bc6\u7801\u884c\n                mRecordList.add(KEYBOARD_TEXT[position]);\n            }\n\n            // \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5df2\u7ecf\u8f93\u5165\u5b8c\u6bd5\n            if (mRecordList.size() == PasswordView.PASSWORD_COUNT) {\n                if (mListener != null) {\n                    postDelayed(() -> {\n\n                        if (mAutoDismiss) {\n                            dismiss();\n                        }\n                        // \u83b7\u53d6\u8f93\u5165\u7684\u652f\u4ed8\u5bc6\u7801\n                        StringBuilder password = new StringBuilder();\n                        for (String s : mRecordList) {\n                            password.append(s);\n                        }\n                        mListener.onCompleted(getDialog(), password.toString());\n\n                    }, 300);\n                }\n            }\n            break;\n    }\n    mPasswordView.setPassWordLength(mRecordList.size());\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u6253\u5f00\u7cfb\u7edf\u6587\u4ef6\u9009\u62e9\u5668\n */\n", "func_signal": "private void openSystemFileChooser(BaseActivity activity, ValueCallback<Uri[]> callback, FileChooserParams params)", "code": "{\n    Intent intent = params.createIntent();\n    String[] mimeTypes = params.getAcceptTypes();\n    if (mimeTypes != null && mimeTypes.length > 0 && mimeTypes[0] != null && !\"\".equals(mimeTypes[0])) {\n        // \u8bbe\u7f6e\u8981\u8fc7\u6ee4\u7684\u6587\u4ef6\u7c7b\u578b\n        intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);\n    }\n    // \u8bbe\u7f6e\u662f\u5426\u662f\u591a\u9009\u6a21\u5f0f\n    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, params.getMode() == FileChooserParams.MODE_OPEN_MULTIPLE);\n    activity.startActivityForResult(Intent.createChooser(intent, params.getTitle()), (resultCode, data) -> {\n        Uri[] uris = null;\n        if (resultCode == Activity.RESULT_OK && data != null) {\n            Uri uri = data.getData();\n            if (uri != null) {\n                // \u5982\u679c\u7528\u6237\u53ea\u9009\u62e9\u4e86\u4e00\u4e2a\u6587\u4ef6\n                uris = new Uri[]{uri};\n            } else {\n                // \u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u591a\u4e2a\u6587\u4ef6\n                ClipData clipData = data.getClipData();\n                if (clipData != null) {\n                    uris = new Uri[clipData.getItemCount()];\n                    for (int i = 0; i < clipData.getItemCount(); i++) {\n                        uris[i] = clipData.getItemAt(i).getUri();\n                    }\n                }\n            }\n        }\n        // \u4e0d\u7ba1\u7528\u6237\u6700\u540e\u6709\u6ca1\u6709\u9009\u62e9\u6587\u4ef6\uff0c\u6700\u540e\u8fd8\u662f\u8c03\u7528 onReceiveValue\uff0c\u5982\u679c\u6ca1\u6709\u8c03\u7528\u5c31\u4f1a\u5bfc\u81f4\u7f51\u9875\u518d\u6b21\u4e0a\u4f20\u65e0\u54cd\u5e94\n        callback.onReceiveValue(uris);\n    });\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u5176\u4ed6\u94fe\u63a5\n */\n", "func_signal": "@Override\npublic boolean shouldOverrideUrlLoading(WebView view, final String url)", "code": "{\n    String scheme = Uri.parse(url).getScheme();\n    if (scheme != null) {\n        scheme = scheme.toLowerCase();\n    }\n    if (\"http\".equalsIgnoreCase(scheme) || \"https\".equalsIgnoreCase(scheme)) {\n        view.loadUrl(url);\n    }\n    // \u5df2\u7ecf\u5904\u7406\u8be5\u94fe\u63a5\u8bf7\u6c42\n    return true;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u8bbe\u7f6e\u9ed8\u8ba4\u9009\u4e2d\u7684\u4f4d\u7f6e\n */\n", "func_signal": "public Builder setSelect(int... positions)", "code": "{\n    mAdapter.setSelect(positions);\n    return this;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * {@link View.OnLayoutChangeListener}\n */\n", "func_signal": "@Override\npublic void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom)", "code": "{\n    mRecyclerView.removeOnLayoutChangeListener(this);\n    // \u8fd9\u91cc\u4e00\u5b9a\u8981\u52a0\u5ef6\u8fdf\uff0c\u5982\u679c\u4e0d\u52a0\u5728 Android 9.0 \u4e0a\u9762\u4f1a\u5bfc\u81f4 setLayoutParams \u65e0\u6548\n    post(this);\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/ui/dialog/MenuDialog.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u5728\u8fde\u63a5\u70b9\u8fdb\u884c\u65b9\u6cd5\u66ff\u6362\n */\n", "func_signal": "@Around(\"method() && @annotation(permissions)\")\npublic void aroundJoinPoint(final ProceedingJoinPoint joinPoint, Permissions permissions)", "code": "{\n    Activity activity = ActivityStackManager.getInstance().getTopActivity();\n    if (activity == null || activity.isFinishing() || activity.isDestroyed()) {\n        return;\n    }\n    XXPermissions.with(activity)\n            .permission(permissions.value())\n            .request(new OnPermission() {\n\n                @Override\n                public void hasPermission(List<String> granted, boolean all) {\n                    if (all) {\n                        try {\n                            // \u83b7\u5f97\u6743\u9650\uff0c\u6267\u884c\u539f\u65b9\u6cd5\n                            joinPoint.proceed();\n                        } catch (Throwable e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n\n                @Override\n                public void noPermission(List<String> denied, boolean quick) {\n                    if (quick) {\n                        ToastUtils.show(R.string.common_permission_fail);\n                        XXPermissions.startPermissionActivity(activity, false);\n                    } else {\n                        ToastUtils.show(R.string.common_permission_hint);\n                    }\n                }\n            });\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/aop/PermissionsAspect.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u7f51\u9875\u5f39\u51fa\u786e\u5b9a\u53d6\u6d88\u6846\n */\n", "func_signal": "@Override\npublic boolean onJsConfirm(WebView view, String url, String message, JsResult result)", "code": "{\n    new MessageDialog.Builder(mWebView.getContext())\n            .setMessage(message)\n            .setCancelable(false)\n            .setListener(new MessageDialog.OnListener() {\n\n                @Override\n                public void onConfirm(BaseDialog dialog) {\n                    result.confirm();\n                }\n\n                @Override\n                public void onCancel(BaseDialog dialog) {\n                    result.cancel();\n                }\n            })\n            .show();\n    return true;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u4fee\u590d\u539f\u751f WebView \u548c AndroidX \u5728 Android 5.x \u4e0a\u9762\u5d29\u6e83\u7684\u95ee\u9898\n *\n * doc\uff1ahttps://stackoverflow.com/questions/41025200/android-view-inflateexception-error-inflating-class-android-webkit-webview\n */\n", "func_signal": "public static Context getFixedContext(Context context)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n        // \u8fd9\u79cd\u5199\u6cd5\u8fd4\u56de\u7684 Context \u662f ContextImpl\uff0c\u800c\u4e0d\u662f Activity \u6216\u8005 ContextWrapper\n        // \u4e3a\u4ec0\u4e48\u4e0d\u7528 ContextImpl\uff0c\u56e0\u4e3a\u4f7f\u7528 ContextImpl \u83b7\u53d6\u4e0d\u5230 Activity \u5bf9\u8c61\uff0c\u800c ContextWrapper \u53ef\u4ee5\n        // return context.createConfigurationContext(new Configuration());\n        // \u5982\u679c\u4f7f\u7528 ContextWrapper \u8fd8\u662f\u5bfc\u81f4\u5d29\u6e83\uff0c\u56e0\u4e3a Resources \u5bf9\u8c61\u51b2\u7a81\u4e86\n        // return new ContextWrapper(context);\n        // \u5982\u679c\u4f7f\u7528 ContextThemeWrapper \u5c31\u6ca1\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u91cd\u5199\u4e86 getResources \u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 Resources \u5bf9\u8c61\n        return new ContextThemeWrapper(context, context.getTheme());\n    }\n    return context;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u5728\u8fde\u63a5\u70b9\u8fdb\u884c\u65b9\u6cd5\u66ff\u6362\n */\n", "func_signal": "@Around(\"method() && @annotation(singleClick)\")\npublic void aroundJoinPoint(ProceedingJoinPoint joinPoint, SingleClick singleClick) throws Throwable", "code": "{\n    View view = null;\n    for (Object arg : joinPoint.getArgs()) {\n        if (arg instanceof View) {\n            view = (View) arg;\n        }\n    }\n    if (view != null) {\n        long currentTime = Calendar.getInstance().getTimeInMillis();\n        if (currentTime - mLastTime < singleClick.value() && view.getId()\n                == mLastId) {\n            Log.i(\"SingleClick\", \"\u53d1\u751f\u5feb\u901f\u70b9\u51fb\");\n            return;\n        }\n        mLastTime = currentTime;\n        mLastId = view.getId();\n        //\u6267\u884c\u539f\u65b9\u6cd5\n        joinPoint.proceed();\n    }\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/aop/SingleClickAspect.java", "commit_date": "2020-02-02 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u7f51\u9875\u5f39\u51fa\u8f93\u5165\u6846\n */\n", "func_signal": "@Override\npublic boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)", "code": "{\n    new InputDialog.Builder(mWebView.getContext())\n            .setContent(defaultValue)\n            .setHint(message)\n            .setListener(new InputDialog.OnListener() {\n\n                @Override\n                public void onConfirm(BaseDialog dialog, String content) {\n                    result.confirm(content);\n                }\n\n                @Override\n                public void onCancel(BaseDialog dialog) {\n                    result.cancel();\n                }\n            })\n            .show();\n    return true;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "/**\n * \u7f51\u9875\u5f39\u51fa\u9009\u62e9\u6587\u4ef6\u8bf7\u6c42\uff08\u6d4b\u8bd5\u5730\u5740\uff1ahttps://app.xunjiepdf.com/jpg2pdf/\u3001http://www.script-tutorials.com/demos/199/index.html\uff09\n *\n * @param callback              \u6587\u4ef6\u9009\u62e9\u56de\u8c03\n * @param params                \u6587\u4ef6\u9009\u62e9\u53c2\u6570\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.LOLLIPOP)\n@Override\npublic boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> callback, FileChooserParams params)", "code": "{\n    Activity activity = mWebView.getActivity();\n    if (activity instanceof BaseActivity) {\n        XXPermissions.with(activity)\n                .permission(Permission.Group.STORAGE)\n                .request(new OnPermission() {\n                    @Override\n                    public void hasPermission(List<String> granted, boolean all) {\n                        if (all) {\n                            openSystemFileChooser((BaseActivity) activity, callback, params);\n                        } else {\n                            callback.onReceiveValue(null);\n                        }\n                    }\n\n                    @Override\n                    public void noPermission(List<String> denied, boolean quick) {\n                        callback.onReceiveValue(null);\n                        if (quick) {\n                            ToastUtils.show(R.string.common_permission_fail);\n                            XXPermissions.startPermissionActivity(activity, false);\n                        } else {\n                            ToastUtils.show(R.string.common_permission_hint);\n                        }\n                    }\n                });\n    }\n    return true;\n}", "path": "AndroidProject/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "getActivity/AndroidProject", "stars": 6129, "license": "apache-2.0", "language": "java", "size": 89374}
{"docstring": "//\u91ca\u653e\u8d44\u6e90\uff0c\u5c06\u6570\u636e\u5e93\u8fde\u63a5\u8fd8\u7ed9\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n", "func_signal": "public static void closeDB(Connection conn, PreparedStatement ps)", "code": "{\n    LOG.debug(\"Thread {} release db connection {}\", Thread.currentThread().getId(), conn);\n     try {\n        if (ps!=null) {\n            ps.close();\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n         Utility.printExecption(LOG, e);\n    }\n\n    try {\n        if (conn!=null && transactionConnection.get() != conn) {\n            conn.close();\n            map.remove(Thread.currentThread().getId());\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n        Utility.printExecption(LOG, e);\n    }\n}", "path": "im-server/broker/src/main/java/win/liyufan/im/DBUtil.java", "commit_date": "2020-04-15 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * @param name \u53c2\u6570\u540d\n * @param defaultValue \u5f53\u5ba2\u6237\u7aef\u672a\u4f20\u53c2\u7684\u9ed8\u8ba4\u503c\n * @return \u83b7\u5f97\u8bf7\u6c42\u53c2\u6570\n */\n", "func_signal": "public String getParam(String name, String defaultValue)", "code": "{\n\tString param = getParam(name);\n\treturn StrUtil.isBlank(param) ? defaultValue : param;\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u586b\u5145\u53c2\u6570\uff08POST\u8bf7\u6c42\u7684\u53c2\u6570\uff09\n * \n * @param decoder QueryStringDecoder\n */\n", "func_signal": "protected void putParams(HttpPostRequestDecoder decoder)", "code": "{\n\tif (null == decoder) {\n\t\treturn;\n\t}\n\t\n\tfor (InterfaceHttpData data : decoder.getBodyHttpDatas()) {\n\t\tputParam(data);\n\t}\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * Parse the configuration from file.\n *\n * @param file\n *            to parse\n * @return the collector of authorizations form reader passed into.\n * @throws ParseException\n *             if the format is not compliant.\n */\n", "func_signal": "public static AuthorizationsCollector parse(File file) throws ParseException", "code": "{\n    if (file == null) {\n        LOG.warn(\"parsing NULL file, so fallback on default configuration!\");\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n    if (!file.exists()) {\n        LOG.warn(\n                String.format(\n                        \"parsing not existing file %s, so fallback on default configuration!\",\n                        file.getAbsolutePath()));\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n    try {\n        FileReader reader = new FileReader(file);\n        return parse(reader);\n    } catch (FileNotFoundException fex) {\n        LOG.warn(\n                String.format(\n                        \"parsing not existing file %s, so fallback on default configuration!\",\n                        file.getAbsolutePath()),\n                fex);\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n}", "path": "im-server/broker/src/main/java/io/moquette/spi/impl/security/ACLFileParser.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "//\u91ca\u653e\u8d44\u6e90\uff0c\u5c06\u6570\u636e\u5e93\u8fde\u63a5\u8fd8\u7ed9\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n", "func_signal": "public static void closeDB(Connection conn,PreparedStatement ps,ResultSet rs)", "code": "{\n    LOG.debug(\"Thread {} release db connection {}\", Thread.currentThread().getId(), conn);\n    try {\n        if (rs!=null) {\n            rs.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        Utility.printExecption(LOG, e);\n    }\n\n    try {\n        if (ps!=null) {\n            ps.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        Utility.printExecption(LOG, e);\n    }\n\n    try {\n        if (conn!=null && transactionConnection.get() != conn) {\n            conn.close();\n            map.remove(Thread.currentThread().getId());\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        Utility.printExecption(LOG, e);\n    }\n}", "path": "im-server/broker/src/main/java/win/liyufan/im/DBUtil.java", "commit_date": "2020-04-15 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u64a4\u56de\u7fa4\u53d1\u6216\u8005\u5e7f\u64ad\u7684\u6d88\u606f\n * @param operator \u64cd\u4f5c\u8005\n * @param messageUid \u6d88\u606f\u552f\u4e00ID\n * @return\n * @throws Exception\n */\n", "func_signal": "public static IMResult<Void> recallBroadCastMessage(String operator, long messageUid) throws Exception", "code": "{\n    String path = APIPath.Msg_RecallBroadCast;\n    RecallMessageData messageData = new RecallMessageData();\n    messageData.setOperator(operator);\n    messageData.setMessageUid(messageUid);\n    return AdminHttpUtils.httpJsonPost(path, messageData, Void.class);\n}", "path": "im-server/sdk/src/main/java/cn/wildfirechat/sdk/MessageAdmin.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * @param name \u53c2\u6570\u540d\n * @param format \u683c\u5f0f\n * @param defaultValue \u5f53\u5ba2\u6237\u7aef\u672a\u4f20\u53c2\u7684\u9ed8\u8ba4\u503c\n * @return \u83b7\u5f97Date\u7c7b\u578b\u8bf7\u6c42\u53c2\u6570\n */\n", "func_signal": "public Date getDateParam(String name, String format, Date defaultValue)", "code": "{\n\tString param = getParam(name);\n\treturn StrUtil.isBlank(param) ? defaultValue : DateUtil.parse(param, format);\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u6784\u9020\n * \n * @param ctx ChannelHandlerContext\n * @param nettyRequest HttpRequest\n */\n", "func_signal": "private Request(ChannelHandlerContext ctx, FullHttpRequest nettyRequest)", "code": "{\n\tthis.nettyRequest = nettyRequest;\n\tfinal String uri = nettyRequest.uri();\n\tthis.path = URLUtil.getPath(getUri());\n\n\tthis.putHeadersAndCookies(nettyRequest.headers());\n\n\t// request URI parameters\n\tthis.putParams(new QueryStringDecoder(uri));\n\tif(nettyRequest.method() != HttpMethod.GET){\n\t\tHttpPostRequestDecoder decoder = null;\n\t\ttry {\n\t\t\tdecoder = new HttpPostRequestDecoder(HTTP_DATA_FACTORY, nettyRequest);\n\t\t\tthis.putParams(decoder);\n\t\t} finally {\n\t\t\tif(null != decoder){\n\t\t\t\tdecoder.destroy();\n\t\t\t\tdecoder = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t// IP\n\tthis.putIp(ctx);\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * @return \u662f\u5426\u4e3a\u957f\u8fde\u63a5\n */\n", "func_signal": "public boolean isKeepAlive()", "code": "{\n\tfinal String connectionHeader = getHeader(HttpHeaderNames.CONNECTION.toString());\n\t// \u65e0\u8bba\u4efb\u4f55\u7248\u672cConnection\u4e3aclose\u65f6\u90fd\u5173\u95ed\u8fde\u63a5\n\tif (HttpHeaderValues.CLOSE.toString().equalsIgnoreCase(connectionHeader)) {\n\t\treturn false;\n\t}\n\n\t// HTTP/1.0\u53ea\u6709Connection\u4e3aKeep-Alive\u65f6\u624d\u4f1a\u4fdd\u6301\u8fde\u63a5\n\tif (HttpVersion.HTTP_1_0.text().equals(getProtocolVersion())) {\n\t\tif (false == HttpHeaderValues.KEEP_ALIVE.toString().equalsIgnoreCase(connectionHeader)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t// HTTP/1.1\u9ed8\u8ba4\u6253\u5f00Keep-Alive\n\treturn true;\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u8bbe\u7f6e\u5ba2\u6237\u7aefIP\n * \n * @param ctx ChannelHandlerContext\n */\n", "func_signal": "protected void putIp(ChannelHandlerContext ctx)", "code": "{\n\tString ip = getHeader(\"X-Forwarded-For\");\n\tif (StrUtil.isNotBlank(ip)) {\n\t\tip = HttpUtil.getMultistageReverseProxyIp(ip);\n\t} else {\n\t\tfinal InetSocketAddress insocket = (InetSocketAddress) ctx.channel().remoteAddress();\n\t\tip = insocket.getAddress().getHostAddress();\n\t}\n\tthis.ip = ip;\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "//toUsers\u4e3a\u53d1\u9001\u7ed9\u4f1a\u8bdd\u4e2d\u90e8\u5206\u7528\u6237\u7528\u7684\uff0c\u6b63\u5e38\u4e3anull\uff0c\u4ec5\u5f53\u9700\u8981\u6307\u5b9a\u7fa4/\u9891\u9053/\u804a\u5929\u5ba4\u4e2d\u90e8\u5206\u63a5\u6536\u7528\u6237\u65f6\u4f7f\u7528\n", "func_signal": "public static IMResult<SendMessageResult> sendMessage(String sender, Conversation conversation, MessagePayload payload, List<String> toUsers) throws Exception", "code": "{\n    String path = APIPath.Msg_Send;\n    SendMessageData messageData = new SendMessageData();\n    messageData.setSender(sender);\n    messageData.setConv(conversation);\n    messageData.setPayload(payload);\n    messageData.setToUsers(toUsers);\n    return AdminHttpUtils.httpJsonPost(path, messageData, SendMessageResult.class);\n}", "path": "im-server/sdk/src/main/java/cn/wildfirechat/sdk/MessageAdmin.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "//\u4ece\u6570\u636e\u6e90\u4e2d\u83b7\u53d6\u6570\u636e\u5e93\u7684\u8fde\u63a5\n", "func_signal": "public static Connection getConnection() throws SQLException", "code": "{\n    long threadId = Thread.currentThread().getId();\n\n    if (map.get(threadId) != null) {\n        LOG.error(\"error here!!!! DB connection not close correctly\");\n    }\n    map.put(threadId, Thread.currentThread().getStackTrace().toString());\n    Connection connection = transactionConnection.get();\n    if (connection != null) {\n        LOG.debug(\"Thread {} get db connection {}\", threadId, connection);\n        return connection;\n    }\n\n    connection = comboPooledDataSource.getConnection();\n    LOG.debug(\"Thread {} get db connection {}\", threadId, connection);\n    return connection;\n}", "path": "im-server/broker/src/main/java/win/liyufan/im/DBUtil.java", "commit_date": "2020-04-15 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "// --------------------------------------------------------- Protected method end\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tfinal StringBuilder sb = new StringBuilder();\n\tsb.append(\"\\r\\nprotocolVersion: \").append(getProtocolVersion()).append(\"\\r\\n\");\n\tsb.append(\"uri: \").append(getUri()).append(\"\\r\\n\");\n\tsb.append(\"path: \").append(path).append(\"\\r\\n\");\n\tsb.append(\"method: \").append(getMethod()).append(\"\\r\\n\");\n\tsb.append(\"ip: \").append(ip).append(\"\\r\\n\");\n\tsb.append(\"headers:\\r\\n \");\n\tfor (Entry<String, String> entry : headers.entrySet()) {\n\t\tsb.append(\"    \").append(entry.getKey()).append(\": \").append(entry.getValue()).append(\"\\r\\n\");\n\t}\n\tsb.append(\"params: \\r\\n\");\n\tfor (Entry<String, Object> entry : params.entrySet()) {\n\t\tsb.append(\"    \").append(entry.getKey()).append(\": \").append(entry.getValue()).append(\"\\r\\n\");\n\t}\n\n\treturn sb.toString();\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * Parse the ACL configuration file\n *\n * @param reader\n *            to parse\n * @return the collector of authorizations form reader passed into.\n * @throws ParseException\n *             if the format is not compliant.\n */\n", "func_signal": "public static AuthorizationsCollector parse(Reader reader) throws ParseException", "code": "{\n    if (reader == null) {\n        // just log and return default properties\n        LOG.warn(\"parsing NULL reader, so fallback on default configuration!\");\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n\n    BufferedReader br = new BufferedReader(reader);\n    String line;\n    AuthorizationsCollector collector = new AuthorizationsCollector();\n\n    try {\n        while ((line = br.readLine()) != null) {\n            int commentMarker = line.indexOf('#');\n            if (commentMarker != -1) {\n                if (commentMarker == 0) {\n                    // skip its a comment\n                    continue;\n                } else {\n                    // it's a malformed comment\n                    throw new ParseException(line, commentMarker);\n                }\n            } else {\n                if (line.isEmpty() || line.matches(\"^\\\\s*$\")) {\n                    // skip it's a black line\n                    continue;\n                }\n\n                collector.parse(line);\n            }\n        }\n    } catch (IOException ex) {\n        throw new ParseException(\"Failed to read\", 1);\n    }\n    return collector;\n}", "path": "im-server/broker/src/main/java/io/moquette/spi/impl/security/ACLFileParser.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u83b7\u5f97GET\u8bf7\u6c42\u53c2\u6570<br>\n * \u4f1a\u6839\u636e\u6d4f\u89c8\u5668\u7c7b\u578b\u81ea\u52a8\u8bc6\u522bGET\u8bf7\u6c42\u7684\u7f16\u7801\u65b9\u5f0f\u4ece\u800c\u89e3\u7801<br>\n * charsetOfServlet\u4e3anull\u5219\u9ed8\u8ba4\u7684ISO_8859_1\n * \n * @param name \u53c2\u6570\u540d\n * @param charset \u5b57\u7b26\u96c6\n * @return \u83b7\u5f97\u8bf7\u6c42\u53c2\u6570\n */\n", "func_signal": "public String getParam(String name, Charset charset)", "code": "{\n\tif (null == charset) {\n\t\tcharset = Charset.forName(CharsetUtil.ISO_8859_1);\n\t}\n\n\tString destCharset = CharsetUtil.UTF_8;\n\tif (isIE()) {\n\t\t// IE\u6d4f\u89c8\u5668GET\u8bf7\u6c42\u4f7f\u7528GBK\u7f16\u7801\n\t\tdestCharset = CharsetUtil.GBK;\n\t}\n\n\tString value = getParam(name);\n\tif (METHOD_GET.equalsIgnoreCase(getMethod())) {\n\t\tvalue = CharsetUtil.convert(value, charset.toString(), destCharset);\n\t}\n\treturn value;\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * @param name \u53c2\u6570\u540d\n * @return \u83b7\u5f97\u8bf7\u6c42\u53c2\u6570\n */\n", "func_signal": "public String getParam(String name)", "code": "{\n\tfinal Object value = params.get(name);\n\tif(null == value){\n\t\treturn null;\n\t}\n\t\n\tif(value instanceof String){\n\t\treturn (String)value;\n\t}\n\treturn value.toString();\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u83b7\u5f97\u8bf7\u6c42\u53c2\u6570<br>\n * \u5217\u8868\u7c7b\u578b\u503c\uff0c\u5e38\u7528\u4e8e\u8868\u5355\u4e2d\u7684\u591a\u9009\u6846\n * \n * @param name \u53c2\u6570\u540d\n * @return \u6570\u7ec4\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<String> getArrayParam(String name)", "code": "{\n\tObject value = params.get(name);\n\tif(null == value){\n\t\treturn null;\n\t}\n\t\n\tif(value instanceof List){\n\t\treturn (List<String>) value;\n\t}else if(value instanceof String){\n\t\treturn StrUtil.split((String)value, ',');\n\t}else{\n\t\tthrow new RuntimeException(\"Value is not a List type!\");\n\t}\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * \u586b\u5145\u5934\u90e8\u4fe1\u606f\u548cCookie\u4fe1\u606f\n * \n * @param headers HttpHeaders\n */\n", "func_signal": "protected void putHeadersAndCookies(HttpHeaders headers)", "code": "{\n\tfor (Entry<String, String> entry : headers) {\n\t\tthis.headers.put(entry.getKey(), entry.getValue());\n\t}\n\n\t// Cookie\n\tfinal String cookieString = this.headers.get(HttpHeaderNames.COOKIE);\n\tif (StrUtil.isNotBlank(cookieString)) {\n\t\tfinal Set<Cookie> cookies = ServerCookieDecoder.LAX.decode(cookieString);\n\t\tfor (Cookie cookie : cookies) {\n\t\t\tthis.cookies.put(cookie.name(), cookie);\n\t\t}\n\t}\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * @return \u5ba2\u6237\u6d4f\u89c8\u5668\u662f\u5426\u4e3aIE\n */\n", "func_signal": "public boolean isIE()", "code": "{\n\tString userAgent = getHeader(\"User-Agent\");\n\tif (StrUtil.isNotBlank(userAgent)) {\n\t\tuserAgent = userAgent.toUpperCase();\n\t\tif (userAgent.contains(\"MSIE\") || userAgent.contains(\"TRIDENT\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "// --------------------------------------------------------- Protected method start\n/**\n * \u586b\u5145\u53c2\u6570\uff08GET\u8bf7\u6c42\u7684\u53c2\u6570\uff09\n * \n * @param decoder QueryStringDecoder\n */\n", "func_signal": "protected void putParams(QueryStringDecoder decoder)", "code": "{\n\tif (null != decoder) {\n\t\tList<String> valueList;\n\t\tfor (Entry<String, List<String>> entry : decoder.parameters().entrySet()) {\n\t\t\tvalueList = entry.getValue();\n\t\t\tif(null != valueList){\n\t\t\t\tthis.putParam(entry.getKey(), 1 == valueList.size() ? valueList.get(0) : valueList);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "im-server/broker/src/main/java/com/xiaoleilu/loServer/handler/Request.java", "commit_date": "2019-03-16 00:00:00", "repo_name": "wildfirechat/im-server", "stars": 7604, "license": "other", "language": "java", "size": 21087}
{"docstring": "/**\n * This get the total progress of all the children\n * @return the CumulativeProgress i.e. the total progress of all children\n */\n", "func_signal": "public int getCumulativeProgress()", "code": "{\n    int numChildren = getChildCount();\n    int total = 0;\n    for (int i = 0; i < numChildren; i++) {\n        total += getChildProgress(i);\n    }\n    checkCumulativeSmallerThanMax(maxProgress, total);\n    return total;\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Creates a rounded bitmap with transparent corners, from a square bitmap.\n * See <a href=\"http://stackoverflow.com/questions/4028270\">StackOverflow</a>\n *\n * @param bitmap       the original bitmap\n * @param cornerRadius the radius of the corners\n * @param roundRight if you should round the corners on the right, note that if set to true and cornerRadius == 0 it will create a square\n * @param roundLeft if you should round the corners on the right, note that if set to true and cornerRadius == 0 it will create a square\n * @return a rounded bitmap\n */\n", "func_signal": "private static Bitmap createRoundedBitmap(Bitmap bitmap, float cornerRadius, boolean roundRight, boolean  roundLeft)", "code": "{\n    Bitmap roundedBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), ARGB_8888);\n    Canvas canvas = new Canvas(roundedBitmap);\n\n    final Paint paint = new Paint();\n    final Rect frame = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());\n\n//        final Rect frameLeft = new Rect(0, 0, bitmap.getWidth() /2, bitmap.getHeight());\n//        final Rect frameRight = new Rect(bitmap.getWidth() /2, bitmap.getHeight(), bitmap.getWidth(), bitmap.getHeight());\n\n    final Rect leftRect = new Rect(0, 0, bitmap.getWidth() / 2, bitmap.getHeight());\n    final Rect rightRect = new Rect(bitmap.getWidth() / 2, 0, bitmap.getWidth(), bitmap.getHeight());\n\n    // prepare canvas for transfer\n    paint.setAntiAlias(true);\n    paint.setColor(0xFFFFFFFF);\n    paint.setStyle(Paint.Style.FILL);\n    canvas.drawARGB(0, 0, 0, 0);\n\n    canvas.drawRoundRect(new RectF(frame), cornerRadius, cornerRadius, paint);\n\n    if (!roundLeft){\n        canvas.drawRect(leftRect, paint);\n    }\n\n    if (!roundRight){\n        canvas.drawRect(rightRect, paint);\n    }\n    // draw bitmap\n    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n    canvas.drawBitmap(bitmap, frame, frame, paint);\n\n    return roundedBitmap;\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBar.java", "commit_date": "2016-06-25 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Starts an infinite animation cycle which provides the visual effect of stripes moving\n * backwards. The current system time is used to offset tiled bitmaps of the progress background,\n * producing the effect that the stripes are moving backwards.\n */\n", "func_signal": "private void startStripedAnimationIfNeeded()", "code": "{\n    if (!striped || !animated) {\n        return;\n    }\n\n    clearAnimation();\n\n    progressAnimator = ValueAnimator.ofFloat(0, 0);\n    progressAnimator.setDuration(UPDATE_ANIM_MS);\n    progressAnimator.setRepeatCount(ValueAnimator.INFINITE);\n    progressAnimator.setRepeatMode(ValueAnimator.RESTART);\n\n    progressAnimator.setInterpolator(new LinearInterpolator());\n    progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            invalidate();\n        }\n    });\n    progressAnimator.start();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBar.java", "commit_date": "2016-06-25 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/*\n * Image setter overrides\n */\n", "func_signal": "@Override public void setImageBitmap(Bitmap bm)", "code": "{\n    super.setImageBitmap(bm);\n    this.sourceBitmap = bm;\n    updateImageState();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapBaseThumbnail.java", "commit_date": "2015-11-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Creates a Bitmap which is a tile of the progress bar background\n *\n * @param h the view height\n * @return a bitmap of the progress bar background\n */\n", "func_signal": "private static Bitmap createTile(float h, Paint stripePaint, Paint progressPaint)", "code": "{\n    Bitmap bm = Bitmap.createBitmap((int) h * 2, (int) h, ARGB_8888);\n    Canvas tile = new Canvas(bm);\n\n    float x = 0;\n    Path path = new Path();\n\n    path.moveTo(x, 0);\n    path.lineTo(x, h);\n    path.lineTo(h, h);\n    tile.drawPath(path, stripePaint); // draw striped triangle\n\n    path.reset();\n    path.moveTo(x, 0);\n    path.lineTo(x + h, h);\n    path.lineTo(x + (h * 2), h);\n    path.lineTo(x + h, 0);\n    tile.drawPath(path, progressPaint); // draw progress parallelogram\n\n    x += h;\n    path.reset();\n    path.moveTo(x, 0);\n    path.lineTo(x + h, 0);\n    path.lineTo(x + h, h);\n    tile.drawPath(path, stripePaint); // draw striped triangle (completing tile)\n\n    return bm;\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBar.java", "commit_date": "2016-06-25 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Shows the alert with an animation, setting its visibility to {@link View#VISIBLE}\n * @param  animated whether the appearance should be animated or not\n */\n", "func_signal": "public void show(boolean animated)", "code": "{\n    if (animated) {\n        if (visibilityChangeListener != null) {\n            visibilityChangeListener.onAlertAppearStarted(this);\n        }\n        startAnimation(fadeInAnimation);\n    }\n    else {\n        setVisibility(VISIBLE);\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapAlert.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Sets whether the user can dismiss the dialog or not.\n * @param userDismissible true if dismissable\n */\n", "func_signal": "public void setUserDismissible(boolean userDismissible)", "code": "{\n    this.userDismissible = userDismissible;\n    updateBootstrapState();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapAlert.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Hides the alert with an animation, setting its visibility to {@link View#GONE}\n * @param  animated whether the dismissal should be animated or not\n */\n", "func_signal": "public void dismiss(boolean animated)", "code": "{\n    if (animated) {\n        if (visibilityChangeListener != null) {\n            visibilityChangeListener.onAlertDismissStarted(this);\n        }\n        startAnimation(fadeOutAnimation);\n    }\n    else {\n        setVisibility(GONE);\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapAlert.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * @return the original Bitmap source that will be drawn as a circular image\n */\n", "func_signal": "@Nullable private Bitmap getBitmapForView()", "code": "{\n    Drawable drawable = getDrawable();\n\n    if (drawable == null) {\n        return null;\n    }\n\n    if (drawable instanceof BitmapDrawable) {\n        return ((BitmapDrawable) drawable).getBitmap();\n    }\n    else {\n        int w = drawable.getIntrinsicWidth();\n        int h = drawable.getIntrinsicHeight();\n\n        Bitmap bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n        drawable.draw(new Canvas(bm));\n        return bm;\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapBaseThumbnail.java", "commit_date": "2015-11-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Used for settings the maxprogress. Also check if currentProgress is smaller than newMaxProgress.\n * @param newMaxProgress the maxProgress value\n */\n", "func_signal": "public void setMaxProgress(int newMaxProgress)", "code": "{\n    if (getProgress() <= newMaxProgress) {\n        maxProgress = newMaxProgress;\n    }\n    else {\n        throw new IllegalArgumentException(\n                String.format(\"MaxProgress cant be smaller than the current progress %d<%d\", getProgress(), newMaxProgress));\n    }\n    invalidate();\n    BootstrapProgressBarGroup parent = (BootstrapProgressBarGroup) getParent();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBar.java", "commit_date": "2016-06-25 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Starts an animation which moves the progress bar from one value to another, in response to\n * a call to setProgress(). Animation update callbacks allow the interpolator value to be used\n * to calculate the current progress value, which is stored in a temporary variable. The view is\n * then invalidated.\n * <p/>\n * If this method is called when a progress update animation is already running, the previous\n * animation will be cancelled, and the currently drawn progress recorded. A new animation will\n * then be started from the last drawn point.\n */\n", "func_signal": "private void startProgressUpdateAnimation()", "code": "{\n    clearAnimation();\n\n    progressAnimator = ValueAnimator.ofFloat(drawnProgress, userProgress);\n    progressAnimator.setDuration(UPDATE_ANIM_MS);\n    progressAnimator.setRepeatCount(0);\n    progressAnimator.setRepeatMode(ValueAnimator.RESTART);\n    progressAnimator.setInterpolator(new DecelerateInterpolator());\n\n    progressAnimator.addUpdateListener(this);\n\n    // start striped animation after progress update if needed\n    progressAnimator.addListener(this);\n    progressAnimator.start();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBar.java", "commit_date": "2016-06-25 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/*\n * Getters/Setters\n */\n", "func_signal": "@Override public void setBootstrapBrand(@NonNull BootstrapBrand bootstrapBrand)", "code": "{\n    this.bootstrapBrand = bootstrapBrand;\n    updateImageState();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapBaseThumbnail.java", "commit_date": "2015-11-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Lightens a color by increasing its alpha channel value\n *\n * @param context the current context\n * @param res     the color resource\n * @param alpha   the alpha to set\n * @return a color int\n */\n", "func_signal": "@ColorInt public static int increaseOpacity(Context context, @ColorRes int res, int alpha)", "code": "{\n    int c = resolveColor(res, context);\n    return increaseOpacityFromInt(context, resolveColor(res, context), alpha);\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/utils/ColorUtils.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * This will set all children to striped.\n * @param striped true for a striped pattern, false for a plain pattern\n */\n", "func_signal": "@Override\npublic void setStriped(boolean striped)", "code": "{\n    this.striped = striped;\n    for (int i = 0; i < getChildCount(); i++) {\n        retrieveChild(i).setStriped(striped);\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n *\n * @param animated whether the view should animate its updates or not.\n */\n", "func_signal": "@Override\npublic void setAnimated(boolean animated)", "code": "{\n    this.animated = animated;\n    for (int i = 0; i < getChildCount(); i++) {\n        retrieveChild(i).setAnimated(animated);\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Used for settings the maxprogress. Also check if Cumulative progress is smaller than the max before asigning, see {@link #checkCumulativeSmallerThanMax}.\n * @param maxProgress the maxProgress value\n */\n", "func_signal": "public void setMaxProgress(int maxProgress)", "code": "{\n    checkCumulativeSmallerThanMax(maxProgress, cumulativeProgress);\n    this.maxProgress = maxProgress;\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Darkens a color by reducing its RGB channel values.\n *\n * @param context the current context\n * @param res     the color resource\n * @param percent the percent to decrease\n * @return a color int\n */\n", "func_signal": "@ColorInt public static int decreaseRgbChannels(Context context,\n                                                @ColorRes int res, float percent)", "code": "{\n    int c = resolveColor(res, context);\n\n    // reduce rgb channel values to produce box shadow effect\n    int red = (Color.red(c));\n    red -= (red * percent);\n    red = red > 0 ? red : 0;\n\n    int green = (Color.green(c));\n    green -= (green * percent);\n    green = green > 0 ? green : 0;\n\n    int blue = (Color.blue(c));\n    blue -= (blue * percent);\n    blue = blue > 0 ? blue : 0;\n\n    return Color.argb(Color.alpha(c), red, green, blue);\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/utils/ColorUtils.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Resolves a color resource.\n *\n * @param color   the color resource\n * @param context the current context\n * @return a color int\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic static @ColorInt int resolveColor(@ColorRes int color, Context context)", "code": "{\n    if (Build.VERSION.SDK_INT >= 23) {\n        return context.getResources().getColor(color, context.getTheme());\n    }\n    else {\n        return context.getResources().getColor(color);\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/utils/ColorUtils.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n *\n * @param rounded if it should display rounded corners. true will round the corners, false wont\n */\n", "func_signal": "@Override\npublic void setRounded(boolean rounded)", "code": "{\n    this.rounded = rounded;\n    updateBootstrapGroup();\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * This looks for instances of emptyProgressBar and removes them if they are not at the end and then adds one at the end if its needed.\n */\n", "func_signal": "private void addEmptyProgressBar()", "code": "{\n    int whereIsEmpty = -1;\n    for (int i = 0; i < getChildCount(); i++) {\n        if (retrieveChild(i) != null && retrieveChild(i).equals(emptyProgressBar)) {\n            whereIsEmpty = i;\n        }\n    }\n\n    if (whereIsEmpty != getChildCount() - 1) {\n        if (whereIsEmpty != -1) {\n            //the flowing true/false is to stop empty progressbar being added more than once as removeView and addView indirectly call this method\n            isEmptyBeingAdded = true;\n            removeView(emptyProgressBar);\n            isEmptyBeingAdded = false;\n        }\n        if (!isEmptyBeingAdded) {\n            addView(emptyProgressBar);\n        }\n    }\n}", "path": "Android-Bootstrap/AndroidBootstrap/src/main/java/com/beardedhen/androidbootstrap/BootstrapProgressBarGroup.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "Bearded-Hen/Android-Bootstrap", "stars": 7285, "license": "mit", "language": "java", "size": 11507}
{"docstring": "/**\n * Start fold animation\n *\n * @param foldingCellElements           ordered list with animation parts from top to bottom\n * @param foldingLayout                 prepared layout for animation parts\n * @param part90degreeAnimationDuration animation duration for 90 degree rotation\n * @param animationEndListener          animation end callback\n */\n", "func_signal": "protected void startFoldAnimation(ArrayList<FoldingCellView> foldingCellElements, ViewGroup foldingLayout,\n                                  int part90degreeAnimationDuration, AnimationEndListener animationEndListener)", "code": "{\n    for (FoldingCellView foldingCellElement : foldingCellElements)\n        foldingLayout.addView(foldingCellElement);\n\n    Collections.reverse(foldingCellElements);\n\n    int nextDelay = 0;\n    for (int i = 0; i < foldingCellElements.size(); i++) {\n        FoldingCellView cell = foldingCellElements.get(i);\n        cell.setVisibility(VISIBLE);\n        // not FIRST(BOTTOM) element - animate front view\n        if (i != 0) {\n            FoldAnimation foldAnimation = new FoldAnimation(FoldAnimation.FoldAnimationMode.UNFOLD_UP, mCameraHeight, part90degreeAnimationDuration)\n                    .withStartOffset(nextDelay)\n                    .withInterpolator(new DecelerateInterpolator());\n            // if last(top) element - add end listener\n            if (i == foldingCellElements.size() - 1) {\n                foldAnimation.setAnimationListener(animationEndListener);\n            }\n            cell.animateFrontView(foldAnimation);\n            nextDelay = nextDelay + part90degreeAnimationDuration;\n        }\n        // if not last(top) element - animate whole view\n        if (i != foldingCellElements.size() - 1) {\n            cell.startAnimation(new FoldAnimation(FoldAnimation.FoldAnimationMode.FOLD_UP, mCameraHeight, part90degreeAnimationDuration)\n                    .withStartOffset(nextDelay)\n                    .withInterpolator(new DecelerateInterpolator()));\n            nextDelay = nextDelay + part90degreeAnimationDuration;\n        }\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Extended logic - when additional flips count is provided - content view splits onto two \"main\" parts\n * with same size as title view for first big flip. Remained space splits to number of parts provided by developer,\n * but height of each part must be equal or smaller than title view height\n */\n", "func_signal": "@Test\npublic void extendedLogic() throws Exception", "code": "{\n    FoldingCell fc = new FoldingCell(mMockContext);\n\n    ArrayList<Integer> actualHeights1 = fc.calculateHeightsForAnimationParts(50, 160, 2);\n    ArrayList<Integer> expectedHeights1 = new ArrayList<>(Arrays.asList(50, 50, 30, 30));\n    assertEquals(\"Heights array is not correct\", expectedHeights1, actualHeights1);\n\n    ArrayList<Integer> actualHeights2 = fc.calculateHeightsForAnimationParts(50, 161, 2);\n    ArrayList<Integer> expectedHeights2 = new ArrayList<>(Arrays.asList(50, 50, 31, 30));\n    assertEquals(\"Heights array is not correct\", expectedHeights2, actualHeights2);\n}", "path": "folding-cell-android/folding-cell/src/test/java/com/ramotion/foldingcell/HeightsCalculationUnitTest.java", "commit_date": "2016-04-15 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Calculate heights for animation parts with some logic\n *\n * @param titleViewHeight      height of title view\n * @param contentViewHeight    height of content view\n * @param additionalFlipsCount count of additional flips (after first one), set 0 for auto\n * @return list of calculated heights\n */\n", "func_signal": "protected ArrayList<Integer> calculateHeightsForAnimationParts(int titleViewHeight, int contentViewHeight, int additionalFlipsCount)", "code": "{\n    ArrayList<Integer> partHeights = new ArrayList<>();\n    int additionalPartsTotalHeight = contentViewHeight - titleViewHeight * 2;\n    if (additionalPartsTotalHeight < 0)\n        throw new IllegalStateException(\"Content View height is too small\");\n    // add two main parts - guarantee first flip\n    partHeights.add(titleViewHeight);\n    partHeights.add(titleViewHeight);\n\n    // if no space left - return\n    if (additionalPartsTotalHeight == 0)\n        return partHeights;\n\n    // if some space remained - use two different logic\n    if (additionalFlipsCount != 0) {\n        // 1 - additional parts count is specified and it is not 0 - divide remained space\n        int additionalPartHeight = additionalPartsTotalHeight / additionalFlipsCount;\n        int remainingHeight = additionalPartsTotalHeight % additionalFlipsCount;\n\n        if (additionalPartHeight + remainingHeight > titleViewHeight)\n            throw new IllegalStateException(\"Additional flips count is too small\");\n        for (int i = 0; i < additionalFlipsCount; i++)\n            partHeights.add(additionalPartHeight + (i == 0 ? remainingHeight : 0));\n    } else {\n        // 2 - additional parts count isn't specified or 0 - divide remained space to parts with title view size\n        int partsCount = additionalPartsTotalHeight / titleViewHeight;\n        int restPartHeight = additionalPartsTotalHeight % titleViewHeight;\n        for (int i = 0; i < partsCount; i++)\n            partHeights.add(titleViewHeight);\n        if (restPartHeight > 0)\n            partHeights.add(restPartHeight);\n    }\n\n    return partHeights;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Start unfold animation\n *\n * @param foldingCellElements           ordered list with animation parts from top to bottom\n * @param foldingLayout                 prepared layout for animation parts\n * @param part90degreeAnimationDuration animation duration for 90 degree rotation\n * @param animationEndListener          animation end callback\n */\n", "func_signal": "protected void startUnfoldAnimation(ArrayList<FoldingCellView> foldingCellElements, ViewGroup foldingLayout,\n                                    int part90degreeAnimationDuration, AnimationEndListener animationEndListener)", "code": "{\n    int nextDelay = 0;\n    for (int i = 0; i < foldingCellElements.size(); i++) {\n        FoldingCellView cell = foldingCellElements.get(i);\n        cell.setVisibility(VISIBLE);\n        foldingLayout.addView(cell);\n        // if not first(top) element - animate whole view\n        if (i != 0) {\n            FoldAnimation foldAnimation = new FoldAnimation(FoldAnimation.FoldAnimationMode.UNFOLD_DOWN, mCameraHeight, part90degreeAnimationDuration)\n                    .withStartOffset(nextDelay)\n                    .withInterpolator(new DecelerateInterpolator());\n\n            // if last(bottom) element - add end listener\n            if (i == foldingCellElements.size() - 1) {\n                foldAnimation.setAnimationListener(animationEndListener);\n            }\n\n            nextDelay = nextDelay + part90degreeAnimationDuration;\n            cell.startAnimation(foldAnimation);\n\n        }\n        // not last(bottom) element - animate front view\n        if (i != foldingCellElements.size() - 1) {\n            cell.animateFrontView(new FoldAnimation(FoldAnimation.FoldAnimationMode.FOLD_DOWN, mCameraHeight, part90degreeAnimationDuration)\n                    .withStartOffset(nextDelay)\n                    .withInterpolator(new DecelerateInterpolator()));\n            nextDelay = nextDelay + part90degreeAnimationDuration;\n        }\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create image view for display selected bitmap\n *\n * @param bitmap bitmap to display in image view\n * @return ImageView with selected bitmap\n */\n", "func_signal": "protected ImageView createImageViewFromBitmap(Bitmap bitmap)", "code": "{\n    ImageView imageView = new ImageView(getContext());\n    imageView.setImageBitmap(bitmap);\n    imageView.setLayoutParams(new LayoutParams(bitmap.getWidth(), bitmap.getHeight()));\n    return imageView;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Fold cell with (or without) animation\n *\n * @param skipAnimation if true - change state of cell instantly without animation\n */\n", "func_signal": "public void fold(boolean skipAnimation)", "code": "{\n    if (!mUnfolded || mAnimationInProgress) return;\n\n    // get basic views\n    final View contentView = getChildAt(0);\n    if (contentView == null) return;\n    final View titleView = getChildAt(1);\n    if (titleView == null) return;\n\n    // hide title and content views\n    titleView.setVisibility(GONE);\n    contentView.setVisibility(GONE);\n\n    // make bitmaps from title and content views\n    Bitmap bitmapFromTitleView = measureViewAndGetBitmap(titleView, this.getMeasuredWidth());\n    Bitmap bitmapFromContentView = measureViewAndGetBitmap(contentView, this.getMeasuredWidth());\n\n    if (skipAnimation) {\n        contentView.setVisibility(GONE);\n        titleView.setVisibility(VISIBLE);\n        FoldingCell.this.mAnimationInProgress = false;\n        FoldingCell.this.mUnfolded = false;\n        this.getLayoutParams().height = titleView.getHeight();\n    } else {\n        ViewCompat.setHasTransientState(this, true);\n        // create empty layout for folding animation\n        final LinearLayout foldingLayout = createAndPrepareFoldingContainer();\n        // add that layout to structure\n        this.addView(foldingLayout);\n\n        // calculate heights of animation parts\n        ArrayList<Integer> heights = calculateHeightsForAnimationParts(titleView.getHeight(), contentView.getHeight(), mAdditionalFlipsCount);\n        // create list with animation parts for animation\n        ArrayList<FoldingCellView> foldingCellElements = prepareViewsForAnimation(heights, bitmapFromTitleView, bitmapFromContentView);\n        int childCount = foldingCellElements.size();\n        int part90degreeAnimationDuration = mAnimationDuration / (childCount * 2);\n        // start fold animation with end listener\n        startFoldAnimation(foldingCellElements, foldingLayout, part90degreeAnimationDuration, new AnimationEndListener() {\n            @Override\n            public void onAnimationEnd(Animation animation) {\n                contentView.setVisibility(GONE);\n                titleView.setVisibility(VISIBLE);\n                foldingLayout.setVisibility(GONE);\n                FoldingCell.this.removeView(foldingLayout);\n                FoldingCell.this.mAnimationInProgress = false;\n                FoldingCell.this.mUnfolded = false;\n                ViewCompat.setHasTransientState(FoldingCell.this, true);\n            }\n        });\n        startCollapseHeightAnimation(heights, part90degreeAnimationDuration * 2);\n        this.mAnimationInProgress = true;\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create layout that will be a container for animation elements\n *\n * @return Configured container for animation elements (LinearLayout)\n */\n", "func_signal": "protected LinearLayout createAndPrepareFoldingContainer()", "code": "{\n    LinearLayout foldingContainer = new LinearLayout(getContext());\n    foldingContainer.setClipToPadding(false);\n    foldingContainer.setClipChildren(false);\n    foldingContainer.setOrientation(LinearLayout.VERTICAL);\n    foldingContainer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n    return foldingContainer;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create \"animation chain\" for selected view from list of animation objects\n *\n * @param animationList   collection with animations\n * @param animationObject view for animations\n */\n", "func_signal": "protected void createAnimationChain(final List<Animation> animationList, final View animationObject)", "code": "{\n    for (int i = 0; i < animationList.size(); i++) {\n        Animation animation = animationList.get(i);\n        if (i + 1 < animationList.size()) {\n            final int finalI = i;\n            animation.setAnimationListener(new AnimationEndListener() {\n                public void onAnimationEnd(Animation animation) {\n                    animationObject.startAnimation(animationList.get(finalI + 1));\n                }\n            });\n        }\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * @return List of elements prepared for tests\n */\n", "func_signal": "public static ArrayList<Item> getTestingList()", "code": "{\n    ArrayList<Item> items = new ArrayList<>();\n    items.add(new Item(\"$14\", \"$270\", \"W 79th St, NY, 10024\", \"W 139th St, NY, 10030\", 3, \"TODAY\", \"05:10 PM\"));\n    items.add(new Item(\"$23\", \"$116\", \"W 36th St, NY, 10015\", \"W 114th St, NY, 10037\", 10, \"TODAY\", \"11:10 AM\"));\n    items.add(new Item(\"$63\", \"$350\", \"W 36th St, NY, 10029\", \"56th Ave, NY, 10041\", 0, \"TODAY\", \"07:11 PM\"));\n    items.add(new Item(\"$19\", \"$150\", \"12th Ave, NY, 10012\", \"W 57th St, NY, 10048\", 8, \"TODAY\", \"4:15 AM\"));\n    items.add(new Item(\"$5\", \"$300\", \"56th Ave, NY, 10041\", \"W 36th St, NY, 10029\", 0, \"TODAY\", \"06:15 PM\"));\n    return items;\n\n}", "path": "folding-cell-android/folding-cell-listview-example/src/main/java/com/ramotion/foldingcell/examples/listview/Item.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Prepare and start height expand animation for FoldingCellLayout\n *\n * @param partAnimationDuration one part animate duration\n * @param viewHeights           heights of animation parts\n */\n", "func_signal": "protected void startExpandHeightAnimation(ArrayList<Integer> viewHeights, int partAnimationDuration)", "code": "{\n    if (viewHeights == null || viewHeights.isEmpty())\n        throw new IllegalArgumentException(\"ViewHeights array must have at least 2 elements\");\n\n    ArrayList<Animation> heightAnimations = new ArrayList<>();\n    int fromHeight = viewHeights.get(0);\n    int delay = 0;\n    int animationDuration = partAnimationDuration - delay;\n    for (int i = 1; i < viewHeights.size(); i++) {\n        int toHeight = fromHeight + viewHeights.get(i);\n        HeightAnimation heightAnimation = new HeightAnimation(this, fromHeight, toHeight, animationDuration)\n                .withInterpolator(new DecelerateInterpolator());\n        heightAnimation.setStartOffset(delay);\n        heightAnimations.add(heightAnimation);\n        fromHeight = toHeight;\n    }\n    createAnimationChain(heightAnimations, this);\n    this.startAnimation(heightAnimations.get(0));\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Prepare and start height collapse animation for FoldingCellLayout\n *\n * @param partAnimationDuration one part animate duration\n * @param viewHeights           heights of animation parts\n */\n", "func_signal": "protected void startCollapseHeightAnimation(ArrayList<Integer> viewHeights, int partAnimationDuration)", "code": "{\n    if (viewHeights == null || viewHeights.isEmpty())\n        throw new IllegalArgumentException(\"ViewHeights array must have at least 2 elements\");\n\n    ArrayList<Animation> heightAnimations = new ArrayList<>();\n    int fromHeight = viewHeights.get(0);\n    for (int i = 1; i < viewHeights.size(); i++) {\n        int toHeight = fromHeight + viewHeights.get(i);\n        heightAnimations.add(new HeightAnimation(this, toHeight, fromHeight, partAnimationDuration)\n                .withInterpolator(new DecelerateInterpolator()));\n        fromHeight = toHeight;\n    }\n\n    Collections.reverse(heightAnimations);\n    createAnimationChain(heightAnimations, this);\n    this.startAnimation(heightAnimations.get(0));\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Unfold cell with (or without) animation\n *\n * @param skipAnimation if true - change state of cell instantly without animation\n */\n", "func_signal": "public void unfold(boolean skipAnimation)", "code": "{\n    if (mUnfolded || mAnimationInProgress) return;\n\n    // get main content parts\n    final View contentView = getChildAt(0);\n    if (contentView == null) return;\n    final View titleView = getChildAt(1);\n    if (titleView == null) return;\n\n    // hide title and content views\n    titleView.setVisibility(GONE);\n    contentView.setVisibility(GONE);\n\n    // Measure views and take a bitmaps to replace real views with images\n    Bitmap bitmapFromTitleView = measureViewAndGetBitmap(titleView, this.getMeasuredWidth());\n    Bitmap bitmapFromContentView = measureViewAndGetBitmap(contentView, this.getMeasuredWidth());\n\n    if (skipAnimation) {\n        contentView.setVisibility(VISIBLE);\n        FoldingCell.this.mUnfolded = true;\n        FoldingCell.this.mAnimationInProgress = false;\n        this.getLayoutParams().height = contentView.getHeight();\n    } else {\n        ViewCompat.setHasTransientState(this, true);\n        // create layout container for animation elements\n        final LinearLayout foldingLayout = createAndPrepareFoldingContainer();\n        this.addView(foldingLayout);\n        // calculate heights of animation parts\n        ArrayList<Integer> heights = calculateHeightsForAnimationParts(titleView.getHeight(), contentView.getHeight(), mAdditionalFlipsCount);\n        // create list with animation parts for animation\n        ArrayList<FoldingCellView> foldingCellElements = prepareViewsForAnimation(heights, bitmapFromTitleView, bitmapFromContentView);\n        // start unfold animation with end listener\n        int childCount = foldingCellElements.size();\n        int part90degreeAnimationDuration = mAnimationDuration / (childCount * 2);\n        startUnfoldAnimation(foldingCellElements, foldingLayout, part90degreeAnimationDuration, new AnimationEndListener() {\n            public void onAnimationEnd(Animation animation) {\n                contentView.setVisibility(VISIBLE);\n                foldingLayout.setVisibility(GONE);\n                FoldingCell.this.removeView(foldingLayout);\n                FoldingCell.this.mUnfolded = true;\n                FoldingCell.this.mAnimationInProgress = false;\n                ViewCompat.setHasTransientState(FoldingCell.this, true);\n            }\n        });\n\n        startExpandHeightAnimation(heights, part90degreeAnimationDuration * 2);\n        this.mAnimationInProgress = true;\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create image view for display back side of flip view\n *\n * @param height height for view\n * @return ImageView with selected height and default background color\n */\n", "func_signal": "protected ImageView createBackSideView(int height)", "code": "{\n    ImageView imageView = new ImageView(getContext());\n    imageView.setBackgroundColor(mBackSideColor);\n    imageView.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, height));\n    return imageView;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "// simple methods for register cell state changes\n", "func_signal": "public void registerToggle(int position)", "code": "{\n    if (unfoldedIndexes.contains(position))\n        registerFold(position);\n    else\n        registerUnfold(position);\n}", "path": "folding-cell-android/folding-cell-listview-example/src/main/java/com/ramotion/foldingcell/examples/listview/FoldingCellListAdapter.java", "commit_date": "2019-02-13 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Default dividing logic - content view splits to several parts with heights equal to title view\n * plus optional last small part that cover remained height\n */\n", "func_signal": "@Test\npublic void defaultLogic() throws Exception", "code": "{\n    FoldingCell fc = new FoldingCell(mMockContext);\n\n    ArrayList<Integer> actualHeights1 = fc.calculateHeightsForAnimationParts(50, 180, 0);\n    ArrayList<Integer> expectedHeights1 = new ArrayList<>(Arrays.asList(50, 50, 50, 30));\n    assertEquals(\"Heights array is not correct\", expectedHeights1, actualHeights1);\n\n    ArrayList<Integer> actualHeights2 = fc.calculateHeightsForAnimationParts(50, 100, 0);\n    ArrayList<Integer> expectedHeights2 = new ArrayList<>(Arrays.asList(50, 50));\n    assertEquals(\"Heights array is not correct\", expectedHeights2, actualHeights2);\n\n}", "path": "folding-cell-android/folding-cell/src/test/java/com/ramotion/foldingcell/HeightsCalculationUnitTest.java", "commit_date": "2016-04-15 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Toggle current state of FoldingCellLayout\n */\n", "func_signal": "public void toggle(boolean skipAnimation)", "code": "{\n    if (this.mUnfolded) {\n        this.fold(skipAnimation);\n    } else {\n        this.unfold(skipAnimation);\n        this.requestLayout();\n    }\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Initializes folding cell programmatically with custom settings\n *\n * @param animationDuration    animation duration, default is 1000\n * @param backSideColor        color of back side, default is android.graphics.Color.GREY (0xFF888888)\n * @param additionalFlipsCount count of additional flips (after first one), set 0 for auto\n */\n", "func_signal": "public void initialize(int animationDuration, int backSideColor, int additionalFlipsCount)", "code": "{\n    this.mAnimationDuration = animationDuration;\n    this.mBackSideColor = backSideColor;\n    this.mAdditionalFlipsCount = additionalFlipsCount;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create and prepare list of FoldingCellViews with different bitmap parts for fold animation\n *\n * @param titleViewBitmap   bitmap from title view\n * @param contentViewBitmap bitmap from content view\n * @return list of FoldingCellViews with bitmap parts\n */\n", "func_signal": "protected ArrayList<FoldingCellView> prepareViewsForAnimation(ArrayList<Integer> viewHeights, Bitmap titleViewBitmap, Bitmap contentViewBitmap)", "code": "{\n    if (viewHeights == null || viewHeights.isEmpty())\n        throw new IllegalStateException(\"ViewHeights array must be not null and not empty\");\n\n    ArrayList<FoldingCellView> partsList = new ArrayList<>();\n\n    int partWidth = titleViewBitmap.getWidth();\n    int yOffset = 0;\n    for (int i = 0; i < viewHeights.size(); i++) {\n        int partHeight = viewHeights.get(i);\n        Bitmap partBitmap = Bitmap.createBitmap(partWidth, partHeight, Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(partBitmap);\n        Rect srcRect = new Rect(0, yOffset, partWidth, yOffset + partHeight);\n        Rect destRect = new Rect(0, 0, partWidth, partHeight);\n        canvas.drawBitmap(contentViewBitmap, srcRect, destRect, null);\n        ImageView backView = createImageViewFromBitmap(partBitmap);\n        ImageView frontView = null;\n        if (i < viewHeights.size() - 1) {\n            frontView = (i == 0) ? createImageViewFromBitmap(titleViewBitmap) : createBackSideView(viewHeights.get(i + 1));\n        }\n        partsList.add(new FoldingCellView(frontView, backView, getContext()));\n        yOffset = yOffset + partHeight;\n    }\n\n    return partsList;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Create bitmap from specified View with specified with\n *\n * @param view        source for bitmap\n * @param parentWidth result bitmap width\n * @return bitmap from specified view\n */\n", "func_signal": "protected Bitmap measureViewAndGetBitmap(View view, int parentWidth)", "code": "{\n    int specW = View.MeasureSpec.makeMeasureSpec(parentWidth, View.MeasureSpec.EXACTLY);\n    int specH = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n    view.measure(specW, specH);\n    view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());\n    Bitmap b = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);\n    Canvas c = new Canvas(b);\n    c.translate(-view.getScrollX(), -view.getScrollY());\n    view.draw(c);\n    return b;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Initializes folding cell programmatically with custom settings\n *\n * @param animationDuration    animation duration, default is 1000\n * @param backSideColor        color of back side, default is android.graphics.Color.GREY (0xFF888888)\n * @param additionalFlipsCount count of additional flips (after first one), set 0 for auto\n */\n", "func_signal": "public void initialize(int cameraHeight, int animationDuration, int backSideColor, int additionalFlipsCount)", "code": "{\n    this.mAnimationDuration = animationDuration;\n    this.mBackSideColor = backSideColor;\n    this.mAdditionalFlipsCount = additionalFlipsCount;\n    this.mCameraHeight = cameraHeight;\n}", "path": "folding-cell-android/folding-cell/src/main/java/com/ramotion/foldingcell/FoldingCell.java", "commit_date": "2019-02-14 00:00:00", "repo_name": "Ramotion/folding-cell-android", "stars": 4887, "license": "mit", "language": "java", "size": 26341}
{"docstring": "/**\n * Dispatch a range of days to a range listener, if set, ordered chronologically.\n *\n * @param days Enclosing days ordered from first to last day.\n */\n", "func_signal": "protected void dispatchOnRangeSelected(@NonNull final List<CalendarDay> days)", "code": "{\n  if (rangeListener != null) {\n    rangeListener.onRangeSelected(MaterialCalendarView.this, days);\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Sets the first day of the week.\n * <p>\n * Uses the {@link DayOfWeek} day constants.\n *\n * @param day The first day of the week as a {@link DayOfWeek} enum.\n * @see java.util.Calendar\n */\n", "func_signal": "public StateBuilder setFirstDayOfWeek(DayOfWeek day)", "code": "{\n  this.firstDayOfWeek = day;\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Clamp the size to the measure spec.\n *\n * @param size Size we want to be\n * @param spec Measure spec to clamp against\n * @return the appropriate size to pass to {@linkplain View#setMeasuredDimension(int, int)}\n */\n", "func_signal": "private static int clampSize(int size, int spec)", "code": "{\n  int specMode = MeasureSpec.getMode(spec);\n  int specSize = MeasureSpec.getSize(spec);\n  switch (specMode) {\n    case MeasureSpec.EXACTLY: {\n      return specSize;\n    }\n    case MeasureSpec.AT_MOST: {\n      return Math.min(size, specSize);\n    }\n    case MeasureSpec.UNSPECIFIED:\n    default: {\n      return size;\n    }\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * @param calendar set the minimum selectable date, null for no minimum\n */\n", "func_signal": "public StateBuilder setMinimumDate(@Nullable CalendarDay calendar)", "code": "{\n  minDate = calendar;\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Enable or disable the ability to swipe between months.\n *\n * @param pagingEnabled pass false to disable paging, true to enable (default)\n */\n", "func_signal": "public void setPagingEnabled(boolean pagingEnabled)", "code": "{\n  pager.setPagingEnabled(pagingEnabled);\n  updateUi();\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * @param showWeekDays true to show week days names\n */\n", "func_signal": "public StateBuilder setShowWeekDays(boolean showWeekDays)", "code": "{\n  this.showWeekDays = showWeekDays;\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Use this method to enable saving the current position when switching\n * between week and month mode. By default, the calendar update to the latest selected date\n * or the current date. When set to true, the view will used the month that the calendar is\n * currently on.\n *\n * @param cacheCurrentPosition Set to true to cache the current position, false otherwise.\n */\n", "func_signal": "public StateBuilder isCacheCalendarPositionEnabled(final boolean cacheCurrentPosition)", "code": "{\n  this.cacheCurrentPosition = cacheCurrentPosition;\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * @param calendar set the maximum selectable date, null for no maximum\n */\n", "func_signal": "public StateBuilder setMaximumDate(@Nullable CalendarDay calendar)", "code": "{\n  maxDate = calendar;\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Set the size of each tile that makes up the calendar.\n * Each day is 1 tile, so the widget is 7 tiles wide and 7 or 8 tiles tall\n * depending on the visibility of the {@link #topbar}.\n *\n * @param size the new size for each tile in pixels\n */\n", "func_signal": "public void setTileSize(int size)", "code": "{\n  this.tileWidth = size;\n  this.tileHeight = size;\n  requestLayout();\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Change the selection mode of the calendar. The default mode is {@linkplain\n * #SELECTION_MODE_SINGLE}\n *\n * @param mode the selection mode to change to. This must be one of\n * {@linkplain #SELECTION_MODE_NONE}, {@linkplain #SELECTION_MODE_SINGLE},\n * {@linkplain #SELECTION_MODE_RANGE} or {@linkplain #SELECTION_MODE_MULTIPLE}.\n * Unknown values will act as {@linkplain #SELECTION_MODE_SINGLE}\n * @see #getSelectionMode()\n * @see #SELECTION_MODE_NONE\n * @see #SELECTION_MODE_SINGLE\n * @see #SELECTION_MODE_MULTIPLE\n * @see #SELECTION_MODE_RANGE\n */\n", "func_signal": "public void setSelectionMode(final @SelectionMode int mode)", "code": "{\n  final @SelectionMode int oldMode = this.selectionMode;\n  this.selectionMode = mode;\n  switch (mode) {\n    case SELECTION_MODE_RANGE:\n      clearSelection();\n      break;\n    case SELECTION_MODE_MULTIPLE:\n      break;\n    case SELECTION_MODE_SINGLE:\n      if (oldMode == SELECTION_MODE_MULTIPLE || oldMode == SELECTION_MODE_RANGE) {\n        //We should only have one selection now, so we should pick one\n        List<CalendarDay> dates = getSelectedDates();\n        if (!dates.isEmpty()) {\n          setSelectedDate(getSelectedDate());\n        }\n      }\n      break;\n    default:\n    case SELECTION_MODE_NONE:\n      this.selectionMode = SELECTION_MODE_NONE;\n      if (oldMode != SELECTION_MODE_NONE) {\n        //No selection! Clear out!\n        clearSelection();\n      }\n      break;\n  }\n\n  adapter.setSelectionEnabled(selectionMode != SELECTION_MODE_NONE);\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Dispatch date change events to a listener, if set\n *\n * @param day first day of the new month\n */\n", "func_signal": "protected void dispatchOnMonthChanged(final CalendarDay day)", "code": "{\n  if (monthListener != null) {\n    monthListener.onMonthChanged(MaterialCalendarView.this, day);\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Add a collection of day decorators\n *\n * @param decorators decorators to add\n */\n", "func_signal": "public void addDecorators(Collection<? extends DayViewDecorator> decorators)", "code": "{\n  if (decorators == null) {\n    return;\n  }\n\n  dayViewDecorators.addAll(decorators);\n  adapter.setDecorators(dayViewDecorators);\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Clear the currently selected date(s)\n */\n", "func_signal": "public void clearSelection()", "code": "{\n  List<CalendarDay> dates = getSelectedDates();\n  adapter.clearSelections();\n  for (CalendarDay day : dates) {\n    dispatchOnDateSelected(day, false);\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * @param date set the maximum selectable date, null for no maximum\n */\n", "func_signal": "public StateBuilder setMaximumDate(@Nullable LocalDate date)", "code": "{\n  setMaximumDate(CalendarDay.from(date));\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * @param date set the minimum selectable date, null for no minimum\n */\n", "func_signal": "public StateBuilder setMinimumDate(@Nullable LocalDate date)", "code": "{\n  setMinimumDate(CalendarDay.from(date));\n  return this;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Remove all decorators\n */\n", "func_signal": "public void removeDecorators()", "code": "{\n  dayViewDecorators.clear();\n  adapter.setDecorators(dayViewDecorators);\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Call by {@link CalendarPagerView} to indicate that a day was long clicked and we should handle\n * it\n */\n", "func_signal": "protected void onDateLongClicked(final DayView dayView)", "code": "{\n  if (longClickListener != null) {\n    longClickListener.onDateLongClick(MaterialCalendarView.this, dayView.getDate());\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Select a fresh range of date including first day and last day.\n *\n * @param firstDay first day of the range to select\n * @param lastDay last day of the range to select\n */\n", "func_signal": "public void selectRange(final CalendarDay firstDay, final CalendarDay lastDay)", "code": "{\n  if (firstDay == null || lastDay == null) {\n    return;\n  } else if (firstDay.isAfter(lastDay)) {\n    adapter.selectRange(lastDay, firstDay);\n    dispatchOnRangeSelected(adapter.getSelectedDates());\n  } else {\n    adapter.selectRange(firstDay, lastDay);\n    dispatchOnRangeSelected(adapter.getSelectedDates());\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * Create a span to draw a dot using a specified color\n *\n * @param color color of the dot\n * @see #DotSpan(float, int)\n * @see #DEFAULT_RADIUS\n */\n", "func_signal": "public DotSpan(int color)", "code": "{\n  this.radius = DEFAULT_RADIUS;\n  this.color = color;\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/spans/DotSpan.java", "commit_date": "2018-09-07 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom)", "code": "{\n  final int count = getChildCount();\n\n  final int parentLeft = getPaddingLeft();\n  final int parentWidth = right - left - parentLeft - getPaddingRight();\n\n  int childTop = getPaddingTop();\n\n  for (int i = 0; i < count; i++) {\n    final View child = getChildAt(i);\n    if (child.getVisibility() == View.GONE) {\n      continue;\n    }\n\n    final int width = child.getMeasuredWidth();\n    final int height = child.getMeasuredHeight();\n\n    int delta = (parentWidth - width) / 2;\n    int childLeft = parentLeft + delta;\n\n    child.layout(childLeft, childTop, childLeft + width, childTop + height);\n\n    childTop += height;\n  }\n}", "path": "material-calendarview/library/src/main/java/com/prolificinteractive/materialcalendarview/MaterialCalendarView.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "prolificinteractive/material-calendarview", "stars": 5904, "license": "mit", "language": "java", "size": 4823}
{"docstring": "/**\n * \u53d6\u5f97 GroupId\n *\n * @return GroupId\n */\n", "func_signal": "public static String getGroupId()", "code": "{\n    String groupId;\n    try {\n        groupId = (String) getKey(SnowflakeConstant.GROUP_ID);\n    } catch (Exception e) {\n        log.debug(\"Cache.getGroupId is null!\");\n        groupId = UUID.randomUUID().toString();\n    }\n    return groupId;\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/cache/Cache.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u521d\u59cb\u5316\u8fde\u63a5\n */\n", "func_signal": "public void init()", "code": "{\n    try {\n        String hostAddress = Objects.requireNonNull( NetUtil.getLocalhost()).getHostAddress();\n        TmNode tmNode = new TmNode(String.format(\"%s:%s\", hostAddress, port), hostAddress, port, tmNodeRepository);\n        scheduledExecutorService.scheduleAtFixedRate(\n                () -> tmNode.connectToOtherNode(protocolServer), 0, 30, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n    }\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/runner/TmNodeServerRunner.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u83b7\u53d6\u96c6\u5408\u4e2d\u6307\u5b9a\u4e0b\u6807\u7684\u5143\u7d20\u503c\uff0c\u4e0b\u6807\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u4f8b\u5982-1\u8868\u793a\u6700\u540e\u4e00\u4e2a\u5143\u7d20<br>\n * \u5982\u679c\u5143\u7d20\u8d8a\u754c\uff0c\u8fd4\u56denull\n *\n * @param <T>        \u5143\u7d20\u7c7b\u578b\n * @param collection \u96c6\u5408\n * @param index      \u4e0b\u6807\uff0c\u652f\u6301\u8d1f\u6570\n * @return \u5143\u7d20\u503c\n */\n", "func_signal": "public static <T> T get(Collection<T> collection, int index)", "code": "{\n    if (null == collection) {\n        return null;\n    }\n\n    final int size = collection.size();\n    if (0 == size) {\n        return null;\n    }\n\n    if (index < 0) {\n        index += size;\n    }\n\n    // \u68c0\u67e5\u8d8a\u754c\n    if (index >= size) {\n        return null;\n    }\n\n    if (collection instanceof List) {\n        final List<T> list = ((List<T>) collection);\n        return list.get(index);\n    } else {\n        int i = 0;\n        for (T t : collection) {\n            if (i > index) {\n                break;\n            } else if (i == index) {\n                return t;\n            }\n            i++;\n        }\n    }\n    return null;\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/util/CollUtil.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u68c0\u67e5\u662f\u5426\u5305\u542b\u4e3b\u952e\n * @param table\n * @param tableList\n * @return\n */\n", "func_signal": "public static  boolean checkTableContainsPk(Table table, TableList tableList )", "code": "{\n    TableInfo tableInfo = tableList.getTable(table.getName());\n    if(ListUtil.isNotEmpty(tableInfo.getPrimaryKeys())){\n        return  true;\n    }\n    return false;\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/jdbc/database/SqlAnalyseHelper.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u53d6\u5f97 LogId\n *\n * @return LogId\n */\n", "func_signal": "public static long getLogId()", "code": "{\n    long logId;\n    try {\n        logId = (long) getKey(SnowflakeConstant.LOG_ID);\n    } catch (Exception e) {\n        log.debug(\"Cache.getLogId is null!\");\n        logId = UUID.randomUUID().getLeastSignificantBits();\n    }\n    return logId;\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/cache/Cache.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u9009\u62e9\u5176\u4ed6 TmNode \u8282\u70b9\u8fdb\u884c\u8fde\u63a5\n *\n * @param connection    \u5f53\u524d\u8fde\u63a5 TC\n * @param otherNodeList \u5176\u4ed6 TmNode \u8282\u70b9\n */\n", "func_signal": "private void selectLeaderWithoutTc(Connection connection, List<InetSocketAddress> otherNodeList)", "code": "{\n    if (connections.size() > 0) {\n        // \u8fc7\u6ee4 TC \u8fde\u63a5\n        List<Connection> connectionList = connections.stream()\n                .filter(connectionBo -> !connectionBo.getUniqueKey().equals(connection.getUniqueKey()))\n                .filter(connectionBo -> otherNodeList.contains(connectionBo.getRemoteAddress()))\n                .collect(Collectors.toList());\n\n        // \u83b7\u5f97\u5176\u4ed6 TM \u7684\u8fde\u63a5\u6570\n        String hostAddress = Objects.requireNonNull(NetUtil.getLocalhost()).getHostAddress();\n        TmNode tmNode = new TmNode()\n                .setId(String.format(\"%s:%s\", hostAddress, tmConfig.getPort()))\n                .setNodeIp(hostAddress)\n                .setPort(tmConfig.getPort())\n                .setTmNodeRepository(tmNodeRepository);\n\n        Map<String, Integer> allTmConnection = tmNode.getAllOtherTmConnection();\n\n        //\u53d6 TM \u8fde\u63a5\u6570\u6700\u5c0f\u7684\u8fdb\u884c\u8fde\u63a5\n        leader = connectionList.stream()\n                .min(Comparator.comparingInt(cnt -> allTmConnection.get(cnt.getUniqueKey())))\n                .orElse(null);\n    }\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/reporter/TmManagerReporter.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * @return \u83b7\u5f97\u9664\u6b64 TM \u8282\u70b9\u4ee5\u5916 TM \u8282\u70b9\u7684 IP \u53ca\u7aef\u53e3\n */\n", "func_signal": "public List<InetSocketAddress> getOtherNodeList()", "code": "{\n    return tmNodeRepository.keys(TX_MANAGE_KEY).stream()\n            .filter(Objects::nonNull)\n            .map(tmKey -> tmNodeRepository.getTmNodeInfo(tmKey).getHostAndPort())\n            .filter(s -> !s.equals(id))\n            .map(NetUtil::addressFormat)\n            .filter(Objects::nonNull)\n            .distinct()\n            .collect(Collectors.toList());\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/node/TmNode.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u8bbe\u7f6e\u7f13\u5b58\n *\n * @param key key\n * @return Object\n */\n", "func_signal": "public static Object getKey(String key)", "code": "{\n    try {\n        Object value = localCache.get(key);\n        if (CommonConstant.NULL.equals(value)) {\n            return null;\n        }\n        return value;\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n    }\n    return null;\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/cache/Cache.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * @param iNetSocketAddressList iNetSocketAddressList\n * @return \u83b7\u5f97\u4f20\u5165\u96c6\u5408\u4ee5\u5916\u7684 TM \u8282\u70b9\u7684 IP \u53ca\u7aef\u53e3\n */\n", "func_signal": "public List<InetSocketAddress> getBesidesNodeList(List<InetSocketAddress> iNetSocketAddressList)", "code": "{\n    return tmNodeRepository.keys(TX_MANAGE_KEY).stream()\n            .filter(Objects::nonNull)\n            .map(tmKey -> tmNodeRepository.getTmNodeInfo(tmKey).getHostAndPort())\n            .filter(s -> !s.equals(id))\n            .map(NetUtil::addressFormat)\n            .filter(Objects::nonNull)\n            .filter(iNetSocketAddress -> !iNetSocketAddressList.contains(iNetSocketAddress))\n            .distinct()\n            .collect(Collectors.toList());\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/node/TmNode.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u521d\u59cb\u5316\u8fde\u63a5\n */\n", "func_signal": "public void init()", "code": "{\n    try {\n        CompletableFuture<Void> futureToNotify = new CompletableFuture<>();\n        scheduledExecutorService.scheduleAtFixedRate(() -> {\n            List<InetSocketAddress> iNetSocketAddresses = ListUtil.isEmpty(txConfig.getINetSocketAddresses()) ?\n                    txConfig.txManagerAddresses() : txConfig.getINetSocketAddresses();\n            iNetSocketAddresses.forEach(address -> {\n                protocolServer.connectTo(address.getHostString(), address.getPort(), futureToNotify);\n                futureToNotify.whenCompleteAsync((s, throwable) -> {\n                    log.debug(\"=> futureToNotify.whenCompleteAsync\");\n                    snowFlakeStep.getGroupIdAndLogId();\n                    this.tryToGetMoreTmResource(iNetSocketAddresses);\n                });\n            });\n        }, 0, 30, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n    }\n\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/runner/TmServerRunner.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u7a7a\u95f2\u961f\u5217\u5904\u7406\n *\n * @return RpcContent\n */\n", "func_signal": "private Lock findRpcContent()", "code": "{\n    synchronized (freeList) {\n        Lock cacheContent = freeList.getFirst();\n        if (!cacheContent.isUsed()) {\n            cacheContent.init();\n            freeList.remove(cacheContent);\n            return cacheContent;\n        }\n    }\n\n    Lock lock = new Lock();\n    lock.init();\n    return lock;\n}", "path": "tx-lcn/txlcn-protocol/src/main/java/com/codingapi/txlcn/protocol/await/LockContext.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u83b7\u5f97\u9664\u4e86\u8be5\u8282\u70b9\u5176\u4ed6\u6240\u6709 TM \u7684\u8fde\u63a5\u6570\u4fe1\u606f\n *\n * @return Map<hostAndPort, connection>\n */\n", "func_signal": "public Map<String, Integer> getAllOtherTmConnection()", "code": "{\n    return tmNodeRepository.keys(TX_MANAGE_KEY).stream()\n            .filter(Objects::nonNull)\n            .map(tmKey -> tmNodeRepository.getTmNodeInfo(tmKey))\n            .filter(tmNodeInfo -> !tmNodeInfo.getHostAndPort().equals(id))\n            .collect(Collectors.toMap(TmNodeInfo::getHostAndPort, TmNodeInfo::getConnection));\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/node/TmNode.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * Generates log message with column values accessed if the row's column values have not already been logged.\n */\n", "func_signal": "public void generateLogMessage()", "code": "{\n  if (lastRowLogged != currRow) {\n//      P6LogQuery.log(Category.RESULTSET, this);\n    resultMap.clear();\n    lastRowLogged = currRow;\n  }\n}", "path": "tx-lcn/txlcn-p6spy/src/main/java/com/codingapi/txlcn/p6spy/common/ResultSetInformation.java", "commit_date": "2020-07-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u83b7\u5f97\u7f13\u5b58\n *\n * @param key   key\n * @param value value\n */\n", "func_signal": "public static void setKey(String key, Object value)", "code": "{\n    log.debug(\"==> Cache.setKey [key:{} value:{}]\", key, value);\n    localCache.put(key, value);\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/cache/Cache.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u53d1\u9001\u6d88\u606f\n *\n * @param message message\n */\n", "func_signal": "public void sendMsg(Message message)", "code": "{\n    selectLeader();\n    checkLeader();\n    leader.send(message);\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/reporter/TmManagerReporter.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u5e76\u53d1\u53ef\u80fd\u4f1a\u51fa\u91cd\u590d\u6dfb\u52a0\n *\n * @param key key\n * @return RpcContent\n */\n", "func_signal": "public synchronized Lock addKey(String key)", "code": "{\n    Lock lock = createRpcContent();\n    map.put(key, lock);\n    return lock;\n}", "path": "tx-lcn/txlcn-protocol/src/main/java/com/codingapi/txlcn/protocol/await/LockContext.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * Should only be called by {@link #wrap(Connection, JdbcEventListener, ConnectionInformation)}\n * <p>\n * Setting to protected instead of private, so that CGLIB can create a subclass/proxy\n * See also: {@code net.sf.cglib.proxy.Enhancer#filterConstructors} (protectedOk: true)\n *\n *\n * @param delegate   delegate\n * @param jdbcEventListener jdbcEventListener\n * @param connectionInformation connectionInformation\n */\n", "func_signal": "protected ConnectionWrapper(Connection delegate, JdbcEventListener jdbcEventListener, ConnectionInformation connectionInformation)", "code": "{\n    super(delegate);\n    if (delegate == null) {\n        throw new NullPointerException(\"Delegate must not be null\");\n    }\n    this.delegate = delegate;\n    this.connectionInformation = connectionInformation;\n    this.jdbcEventListener = jdbcEventListener;\n}", "path": "tx-lcn/txlcn-p6spy/src/main/java/com/codingapi/txlcn/p6spy/wrapper/ConnectionWrapper.java", "commit_date": "2020-07-05 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u8fde\u63a5\u9664\u6b64 TM \u8282\u70b9\u4ee5\u5916 TM \u8282\u70b9\n */\n", "func_signal": "public void connectToOtherNode(ProtocolServer protocolServer)", "code": "{\n    List<InetSocketAddress> otherNodeList = this.getOtherNodeList();\n    otherNodeList.forEach(iNetSocketAddress ->\n            protocolServer.connectTo(iNetSocketAddress.getHostString(), iNetSocketAddress.getPort()));\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/node/TmNode.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * \u5c1d\u8bd5\u83b7\u5f97\u66f4\u591a TM \u8d44\u6e90\n */\n", "func_signal": "private void tryToGetMoreTmResource(List<InetSocketAddress> iNetSocketAddresses)", "code": "{\n    if (iNetSocketAddresses.size() < this.txConfig.getTmResource()) {\n        log.info(\"=> Try to get more Tm resource\");\n        OtherTmNodeEvent requestTmNodeEvent = new OtherTmNodeEvent().setOtherNodeList(iNetSocketAddresses);\n        OtherTmNodeEvent responseTmNodeEvent = (OtherTmNodeEvent) reporter.requestMsg(requestTmNodeEvent);\n        log.debug(\"=> tryToGetMoreTmResource.responseTmNodeEvent:{}\", responseTmNodeEvent.getOtherNodeList());\n        List<InetSocketAddress> otherNodeList = responseTmNodeEvent.getOtherNodeList();\n        iNetSocketAddresses.addAll(otherNodeList);\n        this.txConfig.setINetSocketAddresses(iNetSocketAddresses);\n    }\n}", "path": "tx-lcn/txlcn-tc/src/main/java/com/codingapi/txlcn/tc/runner/TmServerRunner.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/**\n * TM \u95f4\u4f20\u8f93\u6d88\u606f\n *\n * @param absMessage    AbsMessage\n * @param connection    TC \u7b2c\u4e00\u6b21\u8fde\u63a5 TM\n * @param otherNodeList \u9664\u4e86\u5934\u8282\u70b9 TM \u4ee5\u5916\u7684 TM\n * @return AbsMessage\n */\n", "func_signal": "public AbsMessage requestMsg(AbsMessage absMessage,\n                             Connection connection,\n                             List<InetSocketAddress> otherNodeList)", "code": "{\n    absMessage.setMessageId(UUID.randomUUID().toString());\n    // \u4e0d\u662f\u7b2c\u4e00\u4e2a\u63a5\u6536\u5230 TC \u6d88\u606f\u7684\u8282\u70b9\n    absMessage.setIsFirstNode(false);\n    selectLeaderWithoutTc(connection, otherNodeList);\n    selectLeader();\n    checkLeader();\n    return leader.request(absMessage);\n}", "path": "tx-lcn/txlcn-tm/src/main/java/com/codingapi/txlcn/tm/reporter/TmManagerReporter.java", "commit_date": "2020-09-14 00:00:00", "repo_name": "codingapi/tx-lcn", "stars": 4209, "license": "apache-2.0", "language": "java", "size": 14551}
{"docstring": "/** Array version of: {@link #glClientWaitSemaphoreui64NVX ClientWaitSemaphoreui64NVX} */\n", "func_signal": "public static void glClientWaitSemaphoreui64NVX(@NativeType(\"GLuint const *\") int[] semaphoreArray, @NativeType(\"GLuint64 const *\") long[] fenceValueArray)", "code": "{\n    long __functionAddress = GL.getICD().glClientWaitSemaphoreui64NVX;\n    if (CHECKS) {\n        check(__functionAddress);\n        check(fenceValueArray, semaphoreArray.length);\n    }\n    callPPV(semaphoreArray.length, semaphoreArray, fenceValueArray, __functionAddress);\n}", "path": "lwjgl3/modules/lwjgl/opengl/src/generated/java/org/lwjgl/opengl/NVXProgressFence.java", "commit_date": "2020-05-22 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Creates a {@code LLVMMemoryManagerAllocateCodeSectionCallback} instance from the specified function pointer.\n *\n * @return the new {@code LLVMMemoryManagerAllocateCodeSectionCallback}\n */\n", "func_signal": "public static LLVMMemoryManagerAllocateCodeSectionCallback create(long functionPointer)", "code": "{\n    LLVMMemoryManagerAllocateCodeSectionCallbackI instance = Callback.get(functionPointer);\n    return instance instanceof LLVMMemoryManagerAllocateCodeSectionCallback\n        ? (LLVMMemoryManagerAllocateCodeSectionCallback)instance\n        : new Container(functionPointer, instance);\n}", "path": "lwjgl3/modules/lwjgl/llvm/src/generated/java/org/lwjgl/llvm/LLVMMemoryManagerAllocateCodeSectionCallback.java", "commit_date": "2019-02-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Returns a new {@code XConfigureRequestEvent} instance allocated with {@link BufferUtils}. */\n", "func_signal": "public static XConfigureRequestEvent create()", "code": "{\n    ByteBuffer container = BufferUtils.createByteBuffer(SIZEOF);\n    return wrap(XConfigureRequestEvent.class, memAddress(container), container);\n}", "path": "lwjgl3/modules/lwjgl/core/src/generated/java/org/lwjgl/system/linux/XConfigureRequestEvent.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Returns a new {@code SpvcMslVertexAttribute} instance allocated with {@link BufferUtils}. */\n", "func_signal": "public static SpvcMslVertexAttribute create()", "code": "{\n    ByteBuffer container = BufferUtils.createByteBuffer(SIZEOF);\n    return wrap(SpvcMslVertexAttribute.class, memAddress(container), container);\n}", "path": "lwjgl3/modules/lwjgl/spvc/src/generated/java/org/lwjgl/util/spvc/SpvcMslVertexAttribute.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Array version of: {@link #glWaitSemaphoreui64NVX WaitSemaphoreui64NVX} */\n", "func_signal": "public static void glWaitSemaphoreui64NVX(@NativeType(\"GLuint\") int waitGpu, @NativeType(\"GLuint const *\") int[] semaphoreArray, @NativeType(\"GLuint64 const *\") long[] fenceValueArray)", "code": "{\n    long __functionAddress = GL.getICD().glWaitSemaphoreui64NVX;\n    if (CHECKS) {\n        check(__functionAddress);\n        check(fenceValueArray, semaphoreArray.length);\n    }\n    callPPV(waitGpu, semaphoreArray.length, semaphoreArray, fenceValueArray, __functionAddress);\n}", "path": "lwjgl3/modules/lwjgl/opengl/src/generated/java/org/lwjgl/opengl/NVXProgressFence.java", "commit_date": "2020-05-22 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Initializes this struct with the specified values. */\n", "func_signal": "public SpvcMslVertexAttribute set(\n    int location,\n    int msl_buffer,\n    int msl_offset,\n    int msl_stride,\n    boolean per_instance,\n    int format,\n    int builtin\n)", "code": "{\n    location(location);\n    msl_buffer(msl_buffer);\n    msl_offset(msl_offset);\n    msl_stride(msl_stride);\n    per_instance(per_instance);\n    format(format);\n    builtin(builtin);\n\n    return this;\n}", "path": "lwjgl3/modules/lwjgl/spvc/src/generated/java/org/lwjgl/util/spvc/SpvcMslVertexAttribute.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Initializes this struct with the specified values. */\n", "func_signal": "public XConfigureRequestEvent set(\n    int type,\n    long serial,\n    boolean send_event,\n    long display,\n    long parent,\n    long window,\n    int x,\n    int y,\n    int width,\n    int height,\n    int border_width,\n    long above,\n    int detail,\n    long value_mask\n)", "code": "{\n    type(type);\n    serial(serial);\n    send_event(send_event);\n    display(display);\n    parent(parent);\n    window(window);\n    x(x);\n    y(y);\n    width(width);\n    height(height);\n    border_width(border_width);\n    above(above);\n    detail(detail);\n    value_mask(value_mask);\n\n    return this;\n}", "path": "lwjgl3/modules/lwjgl/core/src/generated/java/org/lwjgl/system/linux/XConfigureRequestEvent.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Calls {@link #validate(long)} for each struct contained in the specified struct array.\n *\n * @param array the struct array to validate\n * @param count the number of structs in {@code array}\n */\n", "func_signal": "public static void validate(long array, int count)", "code": "{\n    for (int i = 0; i < count; i++) {\n        validate(array + Integer.toUnsignedLong(i) * SIZEOF);\n    }\n}", "path": "lwjgl3/modules/lwjgl/core/src/generated/java/org/lwjgl/system/linux/XConfigureRequestEvent.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** @param flags one of:<br><table><tr><td>{@link #RMTSF_None}</td><td>{@link #RMTSF_Aggregate}</td><td>{@link #RMTSF_Recursive}</td></tr></table> */\n", "func_signal": "public static void rmt_BeginCPUSample(@NativeType(\"rmtPStr\") ByteBuffer name, @NativeType(\"rmtU32\") int flags, @Nullable @NativeType(\"rmtU32 *\") IntBuffer hash_cache)", "code": "{\n    if (CHECKS) {\n        checkNT1(name);\n        checkSafe(hash_cache, 1);\n    }\n    nrmt_BeginCPUSample(memAddress(name), flags, memAddressSafe(hash_cache));\n}", "path": "lwjgl3/modules/lwjgl/remotery/src/generated/java/org/lwjgl/util/remotery/Remotery.java", "commit_date": "2018-11-28 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Returns a new {@link XConfigureRequestEvent.Buffer} instance allocated with {@link BufferUtils}.\n *\n * @param capacity the buffer capacity\n */\n", "func_signal": "public static XConfigureRequestEvent.Buffer create(int capacity)", "code": "{\n    ByteBuffer container = __create(capacity, SIZEOF);\n    return wrap(Buffer.class, memAddress(container), capacity, container);\n}", "path": "lwjgl3/modules/lwjgl/core/src/generated/java/org/lwjgl/system/linux/XConfigureRequestEvent.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Detects the best debug output functionality to use and creates a callback that prints information to the specified {@link PrintStream}. The callback\n * function is returned as a {@link Callback}, that should be {@link Callback#free freed} when no longer needed.\n *\n * @param stream the output {@link PrintStream}\n */\n", "func_signal": "@Nullable\npublic static Callback setupDebugMessageCallback(PrintStream stream)", "code": "{\n    GLCapabilities caps = GL.getCapabilities();\n\n    if (caps.OpenGL43) {\n        apiLog(\"[GL] Using OpenGL 4.3 for error logging.\");\n        GLDebugMessageCallback proc = GLDebugMessageCallback.create((source, type, id, severity, length, message, userParam) -> {\n            stream.println(\"[LWJGL] OpenGL debug message\");\n            printDetail(stream, \"ID\", String.format(\"0x%X\", id));\n            printDetail(stream, \"Source\", getDebugSource(source));\n            printDetail(stream, \"Type\", getDebugType(type));\n            printDetail(stream, \"Severity\", getDebugSeverity(severity));\n            printDetail(stream, \"Message\", GLDebugMessageCallback.getMessage(length, message));\n        });\n        glDebugMessageCallback(proc, NULL);\n        if ((glGetInteger(GL_CONTEXT_FLAGS) & GL_CONTEXT_FLAG_DEBUG_BIT) == 0) {\n            apiLog(\"[GL] Warning: A non-debug context may not produce any debug output.\");\n            glEnable(GL_DEBUG_OUTPUT);\n        }\n        return proc;\n    }\n\n    if (caps.GL_KHR_debug) {\n        apiLog(\"[GL] Using KHR_debug for error logging.\");\n        GLDebugMessageCallback proc = GLDebugMessageCallback.create((source, type, id, severity, length, message, userParam) -> {\n            stream.println(\"[LWJGL] OpenGL debug message\");\n            printDetail(stream, \"ID\", String.format(\"0x%X\", id));\n            printDetail(stream, \"Source\", getDebugSource(source));\n            printDetail(stream, \"Type\", getDebugType(type));\n            printDetail(stream, \"Severity\", getDebugSeverity(severity));\n            printDetail(stream, \"Message\", GLDebugMessageCallback.getMessage(length, message));\n        });\n        KHRDebug.glDebugMessageCallback(proc, NULL);\n        if (caps.OpenGL30 && (glGetInteger(GL_CONTEXT_FLAGS) & GL_CONTEXT_FLAG_DEBUG_BIT) == 0) {\n            apiLog(\"[GL] Warning: A non-debug context may not produce any debug output.\");\n            glEnable(GL_DEBUG_OUTPUT);\n        }\n        return proc;\n    }\n\n    if (caps.GL_ARB_debug_output) {\n        apiLog(\"[GL] Using ARB_debug_output for error logging.\");\n        GLDebugMessageARBCallback proc = GLDebugMessageARBCallback.create((source, type, id, severity, length, message, userParam) -> {\n            stream.println(\"[LWJGL] ARB_debug_output message\");\n            printDetail(stream, \"ID\", String.format(\"0x%X\", id));\n            printDetail(stream, \"Source\", getSourceARB(source));\n            printDetail(stream, \"Type\", getTypeARB(type));\n            printDetail(stream, \"Severity\", getSeverityARB(severity));\n            printDetail(stream, \"Message\", GLDebugMessageARBCallback.getMessage(length, message));\n        });\n        glDebugMessageCallbackARB(proc, NULL);\n        return proc;\n    }\n\n    if (caps.GL_AMD_debug_output) {\n        apiLog(\"[GL] Using AMD_debug_output for error logging.\");\n        GLDebugMessageAMDCallback proc = GLDebugMessageAMDCallback.create((id, category, severity, length, message, userParam) -> {\n            stream.println(\"[LWJGL] AMD_debug_output message\");\n            printDetail(stream, \"ID\", String.format(\"0x%X\", id));\n            printDetail(stream, \"Category\", getCategoryAMD(category));\n            printDetail(stream, \"Severity\", getSeverityAMD(severity));\n            printDetail(stream, \"Message\", GLDebugMessageAMDCallback.getMessage(length, message));\n        });\n        glDebugMessageCallbackAMD(proc, NULL);\n        return proc;\n    }\n\n    apiLog(\"[GL] No debug output implementation is available.\");\n    return null;\n}", "path": "lwjgl3/modules/lwjgl/opengl/src/main/java/org/lwjgl/opengl/GLUtil.java", "commit_date": "2018-06-14 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Array version of: {@link #glSignalSemaphoreui64NVX SignalSemaphoreui64NVX} */\n", "func_signal": "public static void glSignalSemaphoreui64NVX(@NativeType(\"GLuint\") int signalGpu, @NativeType(\"GLuint const *\") int[] semaphoreArray, @NativeType(\"GLuint64 const *\") long[] fenceValueArray)", "code": "{\n    long __functionAddress = GL.getICD().glSignalSemaphoreui64NVX;\n    if (CHECKS) {\n        check(__functionAddress);\n        check(fenceValueArray, semaphoreArray.length);\n    }\n    callPPV(signalGpu, semaphoreArray.length, semaphoreArray, fenceValueArray, __functionAddress);\n}", "path": "lwjgl3/modules/lwjgl/opengl/src/generated/java/org/lwjgl/opengl/NVXProgressFence.java", "commit_date": "2020-05-22 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Application-defined memory free function.\n * \n * <h5>C Specification</h5>\n * \n * <p>The type of {@code pfnFree} is:</p>\n * \n * <pre><code>\n * typedef void (VKAPI_PTR *PFN_vkFreeFunction)(\n *     void*                                       pUserData,\n *     void*                                       pMemory);</code></pre>\n * \n * <h5>Description</h5>\n * \n * <p>{@code pMemory} <b>may</b> be {@code NULL}, which the callback <b>must</b> handle safely. If {@code pMemory} is non-{@code NULL}, it <b>must</b> be a pointer previously allocated by {@code pfnAllocation} or {@code pfnReallocation}. The application <b>should</b> free this memory.</p>\n * \n * <h5>See Also</h5>\n * \n * <p>{@link VkAllocationCallbacks}</p>\n */\n", "func_signal": "@FunctionalInterface\n@NativeType(\"PFN_vkFreeFunction\")\npublic interface VkFreeFunctionI extends CallbackI.V", "code": "{\n\n    String SIGNATURE = Callback.__stdcall(\"(pp)v\");\n\n    @Override\n    default String getSignature() { return SIGNATURE; }\n\n    @Override\n    default void callback(long args) {\n        invoke(\n            dcbArgPointer(args),\n            dcbArgPointer(args)\n        );\n    }\n\n    /**\n     * Application-defined memory free function.\n     *\n     * @param pUserData the value specified for {@link VkAllocationCallbacks}{@code ::pUserData} in the allocator specified by the application.\n     * @param pMemory   the allocation to be freed.\n     */\n    void invoke(@NativeType(\"void *\") long pUserData, @NativeType(\"void *\") long pMemory);\n\n}", "path": "lwjgl3/modules/lwjgl/vulkan/src/generated/java/org/lwjgl/vulkan/VkFreeFunctionI.java", "commit_date": "2018-06-03 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Specifies the minimum number of video frame periods per buffer swap. (e.g. a value of two means that the color buffers will be swapped at most every\n * other video frame.)  A return value of zero indicates success; otherwise an error occurred.  The interval takes effect when {@link GLX#glXSwapBuffers SwapBuffers}\n * is first called subsequent to the {@code glXSwapIntervalSGI} call.\n * \n * <p>A video frame period is the time required by the monitor to display a full frame of video data.  In the case of an interlaced monitor, this is typically\n * the time required to display both the even and odd fields of a frame of video data.</p>\n *\n * @param interval the swap interval\n */\n", "func_signal": "@NativeType(\"GLint\")\npublic static int glXSwapIntervalSGI(int interval)", "code": "{\n    long __functionAddress = GL.getCapabilitiesGLXClient().glXSwapIntervalSGI;\n    if (CHECKS) {\n        check(__functionAddress);\n    }\n    return callI(interval, __functionAddress);\n}", "path": "lwjgl3/modules/lwjgl/opengl/src/generated/java/org/lwjgl/opengl/GLXSGISwapControl.java", "commit_date": "2020-05-22 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Copies the specified struct data to this struct.\n *\n * @param src the source struct\n *\n * @return this struct\n */\n", "func_signal": "public XConfigureRequestEvent set(XConfigureRequestEvent src)", "code": "{\n    memCopy(src.address(), address(), SIZEOF);\n    return this;\n}", "path": "lwjgl3/modules/lwjgl/core/src/generated/java/org/lwjgl/system/linux/XConfigureRequestEvent.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** Creates a {@code LLVMMemoryManagerAllocateCodeSectionCallback} instance that delegates to the specified {@code LLVMMemoryManagerAllocateCodeSectionCallbackI} instance. */\n", "func_signal": "public static LLVMMemoryManagerAllocateCodeSectionCallback create(LLVMMemoryManagerAllocateCodeSectionCallbackI instance)", "code": "{\n    return instance instanceof LLVMMemoryManagerAllocateCodeSectionCallback\n        ? (LLVMMemoryManagerAllocateCodeSectionCallback)instance\n        : new Container(instance.address(), instance);\n}", "path": "lwjgl3/modules/lwjgl/llvm/src/generated/java/org/lwjgl/llvm/LLVMMemoryManagerAllocateCodeSectionCallback.java", "commit_date": "2019-02-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * <h3>Type</h3>\n * \n * <pre><code>\n * void * (*) (\n *     void *mm_context,\n *     rmtU32 size\n * )</code></pre>\n */\n", "func_signal": "@FunctionalInterface\n@NativeType(\"rmtMallocPtr\")\npublic interface RMTMallocI extends CallbackI.P", "code": "{\n\n    String SIGNATURE = \"(pi)p\";\n\n    @Override\n    default String getSignature() { return SIGNATURE; }\n\n    @Override\n    default long callback(long args) {\n        return invoke(\n            dcbArgPointer(args),\n            dcbArgInt(args)\n        );\n    }\n\n    @NativeType(\"void *\") long invoke(@NativeType(\"void *\") long mm_context, @NativeType(\"rmtU32\") int size);\n\n}", "path": "lwjgl3/modules/lwjgl/remotery/src/generated/java/org/lwjgl/util/remotery/RMTMallocI.java", "commit_date": "2018-06-03 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Copies the specified struct data to this struct.\n *\n * @param src the source struct\n *\n * @return this struct\n */\n", "func_signal": "public SpvcMslVertexAttribute set(SpvcMslVertexAttribute src)", "code": "{\n    memCopy(src.address(), address(), SIZEOF);\n    return this;\n}", "path": "lwjgl3/modules/lwjgl/spvc/src/generated/java/org/lwjgl/util/spvc/SpvcMslVertexAttribute.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Returns a new {@link SpvcMslVertexAttribute.Buffer} instance allocated with {@link BufferUtils}.\n *\n * @param capacity the buffer capacity\n */\n", "func_signal": "public static SpvcMslVertexAttribute.Buffer create(int capacity)", "code": "{\n    ByteBuffer container = __create(capacity, SIZEOF);\n    return wrap(Buffer.class, memAddress(container), capacity, container);\n}", "path": "lwjgl3/modules/lwjgl/spvc/src/generated/java/org/lwjgl/util/spvc/SpvcMslVertexAttribute.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/** @param flags one of:<br><table><tr><td>{@link #RMTSF_None}</td><td>{@link #RMTSF_Aggregate}</td><td>{@link #RMTSF_Recursive}</td></tr></table> */\n", "func_signal": "public static void rmt_BeginCPUSample(@NativeType(\"rmtPStr\") CharSequence name, @NativeType(\"rmtU32\") int flags, @Nullable @NativeType(\"rmtU32 *\") IntBuffer hash_cache)", "code": "{\n    if (CHECKS) {\n        checkSafe(hash_cache, 1);\n    }\n    MemoryStack stack = stackGet(); int stackPointer = stack.getPointer();\n    try {\n        stack.nASCII(name, true);\n        long nameEncoded = stack.getPointerAddress();\n        nrmt_BeginCPUSample(nameEncoded, flags, memAddressSafe(hash_cache));\n    } finally {\n        stack.setPointer(stackPointer);\n    }\n}", "path": "lwjgl3/modules/lwjgl/remotery/src/generated/java/org/lwjgl/util/remotery/Remotery.java", "commit_date": "2018-11-28 00:00:00", "repo_name": "LWJGL/lwjgl3", "stars": 4527, "license": "bsd-3-clause", "language": "java", "size": 95208}
{"docstring": "/**\n * Returns the edit distance between two strings. Levenshtein charges the same cost for each\n * insertion or deletion. This algorithm is slightly more general in that it charges a sequence of\n * adjacent insertions/deletions an up-front cost plus an incremental cost per insert/delete\n * operation. The idea is that Christopher -&gt; Chris should be less than 6 times as expensive as\n * Christopher -&gt; Christophe. The algorithm used to calculate this distance takes time and\n * space proportional to the product of {@code source.length()} and {@code target.length()} to\n * build the 3 arrays.\n *\n * @param source source string.\n * @param target target string\n * @param caseSensitive if true, case is used in comparisons and 'a' != 'A'.\n * @param changeCost cost of changing one character\n * @param openGapCost cost to open a gap to insert or delete some characters.\n * @param continueGapCost marginal cost to insert or delete next character.\n * @return edit distance between the source and target strings.\n */\n", "func_signal": "public static int getEditDistance(\n    String source,\n    String target,\n    boolean caseSensitive,\n    int changeCost,\n    int openGapCost,\n    int continueGapCost)", "code": "{\n\n  if (!caseSensitive) {\n    source = Ascii.toLowerCase(source);\n    target = Ascii.toLowerCase(target);\n  }\n\n  int sourceLength = source.length();\n  int targetLength = target.length();\n\n  if (sourceLength == 0) {\n    return scriptCost(openGapCost, continueGapCost, targetLength);\n  }\n\n  if (targetLength == 0) {\n    return scriptCost(openGapCost, continueGapCost, sourceLength);\n  }\n\n  // mMatrix[i][j] = Cost of aligning source.substring(0,i) with\n  // target.substring(0,j), using an edit script ending with\n  // matched characters.\n  int[][] mMatrix = new int[sourceLength + 1][targetLength + 1];\n\n  // Cost of an alignment that ends with a bunch of deletions.\n  // dMatrix[i][j] = best found cost of changing the first i chars\n  // of source into the first j chars of target, ending with one\n  // or more deletes of source characters.\n  int[][] dMatrix = new int[sourceLength + 1][targetLength + 1];\n\n  // Cost of an alignment that ends with one or more insertions.\n  int[][] iMatrix = new int[sourceLength + 1][targetLength + 1];\n\n  mMatrix[0][0] = dMatrix[0][0] = iMatrix[0][0] = 0;\n\n  // Any edit script that changes i chars of source into zero\n  // chars of target will only involve deletions.  So only the\n  // d&m Matrix entries are relevant, because dMatrix[i][0] gives\n  // the cost of changing an i-length string into a 0-length string,\n  // using an edit script ending in deletions.\n  for (int i = 1; i <= sourceLength; i++) {\n    mMatrix[i][0] = dMatrix[i][0] = scriptCost(openGapCost, continueGapCost, i);\n\n    // Make the iMatrix entries impossibly expensive, so they'll be\n    // ignored as inputs to min().  Use a big cost but not\n    // max int because that will overflow if anything's added to it.\n    iMatrix[i][0] = Integer.MAX_VALUE / 2;\n  }\n\n  for (int j = 1; j <= targetLength; j++) {\n\n    // Only the i&m Matrix entries are relevant here, because they represent\n    // the cost of changing a 0-length string into a j-length string, using\n    // an edit script ending in insertions.\n    mMatrix[0][j] = iMatrix[0][j] = scriptCost(openGapCost, continueGapCost, j);\n\n    // Make the dMatrix entries impossibly expensive, so they'll be\n    // ignored as inputs to min().  Use a big cost but not\n    // max int because that will overflow if anything's added to it.\n    dMatrix[0][j] = Integer.MAX_VALUE / 2;\n  }\n\n  for (int i = 1; i <= sourceLength; i++) {\n\n    char sourceI = source.charAt(i - 1);\n    for (int j = 1; j <= targetLength; j++) {\n      char targetJ = target.charAt(j - 1);\n\n      int cost = (sourceI == targetJ) ? 0 : changeCost;\n\n      // Cost of changing i chars of source into j chars of target,\n      // using an edit script ending in matched characters.\n      mMatrix[i][j] =\n          cost + Ints.min(mMatrix[i - 1][j - 1], iMatrix[i - 1][j - 1], dMatrix[i - 1][j - 1]);\n\n      // Cost of an edit script ending in a deletion.\n      dMatrix[i][j] =\n          Math.min(\n              mMatrix[i - 1][j] + openGapCost + continueGapCost,\n              dMatrix[i - 1][j] + continueGapCost);\n\n      // Cost of an edit script ending in an insertion.\n      iMatrix[i][j] =\n          Math.min(\n              mMatrix[i][j - 1] + openGapCost + continueGapCost,\n              iMatrix[i][j - 1] + continueGapCost);\n    }\n  }\n\n  // Return the minimum cost.\n  int costOfEditScriptEndingWithMatch = mMatrix[sourceLength][targetLength];\n  int costOfEditScriptEndingWithDelete = dMatrix[sourceLength][targetLength];\n  int costOfEditScriptEndingWithInsert = iMatrix[sourceLength][targetLength];\n  return Ints.min(\n      costOfEditScriptEndingWithMatch,\n      costOfEditScriptEndingWithDelete,\n      costOfEditScriptEndingWithInsert);\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/names/NeedlemanWunschEditDistance.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** Return the worst case edit distance between strings of this length */\n", "func_signal": "public static int getWorstCaseEditDistance(\n    int sourceLength, int targetLength, int changeCost, int openGapCost, int continueGapCost)", "code": "{\n\n  int maxLen = Math.max(sourceLength, targetLength);\n  int minLen = Math.min(sourceLength, targetLength);\n\n  // Compute maximum cost of changing one string into another.  If the\n  // lengths differ, you'll need maxLen - minLen insertions or deletions.\n  int totChangeCost =\n      scriptCost(openGapCost, continueGapCost, maxLen - minLen) + minLen * changeCost;\n\n  // Another possibility is to just delete the entire source and insert the\n  // target, and not do any changes.\n  int blowAwayCost =\n      scriptCost(openGapCost, continueGapCost, sourceLength)\n          + scriptCost(openGapCost, continueGapCost, targetLength);\n\n  return Math.min(totChangeCost, blowAwayCost);\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/names/NeedlemanWunschEditDistance.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** For now, this isn't supported. */\n", "func_signal": "public static void multipleCatches()", "code": "{\n  try {\n    dummyMethod();\n    Assert.fail(\"1234\");\n  } catch (Error e) {\n    dummyRecover();\n  } catch (Throwable t) {\n    dummyRecover();\n  }\n}", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/TryFailThrowableNegativeCases.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** Returns true if all declarations inside the given compilation unit have been visited. */\n", "func_signal": "private boolean finishedCompilation(CompilationUnitTree tree)", "code": "{\n  OUTER:\n  for (Tree decl : tree.getTypeDecls()) {\n    switch (decl.getKind()) {\n      case EMPTY_STATEMENT:\n        // ignore \";\" at the top level, which counts as an empty type decl\n        continue OUTER;\n      case IMPORT:\n        // The spec disallows mixing imports and empty top-level declarations (\";\"), but\n        // javac has a bug that causes it to accept empty declarations interspersed with imports:\n        // http://mail.openjdk.java.net/pipermail/compiler-dev/2013-August/006968.html\n        //\n        // Any import declarations after the first semi are incorrectly added to the list\n        // of type declarations, so we have to skip over them here.\n        continue OUTER;\n      default:\n        break;\n    }\n    if (!seen.contains(decl)) {\n      return false;\n    }\n  }\n  return true;\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/ErrorProneAnalyzer.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// @CompatibleWith(\"X\"), @CompatibleWith(value = \"X\"),\n// @CompatibleWith(SOME_FIELD_WHOSE_CONSTANT_VALUE_IS_X)\n// => X\n// This function assumes the the annotation tree will only have one argument, of type String, that\n// is required.\n", "func_signal": "private String valueArgumentFromCompatibleWithAnnotation(AnnotationTree tree)", "code": "{\n  ExpressionTree argumentValue = Iterables.getOnlyElement(tree.getArguments());\n  if (argumentValue.getKind() != Kind.ASSIGNMENT) {\n    // :-| Annotation symbol broken. Punt?\n    return null;\n  }\n\n  return ASTHelpers.constValue(((AssignmentTree) argumentValue).getExpression(), String.class);\n}", "path": "error-prone/core/src/main/java/com/google/errorprone/bugpatterns/collectionincompatibletype/CompatibleWithMisuse.java", "commit_date": "2019-02-22 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// If a statement is inside an if statement with no block braces, the NextStatement should return\n// false, since there's no other statement inside the block.\n", "func_signal": "@Test\npublic void testSingleStatementBlock()", "code": "{\n  CompilationTestHelper.newInstance(CompoundBeforeAnythingChecker.class, getClass())\n      .addSourceLines(\n          \"B.java\",\n          \"public class B {\",\n          \"  public boolean getHash() {\",\n          \"    int a = 0;\",\n          \"    if (true) a += 1;\",\n          \"    else a += 2;\",\n          \"    return false;\",\n          \"  }\",\n          \"}\")\n      .doTest();\n}", "path": "error-prone/core/src/test/java/com/google/errorprone/matchers/NextStatementTest.java", "commit_date": "2019-08-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** Returns a string representation of the imports as Java code in correct order. */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n  if (importStrings.isEmpty()) {\n    return \"\";\n  }\n\n  StringBuilder result = new StringBuilder();\n\n  if (!hasExistingImports) {\n    // insert a newline after the package expression, then add imports\n    result.append('\\n');\n  }\n\n  List<ImportOrganizer.Import> imports =\n      importStrings.stream().map(ImportOrganizer.Import::importOf).collect(Collectors.toList());\n\n  // Organize the imports.\n  ImportOrganizer.OrganizedImports organizedImports = importOrganizer.organizeImports(imports);\n\n  // Make sure that every import was organized.\n  int expectedImportCount = imports.size();\n  int importCount = organizedImports.getImportCount();\n  if (importCount != expectedImportCount) {\n    throw new IllegalStateException(\n        String.format(\n            \"Expected %d import(s) in the organized imports but it contained %d\",\n            expectedImportCount, importCount));\n  }\n\n  // output organized imports\n  result.append(organizedImports.asImportBlock());\n\n  String replacementString = result.toString();\n  if (!hasExistingImports) {\n    return replacementString;\n  } else {\n    return CharMatcher.whitespace().trimTrailingFrom(replacementString); // trim last newline\n  }\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/apply/ImportStatements.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// deprecated in JUnit 4.11\n", "func_signal": "public static void codeCatch_oldAssertFail()", "code": "{\n   try {\n     dummyMethod();\n     junit.framework.Assert.fail();\n   } catch (Throwable codeCatch_oldAssertFail) {\n     dummyRecover();\n   }\n }", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/TryFailThrowableNegativeCases.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** break inner loop. */\n", "func_signal": "public void test5()", "code": "{\n  label:\n  while (true) {\n    try {\n    } finally {\n      while (true) {\n        break;\n      }\n    }\n  }\n}", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/FinallyNegativeCase1.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** Returns true if the given source file should be excluded from analysis. */\n", "func_signal": "private boolean shouldExcludeSourceFile(CompilationUnitTree tree)", "code": "{\n  Pattern excludedPattern = errorProneOptions.getExcludedPattern();\n  return excludedPattern != null\n      && excludedPattern.matcher(ASTHelpers.getFileName(tree)).matches();\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/ErrorProneAnalyzer.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// deprecated in JUnit 4.11\n", "func_signal": "public static void codeCatch_oldAssertFailWithMessage()", "code": "{\n   try {\n     dummyMethod();\n     junit.framework.Assert.fail(\"message\");\n   } catch (Throwable codeCatch_oldAssertFailWithMessage) {\n     dummyRecover();\n   }\n }", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/TryFailThrowableNegativeCases.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// BUG: Diagnostic contains:\",\n", "func_signal": "\"  public void f(@CompileTimeConstant Object x, @CompileTimeConstant Object y)", "code": "{\",\n          \"    x = y = null;\",\n          \"  }", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/NonFinalCompileTimeConstantTest.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** break statement jumps out of switch. */\n", "func_signal": "public void test7()", "code": "{\n  int i = 10;\n  while (true) {\n    try {\n    } finally {\n      switch (i) {\n        case 10:\n          break;\n      }\n    }\n  }\n}", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/FinallyNegativeCase1.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// b/79407644: Because AppliedFix doesn't consider imports, just don't display a\n// suggested fix to an ImportTree when the fix reports imports to remove/add. Imports can still\n// be fixed if they were specified via SuggestedFix.replace, for example.\n", "func_signal": "private static boolean shouldSkipImportTreeFix(DiagnosticPosition position, Fix f)", "code": "{\n  if (position.getTree() != null && position.getTree().getKind() != Kind.IMPORT) {\n    return false;\n  }\n\n  return !f.getImportsToAdd().isEmpty() || !f.getImportsToRemove().isEmpty();\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/JavacErrorDescriptionListener.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// BUG: Diagnostic contains:\",\n", "func_signal": "\"  public void f(@CompileTimeConstant Object x)", "code": "{\",\n          \"    x = null;\",\n          \"  }", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/NonFinalCompileTimeConstantTest.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/**\n * Returns a normalized edit distance between 0 and 1. This is useful if you are comparing or\n * aggregating distances of different pairs of strings\n */\n", "func_signal": "public static double getNormalizedEditDistance(\n    String source,\n    String target,\n    boolean caseSensitive,\n    int changeCost,\n    int openGapCost,\n    int continueGapCost)", "code": "{\n\n  if (source.isEmpty() && target.isEmpty()) {\n    return 0.0;\n  }\n\n  return (double)\n          getEditDistance(source, target, caseSensitive, changeCost, openGapCost, continueGapCost)\n      / (double)\n          getWorstCaseEditDistance(\n              source.length(), target.length(), changeCost, openGapCost, continueGapCost);\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/names/NeedlemanWunschEditDistance.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/**\n * Creates a TermEditDistance Object\n *\n * @param editDistanceFn function to compute the distance between two terms\n * @param maxDistanceFn function to compute the worst case distance between two terms\n */\n", "func_signal": "public TermEditDistance(\n    BiFunction<String, String, Double> editDistanceFn,\n    BiFunction<Integer, Integer, Double> maxDistanceFn)", "code": "{\n  this.editDistanceFn = editDistanceFn;\n  this.maxDistanceFn = maxDistanceFn;\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/names/TermEditDistance.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/**\n * Compute the total cost of this assignment including the costs of unassigned source and target\n * terms.\n */\n", "func_signal": "private static double computeCost(\n    int[] assignments,\n    double[][] costMatrix,\n    double[] sourceTermDeletionCosts,\n    double[] targetTermDeletionCosts)", "code": "{\n\n  // We need to sum the costs of each assigned pair, each unassigned source term, and each\n  // unassigned target term.\n\n  // Start with the total cost of _not_ using all the target terms, then when we use one we'll\n  // remove it from this total.\n  double totalCost = DoubleStream.of(targetTermDeletionCosts).sum();\n  for (int sourceTermIndex = 0; sourceTermIndex < assignments.length; sourceTermIndex++) {\n    int targetTermIndex = assignments[sourceTermIndex];\n    if (targetTermIndex == -1) {\n      // not using this source term\n      totalCost += sourceTermDeletionCosts[sourceTermIndex];\n    } else {\n      // add the cost of the assignments\n      totalCost += costMatrix[sourceTermIndex][targetTermIndex];\n\n      // we are using this target term and so we should remove the cost of deleting it\n      totalCost -= targetTermDeletionCosts[targetTermIndex];\n    }\n  }\n  return totalCost;\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/names/TermEditDistance.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/** continue statement jumps out of inner for. */\n", "func_signal": "public void test6()", "code": "{\n  label:\n  for (; ; ) {\n    try {\n    } finally {\n      for (; ; ) {\n        continue;\n      }\n    }\n  }\n}", "path": "error-prone/core/src/test/java/com/google/errorprone/bugpatterns/testdata/FinallyNegativeCase1.java", "commit_date": "2017-12-20 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "// Helper for common case of escaping a single char.\n", "func_signal": "private static char[] asUnicodeHexEscape(char c)", "code": "{\n  // Equivalent to String.format(\"\\\\u%04x\", (int)c);\n  char[] r = new char[6];\n  r[0] = '\\\\';\n  r[1] = 'u';\n  r[5] = HEX_DIGITS[c & 0xF];\n  c >>>= 4;\n  r[4] = HEX_DIGITS[c & 0xF];\n  c >>>= 4;\n  r[3] = HEX_DIGITS[c & 0xF];\n  c >>>= 4;\n  r[2] = HEX_DIGITS[c & 0xF];\n  return r;\n}", "path": "error-prone/check_api/src/main/java/com/google/errorprone/util/SourceCodeEscapers.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "google/error-prone", "stars": 6679, "license": "apache-2.0", "language": "java", "size": 127553}
{"docstring": "/**\n * Creates a {@link LazyCacheEntryView} instance.\n *\n * @param key       the key to be wrapped\n * @param value     the value to be wrapped\n * @param record    {@link CacheRecord} instance to gather additional entry view properties like access time,\n *                  expiration time and access hit\n * @return the {@link LazyCacheEntryView} instance\n */\n", "func_signal": "public static CacheEntryView<Data, Data> toLazyCacheEntryView(Data key, Data value, Data expiryPolicy, CacheRecord record)", "code": "{\n    return new LazyCacheEntryView<>(key, value,\n            record.getCreationTime(),\n            record.getExpirationTime(),\n            record.getLastAccessTime(),\n            record.getHits(),\n            expiryPolicy);\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryViews.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Copies all the items from the given {@code sequence} up to the\n * tail. If the item at the sequence number is already dropped, start from\n * the oldest item.\n *\n * @throws IllegalArgumentException If the sequence is in the future.\n */\n", "func_signal": "public synchronized RingbufferSlice<E> copyFrom(long sequence)", "code": "{\n    sequence = Math.max(sequence, head);\n    if (sequence == tail) {\n        return new RingbufferSlice(EMPTY_ARRAY, tail);\n    }\n    checkSequence(sequence);\n    E[] result = (E[]) new Object[(int) (tail - sequence)];\n    int startPoint = toIndex(sequence);\n    int endPoint = toIndex(tail);\n    if (startPoint >= endPoint) {\n        arraycopy(ringItems, startPoint, result, 0, capacity - startPoint);\n        arraycopy(ringItems, 0, result, capacity - startPoint, endPoint);\n    } else {\n        arraycopy(ringItems, startPoint, result, 0, endPoint - startPoint);\n    }\n    return new RingbufferSlice<>(result, tail);\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/internal/metrics/managementcenter/ConcurrentArrayRingbuffer.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Set true for non blocking {@link HazelcastClient#newHazelcastClient()}. The client creation won't wait to\n * connect to cluster. The client instace will throw exception until it connects to cluster and become ready.\n * If set to false, {@link HazelcastClient#newHazelcastClient()} will block until a cluster connection established and it's\n * ready to use client instance\n *\n * default value is false\n *\n * @param asyncStart true for async client creation\n * @return the updated ClientConnectionStrategyConfig\n */\n", "func_signal": "public ClientConnectionStrategyConfig setAsyncStart(boolean asyncStart)", "code": "{\n    this.asyncStart = asyncStart;\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/client/config/ClientConnectionStrategyConfig.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Creates a {@link DefaultCacheEntryView} instance.\n *\n * @param key       the key to be wrapped\n * @param value     the value to be wrapped\n * @param record    {@link CacheRecord} instance to gather additional entry view properties like access time,\n *                  expiration time and access hit\n * @return the {@link DefaultCacheEntryView} instance\n */\n", "func_signal": "public static CacheEntryView<Data, Data> createDefaultEntryView(Data key, Data value, Data expiryPolicy,\n                                                                CacheRecord<Object, Data> record)", "code": "{\n    return new DefaultCacheEntryView(key, value,\n            record.getCreationTime(),\n            record.getExpirationTime(),\n            record.getLastAccessTime(),\n            record.getHits(),\n            expiryPolicy);\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryViews.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Appends an item to the ring buffer. If size == capacity, also drops the\n * oldest item.\n */\n", "func_signal": "public synchronized void add(E item)", "code": "{\n    if (tail - capacity == head) {\n        head++;\n    }\n    ringItems[toIndex(tail++)] = item;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/internal/metrics/managementcenter/ConcurrentArrayRingbuffer.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "// only for testing\n", "func_signal": "public int accumulatorInfoCountOfMap(String mapName)", "code": "{\n    ConcurrentMap<String, AccumulatorInfo> accumulatorInfo = cacheInfoPerMap.get(mapName);\n    if (accumulatorInfo == null) {\n        return 0;\n    } else {\n        return accumulatorInfo.size();\n    }\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultAccumulatorInfoSupplier.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Sets the properties.\n *\n * @param properties the properties to set\n * @return the updated config object (self)\n * @throws IllegalArgumentException if properties is {@code null}\n */\n", "func_signal": "public T setProperties(@Nonnull Properties properties)", "code": "{\n    if (properties == null) {\n        throw new IllegalArgumentException(\"properties can't be null\");\n    }\n    this.properties = properties;\n    return self();\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "commit_date": "2020-08-10 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * How a client reconnect to cluster after a disconnect can be configured. This parameter is used by default strategy and\n * custom implementations may ignore it if configured.\n * default value is {@link ReconnectMode#ON}\n *\n * @param reconnectMode the reconnect mode\n * @return the updated ClientConnectionStrategyConfig\n */\n", "func_signal": "public ClientConnectionStrategyConfig setReconnectMode(ReconnectMode reconnectMode)", "code": "{\n    this.reconnectMode = reconnectMode;\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/client/config/ClientConnectionStrategyConfig.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Connection Retry Config is controls the period among the retries and when should a client gave up\n * retrying. Exponential behaviour can be chosen or jitter can be added to wait periods.\n *\n * @param connectionRetryConfig the connection retry config\n * @return the updated ClientConnectionStrategyConfig\n */\n", "func_signal": "public ClientConnectionStrategyConfig setConnectionRetryConfig(ConnectionRetryConfig connectionRetryConfig)", "code": "{\n    this.connectionRetryConfig = connectionRetryConfig;\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/client/config/ClientConnectionStrategyConfig.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Creates a {@link CacheEntryView} instance.\n *\n * @param key                   the key to be wrapped\n * @param value                 the value to be wrapped\n * @param record                {@link CacheRecord} instance to gather additional entry view properties like\n *                              access time, expiration time and access hit\n * @param cacheEntryViewType    the type of the {@link CacheEntryView} represented as {@link CacheEntryViewType}\n * @return the {@link CacheEntryView} instance\n */\n", "func_signal": "public static CacheEntryView<Data, Data> createEntryView(Data key, Data value, Data expiryPolicy, CacheRecord record,\n                                                         CacheEntryViewType cacheEntryViewType)", "code": "{\n    if (cacheEntryViewType == null) {\n        throw new IllegalArgumentException(\"Empty cache entry view type\");\n    }\n    switch (cacheEntryViewType) {\n        case DEFAULT:\n            return createDefaultEntryView(key, value, expiryPolicy, record);\n        case LAZY:\n            return toLazyCacheEntryView(key, value, expiryPolicy, record);\n        default:\n            throw new IllegalArgumentException(\"Invalid cache entry view type: \" + cacheEntryViewType);\n    }\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryViews.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Sets the factory class name.\n */\n", "func_signal": "public T setFactoryClassName(@Nonnull String factoryClassName)", "code": "{\n    this.factoryClassName =  checkHasText(factoryClassName, \"The factoryClassName cannot be null!\");\n    return self();\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "commit_date": "2020-08-10 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Name of the Queue\n */\n", "func_signal": "public static java.lang.String decodeRequest(ClientMessage clientMessage)", "code": "{\n    ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();\n    //empty initial frame\n    iterator.next();\n    return StringCodec.decode(iterator);\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/QueueClearCodec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Sets the MemberGroupType. A @{link MemberGroupType#CUSTOM} indicates that custom groups are created.\n * With the {@link MemberGroupType#HOST_AWARE} group type, Hazelcast makes a group for every host, that prevents\n * a single host containing primary and backup. See the {@link MemberGroupConfig} for more information.\n *\n * @param memberGroupType the MemberGroupType to set\n * @return the updated PartitionGroupConfig\n * @throws IllegalArgumentException if memberGroupType is {@code null}\n * @see #getGroupType()\n */\n", "func_signal": "public PartitionGroupConfig setGroupType(MemberGroupType memberGroupType)", "code": "{\n    this.groupType = isNotNull(memberGroupType, \"memberGroupType\");\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Enables and disables this configuration.\n *\n * @param enabled {@code true} to enable, {@code false} to disable\n */\n", "func_signal": "public T setEnabled(boolean enabled)", "code": "{\n    this.enabled = enabled;\n    return self();\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "commit_date": "2020-08-10 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Enables or disables this PartitionGroupConfig.\n *\n * @param enabled {@code true} to enable, {@code false} to disable\n * @return the updated PartitionGroupConfig\n */\n", "func_signal": "public PartitionGroupConfig setEnabled(final boolean enabled)", "code": "{\n    this.enabled = enabled;\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Increments/decrements counter by adding supplied delta.\n * When counter is exceeded preconfigured node-wide limit,\n * this method throws {@link ReachedMaxSizeException}.\n *\n * @param delta capacity to be added or subtracted.\n * @throws ReachedMaxSizeException\n */\n", "func_signal": "public void checkAndAddCapacityOrThrowException(int delta)", "code": "{\n    if (delta == 0) {\n        return;\n    }\n\n    long currentCapacity = nodeWideUsedCapacityCounter.get();\n    long newCapacity = currentCapacity + delta;\n\n    if (newCapacity < 0) {\n        return;\n    }\n\n    if (delta > 0 && maxPerNodeCapacity < newCapacity) {\n        throwException(currentCapacity, maxPerNodeCapacity, delta);\n    }\n\n    while (!nodeWideUsedCapacityCounter.compareAndSet(currentCapacity, newCapacity)) {\n        currentCapacity = nodeWideUsedCapacityCounter.get();\n        newCapacity = currentCapacity + delta;\n\n        if (newCapacity < 0) {\n            return;\n        }\n\n        if (delta > 0 && maxPerNodeCapacity < newCapacity) {\n            throwException(currentCapacity, maxPerNodeCapacity, delta);\n        }\n    }\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/NodeWideUsedCapacityCounter.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Adds a {@link MemberGroupConfig}. Duplicate elements are not filtered.\n *\n * @param memberGroupConfig the MemberGroupConfig to add\n * @return the updated PartitionGroupConfig\n * @throws IllegalArgumentException if memberGroupConfig is {@code null}\n * @see #addMemberGroupConfig(MemberGroupConfig)\n */\n", "func_signal": "public PartitionGroupConfig addMemberGroupConfig(MemberGroupConfig memberGroupConfig)", "code": "{\n    memberGroupConfigs.add(isNotNull(memberGroupConfig, \"memberGroupConfig\"));\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * The number of values that match the given key in the multimap\n */\n", "func_signal": "public static int decodeResponse(ClientMessage clientMessage)", "code": "{\n    ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();\n    ClientMessage.Frame initialFrame = iterator.next();\n    return decodeInt(initialFrame.content, RESPONSE_RESPONSE_FIELD_OFFSET);\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/MultiMapValueCountCodec.java", "commit_date": "2020-10-12 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Sets the EventListener implementation.\n * <p>\n * If a className was set, it will be removed.\n *\n * @param implementation the EventListener implementation\n * @return the updated ListenerConfig\n * @throws IllegalArgumentException the implementation is {@code null}\n * @see #setClassName(String)\n * @see #getImplementation()\n */\n", "func_signal": "public ListenerConfig setImplementation(EventListener implementation)", "code": "{\n    this.implementation = checkNotNull(implementation, \"Event listener cannot be null!\");\n    this.className = null;\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/ListenerConfig.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Removes all the {@link MemberGroupType} instances.\n *\n * @return the updated PartitionGroupConfig\n * @see #setMemberGroupConfigs(java.util.Collection)\n */\n", "func_signal": "public PartitionGroupConfig clear()", "code": "{\n    memberGroupConfigs.clear();\n    return this;\n}", "path": "hazelcast/hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "hazelcast/hazelcast", "stars": 5785, "license": "other", "language": "java", "size": 390163}
{"docstring": "/**\n * Returns a string representation of an object that can be used in the 'image' constructor argument of {@link\n * GroupingNode}. This method ensures that strings are quoted, and that all complex characters are escaped.\n *\n * @param obj The object to output.\n * @return The string representation.\n */\n", "func_signal": "public static String asImage(Object obj)", "code": "{\n    if (!(obj instanceof String)) {\n        return obj.toString();\n    }\n    return UnicodeUtilities.quote((String)obj, '\"');\n}", "path": "vespa/container-search/src/main/java/com/yahoo/search/grouping/request/GroupingExpression.java", "commit_date": "2018-08-15 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Return whether this model has sample information.\n * Don't bother to check every node as files either has this for all nodes or for none.\n */\n", "func_signal": "private boolean hasSampleInformation()", "code": "{\n    if (trees.size() == 0) return true; // no matter\n    return trees.get(0).samples() !=null;\n}", "path": "vespa/searchlib/src/main/java/com/yahoo/searchlib/gbdt/GbdtModel.java", "commit_date": "2018-07-05 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * RewritesAsEquiv is on\n */\n", "func_signal": "@Test\npublic void testRewritesAsEquiv()", "code": "{\n    utils.assertRewrittenQuery(\"?query=will smith&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_EQUIV + \"=true&\",\n                               \"query 'OR (AND will smith) (AND will smith movies) \" +\n                               \"(AND will smith news) (AND will smith imdb) \" +\n                               \"(AND will smith lyrics) (AND will smith dead) \" +\n                               \"(AND will smith nfl) (AND will smith new movie hancock) \" +\n                               \"(AND will smith biography)'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/** Creates either an empty provider or a provider having the given infrastructure deployer */\n", "func_signal": "public static InfraDeployerProvider from(Optional<InfraDeployer> infraDeployer)", "code": "{\n    if (infraDeployer.isPresent())\n        return withInfraDeployer(infraDeployer.get());\n    else\n        return empty();\n}", "path": "vespa/configserver/src/main/java/com/yahoo/vespa/config/server/deploy/InfraDeployerProvider.java", "commit_date": "2019-05-09 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * RewritesAsUnitEquiv is on\n */\n", "func_signal": "@Test\npublic void testRewritesAsUnitEquiv()", "code": "{\n    utils.assertRewrittenQuery(\"?query=will smith&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_UNIT_EQUIV +\n                               \"=true\",\n                               \"query 'OR (AND will smith) \\\"will smith movies\\\" \" +\n                               \"\\\"will smith news\\\" \\\"will smith imdb\\\" \" +\n                               \"\\\"will smith lyrics\\\" \\\"will smith dead\\\" \" +\n                               \"\\\"will smith nfl\\\" \\\"will smith new movie hancock\\\" \" +\n                               \"\\\"will smith biography\\\"'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * RewritesAsUnitEquiv is on and MaxRewrites is set to 2\n */\n", "func_signal": "@Test\npublic void testRewritesAsUnitEquivAndMaxRewrites()", "code": "{\n    utils.assertRewrittenQuery(\"?query=will smith&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_UNIT_EQUIV +\n                               \"=true&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.MAX_REWRITES + \"=2\",\n                               \"query 'OR (AND will smith) \\\"will smith movies\\\" \" +\n                               \"\\\"will smith news\\\"'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Returns the conceptual level of this expression.\n *\n * @return the level.\n * @throws IllegalArgumentException thrown if the level of this expression has not been resolved.\n * @see #resolveLevel(int)\n */\n", "func_signal": "public int getLevel()", "code": "{\n    if (level == null) {\n        throw new IllegalStateException(\"Level for expression '\" + this + \"' has not been resolved.\");\n    }\n    return level;\n}", "path": "vespa/container-search/src/main/java/com/yahoo/search/grouping/request/GroupingExpression.java", "commit_date": "2018-08-15 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "// for testing\n", "func_signal": "public static InfraDeployerProvider withInfraDeployer(InfraDeployer infraDeployer)", "code": "{\n    ComponentRegistry<InfraDeployer> registry = new ComponentRegistry<>();\n    registry.register(ComponentId.createAnonymousComponentId(\"foobar\"), infraDeployer);\n    return new InfraDeployerProvider(registry, new ConfigserverConfig(new ConfigserverConfig.Builder().hostedVespa(true)));\n}", "path": "vespa/configserver/src/main/java/com/yahoo/vespa/config/server/deploy/InfraDeployerProvider.java", "commit_date": "2019-05-09 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Single word query for RewritesAsEquiv and OriginalAsUnit on case\n */\n", "func_signal": "@Test\npublic void testSingleWordForRewritesAsEquivAndOriginalAsUnit()", "code": "{\n    utils.assertRewrittenQuery(\"?query=obama&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_EQUIV + \"=true&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.ORIGINAL_AS_UNIT + \"=true\",\n                               \"query 'OR obama (AND obama \\\"nobel peace prize\\\") \" +\n                               \"(AND obama wiki) (AND obama nobel prize) \" +\n                               \"(AND obama nobel peace prize) (AND obama wears mom jeans) \" +\n                               \"(AND obama sucks) (AND obama news) (AND malia obama) \" +\n                               \"(AND obama speech) (AND obama nobel) (AND obama wikipedia) \" +\n                               \"(AND barack obama biography) (AND obama snl) \" +\n                               \"(AND obama peace prize) (AND michelle obama) (AND barack obama)'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * No match in FSA for the query\n * RewritesAsEquiv and OriginalAsUnit on case\n */\n", "func_signal": "@Test\npublic void testFSANoMatchForRewritesAsEquivAndOriginalAsUnit()", "code": "{\n    utils.assertRewrittenQuery(\"?query=tom cruise&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_EQUIV + \"=true&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.ORIGINAL_AS_UNIT + \"=true\",\n                               \"query 'AND tom cruise'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Resolves the conceptual level of this expression. This level represents the type of data that is consumed by this\n * expression, where level 0 is a single hit, level 1 is a group, level 2 is a list of groups, and so forth. This\n * method verifies the input level against the expression type, and recursively resolves the level of all argument\n * expressions.\n *\n * @param level The level of the input data.\n * @throws IllegalArgumentException Thrown if the level of this expression could not be resolved.\n * @throws IllegalStateException    Thrown if type failed to accept the number of arguments provided.\n */\n", "func_signal": "public void resolveLevel(int level)", "code": "{\n    if (level < 0) {\n        throw new IllegalArgumentException(\"Expression '\" + this + \"' recurses through a single hit.\");\n    }\n    this.level = level;\n}", "path": "vespa/container-search/src/main/java/com/yahoo/search/grouping/request/GroupingExpression.java", "commit_date": "2018-08-15 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Collapse logic. Preserves only maxHitsPerField hits\n * for each unique value of the collapsing parameter.\n */\n", "func_signal": "private void collapse(Result result, Map<String, Integer> knownCollapses,\n                      Result resultSource, String collapseField, int collapseSize)", "code": "{\n    for (Iterator<Hit> it = resultSource.hits().iterator(); it.hasNext();) {\n        Hit unknownHit = it.next();\n\n        if (!(unknownHit instanceof FastHit)) {\n            result.hits().add(unknownHit);\n            continue;\n        }\n        FastHit hit = (FastHit) unknownHit;\n        Object peek = hit.getField(collapseField);\n        String collapseId = peek != null ? peek.toString() : null;\n        if (collapseId == null) {\n            result.hits().add(hit);\n            continue;\n        }\n\n        if (knownCollapses.containsKey(collapseId)) {\n            int numHitsThisField = knownCollapses.get(collapseId);\n\n            if (numHitsThisField < collapseSize) {\n                result.hits().add(hit);\n                ++numHitsThisField;\n                knownCollapses.put(collapseId, numHitsThisField);\n            }\n        } else {\n            knownCollapses.put(collapseId, 1);\n            result.hits().add(hit);\n        }\n    }\n}", "path": "vespa/container-search/src/main/java/com/yahoo/prelude/searcher/FieldCollapsingSearcher.java", "commit_date": "2019-10-31 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Single word query for RewritesAsUnitEquiv and OriginalAsUnitEquiv on case\n */\n", "func_signal": "@Test\npublic void testSingleWordForRewritesAsUnitEquivAndOriginalAsUnitEquiv()", "code": "{\n    utils.assertRewrittenQuery(\"?query=obama&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_UNIT_EQUIV +\n                               \"=true&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.ORIGINAL_AS_UNIT_EQUIV +\n                               \"=true\",\n                               \"query 'OR obama \\\"obama nobel peace prize\\\" \" +\n                               \"\\\"obama wiki\\\" \\\"obama nobel prize\\\" \" +\n                               \"\\\"obama wears mom jeans\\\" \" +\n                               \"\\\"obama sucks\\\" \\\"obama news\\\" \\\"malia obama\\\" \" +\n                               \"\\\"obama speech\\\" \\\"obama nobel\\\" \\\"obama wikipedia\\\" \" +\n                               \"\\\"barack obama biography\\\" \\\"obama snl\\\" \" +\n                               \"\\\"obama peace prize\\\" \\\"michelle obama\\\" \\\"barack obama\\\"'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Returns true if the predicate ends in a negation.\n */\n", "func_signal": "public boolean processSubTree(Predicate predicate)", "code": "{\n    if (predicate == null) {\n        return false;\n    }\n    if (predicate instanceof Negation) {\n        // All negations are for leaf-nodes after AndOrSimplifier has run.\n        return true;\n    } else if (predicate instanceof Conjunction) {\n        List<Predicate> in = ((Conjunction)predicate).getOperands();\n        List<Predicate> out = new ArrayList<>(in.size());\n        List<Predicate> positiveChildren = new ArrayList<>(in.size());\n        for (Predicate operand : in) {\n            if (processSubTree(operand)) {\n                out.add(operand);\n            } else {\n                positiveChildren.add(operand);\n            }\n        }\n        out.addAll(positiveChildren);\n        ((Conjunction)predicate).setOperands(out);\n        return positiveChildren.isEmpty();\n    } else if (predicate instanceof Disjunction) {\n        List<Predicate> in = ((Disjunction)predicate).getOperands();\n        List<Predicate> out = new ArrayList<>(in.size());\n        List<Predicate> negativeChildren = new ArrayList<>(in.size());\n        for (Predicate operand : in) {\n            if (processSubTree(operand)) {\n                negativeChildren.add(operand);\n            } else {\n                out.add(operand);\n            }\n        }\n        out.addAll(negativeChildren);\n        ((Disjunction)predicate).setOperands(out);\n        return !negativeChildren.isEmpty();\n    }\n    return false;\n}", "path": "vespa/predicate-search-core/src/main/java/com/yahoo/search/predicate/optimization/NotNodeReorderer.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * First fetch result from the next searcher in the chain.\n * If collapse is active, do collapsing.\n * Otherwise, act as a simple pass through\n */\n", "func_signal": "@Override\npublic Result search(com.yahoo.search.Query query, Execution execution)", "code": "{\n    String collapseField = query.properties().getString(collapsefield);\n\n    if (collapseField == null) return execution.search(query);\n\n    int collapseSize = query.properties().getInteger(collapsesize,defaultCollapseSize);\n    query.properties().set(collapse, \"0\");\n\n    int hitsToRequest = query.getHits() != 0 ? (int) Math.ceil((query.getOffset() + query.getHits() + 1) * extraFactor) : 0;\n    int nextOffset = 0;\n    int hitsAfterCollapse;\n    boolean moreHitsAvailable = true;\n    Map<String, Integer> knownCollapses = new java.util.HashMap<>();\n    Result result = new Result(query);\n    int performedQueries = 0;\n    Result resultSource;\n    String collapseSummary = query.properties().getString(collapseSummaryName);\n    String summaryClass = (collapseSummary == null)\n                          ? query.getPresentation().getSummary() : collapseSummary;\n    query.trace(\"Collapsing by '\" + collapseField + \"' using summary '\" + collapseSummary + \"'\", 2);\n\n    do {\n        resultSource = search(query.clone(), execution, nextOffset, hitsToRequest);\n        fill(resultSource, summaryClass, execution);\n        collapse(result, knownCollapses, resultSource, collapseField, collapseSize);\n\n        hitsAfterCollapse = result.getHitCount();\n        if (resultSource.getTotalHitCount() < (hitsToRequest + nextOffset)) {\n            // the searcher downstream has no more hits\n            moreHitsAvailable = false;\n        }\n        nextOffset += hitsToRequest;\n        if (hitsAfterCollapse < query.getOffset() + query.getHits()) {\n            hitsToRequest = (int) Math.ceil(hitsToRequest * extraFactor);\n        }\n        ++performedQueries;\n\n    } while (hitsToRequest != 0\n            && (hitsAfterCollapse < query.getOffset() + query.getHits())\n            && moreHitsAvailable\n            && (performedQueries <= maxQueries));\n\n    // Set correct meta information\n    result.mergeWith(resultSource);\n    // Keep only (offset,.. offset+hits) hits\n    result.hits().trim(query.getOffset(), query.getHits());\n    // Mark query as query with collapsing\n    query.properties().set(collapse, \"1\");\n    return result;\n}", "path": "vespa/container-search/src/main/java/com/yahoo/prelude/searcher/FieldCollapsingSearcher.java", "commit_date": "2019-10-31 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Returns a string description of the given list of expressions. This is a comma-separated list of the expressions\n * own {@link GroupingExpression#toString()} output.\n *\n * @param lst The list of expressions to output.\n * @return The string description.\n */\n", "func_signal": "public static String asString(List<GroupingExpression> lst)", "code": "{\n    StringBuilder ret = new StringBuilder();\n    for (int i = 0, len = lst.size(); i < len; ++i) {\n        ret.append(lst.get(i));\n        if (i < len - 1) {\n            ret.append(\", \");\n        }\n    }\n    return ret.toString();\n}", "path": "vespa/container-search/src/main/java/com/yahoo/search/grouping/request/GroupingExpression.java", "commit_date": "2018-08-15 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Load the NameRewriterSearcher and prepare the\n * execution object\n */\n", "func_signal": "@Before\npublic void setUp()", "code": "{\n    RewritesConfig config = QueryRewriteSearcherTestUtils.createConfigObj(CONFIG_PATH);\n    HashMap<String, File> fileList = new HashMap<>();\n    fileList.put(NameRewriter.NAME_ENTITY_EXPAND_DICT, new File(NAME_ENTITY_EXPAND_DICT_PATH));\n    NameRewriter searcher = new NameRewriter(config, fileList);\n\n    Execution execution = QueryRewriteSearcherTestUtils.createExecutionObj(searcher);\n    utils = new QueryRewriteSearcherTestUtils(execution);\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Complex query with more than two levels for RewritesAsEquiv is on case\n * Should not rewrite\n */\n", "func_signal": "@Test\npublic void testComplextQueryRewritesAsEquiv()", "code": "{\n    utils.assertRewrittenQuery(\"?query=((will smith) OR (willl smith)) AND (tom cruise)&type=adv&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_EQUIV + \"=true&\",\n                               \"query 'AND (OR (AND will smith) (AND willl smith)) (AND tom cruise)'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Constructs a new instance of this class with a detail message that contains the name of the {@link BindingSet}\n * that was not found.\n *\n * @param bindingSet The name of the {@link BindingSet} that was not found.\n */\n", "func_signal": "public BindingSetNotFoundException(String bindingSet)", "code": "{\n    super(\"No binding set named '\" + bindingSet + \"'.\");\n    this.bindingSet = bindingSet;\n}", "path": "vespa/jdisc_core/src/main/java/com/yahoo/jdisc/service/BindingSetNotFoundException.java", "commit_date": "2018-07-05 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/**\n * Boosting only query (n/a as rewrite in FSA)\n * for RewritesAsEquiv and OriginalAsUnit on case\n */\n", "func_signal": "@Test\npublic void testBoostingQueryForRewritesAsEquivAndOriginalAsUnit()", "code": "{\n    utils.assertRewrittenQuery(\"?query=angelina jolie&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.REWRITES_AS_EQUIV + \"=true&\" +\n                               REWRITER_NAME + \".\" + RewriterConstants.ORIGINAL_AS_UNIT + \"=true\",\n                               \"query '\\\"angelina jolie\\\"'\");\n}", "path": "vespa/container-search/src/test/java/com/yahoo/search/query/rewrite/test/NameRewriterTestCase.java", "commit_date": "2018-04-17 00:00:00", "repo_name": "vespa-engine/vespa", "stars": 5238, "license": "apache-2.0", "language": "java", "size": 410074}
{"docstring": "/** returns all higher 16 bits as 0 for all results */\n", "func_signal": "public static int fromFloat( float fval )", "code": "{\n    int fbits = Float.floatToIntBits( fval );\n    int sign = fbits >>> 16 & 0x8000;          // sign only\n    int val = ( fbits & 0x7fffffff ) + 0x1000; // rounded value\n\n    if( val >= 0x47800000 )               // might be or become NaN/Inf\n    {                                     // avoid Inf due to rounding\n        if( ( fbits & 0x7fffffff ) >= 0x47800000 )\n        {                                 // is or must become NaN/Inf\n            if( val < 0x7f800000 )        // was value but too large\n                return sign | 0x7c00;     // make it +/-Inf\n            return sign | 0x7c00 |        // remains +/-Inf or NaN\n                ( fbits & 0x007fffff ) >>> 13; // keep NaN (and Inf) bits\n        }\n        return sign | 0x7bff;             // unrounded not quite Inf\n    }\n    if( val >= 0x38800000 )               // remains normalized value\n        return sign | val - 0x38000000 >>> 13; // exp - 127 + 15\n    if( val < 0x33000000 )                // too small for subnormal\n        return sign;                      // becomes +/-0\n    val = ( fbits & 0x7fffffff ) >>> 23;  // tmp exp for subnormal calc\n    return sign | ( ( fbits & 0x7fffff | 0x800000 ) // add subnormal bit\n         + ( 0x800000 >>> val - 102 )     // round depending on cut off\n      >>> 126 - val );   // div by 2^(1-(exp-127+15)) and >> 13 | exp=0\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/HalfIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #buffer} and {@link #index}. */\n", "func_signal": "public CharBufferIndexer(CharBuffer buffer, Index index)", "code": "{\n    super(index);\n    this.buffer = buffer;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/CharBufferIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #sizes}, {@link #strides}, {@link #selectionOffsets}, {@link #selectionStrides},\n * {@link #selectionCounts}, and {@link #selectionBlocks}. Also updates the {@link #sizes} for the resulting selection. */\n", "func_signal": "public HyperslabIndex(long[] sizes, long[] strides, long[] selectionOffsets, long[] selectionStrides,\n        long[] selectionCounts, long[] selectionBlocks)", "code": "{\n    super(sizes, strides);\n    this.selectionOffsets = selectionOffsets;\n    this.selectionStrides = selectionStrides;\n    this.selectionCounts = selectionCounts;\n    this.selectionBlocks = selectionBlocks;\n\n    for (int i = 0; i < selectionCounts.length; i++) {\n        this.sizes[i] = selectionCounts[i] * selectionBlocks[i];\n    }\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/HyperslabIndex.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #pointer} and {@link #index}. */\n", "func_signal": "public DoubleRawIndexer(DoublePointer pointer, Index index)", "code": "{\n    super(index);\n    this.pointer = pointer;\n    this.base = pointer.address() + pointer.position() * VALUE_BYTES;\n    this.size = pointer.limit() - pointer.position();\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/DoubleRawIndexer.java", "commit_date": "2020-05-15 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Copies the String chars into native memory, including a terminating null char.\n * Sets the limit to just before the terminating null character.\n *\n * @param s the String to copy\n * @return this\n * @see String#toCharArray()\n * @see #put(char[])\n */\n", "func_signal": "public CharPointer putString(String s)", "code": "{\n    char[] chars = s.toCharArray();\n    return put(chars).put(chars.length, (char)0).limit(chars.length);\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/CharPointer.java", "commit_date": "2020-07-20 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Removes the Pointer from the {@link #pointerStack} of this Scope\n * and calls {@link Pointer#releaseReference()}. */\n", "func_signal": "public PointerScope detach(Pointer p)", "code": "{\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Detaching \" + p + \" from \" + this);\n    }\n    pointerStack.remove(p);\n    p.releaseReference();\n    return this;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/PointerScope.java", "commit_date": "2019-10-29 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Allocates enough memory for the array and copies it.\n *\n * @param array the array to copy\n * @see #put(char[])\n */\n", "func_signal": "public CharPointer(char ... array)", "code": "{\n    this(array.length);\n    put(array);\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/CharPointer.java", "commit_date": "2020-07-20 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Creates a float indexer to access efficiently the data of a pointer.\n *\n * @param pointer data to access via a buffer or to copy to an array\n * @param index to use\n * @param direct {@code true} to use a direct buffer, see {@link Indexer} for details\n * @return the new float indexer backed by the raw memory interface, a buffer, or an array\n */\n", "func_signal": "public static FloatIndexer create(final FloatPointer pointer, Index index, boolean direct)", "code": "{\n    if (direct) {\n        return Raw.getInstance() != null ? new FloatRawIndexer(pointer, index)\n                                         : new FloatBufferIndexer(pointer.asBuffer(), index);\n    } else {\n        final long position = pointer.position();\n        float[] array = new float[(int)Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\n        pointer.get(array);\n        return new FloatArrayIndexer(array, index) {\n            @Override public void release() {\n                pointer.position(position).put(array);\n                super.release();\n            }\n        };\n    }\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/FloatIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #buffer} and {@link #index}. */\n", "func_signal": "public UShortBufferIndexer(ShortBuffer buffer, Index index)", "code": "{\n    super(index);\n    this.buffer = buffer;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/UShortBufferIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #buffer} and {@link #index}. */\n", "func_signal": "public BooleanBufferIndexer(ByteBuffer buffer, Index index)", "code": "{\n    super(index);\n    this.buffer = buffer;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/BooleanBufferIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** ignores the higher 16 bits */\n", "func_signal": "public static float toFloat( int hbits )", "code": "{\n    int mant = hbits & 0x03ff;            // 10 bits mantissa\n    int exp =  hbits & 0x7c00;            // 5 bits exponent\n    if( exp == 0x7c00 )                   // NaN/Inf\n        exp = 0x3fc00;                    // -> NaN/Inf\n    else if( exp != 0 )                   // normalized value\n    {\n        exp += 0x1c000;                   // exp - 15 + 127\n// \"smooth transition\" is nonstandard behavior\n//            if( mant == 0 && exp > 0x1c400 )  // smooth transition\n//                return Float.intBitsToFloat( ( hbits & 0x8000 ) << 16\n//                                                | exp << 13 | 0x3ff );\n    }\n    else if( mant != 0 )                  // && exp==0 -> subnormal\n    {\n        exp = 0x1c400;                    // make it normal\n        do {\n            mant <<= 1;                   // mantissa * 2\n            exp -= 0x400;                 // decrease exp by 1\n        } while( ( mant & 0x400 ) == 0 ); // while not normal\n        mant &= 0x3ff;                    // discard subnormal bit\n    }                                     // else +/-0 -> +/-0\n    return Float.intBitsToFloat(          // combine all parts\n        ( hbits & 0x8000 ) << 16          // sign  << ( 31 - 15 )\n        | ( exp | mant ) << 13 );         // value << ( 23 - 10 )\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/HalfIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Initializes {@link #forClasses}, and pushes itself on the {@link #scopeStack}. */\n", "func_signal": "public PointerScope(Class<? extends Pointer>... forClasses)", "code": "{\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Opening \" + this);\n    }\n    this.forClasses = forClasses;\n    scopeStack.get().push(this);\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/PointerScope.java", "commit_date": "2019-10-29 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Pushes the Pointer onto the {@link #pointerStack} of this Scope and calls {@link Pointer#retainReference()}.\n * @throws IllegalArgumentException when it is not an instance of a class in {@link #forClasses}. */\n", "func_signal": "public PointerScope attach(Pointer p)", "code": "{\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Attaching \" + p + \" to \" + this);\n    }\n    if (forClasses != null && forClasses.length > 0) {\n        boolean found = false;\n        for (Class<? extends Pointer> c : forClasses) {\n            if (c != null && c.isInstance(p)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            throw new IllegalArgumentException(p + \" is not an instance of a class in forClasses: \" + Arrays.toString(forClasses));\n        }\n    }\n    pointerStack.push(p);\n    p.retainReference();\n    return this;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/PointerScope.java", "commit_date": "2019-10-29 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Allocates enough memory for the String and copies it.\n *\n * @param s the String to copy\n * @see #putString(String)\n */\n", "func_signal": "public CharPointer(String s)", "code": "{\n    this(s.toCharArray().length+1);\n    putString(s);\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/CharPointer.java", "commit_date": "2020-07-20 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Extends the life of this scope past the next call\n * to {@link #close()} by setting the {@link #extend} flag. */\n", "func_signal": "public PointerScope extend()", "code": "{\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Extending \" + this);\n    }\n    extend = true;\n    return this;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/PointerScope.java", "commit_date": "2019-10-29 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Allocates a native {@code short} array of the given size.\n *\n * @param size the number of {@code short} elements to allocate\n */\n", "func_signal": "public CharPointer(long size)", "code": "{\n    try {\n        allocateArray(size);\n        if (size > 0 && address == 0) {\n            throw new OutOfMemoryError(\"Native allocator returned address == 0\");\n        }\n    } catch (UnsatisfiedLinkError e) {\n        throw new RuntimeException(\"No native JavaCPP library in memory. (Has Loader.load() been called?)\", e);\n    } catch (OutOfMemoryError e) {\n        OutOfMemoryError e2 = new OutOfMemoryError(\"Cannot allocate new CharPointer(\" + size + \"): \"\n                + \"totalBytes = \" + formatBytes(totalBytes()) + \", physicalBytes = \" + formatBytes(physicalBytes()));\n        e2.initCause(e);\n        throw e2;\n    }\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/CharPointer.java", "commit_date": "2020-07-20 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Constructor to set the {@link #array} and {@link #index}. */\n", "func_signal": "public ShortArrayIndexer(short[] array, Index index)", "code": "{\n    super(index);\n    this.array = array;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/ShortArrayIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/** Returns the chars, assuming a null-terminated string if {@code limit <= position}. */\n", "func_signal": "public char[] getStringChars()", "code": "{\n    if (limit > position) {\n        char[] array = new char[(int)Math.min(limit - position, Integer.MAX_VALUE)];\n        get(array);\n        return array;\n    }\n\n    // This may be kind of slow, and should be moved to a JNI function.\n    char[] buffer = new char[16];\n    int i = 0;\n    while ((buffer[i] = get(i)) != 0) {\n        i++;\n        if (i >= buffer.length) {\n            char[] newbuffer = new char[2*buffer.length];\n            System.arraycopy(buffer, 0, newbuffer, 0, buffer.length);\n            buffer = newbuffer;\n        }\n    }\n    char[] newbuffer = new char[i];\n    System.arraycopy(buffer, 0, newbuffer, 0, i);\n    return newbuffer;\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/CharPointer.java", "commit_date": "2020-07-20 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Creates a byte indexer to access efficiently the data of a pointer.\n *\n * @param pointer data to access via a buffer or to copy to an array\n * @param index to use\n * @param direct {@code true} to use a direct buffer, see {@link Indexer} for details\n * @return the new byte indexer backed by the raw memory interface, a buffer, or an array\n */\n", "func_signal": "public static ByteIndexer create(final BytePointer pointer, Index index, boolean direct)", "code": "{\n    if (direct) {\n        return Raw.getInstance() != null ? new ByteRawIndexer(pointer, index)\n                                         : new ByteBufferIndexer(pointer.asBuffer(), index);\n    } else {\n        final long position = pointer.position();\n        byte[] array = new byte[(int)Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\n        pointer.get(array);\n        return new ByteArrayIndexer(array, index) {\n            @Override public void release() {\n                pointer.position(position).put(array);\n                super.release();\n            }\n        };\n    }\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/ByteIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * Creates a half float indexer to access efficiently the data of a pointer.\n *\n * @param pointer data to access via a buffer or to copy to an array\n * @param index to use\n * @param direct {@code true} to use a direct buffer, see {@link Indexer} for details\n * @return the new half indexer backed by the raw memory interface, a buffer, or an array\n */\n", "func_signal": "public static HalfIndexer create(final ShortPointer pointer, Index index, boolean direct)", "code": "{\n    if (direct) {\n        return Raw.getInstance() != null ? new HalfRawIndexer(pointer, index)\n                                         : new HalfBufferIndexer(pointer.asBuffer(), index);\n    } else {\n        final long position = pointer.position();\n        short[] array = new short[(int)Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\n        pointer.get(array);\n        return new HalfArrayIndexer(array, index) {\n            @Override public void release() {\n                pointer.position(position).put(array);\n                super.release();\n            }\n        };\n    }\n}", "path": "javacpp/src/main/java/org/bytedeco/javacpp/indexer/HalfIndexer.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "bytedeco/javacpp", "stars": 4327, "license": "other", "language": "java", "size": 10126}
{"docstring": "/**\n * <p>Gets the class name minus the package name from a {@code Class}.</p>\n * \n * <p>Consider using the Java 5 API {@link Class#getSimpleName()} instead. \n * The one known difference is that this code will return {@code \"Map.Entry\"} while \n * the {@code java.lang.Class} variant will simply return {@code \"Entry\"}. </p>\n *\n * @param cls  the class to get the short name for.\n * @return the class name without the package name or an empty string\n */\n", "func_signal": "public static String getShortClassName(Class<?> cls)", "code": "{\n    if (cls == null) {\n        return \"\";\n    }\n    return getShortClassName(cls.getName());\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "//endregion\n", "func_signal": "private static Object referenceBridge(int r1, int self, int struct)", "code": "{\n    Logger.i(TAG, \"enter bridge function.\");\n\n    // struct {\n    //     void* sp;\n    //     void* r2;\n    //     void* r3;\n    //     void* sourceMethod\n    // }\n    // sp + 16 = r4\n\n    Logger.i(TAG, \"struct:\" + Long.toHexString(struct));\n\n    final int sp = ByteBuffer.wrap(EpicNative.get(struct, 4)).order(ByteOrder.LITTLE_ENDIAN).getInt();\n\n    // Logger.i(TAG, \"stack:\" + Debug.hexdump(EpicNative.get(sp, 96), 0));\n\n    final byte[] rr1 = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(r1).array();\n    final byte[] r2 = EpicNative.get(struct + 4, 4);\n\n    final byte[] r3 = EpicNative.get(struct + 8, 4);\n\n    Logger.d(TAG, \"r1:\" + Debug.hexdump(rr1, 0));\n    Logger.d(TAG, \"r2:\" + Debug.hexdump(r2, 0));\n    Logger.d(TAG, \"r3:\" + Debug.hexdump(r3, 0));\n\n    final byte[] sourceAddr = EpicNative.get(struct + 12, 4);\n\n    ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[8]);\n    byteBuffer.put(sourceAddr);\n    byteBuffer.put(new byte[] {0, 0, 0, 0});\n    byteBuffer.flip();\n\n    final long sourceMethod = byteBuffer.order(ByteOrder.LITTLE_ENDIAN).getLong();\n    \n    Logger.i(TAG, \"sourceMethod:\" + Long.toHexString(sourceMethod));\n\n    Epic.MethodInfo originMethodInfo = Epic.getMethodInfo(sourceMethod);\n    Logger.i(TAG, \"originMethodInfo :\" + originMethodInfo);\n\n    final Pair<Object, Object[]> constructArguments = constructArguments(originMethodInfo, self, rr1, r2, r3, sp);\n    Object receiver = constructArguments.first;\n    Object[] arguments = constructArguments.second;\n\n    Logger.i(TAG, \"arguments:\" + Arrays.toString(arguments));\n\n    Class<?> returnType = originMethodInfo.returnType;\n    Object artMethod = originMethodInfo.method;\n\n    Logger.i(TAG, \"leave bridge function\");\n\n    if (returnType == void.class) {\n        onHookVoid(artMethod, receiver, arguments);\n        return 0;\n    } else if (returnType == char.class) {\n        return onHookChar(artMethod, receiver, arguments);\n    } else if (returnType == byte.class) {\n        return onHookByte(artMethod, receiver, arguments);\n    } else if (returnType == short.class) {\n        return onHookShort(artMethod, receiver, arguments);\n    } else if (returnType == int.class) {\n        return onHookInt(artMethod, receiver, arguments);\n    } else if (returnType == long.class) {\n        return onHookLong(artMethod, receiver, arguments);\n    } else if (returnType == float.class) {\n        return onHookFloat(artMethod, receiver, arguments);\n    } else if (returnType == double.class) {\n        return onHookDouble(artMethod, receiver, arguments);\n    } else if (returnType == boolean.class) {\n        return onHookBoolean(artMethod, receiver, arguments);\n    } else {\n        return onHookObject(artMethod, receiver, arguments);\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/entry/Entry.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * <p>Gets the package name of a {@code Class}.</p>\n *\n * @param cls  the class to get the package name for, may be {@code null}.\n * @return the package name or an empty string\n */\n", "func_signal": "public static String getPackageName(Class<?> cls)", "code": "{\n    if (cls == null) {\n        return STRING_EMPTY;\n    }\n    return getPackageName(cls.getName());\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * invoke the origin method\n * @param receiver the receiver\n * @param args origin method/constructor's parameters\n * @return origin method's return value.\n * @throws IllegalAccessException throw if no access, impossible.\n * @throws InvocationTargetException invoke target error.\n * @throws InstantiationException throw when the constructor can not create instance.\n */\n", "func_signal": "public Object invoke(Object receiver, Object... args) throws IllegalAccessException, InvocationTargetException, InstantiationException", "code": "{\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n        if (origin != null) {\n            byte[] currentAddress = EpicNative.get(origin.address, 4);\n            byte[] backupAddress = EpicNative.get(address, 4);\n            if (!Arrays.equals(currentAddress, backupAddress)) {\n                if (Debug.DEBUG) {\n                    Logger.i(TAG, \"the address of java method was moved by gc, backup it now! origin address: 0x\"\n                            + Arrays.toString(currentAddress) + \" , currentAddress: 0x\" + Arrays.toString(backupAddress));\n                }\n                EpicNative.put(currentAddress, address);\n                return invokeInternal(receiver, args);\n            } else {\n                Logger.i(TAG, \"the address is same with last invoke, not moved by gc\");\n            }\n        }\n    }\n\n    return invokeInternal(receiver, args);\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * get the modifiers of origin method/constructor\n * @return the modifiers\n */\n", "func_signal": "public int getModifiers()", "code": "{\n    if (constructor != null) {\n        return constructor.getModifiers();\n    } else {\n        return method.getModifiers();\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * get the origin method's name\n * @return constructor name of method name\n */\n", "func_signal": "public String getName()", "code": "{\n    if (constructor != null) {\n        return constructor.getName();\n    } else {\n        return method.getName();\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * <p>Converts an array of {@code Object} in to an array of {@code Class} objects.\n * If any of these objects is null, a null element will be inserted into the array.</p>\n *\n * <p>This method returns {@code null} for a {@code null} input array.</p>\n *\n * @param array an {@code Object} array\n * @return a {@code Class} array, {@code null} if null array input\n * @since 2.4\n */\n", "func_signal": "public static Class<?>[] toClass(Object... array)", "code": "{\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return new Class[0];\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n        classes[i] = array[i] == null ? null : array[i].getClass();\n    }\n    return classes;\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * force set the private flag of the method.\n */\n", "func_signal": "public void makePrivate()", "code": "{\n    int accessFlags = getAccessFlags();\n    accessFlags &= ~Modifier.PUBLIC;\n    accessFlags |= Modifier.PRIVATE;\n    setAccessFlags(accessFlags);\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * construct the method arguments from register r1, r2, r3 and stack\n * @param r1 register r1 value\n * @param r2 register r2 value\n * @param r3 register r3 value\n * @param sp stack pointer\n * @return arguments passed to the callee method\n */\n", "func_signal": "private static Pair<Object, Object[]> constructArguments(Epic.MethodInfo originMethodInfo, int self,\n                                                         byte[] r1, byte[] r2, byte[] r3, int sp)", "code": "{\n    boolean isStatic = originMethodInfo.isStatic;\n\n    int numberOfArgs;\n    Class<?>[] typeOfArgs;\n    if (isStatic) {\n\n        // static argument, r1, r2, r3, sp + 16\n\n        // sp + 0 = ArtMethod (ourself)\n        // sp + 4 = r1 (may be earased)\n        // sp + 8 = r2 (may be earased)\n        // sp + 12 = r3 (may be earased)\n        // sp + 16 = r4, remain\n\n        numberOfArgs = originMethodInfo.paramNumber;\n        typeOfArgs = originMethodInfo.paramTypes;\n    } else {\n        // non-static, r1 = receiver; r2, r3, sp + 16 is arguments.\n\n        // sp + 0 = ArtMethod (ourself)\n        // sp + 4 = r1 = this (may be earased)\n        // sp + 8 = r2 = first argument (may be earased)\n        // sp + 12 = r3 = second argument (may be earased)\n        // sp + 16 = third argument, remain\n        numberOfArgs = 1 + originMethodInfo.paramNumber;\n        typeOfArgs = new Class<?>[numberOfArgs];\n        typeOfArgs[0] = Object.class; // this\n        System.arraycopy(originMethodInfo.paramTypes, 0, typeOfArgs, 1, originMethodInfo.paramTypes.length);\n    }\n\n    Object[] arguments = new Object[numberOfArgs];\n\n    int currentStackPosition = 4; // sp + 0 = ArtMethod, sp + 4... start store arguments.\n    final int argumentStackBegin = 16; // sp + 4 = r1, sp + 8 = r2, sp + 12 = r3, sp + 16 start in stack.\n\n    int[] argStartPos = new int[numberOfArgs];\n\n    for (int i = 0; i < numberOfArgs; i++) {\n        Class<?> typeOfArg = typeOfArgs[i];\n        int typeLength = getTypeLength(typeOfArg);\n        argStartPos[i] = currentStackPosition;\n        currentStackPosition += typeLength;\n    }\n\n    int argTotalLength = currentStackPosition;\n    byte[] argBytes = new byte[argTotalLength];\n\n    do {\n        if (argTotalLength <= 4) break;\n\n        boolean align = Build.VERSION.SDK_INT >= 23 && numberOfArgs > 0 && getTypeLength(typeOfArgs[0]) == 8;\n        if (align) {\n            System.arraycopy(r2, 0, argBytes, 4, 4);\n            System.arraycopy(r3, 0, argBytes, 8, 4);\n            if (argTotalLength <= 12) break;\n            System.arraycopy(EpicNative.get(sp + 12, 4), 0, argBytes, 12, 4);\n        } else {\n            System.arraycopy(r1, 0, argBytes, 4, 4);\n\n            if (argTotalLength <= 8) break;\n            System.arraycopy(r2, 0, argBytes, 8, 4);\n            if (argTotalLength <= 12) break;\n            System.arraycopy(r3, 0, argBytes, 12, 4);\n        }\n\n        if (argTotalLength <= 16) break;\n\n        byte[] argInStack = EpicNative.get(sp + 16, argTotalLength - 16);\n        System.arraycopy(argInStack, 0, argBytes, 16, argTotalLength - 16);\n    } while (false);\n\n    //region ---------------Process Arguments passing in Android M---------------\n    if (Build.VERSION.SDK_INT == 23) {\n        // Android M, fix sp + 12\n        if (argTotalLength <= 12) {\n            // Nothing\n        } else {\n            if (argTotalLength <= 16) {\n                if (getTypeLength(typeOfArgs[0]) == 8) {\n                    // first is 8byte\n                    System.arraycopy(EpicNative.get(sp + 44, 4), 0, argBytes, 12, 4);\n                } else {\n                    // 48, 444: normal.\n                }\n            } else {\n                boolean isR3Grabbed = true;\n                if (numberOfArgs >= 2) {\n                    int arg1TypeLength = getTypeLength(typeOfArgs[0]);\n                    int arg2TypeLength = getTypeLength(typeOfArgs[1]);\n                    if (arg1TypeLength == 4 && arg2TypeLength == 8) {\n                        isR3Grabbed = false;\n                    }\n\n                    if (numberOfArgs == 2 && arg1TypeLength == 8 && arg2TypeLength == 8) {\n                        // in this case, we have no reference register to local r3, just hard code now :(\n                        System.arraycopy(EpicNative.get(sp + 44, 4), 0, argBytes, 12, 4);\n                        isR3Grabbed = false;\n                    }\n                }\n                if (numberOfArgs >= 3) {\n                    int arg1TypeLength = getTypeLength(typeOfArgs[0]);\n                    int arg2TypeLength = getTypeLength(typeOfArgs[1]);\n                    int arg3TypeLength = getTypeLength(typeOfArgs[2]);\n                    if (arg1TypeLength == 4 && arg2TypeLength == 4 && arg3TypeLength == 4) {\n                        // in this case: r1 = arg1; r2 = arg2; r3 = arg3, normal.\n                        isR3Grabbed = false;\n                    }\n                    if (numberOfArgs == 3 && arg1TypeLength == 8 && arg2TypeLength == 4 && arg3TypeLength == 8) {\n                        // strange case :)\n                        System.arraycopy(EpicNative.get(sp + 52, 4), 0, argBytes, 12, 4);\n                        isR3Grabbed = false;\n                    }\n                }\n                if (isR3Grabbed) {\n                    byte[] otherStoreInStack = Arrays.copyOfRange(argBytes, argumentStackBegin, argBytes.length);\n                    int otherStoreInStackLength = otherStoreInStack.length;\n                    int searchRegion = 0;\n                    for (int i = argumentStackBegin + otherStoreInStackLength; ; i = i + 4) {\n                        final byte[] bytes = EpicNative.get(sp + i, otherStoreInStackLength);\n                        searchRegion += otherStoreInStackLength;\n                        if (Arrays.equals(bytes, otherStoreInStack)) {\n                            int originR3Index = sp + i - 4;\n                            final byte[] originR3 = EpicNative.get(originR3Index, 4);\n                            Logger.d(TAG, \"found other arguments in stack, index:\" + i + \", origin r3:\" + Arrays.toString(originR3));\n                            System.arraycopy(originR3, 0, argBytes, 12, 4);\n                            break;\n                        }\n                        if (searchRegion > (1 << 10)) {\n                            throw new RuntimeException(\"can not found the modify r3 register!!!\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //endregion\n\n    Logger.d(TAG, \"argBytes: \" + Debug.hexdump(argBytes, 0));\n\n    for (int i = 0; i < numberOfArgs; i++) {\n        final Class<?> typeOfArg = typeOfArgs[i];\n        final int startPos = argStartPos[i];\n        final int typeLength = getTypeLength(typeOfArg);\n        byte[] argWithBytes = Arrays.copyOfRange(argBytes, startPos, startPos + typeLength);\n        arguments[i] = wrapArgument(typeOfArg, self, argWithBytes);\n//            Logger.d(TAG, \"argument[\" + i + \"], startPos:\" + startPos + \", typeOfLength:\" + typeLength);\n//            Logger.d(TAG, \"argWithBytes:\" + Debug.hexdump(argWithBytes, 0) + \", value:\" + arguments[i]);\n    }\n\n    Object thiz = null;\n    Object[] parameters = EMPTY_OBJECT_ARRAY;\n    if (isStatic) {\n        parameters = arguments;\n    } else {\n        thiz = arguments[0];\n        int argumentLength = arguments.length;\n        if (argumentLength > 1) {\n            parameters = Arrays.copyOfRange(arguments, 1, argumentLength);\n        }\n    }\n\n    return Pair.create(thiz, parameters);\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/entry/Entry.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>\n *\n * @param object the object for which to get the simple class name.\n * @param valueIfNull the value to return if <code>object</code> is <code>null</code>\n * @return the simple class name.\n * @since 3.0\n * @see Class#getSimpleName()\n */\n", "func_signal": "public static String getSimpleName(Object object, String valueIfNull)", "code": "{\n    if (object == null) {\n        return valueIfNull;\n    }\n    return getSimpleName(object.getClass());\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "// Delete\n//-----------------------------------------------------------------------\n/**\n * <p>Deletes all whitespaces from a String as defined by\n * {@link Character#isWhitespace(char)}.</p>\n *\n * <pre>\n * StringUtils.deleteWhitespace(null)         = null\n * StringUtils.deleteWhitespace(\"\")           = \"\"\n * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n * </pre>\n *\n * @param str  the String to delete whitespace from, may be null\n * @return the String without whitespaces, {@code null} if null String input\n */\n", "func_signal": "public static String deleteWhitespace(String str)", "code": "{\n    if (isEmpty(str)) {\n        return str;\n    }\n    int sz = str.length();\n    char[] chs = new char[sz];\n    int count = 0;\n    for (int i = 0; i < sz; i++) {\n        if (!Character.isWhitespace(str.charAt(i))) {\n            chs[count++] = str.charAt(i);\n        }\n    }\n    if (count == sz) {\n        return str;\n    }\n    return new String(chs, 0, count);\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * get the exception declared by the method/constructor\n * @return the array of declared exception.\n */\n", "func_signal": "public Class<?>[] getExceptionTypes()", "code": "{\n    if (constructor != null) {\n        return constructor.getExceptionTypes();\n    } else {\n        return method.getExceptionTypes();\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * Add primitive type abbreviation to maps of abbreviations.\n *\n * @param primitive Canonical name of primitive type\n * @param abbreviation Corresponding abbreviation of primitive type\n */\n", "func_signal": "private static void addAbbreviation(String primitive, String abbreviation)", "code": "{\n    abbreviationMap.put(primitive, abbreviation);\n    reverseAbbreviationMap.put(abbreviation, primitive);\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * get Object from address, refer: http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\n * @param address the address of a object.\n * @return\n */\n", "func_signal": "public static Object getObject(long address)", "code": "{\n    Object[] array = new Object[]{null};\n    long baseOffset = arrayBaseOffset(Object[].class);\n    if (Runtime.is64Bit()) {\n        putLong(array, baseOffset, address);\n    } else {\n        putInt(array, baseOffset, (int) address);\n    }\n    return array[0];\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/utility/Unsafe.java", "commit_date": "2018-01-05 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * search Offset in memory\n * @param base base address\n * @param range search range\n * @param value search value\n * @return the first address of value if found\n */\n", "func_signal": "public static long searchOffset(long base, long range, int value)", "code": "{\n    final int align = 4;\n    final long step = range / align;\n    for (long i = 0; i < step; i++) {\n        long offset = i * align;\n        final byte[] bytes = EpicNative.memget(base + i * align, align);\n        final int valueInOffset = ByteBuffer.allocate(4).put(bytes).getInt();\n        if (valueInOffset == value) {\n            return offset;\n        }\n    }\n    return -1;\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * get the return type of origin method/constructor\n * @return the return type, if it is a constructor, return Object.class\n */\n", "func_signal": "public Class<?> getReturnType()", "code": "{\n    if (constructor != null) {\n        return Object.class;\n    } else {\n        return method.getReturnType();\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * the static method is lazy resolved, when not resolved, the entry point is a trampoline of\n * a bridge, we can not hook these entry. this method force the static method to be resolved.\n */\n", "func_signal": "public void ensureResolved()", "code": "{\n    if (!Modifier.isStatic(getModifiers())) {\n        Logger.d(TAG, \"not static, ignore.\");\n        return;\n    }\n\n    try {\n        invoke(null);\n        Logger.d(TAG, \"ensure resolved\");\n    } catch (Exception ignored) {\n        // we should never make a successful call.\n    } finally {\n        EpicNative.MakeInitializedClassVisibilyInitialized();\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * Force compile the method to avoid interpreter mode.\n * This is only used above Android N\n * @return if compile success return true, otherwise false.\n */\n", "func_signal": "public boolean compile()", "code": "{\n    if (constructor != null) {\n        return EpicNative.compileMethod(constructor);\n    } else {\n        return EpicNative.compileMethod(method);\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * make the constructor or method accessible\n * @param accessible accessible\n */\n", "func_signal": "public void setAccessible(boolean accessible)", "code": "{\n    if (constructor != null) {\n        constructor.setAccessible(accessible);\n    } else {\n        method.setAccessible(accessible);\n    }\n}", "path": "epic/library/src/main/java/me/weishu/epic/art/method/ArtMethod.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>\n *\n * @param cls the class for which to get the simple name.\n * @return the simple class name.\n * @since 3.0\n * @see Class#getSimpleName()\n */\n", "func_signal": "public static String getSimpleName(Class<?> cls)", "code": "{\n    if (cls == null) {\n        return STRING_EMPTY;\n    }\n    return cls.getSimpleName();\n}", "path": "epic/library/src/main/java/com/taobao/android/dexposed/ClassUtils.java", "commit_date": "2017-11-22 00:00:00", "repo_name": "tiann/epic", "stars": 4317, "license": "other", "language": "java", "size": 558}
{"docstring": "/**\n * Looks up an AuthConfig for a given image name.\n * <p>\n * Lookup is performed in following order, as per\n * https://docs.docker.com/engine/reference/commandline/cli/:\n * <ol>\n *     <li>{@code credHelpers}</li>\n *     <li>{@code credsStore}</li>\n *     <li>Hard-coded Base64 encoded auth in {@code auths}</li>\n *     <li>otherwise, if no credentials have been found then behaviour falls back to docker-java's\n *     implementation</li>\n * </ol>\n *\n * @param dockerImageName image name to be looked up (potentially including a registry URL part)\n * @param defaultAuthConfig an AuthConfig object that should be returned if there is no overriding authentication available for images that are looked up\n * @return an AuthConfig that is applicable to this specific image OR the defaultAuthConfig.\n */\n", "func_signal": "public AuthConfig lookupAuthConfig(DockerImageName dockerImageName, AuthConfig defaultAuthConfig)", "code": "{\n    final String registryName = effectiveRegistryName(dockerImageName);\n    log.debug(\"Looking up auth config for image: {} at registry: {}\", dockerImageName, registryName);\n\n    final Optional<AuthConfig> cachedAuth = cache.computeIfAbsent(registryName, __ -> lookupUncachedAuthConfig(registryName, dockerImageName));\n\n    if (cachedAuth.isPresent()) {\n        log.debug(\"Cached auth found: [{}]\", toSafeString(cachedAuth.get()));\n        return cachedAuth.get();\n    } else {\n        log.debug(\"No matching Auth Configs - falling back to defaultAuthConfig [{}]\", toSafeString(defaultAuthConfig));\n        // otherwise, defaultAuthConfig should already contain any credentials available\n        return defaultAuthConfig;\n    }\n}", "path": "testcontainers-java/core/src/main/java/org/testcontainers/utility/RegistryAuthLocator.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "// explicit service index via parameter\n", "func_signal": "@Before\n   public void setupClients()", "code": "{\n       for (int i = 0; i < 3; i++) {\n\n           String name = String.format(\"redis_%d\", i + 1);\n\n           clients[i] = new Jedis(environment.getServiceHost(name, REDIS_PORT), environment.getServicePort(name, REDIS_PORT));\n       }\n   }", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/DockerComposeContainerScalingTest.java", "commit_date": "2016-07-03 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Create a sidekick container and attach it to another container. The VNC output of that container will be recorded.\n */\n", "func_signal": "public VncRecordingContainer(@NonNull Network network, @NonNull String targetNetworkAlias) throws IllegalStateException", "code": "{\n    super(DockerImageName.parse(\"testcontainers/vnc-recorder:1.1.0\"));\n\n    this.targetNetworkAlias = targetNetworkAlias;\n    withNetwork(network);\n    waitingFor(new LogMessageWaitStrategy()\n        .withRegEx(\".*Connected.*\")\n        .withStartupTimeout(Duration.of(15, SECONDS)));\n}", "path": "testcontainers-java/core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Gets {@link AwsClientBuilder.EndpointConfiguration}\n * that may be used to connect to this container.\n *\n * @return endpoint configuration\n */\n", "func_signal": "public AwsClientBuilder.EndpointConfiguration getEndpointConfiguration()", "code": "{\n    return new AwsClientBuilder.EndpointConfiguration(\"http://\" +\n            this.getHost() + \":\" +\n            this.getMappedPort(MAPPED_PORT), null);\n}", "path": "testcontainers-java/modules/dynalite/src/main/java/org/testcontainers/dynamodb/DynaliteContainer.java", "commit_date": "2020-09-29 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Set the duration of waiting time until container treated as started.\n *\n * @param startupTimeout timeout\n * @return this\n * @see WaitStrategy#waitUntilReady(WaitStrategyTarget)\n */\n", "func_signal": "public WaitStrategy withStartupTimeout(Duration startupTimeout)", "code": "{\n    this.startupTimeout = startupTimeout;\n    return this;\n}", "path": "testcontainers-java/core/src/main/java/org/testcontainers/containers/wait/strategy/AbstractWaitStrategy.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects the WaitStrategy probing the right port.\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithSpecificPort()", "code": "{\n    waitUntilReadyAndSucceed(startContainerWithCommand(\n        createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY, 9090),\n        createHttpWaitStrategy(ready)\n            .forPort(9090),\n        7070, 8080, 9090\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/*\n * Mock-based tests to check overall behaviour, without involving timing-sensitive code\n */\n", "func_signal": "@Test\npublic void childExecutionTest()", "code": "{\n\n    final WaitStrategy underTest = new WaitAllStrategy()\n        .withStrategy(strategy1)\n        .withStrategy(strategy2);\n\n    doNothing().when(strategy1).waitUntilReady(eq(container));\n    doNothing().when(strategy2).waitUntilReady(eq(container));\n\n    underTest.waitUntilReady(container);\n\n    InOrder inOrder = inOrder(strategy1, strategy2);\n    inOrder.verify(strategy1).waitUntilReady(any());\n    inOrder.verify(strategy2).waitUntilReady(any());\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/containers/wait/strategy/WaitAllStrategyTest.java", "commit_date": "2019-04-15 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects that the WaitStrategy returns successfully after receiving an HTTP 401 response from the container.\n * This 401 response is checked with many status codes using {@link HttpWaitStrategy#forStatusCode(int)}\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithManyStatusCodes()", "code": "{\n    waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(\"401 UNAUTHORIZED\", GOOD_RESPONSE_BODY),\n        createHttpWaitStrategy(ready)\n            .forStatusCode(300)\n            .forStatusCode(401)\n            .forStatusCode(500)\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects that the WaitStrategy returns successfully after receiving an HTTP 401 response from the container.\n * This 401 response is checked with a lambda using {@link HttpWaitStrategy#forStatusCodeMatching(Predicate)}\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithUnauthorizedWithLambda()", "code": "{\n    waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(\"401 UNAUTHORIZED\", GOOD_RESPONSE_BODY),\n        createHttpWaitStrategy(ready)\n            .forStatusCodeMatching(it -> it >= 200 && it < 300 || it == 401)\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * @param ready the AtomicBoolean on which to indicate success\n * @return the WaitStrategy under test\n */\n", "func_signal": "@NotNull\nprotected HttpWaitStrategy buildWaitStrategy(final AtomicBoolean ready)", "code": "{\n    return createHttpWaitStrategy(ready)\n        .forResponsePredicate(s -> s.equals(GOOD_RESPONSE_BODY));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Wait until the target has started.\n *\n * @param waitStrategyTarget the target of the WaitStrategy\n */\n", "func_signal": "@Override\npublic void waitUntilReady(WaitStrategyTarget waitStrategyTarget)", "code": "{\n    this.waitStrategyTarget = waitStrategyTarget;\n    waitUntilReady();\n}", "path": "testcontainers-java/core/src/main/java/org/testcontainers/containers/wait/strategy/AbstractWaitStrategy.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/*\n * Dummy-based tests, to check that timeout values are propagated correctly, without involving actual timing-sensitive code\n */\n", "func_signal": "@Test\npublic void parentTimeoutApplies()", "code": "{\n\n    DummyStrategy child1 = new DummyStrategy(Duration.ofMillis(10));\n    child1.withStartupTimeout(Duration.ofMillis(20));\n\n    assertEquals(\"withStartupTimeout directly sets the timeout\", 20L, child1.startupTimeout.toMillis());\n\n    new WaitAllStrategy()\n        .withStrategy(child1)\n        .withStartupTimeout(Duration.ofMillis(30));\n\n    assertEquals(\"WaitAllStrategy overrides a child's timeout\", 30L, child1.startupTimeout.toMillis());\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/containers/wait/strategy/WaitAllStrategyTest.java", "commit_date": "2019-04-15 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects that the WaitStrategy throws a {@link RetryCountExceededException} after not receiving any of the\n * error code defined with {@link HttpWaitStrategy#forStatusCode(int)}\n * and {@link HttpWaitStrategy#forStatusCodeMatching(Predicate)}. Note that a 200 status code should not\n * be considered as a successful return as not explicitly set.\n * Test case for: https://github.com/testcontainers/testcontainers-java/issues/880\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithTimeoutAndWithLambdaShouldNotMatchOk()", "code": "{\n    waitUntilReadyAndTimeout(startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n        createHttpWaitStrategy(ready)\n            .forStatusCodeMatching(it -> it >= 300)\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Accepts the license for the DB2 container by setting the LICENSE=accept\n * variable as described at <a href=\"https://hub.docker.com/r/ibmcom/db2\">https://hub.docker.com/r/ibmcom/db2</a>\n */\n", "func_signal": "public Db2Container acceptLicense()", "code": "{\n    addEnv(\"LICENSE\", \"accept\");\n    return this;\n}", "path": "testcontainers-java/modules/db2/src/main/java/org/testcontainers/containers/Db2Container.java", "commit_date": "2020-09-29 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Set the rate limiter being used\n *\n * @param rateLimiter rateLimiter\n * @return this\n */\n", "func_signal": "public WaitStrategy withRateLimiter(RateLimiter rateLimiter)", "code": "{\n    this.rateLimiter = rateLimiter;\n    return this;\n}", "path": "testcontainers-java/core/src/main/java/org/testcontainers/containers/wait/strategy/AbstractWaitStrategy.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Gets a preconfigured {@link AmazonDynamoDB} client object for connecting to this\n * container.\n *\n * @return preconfigured client\n */\n", "func_signal": "public AmazonDynamoDB getClient()", "code": "{\n    return AmazonDynamoDBClientBuilder.standard()\n            .withEndpointConfiguration(getEndpointConfiguration())\n            .withCredentials(getCredentials())\n            .build();\n}", "path": "testcontainers-java/modules/dynalite/src/main/java/org/testcontainers/dynamodb/DynaliteContainer.java", "commit_date": "2020-09-29 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects that the WaitStrategy throws a {@link RetryCountExceededException} after not receiving any of the\n * error code defined with {@link HttpWaitStrategy#forStatusCode(int)}\n * and {@link HttpWaitStrategy#forStatusCodeMatching(Predicate)}\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithTimeoutAndWithManyStatusCodesAndLambda()", "code": "{\n    waitUntilReadyAndTimeout(startContainerWithCommand(createShellCommand(\"401 UNAUTHORIZED\", GOOD_RESPONSE_BODY),\n        createHttpWaitStrategy(ready)\n            .forStatusCode(300)\n            .forStatusCodeMatching(it -> it == 500)\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "// testWithEmulatorContainer {\n", "func_signal": "@Test\npublic void testSimple() throws ExecutionException, InterruptedException", "code": "{\n    FirestoreOptions options = FirestoreOptions.getDefaultInstance().toBuilder()\n            .setHost(emulator.getEmulatorEndpoint())\n            .setCredentials(NoCredentials.getInstance())\n            .setProjectId(\"test-project\")\n            .build();\n    Firestore firestore = options.getService();\n\n    CollectionReference users = firestore.collection(\"users\");\n    DocumentReference docRef = users.document(\"alovelace\");\n    Map<String, Object> data = new HashMap<>();\n    data.put(\"first\", \"Ada\");\n    data.put(\"last\", \"Lovelace\");\n    ApiFuture<WriteResult> result = docRef.set(data);\n    result.get();\n\n    ApiFuture<QuerySnapshot> query = users.get();\n    QuerySnapshot querySnapshot = query.get();\n\n    assertThat(querySnapshot.getDocuments().get(0).getData()).containsEntry(\"first\", \"Ada\");\n}", "path": "testcontainers-java/modules/gcloud/src/test/java/org/testcontainers/containers/FirestoreEmulatorContainerTest.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Expects that the WaitStrategy returns successfully after receiving an HTTP 401 response from the container.\n * This 401 response is checked with with many status codes using {@link HttpWaitStrategy#forStatusCode(int)}\n * and a lambda using {@link HttpWaitStrategy#forStatusCodeMatching(Predicate)}\n */\n", "func_signal": "@Test\npublic void testWaitUntilReadyWithManyStatusCodesAndLambda()", "code": "{\n    waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(\"401 UNAUTHORIZED\", GOOD_RESPONSE_BODY),\n        createHttpWaitStrategy(ready)\n            .forStatusCode(300)\n            .forStatusCode(500)\n            .forStatusCodeMatching(it -> it == 401)\n    ));\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * Create a HttpWaitStrategy instance with a waitUntilReady implementation\n *\n * @param ready Indicates that the WaitStrategy has completed waiting successfully.\n * @return the HttpWaitStrategy instance\n */\n", "func_signal": "private HttpWaitStrategy createHttpWaitStrategy(final AtomicBoolean ready)", "code": "{\n    return new HttpWaitStrategy() {\n        @Override\n        protected void waitUntilReady() {\n            // blocks until ready or timeout occurs\n            super.waitUntilReady();\n            ready.set(true);\n        }\n    };\n}", "path": "testcontainers-java/core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "commit_date": "2019-11-11 00:00:00", "repo_name": "testcontainers/testcontainers-java", "stars": 7669, "license": "mit", "language": "java", "size": 12076}
{"docstring": "/**\n * \u9a8c\u8bc1\u7b7e\u540d\n *\n * @param response \u63a5\u53e3\u8bf7\u6c42\u8fd4\u56de\u7684 {@link IJPayHttpResponse}\n * @param certPath \u5e73\u53f0\u8bc1\u4e66\u8def\u5f84\n * @return \u7b7e\u540d\u7ed3\u679c\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static boolean verifySignature(IJPayHttpResponse response, String certPath) throws Exception", "code": "{\n    String timestamp = response.getHeader(\"Wechatpay-Timestamp\");\n    String nonceStr = response.getHeader(\"Wechatpay-Nonce\");\n    String signature = response.getHeader(\"Wechatpay-Signature\");\n    String body = response.getBody();\n    return verifySignature(signature, body, nonceStr, timestamp, FileUtil.getInputStream(certPath));\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u521b\u5efa\u8ba2\u5355\n *\n * @param config {@link PayPalApiConfig} \u652f\u4ed8\u914d\u7f6e\n * @param data   \u8bf7\u6c42\u53c2\u6570\n * @return {@link IJPayHttpResponse} \u8bf7\u6c42\u8fd4\u56de\u7684\u7ed3\u679c\n */\n", "func_signal": "public static IJPayHttpResponse createOrder(PayPalApiConfig config, String data)", "code": "{\n    AccessToken accessToken = AccessTokenKit.get(config.getClientId());\n    return post(getReqUrl(PayPalApiUrl.CHECKOUT_ORDERS, config.isSandBox()), data, getBaseHeaders(accessToken));\n}", "path": "IJPay/IJPay-PayPal/src/main/java/com/ijpay/paypal/PayPalApi.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * v3 \u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u9a8c\u8bc1\u7b7e\u540d\n *\n * @param serialNo  \u8bc1\u4e66\u5e8f\u5217\u53f7\n * @param body      \u5f02\u6b65\u901a\u77e5\u5bc6\u6587\n * @param signature \u7b7e\u540d\n * @param nonce     \u968f\u673a\u5b57\u7b26\u4e32\n * @param timestamp \u65f6\u95f4\u6233\n * @param key       api \u5bc6\u94a5\n * @param certPath  \u5e73\u53f0\u8bc1\u4e66\u8def\u5f84\n * @return \u5f02\u6b65\u901a\u77e5\u660e\u6587\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static String verifyNotify(String serialNo, String body, String signature, String nonce,\n                                  String timestamp, String key, String certPath) throws Exception", "code": "{\n    BufferedInputStream inputStream = FileUtil.getInputStream(certPath);\n    // \u83b7\u53d6\u5e73\u53f0\u8bc1\u4e66\u5e8f\u5217\u53f7\n    X509Certificate certificate = PayKit.getCertificate(inputStream);\n    String serialNumber = certificate.getSerialNumber().toString(16).toUpperCase();\n    System.out.println(serialNumber);\n    // \u9a8c\u8bc1\u8bc1\u4e66\u5e8f\u5217\u53f7\n    if (serialNumber.equals(serialNo)) {\n        boolean verifySignature = WxPayKit.verifySignature(signature, body, nonce, timestamp, certificate.getPublicKey());\n        if (verifySignature) {\n            JSONObject resultObject = JSONUtil.parseObj(body);\n            JSONObject resource = resultObject.getJSONObject(\"resource\");\n            String cipherText = resource.getStr(\"ciphertext\");\n            String nonceStr = resource.getStr(\"nonce\");\n            String associatedData = resource.getStr(\"associated_data\");\n\n            AesUtil aesUtil = new AesUtil(key.getBytes(StandardCharsets.UTF_8));\n            // \u5bc6\u6587\u89e3\u5bc6\n            return aesUtil.decryptToString(\n                    associatedData.getBytes(StandardCharsets.UTF_8),\n                    nonceStr.getBytes(StandardCharsets.UTF_8),\n                    cipherText\n            );\n        }\n    }\n    return null;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u751f\u6210\u7b7e\u540d\n *\n * @param params \u9700\u8981\u7b7e\u540d\u7684\u53c2\u6570\n * @param secret \u4f01\u4e1a\u5fae\u4fe1\u652f\u4ed8\u5e94\u7528secret\n * @return \u7b7e\u540d\u540e\u7684\u6570\u636e\n */\n", "func_signal": "public static String createSign(Map<String, String> params, String secret)", "code": "{\n    // \u751f\u6210\u7b7e\u540d\u524d\u5148\u53bb\u9664sign\n    params.remove(FIELD_SIGN);\n    String tempStr = PayKit.createLinkString(params);\n    String stringSignTemp = tempStr + \"&secret=\" + secret;\n    return md5(stringSignTemp).toUpperCase();\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u81ea\u52a8\u751f\u6210\u8bf7\u6c42\u63a5\u53e3\u7684 xml\n *\n * @param rsaPrivateKey RSA \u79c1\u94a5\n * @param strDesKey     DES \u5bc6\u94a5\n * @param version       \u7248\u672c\u53f7\n * @param merchant      \u5546\u6237\u53f7\n * @return \u751f\u6210\u7684 xml \u6570\u636e\n */\n", "func_signal": "public String genReqXml(String rsaPrivateKey, String strDesKey, String version, String merchant)", "code": "{\n\n    if (StrUtil.isEmpty(version) || StrUtil.isEmpty(merchant)) {\n        throw new RuntimeException(\"version or merchant is empty\");\n    }\n    String encrypt = JdPayKit.encrypt(rsaPrivateKey, strDesKey, JdPayKit.toJdXml(toMap()));\n    Map<String, String> requestMap = JdRequestModel.builder()\n            .version(version)\n            .merchant(merchant)\n            .encrypt(encrypt)\n            .build()\n            .toMap();\n    return JdPayKit.toJdXml(requestMap);\n}", "path": "IJPay/IJPay-JDPay/src/main/java/com/ijpay/jdpay/model/JdBaseModel.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u6784\u5efa\u7b7e\u540d\n *\n * @param params       \u9700\u8981\u7b7e\u540d\u7684\u53c2\u6570\n * @param partnerKey   \u5bc6\u94a5\n * @param signType     \u7b7e\u540d\u7c7b\u578b\n * @param haveSignType \u7b7e\u540d\u662f\u5426\u5305\u542b sign_type \u5b57\u6bb5\n * @return \u7b7e\u540d\u540e\u7684 Map\n */\n", "func_signal": "public static Map<String, String> buildSign(Map<String, String> params, String partnerKey, SignType signType, boolean haveSignType)", "code": "{\n    if (haveSignType) {\n        params.put(FIELD_SIGN_TYPE, signType.getType());\n    }\n    String sign = createSign(params, partnerKey, signType);\n    params.put(FIELD_SIGN, sign);\n    return params;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u66ff\u6362url\u4e2d\u7684\u53c2\u6570\n *\n * @param str   \u539f\u59cb\u5b57\u7b26\u4e32\n * @param regex \u8868\u8fbe\u5f0f\n * @param args  \u66ff\u6362\u5b57\u7b26\u4e32\n * @return {String}\n */\n", "func_signal": "public static String replace(String str, String regex, String... args)", "code": "{\n    for (String arg : args) {\n        str = str.replaceFirst(regex, arg);\n    }\n    return str;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u67e5\u8be2\u9000\u6b3e\n *\n * @param config {@link PayPalApiConfig} \u652f\u4ed8\u914d\u7f6e\n * @param id     \u8ba2\u5355\u53f7\n * @return {@link IJPayHttpResponse} \u8bf7\u6c42\u8fd4\u56de\u7684\u7ed3\u679c\n */\n", "func_signal": "public static IJPayHttpResponse refundQuery(PayPalApiConfig config, String id)", "code": "{\n    AccessToken accessToken = AccessTokenKit.get(config.getClientId());\n    String url = String.format(getReqUrl(PayPalApiUrl.REFUND_QUERY, config.isSandBox()), id);\n    return get(url, null, getBaseHeaders(accessToken));\n}", "path": "IJPay/IJPay-PayPal/src/main/java/com/ijpay/paypal/PayPalApi.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u6784\u5efa v3 \u63a5\u53e3\u6240\u9700\u7684 Authorization\n *\n * @param method     {@link RequestMethod} \u8bf7\u6c42\u65b9\u6cd5\n * @param urlSuffix  \u53ef\u901a\u8fc7 WxApiType \u6765\u83b7\u53d6\uff0cURL\u6302\u8f7d\u53c2\u6570\u9700\u8981\u81ea\u884c\u62fc\u63a5\n * @param mchId      \u5546\u6237Id\n * @param serialNo   \u5546\u6237 API \u8bc1\u4e66\u5e8f\u5217\u53f7\n * @param privateKey key.pem \u8bc1\u4e66\u8def\u5f84\n * @param body       \u63a5\u53e3\u8bf7\u6c42\u53c2\u6570\n * @return {@link String} \u8fd4\u56de v3 \u6240\u9700\u7684 Authorization\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static String buildAuthorization(RequestMethod method, String urlSuffix, String mchId,\n                                        String serialNo, PrivateKey privateKey, String body) throws Exception", "code": "{\n\n    long timestamp = System.currentTimeMillis() / 1000;\n    String authType = \"WECHATPAY2-SHA256-RSA2048\";\n    String nonceStr = PayKit.generateStr();\n\n    return buildAuthorization(method, urlSuffix, mchId, serialNo, privateKey, body, nonceStr, timestamp, authType);\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u83b7\u53d6 AccessToken\n *\n * @param config {@link PayPalApiConfig} \u652f\u4ed8\u914d\u7f6e\n * @return {@link IJPayHttpResponse} \u8bf7\u6c42\u8fd4\u56de\u7684\u7ed3\u679c\n */\n", "func_signal": "public static IJPayHttpResponse getToken(PayPalApiConfig config)", "code": "{\n    Map<String, String> headers = new HashMap<>(3);\n    headers.put(\"Accept\", ContentType.JSON.toString());\n    headers.put(\"Content-Type\", ContentType.FORM_URLENCODED.toString());\n    headers.put(\"Authorization\", \"Basic \".concat(Base64.encode((config.getClientId().concat(\":\").concat(config.getSecret())).getBytes(StandardCharsets.UTF_8))));\n    Map<String, Object> params = new HashMap<>(1);\n    params.put(\"grant_type\", \"client_credentials\");\n    return post(getReqUrl(PayPalApiUrl.GET_TOKEN, config.isSandBox()), params, headers);\n}", "path": "IJPay/IJPay-PayPal/src/main/java/com/ijpay/paypal/PayPalApi.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u6784\u5efa v3 \u63a5\u53e3\u6240\u9700\u7684 Authorization\n *\n * @param method    {@link RequestMethod} \u8bf7\u6c42\u65b9\u6cd5\n * @param urlSuffix \u53ef\u901a\u8fc7 WxApiType \u6765\u83b7\u53d6\uff0cURL\u6302\u8f7d\u53c2\u6570\u9700\u8981\u81ea\u884c\u62fc\u63a5\n * @param mchId     \u5546\u6237Id\n * @param serialNo  \u5546\u6237 API \u8bc1\u4e66\u5e8f\u5217\u53f7\n * @param keyPath   key.pem \u8bc1\u4e66\u8def\u5f84\n * @param body      \u63a5\u53e3\u8bf7\u6c42\u53c2\u6570\n * @return {@link String} \u8fd4\u56de v3 \u6240\u9700\u7684 Authorization\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static String buildAuthorization(RequestMethod method, String urlSuffix, String mchId,\n                                        String serialNo, String keyPath, String body) throws Exception", "code": "{\n\n    long timestamp = System.currentTimeMillis() / 1000;\n    String authType = \"WECHATPAY2-SHA256-RSA2048\";\n    String nonceStr = PayKit.generateStr();\n\n    return buildAuthorization(method, urlSuffix, mchId, serialNo, keyPath, body, nonceStr, timestamp, authType);\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u9000\u6b3e\n *\n * @param config    {@link PayPalApiConfig} \u652f\u4ed8\u914d\u7f6e\n * @param captureId \u8ba2\u5355\u53f7\n * @param data      \u8bf7\u6c42\u53c2\u6570\n * @return {@link IJPayHttpResponse} \u8bf7\u6c42\u8fd4\u56de\u7684\u7ed3\u679c\n */\n", "func_signal": "public static IJPayHttpResponse refund(PayPalApiConfig config, String captureId, String data)", "code": "{\n    AccessToken accessToken = AccessTokenKit.get(config.getClientId());\n    String url = String.format(getReqUrl(PayPalApiUrl.REFUND, config.isSandBox()), captureId);\n    return post(url, data, getBaseHeaders(accessToken));\n}", "path": "IJPay/IJPay-PayPal/src/main/java/com/ijpay/paypal/PayPalApi.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u83b7\u53d6\u63a5\u53e3\u8bf7\u6c42\u7684 URL\n *\n * @param payPalApiUrl {@link PayPalApiUrl} \u652f\u4ed8 API \u63a5\u53e3\u679a\u4e3e\n * @param isSandBox    \u662f\u5426\u662f\u6c99\u7bb1\u73af\u5883\n * @return {@link String} \u8fd4\u56de\u5b8c\u6574\u7684\u63a5\u53e3\u8bf7\u6c42URL\n */\n", "func_signal": "public static String getReqUrl(PayPalApiUrl payPalApiUrl, boolean isSandBox)", "code": "{\n    return (isSandBox ? PayPalApiUrl.SANDBOX_GATEWAY.getUrl() : PayPalApiUrl.LIVE_GATEWAY.getUrl())\n            .concat(payPalApiUrl.getUrl());\n}", "path": "IJPay/IJPay-PayPal/src/main/java/com/ijpay/paypal/PayPalApi.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * PC H5 \u652f\u4ed8\u521b\u5efa\u7b7e\u540d\n *\n * @param rsaPrivateKey RSA \u79c1\u94a5\n * @param strDesKey     DES \u5bc6\u94a5\n * @return \u751f\u6210\u7b7e\u540d\u540e\u7684 Map\n */\n", "func_signal": "public Map<String, String> createSign(String rsaPrivateKey, String strDesKey)", "code": "{\n    Map<String, String> map = toMap();\n    // \u751f\u6210\u7b7e\u540d\n    String sign = JdPayKit.signRemoveSelectedKeys(map, rsaPrivateKey, new ArrayList<String>());\n    map.put(\"sign\", sign);\n    // 3DES\u8fdb\u884c\u52a0\u5bc6\n    return JdPayKit.threeDesToMap(map, strDesKey);\n}", "path": "IJPay/IJPay-JDPay/src/main/java/com/ijpay/jdpay/model/JdBaseModel.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u6784\u5efa v3 \u63a5\u53e3\u6240\u9700\u7684 Authorization\n *\n * @param method    {@link RequestMethod} \u8bf7\u6c42\u65b9\u6cd5\n * @param urlSuffix \u53ef\u901a\u8fc7 WxApiType \u6765\u83b7\u53d6\uff0cURL\u6302\u8f7d\u53c2\u6570\u9700\u8981\u81ea\u884c\u62fc\u63a5\n * @param mchId     \u5546\u6237Id\n * @param serialNo  \u5546\u6237 API \u8bc1\u4e66\u5e8f\u5217\u53f7\n * @param keyPath   key.pem \u8bc1\u4e66\u8def\u5f84\n * @param body      \u63a5\u53e3\u8bf7\u6c42\u53c2\u6570\n * @param nonceStr  \u968f\u673a\u5b57\u7b26\u5e93\n * @param timestamp \u65f6\u95f4\u6233\n * @param authType  \u8ba4\u8bc1\u7c7b\u578b\n * @return {@link String} \u8fd4\u56de v3 \u6240\u9700\u7684 Authorization\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static String buildAuthorization(RequestMethod method, String urlSuffix, String mchId,\n                                        String serialNo, String keyPath, String body, String nonceStr,\n                                        long timestamp, String authType) throws Exception", "code": "{\n    // \u6784\u5efa\u7b7e\u540d\u53c2\u6570\n    String buildSignMessage = PayKit.buildSignMessage(method, urlSuffix, timestamp, nonceStr, body);\n    String signature = PayKit.createSign(buildSignMessage, keyPath);\n    // \u6839\u636e\u5e73\u53f0\u89c4\u5219\u751f\u6210\u8bf7\u6c42\u5934 authorization\n    return PayKit.getAuthorization(mchId, serialNo, nonceStr, String.valueOf(timestamp), signature, authType);\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * JS \u8c03\u8d77\u652f\u4ed8\u7b7e\u540d\n *\n * @param appId    \u5e94\u7528\u7f16\u53f7\n * @param prepayId \u9884\u4ed8\u8ba2\u5355\u53f7\n * @param keyPath  key.pem \u8bc1\u4e66\u8def\u5f84\n * @return \u5524\u8d77\u652f\u4ed8\u9700\u8981\u7684\u53c2\u6570\n * @throws Exception \u9519\u8bef\u4fe1\u606f\n */\n", "func_signal": "public static Map<String, String> jsApiCreateSign(String appId, String prepayId, String keyPath) throws Exception", "code": "{\n    String timeStamp = String.valueOf(System.currentTimeMillis() / 1000);\n    String nonceStr = String.valueOf(System.currentTimeMillis());\n    String packageStr = \"prepay_id=\" + prepayId;\n    Map<String, String> packageParams = new HashMap<>(6);\n    packageParams.put(\"appId\", appId);\n    packageParams.put(\"timeStamp\", timeStamp);\n    packageParams.put(\"nonceStr\", nonceStr);\n    packageParams.put(\"package\", packageStr);\n    packageParams.put(\"signType\", SignType.RSA.toString());\n    ArrayList<String> list = new ArrayList<>();\n    list.add(appId);\n    list.add(timeStamp);\n    list.add(nonceStr);\n    list.add(packageStr);\n    String packageSign = PayKit.createSign(\n            PayKit.buildSignMessage(list),\n            keyPath\n    );\n    packageParams.put(\"paySign\", packageSign);\n    return packageParams;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * <p>\u5c0f\u7a0b\u5e8f-\u9884\u4ed8\u8ba2\u5355\u518d\u6b21\u7b7e\u540d</p>\n * <p>\u6ce8\u610f\u6b64\u5904\u7b7e\u540d\u65b9\u5f0f\u9700\u4e0e\u7edf\u4e00\u4e0b\u5355\u7684\u7b7e\u540d\u7c7b\u578b\u4e00\u81f4</p>\n *\n * @param appId      \u5e94\u7528\u7f16\u53f7\n * @param prepayId   \u9884\u4ed8\u8ba2\u5355\u53f7\n * @param partnerKey API Key\n * @param signType   \u7b7e\u540d\u65b9\u5f0f\n * @return \u518d\u6b21\u7b7e\u540d\u540e\u7684 Map\n */\n", "func_signal": "public static Map<String, String> miniAppPrepayIdCreateSign(String appId, String prepayId, String partnerKey, SignType signType)", "code": "{\n    Map<String, String> packageParams = new HashMap<>(6);\n    packageParams.put(\"appId\", appId);\n    packageParams.put(\"timeStamp\", String.valueOf(System.currentTimeMillis() / 1000));\n    packageParams.put(\"nonceStr\", String.valueOf(System.currentTimeMillis()));\n    packageParams.put(\"package\", \"prepay_id=\" + prepayId);\n    if (signType == null) {\n        signType = SignType.MD5;\n    }\n    packageParams.put(\"signType\", signType.getType());\n    String packageSign = createSign(packageParams, partnerKey, signType);\n    packageParams.put(\"paySign\", packageSign);\n    return packageParams;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * <p>\u516c\u4f17\u53f7\u652f\u4ed8-\u9884\u4ed8\u8ba2\u5355\u518d\u6b21\u7b7e\u540d</p>\n * <p>\u6ce8\u610f\u6b64\u5904\u7b7e\u540d\u65b9\u5f0f\u9700\u4e0e\u7edf\u4e00\u4e0b\u5355\u7684\u7b7e\u540d\u7c7b\u578b\u4e00\u81f4</p>\n *\n * @param prepayId   \u9884\u4ed8\u8ba2\u5355\u53f7\n * @param appId      \u5e94\u7528\u7f16\u53f7\n * @param partnerKey API Key\n * @param signType   \u7b7e\u540d\u65b9\u5f0f\n * @return \u518d\u6b21\u7b7e\u540d\u540e\u7684 Map\n */\n", "func_signal": "public static Map<String, String> prepayIdCreateSign(String prepayId, String appId, String partnerKey, SignType signType)", "code": "{\n    Map<String, String> packageParams = new HashMap<>(6);\n    packageParams.put(\"appId\", appId);\n    packageParams.put(\"timeStamp\", String.valueOf(System.currentTimeMillis() / 1000));\n    packageParams.put(\"nonceStr\", String.valueOf(System.currentTimeMillis()));\n    packageParams.put(\"package\", \"prepay_id=\" + prepayId);\n    if (signType == null) {\n        signType = SignType.MD5;\n    }\n    packageParams.put(\"signType\", signType.getType());\n    String packageSign = WxPayKit.createSign(packageParams, partnerKey, signType);\n    packageParams.put(\"paySign\", packageSign);\n    return packageParams;\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u9a8c\u8bc1\u7b7e\u540d\n *\n * @param signature \u5f85\u9a8c\u8bc1\u7684\u7b7e\u540d\n * @param body      \u5e94\u7b54\u4e3b\u4f53\n * @param nonce     \u968f\u673a\u4e32\n * @param timestamp \u65f6\u95f4\u6233\n * @param publicKey {@link PublicKey} \u5fae\u4fe1\u652f\u4ed8\u5e73\u53f0\u516c\u94a5\n * @return \u7b7e\u540d\u7ed3\u679c\n * @throws Exception \u5f02\u5e38\u4fe1\u606f\n */\n", "func_signal": "public static boolean verifySignature(String signature, String body, String nonce, String timestamp, PublicKey publicKey) throws Exception", "code": "{\n    String buildSignMessage = PayKit.buildSignMessage(timestamp, nonce, body);\n    return RsaKit.checkByPublicKey(buildSignMessage, signature, publicKey);\n}", "path": "IJPay/IJPay-Core/src/main/java/com/ijpay/core/kit/WxPayKit.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * \u5c01\u88c5\u6210\u529f\u65f6\u7684\u6570\u636e\n *\n * @param data Object\n * @return {AjaxResult}\n */\n", "func_signal": "public AjaxResult success(Object data)", "code": "{\n    this.data = data;\n    this.code = 0;\n    return this;\n}", "path": "IJPay/IJPay-Demo-SpringBoot/src/main/java/com/ijpay/demo/vo/AjaxResult.java", "commit_date": "2019-09-01 00:00:00", "repo_name": "Javen205/IJPay", "stars": 5096, "license": "apache-2.0", "language": "java", "size": 25323}
{"docstring": "/**\n * After handle a request, update counters\n *\n * @param clientId client id\n * @param seqId    request id\n */\n", "func_signal": "public void after(int clientId, int seqId)", "code": "{\n  totalRunningRPCCounter.decrementAndGet();\n  getClientRunningContext(clientId).after(seqId);\n  if (totalRunningRPCCounter.get() + infligtingRPCCounter.get() < 0.7 * lastOOMRunningRPCCounter\n    .get()) {\n    oomCounter.set(0);\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Find the used partition of the specifiex index array of this matrix this row\n *\n * @return partition get param of specified index\n */\n", "func_signal": "@Override public List<PartitionGetParam> split()", "code": "{\n  if (partKeyToIndexesMap == null) {\n    partKeyToIndexesMap =\n      split(PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId), indexes);\n    indexes = null;\n  }\n\n  List<PartitionGetParam> partParams = new ArrayList<>(partKeyToIndexesMap.size());\n  for (Map.Entry<PartitionKey, long[]> entry : partKeyToIndexesMap.entrySet()) {\n    partParams.add(new LongIndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\n  }\n  return partParams;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/indexed/LongIndexGetParam.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Before handle a request, update counters\n *\n * @param clientId client id\n * @param seqId    request id\n */\n", "func_signal": "public void before(int clientId, int seqId)", "code": "{\n  totalRPCCounter.incrementAndGet();\n  totalRunningRPCCounter.incrementAndGet();\n  getClientRunningContext(clientId).before(seqId);\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Print context\n */\n", "func_signal": "public void printToken()", "code": "{\n  LOG.info(\"=====================Server running context start=======================\");\n  LOG.info(\"state = \" + getState());\n  LOG.info(\"totalRunningRPCCounter = \" + totalRunningRPCCounter.get());\n  LOG.info(\"infligtingRPCCounter = \" + infligtingRPCCounter.get());\n  LOG.info(\"oomCounter = \" + oomCounter.get());\n  LOG.info(\"maxRunningRPCCounter = \" + maxRunningRPCCounter.get());\n  LOG.info(\"generalRunningRPCCounter = \" + generalRunningRPCCounter.get());\n  LOG.info(\"lastOOMRunningRPCCounter = \" + lastOOMRunningRPCCounter.get());\n  LOG.info(\"totalRPCCounter = \" + totalRPCCounter.get());\n  //for (Map.Entry<Integer, ClientRunningContext> clientEntry : clientRPCCounters.entrySet()) {\n  //  LOG.info(\"client \" + clientEntry.getKey() + \" running context:\");\n  //  clientEntry.getValue().printToken();\n  //}\n\n  LOG.info(\"total=\" + WorkerPool.total.get());\n  LOG.info(\"normal=\" + WorkerPool.normal);\n  LOG.info(\"network=\" + WorkerPool.network);\n  LOG.info(\"channelInUseCounter=\" + WorkerPool.channelInUseCounter);\n  LOG.info(\"oom=\" + WorkerPool.oom);\n  LOG.info(\"unknown=\" + WorkerPool.unknown);\n  LOG.info(\"=====================Server running context end  =======================\");\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * @param matId               matrixID\n * @param rowId               rowID\n * @param partKeyToIndexesMap specified index\n */\n", "func_signal": "public LongIndexGetParam(int matId, int rowId, Map<PartitionKey, long[]> partKeyToIndexesMap)", "code": "{\n  super(matId);\n  this.rowId = rowId;\n  this.partKeyToIndexesMap = partKeyToIndexesMap;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/indexed/LongIndexGetParam.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Get client running context\n *\n * @param clientId client id\n * @return client running context\n */\n", "func_signal": "public ClientRunningContext getClientRunningContext(int clientId)", "code": "{\n  ClientRunningContext clientContext = clientRPCCounters.get(clientId);\n  if (clientContext == null) {\n    clientContext = clientRPCCounters.putIfAbsent(clientId, new ClientRunningContext());\n    if (clientContext == null) {\n      clientContext = clientRPCCounters.get(clientId);\n    }\n  }\n  return clientContext;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Override as non-synchronized method because the method is thread safe.\n */\n", "func_signal": "@Override public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException", "code": "{\n  try {\n    CallFuture<List<ByteBuffer>> transceiverFuture = new CallFuture<List<ByteBuffer>>();\n    transceive(request, transceiverFuture);\n    return transceiverFuture.get();\n  } catch (InterruptedException e) {\n    LOG.info(\"failed to get the response\", e);\n    throw new IOException(e);\n  } catch (ExecutionException e) {\n    LOG.warn(\"failed to get the response\", e);\n    throw new IOException(e);\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransceiver.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Stop token timeout checker\n */\n", "func_signal": "public void stop()", "code": "{\n  if (!stopped.compareAndSet(false, true)) {\n    if (tokenTimeoutChecker != null) {\n      tokenTimeoutChecker.interrupt();\n      tokenTimeoutChecker = null;\n    }\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Start token timeout checker: if some tokens are not used within a specified time, just release them\n */\n", "func_signal": "public void start()", "code": "{\n  tokenTimeoutChecker = new Thread(() -> {\n    while (!stopped.get() && !Thread.interrupted()) {\n      long ts = System.currentTimeMillis();\n      for (Map.Entry<Integer, ClientRunningContext> clientEntry : clientRPCCounters.entrySet()) {\n        int inflightRPCCounter = clientEntry.getValue().getInflightingRPCCounter();\n        long lastUpdateTs = clientEntry.getValue().getLastUpdateTs();\n        LOG.debug(\n          \"inflightRPCCounter=\" + inflightRPCCounter + \", lastUpdateTs=\" + lastUpdateTs + \", ts=\"\n            + ts);\n        if (inflightRPCCounter != 0 && (ts - lastUpdateTs) > tokenTimeoutMs) {\n          LOG.info(\"client \" + clientEntry.getKey() + \" token is timeout\");\n          relaseToken(clientEntry.getKey(), inflightRPCCounter);\n        }\n      }\n      checkOOM();\n      if (LOG.isDebugEnabled()) {\n        printToken();\n      } else {\n        printTokenIfBusy();\n      }\n\n      printToken();\n      try {\n        Thread.sleep(30000);\n      } catch (InterruptedException e) {\n        if (!stopped.get()) {\n          LOG.error(\"token-timeout-checker is interrupted\");\n        }\n      }\n    }\n  });\n\n  tokenTimeoutChecker.setName(\"token-timeout-checker\");\n  tokenTimeoutChecker.start();\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Create a new GetUDFRequest.\n *\n * @param userRequestId user request id\n * @param partKey       matrix partition key\n * @param getFuncClass  udf class name\n * @param partParam     partition parameter of the udf\n */\n", "func_signal": "public GetUDFRequest(int userRequestId, PartitionKey partKey, String getFuncClass,\n  PartitionGetParam partParam)", "code": "{\n  super(userRequestId, 0, partKey);\n  this.getFuncClass = getFuncClass;\n  this.partParam = partParam;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/request/GetUDFRequest.java", "commit_date": "2018-11-26 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * @param matId   matrixID\n * @param rowId   rowID\n * @param indexes specified index\n */\n", "func_signal": "public LongIndexGetParam(int matId, int rowId, long[] indexes)", "code": "{\n  super(matId);\n  this.rowId = rowId;\n  this.indexes = indexes;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/indexed/LongIndexGetParam.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Allocate token for a request\n *\n * @param clientId client id\n * @param dataSize request size\n * @return token number\n */\n", "func_signal": "public int allocateToken(int clientId, int dataSize)", "code": "{\n  if (isOOM()) {\n    return 0;\n  } else {\n    int runningAndInfightingRPCCounter = getRunningAndInflightingRPCCounter();\n    if (maxRunningRPCCounter.get() - runningAndInfightingRPCCounter >= 1) {\n      infligtingRPCCounter.incrementAndGet();\n      getClientRunningContext(clientId).allocateToken(1);\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Release token\n *\n * @param clientId client id\n * @param tokenNum token number\n */\n", "func_signal": "public void relaseToken(int clientId, int tokenNum)", "code": "{\n  infligtingRPCCounter.addAndGet(-tokenNum);\n  getClientRunningContext(clientId).releaseToken(tokenNum);\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Creates a TransceiverCallback.\n *\n * @param callback the callback to set.\n */\n", "func_signal": "public TransceiverCallback(RpcRequestBody requestBody,\n  Class<? extends VersionedProtocol> protocol, Callback<T> callback)", "code": "{\n  this.requestBody = requestBody;\n  this.protocol = protocol;\n  this.callback = callback;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransceiver.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Get Server running state\n *\n * @return server running state\n */\n", "func_signal": "public ServerState getState()", "code": "{\n  //return ServerState.GENERAL;\n  int runningAndInfightingRPCCounter = getRunningAndInflightingRPCCounter();\n  if (isOOM()) {\n    return ServerState.BUSY;\n  }\n\n  if (runningAndInfightingRPCCounter >= maxRunningRPCCounter.get()) {\n    return ServerState.BUSY;\n  } else if ((runningAndInfightingRPCCounter < maxRunningRPCCounter.get()) && (\n    runningAndInfightingRPCCounter >= generalRunningRPCCounter.get())) {\n    return ServerState.GENERAL;\n  } else {\n    return ServerState.IDLE;\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Find the used partition of the specifiex index array of this matrix this row\n *\n * @param partKeys all partitions of this matrix and this row\n * @param indexes  specified index array\n * @return the used partition of the specifiex index array of this matrix this row\n */\n", "func_signal": "private Map<PartitionKey, long[]> split(List<PartitionKey> partKeys, long[] indexes)", "code": "{\n  // Sort the parts by partitionId\n  Arrays.sort(indexes);\n\n  HashMap<PartitionKey, long[]> ret = new HashMap<>();\n\n  // Sort partition keys use start column index\n  Collections.sort(partKeys, (PartitionKey key1, PartitionKey key2) -> {\n    return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\n  });\n\n  int ii = 0;\n  int keyIndex = 0;\n  // For each partition, we generate a update split.\n  // Although the split is empty for partitions those without any update data,\n  // we still need to generate a update split to update the clock info on ps.\n  while (ii < indexes.length || keyIndex < partKeys.size()) {\n    int length = 0;\n    long endOffset = partKeys.get(keyIndex).getEndCol();\n    while (ii < indexes.length && indexes[ii] < endOffset) {\n      ii++;\n      length++;\n    }\n\n    if (length != 0) {\n      long[] split = new long[length];\n      System.arraycopy(indexes, ii - length, split, 0, length);\n      ret.put(partKeys.get(keyIndex), split);\n    }\n    keyIndex++;\n  }\n  return ret;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/indexed/LongIndexGetParam.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Make a call, passing <code>param</code>, to the IPC server running at <code>address</code>\n * which is servicing the <code>protocol</code> protocol, with the <code>ticket</code>\n * credentials, returning the value. Throws exceptions if there are network problems or if the\n * remote code threw an exception.\n */\n", "func_signal": "public Message call(RpcRequestBody requestBody, Class<? extends VersionedProtocol> protocol,\n  int rpcTimeout, Callback<Message> callback) throws Exception", "code": "{\n  ConnectionHeader.Builder builder = ConnectionHeader.newBuilder();\n  builder.setProtocol(protocol == null ? \"\" : protocol.getName());\n  ConnectionHeader connectionHeader = builder.build();\n\n  RpcRequestHeader.Builder headerBuilder = RPCProtos.RpcRequestHeader.newBuilder();\n\n  RpcRequestHeader rpcHeader = headerBuilder.build();\n\n  ByteBufferOutputStream bbo = new ByteBufferOutputStream();\n  connectionHeader.writeDelimitedTo(bbo);\n  rpcHeader.writeDelimitedTo(bbo);\n  requestBody.writeDelimitedTo(bbo);\n  CallFuture<Message> future = new CallFuture<Message>(callback);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"send message, \" + requestBody.getMethodName() + \" , channel: \" + channel);\n  }\n\n  transceive(bbo.getBufferList(),\n    new TransceiverCallback<Message>(requestBody, protocol, future));\n\n  if (callback == null) {\n    try {\n      return future.get(\n        conf.getLong(AngelConf.ANGEL_READ_TIMEOUT_SEC, AngelConf.DEFAULT_ANGEL_READ_TIMEOUT_SEC),\n        TimeUnit.SECONDS);\n    } catch (java.util.concurrent.TimeoutException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n          \"timeout for: send message, \" + requestBody.getMethodName() + \" , channel: \" + channel);\n      }\n      disconnect(this.channel, true, true, e);\n      throw e;\n    }\n  }\n  return null;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransceiver.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * OOM happened\n */\n", "func_signal": "public void oom()", "code": "{\n  oomCounter.incrementAndGet();\n  int runningAndInfightingRPCCounter = getRunningAndInflightingRPCCounter();\n  lastOOMRunningRPCCounter.set(runningAndInfightingRPCCounter);\n  maxRunningRPCCounter.set((int) (runningAndInfightingRPCCounter * 0.8));\n  generalRunningRPCCounter.set((int) (runningAndInfightingRPCCounter * 0.8 * genFactor));\n  LOG.info(\"OOM happened, lastOOMRunningRPCCounter=\" + lastOOMRunningRPCCounter.get()\n    + \", maxRunningRPCCounter=\" + maxRunningRPCCounter.get() + \", generalRunningRPCCounter=\"\n    + generalRunningRPCCounter.get());\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/RunningContext.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Gets the Netty channel. If the channel is not connected, first attempts to connect. NOTE: The\n * stateLock read lock *must* be acquired before calling this method.\n *\n * @return the Netty channel\n * @throws java.io.IOException if an error occurs connecting the channel.\n */\n", "func_signal": "private synchronized Channel getChannel() throws IOException", "code": "{\n  if (!isChannelReady(channel)) {\n    synchronized (channelFutureLock) {\n      if (!stopping) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Connecting to \" + remoteAddr);\n        }\n        channelFuture = bootstrap.connect(remoteAddr);\n      }\n    }\n    if (channelFuture != null) {\n      try {\n        channelFuture.await(connectTimeoutMillis);\n        LOG.debug(\"waiting connect timeout! connectTimeoutMillis: \" + connectTimeoutMillis);\n      } catch (InterruptedException e) {\n        stopping = false;\n        throw new IOException(\"Request has been interrupted.\", e);\n      }\n\n      synchronized (channelFutureLock) {\n        if (!channelFuture.isSuccess()) {\n          channelFuture.cancel(true);\n          throw new IOException(\"Error connecting to \" + remoteAddr, channelFuture.cause());\n        }\n        channel = channelFuture.channel();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"new channel is {} \", channel);\n        }\n        channelFuture = null;\n      }\n    }\n  }\n  return channel;\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransceiver.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * Closes the connection to the remote peer if connected.\n *\n * @param awaitCompletion       if true, will block until the close has completed.\n * @param cancelPendingRequests if true, will drain the requests map and send an IOException to\n *                              all Callbacks.\n * @param cause                 if non-null and cancelPendingRequests is true, this Throwable will be passed to\n *                              all Callbacks.\n */\n", "func_signal": "private synchronized void disconnect(Channel channel, boolean awaitCompletion,\n  boolean cancelPendingRequests, Throwable cause)", "code": "{\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"disconnecting channel: \" + channel);\n  }\n  Channel channelToClose = null;\n  Map<Integer, Callback<List<ByteBuffer>>> requestsToCancel = null;\n\n  ChannelFuture channelFutureToCancel = null;\n  synchronized (channelFutureLock) {\n    if (stopping && channelFuture != null) {\n      channelFutureToCancel = channelFuture;\n      channelFuture = null;\n    }\n  }\n  if (channelFutureToCancel != null) {\n    channelFutureToCancel.cancel(true);\n  }\n  if (channel != null) {\n    if (cause != null) {\n      LOG.debug(\"Disconnect {} due to {}\", channel,\n        cause.getClass().getName() + cause.getMessage());\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Disconnect {}\", this.channel);\n      }\n    }\n    channelToClose = channel;\n    this.channel = null;\n\n    if (cancelPendingRequests) {\n      // Remove all pending requests (will be canceled after relinquishing\n      // write lock).\n      requestsToCancel = new ConcurrentHashMap<Integer, Callback<List<ByteBuffer>>>(requests);\n      requests.clear();\n    }\n  }\n\n  // Cancel any pending requests by sending errors to the callbacks:\n  if ((requestsToCancel != null) && !requestsToCancel.isEmpty()) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Removing \" + requestsToCancel.size() + \" pending request(s).\");\n    }\n    for (Callback<List<ByteBuffer>> request : requestsToCancel.values()) {\n      request.handleError(\n        cause != null ? cause : new IOException(getClass().getSimpleName() + \" closed\"));\n    }\n  }\n\n  // Close the channel:\n  if (channelToClose != null) {\n    ChannelFuture closeFuture = channelToClose.close();\n    if (awaitCompletion && (closeFuture != null)) {\n      closeFuture.awaitUninterruptibly(connectTimeoutMillis);\n    }\n  }\n}", "path": "angel/angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransceiver.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "Angel-ML/angel", "stars": 6692, "license": "other", "language": "java", "size": 93424}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public Builder clearHi()", "code": "{\n  if (hiBuilder_ == null) {\n    hi_ = null;\n    onChanged();\n  } else {\n    hi_ = null;\n    hiBuilder_ = null;\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.Point getHi()", "code": "{\n  if (hiBuilder_ == null) {\n    return hi_ == null ? io.grpc.examples.routeguide.Point.getDefaultInstance() : hi_;\n  } else {\n    return hiBuilder_.getMessage();\n  }\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * process trace in server end\n * \n * @param caller\n * @param request\n * @return\n */\n", "func_signal": "protected Response processProviderTrace(Tracer tracer, Caller<?> caller, Request request)", "code": "{\n    Span span = extractTraceInfo(request, tracer);\n    span.setTag(\"requestId\", request.getRequestId());\n    OpenTracingContext.setActiveSpan(span);\n    return process(caller, request, span);\n}", "path": "motan/motan-extension/filter-extension/filter-opentracing/src/main/java/com/weibo/api/motan/filter/opentracing/OpenTracingFilter.java", "commit_date": "2016-12-21 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public Builder clearLo()", "code": "{\n  if (loBuilder_ == null) {\n    lo_ = null;\n    onChanged();\n  } else {\n    lo_ = null;\n    loBuilder_ = null;\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public Builder setHi(\n    io.grpc.examples.routeguide.Point.Builder builderForValue)", "code": "{\n  if (hiBuilder_ == null) {\n    hi_ = builderForValue.build();\n    onChanged();\n  } else {\n    hiBuilder_.setMessage(builderForValue.build());\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public Builder mergeLo(io.grpc.examples.routeguide.Point value)", "code": "{\n  if (loBuilder_ == null) {\n    if (lo_ != null) {\n      lo_ =\n        io.grpc.examples.routeguide.Point.newBuilder(lo_).mergeFrom(value).buildPartial();\n    } else {\n      lo_ = value;\n    }\n    onChanged();\n  } else {\n    loBuilder_.mergeFrom(value);\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "// \u6d4b\u8bd5server\u7aef\u5bf9\u65e7\u7248\u672c\u7684\u517c\u5bb9\u6027\n", "func_signal": "@Test\npublic void testCompatibility() throws IOException", "code": "{\n    DefaultRequest request = getRequest(\"int[]\", new Object[] {new int[] {1, 2}});\n    Codec v1Codec = new DefaultRpcCodec();\n    byte[] bytes = v1Codec.encode(channel, request);\n    assertTrue(isV1Version(bytes));\n    Request result = (Request) rpcCodec.decode(channel, \"\", bytes);\n\n    Assert.assertTrue(equals(request, result));\n}", "path": "motan/motan-core/src/test/java/com/weibo/api/motan/protocol/rpc/CompressRpcCodecTest.java", "commit_date": "2019-04-03 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * process trace in client end\n * \n * @param caller\n * @param request\n * @return\n */\n", "func_signal": "protected Response processRefererTrace(Tracer tracer, Caller<?> caller, Request request)", "code": "{\n    String operationName = buildOperationName(request);\n    SpanBuilder spanBuilder = tracer.buildSpan(operationName);\n    Span activeSpan = OpenTracingContext.getActiveSpan();\n    if (activeSpan != null) {\n        spanBuilder.asChildOf(activeSpan);\n    }\n    Span span = spanBuilder.start();\n    span.setTag(\"requestId\", request.getRequestId());\n\n    attachTraceInfo(tracer, span, request);\n    return process(caller, request, span);\n\n}", "path": "motan/motan-extension/filter-extension/filter-opentracing/src/main/java/com/weibo/api/motan/filter/opentracing/OpenTracingFilter.java", "commit_date": "2016-12-21 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.Point.Builder getLoBuilder()", "code": "{\n  \n  onChanged();\n  return getLoFieldBuilder().getBuilder();\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "// \u6d4b\u8bd5gz\u538b\u7f29\n", "func_signal": "@Test\npublic void testGzip() throws IOException", "code": "{\n    DefaultRequest request = getRequest(\"int[]\", new Object[] {new int[] {1, 2}});\n    byte[] bytes = rpcCodec.encode(channel, request);\n    assertFalse(isGzip(bytes));\n\n    // \u5c0f\u4e8e\u9608\u503c\n    int bodyLength = ByteUtil.bytes2int(bytes, 12);\n    URL url = new URL(\"motan\", \"localhost\", 18080, \"com.weibo.api.motan.procotol.example.IHello\");\n    Map<String, String> params = url.getParameters();\n    params.put(URLParamType.usegz.name(), \"true\");\n    params.put(URLParamType.mingzSize.name(), String.valueOf(bodyLength - 1));\n    Channel tempChannel = new MockChannel(url);\n    bytes = rpcCodec.encode(tempChannel, request);\n    assertTrue(isGzip(bytes));\n\n    // \u7b49\u4e8e\u3001\u5927\u4e8e\u9608\u503c.url\u5185\u90e8\u5bf9\u6570\u5b57\u7c7b\u578b\u53c2\u6570\u6709\u7f13\u5b58\uff0c\u4e14\u65e0\u6cd5\u52a8\u6001\u66f4\u65b0\uff0c\u9700\u8981\u91cd\u65b0\u751f\u4ea7url\u53cachannel\n    url = new URL(\"motan\", \"localhost\", 18080, \"com.weibo.api.motan.procotol.example.IHello\");\n    params = url.getParameters();\n    params.put(URLParamType.usegz.name(), \"true\");\n    params.put(URLParamType.mingzSize.name(), String.valueOf(bodyLength));\n    tempChannel = new MockChannel(url);\n    bytes = rpcCodec.encode(tempChannel, request);\n    assertFalse(isGzip(bytes));\n}", "path": "motan/motan-core/src/test/java/com/weibo/api/motan/protocol/rpc/CompressRpcCodecTest.java", "commit_date": "2019-04-03 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.Point getLo()", "code": "{\n  if (loBuilder_ == null) {\n    return lo_ == null ? io.grpc.examples.routeguide.Point.getDefaultInstance() : lo_;\n  } else {\n    return loBuilder_.getMessage();\n  }\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.PointOrBuilder getHiOrBuilder()", "code": "{\n  if (hiBuilder_ != null) {\n    return hiBuilder_.getMessageOrBuilder();\n  } else {\n    return hi_ == null ?\n        io.grpc.examples.routeguide.Point.getDefaultInstance() : hi_;\n  }\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "// \u6d4b\u8bd5\u5f00\u5173\u6709\u6548\u6027\n", "func_signal": "@Test\npublic void testSwitcher() throws IOException", "code": "{\n    DefaultRequest request = getRequest(\"void\", null);\n    byte[] bytes = rpcCodec.encode(channel, request);\n    assertTrue(isCompressVersion(bytes));\n    // \u6574\u4f53\u5f00\u5173\u6d4b\u8bd5\n    MotanSwitcherUtil.setSwitcherValue(CompressRpcCodec.CODEC_VERSION_SWITCHER, true);\n    bytes = rpcCodec.encode(channel, request);\n    assertTrue(isV1Version(bytes));\n    // \u5206\u7ec4\u5f00\u5173\u6d4b\u8bd5\n    MotanSwitcherUtil.setSwitcherValue(CompressRpcCodec.CODEC_VERSION_SWITCHER, false);\n    MotanSwitcherUtil.setSwitcherValue(CompressRpcCodec.GROUP_CODEC_VERSION_SWITCHER + URLParamType.group.getValue(), true);\n    bytes = rpcCodec.encode(channel, request);\n    assertTrue(isV1Version(bytes));\n\n}", "path": "motan/motan-core/src/test/java/com/weibo/api/motan/protocol/rpc/CompressRpcCodecTest.java", "commit_date": "2019-04-03 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.Point.Builder getHiBuilder()", "code": "{\n  \n  onChanged();\n  return getHiFieldBuilder().getBuilder();\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "private com.google.protobuf.SingleFieldBuilderV3<\n    io.grpc.examples.routeguide.Point, io.grpc.examples.routeguide.Point.Builder, io.grpc.examples.routeguide.PointOrBuilder> \n    getLoFieldBuilder()", "code": "{\n  if (loBuilder_ == null) {\n    loBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<\n        io.grpc.examples.routeguide.Point, io.grpc.examples.routeguide.Point.Builder, io.grpc.examples.routeguide.PointOrBuilder>(\n            getLo(),\n            getParentForChildren(),\n            isClean());\n    lo_ = null;\n  }\n  return loBuilder_;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public Builder mergeHi(io.grpc.examples.routeguide.Point value)", "code": "{\n  if (hiBuilder_ == null) {\n    if (hi_ != null) {\n      hi_ =\n        io.grpc.examples.routeguide.Point.newBuilder(hi_).mergeFrom(value).buildPartial();\n    } else {\n      hi_ = value;\n    }\n    onChanged();\n  } else {\n    hiBuilder_.mergeFrom(value);\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * The other corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point hi = 2;</code>\n */\n", "func_signal": "public Builder setHi(io.grpc.examples.routeguide.Point value)", "code": "{\n  if (hiBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    hi_ = value;\n    onChanged();\n  } else {\n    hiBuilder_.setMessage(value);\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public Builder setLo(io.grpc.examples.routeguide.Point value)", "code": "{\n  if (loBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    lo_ = value;\n    onChanged();\n  } else {\n    loBuilder_.setMessage(value);\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public io.grpc.examples.routeguide.PointOrBuilder getLoOrBuilder()", "code": "{\n  if (loBuilder_ != null) {\n    return loBuilder_.getMessageOrBuilder();\n  } else {\n    return lo_ == null ?\n        io.grpc.examples.routeguide.Point.getDefaultInstance() : lo_;\n  }\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "/**\n * <pre>\n * One corner of the rectangle.\n * </pre>\n *\n * <code>optional .routeguide.Point lo = 1;</code>\n */\n", "func_signal": "public Builder setLo(\n    io.grpc.examples.routeguide.Point.Builder builderForValue)", "code": "{\n  if (loBuilder_ == null) {\n    lo_ = builderForValue.build();\n    onChanged();\n  } else {\n    loBuilder_.setMessage(builderForValue.build());\n  }\n\n  return this;\n}", "path": "motan/motan-demo/motan-demo-api/src/main/java/io/grpc/examples/routeguide/Rectangle.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "weibocom/motan", "stars": 5867, "license": "other", "language": "java", "size": 4303}
{"docstring": "//select username,Password from Logins where ID=1\n", "func_signal": "public Cursor query(String[] Projection,String Selection,String[] SelectionArgs,String SortOrder)", "code": "{\n\n    SQLiteQueryBuilder qb= new SQLiteQueryBuilder();\n    qb.setTables(TableName);\n\n    Cursor cursor=qb.query(sqlDB,Projection,Selection,SelectionArgs,null,null,SortOrder);\n    return cursor;\n}", "path": "AndroidTutorialForBeginners/SqliteDBAndroidExample/app/src/main/java/com/hussienalrubaye/androiddemowork/DBManager.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START signin]\n", "func_signal": "private void signIn()", "code": "{\n    Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);\n    startActivityForResult(signInIntent, RC_SIGN_IN);\n}", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START on_stop_remove_listener]\n", "func_signal": "@Override\npublic void onStop()", "code": "{\n    super.onStop();\n    if (mAuthListener != null) {\n        mAuth.removeAuthStateListener(mAuthListener);\n    }\n}", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [END signin]\n", "func_signal": "private void signOut()", "code": "{\n    // Firebase sign out\n    mAuth.signOut();\n\n    // Google sign out\n    Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(\n            new ResultCallback<Status>() {\n                @Override\n                public void onResult(@NonNull Status status) {\n                    updateUI(null);\n                }\n            });\n}", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START onactivityresult]\n", "func_signal": "@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    super.onActivityResult(requestCode, resultCode, data);\n\n    // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);\n    if (requestCode == RC_SIGN_IN) {\n        GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);\n        if (result.isSuccess()) {\n            // Google Sign In was successful, authenticate with Firebase\n            GoogleSignInAccount account = result.getSignInAccount();\n            firebaseAuthWithGoogle(account);\n        } else {\n            // Google Sign In failed, update UI appropriately\n            // [START_EXCLUDE]\n            updateUI(null);\n            // [END_EXCLUDE]\n        }\n    }\n}", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/** Called when a button is clicked (the button in the layout file attaches to\n  * this method with the android:onClick attribute) */\n", "func_signal": "public void onButtonClick(View v)", "code": "{\n    if (mBound) {\n        // Call a method from the LocalService.\n        // However, if this call were something that might hang, then this request should\n        // occur in a separate thread to avoid slowing down the activity performance.\n        int num = mService.getRandomNumber();\n        Toast.makeText(this, \"number: \" + num, Toast.LENGTH_SHORT).show();\n    }\n}", "path": "AndroidTutorialForBeginners/bindService.java", "commit_date": "2016-10-02 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// this method convert any stream to string\n", "func_signal": "public static String ConvertInputToStringNoChange(InputStream inputStream)", "code": "{\n\n    BufferedReader bureader=new BufferedReader( new InputStreamReader(inputStream));\n    String line ;\n    String linereultcal=\"\";\n\n    try{\n        while((line=bureader.readLine())!=null) {\n\n            linereultcal+=line;\n\n        }\n        inputStream.close();\n\n\n    }catch (Exception ex){}\n\n    return linereultcal;\n}", "path": "AndroidTutorialForBeginners/CitySunsetTime/app/src/main/java/com/hussienalrubaye/services/MainActivity.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// this method convert any stream to string\n", "func_signal": "public static String ConvertInputToStringNoChange(InputStream inputStream)", "code": "{\n\n        BufferedReader bureader=new BufferedReader( new InputStreamReader(inputStream));\n        String line ;\n        String linereultcal=\"\";\n\n        try{\n            while((line=bureader.readLine())!=null) {\n\n                linereultcal+=line;\n\n            }\n            inputStream.close();\n\n\n        }catch (Exception ex){}\n\n        return linereultcal;\n    }", "path": "AndroidTutorialForBeginners/MyAsyncTaskgetNews.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [END auth_state_listener]\n", "func_signal": "private void updateUI(FirebaseUser user)", "code": "{\nhideProgressDialog();\n String Email=user.getEmail();\n String Uid= user.getUid();\n    }", "path": "AndroidTutorialForBeginners/Firebase_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START on_start_add_listener]\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n    super.onStart();\n    mAuth.addAuthStateListener(mAuthListener);\n}", "path": "AndroidTutorialForBeginners/Firebase_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "//4 deine this methods\n    // [START on_start_add_listener]\n", "func_signal": "@Override\n    public void onStart()", "code": "{\n        super.onStart();\n        mAuth.addAuthStateListener(mAuthListener);\n    }", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/**\n * Called by Play Services when the user's location changes\n */\n", "func_signal": "@Override\npublic void onLocationChanged(Location loc)", "code": "{\n    mCurLocation = loc;\n    LocationService.location=loc;\n    updateUI();\n}", "path": "AndroidTutorialForBeginners/GoogleApiClient.java", "commit_date": "2016-10-02 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "//read contact list\n", "func_signal": "public  void getContactList()", "code": "{\n ArrayList<ListItem> list_contact=new ArrayList<ListItem>() ;\n            Cursor cursor = getContentResolver().query( ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null,null, null);\n            while (cursor.moveToNext()) {\n                String name =cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n                String phoneNumber = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n                list_contact.add(new ListItem(name, phoneNumber));\n\n\n            }\n\n      }", "path": "AndroidTutorialForBeginners/permission.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// this method convert any stream to string\n", "func_signal": "public static String ConvertInputToStringNoChange(InputStream inputStream)", "code": "{\n\n    BufferedReader bureader=new BufferedReader( new InputStreamReader(inputStream));\n    String line ;\n    String linereultcal=\"\";\n\n    try{\n        while((line=bureader.readLine())!=null) {\n\n            linereultcal+=line;\n\n        }\n        inputStream.close();\n\n\n    }catch (Exception ex){}\n\n    return linereultcal;\n}", "path": "AndroidTutorialForBeginners/TwitterApp/TwitterDem/app/src/main/java/com/alrubaye/twitterdem/Operations.java", "commit_date": "2016-11-14 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [END on_stop_remove_listener]\n", "func_signal": "private void signInAnonymously()", "code": "{\n    showProgressDialog();\n    // [START signin_anonymously]\n    mAuth.signInAnonymously()\n            .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                @Override\n                public void onComplete(@NonNull Task<AuthResult> task) {\n                    Log.d(TAG, \"signInAnonymously:onComplete:\" + task.isSuccessful());\n\n                    // If sign in fails, display a message to the user. If sign in succeeds\n                    // the auth state listener will be notified and logic to handle the\n                    // signed in user can be handled in the listener.\n                    if (!task.isSuccessful()) {\n                        Log.w(TAG, \"signInAnonymously\", task.getException());\n                        Toast.makeText(MainActivity.this, \"Authentication failed.\",\n                                Toast.LENGTH_SHORT).show();\n                    }\n\n                    // [START_EXCLUDE]\n                    hideProgressDialog();\n                    // [END_EXCLUDE]\n                }\n            });\n    // [END signin_anonymously]\n}", "path": "AndroidTutorialForBeginners/Firebase_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/**\n * Called to handle the button clicks in the view\n */\n", "func_signal": "public void onClick(int id )", "code": "{\n    switch (id){\n        case 1:\n            startLocationUpdates();\n            break;\n        case 0:\n            stopLocationUpdates();\n            break;\n    }\n}", "path": "AndroidTutorialForBeginners/GoogleApiClient.java", "commit_date": "2016-10-02 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START auth_with_google]\n", "func_signal": "private void firebaseAuthWithGoogle(GoogleSignInAccount acct)", "code": "{\n    Log.d(TAG, \"firebaseAuthWithGoogle:\" + acct.getId());\n    // [START_EXCLUDE silent]\n    showProgressDialog();\n    // [END_EXCLUDE]\n\n    AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);\n    mAuth.signInWithCredential(credential)\n            .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                @Override\n                public void onComplete(@NonNull Task<AuthResult> task) {\n                    Log.d(TAG, \"signInWithCredential:onComplete:\" + task.isSuccessful());\n\n                    // If sign in fails, display a message to the user. If sign in succeeds\n                    // the auth state listener will be notified and logic to handle the\n                    // signed in user can be handled in the listener.\n                    if (!task.isSuccessful()) {\n                        Log.w(TAG, \"signInWithCredential\", task.getException());\n                        Toast.makeText(GoogleSignInActivity.this, \"Authentication failed.\",\n                                Toast.LENGTH_SHORT).show();\n                    }\n                    // [START_EXCLUDE]\n                    hideProgressDialog();\n                    // [END_EXCLUDE]\n                }\n            });\n}", "path": "AndroidTutorialForBeginners/Firebase_PlayServices_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "// [START on_stop_remove_listener]\n", "func_signal": "@Override\npublic void onStop()", "code": "{\n    super.onStop();\n    if (mAuthListener != null) {\n        mAuth.removeAuthStateListener(mAuthListener);\n    }\n}", "path": "AndroidTutorialForBeginners/Firebase_auth.java", "commit_date": "2016-10-23 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/* online media\npublic ArrayList<SongInfo> getAllSongs() {\nSongsList.clear();\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/001.mp3\",\"Fataha\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/002.mp3\",\"Bakara\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/003.mp3\",\"Al-Imran\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/004.mp3\",\"An-Nisa'\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/005.mp3\",\"Al-Ma'idah\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/006.mp3\",\"Al-An'am\",\"bakar\",\"quran\"));\nSongsList.add(new SongInfo(\"http://server6.mp3quran.net/thubti/007.mp3\",\"Al-A'raf\",\"bakar\",\"quran\"));\n\nreturn SongsList;\n}*/\n//local\n", "func_signal": "public ArrayList<SongInfo> getAllSongs()", "code": "{\n    Uri allsongsuri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n    String selection = MediaStore.Audio.Media.IS_MUSIC + \" != 0\";\n\n Cursor   cursor = getContentResolver().query(allsongsuri, null, selection, null, null);\n\n    if (cursor != null) {\n        if (cursor.moveToFirst()) {\n            do {\n                String    song_name = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DISPLAY_NAME));\n                String fullpath = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));\n                String    album_name = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ALBUM));\n                String   artist_name = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));\n                SongsList.add(new SongInfo(fullpath,song_name,album_name,album_name));\n\n            } while (cursor.moveToNext());\n\n        }\n        cursor.close();\n\n    }\n\n    return SongsList;\n}", "path": "AndroidTutorialForBeginners/MediaPlayerAndroidExample/app/src/main/java/com/example/hussienalrubaye/seekbar/MainActivity.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/**\n * Google Play Services Lifecycle methods\n */\n", "func_signal": "@Override\npublic void onConnected(Bundle connectionHint)", "code": "{\n\n    initializeUI();\n    startLocationUpdates();\n}", "path": "AndroidTutorialForBeginners/GoogleApiClient.java", "commit_date": "2016-10-02 00:00:00", "repo_name": "hussien89aa/AndroidTutorialForBeginners", "stars": 4280, "license": "None", "language": "java", "size": 688}
{"docstring": "/**\n * Mandatory setter for specifying the tag identifer for this task. This tag will be\n * returned at execution time to your endpoint. See\n * {@link com.google.android.gms.gcm.GcmTaskService#onRunTask(com.google.android.gms.gcm.TaskParams)}\n * <p/>\n * Maximum tag length is 100.\n *\n * @param tag String identifier for this task. Consecutive schedule calls for the same\n *            tag will update any preexisting task with the same tag.\n */\n", "func_signal": "public PeriodicTask.Builder setTag(String tag)", "code": "{\n    this.tag = tag;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * @return a DataMap from a Bundle. The input Bundle is expected to contain only elements\n * supported by DataMap. Any elements in the Bundle not supported by DataMap will be dropped.\n */\n", "func_signal": "public static DataMap fromBundle(Bundle bundle)", "code": "{\n    DataMap res = new DataMap();\n    if (bundle != null) {\n        for (String key : bundle.keySet()) {\n            Object val = bundle.get(key);\n            if (val instanceof Asset) {\n                res.putAsset(key, (Asset) val);\n            } else if (val instanceof Boolean) {\n                res.putBoolean(key, (Boolean) val);\n            } else if (val instanceof Byte) {\n                res.putByte(key, (Byte) val);\n            } else if (val instanceof byte[]) {\n                res.putByteArray(key, (byte[]) val);\n            } else if (val instanceof Bundle) {\n                res.putDataMap(key, DataMap.fromBundle((Bundle) val));\n            } else if (val instanceof Double) {\n                res.putDouble(key, (Double) val);\n            } else if (val instanceof Float) {\n                res.putFloat(key, (Float) val);\n            } else if (val instanceof float[]) {\n                res.putFloatArray(key, (float[]) val);\n            } else if (val instanceof Integer) {\n                res.putInt(key, (Integer) val);\n            } else if (val instanceof Long) {\n                res.putLong(key, (Long) val);\n            } else if (val instanceof long[]) {\n                res.putLongArray(key, (long[]) val);\n            } else if (val instanceof String) {\n                res.putString(key, (String) val);\n            } else if (val instanceof String[]) {\n                res.putStringArray(key, (String[]) val);\n            } else if (val instanceof ArrayList) {\n                if (((ArrayList) val).isEmpty() || ((ArrayList) val).get(0) instanceof String) {\n                    res.putStringArrayList(key, (ArrayList<String>) val);\n                } else if (((ArrayList) val).get(0) instanceof Bundle) {\n                    ArrayList<DataMap> dataMaps = new ArrayList<DataMap>();\n                    for (Bundle b : ((ArrayList<Bundle>) val)) {\n                        dataMaps.add(DataMap.fromBundle(b));\n                    }\n                    res.putDataMapArrayList(key, dataMaps);\n                } else if (((ArrayList) val).get(0) instanceof Integer) {\n                    res.putIntegerArrayList(key, (ArrayList<Integer>) val);\n                }\n            }\n        }\n    }\n    return res;\n}", "path": "GmsCore/play-services-wearable/src/main/java/com/google/android/gms/wearable/DataMap.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Insert the task object into the provided bundle for IPC. Use #fromBundle to recreate the\n * object on the other side.\n */\n", "func_signal": "public void toBundle(Bundle bundle)", "code": "{\n    super.toBundle(bundle);\n    bundle.putLong(\"period\", this.mIntervalInSeconds);\n    bundle.putLong(\"period_flex\", this.mFlexInSeconds);\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * \"Project Svelte\" is just there to f**k things up...\n */\n", "func_signal": "public synchronized static void register(Context context)", "code": "{\n    if (SDK_INT >= N && !registered) {\n        IntentFilter intentFilter = new IntentFilter(\"android.net.conn.CONNECTIVITY_CHANGE\");\n        context.getApplicationContext().registerReceiver(new TriggerReceiver(), intentFilter);\n        registered = true;\n    }\n}", "path": "GmsCore/play-services-core/src/main/java/org/microg/gms/gcm/TriggerReceiver.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Returns time when instance ID was created.\n *\n * @return Time when instance ID was created (milliseconds since Epoch).\n */\n", "func_signal": "public long getCreationTime()", "code": "{\n    if (creationTime == 0) {\n        String s = storeInstance.get(subtype, \"cre\");\n        if (s != null) {\n            creationTime = Long.parseLong(s);\n        }\n    }\n    return creationTime;\n}", "path": "GmsCore/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Sets the image rotation, indicating the rotation from the upright orientation.\n * <p>\n * Since the camera may deliver images that are rotated (e.g., if the user holds the device upside down), specifying the rotation with the image indicates how to make the image be upright, if necessary. Some detectors may rely upon rotating the image before attempting detection, whereas others may not. In preserving the original image from the camera along with this value, the detector may choose whether to make this correction (and to assume the associated cost).\n * <p>\n * However, note that the detector is expected to report detection position coordinates that are relative to the upright version of the image (whether or not the image was actually rotated by the detector). The {@link Detector} will always deliver frame metadata to the {@link Detector.Processor} that indicates the dimensions and orientation of an unrotated, upright frame.\n *\n * @param rotation one of {@link Frame#ROTATION_0}, {@link Frame#ROTATION_90}, {@link Frame#ROTATION_180}, {@link Frame#ROTATION_270}. Has the same meaning as {@link Display#getRotation()}.\n */\n", "func_signal": "public Builder setRotation(int rotation)", "code": "{\n    this.frame.metadata.rotation = rotation;\n    return this;\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * @return an ArrayList of DataMaps from an ArrayList of Bundles. Any elements in the Bundles not supported by DataMap will be dropped.\n */\n", "func_signal": "public static ArrayList<DataMap> arrayListFromBundleArrayList(ArrayList<Bundle> bundleArrayList)", "code": "{\n    ArrayList<DataMap> res = new ArrayList<DataMap>();\n    for (Bundle bundle : bundleArrayList) {\n        res.add(fromBundle(bundle));\n    }\n    return res;\n}", "path": "GmsCore/play-services-wearable/src/main/java/com/google/android/gms/wearable/DataMap.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Sets the image data from the supplied byte buffer, size, and format.\n *\n * @param data   contains image byte data according to the associated format.\n * @param width\n * @param height\n * @param format one of {@link ImageFormat#NV16}, {@link ImageFormat#NV21}, or {@link ImageFormat#YV12}.\n * @throws IllegalArgumentException if the supplied data is null, or an invalid image format was supplied.\n */\n", "func_signal": "public Builder setImageData(ByteBuffer data, int width, int height, int format)", "code": "{\n    if (data == null) throw new IllegalArgumentException(\"Null image data supplied\");\n    if (data.capacity() < width * height) throw new IllegalArgumentException(\"Invalid image data size\");\n    if (format != ImageFormat.NV16 && format != ImageFormat.NV21 && format != ImageFormat.YV12)\n        throw new IllegalArgumentException(\"Unsupported image format: \" + format);\n    this.frame.imageData = data;\n    this.frame.metadata.width = width;\n    this.frame.metadata.height = height;\n    this.frame.metadata.format = format;\n    return this;\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Resets Instance ID and revokes all tokens.\n *\n * @throws IOException\n */\n", "func_signal": "public void deleteInstanceID() throws IOException", "code": "{\n    deleteToken(\"*\", \"*\");\n    creationTime = 0;\n    storeInstance.delete(subtype + \"|\");\n    keyPair = null;\n}", "path": "GmsCore/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Optional setter for specifying any extra parameters necessary for the task.\n */\n", "func_signal": "public PeriodicTask.Builder setExtras(Bundle extras)", "code": "{\n    this.extras = extras;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Creates the frame instance.\n *\n * @throws IllegalStateException if the image data has not been set via {@link #setBitmap(Bitmap)} or {@link #setImageData(ByteBuffer, int, int, int)}.\n */\n", "func_signal": "public Frame build()", "code": "{\n    if (this.frame.bitmap == null && this.frame.imageData == null) {\n        throw new IllegalStateException(\"Missing image data.  Call either setBitmap or setImageData to specify the image\");\n    }\n    return frame;\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Set whether your task requires that the device be connected to power in order to\n * execute.\n * <p/>\n * Use this to defer nonessential operations whenever possible. Note that if you set this\n * field and the device is not connected to power <strong>your task will not run</strong>\n * until the device is plugged in.\n * <p/>\n * One way to deal with your task not executing until the constraint is met is to schedule\n * another task without the constraints that is subject to some deadline that you can abide.\n * This task would be responsible for executing your fallback logic.\n */\n", "func_signal": "public PeriodicTask.Builder setRequiresCharging(boolean requiresCharging)", "code": "{\n    this.requiresCharging = requiresCharging;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * <p>Set whichever {@link com.google.android.gms.gcm.GcmTaskService} you implement to execute the logic for this task.</p>\n *\n * @param gcmTaskService Endpoint against which you're scheduling this task.\n */\n", "func_signal": "public PeriodicTask.Builder setService(Class<? extends GcmTaskService> gcmTaskService)", "code": "{\n    this.gcmTaskService = gcmTaskService.getName();\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Sets the frame ID. A frame source such as a live video camera or a video player is expected to assign IDs in monotonically increasing order, to indicate the sequence that the frame appeared relative to other frames.\n * <p>\n * A {@link Detector.Processor} implementation may rely upon this sequence ID to detect frame sequence gaps, to compute velocity, etc.\n */\n", "func_signal": "public Builder setId(int id)", "code": "{\n    this.frame.metadata.id = id;\n    return this;\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Sets the frame timestamp, in milliseconds. A frame source such as a live video camera or a video player is expected to assign timestamps in a way that makes sense for the medium. For example, live video may use the capture time of each frame, whereas a video player may use the elapsed time to the frame within the video. Timestamps should be in monotonically increasing order, to indicate the passage of time.\n * <p>\n * A {@link Detector.Processor} implementation may rely upon this sequence ID to detect frame sequence gaps, to compute velocity, etc.\n */\n", "func_signal": "public Builder setTimestampMillis(long timestampMillis)", "code": "{\n    this.frame.metadata.timestampMillis = timestampMillis;\n    return this;\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Set the network state your task requires to run. <strong>If the specified network is\n * unavailable your task will not be executed until it becomes available.</strong>\n * <p/>\n * The default for either a periodic or one-off task is\n * {@link com.google.android.gms.gcm.Task#NETWORK_STATE_CONNECTED}. Note that changing this to\n * {@link com.google.android.gms.gcm.Task#NETWORK_STATE_ANY} means there is no guarantee that data will be available\n * when your task executes.\n * <p/>\n * In addition, the only guarantee for connectivity is at the moment of execution - it is\n * possible for the device to lose data shortly after your task begins executing.\n */\n", "func_signal": "public PeriodicTask.Builder setRequiredNetwork(int requiredNetworkState)", "code": "{\n    this.requiredNetworkState = requiredNetworkState;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Check if this size is equal to another size.\n * <p>\n * Two sizes are equal if and only if both their widths and heights are equal.\n * <p>\n * A size object is never equal to any other type of object.\n *\n * @return {@code true} if the objects were equal, {@code false} otherwise\n */\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n    if (this == o) return true;\n    if (!(o instanceof Size)) return false;\n\n    Size size = (Size) o;\n\n    if (width != size.width) return false;\n    return height == size.height;\n}", "path": "GmsCore/play-services-base/src/main/java/com/google/android/gms/common/images/Size.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Returns the grayscale version of the frame data, with one byte per pixel. Note that the returned byte buffer will be prefixed by the Y channel (i.e., the grayscale image data), but may optionally include additional image data beyond the Y channel (this can be ignored).\n * <p>\n * If a bitmap was specified when creating this frame, the bitmap is first converted to a grayscale byte[] (allocation / copy required). It is recommended that you use the bitmap directly through {@link #getBitmap()} if the associated native detection code supports it, since this would move the grayscale conversion into native code where it will be faster.\n */\n", "func_signal": "public ByteBuffer getGrayscaleImageData()", "code": "{\n    if (bitmap == null) {\n        return imageData;\n    }\n    int width = metadata.width;\n    int height = metadata.height;\n    int[] pixels = new int[width * height];\n    bitmap.getPixels(pixels, 0, width, 0, 0, width, height);\n    byte[] values = new byte[width * height];\n\n    for (int i = 0; i < pixels.length; i++) {\n        values[i] = (byte)((int)((float) Color.red(pixels[i]) * 0.299F + (float)Color.green(pixels[i]) * 0.587F + (float)Color.blue(pixels[i]) * 0.114F));\n    }\n\n    return ByteBuffer.wrap(values);\n}", "path": "GmsCore/play-services-vision-common/src/main/java/com/google/android/gms/vision/Frame.java", "commit_date": "2020-12-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Optional setter to specify whether this task should override any preexisting tasks\n * with the same tag. This defaults to false, which means that a new task will not\n * override an existing one.\n *\n * @param updateCurrent True to update the current task with the parameters of the new.\n *                      Default false.\n */\n", "func_signal": "public PeriodicTask.Builder setUpdateCurrent(boolean updateCurrent)", "code": "{\n    this.updateCurrent = updateCurrent;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Optional setter for specifying how close to the end of the period set in\n * {@link com.google.android.gms.gcm.PeriodicTask.Builder#setPeriod(long)} you are willing to execute.\n * <p/>\n * For example, specifying a period of 30 seconds, with a flex value of 10 seconds\n * will allow the scheduler to determine the best moment between the 20th and 30th\n * second at which to execute your task.\n */\n", "func_signal": "public PeriodicTask.Builder setFlex(long flexInSeconds)", "code": "{\n    this.flexInSeconds = flexInSeconds;\n    return this;\n}", "path": "GmsCore/play-services-gcm/src/main/java/com/google/android/gms/gcm/PeriodicTask.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "microg/GmsCore", "stars": 6545, "license": "apache-2.0", "language": "java", "size": 9724}
{"docstring": "/**\n * Test class must specify the expected time it takes for the publisher to\n * shut itself down when the the last downstream {@code Subscription} is cancelled.\n *\n * @param publisherReferenceGCTimeoutMillis used to determine after how much time a reference to a Subscriber should be already dropped by the Publisher.\n * @param processorBufferSize            number of elements the processor is required to be able to buffer.\n */\n", "func_signal": "public IdentityProcessorVerification(final TestEnvironment env, long publisherReferenceGCTimeoutMillis, int processorBufferSize)", "code": "{\n  this.env = env;\n  this.processorBufferSize = processorBufferSize;\n\n  this.subscriberVerification = new SubscriberWhiteboxVerification<T>(env) {\n    @Override\n    public Subscriber<T> createSubscriber(WhiteboxSubscriberProbe<T> probe) {\n      return IdentityProcessorVerification.this.createSubscriber(probe);\n    }\n\n    @Override public T createElement(int element) {\n      return IdentityProcessorVerification.this.createElement(element);\n    }\n\n    @Override\n    public Publisher<T> createHelperPublisher(long elements) {\n      return IdentityProcessorVerification.this.createHelperPublisher(elements);\n    }\n  };\n\n  publisherVerification = new PublisherVerification<T>(env, publisherReferenceGCTimeoutMillis) {\n    @Override\n    public Publisher<T> createPublisher(long elements) {\n      return IdentityProcessorVerification.this.createPublisher(elements);\n    }\n\n    @Override\n    public Publisher<T> createFailedPublisher() {\n      return IdentityProcessorVerification.this.createFailedPublisher();\n    }\n\n    @Override\n    public long maxElementsFromPublisher() {\n      return IdentityProcessorVerification.this.maxElementsFromPublisher();\n    }\n\n    @Override\n    public long boundedDepthOfOnNextAndRequestRecursion() {\n      return IdentityProcessorVerification.this.boundedDepthOfOnNextAndRequestRecursion();\n    }\n\n    @Override\n    public boolean skipStochasticTests() {\n      return IdentityProcessorVerification.this.skipStochasticTests();\n    }\n  };\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "////////////////////// TEST ENV CLEANUP /////////////////////////////////////\n", "func_signal": "@BeforeMethod\npublic void setUp() throws Exception", "code": "{\n  publisherVerification.setUp();\n  subscriberVerification.setUp();\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// What `signal` does is that it sends signals to the `Subscription` asynchronously\n", "func_signal": "private void signal(final Signal signal)", "code": "{\n  if (inboundSignals.offer(signal)) // No need to null-check here as ConcurrentLinkedQueue does this for us\n    tryScheduleToExecute(); // Then we try to schedule it for execution, if it isn't already\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// Showcases a convenience method to idempotently marking the Subscriber as \"done\", so we don't want to process more elements\n// herefor we also need to cancel our `Subscription`.\n", "func_signal": "private final void done()", "code": "{\n  //On this line we could add a guard against `!done`, but since rule 3.7 says that `Subscription.cancel()` is idempotent, we don't need to.\n  done = true; // If `whenNext` throws an exception, let's consider ourselves done (not accepting more elements)\n  if (subscription != null) { // If we are bailing out before we got a `Subscription` there's little need for cancelling it.\n    try {\n      subscription.cancel(); // Cancel the subscription\n    } catch(final Throwable t) {\n      //Subscription.cancel is not allowed to throw an exception, according to rule 3.15\n      (new IllegalStateException(subscription + \" violated the Reactive Streams rule 3.15 by throwing an exception from cancel.\", t)).printStackTrace(System.err);\n    }\n  }\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// Here it is important that we do not violate 2.2 and 2.3 by calling methods on the `Subscription` or `Publisher`\n", "func_signal": "private void handleOnError(final Throwable error)", "code": "{\n  if (subscription == null) { // Technically this check is not needed, since we are expecting Publishers to conform to the spec\n    // Publisher is not allowed to signal onError before onSubscribe according to rule 1.09\n    (new IllegalStateException(\"Publisher violated the Reactive Streams rule 1.09 signalling onError prior to onSubscribe.\")).printStackTrace(System.err);\n  } else {\n    done = true; // Obey rule 2.4\n    whenError(error);\n  }\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// Here it is important that we do not violate 2.2 and 2.3 by calling methods on the `Subscription` or `Publisher`\n", "func_signal": "private void handleOnComplete()", "code": "{\n  if (subscription == null) { // Technically this check is not needed, since we are expecting Publishers to conform to the spec\n    // Publisher is not allowed to signal onComplete before onSubscribe according to rule 1.09\n    (new IllegalStateException(\"Publisher violated the Reactive Streams rule 1.09 signalling onComplete prior to onSubscribe.\")).printStackTrace(System.err);\n  } else {\n    done = true; // Obey rule 2.4\n    whenComplete();\n  }\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// A Processor\n//   must obey all Publisher rules on its publishing side\n", "func_signal": "public Publisher<T> createPublisher(long elements)", "code": "{\n  final Processor<T, T> processor = createIdentityProcessor(processorBufferSize);\n  final Publisher<T> pub = createHelperPublisher(elements);\n  pub.subscribe(processor);\n  return processor; // we run the PublisherVerification against this\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Asks for a {@code Processor} that supports at least 2 {@code Subscriber}s at once and checks if two {@code Subscriber}s\n * receive the same items and a terminal {@code Exception}.\n * <p>\n * If the {@code Processor} requests and/or emits items only when all of its {@code Subscriber}s have requested,\n * override {@link #doesCoordinatedEmission()} and return {@code true} to indicate this property.\n * <p>\n * <b>Verifies rule:</b> <a href='https://github.com/reactive-streams/reactive-streams-jvm#1.4'>1.4</a> with multiple\n * {@code Subscriber}s.\n * <p>\n * The test is not executed if {@link IdentityProcessorVerification#maxSupportedSubscribers()} is less than 2.\n * <p>\n * If this test fails, the following could be checked within the {@code Processor} implementation:\n * <ul>\n * <li>The {@code TestEnvironment} has large enough timeout specified in case the {@code Processor} has some time-delay behavior.</li>\n * <li>The {@code Processor} is able to fulfill requests of its {@code Subscriber}s independently of each other's requests or\n * else override {@link #doesCoordinatedEmission()} and return {@code true} to indicate the test {@code Subscriber}s\n * both have to request first.</li>\n * </ul>\n */\n", "func_signal": "@Test\npublic void required_spec104_mustCallOnErrorOnAllItsSubscribersIfItEncountersANonRecoverableError() throws Throwable", "code": "{\n  optionalMultipleSubscribersTest(2, new Function<Long,TestSetup>() {\n    @Override\n    public TestSetup apply(Long aLong) throws Throwable {\n      return new TestSetup(env, processorBufferSize) {{\n        final ManualSubscriberWithErrorCollection<T> sub1 = new ManualSubscriberWithErrorCollection<T>(env);\n        env.subscribe(processor, sub1);\n\n        final ManualSubscriberWithErrorCollection<T> sub2 = new ManualSubscriberWithErrorCollection<T>(env);\n        env.subscribe(processor, sub2);\n\n        final Exception ex = new RuntimeException(\"Test exception\");\n\n        if (doesCoordinatedEmission()) {\n          sub1.request(1);\n          sub2.request(1);\n\n          expectRequest();\n\n          final T x = sendNextTFromUpstream();\n\n          expectNextElement(sub1, x);\n          expectNextElement(sub2, x);\n\n          sub1.request(1);\n          sub2.request(1);\n        } else {\n          sub1.request(1);\n\n          expectRequest(env.defaultTimeoutMillis(),\n                  \"If the Processor coordinates requests/emissions when having multiple Subscribers\"\n                  + \" at once, please override doesCoordinatedEmission() to return true in this \"\n                  + \"IdentityProcessorVerification to allow this test to pass.\");\n\n          final T x = sendNextTFromUpstream();\n          expectNextElement(sub1, x,\n                  \"If the Processor coordinates requests/emissions when having multiple Subscribers\"\n                          + \" at once, please override doesCoordinatedEmission() to return true in this \"\n                          + \"IdentityProcessorVerification to allow this test to pass.\");\n\n          sub1.request(1);\n\n          // sub1 has received one element, and has one demand pending\n          // sub2 has not yet requested anything\n        }\n        sendError(ex);\n\n        sub1.expectError(ex);\n        sub2.expectError(ex);\n\n        env.verifyNoAsyncErrorsNoDelay();\n      }};\n    }\n  });\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Runs given code block and expects it fail with an {@code org.testng.SkipException}\n *\n * @param run encapsulates test case which we expect to be skipped\n * @param msgPart the exception failing the test (inside the run parameter) must contain this message part in one of it's causes\n */\n", "func_signal": "public void requireTestSkip(ThrowingRunnable run, String msgPart)", "code": "{\n  try {\n    run.run();\n  } catch (SkipException skip) {\n      if (skip.getMessage().contains(msgPart)) {\n        return;\n      } else {\n        throw new RuntimeException(\n          String.format(\"Expected TCK to skip this test with '... %s ...', yet it skipped with (%s) instead!\",\n                        msgPart, skip.getMessage()), skip);\n      }\n  } catch (Throwable throwable) {\n      throw new RuntimeException(\n        String.format(\"Expected TCK to skip this test, yet it threw %s(%s) instead!\",\n                      throwable.getClass().getName(), throwable.getMessage()), throwable);\n  }\n  throw new RuntimeException(\"Expected TCK to SKIP this test, instead if PASSed!\");\n}", "path": "reactive-streams-jvm/tck/src/test/java/org/reactivestreams/tck/flow/support/TCKVerificationSupport.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Test for feature that REQUIRES multiple subscribers to be supported by Publisher.\n */\n", "func_signal": "public void optionalMultipleSubscribersTest(long requiredSubscribersSupport, Function<Long, TestSetup> body) throws Throwable", "code": "{\n  if (requiredSubscribersSupport > maxSupportedSubscribers())\n    notVerified(String.format(\"The Publisher under test only supports %d subscribers, while this test requires at least %d to run.\",\n                              maxSupportedSubscribers(), requiredSubscribersSupport));\n  else body.apply(requiredSubscribersSupport);\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * This publisher does NOT fulfil all Publisher spec requirements.\n * It's just the bare minimum to enable this test to fail the Subscriber tests.\n */\n", "func_signal": "public Publisher<Integer> newSimpleIntsPublisher(final long maxElementsToEmit)", "code": "{\n  return new Publisher<Integer>() {\n    @Override public void subscribe(final Subscriber<? super Integer> s) {\n      s.onSubscribe(new Subscription() {\n        private AtomicLong nums = new AtomicLong();\n        private AtomicBoolean active = new AtomicBoolean(true);\n\n        @Override public void request(long n) {\n          long thisDemand = n;\n          while (active.get() && thisDemand > 0 && nums.get() < maxElementsToEmit) {\n            s.onNext((int) nums.getAndIncrement());\n            thisDemand--;\n          }\n\n          if (nums.get() == maxElementsToEmit) {\n            s.onComplete();\n          }\n        }\n\n        @Override public void cancel() {\n          active.set(false);\n        }\n      });\n    }\n  };\n}", "path": "reactive-streams-jvm/tck/src/test/java/org/reactivestreams/tck/flow/support/TCKVerificationSupport.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// A Processor\n//   must obey all Subscriber rules on its consuming side\n", "func_signal": "public Subscriber<T> createSubscriber(final SubscriberWhiteboxVerification.WhiteboxSubscriberProbe<T> probe)", "code": "{\n  final Processor<T, T> processor = createIdentityProcessor(processorBufferSize);\n  processor.subscribe(\n      new Subscriber<T>() {\n        private final Promise<Subscription> subs = new Promise<Subscription>(env);\n\n        @Override\n        public void onSubscribe(final Subscription subscription) {\n          if (env.debugEnabled()) {\n            env.debug(String.format(\"whiteboxSubscriber::onSubscribe(%s)\", subscription));\n          }\n          if (subs.isCompleted()) subscription.cancel(); // the Probe must also pass subscriber verification\n\n          probe.registerOnSubscribe(new SubscriberWhiteboxVerification.SubscriberPuppet() {\n\n            @Override\n            public void triggerRequest(long elements) {\n              subscription.request(elements);\n            }\n\n            @Override\n            public void signalCancel() {\n              subscription.cancel();\n            }\n          });\n        }\n\n        @Override\n        public void onNext(T element) {\n          if (env.debugEnabled()) {\n            env.debug(String.format(\"whiteboxSubscriber::onNext(%s)\", element));\n          }\n          probe.registerOnNext(element);\n        }\n\n        @Override\n        public void onComplete() {\n          if (env.debugEnabled()) {\n            env.debug(\"whiteboxSubscriber::onComplete()\");\n          }\n          probe.registerOnComplete();\n        }\n\n        @Override\n        public void onError(Throwable cause) {\n          if (env.debugEnabled()) {\n            env.debug(String.format(\"whiteboxSubscriber::onError(%s)\", cause));\n          }\n          probe.registerOnError(cause);\n        }\n      });\n\n  return processor; // we run the SubscriberVerification against this\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Returns true if the provided `Throwable` is to be considered non-fatal, or false if it is to be considered fatal\n *\n * @param t throwable to be matched for fatal-ness\n * @return true if is a non-fatal throwable, false otherwise\n */\n", "func_signal": "public static boolean isNonFatal(Throwable t)", "code": "{\n  if (t instanceof StackOverflowError) {\n    // StackOverflowError ok even though it is a VirtualMachineError\n    return true;\n  } else if (t instanceof VirtualMachineError ||\n      t instanceof ThreadDeath ||\n      t instanceof InterruptedException ||\n      t instanceof LinkageError) {\n    // VirtualMachineError includes OutOfMemoryError and other fatal errors\n    return false;\n  } else {\n    return true;\n  }\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/flow/support/NonFatal.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// A Processor\n//   must immediately pass on `onError` events received from its upstream to its downstream\n", "func_signal": "@Test\npublic void mustImmediatelyPassOnOnErrorEventsReceivedFromItsUpstreamToItsDownstream() throws Exception", "code": "{\n  new TestSetup(env, processorBufferSize) {{\n    final ManualSubscriberWithErrorCollection<T> sub = new ManualSubscriberWithErrorCollection<T>(env);\n    env.subscribe(processor, sub);\n\n    final Exception ex = new RuntimeException(\"Test exception\");\n    sendError(ex);\n    sub.expectError(ex); // \"immediately\", i.e. without a preceding request\n\n    env.verifyNoAsyncErrorsNoDelay();\n  }};\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Runs given code block and expects it to fail with an \"Expected onError\" failure.\n * Use this method to validate that TCK tests fail with meaningful errors instead of NullPointerExceptions etc.\n *\n * @param run     encapsulates test case which we expect to fail\n * @param msgPart the exception failing the test (inside the run parameter) must contain this message part in one of it's causes\n */\n", "func_signal": "public void requireTestFailure(ThrowingRunnable run, String msgPart)", "code": "{\n  try {\n    run.run();\n  } catch (Throwable throwable) {\n    if (findDeepErrorMessage(throwable, msgPart)) {\n      return;\n    } else {\n      throw new RuntimeException(\n        String.format(\"Expected TCK to fail with '... %s ...', \" +\n                        \"yet `%s(%s)` was thrown and test would fail with not useful error message!\",\n                      msgPart, throwable.getClass().getName(), throwable.getMessage()), throwable);\n    }\n  }\n  throw new RuntimeException(String.format(\"Expected TCK to fail with '... %s ...', \" +\n                                             \"yet no exception was thrown and test would pass unexpectedly!\",\n                                           msgPart));\n}", "path": "reactive-streams-jvm/tck/src/test/java/org/reactivestreams/tck/flow/support/TCKVerificationSupport.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// Showcases a convenience method to idempotently marking the Subscriber as \"done\", so we don't want to process more elements\n// herefor we also need to cancel our `Subscription`.\n", "func_signal": "private void done()", "code": "{\n  //On this line we could add a guard against `!done`, but since rule 3.7 says that `Subscription.cancel()` is idempotent, we don't need to.\n  done = true; // If we `whenNext` throws an exception, let's consider ourselves done (not accepting more elements)\n  try {\n    subscription.cancel(); // Cancel the subscription\n  } catch(final Throwable t) {\n    //Subscription.cancel is not allowed to throw an exception, according to rule 3.15\n    (new IllegalStateException(subscription + \" violated the Reactive Streams rule 3.15 by throwing an exception from cancel.\", t)).printStackTrace(System.err);\n  }\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/SyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// We implement the OnX methods on `Subscriber` to send Signals that we will process asycnhronously, but only one at a time\n", "func_signal": "@Override public final void onSubscribe(final Subscription s)", "code": "{\n  // As per rule 2.13, we need to throw a `java.lang.NullPointerException` if the `Subscription` is `null`\n  if (s == null) throw null;\n\n  signal(new OnSubscribe(s));\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * Asks for a {@code Processor} that supports at least 2 {@code Subscriber}s at once and checks requests\n * from {@code Subscriber}s will eventually lead to requests towards the upstream of the {@code Processor}.\n * <p>\n * If the {@code Processor} requests and/or emits items only when all of its {@code Subscriber}s have requested,\n * override {@link #doesCoordinatedEmission()} and return {@code true} to indicate this property.\n * <p>\n * <b>Verifies rule:</b> <a href='https://github.com/reactive-streams/reactive-streams-jvm#1.4'>2.1</a> with multiple\n * {@code Subscriber}s.\n * <p>\n * The test is not executed if {@link IdentityProcessorVerification#maxSupportedSubscribers()} is less than 2.\n * <p>\n * If this test fails, the following could be checked within the {@code Processor} implementation:\n * <ul>\n * <li>The {@code TestEnvironment} has large enough timeout specified in case the {@code Processor} has some time-delay behavior.</li>\n * <li>The {@code Processor} is able to fulfill requests of its {@code Subscriber}s independently of each other's requests or\n * else override {@link #doesCoordinatedEmission()} and return {@code true} to indicate the test {@code Subscriber}s\n * both have to request first.</li>\n * </ul>\n */\n", "func_signal": "@Test\npublic void required_mustRequestFromUpstreamForElementsThatHaveBeenRequestedLongAgo() throws Throwable", "code": "{\n  optionalMultipleSubscribersTest(2, new Function<Long,TestSetup>() {\n    @Override\n    public TestSetup apply(Long subscribers) throws Throwable {\n      return new TestSetup(env, processorBufferSize) {{\n        ManualSubscriber<T> sub1 = newSubscriber();\n        sub1.request(20);\n\n        long totalRequests = expectRequest();\n        final T x = sendNextTFromUpstream();\n        expectNextElement(sub1, x);\n\n        if (totalRequests == 1) {\n          totalRequests += expectRequest();\n        }\n        final T y = sendNextTFromUpstream();\n        expectNextElement(sub1, y);\n\n        if (totalRequests == 2) {\n          totalRequests += expectRequest();\n        }\n\n        final ManualSubscriber<T> sub2 = newSubscriber();\n\n        // sub1 now has 18 pending\n        // sub2 has 0 pending\n\n        if (doesCoordinatedEmission()) {\n          sub2.expectNone(); // since sub2 hasn't requested anything yet\n\n          sub2.request(1);\n\n          final T z = sendNextTFromUpstream();\n          expectNextElement(sub1, z);\n          expectNextElement(sub2, z);\n        } else {\n          final T z = sendNextTFromUpstream();\n          expectNextElement(sub1, z,\n                  \"If the Processor coordinates requests/emissions when having multiple Subscribers\"\n                          + \" at once, please override doesCoordinatedEmission() to return true in this \"\n                          + \"IdentityProcessorVerification to allow this test to pass.\");\n          sub2.expectNone(); // since sub2 hasn't requested anything yet\n\n          sub2.request(1);\n          expectNextElement(sub2, z);\n        }\n        if (totalRequests == 3) {\n          expectRequest();\n        }\n\n        // to avoid error messages during test harness shutdown\n        sendCompletion();\n        sub1.expectCompletion(env.defaultTimeoutMillis());\n        sub2.expectCompletion(env.defaultTimeoutMillis());\n\n        env.verifyNoAsyncErrorsNoDelay();\n      }};\n    }\n  });\n}", "path": "reactive-streams-jvm/tck/src/main/java/org/reactivestreams/tck/IdentityProcessorVerification.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// This method makes sure that this `Subscriber` is only executing on one Thread at a time\n", "func_signal": "private final void tryScheduleToExecute()", "code": "{\n  if(on.compareAndSet(false, true)) {\n    try {\n      executor.execute(this);\n    } catch(Throwable t) { // If we can't run on the `Executor`, we need to fail gracefully and not violate rule 2.13\n      if (!done) {\n        try {\n          done(); // First of all, this failure is not recoverable, so we need to cancel our subscription\n        } finally {\n          inboundSignals.clear(); // We're not going to need these anymore\n          // This subscription is cancelled by now, but letting the Subscriber become schedulable again means\n          // that we can drain the inboundSignals queue if anything arrives after clearing\n          on.set(false);\n        }\n      }\n    }\n  }\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "// Only one constructor, and it's only accessible for the subclasses\n", "func_signal": "protected AsyncSubscriber(Executor executor)", "code": "{\n  if (executor == null) throw null;\n  this.executor = executor;\n}", "path": "reactive-streams-jvm/examples/src/main/java/org/reactivestreams/example/unicast/AsyncSubscriber.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "reactive-streams/reactive-streams-jvm", "stars": 4724, "license": "mit-0", "language": "java", "size": 1846}
{"docstring": "/**\n * INTERNAL USE ONLY this has to be invoked ONLY if the item is aggregate!!!\n *\n * @param aggregateSplit\n */\n", "func_signal": "public OProjectionItem splitForAggregation(\n    AggregateProjectionSplit aggregateSplit, OCommandContext ctx)", "code": "{\n  if (isAggregate()) {\n    OProjectionItem result = new OProjectionItem(-1);\n    result.alias = getProjectionAlias();\n    result.expression = expression.splitForAggregation(aggregateSplit, ctx);\n    result.nestedProjection = nestedProjection;\n    return result;\n  } else {\n    return this;\n  }\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/parser/OProjectionItem.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Avoid to close it but rather release itself to the owner pool. */\n", "func_signal": "@Override\npublic void close()", "code": "{\n  if (isClosed()) return;\n\n  checkOpenness();\n  if (ownerPool.getConnectionsInCurrentThread(getURL(), userName) > 1) {\n    ownerPool.release(this);\n    return;\n  }\n\n  try {\n    commit(true);\n  } catch (Exception e) {\n    OLogManager.instance().error(this, \"Error on releasing database '%s' in pool\", e, getName());\n  }\n\n  try {\n    underlying.callOnCloseListeners();\n  } catch (Exception e) {\n    OLogManager.instance().error(this, \"Error on releasing database '%s' in pool\", e, getName());\n  }\n\n  getLocalCache().clear();\n\n  if (ownerPool != null) {\n    final OObjectDatabasePool localCopy = ownerPool;\n    ownerPool = null;\n    localCopy.release(this);\n  }\n}", "path": "orientdb/object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTxPooled.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * @return any graph if available, otherwise a Non Transactional OrientGraph implementation from\n *     the current database in thread local.\n */\n", "func_signal": "public static OrientBaseGraph getAnyGraph(final OModifiableBoolean shouldBeShutDown)", "code": "{\n  final ODatabaseDocumentInternal database = ODatabaseRecordThreadLocal.instance().get();\n\n  final OrientBaseGraph result = OrientBaseGraph.getActiveGraph();\n\n  if (result != null) {\n    final ODatabaseDocument graphDb = result.getRawGraph();\n\n    // CHECK IF THE DATABASE + USER IN TL IS THE SAME IN ORDER TO USE IT\n    if (canReuseActiveGraph(graphDb, database)) {\n      if (!graphDb.isClosed()) {\n        graphDb.activateOnCurrentThread();\n        shouldBeShutDown.setValue(false);\n        return result;\n      }\n    }\n  }\n\n  // Set it again on ThreadLocal because the getRawGraph() may have set a closed db in the\n  // thread-local\n  shouldBeShutDown.setValue(true);\n  ODatabaseRecordThreadLocal.instance().set(database);\n  return OrientGraphFactory.getNoTxGraphImplFactory().getGraph(database);\n}", "path": "orientdb/graphdb/src/main/java/com/orientechnologies/orient/graph/sql/OGraphCommandExecutorSQLFactory.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Checks reference queue to find direct memory leaks */\n", "func_signal": "public void checkTrackedPointerLeaks()", "code": "{\n  boolean leaked = false;\n\n  TrackedPointerReference reference;\n  while ((reference = (TrackedPointerReference) trackedPointersQueue.poll()) != null) {\n    if (trackedReferences.remove(reference)) {\n      OLogManager.instance()\n          .errorNoDb(\n              this,\n              \"DIRECT-TRACK: unreleased direct memory pointer `%X` detected.\",\n              reference.stackTrace,\n              reference.id);\n      leaked = true;\n    }\n  }\n\n  assert !leaked;\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * @return a Non Transactional OrientGraph implementation from the current database in thread\n *     local.\n */\n", "func_signal": "public static OrientGraphNoTx getGraphNoTx(final OModifiableBoolean shouldBeShutDown)", "code": "{\n  final ODatabaseDocumentInternal database = ODatabaseRecordThreadLocal.instance().get();\n\n  final OrientBaseGraph result = OrientBaseGraph.getActiveGraph();\n\n  if (result != null && (result instanceof OrientGraphNoTx)) {\n    final ODatabaseDocumentInternal graphDb = result.getRawGraph();\n\n    // CHECK IF THE DATABASE + USER IN TL IS THE SAME IN ORDER TO USE IT\n    if (canReuseActiveGraph(graphDb, database)) {\n\n      if (!graphDb.isClosed()) {\n        ODatabaseRecordThreadLocal.instance().set(graphDb);\n        shouldBeShutDown.setValue(false);\n        return (OrientGraphNoTx) result;\n      }\n    }\n  }\n\n  // Set it again on ThreadLocal because the getRawGraph() may have set a closed db in the\n  // thread-local\n  shouldBeShutDown.setValue(true);\n  ODatabaseRecordThreadLocal.instance().set(database);\n  return (OrientGraphNoTx)\n      OrientGraphFactory.getNoTxGraphImplFactory().getGraph((ODatabaseDocumentTx) database);\n}", "path": "orientdb/graphdb/src/main/java/com/orientechnologies/orient/graph/sql/OGraphCommandExecutorSQLFactory.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Default constructor. */\n", "func_signal": "public TcpClient()", "code": "{\n  long transferred = 0;\n  long date = System.currentTimeMillis();\n\n  try {\n    this.socket = new Socket(SERVER_HOSTNAME, COMM_PORT);\n    this.socket.setSendBufferSize(65000);\n    InputStream iStream = this.socket.getInputStream();\n    ObjectInputStream oiStream = new ObjectInputStream(iStream);\n\n    OutputStream oStream = this.socket.getOutputStream();\n    ObjectOutputStream ooStream = new ObjectOutputStream(oStream);\n\n    int i = 0;\n    byte[] buffer = null;\n    while (true) {\n      int size = oiStream.readInt();\n      transferred += 4;\n\n      if (size == 0) break;\n\n      ++i;\n\n      if (i > 10 && i % (1000000 / 10) == 0) System.out.print(\".\");\n\n      buffer = new byte[size];\n      oiStream.readFully(buffer);\n      transferred += size;\n\n      ooStream.writeByte(0);\n      ooStream.flush();\n      oStream.flush();\n    }\n  } catch (UnknownHostException uhe) {\n    System.out.println(\"Don't know about host: \" + SERVER_HOSTNAME);\n  } catch (IOException ioe) {\n    System.out.println(\n        \"Couldn't get I/O for the connection to: \" + SERVER_HOSTNAME + \":\" + COMM_PORT);\n  } finally {\n    System.out.println(\n        \"Transferred total MB: \"\n            + (float) transferred / 1000000\n            + \" in \"\n            + (System.currentTimeMillis() - date)\n            + \"ms\");\n  }\n}", "path": "orientdb/tests/src/test/java/com/orientechnologies/orient/test/internal/network/TcpClient.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Allocates chunk of direct memory of given size.\n *\n * @param size Amount of memory to allocate\n * @param clear clears memory if needed\n * @return Pointer to allocated memory\n * @throws ODirectMemoryAllocationFailedException if it is impossible to allocate amount of direct\n *     memory of given size\n */\n", "func_signal": "public OPointer allocate(int size, int align, boolean clear)", "code": "{\n  if (size <= 0) {\n    throw new IllegalArgumentException(\"Size of allocated memory can not be less or equal to 0\");\n  }\n\n  final OPointer ptr;\n  if (align <= 0) {\n    final long pointer = MemoryIO.getInstance().allocateMemory(size, clear);\n    if (pointer <= 0) {\n      throw new ODirectMemoryAllocationFailedException(\n          \"Can not allocate direct memory chunk of size \" + size);\n    }\n\n    ptr = new OPointer(pointer, size);\n  } else {\n    if (!isLinux) {\n      throw new ODirectMemoryAllocationFailedException(\n          \"Alignment of pointers is allowed only on Linux platforms.\");\n    }\n\n    final PointerByReference pointerByReference = new PointerByReference();\n    ONative.instance()\n        .posix_memalign(pointerByReference, new NativeLong(align), new NativeLong(size));\n    ptr = new OPointer(pointerByReference.getValue().address(), size);\n  }\n\n  memoryConsumption.add(size);\n  return track(ptr);\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "// TODO HANDLE EVALUATE RECORD\n", "func_signal": "@Override\npublic Object evaluateRecord(\n    OIdentifiable iRecord,\n    ODocument iCurrentResult,\n    OSQLFilterCondition iCondition,\n    Object iLeft,\n    Object iRight,\n    OCommandContext iContext,\n    final ODocumentSerializer serializer)", "code": "{\n\n  OSQLFunction function = OSQLEngine.getInstance().getFunction(keyword);\n  return function.execute(\n      this, iRecord, iCurrentResult, new Object[] {iLeft, iCondition.getRight()}, iContext);\n}", "path": "orientdb/lucene/src/main/java/com/orientechnologies/spatial/operator/OLuceneSpatialOperator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * @param key\n * @param version\n * @param txId\n * @param force allows a tx to acquire the promise even if it is held by another tx. It must be\n *     used only in the second phase.\n * @return if using {@code force}, returns the ID of the tx that was previously holding the\n *     promise.\n */\n", "func_signal": "public OTransactionId promise(T key, int version, OTransactionId txId, boolean force)", "code": "{\n  lock.lock();\n  try {\n    OTxPromise<T> p = map.get(key);\n    if (p == null) {\n      map.put(key, new OTxPromise<>(key, version, txId));\n      return null;\n    }\n    if (p.getTxId().equals(txId)) {\n      return null;\n    }\n    if (!force) {\n      throw new OTxPromiseException(\n          String.format(\n              \"Cannot acquire promise for resource: '%s' v%d (existing version: %d)\",\n              key, version, p.getVersion()),\n          version,\n          p.getVersion());\n    }\n    // a phase2 force\n    OTransactionId cancelledPromise = null;\n    if (version < p.getVersion()) {\n      // This promise will never happen since record versions never go back\n      throw new ODistributedTxPromiseRequestIsOldException(\n          String.format(\n              \"Cannot force acquire promise for resource: '%s' v%d (existing version: %d)\",\n              key, version, p.getVersion()));\n    }\n    if (version > p.getVersion()) {\n      // If there is a promise for an older version, tx could be retried later\n      throw new OTxPromiseException(\n          String.format(\n              \"Cannot force acquire promise for resource: '%s' v%d (existing version: %d)\",\n              key, version, p.getVersion()),\n          version,\n          p.getVersion());\n    }\n\n    cancelledPromise = p.getTxId();\n    map.remove(key);\n    map.put(key, new OTxPromise<>(key, version, txId));\n    return cancelledPromise;\n  } finally {\n    lock.unlock();\n  }\n}", "path": "orientdb/distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/lock/OTxPromiseManager.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Parses the RETRY number of times */\n", "func_signal": "protected void parseRetry() throws OCommandSQLParsingException", "code": "{\n  retry = Integer.parseInt(parserNextWord(true));\n\n  String temp = parseOptionalWord(true);\n\n  if (temp.equals(\"WAIT\")) {\n    wait = Integer.parseInt(parserNextWord(true));\n  } else parserGoBack();\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLRetryAbstract.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Returns allocated direct memory back to OS */\n", "func_signal": "public void deallocate(OPointer pointer)", "code": "{\n  if (pointer == null) {\n    throw new IllegalArgumentException(\"Null value is passed\");\n  }\n\n  final long ptr = pointer.getNativePointer();\n  if (ptr > 0) {\n    MemoryIO.getInstance().freeMemory(ptr);\n    memoryConsumption.add(-pointer.getSize());\n    untrack(pointer);\n  }\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public OCommandExecutorSQLAbstract createCommand(final String name)\n    throws OCommandExecutionException", "code": "{\n  final Class<? extends OCommandExecutorSQLAbstract> clazz = COMMANDS.get(name);\n\n  if (clazz == null) {\n    throw new OCommandExecutionException(\"Unknown command name :\" + name);\n  }\n\n  try {\n    return clazz.newInstance();\n  } catch (Exception e) {\n    throw OException.wrapException(\n        new OCommandExecutionException(\n            \"Error in creation of command \"\n                + name\n                + \"(). Probably there is not an empty constructor or the constructor generates errors\"),\n        e);\n  }\n}", "path": "orientdb/graphdb/src/main/java/com/orientechnologies/orient/graph/sql/OGraphCommandExecutorSQLFactory.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** Verifies that all pointers which were allocated by allocator are freed. */\n", "func_signal": "public void checkMemoryLeaks()", "code": "{\n  if (TRACK) {\n    final long memCons = memoryConsumption.longValue();\n\n    if (memCons > 0) {\n      OLogManager.instance()\n          .warnNoDb(\n              this,\n              \"DIRECT-TRACK: memory consumption is not zero (%d bytes), it may indicate presence of memory leaks\",\n              memCons);\n\n      assert false;\n    }\n    synchronized (this) {\n      for (TrackedPointerReference reference : trackedReferences)\n        OLogManager.instance()\n            .errorNoDb(\n                this,\n                \"DIRECT-TRACK: unreleased direct memory pointer `%X` detected.\",\n                reference.stackTrace,\n                reference.id);\n\n      checkTrackedPointerLeaks();\n\n      assert trackedReferences.size() == 0;\n    }\n  }\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "// TODO check PGIS\n", "func_signal": "@Override\npublic OSpatialQueryContext build(Map<String, Object> query) throws Exception", "code": "{\n  Shape shape = parseShape(query);\n  SpatialStrategy strategy = manager.strategy();\n  SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects, shape.getBoundingBox());\n  Query filterQuery = strategy.makeQuery(args);\n  BooleanQuery q =\n      new BooleanQuery.Builder()\n          .add(filterQuery, BooleanClause.Occur.MUST)\n          .add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD)\n          .build();\n\n  return new OSpatialQueryContext(null, manager.searcher(), q);\n}", "path": "orientdb/lucene/src/main/java/com/orientechnologies/spatial/strategy/SpatialQueryBuilderOverlap.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/** @return singleton instance. */\n", "func_signal": "public static ODirectMemoryAllocator instance()", "code": "{\n  final ODirectMemoryAllocator inst = INSTANCE_HOLDER.get();\n  if (inst != null) {\n    return inst;\n  }\n\n  final ODirectMemoryAllocator newAllocator = new ODirectMemoryAllocator();\n  if (INSTANCE_HOLDER.compareAndSet(null, newAllocator)) {\n    return newAllocator;\n  }\n\n  return INSTANCE_HOLDER.get();\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Adds pointer to the containers of weak references so we will be able to find memory leaks\n * related to this pointer\n */\n", "func_signal": "private OPointer track(OPointer pointer)", "code": "{\n  if (TRACK) {\n    synchronized (this) {\n      final TrackedPointerReference reference =\n          new TrackedPointerReference(pointer, trackedPointersQueue);\n      trackedReferences.add(reference);\n      trackedBuffers.put(new TrackedPointerKey(pointer), reference);\n\n      checkTrackedPointerLeaks();\n    }\n  }\n\n  return pointer;\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Builds a {@link SortField} from a configuration map. The map can contains up to three fields:\n * field (name), reverse (true/false) and type {@link SortField.Type}.\n *\n * @param conf\n * @return\n */\n", "func_signal": "public static SortField buildSortField(Map<String, Object> conf)", "code": "{\n\n  final String field = Optional.ofNullable((String) conf.get(\"field\")).orElse(null);\n  final String type =\n      Optional.ofNullable(((String) conf.get(\"type\")).toUpperCase())\n          .orElse(SortField.Type.STRING.name());\n  final Boolean reverse = Optional.ofNullable((Boolean) conf.get(\"reverse\")).orElse(false);\n\n  SortField sortField = new SortField(field, SortField.Type.valueOf(type), reverse);\n\n  return sortField;\n}", "path": "orientdb/lucene/src/main/java/com/orientechnologies/lucene/engine/OLuceneIndexEngineUtils.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Removes direct memory pointer from container of weak references, it is done just after memory\n * which was referenced by this pointer will be deallocated. So no memory leaks can be caused by\n * this pointer.\n */\n", "func_signal": "@SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\nprivate void untrack(OPointer pointer)", "code": "{\n  if (TRACK) {\n    synchronized (this) {\n      final TrackedPointerKey trackedBufferKey = new TrackedPointerKey(pointer);\n\n      final TrackedPointerReference reference = trackedBuffers.remove(trackedBufferKey);\n      if (reference == null) {\n        OLogManager.instance()\n            .errorNoDb(\n                this,\n                \"DIRECT-TRACK: untracked direct memory pointer `%X` detected.\",\n                new Exception(),\n                id(pointer));\n\n        assert false;\n      } else {\n        trackedReferences.remove(reference);\n        reference.clear();\n      }\n\n      checkTrackedPointerLeaks();\n    }\n  }\n}", "path": "orientdb/core/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryAllocator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "//  @Test\n", "func_signal": "public void testStreaming() throws IOException", "code": "{\n  Deque<Integer> txs = new ArrayDeque<>();\n\n  for (int i = 0; i < ITERATIONS; ++i) {\n    db.begin();\n    txs.addLast(db.getTransaction().getClientTransactionId());\n    db.newInstance().save(db.getClusterNameById(db.getDefaultClusterId()));\n    db.commit();\n  }\n\n  for (int i = 0; i < ITERATIONS; ++i) assertThat(stream.readInt()).isEqualTo(txs.removeFirst());\n}", "path": "orientdb/server/src/test/java/com/orientechnologies/orient/core/db/JournaledTxStreamingTest.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Returns a Transactional OrientGraph implementation from the current database in thread local.\n *\n * @param autoStartTx Whether returned graph will start transaction before each operation till\n *     commit automatically or user should do it explicitly be calling {@link\n *     OrientGraph#getRawGraph()} method {@link ODatabaseDocumentTx#begin()}.\n * @return Transactional OrientGraph implementation from the current database in thread local.\n */\n", "func_signal": "public static OrientGraph getGraph(\n    final boolean autoStartTx, OModifiableBoolean shouldBeShutDown)", "code": "{\n  final ODatabaseDocumentInternal database = ODatabaseRecordThreadLocal.instance().get();\n\n  final OrientBaseGraph result = OrientBaseGraph.getActiveGraph();\n\n  if (result != null && (result instanceof OrientGraph)) {\n    final ODatabaseDocumentInternal graphDb = result.getRawGraph();\n\n    // CHECK IF THE DATABASE + USER IN TL IS THE SAME IN ORDER TO USE IT\n    if (canReuseActiveGraph(graphDb, database)) {\n\n      if (!graphDb.isClosed()) {\n        ODatabaseRecordThreadLocal.instance().set(graphDb);\n        if (autoStartTx && autoTxStartRequired(graphDb)) ((OrientGraph) result).begin();\n\n        shouldBeShutDown.setValue(false);\n        return (OrientGraph) result;\n      }\n    }\n  }\n  // Set it again on ThreadLocal because the getRawGraph() may have set a closed db in the\n  // thread-local\n  ODatabaseRecordThreadLocal.instance().set(database);\n  shouldBeShutDown.setValue(true);\n\n  final OrientGraph g =\n      (OrientGraph) OrientGraphFactory.getTxGraphImplFactory().getGraph(database, false);\n  if (autoStartTx && autoTxStartRequired(database)) g.begin();\n  return g;\n}", "path": "orientdb/graphdb/src/main/java/com/orientechnologies/orient/graph/sql/OGraphCommandExecutorSQLFactory.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "orientechnologies/orientdb", "stars": 4671, "license": "apache-2.0", "language": "java", "size": 266209}
{"docstring": "/**\n * Called when the job is executed by quartz. This method delegates to the <tt>validateSessions()</tt> method on the\n * associated session manager.\n *\n * @param context the Quartz job execution context for this execution.\n */\n", "func_signal": "@Override\npublic void execute(JobExecutionContext context) throws JobExecutionException", "code": "{\n\n    JobDataMap jobDataMap = context.getMergedJobDataMap();\n    ValidatingSessionManager sessionManager = (ValidatingSessionManager) jobDataMap.get(SESSION_MANAGER_KEY);\n\n    if (log.isDebugEnabled()) {\n        log.debug(\"Executing session validation Quartz job...\");\n    }\n\n    sessionManager.validateSessions();\n\n    if (log.isDebugEnabled()) {\n        log.debug(\"Session validation Quartz job complete.\");\n    }\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/ext/QuartzSessionValidationJob.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u767b\u5f55\u6210\u529f\u540e\u6267\u884c\u7684\u65b9\u6cd5\u3002\n *\n * @param token\n * @param subject\n * @param request\n * @param response\n * @return\n * @throws Exception\n */\n", "func_signal": "@Override\nprotected boolean onLoginSuccess(\n        AuthenticationToken token,\n        Subject subject,\n        ServletRequest request,\n        ServletResponse response) throws Exception", "code": "{\n    ShiroUser user = (ShiroUser) subject.getPrincipal();\n    user.setToken(subject.getSession().getId().toString());\n    return true;\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/filter/ShiroFormAuthenticationFilter.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "//\u5f53\u4e24\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u8d26\u53f7\u5bc6\u7801\u4e0d\u4e00\u6837\u65f6\u4f7f\u7528\n//    @Bean(name = \"userDataSource\")\n//    public DataSource getUserDataSource() {\n//        return hikariConfig.getHikariDataSource(userUrl, userName, password);\n//    }\n", "func_signal": "@Bean(\"dynamicDataSource\")\npublic DynamicDataSource dynamicDataSource(@Qualifier(\"primaryDataSource\") DataSource primaryDataSource,\n                                           @Qualifier(\"userDataSource\") DataSource userDataSource)", "code": "{\n    Map<Object, Object> targetDataSources = new HashMap<>();\n    targetDataSources.put(DatabaseTypeEnum.PRIMARY, primaryDataSource);\n    targetDataSources.put(DatabaseTypeEnum.USER, userDataSource);\n\n    DynamicDataSource dataSource = new DynamicDataSource();\n    dataSource.setTargetDataSources(targetDataSources);// \u8be5\u65b9\u6cd5\u662fAbstractRoutingDataSource\u7684\u65b9\u6cd5\n    dataSource.setDefaultTargetDataSource(primaryDataSource);// \u9ed8\u8ba4\u7684datasource\u8bbe\u7f6e\u4e3amyTestDbDataSource\n    return dataSource;\n}", "path": "springBoot/springboot-dynamicDataSource/src/main/java/cn/abel/config/DynamicDataSourceConfig.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u521b\u5efa\u5305\u542b\u7b2c\u4e09\u65b9accessToken\u7684shiro token\u3002\n *\n * @param request\n * @param response\n * @return\n */\n", "func_signal": "@Override\nprotected AuthenticationToken createToken(ServletRequest request, ServletResponse response)", "code": "{\n    String username = getUsername(request);\n    String password = getPassword(request);\n    String accessToken = request.getParameter(Constants.THIRD_PARTY_ACCESS_TOKEN_NAME);\n    //shiro\u540e\u7eed\u6d41\u7a0b\u53ef\u80fd\u4f1a\u7528\u5230username\uff0c\u6240\u4ee5\u5982\u679c\u7528accessToken\u767b\u5f55\u65f6\u8d4b\u503cusername\u4e3a\u5b83\u7684\u503c\u3002\n    if (StringUtils.isBlank(username)) {\n        username = accessToken;\n    }\n    return new ThirdPartySupportedToken(username, password, accessToken);\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/filter/ShiroFormAuthenticationFilter.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "//\u670d\u52a1\u5668\u7aef\u6709\u6d88\u606f\u65f6,\u4f1a\u8ba2\u9605@SendTo \u4e2d\u7684\u8def\u5f84\u7684\u6d4f\u89c8\u5668\u53d1\u9001\u6d88\u606f\u3002\n", "func_signal": "public Response say(Message message) throws Exception", "code": "{\n        Thread.sleep(1000);\n        return new Response(\"Welcome, \" + message.getName() + \"!\");\n    }", "path": "springBoot/springWebSocket/src/main/java/com/us/example/controller/WebSocketController.java", "commit_date": "2017-06-22 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u4fdd\u5b58\u7236\u5b50\u5173\u7cfb\n *\n * @param fatherName\n * @param sonName\n * @return\n */\n", "func_signal": "public void saveRelation(String fatherName, String sonName)", "code": "{\n    King from = kingDao.findByName(fatherName);\n    King to = kingDao.findByName(sonName);\n    FatherAndSonRelation fatherAndSonRelation = new FatherAndSonRelation();\n    fatherAndSonRelation.setFrom(from);\n    fatherAndSonRelation.setTo(to);\n    from.addRelation(fatherAndSonRelation);\n    kingDao.save(from);\n}", "path": "springBoot/springboot-neo4j/src/main/java/cn/abel/neo4j/service/KingService.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "//decide \u65b9\u6cd5\u662f\u5224\u5b9a\u662f\u5426\u62e5\u6709\u6743\u9650\u7684\u51b3\u7b56\u65b9\u6cd5\n", "func_signal": "@Override\npublic void decide(Authentication authentication, Object object, Collection<ConfigAttribute> configAttributes) throws AccessDeniedException, InsufficientAuthenticationException", "code": "{\n\n    HttpServletRequest request = ((FilterInvocation) object).getHttpRequest();\n    String url, method;\n    AntPathRequestMatcher matcher;\n    for (GrantedAuthority ga : authentication.getAuthorities()) {\n        if (ga instanceof MyGrantedAuthority) {\n            MyGrantedAuthority urlGrantedAuthority = (MyGrantedAuthority) ga;\n            url = urlGrantedAuthority.getPermissionUrl();\n            method = urlGrantedAuthority.getMethod();\n            matcher = new AntPathRequestMatcher(url);\n            if (matcher.matches(request)) {\n                //\u5f53\u6743\u9650\u8868\u6743\u9650\u7684method\u4e3aALL\u65f6\u8868\u793a\u62e5\u6709\u6b64\u8def\u5f84\u7684\u6240\u6709\u8bf7\u6c42\u65b9\u5f0f\u6743\u5229\u3002\n                if (method.equals(request.getMethod()) || \"ALL\".equals(method)) {\n                    return;\n                }\n            }\n        } else if (ga.getAuthority().equals(\"ROLE_ANONYMOUS\")) {//\u672a\u767b\u5f55\u53ea\u5141\u8bb8\u8bbf\u95ee login \u9875\u9762\n            matcher = new AntPathRequestMatcher(\"/login\");\n            if (matcher.matches(request)) {\n                return;\n            }\n        }\n    }\n    throw new AccessDeniedException(\"no right\");\n}", "path": "springBoot/springboot-springSecurity3/src/main/java/com/us/example/service/MyAccessDecisionManager.java", "commit_date": "2017-02-15 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * Created by yangyibo on 2018/6/29.\n * \u4f7f\u7528 Feign \u8c03\u7528person service\n * \u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u7b80\u5355\u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u65b9\u6cd5\u5373\u53ef\u8c03\u7528Person\u7684 Rest\u670d\u52a1\n */\n", "func_signal": "@FeignClient(\"person\")\npublic interface PersonService", "code": "{\n    @RequestMapping(method = RequestMethod.POST, value = \"/save\",\n            produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n    @ResponseBody\n    List<Person> save(@RequestBody String  name);\n}", "path": "springBoot/springboot-springCloud/ui/src/main/java/com/abel/service/PersonService.java", "commit_date": "2018-07-04 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u67e5\u8be2\u4e00\u4e2a\u7687\u5e1d\u4fe1\u606f\uff0c\u6b64\u5904\u4f7f\u7528spring-data-neo4j \u63a5\u53e3\n *\n * @param name\n */\n", "func_signal": "public King findByName(String name)", "code": "{\n    King t = kingDao.findByName(name);\n    return t;\n}", "path": "springBoot/springboot-neo4j/src/main/java/cn/abel/neo4j/service/KingService.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u4fdd\u5b58\u7687\u540e\u4fe1\u606f\n *\n * @param list\n */\n", "func_signal": "public void saveQueen(List<Queen> list)", "code": "{\n    Neo4jSession session = neo4jDao.open();\n    list.forEach(x -> {\n        session.execSave(x);\n    });\n}", "path": "springBoot/springboot-neo4j/src/main/java/cn/abel/neo4j/service/KingService.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "//\u5728springmvc \u4e2d\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97principal,principal \u4e2d\u5305\u542b\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\n", "func_signal": "public void handleChat(Principal principal, Message message)", "code": "{\n\n    /**\n     * \u6b64\u5904\u662f\u4e00\u6bb5\u786c\u7f16\u7801\u3002\u5982\u679c\u53d1\u9001\u4eba\u662fwyf \u5219\u53d1\u9001\u7ed9 wisely \u5982\u679c\u53d1\u9001\u4eba\u662fwisely \u5c31\u53d1\u9001\u7ed9 wyf\u3002\n     * \u901a\u8fc7\u5f53\u524d\u7528\u6237,\u7136\u540e\u67e5\u627e\u6d88\u606f,\u5982\u679c\u67e5\u627e\u5230\u672a\u8bfb\u6d88\u606f,\u5219\u53d1\u9001\u7ed9\u5f53\u524d\u7528\u6237\u3002\n     */\n    if (principal.getName().equals(\"admin\")) {\n        //\u901a\u8fc7convertAndSendToUser \u5411\u7528\u6237\u53d1\u9001\u4fe1\u606f,\n        // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u63a5\u6536\u6d88\u606f\u7684\u7528\u6237,\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6d4f\u89c8\u5668\u8ba2\u9605\u7684\u5730\u5740,\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u6d88\u606f\u672c\u8eab\n\n        messagingTemplate.convertAndSendToUser(\"abel\",\n                \"/queue/notifications\", principal.getName() + \"-send:\"\n                        + message.getName());\n        /**\n         * 72 \u884c\u64cd\u4f5c\u76f8\u7b49\u4e8e \n         * messagingTemplate.convertAndSend(\"/user/abel/queue/notifications\",principal.getName() + \"-send:\"\n         + message.getName());\n         */\n    } else {\n        messagingTemplate.convertAndSendToUser(\"admin\",\n                \"/queue/notifications\", principal.getName() + \"-send:\"\n                        + message.getName());\n    }\n}", "path": "springBoot/springWebSocket/src/main/java/com/us/example/controller/WebSocketController.java", "commit_date": "2017-06-22 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u901a\u8fc7\u7687\u5e1d\u540d\u5b57\uff0c\u67e5\u5230\u5f53\u524d\u7684\u7687\u540e\u548c\u4e0a\u4e00\u4efb\u7687\u5e1d\n *\n * @param\n */\n", "func_signal": "public GraphDTO getKingAndQueen(String kingName)", "code": "{\n    Neo4jSession session = neo4jDao.open();\n    String cypher = \"match p=(a:King)-[r:`\u4f20\u4f4d`]->(b:King)-[r2:`\u7687\u540e`*1..]->(c:Queen) where a.name ='\" + kingName + \"' return p\";\n//        \u901a\u8fc7\u7687\u5e1d\u540d\u5b57\u67e5\u8be2\u5230\u5f53\u524d\u7687\u5e1d\u7687\u540e\u4ee5\u53ca\u4e0a\u4e00\u4efb\u7687\u5e1d\u7687\u540e\n//        match p=(a:King)-[r:`\u4f20\u4f4d`]->(b:King)-[r2:`\u7687\u540e`*1..]->(c:Queen), (a:King)-[r3:`\u7687\u540e`*1..]->(d:Queen) where b.name ='\u6731\u68e3' return a,b,c,d\n    Iterator<Map<String, Object>> iterator = session.exec(cypher);\n    GraphDTO gto = mapToGraph(iterator);\n    return gto;\n}", "path": "springBoot/springboot-neo4j/src/main/java/cn/abel/neo4j/service/KingService.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u914d\u7f6eHikari\u6570\u636e\u8fde\u63a5\u6c60\n *\n * @param url \u6570\u636e\u6e90\n * @return \u8fde\u63a5\u6c60\u5bf9\u8c61\n */\n", "func_signal": "public HikariDataSource getHikariDataSource(String url)", "code": "{\n    com.zaxxer.hikari.HikariConfig config = new com.zaxxer.hikari.HikariConfig();\n    config.setMinimumIdle(minIdle);\n    config.setMaximumPoolSize(maxActive);\n    config.setConnectionTestQuery(validationQuery);\n    config.setJdbcUrl(url);\n    config.setUsername(userName);\n    config.setPassword(password);\n    config.setDriverClassName(driverClassName);\n    config.setConnectionTimeout(connectionTimeout);\n    config.setMaxLifetime(maxLeftTime);\n    config.setValidationTimeout(validationTimeout);\n    config.setConnectionInitSql(connectionInitSql);\n    return new HikariDataSource(config);\n}", "path": "springBoot/springboot-dynamicDataSource/src/main/java/cn/abel/config/HikariConfig.java", "commit_date": "2019-03-27 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u6839\u636e\u6570\u636e\u6e90\u521b\u5efaSqlSessionFactory\n */\n", "func_signal": "@Bean\npublic SqlSessionFactory sqlSessionFactory(@Qualifier(\"dynamicDataSource\") DynamicDataSource dynamicDataSource) throws Exception", "code": "{\n    SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n    bean.setDataSource(dynamicDataSource);\n    bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(resources));\n    return bean.getObject();\n}", "path": "springBoot/springboot-dynamicDataSource/src/main/java/cn/abel/config/DynamicDataSourceConfig.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "//\u6b64\u65b9\u6cd5\u662f\u4e3a\u4e86\u5224\u5b9a\u7528\u6237\u8bf7\u6c42\u7684url \u662f\u5426\u5728\u6743\u9650\u8868\u4e2d\uff0c\u5982\u679c\u5728\u6743\u9650\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7ed9 decide \u65b9\u6cd5\uff0c\u7528\u6765\u5224\u5b9a\u7528\u6237\u662f\u5426\u6709\u6b64\u6743\u9650\u3002\u5982\u679c\u4e0d\u5728\u6743\u9650\u8868\u4e2d\u5219\u653e\u884c\u3002\n//\u56e0\u4e3a\u6211\u4e0d\u60f3\u6bcf\u4e00\u6b21\u6765\u4e86\u8bf7\u6c42\uff0c\u90fd\u5148\u8981\u5339\u914d\u4e00\u4e0b\u6743\u9650\u8868\u4e2d\u7684\u4fe1\u606f\u662f\u4e0d\u662f\u5305\u542b\u6b64url\uff0c\n// \u6211\u51c6\u5907\u76f4\u63a5\u62e6\u622a\uff0c\u4e0d\u7ba1\u8bf7\u6c42\u7684url \u662f\u4ec0\u4e48\u90fd\u76f4\u63a5\u62e6\u622a\uff0c\u7136\u540e\u5728MyAccessDecisionManager\u7684decide \u65b9\u6cd5\u4e2d\u505a\u62e6\u622a\u8fd8\u662f\u653e\u884c\u7684\u51b3\u7b56\u3002\n//\u6240\u4ee5\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e0d\u80fd\u8fd4\u56de null \u6b64\u5904\u6211\u5c31\u968f\u4fbf\u8fd4\u56de\u4e00\u4e0b\u3002\n", "func_signal": "@Override\npublic Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException", "code": "{\n    Collection<ConfigAttribute> co=new ArrayList<>();\n    co.add(new SecurityConfig(\"null\"));\n    return co;\n}", "path": "springBoot/springboot-springSecurity3/src/main/java/com/us/example/service/MyInvocationSecurityMetadataSourceService.java", "commit_date": "2017-02-15 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u7528\u4e8e\u4e24\u4e2a\u5e93\u8d26\u53f7\u5bc6\u7801\u4e0d\u4e00\u6837\u7684\u65f6\u5019\n *\n * @param url\n * @param userName\n * @param passwod\n * @return\n */\n", "func_signal": "public HikariDataSource getHikariDataSource(String url, String userName, String passwod)", "code": "{\n    com.zaxxer.hikari.HikariConfig config = new com.zaxxer.hikari.HikariConfig();\n    config.setMinimumIdle(minIdle);\n    config.setMaximumPoolSize(maxActive);\n    config.setConnectionTestQuery(validationQuery);\n    config.setJdbcUrl(url);\n    config.setUsername(userName);\n    config.setPassword(passwod);\n    config.setConnectionTimeout(connectionTimeout);\n    config.setDriverClassName(driverClassName);\n    config.setMaxLifetime(maxLeftTime);\n    config.setValidationTimeout(validationTimeout);\n    config.setConnectionInitSql(connectionInitSql);\n    return new HikariDataSource(config);\n}", "path": "springBoot/springboot-dynamicDataSource/src/main/java/cn/abel/config/HikariConfig.java", "commit_date": "2019-03-27 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u4fdd\u5b58\u7687\u5e1d\u4fe1\u606f\n *\n * @param list\n */\n", "func_signal": "public void saveKing(List<King> list)", "code": "{\n    Neo4jSession session = neo4jDao.open();\n    list.forEach(x -> {\n        session.execSave(x);\n    });\n}", "path": "springBoot/springboot-neo4j/src/main/java/cn/abel/neo4j/service/KingService.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u5f53\u9274\u6743\u5931\u8d25\u7684\u65f6\u5019\u6267\u884c\u7684\u65b9\u6cd5\u3002\n *\n * @param request\n * @param response\n * @return\n * @throws Exception\n */\n", "func_signal": "@Override\nprotected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception", "code": "{\n    if (isLoginRequest(request, response)) {\n        if (isLoginSubmission(request, response)) {\n            return executeLogin(request, response);\n        }\n        //\u767b\u5f55\u4ec5\u9650HttpPost\u65b9\u5f0f\uff0c\u5176\u4ed6\u4efb\u4f55\u65b9\u5f0f\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n        return responseDirectly((HttpServletResponse) response, ResponseEntity.error(InfoCode.LOGIN_TYPE_ERROR));\n    }\n    //\u8c03\u7528\u975e\u767b\u5f55\u65b9\u6cd5\u65f6\u8ba4\u8bc1\u5931\u8d25\u7684\u60c5\u51b5\u3002\n    return responseDirectly((HttpServletResponse) response, ResponseEntity.error(InfoCode.INVALID_TOKEN));\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/filter/ShiroFormAuthenticationFilter.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u76f4\u63a5\u6784\u9020HttpResponse\uff0c\u4e0d\u518d\u6267\u884c\u540e\u7eed\u7684\u6240\u6709\u65b9\u6cd5\u3002\n *\n * @param response\n * @param entity\n * @return\n */\n", "func_signal": "private boolean responseDirectly(HttpServletResponse response, ResponseEntity entity)", "code": "{\n    response.reset();\n    response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n\n    //\u8bbe\u7f6e\u8de8\u57df\u4fe1\u606f\u3002\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, DELETE, PUT, OPTIONS, HEAD\");\n    response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n    response.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n    try {\n        response.getWriter().write(JSON.toJSONString(entity));\n    } catch (IOException e) {\n        logger.error(\"ResponseError ex:{}\", ExceptionUtils.getStackTrace(e));\n    }\n    return false;\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/filter/ShiroFormAuthenticationFilter.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * \u767b\u5f55\u9a8c\u8bc1\u5931\u8d25\u540e\u6267\u884c\u7684\u65b9\u6cd5\u3002\n *\n * @param token\n * @param e\n * @param request\n * @param response\n * @return\n */\n", "func_signal": "@Override\nprotected boolean onLoginFailure(\n        AuthenticationToken token,\n        AuthenticationException e,\n        ServletRequest request,\n        ServletResponse response)", "code": "{\n    HttpServletResponse resp = (HttpServletResponse) response;\n    if (e instanceof ExcessiveAttemptsException) {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.PASSWORD_ERROR_MORE_THAN));\n    } else if (e instanceof UnknownAccountException) {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.PASSWORD_ERROR));\n    } else if (e instanceof IncorrectCredentialsException) {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.PASSWORD_ERROR));\n    } else if (e instanceof LockedAccountException) {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.USER_PROFILE_LOCK));\n    } else if (e instanceof ExpiredCredentialsException) {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.INVALID_LOGIN));\n    } else {\n        return responseDirectly(resp, ResponseEntity.error(InfoCode.SERVICE_UNAVAILABLE));\n    }\n}", "path": "springBoot/springboot-shiro2/src/main/java/cn/abel/rest/shiro/filter/ShiroFormAuthenticationFilter.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "527515025/springBoot", "stars": 6321, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * Creates a divider {@link RecyclerView.ItemDecoration} that can be used with a\n * {@link LinearLayoutManager}.\n *\n * @param context     Current context, it will be used to access resources.\n * @param orientation Divider orientation. Should be {@link #HORIZONTAL} or {@link #VERTICAL}.\n */\n", "func_signal": "public CustomDividerItemDecoration(Context context, int orientation)", "code": "{\n//        final TypedArray a = context.obtainStyledAttributes(ATTRS);\n    mDivider = context.getResources().getDrawable(R.drawable.picture);\n    setOrientation(orientation);\n}", "path": "Android-skin-support/demo/skin-app/src/main/java/com/ximsfei/skindemo/tab/fragment/CustomDividerItemDecoration.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u83b7\u53d6\u76ae\u80a4\u5305\u5305\u540d.\n *\n * @param skinPkgPath sdcard\u4e2d\u76ae\u80a4\u5305\u8def\u5f84.\n * @return\n */\n", "func_signal": "public String getSkinPackageName(String skinPkgPath)", "code": "{\n    PackageManager mPm = mAppContext.getPackageManager();\n    PackageInfo info = mPm.getPackageArchiveInfo(skinPkgPath, PackageManager.GET_ACTIVITIES);\n    return info.packageName;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6362\u80a4\u6846\u67b6.\n *\n * @param application\n * @return\n */\n", "func_signal": "public static SkinCompatManager init(Application application)", "code": "{\n    if (sManager == null) {\n        synchronized (SkinCompatManager.class) {\n            sManager = new SkinCompatManager(application);\n        }\n    }\n    return sManager;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * Sets the {@link Drawable} for this divider.\n *\n * @param drawable Drawable that should be used as a divider.\n */\n", "func_signal": "public void setDrawable(@NonNull Drawable drawable)", "code": "{\n    if (drawable == null) {\n        throw new IllegalArgumentException(\"Drawable cannot be null.\");\n    }\n    mDivider = drawable;\n}", "path": "Android-skin-support/demo/skin-app/src/main/java/com/ximsfei/skindemo/tab/fragment/CustomDividerItemDecoration.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49View\u6362\u80a4\u65f6\uff0c\u53ef\u9009\u62e9\u6dfb\u52a0\u4e00\u4e2a{@link SkinLayoutInflater}\n *\n * @param inflater \u5728{@link skin.support.app.SkinCompatViewInflater#createView(Context, String, String)}\u65b9\u6cd5\u4e2d\u8c03\u7528.\n * @return\n */\n", "func_signal": "public SkinCompatManager addInflater(SkinLayoutInflater inflater)", "code": "{\n    mInflaters.add(inflater);\n    return this;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u6dfb\u52a0\u76ae\u80a4\u5305\u52a0\u8f7d\u7b56\u7565.\n *\n * @param strategy \u81ea\u5b9a\u4e49\u52a0\u8f7d\u7b56\u7565\n * @return\n */\n", "func_signal": "public SkinCompatManager addStrategy(SkinLoaderStrategy strategy)", "code": "{\n    mStrategyMap.put(strategy.getType(), strategy);\n    return this;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "// \u8bbe\u7f6e\u6e10\u53d8\u7684\u52a8\u753b\n", "func_signal": "public static void startAlphaAnimation(View v, long duration, int visibility)", "code": "{\n    AlphaAnimation alphaAnimation = (visibility == View.VISIBLE)\n            ? new AlphaAnimation(0f, 1f)\n            : new AlphaAnimation(1f, 0f);\n\n    alphaAnimation.setDuration(duration);\n    alphaAnimation.setFillAfter(true);\n    v.startAnimation(alphaAnimation);\n}", "path": "Android-skin-support/demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/mdtab/CollapsingToolbarLayoutActivity.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49View\u6362\u80a4\u65f6\uff0c\u53ef\u9009\u62e9\u6dfb\u52a0\u4e00\u4e2a{@link SkinLayoutInflater}\n *\n * @param inflater \u5728{@link skin.support.app.SkinCompatViewInflater#createView(Context, String, String)}\u65b9\u6cd5\u4e2d\u6700\u5148\u8c03\u7528.\n * @return\n */\n", "func_signal": "public SkinCompatManager addHookInflater(SkinLayoutInflater inflater)", "code": "{\n    mHookInflaters.add(inflater);\n    return this;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "// \u63a7\u5236Title\u7684\u663e\u793a\n", "func_signal": "private void handleAlphaOnTitle(float percentage)", "code": "{\n    if (percentage >= PERCENTAGE_TO_HIDE_TITLE_DETAILS) {\n        if (mIsTheTitleContainerVisible) {\n            startAlphaAnimation(mLlTitleContainer, ALPHA_ANIMATIONS_DURATION, View.INVISIBLE);\n            mIsTheTitleContainerVisible = false;\n        }\n    } else {\n        if (!mIsTheTitleContainerVisible) {\n            startAlphaAnimation(mLlTitleContainer, ALPHA_ANIMATIONS_DURATION, View.VISIBLE);\n            mIsTheTitleContainerVisible = true;\n        }\n    }\n}", "path": "Android-skin-support/demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/mdtab/CollapsingToolbarLayoutActivity.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * Return the current {@link LayoutInflaterFactory} (or null). This is\n * called on each element name. If the factory returns a View, add that\n * to the hierarchy. If it returns null, proceed to call onCreateView(name).\n *\n * @return The {@link LayoutInflaterFactory} associated with the\n * {@link LayoutInflater}. Will be {@code null} if the inflater does not\n * have a {@link LayoutInflaterFactory} but a raw {@link LayoutInflater.Factory}.\n * @see LayoutInflater#getFactory()\n * @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} to set and\n * {@link LayoutInflater#getFactory2()} to get the factory.\n */\n", "func_signal": "@Deprecated\npublic static LayoutInflaterFactory getFactory(LayoutInflater inflater)", "code": "{\n    LayoutInflater.Factory factory = inflater.getFactory();\n    if (factory instanceof LayoutInflaterCompat.Factory2Wrapper) {\n        return ((LayoutInflaterCompat.Factory2Wrapper) factory).mDelegateFactory;\n    }\n    return null;\n}", "path": "Android-skin-support/androidx/skin-support/src/main/java/skin/support/view/LayoutInflaterCompat.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "// \u5904\u7406ToolBar\u7684\u663e\u793a\n", "func_signal": "private void handleToolbarTitleVisibility(float percentage)", "code": "{\n    if (percentage >= PERCENTAGE_TO_SHOW_TITLE_AT_TOOLBAR) {\n        if (!mIsTheTitleVisible) {\n            startAlphaAnimation(mTvToolbarTitle, ALPHA_ANIMATIONS_DURATION, View.VISIBLE);\n            mIsTheTitleVisible = true;\n        }\n    } else {\n        if (mIsTheTitleVisible) {\n            startAlphaAnimation(mTvToolbarTitle, ALPHA_ANIMATIONS_DURATION, View.INVISIBLE);\n            mIsTheTitleVisible = false;\n        }\n    }\n}", "path": "Android-skin-support/demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/mdtab/CollapsingToolbarLayoutActivity.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * android:onClick doesn't handle views with a ContextWrapper context. This method\n * backports new framework functionality to traverse the Context wrappers to find a\n * suitable target.\n */\n", "func_signal": "private void checkOnClickListener(View view, AttributeSet attrs)", "code": "{\n    final Context context = view.getContext();\n\n    if (!(context instanceof ContextWrapper) ||\n            (Build.VERSION.SDK_INT >= 15 && !ViewCompat.hasOnClickListeners(view))) {\n        // Skip our compat functionality if: the Context isn't a ContextWrapper, or\n        // the view doesn't have an OnClickListener (we can only rely on this on API 15+ so\n        // always use our compat code on older devices)\n        return;\n    }\n\n    final TypedArray a = context.obtainStyledAttributes(attrs, sOnClickAttrs);\n    final String handlerName = a.getString(0);\n    if (handlerName != null) {\n        view.setOnClickListener(new DeclaredOnClickListener(view, handlerName));\n    }\n    a.recycle();\n}", "path": "Android-skin-support/androidx/skin-support/src/main/java/skin/support/app/SkinCompatViewInflater.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u52a0\u8f7d\u8bb0\u5f55\u7684\u76ae\u80a4\u5305\uff0c\u4e00\u822c\u5728Application\u4e2d\u521d\u59cb\u5316\u6362\u80a4\u6846\u67b6\u540e\u8c03\u7528.\n *\n * @param listener \u76ae\u80a4\u5305\u52a0\u8f7d\u76d1\u542c.\n * @return\n */\n", "func_signal": "public AsyncTask loadSkin(SkinLoaderListener listener)", "code": "{\n    String skin = SkinPreference.getInstance().getSkinName();\n    int strategy = SkinPreference.getInstance().getSkinStrategy();\n    if (TextUtils.isEmpty(skin) || strategy == SKIN_LOADER_STRATEGY_NONE) {\n        return null;\n    }\n    return loadSkin(skin, listener, strategy);\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * Attach a custom Factory interface for creating views while using\n * this LayoutInflater. This must not be null, and can only be set once;\n * after setting, you can not change the factory.\n *\n * @see LayoutInflater#setFactory(android.view.LayoutInflater.Factory)\n * @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} instead to set\n * and {@link LayoutInflater#getFactory2()} to get the factory.\n */\n", "func_signal": "@Deprecated\npublic static void setFactory(\n        LayoutInflater inflater, LayoutInflaterFactory factory)", "code": "{\n    if (Build.VERSION.SDK_INT >= 21) {\n        inflater.setFactory2(factory != null ? new LayoutInflaterCompat.Factory2Wrapper(factory) : null);\n    } else {\n        final LayoutInflater.Factory2 factory2 = factory != null\n                ? new LayoutInflaterCompat.Factory2Wrapper(factory) : null;\n        inflater.setFactory2(factory2);\n\n        final LayoutInflater.Factory f = inflater.getFactory();\n        if (f instanceof LayoutInflater.Factory2) {\n            // The merged factory is now set to getFactory(), but not getFactory2() (pre-v21).\n            // We will now try and force set the merged factory to mFactory2\n            forceSetFactory2(inflater, (LayoutInflater.Factory2) f);\n        } else {\n            // Else, we will force set the original wrapped Factory2\n            forceSetFactory2(inflater, factory2);\n        }\n    }\n}", "path": "Android-skin-support/androidx/skin-support/src/main/java/skin/support/view/LayoutInflaterCompat.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * For APIs < 21, there was a framework bug that prevented a LayoutInflater's\n * Factory2 from being merged properly if set after a cloneInContext from a LayoutInflater\n * that already had a Factory2 registered. We work around that bug here. If we can't we\n * log an error.\n */\n", "func_signal": "private static void forceSetFactory2(LayoutInflater inflater, LayoutInflater.Factory2 factory)", "code": "{\n    if (!sCheckedField) {\n        try {\n            sLayoutInflaterFactory2Field = LayoutInflater.class.getDeclaredField(\"mFactory2\");\n            sLayoutInflaterFactory2Field.setAccessible(true);\n        } catch (NoSuchFieldException e) {\n            Log.e(TAG, \"forceSetFactory2 Could not find field 'mFactory2' on class \"\n                    + LayoutInflater.class.getName()\n                    + \"; inflation may have unexpected results.\", e);\n        }\n        sCheckedField = true;\n    }\n    if (sLayoutInflaterFactory2Field != null) {\n        try {\n            sLayoutInflaterFactory2Field.set(inflater, factory);\n        } catch (IllegalAccessException e) {\n            Log.e(TAG, \"forceSetFactory2 could not set the Factory2 on LayoutInflater \"\n                    + inflater + \"; inflation may have unexpected results.\", e);\n        }\n    }\n}", "path": "Android-skin-support/androidx/skin-support/src/main/java/skin/support/view/LayoutInflaterCompat.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * Sets the orientation for this divider. This should be called if\n * {@link RecyclerView.LayoutManager} changes orientation.\n *\n * @param orientation {@link #HORIZONTAL} or {@link #VERTICAL}\n */\n", "func_signal": "public void setOrientation(int orientation)", "code": "{\n    if (orientation != HORIZONTAL && orientation != VERTICAL) {\n        throw new IllegalArgumentException(\n                \"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");\n    }\n    mOrientation = orientation;\n}", "path": "Android-skin-support/demo/skin-app/src/main/java/com/ximsfei/skindemo/tab/fragment/CustomDividerItemDecoration.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u52a0\u8f7d\u8bb0\u5f55\u7684\u76ae\u80a4\u5305\uff0c\u4e00\u822c\u5728Application\u4e2d\u521d\u59cb\u5316\u6362\u80a4\u6846\u67b6\u540e\u8c03\u7528.\n *\n * @return\n */\n", "func_signal": "public AsyncTask loadSkin()", "code": "{\n    String skin = SkinPreference.getInstance().getSkinName();\n    int strategy = SkinPreference.getInstance().getSkinStrategy();\n    if (TextUtils.isEmpty(skin) || strategy == SKIN_LOADER_STRATEGY_NONE) {\n        return null;\n    }\n    return loadSkin(skin, null, strategy);\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * \u83b7\u53d6\u76ae\u80a4\u5305\u8d44\u6e90{@link Resources}.\n *\n * @param skinPkgPath sdcard\u4e2d\u76ae\u80a4\u5305\u8def\u5f84.\n * @return\n */\n", "func_signal": "@Nullable\npublic Resources getSkinResources(String skinPkgPath)", "code": "{\n    try {\n        AssetManager assetManager = AssetManager.class.newInstance();\n        Method addAssetPath = assetManager.getClass().getMethod(\"addAssetPath\", String.class);\n        addAssetPath.invoke(assetManager, skinPkgPath);\n\n        Resources superRes = mAppContext.getResources();\n        return new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "Android-skin-support/android/skin/src/main/java/skin/support/SkinCompatManager.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * ViewHolder\u7b80\u6d01\u5199\u6cd5,\u907f\u514d\u9002\u914d\u5668\u4e2d\u91cd\u590d\u5b9a\u4e49ViewHolder,\u51cf\u5c11\u4ee3\u7801\u91cf \u7528\u6cd5:\n * \n * <pre>\n * if (convertView == null)\n * {\n * \tconvertView = View.inflate(context, R.layout.ad_demo, null);\n * }\n * TextView tv_demo = ViewHolderUtils.get(convertView, R.id.tv_demo);\n * ImageView iv_demo = ViewHolderUtils.get(convertView, R.id.iv_demo);\n * </pre>\n */\n", "func_signal": "public static <T extends View> T hold(View view, int id)", "code": "{\n\tSparseArray<View> viewHolder = (SparseArray<View>) view.getTag();\n\n\tif (viewHolder == null)\n\t{\n\t\tviewHolder = new SparseArray<View>();\n\t\tview.setTag(viewHolder);\n\t}\n\n\tView childView = viewHolder.get(id);\n\n\tif (childView == null)\n\t{\n\t\tchildView = view.findViewById(id);\n\t\tviewHolder.put(id, childView);\n\t}\n\n\treturn (T) childView;\n}", "path": "Android-skin-support/demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/flycotablayout/utils/ViewFindUtils.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "// \u8bbe\u7f6e\u81ea\u52a8\u6ed1\u52a8\u7684\u52a8\u753b\u6548\u679c\n", "func_signal": "private void initParallaxValues()", "code": "{\n    CollapsingToolbarLayout.LayoutParams petDetailsLp =\n            (CollapsingToolbarLayout.LayoutParams) mIvPlaceholder.getLayoutParams();\n\n    CollapsingToolbarLayout.LayoutParams petBackgroundLp =\n            (CollapsingToolbarLayout.LayoutParams) mFlTitleContainer.getLayoutParams();\n\n    petDetailsLp.setParallaxMultiplier(0.9f);\n    petBackgroundLp.setParallaxMultiplier(0.3f);\n\n    mIvPlaceholder.setLayoutParams(petDetailsLp);\n    mFlTitleContainer.setLayoutParams(petBackgroundLp);\n}", "path": "Android-skin-support/demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/mdtab/CollapsingToolbarLayoutActivity.java", "commit_date": "2019-08-22 00:00:00", "repo_name": "ximsfei/Android-skin-support", "stars": 6273, "license": "mit", "language": "java", "size": 54130}
{"docstring": "/**\n * The only purpose of this method is to test 'reverse'. toBitString is the reverse and both are\n * independent of the endianness.\n */\n", "func_signal": "public final long fromBitString2Long(String str)", "code": "{\n    if (str.length() > 64)\n        throw new UnsupportedOperationException(\"Strings needs to fit into a 'long' but length was \" + str.length());\n\n    long res = 0;\n    int strLen = str.length();\n    for (int charIndex = 0; charIndex < strLen; charIndex++) {\n        res <<= 1;\n        if (str.charAt(charIndex) != '0')\n            res |= 1;\n    }\n    res <<= (64 - strLen);\n    return res;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/util/BitUtil.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Updates the element with the given id. The complexity of this method is O(log(N)), just like push/poll.\n * Its illegal to update elements that are not contained in the heap. Use {@link #contains} to check the existence\n * of an id.\n */\n", "func_signal": "public void update(int id, float value)", "code": "{\n    checkIdInRange(id);\n    int index = positions[id];\n    if (index < 0)\n        throw new IllegalStateException(\"The heap does not contain: \" + id + \". Use the contains method to check this before calling update\");\n    float prev = vals[index];\n    vals[index] = value;\n    if (value > prev)\n        percolateDown(index);\n    else if (value < prev)\n        percolateUp(index);\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/coll/MinHeapWithUpdate.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/*\nEnabling this test requires you to change the pom.xml and increase the memory limit for running tests.\nChange to: <argLine>-Xmx500m -Xms500m</argLine>\n*/\n", "func_signal": "@Ignore\npublic void testGetEle()", "code": "{\n    instance = new MultiSourceElevationProvider();\n    double precision = .1;\n    // The first part is copied from the SRTMGL1ProviderTest\n    assertEquals(338, instance.getEle(49.949784, 11.57517), precision);\n    assertEquals(468, instance.getEle(49.968668, 11.575127), precision);\n    assertEquals(467, instance.getEle(49.968682, 11.574842), precision);\n    assertEquals(3110, instance.getEle(-22.532854, -65.110474), precision);\n    assertEquals(120, instance.getEle(38.065392, -87.099609), precision);\n    assertEquals(1617, instance.getEle(40, -105.2277023), precision);\n    assertEquals(1617, instance.getEle(39.99999999, -105.2277023), precision);\n    assertEquals(1617, instance.getEle(39.9999999, -105.2277023), precision);\n    assertEquals(1617, instance.getEle(39.999999, -105.2277023), precision);\n    assertEquals(1015, instance.getEle(47.468668, 14.575127), precision);\n    assertEquals(1107, instance.getEle(47.467753, 14.573911), precision);\n    assertEquals(1930, instance.getEle(46.468835, 12.578777), precision);\n    assertEquals(844, instance.getEle(48.469123, 9.576393), precision);\n    // The file for this coordinate does not exist, but there is a ferry tagged in OSM\n    assertEquals(0, instance.getEle(56.4787319, 17.6118363), precision);\n    assertEquals(0, instance.getEle(56.4787319, 17.6118363), precision);\n    // The second part is copied from the GMTEDProviderTest\n    // Outside of SRTM covered area\n    assertEquals(108, instance.getEle(60.0000001, 16), precision);\n    assertEquals(0, instance.getEle(60.0000001, 19), precision);\n    // Stor Roten\n    assertEquals(14, instance.getEle(60.251, 18.805), precision);\n}", "path": "graphhopper/core/src/test/java/com/graphhopper/reader/dem/MultiSourceElevationProviderTest.java", "commit_date": "2018-05-14 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * This creates an EncodedValue specifically for the turn costs\n */\n", "func_signal": "public static DecimalEncodedValue create(String name, int maxTurnCosts)", "code": "{\n    int turnBits = Helper.countBitValue(maxTurnCosts);\n    return new UnsignedDecimalEncodedValue(key(name), turnBits, 1, 0, false, true);\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/routing/ev/TurnCost.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * @return true if the heap contains an element with the given id\n */\n", "func_signal": "public boolean contains(int id)", "code": "{\n    checkIdInRange(id);\n    return positions[id] != NOT_PRESENT;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/coll/MinHeapWithUpdate.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * This methods adds the coordinate as 'from' and 'to' to the request.\n */\n", "func_signal": "@Override\npublic GHMRequest addPoint(GHPoint point)", "code": "{\n    fromPoints.add(point);\n    toPoints.add(point);\n    return this;\n}", "path": "graphhopper/client-hc/src/main/java/com/graphhopper/api/GHMRequest.java", "commit_date": "2020-06-06 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Currently: weights, times, distances and paths possible. Where paths is\n * the most expensive to calculate and limited to maximum 10*10 points (via\n * API end point).\n */\n", "func_signal": "public GHMRequest addOutArray(String type)", "code": "{\n    outArrays.add(type);\n    return this;\n}", "path": "graphhopper/client-hc/src/main/java/com/graphhopper/api/GHMRequest.java", "commit_date": "2020-06-06 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Extracts the element with minimum value from the heap\n */\n", "func_signal": "public int poll()", "code": "{\n    int id = peekId();\n    tree[1] = tree[size];\n    vals[1] = vals[size];\n    positions[tree[1]] = 1;\n    positions[id] = NOT_PRESENT;\n    size--;\n    percolateDown(1);\n    return id;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/coll/MinHeapWithUpdate.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Calls the shortcut handler for all edges and shortcuts adjacent to the given node. After this method is called\n * these edges and shortcuts will be removed from the prepare graph, so this method offers the last chance to deal\n * with them.\n */\n", "func_signal": "private void insertShortcuts(int node)", "code": "{\n    shortcutHandler.startContractingNode();\n    {\n        PrepareGraphEdgeIterator iter = outEdgeExplorer.setBaseNode(node);\n        while (iter.next()) {\n            if (!iter.isShortcut())\n                continue;\n            shortcutHandler.addOutShortcut(iter.getPrepareEdge(), node, iter.getAdjNode(), iter.getSkipped1(), iter.getSkipped2(), iter.getWeight());\n        }\n    }\n    {\n        PrepareGraphEdgeIterator iter = inEdgeExplorer.setBaseNode(node);\n        while (iter.next()) {\n            if (!iter.isShortcut())\n                continue;\n            shortcutHandler.addInShortcut(iter.getPrepareEdge(), node, iter.getAdjNode(), iter.getSkipped2(), iter.getSkipped1(), iter.getWeight());\n        }\n    }\n    addedShortcutsCount += shortcutHandler.finishContractingNode();\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/routing/ch/NodeBasedNodeContractor.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Internal parameter. Increase only if you have very large matrices.\n */\n", "func_signal": "public GHMatrixBatchRequester setSleepAfterGET(long sleepAfterGETMillis)", "code": "{\n    this.sleepAfterGET = sleepAfterGETMillis;\n    return this;\n}", "path": "graphhopper/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java", "commit_date": "2020-05-31 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * The expected format is lon,lat per line where lines starting with characters will be ignored. You can create\n * such a file manually via geojson.io -> Save as CSV. Optionally add a second line with\n * <pre>#BBOX:minLat,minLon,maxLat,maxLon</pre>\n *\n * to specify an explicit bounding box. TODO: support GeoJSON instead.\n */\n", "func_signal": "public static final LandmarkSuggestion readLandmarks(String file, LocationIndex locationIndex) throws IOException", "code": "{\n    // landmarks should be suited for all vehicles\n    EdgeFilter edgeFilter = EdgeFilter.ALL_EDGES;\n    List<String> lines = Helper.readFile(file);\n    List<Integer> landmarkNodeIds = new ArrayList<>();\n    BBox bbox = BBox.createInverse(false);\n    int lmSuggestionIdx = 0;\n    String errors = \"\";\n    for (String lmStr : lines) {\n        if (lmStr.startsWith(\"#BBOX:\")) {\n            bbox = BBox.parseTwoPoints(lmStr.substring(\"#BBOX:\".length()));\n            continue;\n        } else if (lmStr.isEmpty() || Character.isAlphabetic(lmStr.charAt(0))) {\n            continue;\n        }\n\n        GHPoint point = GHPoint.fromStringLonLat(lmStr);\n        if (point == null)\n            throw new RuntimeException(\"Invalid format \" + lmStr + \" for point \" + lmSuggestionIdx);\n\n        lmSuggestionIdx++;\n        Snap result = locationIndex.findClosest(point.lat, point.lon, edgeFilter);\n        if (!result.isValid()) {\n            errors += \"Cannot find close node found for landmark suggestion[\" + lmSuggestionIdx + \"]=\" + point + \".\\n\";\n            continue;\n        }\n\n        bbox.update(point.lat, point.lon);\n        landmarkNodeIds.add(result.getClosestNode());\n    }\n\n    if (!errors.isEmpty())\n        throw new RuntimeException(errors);\n\n    return new LandmarkSuggestion(landmarkNodeIds, bbox);\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/routing/lm/LandmarkSuggestion.java", "commit_date": "2020-09-29 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Warning: the calculated priority must NOT depend on priority(v) and therefore findAndHandleShortcuts should also not\n * depend on the priority(v). Otherwise updating the priority before contracting in contractNodes() could lead to\n * a slowish or even endless loop.\n */\n", "func_signal": "@Override\npublic float calculatePriority(int node)", "code": "{\n    // # huge influence: the bigger the less shortcuts gets created and the faster is the preparation\n    //\n    // every adjNode has an 'original edge' number associated. initially it is r=1\n    // when a new shortcut is introduced then r of the associated edges is summed up:\n    // r(u,w)=r(u,v)+r(v,w) now we can define\n    // originalEdgesCount = \u03c3(v) := sum_{ (u,w) \u2208 shortcuts(v) } of r(u, w)\n    shortcutsCount = 0;\n    originalEdgesCount = 0;\n    findAndHandleShortcuts(node, this::countShortcuts);\n\n    // from shortcuts we can compute the edgeDifference\n    // # low influence: with it the shortcut creation is slightly faster\n    //\n    // |shortcuts(v)| \u2212 |{(u, v) | v uncontracted}| \u2212 |{(v, w) | v uncontracted}|\n    // meanDegree is used instead of outDegree+inDegree as if one adjNode is in both directions\n    // only one bucket memory is used. Additionally one shortcut could also stand for two directions.\n    int edgeDifference = shortcutsCount - prepareGraph.getDegree(node);\n\n    // according to the paper do a simple linear combination of the properties to get the priority.\n    return params.edgeDifferenceWeight * edgeDifference +\n            params.originalEdgesCountWeight * originalEdgesCount;\n    // todo: maybe use contracted-neighbors heuristic (contract nodes with lots of contracted neighbors later) as in GH 1.0 again?\n    //       maybe use hierarchy-depths heuristic as in edge-based?\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/routing/ch/NodeBasedNodeContractor.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Adds an element to the heap, the given id must not exceed the size specified in the constructor. Its illegal\n * to push the same id twice (unless it was polled/removed before). To update the value of an id contained in the\n * heap use the {@link #update} method.\n */\n", "func_signal": "public void push(int id, float value)", "code": "{\n    checkIdInRange(id);\n    if (size == max)\n        throw new IllegalStateException(\"Cannot push anymore, the heap is already full. size: \" + size);\n    if (contains(id))\n        throw new IllegalStateException(\"Element with id: \" + id + \" was pushed already, you need to use the update method if you want to change its value\");\n    size++;\n    tree[size] = id;\n    positions[id] = size;\n    vals[size] = value;\n    percolateUp(size);\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/coll/MinHeapWithUpdate.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Reverses the bits in the specified long value and it removes the remaining higher bits. See\n * also http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious\n * <p>\n *\n * @param maxBits the maximum number of recognized bits for reversal\n */\n", "func_signal": "public final long reverse(long value, int maxBits)", "code": "{\n    long res = 0;\n    for (; maxBits > 0; value >>>= 1) {\n        res <<= 1;\n        res |= value & 1;\n        maxBits--;\n        if (value == 0) {\n            res <<= maxBits;\n            break;\n        }\n    }\n    return res;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/util/BitUtil.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Internal parameter. Increase only if you have very large matrices.\n */\n", "func_signal": "public GHMatrixBatchRequester setMaxIterations(int maxIterations)", "code": "{\n    this.maxIterations = maxIterations;\n    return this;\n}", "path": "graphhopper/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java", "commit_date": "2020-05-31 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * @param elements the number of elements that can be stored in this heap. Currently the heap cannot be resized or\n *                 shrunk/trimmed after initial creation. elements-1 is the maximum id that can be stored in this\n *                 heap\n */\n", "func_signal": "public MinHeapWithUpdate(int elements)", "code": "{\n    // we use an offset of one to make the arithmetic a bit simpler/more efficient, the 0th elements are not used!\n    tree = new int[elements + 1];\n    positions = new int[elements + 1];\n    Arrays.fill(positions, NOT_PRESENT);\n    vals = new float[elements + 1];\n    vals[0] = Float.NEGATIVE_INFINITY;\n    this.max = elements;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/coll/MinHeapWithUpdate.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Calculates the PathDetails for a Path. This method will return fast, if there are no calculators.\n *\n * @param path\n * @param weighting\n * @param pathBuilderFactory Generates the relevant PathBuilders\n * @return List of PathDetails for this Path\n */\n", "func_signal": "public static Map<String, List<PathDetail>> calcDetails(Path path, EncodedValueLookup evLookup, Weighting weighting,\n                                                        List<String> requestedPathDetails, PathDetailsBuilderFactory pathBuilderFactory, int previousIndex)", "code": "{\n    if (!path.isFound() || requestedPathDetails.isEmpty())\n        return Collections.emptyMap();\n    List<PathDetailsBuilder> pathBuilders = pathBuilderFactory.createPathDetailsBuilders(requestedPathDetails, evLookup, weighting);\n    if (pathBuilders.isEmpty())\n        return Collections.emptyMap();\n\n    path.forEveryEdge(new PathDetailsFromEdges(pathBuilders, previousIndex));\n\n    Map<String, List<PathDetail>> pathDetails = new HashMap<>(pathBuilders.size());\n    for (PathDetailsBuilder builder : pathBuilders) {\n        Map.Entry<String, List<PathDetail>> entry = builder.build();\n        List<PathDetail> existing = pathDetails.put(entry.getKey(), entry.getValue());\n        if (existing != null)\n            throw new IllegalStateException(\"Some PathDetailsBuilders use duplicate key: \" + entry.getKey());\n    }\n\n    return pathDetails;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/util/details/PathDetailsFromEdges.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Higher order bits comes first in the returned string.\n * <p>\n *\n * @param bits how many bits should be returned.\n */\n", "func_signal": "public String toBitString(long value, int bits)", "code": "{\n    StringBuilder sb = new StringBuilder(bits);\n    long lastBit = 1L << 63;\n    for (int i = 0; i < bits; i++) {\n        if ((value & lastBit) == 0)\n            sb.append('0');\n        else\n            sb.append('1');\n\n        value <<= 1;\n    }\n    return sb.toString();\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/util/BitUtil.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Searches for shortcuts and calls the given handler on each shortcut that is found. The graph is not directly\n * changed by this method.\n * Returns the 'degree' of the given node (disregarding edges from/to already contracted nodes).\n * Note that here the degree is not the total number of adjacent edges, but only the number of incoming edges\n */\n", "func_signal": "private long findAndHandleShortcuts(int node, PrepareShortcutHandler handler)", "code": "{\n    int maxVisitedNodes = getMaxVisitedNodesEstimate();\n    long degree = 0;\n    PrepareGraphEdgeIterator incomingEdges = inEdgeExplorer.setBaseNode(node);\n    // collect outgoing nodes (goal-nodes) only once\n    while (incomingEdges.next()) {\n        int fromNode = incomingEdges.getAdjNode();\n        // do not consider loops at the node that is being contracted\n        if (fromNode == node)\n            continue;\n\n        final double incomingEdgeWeight = incomingEdges.getWeight();\n        // this check is important to prevent calling calcMillis on inaccessible edges and also allows early exit\n        if (Double.isInfinite(incomingEdgeWeight)) {\n            continue;\n        }\n        // collect outgoing nodes (goal-nodes) only once\n        PrepareGraphEdgeIterator outgoingEdges = outEdgeExplorer.setBaseNode(node);\n        // force fresh maps etc as this cannot be determined by from node alone (e.g. same from node but different avoidNode)\n        witnessPathSearcher.clear();\n        degree++;\n        while (outgoingEdges.next()) {\n            int toNode = outgoingEdges.getAdjNode();\n            // do not consider loops at the node that is being contracted\n            if (toNode == node || fromNode == toNode)\n                continue;\n\n            // Limit weight as ferries or forbidden edges can increase local search too much.\n            // If we decrease the correct weight we only explore less and introduce more shortcuts.\n            // I.e. no change to accuracy is made.\n            double existingDirectWeight = incomingEdgeWeight + outgoingEdges.getWeight();\n            if (Double.isInfinite(existingDirectWeight))\n                continue;\n\n            witnessPathSearcher.setWeightLimit(existingDirectWeight);\n            witnessPathSearcher.setMaxVisitedNodes(maxVisitedNodes);\n            witnessPathSearcher.ignoreNode(node);\n\n            dijkstraSW.start();\n            dijkstraCount++;\n            int endNode = witnessPathSearcher.findEndNode(fromNode, toNode);\n            dijkstraSW.stop();\n\n            // compare end node as the limit could force dijkstra to finish earlier\n            if (endNode == toNode && witnessPathSearcher.getWeight(endNode) <= existingDirectWeight)\n                // FOUND witness path, so do not add shortcut\n                continue;\n\n            handler.handleShortcut(fromNode, toNode, existingDirectWeight,\n                    outgoingEdges.getPrepareEdge(), outgoingEdges.getOrigEdgeCount(),\n                    incomingEdges.getPrepareEdge(), incomingEdges.getOrigEdgeCount());\n        }\n    }\n    return degree;\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/routing/ch/NodeBasedNodeContractor.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * The URLs are a bit ugly and so we need to find out which area name a certain lat,lon\n * coordinate has.\n */\n", "func_signal": "private SRTMProvider init()", "code": "{\n    try {\n        String strs[] = {\"Africa\", \"Australia\", \"Eurasia\", \"Islands\", \"North_America\", \"South_America\"};\n        for (String str : strs) {\n            InputStream is = getClass().getResourceAsStream(str + \"_names.txt\");\n            for (String line : Helper.readFile(new InputStreamReader(is, Helper.UTF_CS))) {\n                int lat = Integer.parseInt(line.substring(1, 3));\n                if (line.substring(0, 1).charAt(0) == 'S')\n                    lat = -lat;\n\n                int lon = Integer.parseInt(line.substring(4, 7));\n                if (line.substring(3, 4).charAt(0) == 'W')\n                    lon = -lon;\n\n                int intKey = calcIntKey(lat, lon);\n                String key = areas.put(intKey, str);\n                if (key != null)\n                    throw new IllegalStateException(\"do not overwrite existing! key \" + intKey + \" \" + key + \" vs. \" + str);\n            }\n        }\n        return this;\n    } catch (Exception ex) {\n        throw new IllegalStateException(\"Cannot load area names from classpath\", ex);\n    }\n}", "path": "graphhopper/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java", "commit_date": "2020-03-17 00:00:00", "repo_name": "graphhopper/graphhopper", "stars": 4578, "license": "apache-2.0", "language": "java", "size": 136390}
{"docstring": "/**\n * Apply the specified color tint to the system status bar.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setStatusBarTintColor(int color)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundColor(color);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable or color resource to the system status bar.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setStatusBarTintResource(int res)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundResource(res);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified alpha to all system UI bars.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "public void setTintAlpha(float alpha)", "code": "{\n    setStatusBarAlpha(alpha);\n    setNavigationBarAlpha(alpha);\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the layout inset for any system UI that appears at the bottom of the screen.\n *\n * @return The layout inset (in pixels).\n */\n", "func_signal": "public int getPixelInsetBottom()", "code": "{\n    if (mTranslucentNavBar && isNavigationAtBottom()) {\n        return mNavigationBarHeight;\n    } else {\n        return 0;\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the layout inset for any system UI that appears at the right of the screen.\n *\n * @return The layout inset (in pixels).\n */\n", "func_signal": "public int getPixelInsetRight()", "code": "{\n    if (mTranslucentNavBar && !isNavigationAtBottom()) {\n        return mNavigationBarWidth;\n    } else {\n        return 0;\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified color tint to the system navigation bar.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setNavigationBarTintColor(int color)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundColor(color);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable or color resource to all system UI bars.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setTintResource(int res)", "code": "{\n    setStatusBarTintResource(res);\n    setNavigationBarTintResource(res);\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Enable tinting of the system navigation bar.\n * If the platform does not have soft navigation keys, is running Jelly Bean\n * or earlier, or translucent system UI modes have not been enabled in either\n * the theme or via window flags, then this method does nothing.\n *\n * @param enabled True to enable tinting, false to disable it (default).\n */\n", "func_signal": "public void setNavigationBarTintEnabled(boolean enabled)", "code": "{\n    mNavBarTintEnabled = enabled;\n    if (mNavBarAvailable) {\n        mNavBarTintView.setVisibility(enabled ? View.VISIBLE : View.GONE);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified alpha to the system status bar.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "@TargetApi(11)\npublic void setStatusBarAlpha(float alpha)", "code": "{\n    if (mStatusBarAvailable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        mStatusBarTintView.setAlpha(alpha);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * \u56fe\u7247\u6dfb\u52a0\u6210\u529f\u540e\uff0c\u4fee\u6539\u5f53\u524d\u56fe\u7247\u7684\u9009\u4e2d\u6570\u91cf\n * \u5f53\u8c03\u7528 addSelectedImageItem \u6216 deleteSelectedImageItem \u90fd\u4f1a\u89e6\u53d1\u5f53\u524d\u56de\u8c03\n */\n", "func_signal": "@Override\npublic void onImageSelected(int position, ImageItem item, boolean isAdd)", "code": "{\n    if (imagePicker.getSelectImageCount() > 0) {\n        mBtnOk.setText(getString(R.string.ip_select_complete, imagePicker.getSelectImageCount(), imagePicker.getSelectLimit()));\n    } else {\n        mBtnOk.setText(getString(R.string.ip_complete));\n    }\n\n    if (mCbOrigin.isChecked()) {\n        long size = 0;\n        for (ImageItem imageItem : selectedImages)\n            size += imageItem.size;\n        String fileSize = Formatter.formatFileSize(this, size);\n        mCbOrigin.setText(getString(R.string.ip_origin_size, fileSize));\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/ui/ImagePreviewActivity.java", "commit_date": "2017-09-04 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable to the system navigation bar.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setNavigationBarTintDrawable(Drawable drawable)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundDrawable(drawable);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * \u5355\u51fb\u65f6\uff0c\u9690\u85cf\u5934\u548c\u5c3e\n */\n", "func_signal": "@Override\npublic void onImageSingleTap()", "code": "{\n    if (topBar.getVisibility() == View.VISIBLE) {\n        topBar.setAnimation(AnimationUtils.loadAnimation(this, R.anim.top_out));\n        bottomBar.setAnimation(AnimationUtils.loadAnimation(this, R.anim.fade_out));\n        topBar.setVisibility(View.GONE);\n        bottomBar.setVisibility(View.GONE);\n        tintManager.setStatusBarTintResource(Color.TRANSPARENT);//\u901a\u77e5\u680f\u6240\u9700\u989c\u8272\n        //\u7ed9\u6700\u5916\u5c42\u5e03\u5c40\u52a0\u4e0a\u8fd9\u4e2a\u5c5e\u6027\u8868\u793a\uff0cActivity\u5168\u5c4f\u663e\u793a\uff0c\u4e14\u72b6\u6001\u680f\u88ab\u9690\u85cf\u8986\u76d6\u6389\u3002\n//            if (Build.VERSION.SDK_INT >= 16) content.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);\n    } else {\n        topBar.setAnimation(AnimationUtils.loadAnimation(this, R.anim.top_in));\n        bottomBar.setAnimation(AnimationUtils.loadAnimation(this, R.anim.fade_in));\n        topBar.setVisibility(View.VISIBLE);\n        bottomBar.setVisibility(View.VISIBLE);\n        tintManager.setStatusBarTintResource(R.color.ip_color_primary_dark);//\u901a\u77e5\u680f\u6240\u9700\u989c\u8272\n        //Activity\u5168\u5c4f\u663e\u793a\uff0c\u4f46\u72b6\u6001\u680f\u4e0d\u4f1a\u88ab\u9690\u85cf\u8986\u76d6\uff0c\u72b6\u6001\u680f\u4f9d\u7136\u53ef\u89c1\uff0cActivity\u9876\u7aef\u5e03\u5c40\u90e8\u5206\u4f1a\u88ab\u72b6\u6001\u906e\u4f4f\n//            if (Build.VERSION.SDK_INT >= 16) content.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/ui/ImagePreviewActivity.java", "commit_date": "2017-09-04 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "//\u5f97\u5230ImageOptions\u5bf9\u8c61\n", "func_signal": "@Override\n    public void onCreate()", "code": "{\n        super.onCreate();\n        ImageLoaderConfiguration config = ImageLoaderConfiguration.createDefault(this);\n\n        ImageLoader.getInstance().init(config);     //UniversalImageLoader\u521d\u59cb\u5316\n        x.Ext.init(this);                           //xUtils3\u521d\u59cb\u5316\n    }", "path": "ImagePicker/app/src/main/java/com/lzy/imagepickerdemo/GApp.java", "commit_date": "2017-08-30 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Constructor. Call this in the host activity onCreate method after its\n * content view has been set. You should always create new instances when\n * the host activity is recreated.\n *\n * @param activity The host activity.\n */\n", "func_signal": "@TargetApi(19)\n@SuppressWarnings(\"ResourceType\")\npublic SystemBarTintManager(Activity activity)", "code": "{\n\n    Window win = activity.getWindow();\n    ViewGroup decorViewGroup = (ViewGroup) win.getDecorView();\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // check theme attrs\n        int[] attrs = {android.R.attr.windowTranslucentStatus, android.R.attr.windowTranslucentNavigation};\n        TypedArray a = activity.obtainStyledAttributes(attrs);\n        try {\n            mStatusBarAvailable = a.getBoolean(0, false);\n            mNavBarAvailable = a.getBoolean(1, false);\n        } finally {\n            a.recycle();\n        }\n\n        // check window flags\n        WindowManager.LayoutParams winParams = win.getAttributes();\n        int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;\n        if ((winParams.flags & bits) != 0) {\n            mStatusBarAvailable = true;\n        }\n        bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION;\n        if ((winParams.flags & bits) != 0) {\n            mNavBarAvailable = true;\n        }\n    }\n\n    mConfig = new SystemBarConfig(activity, mStatusBarAvailable, mNavBarAvailable);\n    // device might not have virtual navigation keys\n    if (!mConfig.hasNavigtionBar()) {\n        mNavBarAvailable = false;\n    }\n\n    if (mStatusBarAvailable) {\n        setupStatusBarView(activity, decorViewGroup);\n    }\n    if (mNavBarAvailable) {\n        setupNavBarView(activity, decorViewGroup);\n    }\n\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable to the system status bar.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setStatusBarTintDrawable(Drawable drawable)", "code": "{\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setBackgroundDrawable(drawable);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Enable tinting of the system status bar.\n * If the platform is running Jelly Bean or earlier, or translucent system\n * UI modes have not been enabled in either the theme or via window flags,\n * then this method does nothing.\n *\n * @param enabled True to enable tinting, false to disable it (default).\n */\n", "func_signal": "public void setStatusBarTintEnabled(boolean enabled)", "code": "{\n    mStatusBarTintEnabled = enabled;\n    if (mStatusBarAvailable) {\n        mStatusBarTintView.setVisibility(enabled ? View.VISIBLE : View.GONE);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable or color resource to the system navigation bar.\n *\n * @param res The identifier of the resource.\n */\n", "func_signal": "public void setNavigationBarTintResource(int res)", "code": "{\n    if (mNavBarAvailable) {\n        mNavBarTintView.setBackgroundResource(res);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified drawable to all system UI bars.\n *\n * @param drawable The drawable to use as the background, or null to remove it.\n */\n", "func_signal": "public void setTintDrawable(Drawable drawable)", "code": "{\n    setStatusBarTintDrawable(drawable);\n    setNavigationBarTintDrawable(drawable);\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified alpha to the system navigation bar.\n *\n * @param alpha The alpha to use\n */\n", "func_signal": "@TargetApi(11)\npublic void setNavigationBarAlpha(float alpha)", "code": "{\n    if (mNavBarAvailable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        mNavBarTintView.setAlpha(alpha);\n    }\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Apply the specified color tint to all system UI bars.\n *\n * @param color The color of the background tint.\n */\n", "func_signal": "public void setTintColor(int color)", "code": "{\n    setStatusBarTintColor(color);\n    setNavigationBarTintColor(color);\n}", "path": "ImagePicker/imagepicker/src/main/java/com/lzy/imagepicker/view/SystemBarTintManager.java", "commit_date": "2017-02-27 00:00:00", "repo_name": "jeasonlzy/ImagePicker", "stars": 4283, "license": "apache-2.0", "language": "java", "size": 21059}
{"docstring": "/**\n * Returns the Input/Output metadata for this step.\n */\n", "func_signal": "public StepIOMetaInterface getStepIOMeta()", "code": "{\n  StepIOMetaInterface ioMeta = super.getStepIOMeta( false );\n  if ( ioMeta == null ) {\n\n    ioMeta = new StepIOMeta( true, true, false, false, false, false );\n\n    ioMeta.addStream( new Stream( StreamType.TARGET, null, BaseMessages.getString(\n      PKG, \"JavaFilterMeta.InfoStream.True.Description\" ), StreamIcon.TRUE, null ) );\n    ioMeta.addStream( new Stream( StreamType.TARGET, null, BaseMessages.getString(\n      PKG, \"JavaFilterMeta.InfoStream.False.Description\" ), StreamIcon.FALSE, null ) );\n    setStepIOMeta( ioMeta );\n  }\n\n  return ioMeta;\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/trans/steps/javafilter/JavaFilterMeta.java", "commit_date": "2018-06-07 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @param message\n *          the message.\n * @throws IllegalArgumentException\n *           if input is null or empty.\n */\n", "func_signal": "public static void assertNotBlank( final String input, final String message ) throws IllegalArgumentException", "code": "{\n  if ( StringUtils.isBlank( input ) ) {\n    throw new IllegalArgumentException( message );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @throws IllegalArgumentException\n *           if input is null or empty.\n */\n", "func_signal": "public static void assertNotBlank( final String input ) throws IllegalArgumentException", "code": "{\n  if ( StringUtils.isBlank( input ) ) {\n    throw new IllegalArgumentException( \"Input cannot be null or empty\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @param predicate\n *          predicate to apply.\n * @throws IllegalArgumentException\n *           if predicate rejected input.\n */\n", "func_signal": "public static void assertTrue( final Object input, final Predicate predicate ) throws IllegalArgumentException", "code": "{\n  if ( predicate.evaluate( input ) ) {\n    return;\n  }\n  final StringBuilder builder = new StringBuilder();\n  builder.append( \"Predicate rejected input [predicate=\" );\n  builder.append( predicate );\n  builder.append( \", input=\" );\n  builder.append( StringUtils.abbreviate( String.valueOf( input ), INPUT_MAX_WIDTH ) );\n  builder.append( \"]\" );\n  throw new IllegalArgumentException( builder.toString() );\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param value\n *          value to test.\n * @param message\n *          the message.\n * @throws IllegalArgumentException\n *           if value is null or <= 0.\n */\n", "func_signal": "public static void assertGreaterZero( final Integer value, final String message ) throws IllegalArgumentException", "code": "{\n  if ( value == null || value <= 0 ) {\n    throw new IllegalArgumentException( message );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param value\n *          value to test.\n * @param message\n *          the message.\n * @throws IllegalArgumentException\n *           if value is null or <= 0.\n */\n", "func_signal": "public static void assertGreaterZero( final Double value, final String message ) throws IllegalArgumentException", "code": "{\n  if ( value == null || value <= 0 ) {\n    throw new IllegalArgumentException( message );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param array\n *          collection to test.\n * @throws IllegalArgumentException\n *           if collection is null or empty.\n */\n", "func_signal": "public static void assertNotNullOrEmpty( final Object[] array ) throws IllegalArgumentException", "code": "{\n  if ( array == null || array.length == 0 ) {\n    throw new IllegalArgumentException( \"Array cannot be null or empty\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @param message\n *          the message.\n * @throws IllegalArgumentException\n *           if input is null or empty.\n */\n", "func_signal": "public static void assertNotEmpty( final String input, final String message ) throws IllegalArgumentException", "code": "{\n  if ( StringUtils.isEmpty( input ) ) {\n    throw new IllegalArgumentException( message );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param array\n *          array to test.\n * @param message\n *          the message.\n * @throws IllegalArgumentException\n *           if collection is null or empty.\n */\n", "func_signal": "public static void assertNotNullOrEmpty( final Object[] array, final String message ) throws IllegalArgumentException", "code": "{\n  if ( array == null || array.length == 0 ) {\n    throw new IllegalArgumentException( message );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param tableName\n * @return true if the specified table is a system table\n */\n", "func_signal": "@Override\npublic boolean isSystemTable( String tableName )", "code": "{\n  if ( tableName.startsWith( \"SYS\" ) ) {\n    return true;\n  }\n  return false;\n}", "path": "pentaho-kettle/core/src/main/java/org/pentaho/di/core/database/GuptaDatabaseMeta.java", "commit_date": "2019-10-30 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * Copy information from the meta-data input to the dialog fields.\n */\n", "func_signal": "public void getData()", "code": "{\n  wName.setText( Const.nullToEmpty( jobEntry.getName() ) );\n\n  wServerName.setText( Const.NVL( jobEntry.getServerName(), \"\" ) );\n  wPort.setText( Const.nullToEmpty( jobEntry.getPort() ) );\n  wConnectionTimeOut.setText( Const.NVL( jobEntry.getConnectionTimeOut(), \"\" ) );\n  wResponseTimeOut.setText( Const.nullToEmpty( jobEntry.getResponseTimeOut() ) );\n  wPassword.setText( Const.NVL( jobEntry.getPassword(), \"\" ) );\n  wSenderServerName.setText( Const.NVL( jobEntry.getSenderServerName(), \"\" ) );\n  wSenderServiceName.setText( Const.NVL( jobEntry.getSenderServiceName(), \"\" ) );\n  wMessage.setText( Const.NVL( jobEntry.getMessage(), \"\" ) );\n  wEncryptionMode.setText( JobEntrySendNagiosPassiveCheck.getEncryptionModeDesc( jobEntry.getEncryptionMode() ) );\n  wLevelMode.setText( JobEntrySendNagiosPassiveCheck.getLevelDesc( jobEntry.getLevel() ) );\n\n  wName.selectAll();\n  wName.setFocus();\n}", "path": "pentaho-kettle/ui/src/main/java/org/pentaho/di/ui/job/entries/sendnagiospassivecheck/JobEntrySendNagiosPassiveCheckDialog.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param collection\n *          collection to test.\n * @throws IllegalArgumentException\n *           if collection is null or empty.\n */\n", "func_signal": "public static void assertNotNullOrEmpty( final Collection<?> collection ) throws IllegalArgumentException", "code": "{\n  if ( collection == null || collection.isEmpty() ) {\n    throw new IllegalArgumentException( \"Collection cannot be null or empty\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * Default constructor.\n */\n", "func_signal": "public LucidDBBulkLoaderData()", "code": "{\n  super();\n\n  db = null;\n}", "path": "pentaho-kettle/plugins/lucid-db-bulk-loader/src/org/pentaho/di/ui/trans/steps/luciddbbulkloader/LucidDBBulkLoaderData.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * Read a single row of data from the file...\n *\n * @param doConversions\n *          if you want to do conversions, set to false for the header row.\n * @return a row of data...\n * @throws KettleException\n */\n", "func_signal": "private Object[] readOneRow( boolean doConversions ) throws KettleException", "code": "{\n\n  try {\n\n    // See if we need to call it a day...\n    //\n    if ( meta.isRunningInParallel() ) {\n      if ( getLinesInput() >= data.rowsToRead ) {\n        return null; // We're done. The rest is for the other steps in the cluster\n      }\n    }\n\n    Object[] outputRowData = RowDataUtil.allocateRowData( data.convertRowMeta.size() );\n    int outputIndex = 0;\n\n    // The strategy is as follows...\n    // We read a block of byte[] from the file.\n    //\n    // Then we scan that block of data.\n    // We keep a byte[] that we extend if needed..\n    // At the end of the block we read another, etc.\n    //\n    // Let's start by looking where we left off reading.\n    //\n\n    if ( data.stopReading ) {\n      return null;\n    }\n\n    FixedFileInputField[] fieldDefinitions = meta.getFieldDefinition();\n    for ( int i = 0; i < fieldDefinitions.length; i++ ) {\n\n      int fieldWidth = fieldDefinitions[i].getWidth();\n      data.endBuffer = data.startBuffer + fieldWidth;\n      if ( data.endBuffer > data.bufferSize ) {\n        // Oops, we need to read more data...\n        // Better resize this before we read other things in it...\n        //\n        data.resizeByteBuffer();\n\n        // Also read another chunk of data, now that we have the space for it...\n        // Ignore EOF, there might be other stuff in the buffer.\n        //\n        data.readBufferFromFile();\n      }\n\n      // re-verify the buffer after we tried to read extra data from file...\n      //\n      if ( data.endBuffer > data.bufferSize ) {\n        // still a problem?\n        // We hit an EOF and are trying to read beyond the EOF...\n\n        // If we are on the first field and there\n        // is nothing left in the buffer, don't return\n        // a row because we're done.\n        if ( ( 0 == i ) && data.bufferSize <= 0 ) {\n          return null;\n        }\n\n        // This is the last record of data in the file.\n        data.stopReading = true;\n\n        // Just take what's left for the current field.\n        fieldWidth = data.bufferSize;\n      }\n      byte[] field = new byte[fieldWidth];\n      System.arraycopy( data.byteBuffer, data.startBuffer, field, 0, fieldWidth );\n\n      if ( doConversions ) {\n        if ( meta.isLazyConversionActive() ) {\n          outputRowData[outputIndex++] = field;\n        } else {\n          // We're not lazy so we convert the data right here and now.\n          // The convert object uses binary storage as such we just have to ask the native type from it.\n          // That will do the actual conversion.\n          //\n          ValueMetaInterface sourceValueMeta = data.convertRowMeta.getValueMeta( outputIndex );\n          outputRowData[outputIndex++] = sourceValueMeta.convertBinaryStringToNativeType( field );\n        }\n      } else {\n        outputRowData[outputIndex++] = null; // nothing for the header, no conversions here.\n      }\n\n      // OK, onto the next field...\n      //\n      data.startBuffer = data.endBuffer;\n    }\n\n    // Now that we have all the data, see if there are any linefeed characters to remove from the buffer...\n    //\n    if ( meta.isLineFeedPresent() ) {\n\n      data.endBuffer += 2;\n\n      if ( data.endBuffer >= data.bufferSize ) {\n        // Oops, we need to read more data...\n        // Better resize this before we read other things in it...\n        //\n        data.resizeByteBuffer();\n\n        // Also read another chunk of data, now that we have the space for it...\n        data.readBufferFromFile();\n      }\n\n      // CR + Line feed in the worst case.\n      //\n      if ( data.byteBuffer[data.startBuffer] == '\\n' || data.byteBuffer[data.startBuffer] == '\\r' ) {\n\n        data.startBuffer++;\n\n        if ( data.byteBuffer[data.startBuffer] == '\\n' || data.byteBuffer[data.startBuffer] == '\\r' ) {\n\n          data.startBuffer++;\n        }\n      }\n      data.endBuffer = data.startBuffer;\n    }\n\n    incrementLinesInput();\n    return outputRowData;\n  } catch ( Exception e ) {\n    throw new KettleFileException( \"Exception reading line using NIO: \" + e.toString(), e );\n  }\n\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/trans/steps/fixedinput/FixedInput.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n<div id=\"mindtouch\">\n    <h1>/kettle/stopJob</h1>\n    <a name=\"GET\"></a>\n    <h2>GET</h2>\n    <p>Stops job execution on Carte server.</p>\n\n    <p><b>Example Request:</b><br />\n    <pre function=\"syntax.xml\">\n    GET /kettle/stopJob/?name=dummy_job&xml=Y\n    </pre>\n\n    </p>\n    <h3>Parameters</h3>\n    <table class=\"pentaho-table\">\n    <tbody>\n    <tr>\n      <th>name</th>\n      <th>description</th>\n      <th>type</th>\n    </tr>\n    <tr>\n    <td>name</td>\n    <td>Name of the job to be stopped.</td>\n    <td>query</td>\n    </tr>\n    <tr>\n    <td>xml</td>\n    <td>Boolean flag which sets the output format required. Use <code>Y</code> to receive XML response.</td>\n    <td>boolean, optional</td>\n    </tr>\n    <tr>\n    <td>id</td>\n    <td>Carte job ID of the job to be stopped. This parameter is optional when xml=Y is used.</td>\n    <td>query, optional</td>\n    </tr>\n    </tbody>\n    </table>\n\n  <h3>Response Body</h3>\n\n  <table class=\"pentaho-table\">\n    <tbody>\n      <tr>\n        <td align=\"right\">text:</td>\n        <td>HTML</td>\n      </tr>\n      <tr>\n        <td align=\"right\">media types:</td>\n        <td>text/xml, text/html</td>\n      </tr>\n    </tbody>\n  </table>\n  <p>Response XML or HTML containing operation result. When using xml=Y <code>result</code> field indicates whether\n  operation was successful (<code>OK</code>) or not (<code>ERROR</code>).</p>\n\n    <p><b>Example Response:</b></p>\n  <pre function=\"syntax.xml\">\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <webresult>\n    <result>OK</result>\n    <message>Job &#x5b;dummy_job&#x5d; stop requested.</message>\n    <id/>\n  </webresult>\n  </pre>\n\n    <h3>Status Codes</h3>\n    <table class=\"pentaho-table\">\n  <tbody>\n    <tr>\n      <th>code</th>\n      <th>description</th>\n    </tr>\n    <tr>\n      <td>200</td>\n      <td>Request was processed.</td>\n    </tr>\n    <tr>\n      <td>500</td>\n      <td>Internal server error occurs during request processing.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n  */\n", "func_signal": "public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException,\n  IOException", "code": "{\n  if ( isJettyMode() && !request.getContextPath().startsWith( CONTEXT_PATH ) ) {\n    return;\n  }\n\n  if ( log.isDebug() ) {\n    logDebug( BaseMessages.getString( PKG, \"StopJobServlet.log.StopJobRequested\" ) );\n  }\n\n  String jobName = request.getParameter( \"name\" );\n  String id = request.getParameter( \"id\" );\n  boolean useXML = \"Y\".equalsIgnoreCase( request.getParameter( \"xml\" ) );\n\n  PrintWriter out = response.getWriter();\n  try {\n    if ( useXML ) {\n      response.setContentType( \"text/xml\" );\n      response.setCharacterEncoding( Const.XML_ENCODING );\n      out.print( XMLHandler.getXMLHeader( Const.XML_ENCODING ) );\n    } else {\n      response.setContentType( \"text/html;charset=UTF-8\" );\n      out.println( \"<HTML>\" );\n      out.println( \"<HEAD>\" );\n      out.println( \"<TITLE>Stop job</TITLE>\" );\n      out.println( \"<META http-equiv=\\\"Refresh\\\" content=\\\"2;url=\"\n        + convertContextPath( GetJobStatusServlet.CONTEXT_PATH ) + \"?name=\"\n        + URLEncoder.encode( jobName, \"UTF-8\" ) + \"\\\">\" );\n      out.println( \"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\" );\n      out.println( \"</HEAD>\" );\n      out.println( \"<BODY>\" );\n    }\n\n    // ID is optional...\n    //\n    Job job;\n    CarteObjectEntry entry;\n    if ( Utils.isEmpty( id ) ) {\n      // get the first job that matches...\n      //\n      entry = getJobMap().getFirstCarteObjectEntry( jobName );\n      if ( entry == null ) {\n        job = null;\n      } else {\n        id = entry.getId();\n        job = getJobMap().getJob( entry );\n      }\n    } else {\n      // Take the ID into account!\n      //\n      entry = new CarteObjectEntry( jobName, id );\n      job = getJobMap().getJob( entry );\n    }\n\n    if ( job != null ) {\n      job.stopAll();\n\n      String message = BaseMessages.getString( PKG, \"JobStatusServlet.Log.JobStopRequested\", jobName );\n      if ( useXML ) {\n        out.println( new WebResult( WebResult.STRING_OK, message ).getXML() );\n      } else {\n        out.println( \"<H1>\" + Encode.forHtml( message ) + \"</H1>\" );\n        out.println( \"<a href=\\\"\"\n          + convertContextPath( GetJobStatusServlet.CONTEXT_PATH ) + \"?name=\"\n          + URLEncoder.encode( jobName, \"UTF-8\" ) + \"&id=\" + URLEncoder.encode( id, \"UTF-8\" ) + \"\\\">\"\n          + BaseMessages.getString( PKG, \"JobStatusServlet.BackToJobStatusPage\" ) + \"</a><p>\" );\n      }\n    } else {\n      String message = BaseMessages.getString( PKG, \"StopJobServlet.Log.CoundNotFindJob\", jobName );\n      if ( useXML ) {\n        out.println( new WebResult( WebResult.STRING_ERROR, message ).getXML() );\n      } else {\n        out.println( \"<H1>\" + Encode.forHtml( message ) + \"</H1>\" );\n        out.println( \"<a href=\\\"\"\n          + convertContextPath( GetStatusServlet.CONTEXT_PATH ) + \">\"\n          + BaseMessages.getString( PKG, \"TransStatusServlet.BackToStatusPage\" ) + \"</a><p>\" );\n        response.setStatus( HttpServletResponse.SC_BAD_REQUEST );\n      }\n    }\n  } catch ( Exception ex ) {\n    if ( useXML ) {\n      out.println( new WebResult( WebResult.STRING_ERROR, Const.getStackTracker( ex ) ).getXML() );\n    } else {\n      out.println( \"<p>\" );\n      out.println( \"<pre>\" );\n      out.println( Encode.forHtml( Const.getStackTracker( ex ) ) );\n      out.println( \"</pre>\" );\n      response.setStatus( HttpServletResponse.SC_BAD_REQUEST );\n    }\n  }\n\n  if ( !useXML ) {\n    out.println( \"<p>\" );\n    out.println( \"</BODY>\" );\n    out.println( \"</HTML>\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/www/StopJobServlet.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @throws IllegalArgumentException\n *           if input isn't null.\n */\n", "func_signal": "public static void assertNull( final Object input ) throws IllegalArgumentException", "code": "{\n  if ( input != null ) {\n    throw new IllegalArgumentException( \"Input must be null\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param message\n *          message.\n * @param bool\n *          boolean to test.\n * @param args\n *          arguments to set, optional\n * @throws IllegalArgumentException\n *           if bool is false.\n */\n", "func_signal": "public static void assertTrue( final boolean bool, final String message, final Object... args ) throws IllegalArgumentException", "code": "{\n  if ( bool ) {\n    return;\n  }\n  if ( args != null && args.length > 0 ) {\n    throw new IllegalArgumentException( MessageFormat.format( message, args ) );\n  }\n  throw new IllegalArgumentException( message );\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @throws IllegalArgumentException\n *           if input is null.\n */\n", "func_signal": "public static void assertNotNull( final Object input ) throws IllegalArgumentException", "code": "{\n  if ( input == null ) {\n    throw new IllegalArgumentException( \"Input cannot be null\" );\n  }\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * Test that several plugin jar can share the same classloader.\n */\n", "func_signal": "@Test\npublic void testPluginClassloaderGroup() throws Exception", "code": "{\n  PluginRegistry registry = PluginRegistry.getInstance();\n  PluginInterface mockPlugin1 = mock( PluginInterface.class );\n  when( mockPlugin1.getIds() ).thenReturn( new String[] { \"mockPlugin\"} );\n  when( mockPlugin1.matches( \"mockPlugin\" ) ).thenReturn( true );\n  when( mockPlugin1.getName() ).thenReturn( \"mockPlugin\" );\n  when( mockPlugin1.getClassMap() ).thenReturn( new HashMap<Class<?>, String>() {{\n      put( PluginTypeInterface.class, String.class.getName() );\n    }} );\n  when( mockPlugin1.getClassLoaderGroup() ).thenReturn( \"groupPlugin\" );\n  doReturn( BasePluginType.class ).when( mockPlugin1 ).getPluginType();\n\n  PluginInterface mockPlugin2 = mock( PluginInterface.class );\n  when( mockPlugin2.getIds() ).thenReturn( new String[] { \"mockPlugin2\"} );\n  when( mockPlugin2.matches( \"mockPlugin2\" ) ).thenReturn( true );\n  when( mockPlugin2.getName() ).thenReturn( \"mockPlugin2\" );\n  when( mockPlugin2.getClassMap() ).thenReturn( new HashMap<Class<?>, String>() {{\n      put( PluginTypeInterface.class, Integer.class.getName() );\n    }} );\n  when( mockPlugin2.getClassLoaderGroup() ).thenReturn( \"groupPlugin\" );\n  doReturn( BasePluginType.class ).when( mockPlugin2 ).getPluginType();\n\n  registry.registerPlugin( BasePluginType.class, mockPlugin1 );\n  registry.registerPlugin( BasePluginType.class, mockPlugin2 );\n\n  // test they share the same classloader\n  ClassLoader ucl = registry.getClassLoader( mockPlugin1 );\n  assertEquals( ucl, registry.getClassLoader( mockPlugin2 ) );\n\n  // test removing a shared plugin creates a new classloader\n  registry.removePlugin( BasePluginType.class, mockPlugin2 );\n  assertNotEquals( ucl, registry.getClassLoader( mockPlugin1 ) );\n}", "path": "pentaho-kettle/core/src/test/java/org/pentaho/di/core/plugins/PluginRegistryUnitTest.java", "commit_date": "2018-06-22 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * @param input\n *          input to test.\n * @param predicate\n *          predicate to apply.\n * @throws IllegalArgumentException\n *           if predicate didn't rejected input.\n */\n", "func_signal": "public static void assertFalse( final Object input, final Predicate predicate ) throws IllegalArgumentException", "code": "{\n  if ( !predicate.evaluate( input ) ) {\n    return;\n  }\n  final StringBuilder builder = new StringBuilder();\n  builder.append( \"Predicate didn't rejected input [predicate=\" );\n  builder.append( predicate );\n  builder.append( \", input=\" );\n  builder.append( StringUtils.abbreviate( String.valueOf( input ), INPUT_MAX_WIDTH ) );\n  builder.append( \"]\" );\n  throw new IllegalArgumentException( builder.toString() );\n}", "path": "pentaho-kettle/engine/src/main/java/org/pentaho/di/core/util/Assert.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "pentaho/pentaho-kettle", "stars": 7244, "license": "apache-2.0", "language": "java", "size": 640645}
{"docstring": "/**\n * Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according\n * to <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#Main%20Attributes\">\n * JAR File Specification</a>. If {@code manifest} is null, it means the jar file has no\n * manifest, and an empty set will be returned.\n */\n", "func_signal": "private static Set<URI> getClassPathFromManifest(File jarFile, Manifest manifest)", "code": "{\n    if (manifest == null)\n        return new HashSet<>();\n\n    HashSet<URI> s = new HashSet<>();\n    String classpathAttribute = manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH.toString());\n    if (classpathAttribute != null) {\n        for (String path : classpathAttribute.split(\"\\\\s\")) {\n            if (path != null && path.trim().length() > 0) {\n                URI uri;\n                try {\n                    uri = getClassPathEntry(jarFile, path.trim());\n                } catch (URISyntaxException e) {\n                    // Ignore bad entry\n                    // logger.warning(\"Invalid Class-Path entry: \" + path);\n                    continue;\n                }\n                s.add(uri);\n            }\n        }\n    }\n    return s;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/common/reflection/ClassLoaderUtil.java", "commit_date": "2018-10-29 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Returns a collection containing those strands that may be\n * waiting on the given condition associated with this\n * synchronizer.  Because the actual set of strands may change\n * dynamically while constructing this result, the returned\n * collection is only a best-effort estimate. The elements of the\n * returned collection are in no particular order.\n *\n * @param condition the condition\n * @return the collection of strands\n * @throws IllegalMonitorStateException if exclusive synchronization\n *         is not held\n * @throws IllegalArgumentException if the given condition is\n *         not associated with this synchronizer\n * @throws NullPointerException if the condition is null\n */\n", "func_signal": "public final Collection<Strand> getWaitingStrands(ConditionObject condition)", "code": "{\n    if (!owns(condition))\n        throw new IllegalArgumentException(\"Not owner\");\n    return condition.getWaitingStrands();\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Sets head of queue to be node, thus dequeuing. Called only by\n * acquire methods.  Also nulls out unused fields for sake of GC\n * and to suppress unnecessary signals and traversals.\n *\n * @param node the node\n */\n", "func_signal": "private void setHead(Node node)", "code": "{\n    head = node;\n    node.strand = null;\n    node.prev = null;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Returns a collection containing strands that may be waiting to\n * acquire in exclusive mode. This has the same properties\n * as {@link #getQueuedStrands} except that it only returns\n * those strands waiting due to an exclusive acquire.\n *\n * @return the collection of strands\n */\n", "func_signal": "public final Collection<Strand> getExclusiveQueuedStrands()", "code": "{\n    ArrayList<Strand> list = new ArrayList<Strand>();\n    for (Node p = tail; p != null; p = p.prev) {\n        if (!p.isShared()) {\n            Strand t = p.strand;\n            if (t != null)\n                list.add(t);\n        }\n    }\n    return list;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Creates a new {@code ProxyServerActor}\n *\n * @param name              the actor's name (may be null)\n * @param strand            the actor's strand (may be null)\n * @param mailboxConfig     this actor's mailbox settings.\n * @param callOnVoidMethods whether calling void methods will block until they have completed execution\n * @param target            the object implementing the actor's behaviors, on which the exposed interface methods will be called.\n * @param interfaces        the interfaces this actor's {@link ActorRef} will implement; {@code target} must implement all these interfaces.\n */\n", "func_signal": "public ProxyServerActor(String name, Strand strand, MailboxConfig mailboxConfig, boolean callOnVoidMethods, Object target, Class<?>[] interfaces)", "code": "{\n    super(name, null, 0L, null, strand, mailboxConfig);\n    this.callOnVoidMethods = callOnVoidMethods;\n    this.target = ActorLoader.getReplacementFor(target != null ? target : this);\n    this.interfaces = interfaces != null ? Arrays.copyOf(interfaces, interfaces.length) : this.target.getClass().getInterfaces();\n    if (this.interfaces == null)\n        throw new IllegalArgumentException(\"No interfaces provided, and target of class \" + this.target.getClass().getName() + \" implements no interfaces\");\n}", "path": "quasar/quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/ProxyServerActor.java", "commit_date": "2018-10-28 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Release action for shared mode -- signals successor and ensures\n * propagation. (Note: For exclusive mode, release just amounts\n * to calling unparkSuccessor of head if it needs signal.)\n */\n", "func_signal": "private void doReleaseShared()", "code": "{\n    /*\n     * Ensure that a release propagates, even if there are other\n     * in-progress acquires/releases.  This proceeds in the usual\n     * way of trying to unparkSuccessor of head if it needs\n     * signal. But if it does not, status is set to PROPAGATE to\n     * ensure that upon release, propagation continues.\n     * Additionally, we must loop in case a new node is added\n     * while we are doing this. Also, unlike other uses of\n     * unparkSuccessor, we need to know if CAS to reset status\n     * fails, if so rechecking.\n     */\n    for (;;) {\n        Node h = head;\n        if (h != null && h != tail) {\n            int ws = h.waitStatus;\n            if (ws == Node.SIGNAL) {\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;            // loop to recheck cases\n                unparkSuccessor(h);\n            }\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Acquires in shared mode, ignoring interrupts.  Implemented by\n * first invoking at least once {@link #tryAcquireShared},\n * returning on success.  Otherwise the strand is queued, possibly\n * repeatedly blocking and unblocking, invoking {@link\n * #tryAcquireShared} until success.\n *\n * @param arg the acquire argument.  This value is conveyed to\n *        {@link #tryAcquireShared} but is otherwise uninterpreted\n *        and can represent anything you like.\n */\n", "func_signal": "@Suspendable\npublic final void acquireShared(long arg)", "code": "{\n    try {\n        if (tryAcquireShared(arg) < 0)\n            doAcquireShared(arg);\n    } catch (SuspendExecution e) {\n        throw new AssertionError();\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Queries whether any strands have been waiting to acquire longer\n * than the current strand.\n *\n * <p>An invocation of this method is equivalent to (but may be\n * more efficient than):\n *  <pre> {@code\n * getFirstQueuedStrand() != Strand.currentStrand() &&\n * hasQueuedStrands()}</pre>\n *\n * <p>Note that because cancellations due to interrupts and\n * timeouts may occur at any time, a {@code true} return does not\n * guarantee that some other strand will acquire before the current\n * strand.  Likewise, it is possible for another strand to win a\n * race to enqueue after this method has returned {@code false},\n * due to the queue being empty.\n *\n * <p>This method is designed to be used by a fair synchronizer to\n * avoid <a href=\"AbstractQueuedSynchronizer.html#barging\">barging</a>.\n * Such a synchronizer's {@link #tryAcquire} method should return\n * {@code false}, and its {@link #tryAcquireShared} method should\n * return a negative value, if this method returns {@code true}\n * (unless this is a reentrant acquire).  For example, the {@code\n * tryAcquire} method for a fair, reentrant, exclusive mode\n * synchronizer might look like this:\n *\n *  <pre> {@code\n * protected boolean tryAcquire(int arg) {\n *   if (isHeldExclusively()) {\n *     // A reentrant acquire; increment hold count\n *     return true;\n *   } else if (hasQueuedPredecessors()) {\n *     return false;\n *   } else {\n *     // try to acquire normally\n *   }\n * }}</pre>\n *\n * @return {@code true} if there is a queued strand preceding the\n *         current strand, and {@code false} if the current strand\n *         is at the head of the queue or the queue is empty\n * @since 1.7\n */\n", "func_signal": "public final boolean hasQueuedPredecessors()", "code": "{\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // strand is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    return h != t &&\n        ((s = h.next) == null || s.strand != Strand.currentStrand());\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Implements timed condition wait.\n * <ol>\n * <li> If current strand is interrupted, throw InterruptedException.\n * <li> Save lock state returned by {@link #getState}.\n * <li> Invoke {@link #release} with saved state as argument,\n *      throwing IllegalMonitorStateException if it fails.\n * <li> Block until signalled, interrupted, or timed out.\n * <li> Reacquire by invoking specialized version of\n *      {@link #acquire} with saved state as argument.\n * <li> If interrupted while blocked in step 4, throw InterruptedException.\n * <li> If timed out while blocked in step 4, return false, else true.\n * </ol>\n */\n", "func_signal": "@Suspendable\npublic final boolean await(long time, TimeUnit unit)\n        throws InterruptedException", "code": "{\n    try {\n        long nanosTimeout = unit.toNanos(time);\n        if (Strand.interrupted())\n            throw new InterruptedException();\n        Node node = addConditionWaiter();\n        long savedState = fullyRelease(node);\n        final long deadline = System.nanoTime() + nanosTimeout;\n        boolean timedout = false;\n        int interruptMode = 0;\n        while (!isOnSyncQueue(node)) {\n            if (nanosTimeout <= 0L) {\n                timedout = transferAfterCancelledWait(node);\n                break;\n            }\n            if (nanosTimeout >= spinForTimeoutThreshold)\n                Strand.parkNanos(this, nanosTimeout);\n            if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                break;\n            nanosTimeout = deadline - System.nanoTime();\n        }\n        if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n            interruptMode = REINTERRUPT;\n        if (node.nextWaiter != null)\n            unlinkCancelledWaiters();\n        if (interruptMode != 0)\n            reportInterruptAfterWait(interruptMode);\n        return !timedout;\n    } catch (SuspendExecution e) {\n        throw new AssertionError();\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Adds a new waiter to wait queue.\n * @return its new wait node\n */\n", "func_signal": "private Node addConditionWaiter()", "code": "{\n    Node t = lastWaiter;\n    // If lastWaiter is cancelled, clean out.\n    if (t != null && t.waitStatus != Node.CONDITION) {\n        unlinkCancelledWaiters();\n        t = lastWaiter;\n    }\n    Node node = new Node(Strand.currentStrand(), Node.CONDITION);\n    if (t == null)\n        firstWaiter = node;\n    else\n        t.nextWaiter = node;\n    lastWaiter = node;\n    return node;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Returns a string identifying this synchronizer, as well as its state.\n * The state, in brackets, includes the String {@code \"State =\"}\n * followed by the current value of {@link #getState}, and either\n * {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n * queue is empty.\n *\n * @return a string identifying this synchronizer, as well as its state\n */\n", "func_signal": "public String toString()", "code": "{\n    long s = getState();\n    String q  = hasQueuedStrands() ? \"non\" : \"\";\n    return super.toString() +\n        \"[State = \" + s + \", \" + q + \"empty queue]\";\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Implements uninterruptible condition wait.\n * <ol>\n * <li> Save lock state returned by {@link #getState}.\n * <li> Invoke {@link #release} with saved state as argument,\n *      throwing IllegalMonitorStateException if it fails.\n * <li> Block until signalled.\n * <li> Reacquire by invoking specialized version of\n *      {@link #acquire} with saved state as argument.\n * </ol>\n */\n", "func_signal": "@Suspendable\npublic final void awaitUninterruptibly()", "code": "{\n    try {\n        Node node = addConditionWaiter();\n        long savedState = fullyRelease(node);\n        boolean interrupted = false;\n        while (!isOnSyncQueue(node)) {\n            Strand.park(this);\n            if (Strand.interrupted())\n                interrupted = true;\n        }\n        if (acquireQueued(node, savedState) || interrupted)\n            selfInterrupt();\n    } catch (SuspendExecution e) {\n        throw new AssertionError();\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Implements timed condition wait.\n * <ol>\n * <li> If current strand is interrupted, throw InterruptedException.\n * <li> Save lock state returned by {@link #getState}.\n * <li> Invoke {@link #release} with saved state as argument,\n *      throwing IllegalMonitorStateException if it fails.\n * <li> Block until signalled, interrupted, or timed out.\n * <li> Reacquire by invoking specialized version of\n *      {@link #acquire} with saved state as argument.\n * <li> If interrupted while blocked in step 4, throw InterruptedException.\n * </ol>\n */\n", "func_signal": "@Suspendable\npublic final long awaitNanos(long nanosTimeout)\n        throws InterruptedException", "code": "{\n    try {\n        if (Strand.interrupted())\n            throw new InterruptedException();\n        Node node = addConditionWaiter();\n        long savedState = fullyRelease(node);\n        final long deadline = System.nanoTime() + nanosTimeout;\n        int interruptMode = 0;\n        while (!isOnSyncQueue(node)) {\n            if (nanosTimeout <= 0L) {\n                transferAfterCancelledWait(node);\n                break;\n            }\n            if (nanosTimeout >= spinForTimeoutThreshold)\n                Strand.parkNanos(this, nanosTimeout);\n            if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                break;\n            nanosTimeout = deadline - System.nanoTime();\n        }\n        if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n            interruptMode = REINTERRUPT;\n        if (node.nextWaiter != null)\n            unlinkCancelledWaiters();\n        if (interruptMode != 0)\n            reportInterruptAfterWait(interruptMode);\n        return deadline - System.nanoTime();\n    } catch (SuspendExecution e) {\n        throw new AssertionError();\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Implements interruptible condition wait.\n * <ol>\n * <li> If current strand is interrupted, throw InterruptedException.\n * <li> Save lock state returned by {@link #getState}.\n * <li> Invoke {@link #release} with saved state as argument,\n *      throwing IllegalMonitorStateException if it fails.\n * <li> Block until signalled or interrupted.\n * <li> Reacquire by invoking specialized version of\n *      {@link #acquire} with saved state as argument.\n * <li> If interrupted while blocked in step 4, throw InterruptedException.\n * </ol>\n */\n", "func_signal": "public final void await() throws InterruptedException", "code": "{\n    try {\n        if (Strand.interrupted())\n            throw new InterruptedException();\n        Node node = addConditionWaiter();\n        long savedState = fullyRelease(node);\n        int interruptMode = 0;\n        while (!isOnSyncQueue(node)) {\n            Strand.park(this);\n            if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                break;\n        }\n        if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n            interruptMode = REINTERRUPT;\n        if (node.nextWaiter != null) // clean up if cancelled\n            unlinkCancelledWaiters();\n        if (interruptMode != 0)\n            reportInterruptAfterWait(interruptMode);\n    } catch (SuspendExecution e) {\n        throw new AssertionError();\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Throws InterruptedException, reinterrupts current strand, or\n * does nothing, depending on mode.\n */\n", "func_signal": "private void reportInterruptAfterWait(int interruptMode)\n    throws InterruptedException", "code": "{\n    if (interruptMode == THROW_IE)\n        throw new InterruptedException();\n    else if (interruptMode == REINTERRUPT)\n        selfInterrupt();\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Acquires in exclusive timed mode.\n *\n * @param arg the acquire argument\n * @param nanosTimeout max wait time\n * @return {@code true} if acquired\n */\n", "func_signal": "private boolean doAcquireNanos(long arg, long nanosTimeout)\n        throws InterruptedException, SuspendExecution", "code": "{\n    if (nanosTimeout <= 0L)\n        return false;\n    final long deadline = System.nanoTime() + nanosTimeout;\n    final Node node = addWaiter(Node.EXCLUSIVE);\n    boolean failed = true;\n    try {\n        for (;;) {\n            final Node p = node.predecessor();\n            if (p == head && tryAcquire(arg)) {\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return true;\n            }\n            nanosTimeout = deadline - System.nanoTime();\n            if (nanosTimeout <= 0L)\n                return false;\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                nanosTimeout > spinForTimeoutThreshold)\n                Strand.parkNanos(this, nanosTimeout);\n            if (Strand.interrupted())\n                throw new InterruptedException();\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Attempts to acquire in exclusive mode, aborting if interrupted,\n * and failing if the given timeout elapses.  Implemented by first\n * checking interrupt status, then invoking at least once {@link\n * #tryAcquire}, returning on success.  Otherwise, the strand is\n * queued, possibly repeatedly blocking and unblocking, invoking\n * {@link #tryAcquire} until success or the strand is interrupted\n * or the timeout elapses.  This method can be used to implement\n * method {@link Lock#tryLock(long, TimeUnit)}.\n *\n * @param arg the acquire argument.  This value is conveyed to\n *        {@link #tryAcquire} but is otherwise uninterpreted and\n *        can represent anything you like.\n * @param nanosTimeout the maximum number of nanoseconds to wait\n * @return {@code true} if acquired; {@code false} if timed out\n * @throws InterruptedException if the current strand is interrupted\n */\n", "func_signal": "public final boolean tryAcquireNanos(long arg, long nanosTimeout)\n        throws InterruptedException, SuspendExecution", "code": "{\n    if (Strand.interrupted())\n        throw new InterruptedException();\n    return tryAcquire(arg) ||\n        doAcquireNanos(arg, nanosTimeout);\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Returns true if node is on sync queue by searching backwards from tail.\n * Called only when needed by isOnSyncQueue.\n * @return true if present\n */\n", "func_signal": "private boolean findNodeFromTail(Node node)", "code": "{\n    Node t = tail;\n    for (;;) {\n        if (t == node)\n            return true;\n        if (t == null)\n            return false;\n        t = t.prev;\n    }\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Returns an estimate of the number of strands waiting to\n * acquire.  The value is only an estimate because the number of\n * strands may change dynamically while this method traverses\n * internal data structures.  This method is designed for use in\n * monitoring system state, not for synchronization\n * control.\n *\n * @return the estimated number of strands waiting to acquire\n */\n", "func_signal": "public final int getQueueLength()", "code": "{\n    int n = 0;\n    for (Node p = tail; p != null; p = p.prev) {\n        if (p.strand != null)\n            ++n;\n    }\n    return n;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Checks and updates status for a node that failed to acquire.\n * Returns true if strand should block. This is the main signal\n * control in all acquire loops.  Requires that pred == node.prev.\n *\n * @param pred node's predecessor holding status\n * @param node the node\n * @return {@code true} if strand should block\n */\n", "func_signal": "private static boolean shouldParkAfterFailedAcquire(Node pred, Node node)", "code": "{\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL)\n        /*\n         * This node has already set status asking a release\n         * to signal it, so it can safely park.\n         */\n        return true;\n    if (ws > 0) {\n        /*\n         * Predecessor was cancelled. Skip over predecessors and\n         * indicate retry.\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        /*\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\n         * need a signal, but don't park yet.  Caller will need to\n         * retry to make sure it cannot acquire before parking.\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}", "path": "quasar/quasar-core/src/main/java/co/paralleluniverse/strands/concurrent/AbstractQueuedLongSynchronizer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "puniverse/quasar", "stars": 4536, "license": "other", "language": "java", "size": 80585}
{"docstring": "/**\n * Removes the index field type data for the deleted index.\n * @param event index deletion event\n */\n", "func_signal": "@Subscribe\npublic void handleIndexDeletion(final IndicesDeletedEvent event)", "code": "{\n    event.indices().forEach(indexName -> {\n        LOG.debug(\"Removing field type information for deleted index <{}>\", indexName);\n        dbService.delete(indexName);\n    });\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Each message will be written to one or more outputs.\n * <p>\n * The default output is always being used for every message, but optionally the message can be routed to additional\n * outputs, currently based on the stream outputs that are configured in the system.\n * </p>\n * <p>\n * The stream outputs are time limited so one bad output does not impact throughput too much. Essentially this means\n * that the work of writing to the outputs is performed, but the writer threads will not wait forever for stream\n * outputs to finish their work. <b>This might lead to increased memory usage!</b>\n * </p>\n * <p>\n * The default output, however, is allowed to block and is not subject to time limiting. This is important because it\n * can exert back pressure on the processing pipeline this way, making sure we don't run into excessive heap usage.\n * </p>\n *\n * @param event the message to write to outputs\n * @throws Exception\n */\n", "func_signal": "@Override\npublic void onEvent(MessageEvent event) throws Exception", "code": "{\n    incomingMessages.mark();\n\n    final Message msg = event.getMessage();\n    if (msg == null) {\n        LOG.debug(\"Skipping null message.\");\n        return;\n    }\n    LOG.debug(\"Processing message <{}> from OutputBuffer.\", msg.getId());\n\n    final Set<MessageOutput> messageOutputs = outputRouter.getStreamOutputsForMessage(msg);\n    msg.recordCounter(serverStatus, \"matched-outputs\", messageOutputs.size());\n\n    final Future<?> defaultOutputCompletion = processMessage(msg, defaultMessageOutput);\n\n    final CountDownLatch streamOutputsDoneSignal = new CountDownLatch(messageOutputs.size());\n    for (final MessageOutput output : messageOutputs) {\n        processMessage(msg, output, streamOutputsDoneSignal);\n    }\n\n    // Wait until all writer threads for stream outputs have finished or timeout is reached.\n    if (!streamOutputsDoneSignal.await(configuration.getOutputModuleTimeout(), TimeUnit.MILLISECONDS)) {\n        LOG.warn(\"Timeout reached. Not waiting any longer for stream output writer threads to complete.\");\n    }\n\n    // now block until the default output has finished. most batching outputs will already been done because their\n    // fast path is really fast (usually an insert into a queue), but the slow flush path might block for a long time\n    // this exerts the back pressure to the system\n    if (defaultOutputCompletion != null) {\n        Uninterruptibles.getUninterruptibly(defaultOutputCompletion);\n    } else {\n        LOG.error(\"The default output future was null, this is a bug!\");\n    }\n\n    if (msg.hasRecordings()) {\n        LOG.debug(\"Message event trace: {}\", msg.recordingsAsString());\n    }\n\n    outputThroughput.inc();\n\n    LOG.debug(\"Wrote message <{}> to all outputs. Finished handling.\", msg.getId());\n\n    event.clearMessages();\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/buffers/processors/OutputBufferProcessor.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Creates a new or updates an existing event processor state record for the given values.\n *\n * @param eventDefinitionId     the related event definition ID\n * @param maxProcessedTimestamp the maximum processed timestamp\n * @return the created or updated record\n */\n", "func_signal": "public Optional<EventProcessorStateDto> setState(String eventDefinitionId,\n                                                 DateTime minProcessedTimestamp,\n                                                 DateTime maxProcessedTimestamp)", "code": "{\n    checkArgument(!isNullOrEmpty(eventDefinitionId), \"eventDefinitionId cannot be null or empty\");\n    checkArgument(minProcessedTimestamp != null, \"minProcessedTimestamp cannot be null\");\n    checkArgument(maxProcessedTimestamp != null, \"maxProcessedTimestamp cannot be null\");\n    checkArgument(maxProcessedTimestamp.isAfter(minProcessedTimestamp), \"minProcessedTimestamp must be older than maxProcessedTimestamp\");\n\n    LOG.debug(\"Update event processor state for <{}> with min processed timestamp of <{}> max processed timestamp of <{}>\",\n            eventDefinitionId, minProcessedTimestamp, maxProcessedTimestamp);\n\n    // The state record must always keep the oldest minProcessedTimestamp and the newest maxProcessedTimestamp\n    // regardless of the value min/max timestamp arguments.\n    // Example: If the minProcessedTimestamp argument is newer than the value in the existing record, we don't\n    // want to change it. The other way around for the maxProcessedTimestamp.\n    // That's why we are using the $min and $max operations for the update query.\n    final DBUpdate.Builder update = DBUpdate.set(FIELD_EVENT_DEFINITION_ID, eventDefinitionId)\n            // Our current mongojack implementation doesn't offer $min/$max helper\n            .addOperation(\"$min\", FIELD_MIN_PROCESSED_TIMESTAMP, updateValue(minProcessedTimestamp))\n            .addOperation(\"$max\", FIELD_MAX_PROCESSED_TIMESTAMP, updateValue(maxProcessedTimestamp));\n\n    return Optional.ofNullable(MongoDBUpsertRetryer.run(() -> db.findAndModify(\n            // We have a unique index on the eventDefinitionId so this query is enough\n            DBQuery.is(FIELD_EVENT_DEFINITION_ID, eventDefinitionId),\n            null,\n            null,\n            false,\n            update,\n            true, // We want to return the updated document to the caller\n            true)));\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/events/processor/DBEventProcessorStateService.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Creates a new field type polling job for the newly created index set.\n * @param event index set creation event\n */\n", "func_signal": "@Subscribe\npublic void handleIndexSetCreation(final IndexSetCreatedEvent event)", "code": "{\n    final String indexSetId = event.indexSet().id();\n    // We are NOT using IndexSetRegistry#get(String) here because of this: https://github.com/Graylog2/graylog2-server/issues/4625\n    final Optional<IndexSetConfig> optionalIndexSet = indexSetService.get(indexSetId);\n\n    if (optionalIndexSet.isPresent()) {\n        schedule(mongoIndexSetFactory.create(optionalIndexSet.get()));\n    } else {\n        LOG.warn(\"Couldn't find newly created index set <{}>\", indexSetId);\n    }\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * The metric filter matching all metrics that have been registered by this pipeline.\n * Commonly used to remove the relevant metrics from the registry upon deletion of the pipeline.\n *\n * @return the filter matching this pipeline's metrics\n */\n", "func_signal": "public MetricFilter metricsFilter()", "code": "{\n    if (id() == null) {\n        return (name, metric) -> false;\n    }\n    return new MetricUtils.SingleMetricFilter(metricName);\n\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/Pipeline.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "// Compatibility creator after field type refresh interval has been introduced\n", "func_signal": "public static IndexSetConfig create(String id,\n                                    String title,\n                                    String description,\n                                    boolean isWritable,\n                                    String indexPrefix,\n                                    int shards,\n                                    int replicas,\n                                    String rotationStrategyClass,\n                                    RotationStrategyConfig rotationStrategy,\n                                    String retentionStrategyClass,\n                                    RetentionStrategyConfig retentionStrategy,\n                                    ZonedDateTime creationDate,\n                                    String indexAnalyzer,\n                                    String indexTemplateName,\n                                    TemplateType indexTemplateType,\n                                    int indexOptimizationMaxNumSegments,\n                                    boolean indexOptimizationDisabled)", "code": "{\n    return create(id, title, description, isWritable, indexPrefix, null, null, shards, replicas,\n            rotationStrategyClass, rotationStrategy, retentionStrategyClass, retentionStrategy, creationDate,\n            indexAnalyzer, indexTemplateName, indexTemplateType, indexOptimizationMaxNumSegments, indexOptimizationDisabled,\n            DEFAULT_FIELD_TYPE_REFRESH_INTERVAL);\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/indexset/IndexSetConfig.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Removes the field type polling job for the now deleted index set.\n * @param event index set deletion event\n */\n", "func_signal": "@Subscribe\npublic void handleIndexSetDeletion(final IndexSetDeletedEvent event)", "code": "{\n    final String indexSetId = event.id();\n\n    LOG.debug(\"Disable field type updating for index set <{}>\", indexSetId);\n    cancel(futures.remove(indexSetId));\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Creates a new polling job for the given index set to keep the active write index information up to date.\n * @param indexSet index set\n */\n", "func_signal": "private void schedule(final IndexSet indexSet)", "code": "{\n    final String indexSetId = indexSet.getConfig().id();\n    final String indexSetTitle = indexSet.getConfig().title();\n    final Duration refreshInterval = indexSet.getConfig().fieldTypeRefreshInterval();\n\n    if (Duration.ZERO.equals(refreshInterval)) {\n        LOG.debug(\"Skipping index set with ZERO refresh interval <{}/{}>\", indexSetTitle, indexSetId);\n        return;\n    }\n    if (!indexSet.getConfig().isWritable()) {\n        LOG.debug(\"Skipping non-writable index set <{}/{}>\", indexSetTitle, indexSetId);\n        return;\n    }\n\n    // Make sure there is no existing polling job running for this index set\n    cancel(futures.get(indexSetId));\n\n    LOG.debug(\"Schedule index field type updating for index set <{}/{}> every {} ms\", indexSetId, indexSetTitle,\n            refreshInterval.getMillis());\n    final ScheduledFuture<?> future = scheduler.scheduleAtFixedRate(() -> {\n        if (serverIsNotRunning()) {\n            return;\n        }\n        try {\n            // Only check the active write index on a regular basis, the others don't change anymore\n            final String activeWriteIndex = indexSet.getActiveWriteIndex();\n            if (activeWriteIndex != null) {\n                LOG.debug(\"Updating index field types for active write index <{}> in index set <{}/{}>\", activeWriteIndex,\n                        indexSetTitle, indexSetId);\n                poller.pollIndex(activeWriteIndex, indexSetId).ifPresent(dbService::upsert);\n            } else {\n                LOG.warn(\"Active write index for index set \\\"{}\\\" ({}) doesn't exist yet\", indexSetTitle, indexSetId);\n            }\n        } catch (TooManyAliasesException e) {\n            LOG.error(\"Couldn't get active write index\", e);\n        } catch (Exception e) {\n            LOG.error(\"Couldn't update field types for index set <{}/{}>\", indexSetTitle, indexSetId, e);\n        }\n    }, 0, refreshInterval.getMillis(), TimeUnit.MILLISECONDS);\n\n    futures.put(indexSetId, future);\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * This creates index field type information for each index in each index set and schedules polling jobs to\n * keep the data for active write indices up to date. It also removes index field type data for indices that\n * don't exist anymore.\n * <p>\n * Since we create polling jobs for the active write indices, this periodical doesn't need to be run very often.\n */\n", "func_signal": "@Override\npublic void doRun()", "code": "{\n    if (!cluster.isConnected()) {\n        LOG.info(\"Cluster not connected yet, delaying index field type initialization until it is reachable.\");\n        while (true) {\n            try {\n                cluster.waitForConnectedAndDeflectorHealthy();\n                break;\n            } catch (InterruptedException | TimeoutException e) {\n                LOG.warn(\"Interrupted or timed out waiting for Elasticsearch cluster, checking again.\");\n            }\n        }\n    }\n\n    // We are NOT using IndexSetRegistry#getAll() here because of this: https://github.com/Graylog2/graylog2-server/issues/4625\n    indexSetService.findAll().forEach(indexSetConfig -> {\n        final String indexSetId = indexSetConfig.id();\n        final String indexSetTitle = indexSetConfig.title();\n        final Set<IndexFieldTypesDTO> existingIndexTypes = ImmutableSet.copyOf(dbService.findForIndexSet(indexSetId));\n\n        final IndexSet indexSet = mongoIndexSetFactory.create(indexSetConfig);\n\n        // On startup we check that we have the field types for all existing indices\n        LOG.debug(\"Updating index field types for index set <{}/{}>\", indexSetTitle, indexSetId);\n        poller.poll(indexSet, existingIndexTypes).forEach(dbService::upsert);\n\n        // Make sure we have a polling job for the index set\n        if (!futures.containsKey(indexSetId)) {\n            schedule(indexSet);\n        }\n\n        // Cleanup orphaned field type entries that haven't been removed by the event handler\n        dbService.findForIndexSet(indexSetId).stream()\n                .filter(types -> !indices.exists(types.indexName()))\n                .forEach(types -> dbService.delete(types.id()));\n    });\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Delete state objects for the given event definition ID.\n *\n * @param id the object ID to delete\n * @return the number of objects that have been deleted\n */\n", "func_signal": "public int deleteByEventDefinitionId(String id)", "code": "{\n    return findByEventDefinitionId(id)\n            .map(dto -> db.removeById(new ObjectId(requireNonNull(dto.id()))).getN())\n            .orElse(0);\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/events/processor/DBEventProcessorStateService.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "// Process MongoDBFixtures annotation on methods and classes\n", "func_signal": "private void processFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context)", "code": "{\n    findFixtureAnnotation(context)\n            .ifPresent(annotation -> loadFixtures(invocationContext, context, annotation));\n}", "path": "graylog2-server/graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "// We want to to ignore the permission prefix and auto-value doesn't offer a built-in way to ignore properties in equals()\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n    if (o == this) {\n        return true;\n    }\n    if (o instanceof GRN) {\n        GRN that = (GRN) o;\n        return toString().equals(that.toString());\n    }\n    return false;\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/grn/GRN.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "// Compatibility creator after field type refresh interval has been introduced\n", "func_signal": "public static IndexSetConfig create(String title,\n                                    String description,\n                                    boolean isWritable,\n                                    String indexPrefix,\n                                    int shards,\n                                    int replicas,\n                                    String rotationStrategyClass,\n                                    RotationStrategyConfig rotationStrategy,\n                                    String retentionStrategyClass,\n                                    RetentionStrategyConfig retentionStrategy,\n                                    ZonedDateTime creationDate,\n                                    String indexAnalyzer,\n                                    String indexTemplateName,\n                                    TemplateType indexTemplateType,\n                                    int indexOptimizationMaxNumSegments,\n                                    boolean indexOptimizationDisabled)", "code": "{\n    return create(null, title, description, isWritable, indexPrefix, null, null, shards, replicas,\n            rotationStrategyClass, rotationStrategy, retentionStrategyClass, retentionStrategy, creationDate,\n            indexAnalyzer, indexTemplateName, indexTemplateType, indexOptimizationMaxNumSegments, indexOptimizationDisabled,\n            DEFAULT_FIELD_TYPE_REFRESH_INTERVAL);\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/indexset/IndexSetConfig.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Register the metrics attached to this pipeline.\n *\n * @param metricRegistry the registry to add the metrics to\n */\n", "func_signal": "public void registerMetrics(MetricRegistry metricRegistry)", "code": "{\n    if (id() != null) {\n        metricName = MetricRegistry.name(Pipeline.class, id(), \"executed\");\n        executed = metricRegistry.meter(metricName);\n    }\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/Pipeline.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n *\n * @return a copy of the list of all registered periodicals that are configured to be\n * stopped on a graceful shutdown.\n */\n", "func_signal": "public List<Periodical> getAllStoppedOnGracefulShutdown()", "code": "{\n    List<Periodical> result = Lists.newArrayList();\n    for (Periodical periodical : periodicals) {\n        if (periodical.stopOnGracefulShutdown()) {\n            result.add(periodical);\n        }\n    }\n\n    return result;\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/periodical/Periodicals.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Create a file info for the given path.\n *\n * @param path the path must exist, otherwise an IllegalArgumentException is thrown\n * @return the file info object\n */\n", "func_signal": "@NotNull\npublic static FileInfo forPath(Path path)", "code": "{\n    try {\n        final BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);\n        return FileInfo.builder()\n                .path(path)\n                .key(attributes.fileKey())\n                .size(attributes.size())\n                .modificationTime(attributes.lastModifiedTime())\n                .build();\n    } catch (Exception e) {\n        LOG.error(\"Couldn't get file info for path: {}\", path, e);\n        return EMPTY_FILE_INFO.toBuilder().path(path).build();\n    }\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/plugin/utilities/FileInfo.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Returns a set of event processor state objects where the event definition ID matches one of the ones in the given\n * set of IDs and the maximum processed timestamp is greater or equals the given timestamp.\n *\n * @param eventDefinitionIds set of event definition IDs\n * @param maxTimestamp       the threshold for the maximum processed timestamp\n * @return set of state objects or empty set when no object matches\n */\n", "func_signal": "public ImmutableSet<EventProcessorStateDto> findByEventDefinitionsAndMaxTimestamp(Set<String> eventDefinitionIds, DateTime maxTimestamp)", "code": "{\n    checkArgument(eventDefinitionIds != null && !eventDefinitionIds.isEmpty(), \"eventDefinitionIds cannot be null or empty\");\n    checkArgument(maxTimestamp != null, \"maxTimestamp cannot be null\");\n\n    final DBQuery.Query query = DBQuery.and(\n            DBQuery.in(FIELD_EVENT_DEFINITION_ID, eventDefinitionIds),\n            DBQuery.greaterThanEquals(FIELD_MAX_PROCESSED_TIMESTAMP, maxTimestamp)\n    );\n\n    return ImmutableSet.copyOf(db.find(query).iterator());\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog/events/processor/DBEventProcessorStateService.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "// Serve Swagger for a specific node, using HttpPublishUri\n", "func_signal": "@GET\n@Produces(MediaType.TEXT_HTML)\n@Path(\"index.html\")\npublic String index(@Context HttpHeaders httpHeaders) throws IOException", "code": "{\n    final URL templateUrl = this.getClass().getResource(\"/swagger/index.html.template\");\n    final String template = Resources.toString(templateUrl, StandardCharsets.UTF_8);\n    final Map<String, Object> model = ImmutableMap.of(\n            \"baseUri\", httpConfiguration.getHttpPublishUri().resolve(HttpConfiguration.PATH_API).toString(),\n            \"globalModePath\", \"\",\n            \"globalUriMarker\", \"\",\n            \"showWarning\", \"\");\n    return templateEngine.transform(template, model);\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/shared/rest/resources/documentation/DocumentationBrowserResource.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Cancel the polling job for the given {@link ScheduledFuture}.\n * @param future polling job future\n */\n", "func_signal": "private void cancel(@Nullable ScheduledFuture<?> future)", "code": "{\n    if (future != null && !future.isCancelled()) {\n        if (!future.cancel(true)) {\n            LOG.warn(\"Couldn't cancel field type update job\");\n        }\n    }\n}", "path": "graylog2-server/graylog2-server/src/main/java/org/graylog2/indexer/fieldtypes/IndexFieldTypePollerPeriodical.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Run the NodeIDFileValidator on a file with the given permissions.\n * @param nodeIdFile the path to the node id file, can be missing\n * @param permissions the posix permission to set the file to, if it exists, before running the validator\n * @return true if the validation was successful, false otherwise\n * @throws IOException if any file related problem occurred\n */\n", "func_signal": "private static boolean validateWithPermissions(File nodeIdFile, String permissions) throws IOException", "code": "{\n    try {\n        final Configuration.NodeIdFileValidator validator = new Configuration.NodeIdFileValidator();\n        if (nodeIdFile.exists()) {\n            Files.setPosixFilePermissions(nodeIdFile.toPath(), PosixFilePermissions.fromString(permissions));\n        }\n        validator.validate(\"node-id\", nodeIdFile.toString());\n    } catch (ValidationException ve) {\n        return false;\n    }\n    return true;\n}", "path": "graylog2-server/graylog2-server/src/test/java/org/graylog2/ConfigurationTest.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "Graylog2/graylog2-server", "stars": 6990, "license": "other", "language": "java", "size": 174800}
{"docstring": "/**\n * Returns the timestamp for a data point at index {@code i} if it exists.\n * <b>Note:</b> To get to a timestamp this method must walk the entire byte\n * array, i.e. O(n) so call this sparingly. Use the iterator instead.\n *\n * @param i A 0 based index incremented per the number of data points in the\n *          span.\n * @return A Unix epoch timestamp in milliseconds\n * @throws IndexOutOfBoundsException\n *           if the index would be out of bounds\n */\n", "func_signal": "public long timestamp(final int i)", "code": "{\n  checkRowOrder();\n  final long idxoffset = getIdxOffsetFor(i);\n  final int idx = (int) (idxoffset >>> 32);\n  final int offset = (int) (idxoffset & 0x00000000FFFFFFFF);\n  return rows.get(idx).timestamp(offset);\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * @return the name of the metric associated with the rows in this span\n * @throws IllegalStateException if the span was empty\n * @throws NoSuchUniqueId if the row key UID did not exist\n */\n", "func_signal": "public String metricName()", "code": "{\n  try {\n    return metricNameAsync().join();\n  } catch (InterruptedException iex) {\n    throw new RuntimeException(\"Interrupted the metric name call\", iex);\n  } catch (RuntimeException e) {\n    throw e;\n  } catch (Exception e) {\n    throw new RuntimeException(\"Should never be here\", e);\n  }\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "// ---------------------- //\n// SeekableView interface //\n// ---------------------- //\n", "func_signal": "@Override\npublic void seek(final long timestamp)", "code": "{\n  int row_index = seekRow(timestamp);\n  if (row_index != this.row_index) {\n    this.row_index = row_index;\n    current_row = rows.get(row_index).internalIterator();\n  }\n  current_row.seek(timestamp);\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "// While these NSUI shouldn't happen, it's possible if someone deletes a metric\n// or tag but not the actual data.\n", "func_signal": "@Test\npublic void getLastPointTSUIDMetricNSUINotResolved() throws Exception", "code": "{\n  Whitebox.setInternalState(config, \"enable_tsuid_incrementing\", false);\n  Whitebox.setInternalState(config, \"enable_realtime_ts\", false);\n  storage.flushStorage();\n  storage.addColumn(MockBase.stringToBytes(\"00000350E22700000001000001\"), \n      QUAL, VAL);\n  final byte[] tsuid = new byte[] { 0, 0, 3, 0, 0, 1, 0, 0, 1 };\n  PowerMockito.mockStatic(DateTime.class);\n  PowerMockito.when(DateTime.currentTimeMillis()).thenReturn(1356998400000L);\n  query = new TSUIDQuery(tsdb, tsuid);\n  final IncomingDataPoint dp = query.getLastPoint(false, 0).join();\n  assertEquals(1356998400000L, dp.getTimestamp());\n  assertNull(dp.getMetric());\n  assertNull(dp.getTags());\n  assertEquals(\"42\", dp.getValue());\n  assertEquals(UniqueId.uidToString(tsuid), dp.getTSUID());\n}", "path": "opentsdb/test/meta/TestTSUIDQuery.java", "commit_date": "2016-10-19 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Finds the index of the row of the ith data point and the offset in the row.\n *\n * @param i The index of the data point to find.\n * @return two ints packed in a long. The first int is the index of the row in\n *         {@code rows} and the second is offset in that {@link RowSeq}\n *         instance.\n */\n", "func_signal": "private long getIdxOffsetFor(final int i)", "code": "{\n  checkRowOrder();\n  int idx = 0;\n  int offset = 0;\n  for (final iHistogramRowSeq row : rows) {\n    final int sz = row.size();\n    if (offset + sz > i) {\n      break;\n    }\n    offset += sz;\n    idx++;\n  }\n  return ((long) idx << 32) | (i - offset);\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * @return an iterator to run over the list of data points\n */\n", "func_signal": "public HistogramSeekableView iterator()", "code": "{\n  checkRowOrder();\n  return spanIterator();\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * @return the list of tag pairs for the rows in this span\n * @throws IllegalStateException if the span was empty\n * @throws NoSuchUniqueId if the any of the tagk/v UIDs did not exist\n */\n", "func_signal": "public Map<String, String> getTags()", "code": "{\n  try {\n    return getTagsAsync().join();\n  } catch (InterruptedException iex) {\n    throw new RuntimeException(\"Interrupted the tags call\", iex);\n  } catch (RuntimeException e) {\n    throw e;\n  } catch (Exception e) {\n    throw new RuntimeException(\"Should never be here\", e);\n  }\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * @return the number of data points in this span, O(n) Unfortunately we must\n *         walk the entire array for every row as there may be a mix of second\n *         and millisecond timestamps\n */\n", "func_signal": "public int size()", "code": "{\n  int size = 0;\n  for (final iHistogramRowSeq row : rows) {\n    size += row.size();\n  }\n  return size;\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Installs the mygnuplot shell file \n */\n", "func_signal": "public static void installMyGnuPlot()", "code": "{\n  if(!FOUND_GP) {\n    LOG.warn(\"Skipping Gnuplot Shell Script Install since Gnuplot executable was not found\");\n    return;\n  }\n  if(!GP_FILE.exists()) {\n    if(!GP_FILE.getParentFile().exists()) {\n      GP_FILE.getParentFile().mkdirs();\n    }\n    InputStream is = null;\n    FileOutputStream fos = null;\n    try {\n      is = GnuplotInstaller.class.getClassLoader().getResourceAsStream(GP_BATCH_FILE_NAME);\n      ChannelBuffer buff = new DynamicChannelBuffer(is.available());\n      buff.writeBytes(is, is.available());\n      is.close(); is = null;\n      fos = new FileOutputStream(GP_FILE);\n      buff.readBytes(fos, buff.readableBytes());\n      fos.close(); fos = null;\n      GP_FILE.setExecutable(true);\n    } catch (Exception ex) {\n      throw new IllegalArgumentException(\"Failed to install mygnuplot\", ex);\n    } finally {\n      if( is!=null ) try { is.close(); } catch (Exception x) { /* No Op */ }\n      if( fos!=null ) try { fos.close(); } catch (Exception x) { /* No Op */ }\n    }\n  }\n}", "path": "opentsdb/src/tools/GnuplotInstaller.java", "commit_date": "2016-10-27 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Public for sharing with other UT classes\n * @param tsdb The mock TSDB client\n * @throws Exception If something went pear shaped\n */\n", "func_signal": "public static void setupStorage(final TSDB tsdb, final MockBase storage) \n    throws Exception", "code": "{\n  final List<byte[]> families = new ArrayList<byte[]>();\n  families.add(TSMeta.FAMILY);\n  storage.addTable(META_TABLE, families);\n  \n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"metrics\".getBytes(MockBase.ASCII()),\n      METRIC_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"metric_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000001\\\",\\\"type\\\":\\\"METRIC\\\",\\\"name\\\":\\\"sys.cpu.user\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"System CPU\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"metrics\".getBytes(MockBase.ASCII()),\n      METRIC_B_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"metric_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000002\\\",\\\"type\\\":\\\"METRIC\\\",\\\"name\\\":\\\"sys.cpu.system\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"System CPU\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  \n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"tagk\".getBytes(MockBase.ASCII()),\n      TAGK_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"tagk_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000001\\\",\\\"type\\\":\\\"TAGK\\\",\\\"name\\\":\\\"host\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"Host server name\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"tagk\".getBytes(MockBase.ASCII()),\n      TAGK_B_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"tagk_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000002\\\",\\\"type\\\":\\\"TAGK\\\",\\\"name\\\":\\\"owner\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"Datecenter name\\\"}\")\n      .getBytes(MockBase.ASCII()));\n\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"tagv\".getBytes(MockBase.ASCII()),\n      TAGV_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 1 }, NAME_FAMILY,\n      \"tagv_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000001\\\",\\\"type\\\":\\\"TAGV\\\",\\\"name\\\":\\\"web01\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"Web server 1\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"tagv\".getBytes(MockBase.ASCII()),\n      TAGV_B_STRING.getBytes(MockBase.ASCII()));\n  storage.addColumn(UID_TABLE, new byte[] { 0, 0, 2 }, NAME_FAMILY,\n      \"tagv_meta\".getBytes(MockBase.ASCII()), \n      (\"{\\\"uid\\\":\\\"000002\\\",\\\"type\\\":\\\"TAGV\\\",\\\"name\\\":\\\"web02\\\",\" +\n      \"\\\"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"MyNotes\\\",\\\"created\\\":\" + \n      \"1328140801,\\\"displayName\\\":\\\"Web server 2\\\"}\")\n      .getBytes(MockBase.ASCII()));\n\n  storage.addColumn(META_TABLE, TSUID, NAME_FAMILY,\n      \"ts_meta\".getBytes(MockBase.ASCII()),\n      (\"{\\\"tsuid\\\":\\\"000001000001000001\\\",\\\"\" +\n      \"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"Notes\\\",\\\"created\\\":1328140800,\" +\n      \"\\\"custom\\\":null,\\\"units\\\":\\\"\\\",\\\"retention\\\":42,\\\"max\\\":1.0,\\\"min\\\":\" +\n      \"\\\"NaN\\\",\\\"displayName\\\":\\\"Display\\\",\\\"dataType\\\":\\\"Data\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(META_TABLE, TSUID, NAME_FAMILY,\n      \"ts_ctr\".getBytes(MockBase.ASCII()),\n      Bytes.fromLong(1L));\n  storage.addColumn(META_TABLE, \n      new byte[] { 0, 0, 1, 0, 0, 1, 0, 0, 2 }, NAME_FAMILY,\n      \"ts_meta\".getBytes(MockBase.ASCII()),\n      (\"{\\\"tsuid\\\":\\\"000001000001000002\\\",\\\"\" +\n      \"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"Notes\\\",\\\"created\\\":1328140800,\" +\n      \"\\\"custom\\\":null,\\\"units\\\":\\\"\\\",\\\"retention\\\":42,\\\"max\\\":1.0,\\\"min\\\":\" +\n      \"\\\"NaN\\\",\\\"displayName\\\":\\\"Display\\\",\\\"dataType\\\":\\\"Data\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(META_TABLE, \n      new byte[] { 0, 0, 1, 0, 0, 1, 0, 0, 2 }, NAME_FAMILY,\n      \"ts_ctr\".getBytes(MockBase.ASCII()),\n      Bytes.fromLong(1L));\n  storage.addColumn(META_TABLE, \n      new byte[] { 0, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2 },\n      NAME_FAMILY, \"ts_meta\".getBytes(MockBase.ASCII()),\n      (\"{\\\"tsuid\\\":\\\"000002000001000001000003000002\\\",\\\"\" +\n      \"description\\\":\\\"Description\\\",\\\"notes\\\":\\\"Notes\\\",\\\"created\\\":1328140800,\" +\n      \"\\\"custom\\\":null,\\\"units\\\":\\\"\\\",\\\"retention\\\":42,\\\"max\\\":1.0,\\\"min\\\":\" +\n      \"\\\"NaN\\\",\\\"displayName\\\":\\\"Display\\\",\\\"dataType\\\":\\\"Data\\\"}\")\n      .getBytes(MockBase.ASCII()));\n  storage.addColumn(META_TABLE, \n      new byte[] { 0, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2 },\n      NAME_FAMILY, \"ts_ctr\".getBytes(MockBase.ASCII()),\n      Bytes.fromLong(1L));\n}", "path": "opentsdb/test/meta/TestTSUIDQuery.java", "commit_date": "2016-10-19 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * @throws IllegalStateException if the span doesn't have any rows\n */\n", "func_signal": "private void checkNotEmpty()", "code": "{\n  if (rows.size() == 0) {\n    throw new IllegalStateException(\"empty Span\");\n  }\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/** Helper to mockout the salt configuration */\n", "func_signal": "private void setupSalt()", "code": "{\n  PowerMockito.mockStatic(Const.class);\n  PowerMockito.when(Const.SALT_WIDTH()).thenReturn(1);\n  PowerMockito.when(Const.SALT_BUCKETS()).thenReturn(2);\n}", "path": "opentsdb/test/core/TestRowSeq.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Return the query index that maps this datapoints to the original subquery\n * \n * @return index of the query in the TSQuery class\n */\n", "func_signal": "public int getQueryIndex()", "code": "{\n  throw new UnsupportedOperationException(\"Span.java: getQueryIndex not \"\n      + \"supported\");\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "// ------------------ //\n// Iterator interface //\n// ------------------ //\n", "func_signal": "@Override\npublic boolean hasNext()", "code": "{\n  if (current_row.hasNext()) {\n    return true;\n  }\n  // handle situations where a row in the middle may be empty due to some\n  // kind of logic kicking out data points\n  while (row_index < rows.size() - 1) {\n    row_index++;\n    current_row = rows.get(row_index).internalIterator();\n    if (current_row.hasNext()) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Checks the sorted flag and sorts the rows if necessary. Should be called by\n * any iteration method. Since 2.0\n */\n", "func_signal": "private void checkRowOrder()", "code": "{\n  if (!sorted) {\n    Collections.sort(rows, new HistogramRowSeq.HistogramRowSeqComparator());\n    sorted = true;\n  }\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/** Shorthand to create a {@link KeyValue}.  */\n", "func_signal": "public static KeyValue makekv(final byte[] qualifier, final byte[] value)", "code": "{\n  if (Const.SALT_WIDTH() > 0) {\n    return new KeyValue(SALTED_KEY, FAMILY, qualifier, value);\n  }\n  return new KeyValue(KEY, FAMILY, qualifier, value);\n}", "path": "opentsdb/test/core/TestRowSeq.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Finds the index of the row in which the given timestamp should be.\n *\n * @param timestamp A strictly positive 32-bit integer.\n * @return A strictly positive index in the {@code rows} array.\n */\n", "func_signal": "private int seekRow(final long timestamp)", "code": "{\n  checkRowOrder();\n  int row_index = 0;\n  iHistogramRowSeq row = null;\n  final int nrows = rows.size();\n  for (int i = 0; i < nrows; i++) {\n    row = rows.get(i);\n    final int sz = row.size();\n    if (sz < 1) {\n      row_index++;\n    } else if (row.timestamp(sz - 1) < timestamp) {\n      row_index++; // The last DP in this row is before 'timestamp'.\n    } else {\n      break;\n    }\n  }\n  if (row_index == nrows) { // If this timestamp was too large for the\n    --row_index; // last row, return the last row.\n  }\n  return row_index;\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/** Helper that builds a KeyValue with millisecond timestamps */\n", "func_signal": "private static KeyValue getMs(final boolean salted)", "code": "{\n  final byte[] qual1 = { (byte) 0xF0, 0x00, 0x00, 0x07 };\n  final byte[] val1 = Bytes.fromLong(4L);\n  final byte[] qual2 = { (byte) 0xF0, 0x00, 0x02, 0x07 };\n  final byte[] val2 = Bytes.fromLong(5L);\n  final byte[] qual3 = { (byte) 0xF0, 0x00, 0x04, 0x07 };\n  final byte[] val3 = Bytes.fromLong(6L);\n  final byte[] qual123 = MockBase.concatByteArrays(qual1, qual2, qual3);\n  final KeyValue kv = makekv((salted ? SALTED_KEY : KEY), \n      qual123, MockBase.concatByteArrays(val1, val2, val3, ZERO));\n  return kv;\n}", "path": "opentsdb/test/core/TestRowSeq.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/** @return an override object with a couple of items */\n", "func_signal": "public QueryLimitOverride getTestObject(final boolean with_file) throws Exception", "code": "{\n  PowerMockito.when(Files.class, \"toString\", any(File.class), any(Charset.class))\n    .thenReturn(\"[{\\\"regex\\\":\\\".*sys$\\\",\\\"byteLimit\\\":24,\\\"dataPointsLimit\\\":16},\"\n        + \"{\\\"regex\\\":\\\".*perf.*\\\",\\\"byteLimit\\\":84,\\\"dataPointsLimit\\\":42}]\");\n  when(file.exists()).thenReturn(true);\n  return new QueryLimitOverride(tsdb); \n}", "path": "opentsdb/test/query/TestQueryLimitOverride.java", "commit_date": "2017-08-12 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Returns a human readable string representation of the object.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n  final StringBuilder buf = new StringBuilder();\n  buf.append(\"HistogramSpan(\").append(rows.size()).append(\" rows, [\");\n  for (int i = 0; i < rows.size(); i++) {\n    if (i != 0) {\n      buf.append(\", \");\n    }\n    buf.append(rows.get(i).toString());\n  }\n  buf.append(\"])\");\n  return buf.toString();\n}", "path": "opentsdb/src/core/HistogramSpan.java", "commit_date": "2017-05-28 00:00:00", "repo_name": "OpenTSDB/opentsdb", "stars": 4936, "license": "lgpl-2.1", "language": "java", "size": 41394}
{"docstring": "/**\n * Creates a HarRequest object using the method, url, and HTTP version of the specified request.\n *\n * @param httpRequest HTTP request on which the HarRequest will be based\n * @return a new HarRequest object\n */\n", "func_signal": "private HarRequest createHarRequestForHttpRequest(HttpRequest httpRequest)", "code": "{\n    // the HAR spec defines the request.url field as:\n    //     url [string] - Absolute URL of the request (fragments are not included).\n    // the URI on the httpRequest may only identify the path of the resource, so find the full URL.\n    // the full URL consists of the scheme + host + port (if non-standard) + path + query params + fragment.\n    String url = getFullUrl(httpRequest);\n\n    return new HarRequest(httpRequest.getMethod().toString(), url, httpRequest.getProtocolVersion().text());\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/HarCaptureFilter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Asks the camera hardware to begin drawing preview frames to the screen.\n */\n", "func_signal": "public synchronized void startPreview()", "code": "{\n    Camera theCamera = camera;\n    if (theCamera != null && !previewing) {\n        theCamera.startPreview();\n        previewing = true;\n        autoFocusManager = new AutoFocusManager(context, camera);\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Populates the serverIpAddress field of the harEntry using the internal hostname->IP address cache.\n *\n * @param httpRequest HTTP request to take the hostname from\n */\n", "func_signal": "protected void populateAddressFromCache(HttpRequest httpRequest)", "code": "{\n    String serverHost = getHost(httpRequest);\n\n    if (serverHost != null && !serverHost.isEmpty()) {\n        String resolvedAddress = ResolvedHostnameCacheFilter.getPreviouslyResolvedAddressForHost(serverHost);\n        if (resolvedAddress != null) {\n            harEntry.setServerIPAddress(resolvedAddress);\n        } else {\n            // the resolvedAddress may be null if the ResolvedHostnameCacheFilter has expired the entry (which is unlikely),\n            // or in the far more common case that the proxy is using a chained proxy to connect to connect to the\n            // remote host. since the chained proxy handles IP address resolution, the IP address in the HAR must be blank.\n            log.trace(\"Unable to find cached IP address for host: {}. IP address in HAR entry will be blank.\", serverHost);\n        }\n    } else {\n        log.warn(\"Unable to identify host from request uri: {}\", httpRequest.getUri());\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/HarCaptureFilter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n *\n *\n * @param newSetting if {@code true}, light should be turned on if currently off. And vice versa.\n */\n", "func_signal": "public synchronized void setTorch(boolean newSetting)", "code": "{\n    if (newSetting != configManager.getTorchState(camera)) {\n        if (camera != null) {\n            if (autoFocusManager != null) {\n                autoFocusManager.stop();\n            }\n            configManager.setTorch(camera, newSetting);\n            if (autoFocusManager != null) {\n                autoFocusManager.start();\n            }\n        }\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Draw a bitmap with the result points highlighted instead of the live scanning display.\n *\n * @param barcode An image of the decoded barcode.\n */\n", "func_signal": "public void drawResultBitmap(Bitmap barcode)", "code": "{\n    resultBitmap = barcode;\n    invalidate();\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/view/ViewfinderView.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Tells the camera to stop drawing preview frames.\n */\n", "func_signal": "public synchronized void stopPreview()", "code": "{\n    if (autoFocusManager != null) {\n        autoFocusManager.stop();\n        autoFocusManager = null;\n    }\n    if (camera != null && previewing) {\n        camera.stopPreview();\n        previewCallback.setHandler(null, 0);\n        previewing = false;\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * \u6267\u884cping\u547d\u4ee4\uff0c\u8fd4\u56deping\u547d\u4ee4\u7684\u5168\u90e8\u63a7\u5236\u53f0\u8f93\u51fa\n * \n * @param ping\n * @return\n */\n", "func_signal": "private String execPing(PingTask ping)", "code": "{\n  Process process = null;\n  String str = \"\";\n  BufferedReader reader = null;\n  try {\n    process = Runtime.getRuntime().exec(\"ping -c 1 \" + ping.getHost());\n    reader = new BufferedReader(new InputStreamReader(\n        process.getInputStream()));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      str += line;\n    }\n    reader.close();\n    process.waitFor();\n\n  } catch (IOException e) {\n    e.printStackTrace();\n  } catch (InterruptedException e) {\n    e.printStackTrace();\n  } finally {\n    try {\n      if (reader != null) {\n        reader.close();\n      }\n      process.destroy();\n    } catch (Exception e) {\n    }\n  }\n  return str;\n}", "path": "AndroidHttpCapture/app/src/main/java/com/netease/LDNetDiagnoService/LDNetTraceRoute.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * A single preview frame will be returned to the handler supplied. The data will arrive as byte[]\n * in the message.obj field, with width and height encoded as message.arg1 and message.arg2,\n * respectively.\n *\n * @param handler The handler to send the message to.\n * @param message The what field of the message to be sent.\n */\n", "func_signal": "public synchronized void requestPreviewFrame(Handler handler, int message)", "code": "{\n    Camera theCamera = camera;\n    if (theCamera != null && previewing) {\n        previewCallback.setHandler(handler, message);\n        theCamera.setOneShotPreviewCallback(previewCallback);\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Allows third party apps to specify the scanning rectangle dimensions, rather than determine\n * them automatically based on screen resolution.\n *\n * @param width  The width in pixels to scan.\n * @param height The height in pixels to scan.\n */\n", "func_signal": "public synchronized void setManualFramingRect(int width, int height)", "code": "{\n    if (initialized) {\n        Point screenResolution = configManager.getScreenResolution();\n        if (width > screenResolution.x) {\n            width = screenResolution.x;\n        }\n        if (height > screenResolution.y) {\n            height = screenResolution.y;\n        }\n        int leftOffset = (screenResolution.x - width) / 2;\n        int topOffset = (screenResolution.y - height) / 2;\n        framingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);\n        Log.d(TAG, \"Calculated manual framing rect: \" + framingRect);\n        framingRectInPreview = null;\n    } else {\n        requestedFramingRectWidth = width;\n        requestedFramingRectHeight = height;\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Adds the size of this httpContent to the responseBodySize.\n *\n * @param httpContent HttpContent to size\n */\n", "func_signal": "protected void captureResponseSize(HttpContent httpContent)", "code": "{\n    ByteBuf bufferedContent = httpContent.content();\n    int contentSize = bufferedContent.readableBytes();\n    responseBodySize.addAndGet(contentSize);\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/HarCaptureFilter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Allows third party apps to specify the camera ID, rather than determine\n * it automatically based on available cameras and their orientation.\n *\n * @param cameraId camera ID of the camera to use. A negative value means \"no preference\".\n */\n", "func_signal": "public synchronized void setManualCameraId(int cameraId)", "code": "{\n    if (initialized) {\n        throw new IllegalStateException();\n    } else {\n        requestedCameraId = cameraId;\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Creates a new filter source that will invoke the specified filter and uses the maximumRequestBufferSizeInBytes as the maximum\n * buffer size. Set maximumRequestBufferSizeInBytes to 0 to disable aggregation. <b>If message aggregation is disabled,\n * the {@link HttpMessageContents} will not be available for modification.</b> (<b>Note:</b> HTTP message aggregation will\n * be enabled if <i>any</i> filter has a maximum request or response buffer size greater than 0. See\n * {@link org.littleshoot.proxy.HttpFiltersSource#getMaximumRequestBufferSizeInBytes()} for details.)\n *\n * @param filter RequestFilter to invoke\n * @param maximumRequestBufferSizeInBytes maximum buffer size when aggregating Requests for filtering\n */\n", "func_signal": "public FilterSource(RequestFilter filter, int maximumRequestBufferSizeInBytes)", "code": "{\n    this.filter = filter;\n    this.maximumRequestBufferSizeInBytes = maximumRequestBufferSizeInBytes;\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/RequestFilterAdapter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Opens the camera driver and initializes the hardware parameters.\n *\n * @param holder The surface object which the camera will draw preview frames into.\n * @throws IOException Indicates the camera driver failed to open.\n */\n", "func_signal": "public synchronized void openDriver(SurfaceHolder holder) throws IOException", "code": "{\n    Camera theCamera = camera;\n    if (theCamera == null) {\n\n        if (requestedCameraId >= 0) {\n            theCamera = OpenCameraInterface.open(requestedCameraId);\n        } else {\n            theCamera = OpenCameraInterface.open();\n        }\n\n        if (theCamera == null) {\n            throw new IOException();\n        }\n        camera = theCamera;\n    }\n    theCamera.setPreviewDisplay(holder);\n\n    if (!initialized) {\n        initialized = true;\n        configManager.initFromCameraParameters(theCamera);\n        if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {\n            setManualFramingRect(requestedFramingRectWidth, requestedFramingRectHeight);\n            requestedFramingRectWidth = 0;\n            requestedFramingRectHeight = 0;\n        }\n    }\n\n    Camera.Parameters parameters = theCamera.getParameters();\n    String parametersFlattened = parameters == null ? null : parameters.flatten(); // Save these, temporarily\n    try {\n        configManager.setDesiredCameraParameters(theCamera, false);\n    } catch (RuntimeException re) {\n        // Driver failed\n        Log.w(TAG, \"Camera rejected parameters. Setting only minimal safe-mode parameters\");\n        Log.i(TAG, \"Resetting to saved camera params: \" + parametersFlattened);\n        // Reset:\n        if (parametersFlattened != null) {\n            parameters = theCamera.getParameters();\n            parameters.unflatten(parametersFlattened);\n            try {\n                theCamera.setParameters(parameters);\n                configManager.setDesiredCameraParameters(theCamera, true);\n            } catch (RuntimeException re2) {\n                // Well, darn. Give up\n                Log.w(TAG, \"Camera rejected even safe-mode parameters! No configuration\");\n            }\n        }\n    }\n\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Like {@link #getFramingRect} but coordinates are in terms of the preview frame,\n * not UI / screen.\n *\n * @return {@link Rect} expressing barcode scan area in terms of the preview size\n */\n", "func_signal": "public synchronized Rect getFramingRectInPreview()", "code": "{\n    if (framingRectInPreview == null) {\n        Rect framingRect = getFramingRect();\n        if (framingRect == null) {\n            return null;\n        }\n        Rect rect = new Rect(framingRect);\n        Point cameraResolution = configManager.getCameraResolution();\n        Point screenResolution = configManager.getScreenResolution();\n        if (cameraResolution == null || screenResolution == null) {\n            // Called early, before init even finished\n            return null;\n        }\n\n        //rect.left = rect.left * cameraResolution.x / screenResolution.x;\n        //rect.right = rect.right * cameraResolution.x / screenResolution.x;\n        //rect.top = rect.top * cameraResolution.y / screenResolution.y;\n        //rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;\n        rect.left = rect.left * cameraResolution.y / screenResolution.x;\n        rect.right = rect.right * cameraResolution.y / screenResolution.x;\n        rect.top = rect.top * cameraResolution.x / screenResolution.y;\n        rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;\n        framingRectInPreview = rect;\n    }\n    return framingRectInPreview;\n}", "path": "AndroidHttpCapture/app/src/main/java/com/google/zxing/camera/CameraManager.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * \u901a\u8fc7ping\u547d\u4ee4\u6a21\u62df\u6267\u884ctraceroute\u7684\u8fc7\u7a0b\n * \n * @param trace\n * @return\n */\n", "func_signal": "private void execTrace(TraceTask trace)", "code": "{\n  Pattern patternTrace = Pattern.compile(MATCH_TRACE_IP);\n  Pattern patternIp = Pattern.compile(MATCH_PING_IP);\n  Pattern patternTime = Pattern.compile(MATCH_PING_TIME);\n\n  Process process = null;\n  BufferedReader reader = null;\n  boolean finish = false;\n  try {\n    // \u901a\u8fc7ping\u7684\u8df3\u6570\u63a7\u5236\uff0c\u53d6\u5f97\u76f8\u5e94\u8df3\u8f93\u7684ip\u5730\u5740\uff0c\u7136\u540e\u518d\u6b21\u6267\u884cping\u547d\u4ee4\u8bfb\u53d6\u65f6\u95f4\n    while (!finish && trace.getHop() < 30) {\n      // \u5148\u53d1\u51faping\u547d\u4ee4\u83b7\u5f97\u67d0\u4e2a\u8df3\u6570\u7684ip\u5730\u5740\n      String str = \"\";\n      // -c 1 \u540c\u65f6\u53d1\u9001\u6d88\u606f\u6b21\u6570 \uff0dt\u662f\u6307\u8df3\u6570\n      String command = \"ping -c 1 -t \" + trace.getHop() + \" \"\n          + trace.getHost();\n\n      process = Runtime.getRuntime().exec(command);\n      reader = new BufferedReader(new InputStreamReader(\n          process.getInputStream()));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        str += line;\n      }\n      reader.close();\n      process.waitFor();\n\n      Matcher m = patternTrace.matcher(str);\n\n      // \u5982\u679c\u6210\u529f\u83b7\u5f97trace:IP\uff0c\u5219\u518d\u6b21\u53d1\u9001ping\u547d\u4ee4\u83b7\u53d6ping\u7684\u65f6\u95f4\n      StringBuilder log = new StringBuilder(256);\n      if (m.find()) {\n        String pingIp = m.group();\n        PingTask pingTask = new PingTask(pingIp);\n\n        String status = execPing(pingTask);\n        if (status.length() == 0) {\n          log.append(\"unknown host or network error\\n\");\n          finish = true;\n        } else {\n          Matcher matcherTime = patternTime.matcher(status);\n          if (matcherTime.find()) {\n            String time = matcherTime.group();\n            log.append(trace.getHop());\n            log.append(\"\\t\\t\");\n            log.append(pingIp);\n            log.append(\"\\t\\t\");\n            log.append(time);\n            log.append(\"\\t\");\n          } else {\n            log.append(trace.getHop());\n            log.append(\"\\t\\t\");\n            log.append(pingIp);\n            log.append(\"\\t\\t timeout \\t\");\n          }\n          listener.OnNetTraceUpdated(log.toString());\n          trace.setHop(trace.getHop() + 1);\n        }\n\n      }\n\n      // \u5426\u5219\uff1awhat\n      else {\n        Matcher matchPingIp = patternIp.matcher(str);\n        if (matchPingIp.find()) {\n          String pingIp = matchPingIp.group();\n          Matcher matcherTime = patternTime.matcher(str);\n          if (matcherTime.find()) {\n            String time = matcherTime.group();\n            log.append(trace.getHop());\n            log.append(\"\\t\\t\");\n            log.append(pingIp);\n            log.append(\"\\t\\t\");\n            log.append(time);\n            log.append(\"\\t\");\n            listener.OnNetTraceUpdated(log.toString());\n          }\n          finish = true;\n        } else {\n          if (str.length() == 0) {\n            log.append(\"unknown host or network error\\t\");\n            finish = true;\n          } else {\n            log.append(trace.getHop());\n            log.append(\"\\t\\t timeout \\t\");\n            trace.setHop(trace.getHop() + 1);\n          }\n          listener.OnNetTraceUpdated(log.toString());\n        }\n      }// else no match traceIPPattern\n    }// while\n  } catch (IOException e) {\n    e.printStackTrace();\n  } catch (InterruptedException e) {\n    e.printStackTrace();\n  } finally {\n    try {\n      if (reader != null) {\n        reader.close();\n      }\n      process.destroy();\n    } catch (Exception e) {\n    }\n  }\n\n  listener.OnNetTraceFinished();\n}", "path": "AndroidHttpCapture/app/src/main/java/com/netease/LDNetDiagnoService/LDNetTraceRoute.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Uses the non-portable system property sun.arch.data.model to help determine if we are running on a 32-bit JVM.\n * Since the majority of modern systems are 64 bits, this method \"assumes\" 64 bits and only returns true if\n * sun.arch.data.model explicitly indicates a 32-bit JVM.\n *\n * @return true if we can determine definitively that this is a 32-bit JVM, otherwise false\n */\n", "func_signal": "private static boolean is32BitJvm()", "code": "{\n    Integer bits = Integer.getInteger(\"sun.arch.data.model\");\n\n    return bits != null && bits == 32;\n\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/mitm/util/MitmConstants.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u673aIP(wifi)\n */\n", "func_signal": "public static String getLocalIpByWifi(Context context)", "code": "{\n  WifiManager wifiManager = (WifiManager) context\n      .getSystemService(Context.WIFI_SERVICE);\n  if (wifiManager == null) {\n    return \"wifiManager not found\";\n  }\n  WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n  if (wifiInfo == null) {\n    return \"wifiInfo not found\";\n  }\n  int ipAddress = wifiInfo.getIpAddress();\n  return String.format(\"%d.%d.%d.%d\", (ipAddress & 0xff),\n      (ipAddress >> 8 & 0xff), (ipAddress >> 16 & 0xff),\n      (ipAddress >> 24 & 0xff));\n}", "path": "AndroidHttpCapture/app/src/main/java/com/netease/LDNetDiagnoUtils/LDNetUtil.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Creates a new filter source that will invoke the specified filter and uses the {@link #DEFAULT_MAXIMUM_REQUEST_BUFFER_SIZE} as\n * the maximum buffer size.\n *\n * @param filter RequestFilter to invoke\n */\n", "func_signal": "public FilterSource(RequestFilter filter)", "code": "{\n    this.filter = filter;\n    this.maximumRequestBufferSizeInBytes = DEFAULT_MAXIMUM_REQUEST_BUFFER_SIZE;\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/RequestFilterAdapter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u662f\u5426\u8fde\u63a5\n */\n", "func_signal": "public static Boolean isNetworkConnected(Context context)", "code": "{\n  ConnectivityManager manager = (ConnectivityManager) context\n      .getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (manager == null) {\n    return false;\n  }\n  NetworkInfo networkinfo = manager.getActiveNetworkInfo();\n  if (networkinfo == null || !networkinfo.isAvailable()) {\n    return false;\n  }\n  return true;\n}", "path": "AndroidHttpCapture/app/src/main/java/com/netease/LDNetDiagnoUtils/LDNetUtil.java", "commit_date": "2016-10-15 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Populates ssl and connect timing info in the HAR if an entry for this client and server exist in the cache.\n */\n", "func_signal": "protected void captureConnectTiming()", "code": "{\n    HttpConnectTiming httpConnectTiming = HttpConnectHarCaptureFilter.consumeConnectTimingForConnection(clientAddress);\n    if (httpConnectTiming != null) {\n        harEntry.getTimings().setSsl(httpConnectTiming.getSslHandshakeTimeNanos(), TimeUnit.NANOSECONDS);\n        harEntry.getTimings().setConnect(httpConnectTiming.getConnectTimeNanos(), TimeUnit.NANOSECONDS);\n        harEntry.getTimings().setBlocked(httpConnectTiming.getBlockedTimeNanos(), TimeUnit.NANOSECONDS);\n        harEntry.getTimings().setDns(httpConnectTiming.getDnsTimeNanos(), TimeUnit.NANOSECONDS);\n    }\n}", "path": "AndroidHttpCapture/app/src/main/java/net/lightbody/bmp/filters/HarCaptureFilter.java", "commit_date": "2018-07-07 00:00:00", "repo_name": "JZ-Darkal/AndroidHttpCapture", "stars": 4329, "license": "mit", "language": "java", "size": 5880}
{"docstring": "/**\n * Returns the bit at the specified index, yielding 0 or 1.\n * @param index the index to get the bit at\n * @return the bit at the specified index\n * @throws IndexOutOfBoundsException if index &lt; 0 or index &#x2265; bitLength\n */\n", "func_signal": "public int getBit(int index)", "code": "{\n\tif (index < 0 || index >= bitLength)\n\t\tthrow new IndexOutOfBoundsException();\n\treturn data.get(index) ? 1 : 0;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a segment representing the specified string of decimal digits encoded in numeric mode.\n * @param digits the text (not {@code null}), with only digits from 0 to 9 allowed\n * @return a segment (not {@code null}) containing the text\n * @throws NullPointerException if the string is {@code null}\n * @throws IllegalArgumentException if the string contains non-digit characters\n */\n", "func_signal": "public static QrSegment makeNumeric(String digits)", "code": "{\n\tObjects.requireNonNull(digits);\n\tif (!NUMERIC_REGEX.matcher(digits).matches())\n\t\tthrow new IllegalArgumentException(\"String contains non-numeric characters\");\n\t\n\tBitBuffer bb = new BitBuffer();\n\tfor (int i = 0; i < digits.length(); ) {  // Consume up to 3 digits per iteration\n\t\tint n = Math.min(digits.length() - i, 3);\n\t\tbb.appendBits(Integer.parseInt(digits.substring(i, i + n)), n * 3 + 1);\n\t\ti += n;\n\t}\n\treturn new QrSegment(Mode.NUMERIC, digits.length(), bb);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/*-- Constructor --*/\n", "func_signal": "private Mode(int mode, int... ccbits)", "code": "{\n\tmodeBits = mode;\n\tnumBitsCharCount = ccbits;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a list of zero or more segments to represent the specified Unicode text string.\n * The resulting list optimally minimizes the total encoded bit length, subjected to the constraints\n * in the specified {error correction level, minimum version number, maximum version number}.\n * <p>This function can utilize all four text encoding modes: numeric, alphanumeric, byte (UTF-8),\n * and kanji. This can be considered as a sophisticated but slower replacement for {@link\n * QrSegment#makeSegments(String)}. This requires more input parameters because it searches a\n * range of versions, like {@link QrCode#encodeSegments(List,QrCode.Ecc,int,int,int,boolean)}.</p>\n * @param text the text to be encoded (not {@code null}), which can be any Unicode string\n * @param ecl the error correction level to use (not {@code null})\n * @param minVersion the minimum allowed version of the QR Code (at least 1)\n * @param maxVersion the maximum allowed version of the QR Code (at most 40)\n * @return a new mutable list (not {@code null}) of segments (not {@code null})\n * containing the text, minimizing the bit length with respect to the constraints\n * @throws NullPointerException if the text or error correction level is {@code null}\n * @throws IllegalArgumentException if 1 &#x2264; minVersion &#x2264; maxVersion &#x2264; 40 is violated\n * @throws DataTooLongException if the text fails to fit in the maxVersion QR Code at the ECL\n */\n", "func_signal": "public static List<QrSegment> makeSegmentsOptimally(String text, QrCode.Ecc ecl, int minVersion, int maxVersion)", "code": "{\n\t// Check arguments\n\tObjects.requireNonNull(text);\n\tObjects.requireNonNull(ecl);\n\tif (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION))\n\t\tthrow new IllegalArgumentException(\"Invalid value\");\n\t\n\t// Iterate through version numbers, and make tentative segments\n\tList<QrSegment> segs = null;\n\tint[] codePoints = toCodePoints(text);\n\tfor (int version = minVersion; ; version++) {\n\t\tif (version == minVersion || version == 10 || version == 27)\n\t\t\tsegs = makeSegmentsOptimally(codePoints, version);\n\t\tassert segs != null;\n\t\t\n\t\t// Check if the segments fit\n\t\tint dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n\t\tint dataUsedBits = QrSegment.getTotalBits(segs, version);\n\t\tif (dataUsedBits != -1 && dataUsedBits <= dataCapacityBits)\n\t\t\treturn segs;  // This version number is found to be suitable\n\t\tif (version >= maxVersion) {  // All versions in the range could not fit the given text\n\t\t\tString msg = \"Segment too long\";\n\t\t\tif (dataUsedBits != -1)\n\t\t\t\tmsg = String.format(\"Data length = %d bits, Max capacity = %d bits\", dataUsedBits, dataCapacityBits);\n\t\t\tthrow new DataTooLongException(msg);\n\t\t}\n\t}\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Tests whether the specified string can be encoded as a segment in kanji mode.\n * Broadly speaking, the set of encodable characters are {kanji used in Japan,\n * hiragana, katakana, East Asian punctuation, full-width ASCII, Greek, Cyrillic}.\n * Examples of non-encodable characters include {ordinary ASCII, half-width katakana,\n * more extensive Chinese hanzi}.\n * @param text the string to test for encodability (not {@code null})\n * @return {@code true} iff each character is in the kanji mode character set\n * @throws NullPointerException if the string is {@code null}\n * @see #makeKanji(String)\n */\n", "func_signal": "public static boolean isEncodableAsKanji(String text)", "code": "{\n\tObjects.requireNonNull(text);\n\treturn text.chars().allMatch(\n\t\tc -> isKanji((char)c));\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "// Returns the number of UTF-8 bytes needed to encode the given Unicode code point.\n", "func_signal": "private static int countUtf8Bytes(int cp)", "code": "{\n\tif      (cp <        0) throw new IllegalArgumentException(\"Invalid code point\");\n\telse if (cp <     0x80) return 1;\n\telse if (cp <    0x800) return 2;\n\telse if (cp <  0x10000) return 3;\n\telse if (cp < 0x110000) return 4;\n\telse                    throw new IllegalArgumentException(\"Invalid code point\");\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "// Returns a new array of Unicode code points (effectively\n// UTF-32 / UCS-4) representing the given UTF-16 string.\n", "func_signal": "private static int[] toCodePoints(String s)", "code": "{\n\tint[] result = s.codePoints().toArray();\n\tfor (int c : result) {\n\t\tif (Character.isSurrogate((char)c))\n\t\t\tthrow new IllegalArgumentException(\"Invalid UTF-16 string\");\n\t}\n\treturn result;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a segment representing the specified text string encoded in alphanumeric mode.\n * The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n * dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n * @param text the text (not {@code null}), with only certain characters allowed\n * @return a segment (not {@code null}) containing the text\n * @throws NullPointerException if the string is {@code null}\n * @throws IllegalArgumentException if the string contains non-encodable characters\n */\n", "func_signal": "public static QrSegment makeAlphanumeric(String text)", "code": "{\n\tObjects.requireNonNull(text);\n\tif (!ALPHANUMERIC_REGEX.matcher(text).matches())\n\t\tthrow new IllegalArgumentException(\"String contains unencodable characters in alphanumeric mode\");\n\t\n\tBitBuffer bb = new BitBuffer();\n\tint i;\n\tfor (i = 0; i <= text.length() - 2; i += 2) {  // Process groups of 2\n\t\tint temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n\t\ttemp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n\t\tbb.appendBits(temp, 11);\n\t}\n\tif (i < text.length())  // 1 character remaining\n\t\tbb.appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6);\n\treturn new QrSegment(Mode.ALPHANUMERIC, text.length(), bb);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Appends the content of the specified bit buffer to this buffer.\n * @param bb the bit buffer whose data to append (not {@code null})\n * @throws NullPointerException if the bit buffer is {@code null}\n * @throws IllegalStateException if appending the data\n * would make bitLength exceed Integer.MAX_VALUE\n */\n", "func_signal": "public void appendData(BitBuffer bb)", "code": "{\n\tObjects.requireNonNull(bb);\n\tif (Integer.MAX_VALUE - bitLength < bb.bitLength)\n\t\tthrow new IllegalStateException(\"Maximum length reached\");\n\tfor (int i = 0; i < bb.bitLength; i++, bitLength++)  // Append bit by bit\n\t\tdata.set(bitLength, bb.data.get(i));\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a new copy of this buffer.\n * @return a new copy of this buffer (not {@code null})\n */\n", "func_signal": "public BitBuffer clone()", "code": "{\n\ttry {\n\t\tBitBuffer result = (BitBuffer)super.clone();\n\t\tresult.data = (BitSet)result.data.clone();\n\t\treturn result;\n\t} catch (CloneNotSupportedException e) {\n\t\tthrow new AssertionError(e);\n\t}\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a segment representing an Extended Channel Interpretation\n * (ECI) designator with the specified assignment value.\n * @param assignVal the ECI assignment number (see the AIM ECI specification)\n * @return a segment (not {@code null}) containing the data\n * @throws IllegalArgumentException if the value is outside the range [0, 10<sup>6</sup>)\n */\n", "func_signal": "public static QrSegment makeEci(int assignVal)", "code": "{\n\tBitBuffer bb = new BitBuffer();\n\tif (assignVal < 0)\n\t\tthrow new IllegalArgumentException(\"ECI assignment value out of range\");\n\telse if (assignVal < (1 << 7))\n\t\tbb.appendBits(assignVal, 8);\n\telse if (assignVal < (1 << 14)) {\n\t\tbb.appendBits(2, 2);\n\t\tbb.appendBits(assignVal, 14);\n\t} else if (assignVal < 1_000_000) {\n\t\tbb.appendBits(6, 3);\n\t\tbb.appendBits(assignVal, 21);\n\t} else\n\t\tthrow new IllegalArgumentException(\"ECI assignment value out of range\");\n\treturn new QrSegment(Mode.ECI, 0, bb);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a segment representing the specified binary data\n * encoded in byte mode. All input byte arrays are acceptable.\n * <p>Any text string can be converted to UTF-8 bytes ({@code\n * s.getBytes(StandardCharsets.UTF_8)}) and encoded as a byte mode segment.</p>\n * @param data the binary data (not {@code null})\n * @return a segment (not {@code null}) containing the data\n * @throws NullPointerException if the array is {@code null}\n */\n", "func_signal": "public static QrSegment makeBytes(byte[] data)", "code": "{\n\tObjects.requireNonNull(data);\n\tBitBuffer bb = new BitBuffer();\n\tfor (byte b : data)\n\t\tbb.appendBits(b & 0xFF, 8);\n\treturn new QrSegment(Mode.BYTE, data.length, bb);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "// Returns a new list of segments based on the given text and modes, such that\n// consecutive code points in the same mode are put into the same segment.\n", "func_signal": "private static List<QrSegment> splitIntoSegments(int[] codePoints, Mode[] charModes)", "code": "{\n\tif (codePoints.length == 0)\n\t\tthrow new IllegalArgumentException();\n\tList<QrSegment> result = new ArrayList<>();\n\t\n\t// Accumulate run of modes\n\tMode curMode = charModes[0];\n\tint start = 0;\n\tfor (int i = 1; ; i++) {\n\t\tif (i < codePoints.length && charModes[i] == curMode)\n\t\t\tcontinue;\n\t\tString s = new String(codePoints, start, i - start);\n\t\tif (curMode == Mode.BYTE)\n\t\t\tresult.add(QrSegment.makeBytes(s.getBytes(StandardCharsets.UTF_8)));\n\t\telse if (curMode == Mode.NUMERIC)\n\t\t\tresult.add(QrSegment.makeNumeric(s));\n\t\telse if (curMode == Mode.ALPHANUMERIC)\n\t\t\tresult.add(QrSegment.makeAlphanumeric(s));\n\t\telse if (curMode == Mode.KANJI)\n\t\t\tresult.add(makeKanji(s));\n\t\telse\n\t\t\tthrow new AssertionError();\n\t\tif (i >= codePoints.length)\n\t\t\treturn result;\n\t\tcurMode = charModes[i];\n\t\tstart = i;\n\t}\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a segment representing the specified text string encoded in kanji mode.\n * Broadly speaking, the set of encodable characters are {kanji used in Japan,\n * hiragana, katakana, East Asian punctuation, full-width ASCII, Greek, Cyrillic}.\n * Examples of non-encodable characters include {ordinary ASCII, half-width katakana,\n * more extensive Chinese hanzi}.\n * @param text the text (not {@code null}), with only certain characters allowed\n * @return a segment (not {@code null}) containing the text\n * @throws NullPointerException if the string is {@code null}\n * @throws IllegalArgumentException if the string contains non-encodable characters\n * @see #isEncodableAsKanji(String)\n */\n", "func_signal": "public static QrSegment makeKanji(String text)", "code": "{\n\tObjects.requireNonNull(text);\n\tBitBuffer bb = new BitBuffer();\n\ttext.chars().forEachOrdered(c -> {\n\t\tint val = UNICODE_TO_QR_KANJI[c];\n\t\tif (val == -1)\n\t\t\tthrow new IllegalArgumentException(\"String contains non-kanji-mode characters\");\n\t\tbb.appendBits(val, 13);\n\t});\n\treturn new QrSegment(Mode.KANJI, text.length(), bb);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Constructs an empty bit buffer (length 0).\n */\n", "func_signal": "public BitBuffer()", "code": "{\n\tdata = new BitSet();\n\tbitLength = 0;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Constructs a QR Code segment with the specified attributes and data.\n * The character count (numCh) must agree with the mode and the bit buffer length,\n * but the constraint isn't checked. The specified bit buffer is cloned and stored.\n * @param md the mode (not {@code null})\n * @param numCh the data length in characters or bytes, which is non-negative\n * @param data the data bits (not {@code null})\n * @throws NullPointerException if the mode or data is {@code null}\n * @throws IllegalArgumentException if the character count is negative\n */\n", "func_signal": "public QrSegment(Mode md, int numCh, BitBuffer data)", "code": "{\n\tmode = Objects.requireNonNull(md);\n\tObjects.requireNonNull(data);\n\tif (numCh < 0)\n\t\tthrow new IllegalArgumentException(\"Invalid value\");\n\tnumChars = numCh;\n\tthis.data = data.clone();  // Make defensive copy\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns the length of this sequence, which is a non-negative value.\n * @return the length of this sequence\n */\n", "func_signal": "public int bitLength()", "code": "{\n\tassert bitLength >= 0;\n\treturn bitLength;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Appends the specified number of low-order bits of the specified value to this\n * buffer. Requires 0 &#x2264; len &#x2264; 31 and 0 &#x2264; val &lt; 2<sup>len</sup>.\n * @param val the value to append\n * @param len the number of low-order bits in the value to take\n * @throws IllegalArgumentException if the value or number of bits is out of range\n * @throws IllegalStateException if appending the data\n * would make bitLength exceed Integer.MAX_VALUE\n */\n", "func_signal": "public void appendBits(int val, int len)", "code": "{\n\tif (len < 0 || len > 31 || val >>> len != 0)\n\t\tthrow new IllegalArgumentException(\"Value out of range\");\n\tif (Integer.MAX_VALUE - bitLength < len)\n\t\tthrow new IllegalStateException(\"Maximum length reached\");\n\tfor (int i = len - 1; i >= 0; i--, bitLength++)  // Append bit by bit\n\t\tdata.set(bitLength, QrCode.getBit(val, i));\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/BitBuffer.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "// Returns a new list of segments that is optimal for the given text at the given version number.\n", "func_signal": "private static List<QrSegment> makeSegmentsOptimally(int[] codePoints, int version)", "code": "{\n\tif (codePoints.length == 0)\n\t\treturn new ArrayList<>();\n\tMode[] charModes = computeCharacterModes(codePoints, version);\n\treturn splitIntoSegments(codePoints, charModes);\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegmentAdvanced.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Returns a list of zero or more segments to represent the specified Unicode text string.\n * The result may use various segment modes and switch modes to optimize the length of the bit stream.\n * @param text the text to be encoded, which can be any Unicode string\n * @return a new mutable list (not {@code null}) of segments (not {@code null}) containing the text\n * @throws NullPointerException if the text is {@code null}\n */\n", "func_signal": "public static List<QrSegment> makeSegments(String text)", "code": "{\n\tObjects.requireNonNull(text);\n\t\n\t// Select the most efficient segment encoding automatically\n\tList<QrSegment> result = new ArrayList<>();\n\tif (text.equals(\"\"));  // Leave result empty\n\telse if (NUMERIC_REGEX.matcher(text).matches())\n\t\tresult.add(makeNumeric(text));\n\telse if (ALPHANUMERIC_REGEX.matcher(text).matches())\n\t\tresult.add(makeAlphanumeric(text));\n\telse\n\t\tresult.add(makeBytes(text.getBytes(StandardCharsets.UTF_8)));\n\treturn result;\n}", "path": "QR-Code-generator/java/src/main/java/io/nayuki/qrcodegen/QrSegment.java", "commit_date": "2018-10-27 00:00:00", "repo_name": "nayuki/QR-Code-generator", "stars": 4706, "license": "None", "language": "java", "size": 1376}
{"docstring": "/**\n * Set some description of the kind of network type your job needs to have.\n * Not calling this function means the network is not necessary, as the default is\n * {@link NetworkType#ANY}.\n *\n * <br>\n * <br>\n *\n * Note that if the deadline is met and the requirements aren't enforced, then your job\n * will run and ignore this requirement.\n *\n * @param networkType The required network type.\n * @see #setRequirementsEnforced(boolean)\n * @see #setExecutionWindow(long, long)\n */\n", "func_signal": "public Builder setRequiredNetworkType(@Nullable NetworkType networkType)", "code": "{\n    mNetworkType = networkType;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * It's possible to set several requirements for a job, however, not all of them need to\n * be considered by the underlying {@link JobApi}. If the requirements are enforced, then\n * the device state is checked before your job runs. If at least one requirement isn't met,\n * then the job is rescheduled and not run.\n *\n * <br>\n * <br>\n *\n * It's possible to check single requirements in your job, if you keep this field set to\n * {@code false}. The {@link Job} class provides several methods, e.g.\n * {@link Job#isRequirementChargingMet()}.\n *\n * <br>\n * <br>\n *\n * Note that it's not allowed to set requirements for exact jobs. That wouldn't make sense,\n * because the job needs to run at a specific time no matter of the device's state.\n *\n * <br>\n * <br>\n *\n * The default value is set to {@code false}.\n *\n * @param enforced If {@code true}, then all set requirements are manually checked.\n */\n", "func_signal": "public Builder setRequirementsEnforced(boolean enforced)", "code": "{\n    mRequirementsEnforced = enforced;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Change the back-off policy for a non periodic job. The default value is set to 30 seconds\n * and {@link BackoffPolicy#EXPONENTIAL}. The time is increasing each time a job fails and\n * returns {@link Job.Result#RESCHEDULE}, but capped at 5 hours.\n *\n * <br>\n * <br>\n *\n * Note that it's not allowed to change the back-off criteria for a periodic job.\n *\n * @param backoffMs The initial interval to wait when the job has been rescheduled.\n * @param backoffPolicy Is either {@link BackoffPolicy#LINEAR} or {@link BackoffPolicy#EXPONENTIAL}.\n * @see Job.Result#RESCHEDULE\n * @see Job#onReschedule(int)\n */\n", "func_signal": "public Builder setBackoffCriteria(long backoffMs, @NonNull BackoffPolicy backoffPolicy)", "code": "{\n    mBackoffMs = JobPreconditions.checkArgumentPositive(backoffMs, \"backoffMs must be > 0\");\n    mBackoffPolicy = JobPreconditions.checkNotNull(backoffPolicy);\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Cancel either the pending {@link JobRequest} or the running {@link Job}.\n *\n * @param jobId The unique ID of the {@link JobRequest} or running {@link Job}.\n * @return {@code true} if a request or job were found and canceled.\n */\n", "func_signal": "public boolean cancel(int jobId)", "code": "{\n    // call both methods\n    boolean result = cancelInner(getJobRequest(jobId, true)) | cancelInner(getJob(jobId));\n    JobProxy.Common.cleanUpOrphanedJob(mContext, jobId); // do this as well, just in case\n    return result;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobManager.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Cancel this request if it has been scheduled. Note that if the job isn't periodic, then the\n * time passed since the job has been scheduled is subtracted from the time frame. For example\n * a job should run between 4 and 6 seconds from now. You cancel the scheduled job after 2\n * seconds, then the job will run between 2 and 4 seconds after it's been scheduled again.\n *\n * @return A builder to modify the parameters.\n */\n", "func_signal": "public Builder cancelAndEdit()", "code": "{\n    // create a temporary variable, because .cancel() will reset mScheduledAt\n    long scheduledAt = mScheduledAt;\n\n    JobManager.instance().cancel(getJobId());\n    Builder builder = new Builder(this.mBuilder);\n    mStarted = false;\n\n    if (!isPeriodic()) {\n        long offset = JobConfig.getClock().currentTimeMillis() - scheduledAt;\n        long minValue = 1L; // 1ms\n        builder.setExecutionWindow(Math.max(minValue, getStartMs() - offset), Math.max(minValue, getEndMs() - offset));\n    }\n\n    return builder;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Helper method to schedule a request on a background thread. This is helpful to avoid IO operations\n * on the main thread. The callback notifies you about the job ID or a possible failure.\n *\n * @param callback The callback which is invoked after the request has been scheduled.\n */\n", "func_signal": "public void scheduleAsync(@NonNull final JobScheduledCallback callback)", "code": "{\n    JobPreconditions.checkNotNull(callback);\n    JobConfig.getExecutorService().execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                int jobId = schedule();\n                callback.onJobScheduled(jobId, getTag(), null);\n            } catch (Exception e) {\n                callback.onJobScheduled(JobScheduledCallback.JOB_ID_ERROR, getTag(), e);\n            }\n        }\n    });\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Specify that to run, the job needs the device to be in idle mode. This defaults to\n * {@code false}. Idle mode is a loose definition provided by the system, which means that the device\n * is not in use, and has not been in use for some time. As such, it is a good time to\n * perform resource heavy jobs.\n *\n * <br>\n * <br>\n *\n * Note that if the deadline is met and the requirements aren't enforced, then your job\n * will run and ignore this requirement.\n *\n * @param requiresDeviceIdle Whether or not the device needs be idle.\n * @see #setRequirementsEnforced(boolean)\n * @see #setExecutionWindow(long, long)\n */\n", "func_signal": "public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle)", "code": "{\n    mRequiresDeviceIdle = requiresDeviceIdle;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Specify that this job should recur with the provided interval and flex, not more than once per period.\n * The flex controls how close to the end of a period the job can run. For example, specifying an interval\n * of 60 seconds and a flex of 15 seconds will allow the scheduler to determine the best moment between\n * the 45th and 60th second at which to execute your job.\n *\n * <br>\n * <br>\n *\n * As default a job isn't periodic. It isn't allowed to specify a time window for a periodic job.\n * Instead you set an interval with this function. Since {@link Job.Result#RESCHEDULE} is ignored for\n * periodic jobs, setting a back-off criteria is illegal as well.\n *\n * @param intervalMs The job should run at most once every {@code intervalMs}. The minimum value is {@code 15min}.\n * @param flexMs How close to the end of the period the job should run. The minimum value is {@code 5min}.\n * @see #MIN_INTERVAL\n * @see #MIN_FLEX\n */\n", "func_signal": "public Builder setPeriodic(long intervalMs, long flexMs)", "code": "{\n    mIntervalMs = JobPreconditions.checkArgumentInRange(intervalMs, getMinInterval(), Long.MAX_VALUE, \"intervalMs\");\n    mFlexMs = JobPreconditions.checkArgumentInRange(flexMs, getMinFlex(), mIntervalMs, \"flexMs\");\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Initializes the singleton. It's necessary to call this function before using the {@code JobManager}.\n * Calling it multiple times has not effect.\n *\n * @param context Any {@link Context} to instantiate the singleton object.\n * @return The new or existing singleton object.\n * @throws JobManagerCreateException When the singleton couldn't be created.\n */\n", "func_signal": "public static JobManager create(@NonNull Context context) throws JobManagerCreateException", "code": "{\n    if (instance == null) {\n        synchronized (JobManager.class) {\n            if (instance == null) {\n                JobPreconditions.checkNotNull(context, \"Context cannot be null\");\n\n                if (context.getApplicationContext() != null) {\n                    // could be null in unit tests\n                    context = context.getApplicationContext();\n                }\n\n                JobApi api = JobApi.getDefault(context);\n                if (api == JobApi.V_14 && !api.isSupported(context)) {\n                    throw new JobManagerCreateException(\"All APIs are disabled, cannot schedule any job\");\n                }\n\n                instance = new JobManager(context);\n\n                if (!JobUtil.hasWakeLockPermission(context)) {\n                    CAT.w(\"No wake lock permission\");\n                }\n                if (!JobUtil.hasBootPermission(context)) {\n                    CAT.w(\"No boot permission\");\n                }\n\n                sendAddJobCreatorIntent(context);\n            }\n        }\n    }\n\n    return instance;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobManager.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Sets whether this request should overwrite any preexisting jobs with the same tag. If {@code true},\n * then this request calls {@link JobManager#cancelAllForTag(String)} with the given tag before\n * being scheduled.\n *\n * @param updateCurrent If {@code true} this request will cancel any preexisting job with the same tag\n *                      while being scheduled.\n */\n", "func_signal": "public Builder setUpdateCurrent(boolean updateCurrent)", "code": "{\n    mUpdateCurrent = updateCurrent;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Specify that to run this job, the device needs to be plugged in. The default is set\n * to {@code false}.\n *\n * <br>\n * <br>\n *\n * Note that if the deadline is met and the requirements aren't enforced, then your job\n * will run and ignore this requirement.\n *\n * @param requiresCharging Whether or not the device needs to be plugged in.\n * @see #setRequirementsEnforced(boolean)\n * @see #setExecutionWindow(long, long)\n */\n", "func_signal": "public Builder setRequiresCharging(boolean requiresCharging)", "code": "{\n    mRequiresCharging = requiresCharging;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * @return The {@link JobRequest} with this parameters to hand to the {@link JobManager}.\n */\n", "func_signal": "public JobRequest build()", "code": "{\n    JobPreconditions.checkNotEmpty(mTag);\n    JobPreconditions.checkArgumentPositive(mBackoffMs, \"backoffMs must be > 0\");\n    JobPreconditions.checkNotNull(mBackoffPolicy);\n    JobPreconditions.checkNotNull(mNetworkType);\n\n    if (mIntervalMs > 0) {\n        JobPreconditions.checkArgumentInRange(mIntervalMs, getMinInterval(), Long.MAX_VALUE, \"intervalMs\");\n        JobPreconditions.checkArgumentInRange(mFlexMs, getMinFlex(), mIntervalMs, \"flexMs\");\n\n        if (mIntervalMs < MIN_INTERVAL || mFlexMs < MIN_FLEX) {\n            // this means the debug flag is set to true\n            CAT.w(\"AllowSmallerIntervals enabled, this will crash on Android N and later, interval %d (minimum is %d), flex %d (minimum is %d)\",\n                    mIntervalMs, MIN_INTERVAL, mFlexMs, MIN_FLEX);\n        }\n    }\n\n    if (mExact && mIntervalMs > 0) {\n        throw new IllegalArgumentException(\"Can't call setExact() on a periodic job.\");\n    }\n    if (mExact && mStartMs != mEndMs) {\n        throw new IllegalArgumentException(\"Can't call setExecutionWindow() for an exact job.\");\n    }\n    if (mExact && (mRequirementsEnforced || mRequiresDeviceIdle || mRequiresCharging || !DEFAULT_NETWORK_TYPE.equals(mNetworkType)\n            || mRequiresBatteryNotLow || mRequiresStorageNotLow)) {\n        throw new IllegalArgumentException(\"Can't require any condition for an exact job.\");\n    }\n\n    if (mIntervalMs <= 0 && (mStartMs == -1 || mEndMs == -1)) {\n        throw new IllegalArgumentException(\"You're trying to build a job with no constraints, this is not allowed.\");\n    }\n    if (mIntervalMs > 0 && (mStartMs != -1 || mEndMs != -1)) {\n        throw new IllegalArgumentException(\"Can't call setExecutionWindow() on a periodic job.\");\n    }\n    if (mIntervalMs > 0 && (mBackoffMs != DEFAULT_BACKOFF_MS || !DEFAULT_BACKOFF_POLICY.equals(mBackoffPolicy))) {\n        throw new IllegalArgumentException(\"A periodic job will not respect any back-off policy, so calling \"\n                + \"setBackoffCriteria() with setPeriodic() is an error.\");\n    }\n\n    if (mIntervalMs <= 0 && (mStartMs > WINDOW_THRESHOLD_WARNING || mEndMs > WINDOW_THRESHOLD_WARNING)) {\n        CAT.w(\"Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/wiki/FAQ\");\n    }\n\n    if (mIntervalMs <= 0 && (mStartMs > TimeUnit.DAYS.toMillis(365))) {\n        CAT.w(\"Warning: job with tag %s scheduled over a year in the future\", mTag);\n    }\n\n    if (mId != CREATE_ID) {\n        JobPreconditions.checkArgumentNonnegative(mId, \"id can't be negative\");\n    }\n\n    Builder builder = new Builder(this);\n    if (mId == CREATE_ID) {\n        builder.mId = JobManager.instance().getJobStorage().nextJobId();\n        JobPreconditions.checkArgumentNonnegative(builder.mId, \"id can't be negative\");\n    }\n\n    return new JobRequest(builder);\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Specify that to run this job, the device storage shouldn't be low.\n * The default is set to {@code false}. <b>Note: </b>This requirement only has an\n * affect on Android O, but not lower versions. It's never guaranteed that enough\n * space is available, when your job runs. This is more like a hint.\n *\n * <br>\n * <br>\n *\n * Note that if the deadline is met and the requirements aren't enforced, then your job\n * will run and ignore this requirement.\n *\n * @param requiresStorageNotLow Whether or not the device storage shouldn't be low.\n * @see #setRequirementsEnforced(boolean)\n * @see #setExecutionWindow(long, long)\n */\n", "func_signal": "public Builder setRequiresStorageNotLow(boolean requiresStorageNotLow)", "code": "{\n    mRequiresStorageNotLow = requiresStorageNotLow;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Set the time window when the job will be run. Note that it's mandatory to set a time for\n * one-off tasks, but it's not allowed to call this method together with\n * {@link #setPeriodic(long)} or {@link #setExact(long)}. For those types jobs it doesn't\n * make sense to have a time window.\n *\n * <br>\n * <br>\n *\n * The window specified is treated as offset from now, e.g. the job will run between\n * {@code System.currentTimeMillis() + startInMs} and\n * {@code System.currentTimeMillis() + endInMs}.\n *\n * <br>\n * <br>\n *\n * The maximum value for each argument is {@code Long.MAX_VALUE / 3 * 2} (about 53_375_995_583 days).\n * Otherwise some APIs schedule the job immediately. No exception is thrown if an argument is greater\n * than the maximum value, the arguments are silently being clamped.\n *\n * <br>\n * <br>\n *\n * <b>NOTE:</b> It's not recommended to have such big execution windows. The {@code AlarmManager} used\n * as fallback API doesn't allow setting a start date. Although being inexact, the execution time is\n * the arithmetic average of {@code startInMs} and {@code endInMs}. The result could be that your job never\n * runs on pre Android 5.0 devices, if one argument is too large.\n *\n * @param startInMs Earliest point from which your task is eligible to run.\n * @param endInMs Latest point at which your task must be run.\n */\n", "func_signal": "public Builder setExecutionWindow(long startInMs, long endInMs)", "code": "{\n    mStartMs = JobPreconditions.checkArgumentPositive(startInMs, \"startInMs must be greater than 0\");\n    mEndMs = JobPreconditions.checkArgumentInRange(endInMs, startInMs, Long.MAX_VALUE, \"endInMs\");\n\n    if (mStartMs > WINDOW_THRESHOLD_MAX) {\n        CAT.i(\"startInMs reduced from %d days to %d days\", TimeUnit.MILLISECONDS.toDays(mStartMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));\n        mStartMs = WINDOW_THRESHOLD_MAX;\n    }\n    if (mEndMs > WINDOW_THRESHOLD_MAX) {\n        CAT.i(\"endInMs reduced from %d days to %d days\", TimeUnit.MILLISECONDS.toDays(mEndMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));\n        mEndMs = WINDOW_THRESHOLD_MAX;\n    }\n\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Adds optional extras. This is persisted, so only primitive types are allowed. This method overrides\n * values with the same keys inside of {@code extras}, which were set before.\n *\n * @param extras Bundle containing extras which you can retrieve with {@link Job.Params#getExtras()}.\n */\n", "func_signal": "public Builder addExtras(@NonNull PersistableBundleCompat extras)", "code": "{\n    if (mExtras == null) {\n        mExtras = extras;\n    } else {\n        mExtras.putAll(extras);\n    }\n    mExtrasXml = null;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Set optional extras. This is persisted, so only primitive types are allowed.\n *\n * @param extras Bundle containing extras which you can retrieve with {@link Job.Params#getExtras()}.\n */\n", "func_signal": "public Builder setExtras(@Nullable PersistableBundleCompat extras)", "code": "{\n    if (extras == null) {\n        mExtras = null;\n        mExtrasXml = null;\n    } else {\n        mExtras = new PersistableBundleCompat(extras);\n    }\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Schedule a request which will be executed in the future. If you want to update an existing\n * {@link JobRequest}, call {@link JobRequest#cancelAndEdit()}, update your parameters and call\n * this method again. Calling this method with the same request multiple times without cancelling\n * it is idempotent.\n *\n * @param request The {@link JobRequest} which will run in the future.\n */\n", "func_signal": "public synchronized void schedule(@NonNull JobRequest request)", "code": "{\n    // call must be synchronized, otherwise with isUpdateCurrent() true it's possible to end up in a race condition with multiple jobs scheduled\n\n    if (mJobCreatorHolder.isEmpty()) {\n        CAT.w(\"you haven't registered a JobCreator with addJobCreator(), it's likely that your job never will be executed\");\n    }\n\n    if (request.getScheduledAt() > 0) {\n        return;\n    }\n\n    if (request.isUpdateCurrent()) {\n        cancelAllForTag(request.getTag());\n    }\n\n    JobProxy.Common.cleanUpOrphanedJob(mContext, request.getJobId());\n\n    JobApi jobApi = request.getJobApi();\n    boolean periodic = request.isPeriodic();\n    boolean flexSupport = periodic && jobApi.isFlexSupport() && request.getFlexMs() < request.getIntervalMs();\n\n    request.setScheduledAt(JobConfig.getClock().currentTimeMillis());\n    request.setFlexSupport(flexSupport);\n    getJobStorage().put(request);\n\n    try {\n        scheduleWithApi(request, jobApi, periodic, flexSupport);\n        return;\n    } catch (JobProxyIllegalStateException e) {\n        // try again below, the other cases stop\n\n    } catch (Exception e) {\n        // if something fails, don't keep the job in the database, it would be rescheduled later\n        getJobStorage().remove(request);\n        throw e;\n    }\n\n    try {\n        // try to reload the proxy\n        jobApi.invalidateCachedProxy();\n\n        scheduleWithApi(request, jobApi, periodic, flexSupport);\n        return;\n    } catch (Exception e) {\n        if (jobApi == JobApi.V_14 || jobApi == JobApi.V_19) {\n            // at this stage we cannot do anything\n            getJobStorage().remove(request);\n            throw e;\n        } else {\n            jobApi = JobApi.V_19.isSupported(mContext) ? JobApi.V_19 : JobApi.V_14; // try one last time\n        }\n    }\n\n    try {\n        scheduleWithApi(request, jobApi, periodic, flexSupport);\n    } catch (Exception e) {\n        // if something fails, don't keep the job in the database, it would be rescheduled later\n        getJobStorage().remove(request);\n        throw e;\n    }\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobManager.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Schedule a request which will be executed in the future. If you want to update an existing\n * {@link JobRequest}, call {@link JobRequest#cancelAndEdit()}, update your parameters and call\n * this method again. Calling this method on the same request instance multiple times without\n * cancelling is idempotent.\n *\n * <br>\n * <br>\n *\n * Convenience method. Internally it calls {@link JobManager#schedule(JobRequest)}\n * and {@link #getJobId()} for this request.\n *\n * @return The unique ID for this job.\n */\n", "func_signal": "public int schedule()", "code": "{\n    JobManager.instance().schedule(this);\n    return getJobId();\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * @return Whether any of the requirements is different than the default value.\n */\n", "func_signal": "public boolean hasRequirements()", "code": "{\n    return requiresCharging() || requiresDeviceIdle() || requiresBatteryNotLow() || requiresStorageNotLow()\n            || requiredNetworkType() != DEFAULT_NETWORK_TYPE;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/**\n * Set optional transient extras. <b>WARNING:</b> It's not guaranteed that a transient job will\n * run at all, e.g. rebooting the device or force closing the app will cancel the job. This is\n * only helpful for jobs which should start soon and can be cancelled automatically.\n *\n * <br>\n * <br>\n *\n * If the passed in bundle is {@code null} or empty, then the previous extras are reset to the default\n * and the job won't be transient.\n *\n * @param extras  Bundle containing extras you want the scheduler to hold on to for you.\n */\n", "func_signal": "public Builder setTransientExtras(@Nullable Bundle extras)", "code": "{\n    mTransient = extras != null && !extras.isEmpty();\n    mTransientExtras = mTransient ? new Bundle(extras) : Bundle.EMPTY;\n    return this;\n}", "path": "android-job/library/src/main/java/com/evernote/android/job/JobRequest.java", "commit_date": "2019-04-11 00:00:00", "repo_name": "Evernote/android-job", "stars": 5389, "license": "apache-2.0", "language": "java", "size": 1860}
{"docstring": "/** Will be empty until document is loaded */\n", "func_signal": "public List<PdfDocument.Bookmark> getTableOfContents()", "code": "{\n    if (pdfFile == null) {\n        return Collections.emptyList();\n    }\n    return pdfFile.getBookmarks();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Called when a rendering task is over and\n * a PagePart has been freshly created.\n *\n * @param part The created PagePart.\n */\n", "func_signal": "public void onBitmapRendered(PagePart part)", "code": "{\n    // when it is first rendered part\n    if (state == State.LOADED) {\n        state = State.SHOWN;\n        callbacks.callOnRender(pdfFile.getPagesCount());\n    }\n\n    if (part.isThumbnail()) {\n        cacheManager.cacheThumbnail(part);\n    } else {\n        cacheManager.cachePart(part);\n    }\n    redraw();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Returns null if document is not loaded */\n", "func_signal": "public PdfDocument.Meta getDocumentMeta()", "code": "{\n    if (pdfFile == null) {\n        return null;\n    }\n    return pdfFile.getMetaData();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Call after view size change to recalculate page sizes, offsets and document length\n *\n * @param viewSize new size of changed view\n */\n", "func_signal": "public void recalculatePageSizes(Size viewSize)", "code": "{\n    pageSizes.clear();\n    PageSizeCalculator calculator = new PageSizeCalculator(pageFitPolicy, originalMaxWidthPageSize,\n            originalMaxHeightPageSize, viewSize, fitEachPage);\n    maxWidthPageSize = calculator.getOptimalMaxWidthPageSize();\n    maxHeightPageSize = calculator.getOptimalMaxHeightPageSize();\n\n    for (Size size : originalPageSizes) {\n        pageSizes.add(calculator.calculate(size));\n    }\n    if (autoSpacing) {\n        prepareAutoSpacing(viewSize);\n    }\n    prepareDocLen();\n    preparePagesOffset();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PdfFile.java", "commit_date": "2018-07-08 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Get secondary page offset, that is X for vertical scroll and Y for horizontal scroll */\n", "func_signal": "public float getSecondaryPageOffset(int pageIndex, float zoom)", "code": "{\n    SizeF pageSize = getPageSize(pageIndex);\n    if (isVertical) {\n        float maxWidth = getMaxPageWidth();\n        return zoom * (maxWidth - pageSize.getWidth()) / 2; //x\n    } else {\n        float maxHeight = getMaxPageHeight();\n        return zoom * (maxHeight - pageSize.getHeight()) / 2; //y\n    }\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PdfFile.java", "commit_date": "2018-07-08 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Limits the given <b>number</b> between the other values\n * @param number  The number to limit.\n * @param between The smallest value the number can take.\n * @param and     The biggest value the number can take.\n * @return The limited number.\n */\n", "func_signal": "public static float limit(float number, float between, float and)", "code": "{\n    if (number <= between) {\n        return between;\n    }\n    if (number >= and) {\n        return and;\n    }\n    return number;\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/util/MathUtils.java", "commit_date": "2016-09-16 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Draw a given PagePart on the canvas */\n", "func_signal": "private void drawPart(Canvas canvas, PagePart part)", "code": "{\n    // Can seem strange, but avoid lot of calls\n    RectF pageRelativeBounds = part.getPageRelativeBounds();\n    Bitmap renderedBitmap = part.getRenderedBitmap();\n\n    if (renderedBitmap.isRecycled()) {\n        return;\n    }\n\n    // Move to the target page\n    float localTranslationX = 0;\n    float localTranslationY = 0;\n    SizeF size = pdfFile.getPageSize(part.getPage());\n\n    if (swipeVertical) {\n        localTranslationY = pdfFile.getPageOffset(part.getPage(), zoom);\n        float maxWidth = pdfFile.getMaxPageWidth();\n        localTranslationX = toCurrentScale(maxWidth - size.getWidth()) / 2;\n    } else {\n        localTranslationX = pdfFile.getPageOffset(part.getPage(), zoom);\n        float maxHeight = pdfFile.getMaxPageHeight();\n        localTranslationY = toCurrentScale(maxHeight - size.getHeight()) / 2;\n    }\n    canvas.translate(localTranslationX, localTranslationY);\n\n    Rect srcRect = new Rect(0, 0, renderedBitmap.getWidth(),\n            renderedBitmap.getHeight());\n\n    float offsetX = toCurrentScale(pageRelativeBounds.left * size.getWidth());\n    float offsetY = toCurrentScale(pageRelativeBounds.top * size.getHeight());\n    float width = toCurrentScale(pageRelativeBounds.width() * size.getWidth());\n    float height = toCurrentScale(pageRelativeBounds.height() * size.getHeight());\n\n    // If we use float values for this rectangle, there will be\n    // a possible gap between page parts, especially when\n    // the zoom level is high.\n    RectF dstRect = new RectF((int) offsetX, (int) offsetY,\n            (int) (offsetX + width),\n            (int) (offsetY + height));\n\n    // Check if bitmap is in the screen\n    float translationX = currentXOffset + localTranslationX;\n    float translationY = currentYOffset + localTranslationY;\n    if (translationX + dstRect.left >= getWidth() || translationX + dstRect.right <= 0 ||\n            translationY + dstRect.top >= getHeight() || translationY + dstRect.bottom <= 0) {\n        canvas.translate(-localTranslationX, -localTranslationY);\n        return;\n    }\n\n    canvas.drawBitmap(renderedBitmap, srcRect, dstRect, paint);\n\n    if (Constants.DEBUG_MODE) {\n        debugPaint.setColor(part.getPage() % 2 == 0 ? Color.RED : Color.BLUE);\n        canvas.drawRect(dstRect, debugPaint);\n    }\n\n    // Restore the canvas position\n    canvas.translate(-localTranslationX, -localTranslationY);\n\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Get primary page offset, that is Y for vertical scroll and X for horizontal scroll */\n", "func_signal": "public float getPageOffset(int pageIndex, float zoom)", "code": "{\n    int docPage = documentPage(pageIndex);\n    if (docPage < 0) {\n        return 0;\n    }\n    return pageOffsets.get(pageIndex) * zoom;\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PdfFile.java", "commit_date": "2018-07-08 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Checks if whole document can be displayed on screen, doesn't include zoom\n *\n * @return true if whole document can displayed at once, false otherwise\n */\n", "func_signal": "public boolean documentFitsView()", "code": "{\n    float len = pdfFile.getDocLen(1);\n    if (swipeVertical) {\n        return len < getHeight();\n    } else {\n        return len < getWidth();\n    }\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Handle fling animation */\n", "func_signal": "@Override\npublic void computeScroll()", "code": "{\n    super.computeScroll();\n    if (isInEditMode()) {\n        return;\n    }\n    animationManager.computeFling();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Given the UserPage number, this method restrict it\n * to be sure it's an existing page. It takes care of\n * using the user defined pages if any.\n *\n * @param userPage A page number.\n * @return A restricted valid page number (example : -2 => 0)\n */\n", "func_signal": "public int determineValidPageNumberFrom(int userPage)", "code": "{\n    if (userPage <= 0) {\n        return 0;\n    }\n    if (originalUserPages != null) {\n        if (userPage >= originalUserPages.length) {\n            return originalUserPages.length - 1;\n        }\n    } else {\n        if (userPage >= getPagesCount()) {\n            return getPagesCount() - 1;\n        }\n    }\n    return userPage;\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PdfFile.java", "commit_date": "2018-07-08 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Animate to the nearest snapping position for the current SnapPolicy\n */\n", "func_signal": "public void performPageSnap()", "code": "{\n    if (!pageSnap || pdfFile == null || pdfFile.getPagesCount() == 0) {\n        return;\n    }\n    int centerPage = findFocusPage(currentXOffset, currentYOffset);\n    SnapEdge edge = findSnapEdge(centerPage);\n    if (edge == SnapEdge.NONE) {\n        return;\n    }\n\n    float offset = snapOffsetForPage(centerPage, edge);\n    if (swipeVertical) {\n        animationManager.startYAnimation(currentYOffset, -offset);\n    } else {\n        animationManager.startXAnimation(currentXOffset, -offset);\n    }\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Will be empty until document is loaded */\n", "func_signal": "public List<PdfDocument.Link> getLinks(int page)", "code": "{\n    if (pdfFile == null) {\n        return Collections.emptyList();\n    }\n    return pdfFile.getPageLinks(page);\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * @param progress   must be between 0 and 1\n * @param moveHandle whether to move scroll handle\n * @see PDFView#getPositionOffset()\n */\n", "func_signal": "public void setPositionOffset(float progress, boolean moveHandle)", "code": "{\n    if (swipeVertical) {\n        moveTo(currentXOffset, (-pdfFile.getDocLen(zoom) + getHeight()) * progress, moveHandle);\n    } else {\n        moveTo((-pdfFile.getDocLen(zoom) + getWidth()) * progress, currentYOffset, moveHandle);\n    }\n    loadPageByOffset();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Get current position as ratio of document length to visible area.\n * 0 means that document start is visible, 1 that document end is visible\n *\n * @return offset between 0 and 1\n */\n", "func_signal": "public float getPositionOffset()", "code": "{\n    float offset;\n    if (swipeVertical) {\n        offset = -currentYOffset / (pdfFile.getDocLen(zoom) - getHeight());\n    } else {\n        offset = -currentXOffset / (pdfFile.getDocLen(zoom) - getWidth());\n    }\n    return MathUtils.limit(offset, 0, 1);\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Load all the parts around the center of the screen,\n * taking into account X and Y offsets, zoom level, and\n * the current page displayed\n */\n", "func_signal": "public void loadPages()", "code": "{\n    if (pdfFile == null || renderingHandler == null) {\n        return;\n    }\n\n    // Cancel all current tasks\n    renderingHandler.removeMessages(RenderingHandler.MSG_RENDER_TASK);\n    cacheManager.makeANewSet();\n\n    pagesLoader.loadPages();\n    redraw();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Go to the given page.\n *\n * @param page Page index.\n */\n", "func_signal": "public void jumpTo(int page, boolean withAnimation)", "code": "{\n    if (pdfFile == null) {\n        return;\n    }\n\n    page = pdfFile.determineValidPageNumberFrom(page);\n    float offset = page == 0 ? 0 : -pdfFile.getPageOffset(page, zoom);\n    if (swipeVertical) {\n        if (withAnimation) {\n            animationManager.startYAnimation(currentYOffset, offset);\n        } else {\n            moveTo(currentXOffset, offset);\n        }\n    } else {\n        if (withAnimation) {\n            animationManager.startXAnimation(currentXOffset, offset);\n        } else {\n            moveTo(offset, currentYOffset);\n        }\n    }\n    showPage(page);\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/** Construct the initial view */\n", "func_signal": "public PDFView(Context context, AttributeSet set)", "code": "{\n    super(context, set);\n\n    renderingHandlerThread = new HandlerThread(\"PDF renderer\");\n\n    if (isInEditMode()) {\n        return;\n    }\n\n    cacheManager = new CacheManager();\n    animationManager = new AnimationManager(this);\n    dragPinchManager = new DragPinchManager(this, animationManager);\n    pagesLoader = new PagesLoader(this);\n\n    paint = new Paint();\n    debugPaint = new Paint();\n    debugPaint.setStyle(Style.STROKE);\n\n    pdfiumCore = new PdfiumCore(context);\n    setWillNotDraw(false);\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Get the page's height if swiping vertical, or width if swiping horizontal.\n */\n", "func_signal": "public float getPageLength(int pageIndex, float zoom)", "code": "{\n    SizeF size = getPageSize(pageIndex);\n    return (isVertical ? size.getHeight() : size.getWidth()) * zoom;\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PdfFile.java", "commit_date": "2018-07-08 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Move to the given X and Y offsets, but check them ahead of time\n * to be sure not to go outside the the big strip.\n *\n * @param offsetX    The big strip X offset to use as the left border of the screen.\n * @param offsetY    The big strip Y offset to use as the right border of the screen.\n * @param moveHandle whether to move scroll handle or not\n */\n", "func_signal": "public void moveTo(float offsetX, float offsetY, boolean moveHandle)", "code": "{\n    if (swipeVertical) {\n        // Check X offset\n        float scaledPageWidth = toCurrentScale(pdfFile.getMaxPageWidth());\n        if (scaledPageWidth < getWidth()) {\n            offsetX = getWidth() / 2 - scaledPageWidth / 2;\n        } else {\n            if (offsetX > 0) {\n                offsetX = 0;\n            } else if (offsetX + scaledPageWidth < getWidth()) {\n                offsetX = getWidth() - scaledPageWidth;\n            }\n        }\n\n        // Check Y offset\n        float contentHeight = pdfFile.getDocLen(zoom);\n        if (contentHeight < getHeight()) { // whole document height visible on screen\n            offsetY = (getHeight() - contentHeight) / 2;\n        } else {\n            if (offsetY > 0) { // top visible\n                offsetY = 0;\n            } else if (offsetY + contentHeight < getHeight()) { // bottom visible\n                offsetY = -contentHeight + getHeight();\n            }\n        }\n\n        if (offsetY < currentYOffset) {\n            scrollDir = ScrollDir.END;\n        } else if (offsetY > currentYOffset) {\n            scrollDir = ScrollDir.START;\n        } else {\n            scrollDir = ScrollDir.NONE;\n        }\n    } else {\n        // Check Y offset\n        float scaledPageHeight = toCurrentScale(pdfFile.getMaxPageHeight());\n        if (scaledPageHeight < getHeight()) {\n            offsetY = getHeight() / 2 - scaledPageHeight / 2;\n        } else {\n            if (offsetY > 0) {\n                offsetY = 0;\n            } else if (offsetY + scaledPageHeight < getHeight()) {\n                offsetY = getHeight() - scaledPageHeight;\n            }\n        }\n\n        // Check X offset\n        float contentWidth = pdfFile.getDocLen(zoom);\n        if (contentWidth < getWidth()) { // whole document width visible on screen\n            offsetX = (getWidth() - contentWidth) / 2;\n        } else {\n            if (offsetX > 0) { // left visible\n                offsetX = 0;\n            } else if (offsetX + contentWidth < getWidth()) { // right visible\n                offsetX = -contentWidth + getWidth();\n            }\n        }\n\n        if (offsetX < currentXOffset) {\n            scrollDir = ScrollDir.END;\n        } else if (offsetX > currentXOffset) {\n            scrollDir = ScrollDir.START;\n        } else {\n            scrollDir = ScrollDir.NONE;\n        }\n    }\n\n    currentXOffset = offsetX;\n    currentYOffset = offsetY;\n    float positionOffset = getPositionOffset();\n\n    if (moveHandle && scrollHandle != null && !documentFitsView()) {\n        scrollHandle.setScroll(positionOffset);\n    }\n\n    callbacks.callOnPageScroll(getCurrentPage(), positionOffset);\n\n    redraw();\n}", "path": "AndroidPdfViewer/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/PDFView.java", "commit_date": "2019-08-17 00:00:00", "repo_name": "barteksc/AndroidPdfViewer", "stars": 7911, "license": "apache-2.0", "language": "java", "size": 2741}
{"docstring": "/**\n * Update an item to the database in a specified container.\n */\n", "func_signal": "public void updateItemInDatabase(ItemInfo item)", "code": "{\n    ((Executor) MODEL_EXECUTOR).execute(new UpdateItemRunnable(item, () -> {\n        ContentWriter writer = new ContentWriter(mContext);\n        item.onAddToDatabase(writer);\n        return writer;\n    }));\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Factory method for HotseatPredictionUserEdu dialog\n */\n", "func_signal": "public static HotseatEduDialog getDialog(Launcher launcher)", "code": "{\n    LayoutInflater layoutInflater = LayoutInflater.from(launcher);\n    return (HotseatEduDialog) layoutInflater.inflate(\n            R.layout.predicted_hotseat_edu, launcher.getDragLayer(),\n            false);\n\n}", "path": "lawnchair/quickstep/src/com/android/launcher3/hybridhotseat/HotseatEduDialog.java", "commit_date": "2020-08-28 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Opens User education dialog with a list of suggested apps\n */\n", "func_signal": "public void show(List<WorkspaceItemInfo> predictions)", "code": "{\n    if (getParent() != null\n            || predictions.size() < mLauncher.getDeviceProfile().inv.numHotseatIcons\n            || mHotseatEduController == null) {\n        return;\n    }\n    AbstractFloatingView.closeAllOpenViews(mLauncher);\n    attachToContainer();\n    mLauncher.getStatsLogManager().logger().log(LAUNCHER_HOTSEAT_EDU_SEEN);\n    animateOpen();\n    populatePreview(predictions);\n}", "path": "lawnchair/quickstep/src/com/android/launcher3/hybridhotseat/HotseatEduDialog.java", "commit_date": "2020-08-28 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Move and/or resize item in the DB to a new <container, screen, cellX, cellY, spanX, spanY>\n */\n", "func_signal": "public void modifyItemInDatabase(final ItemInfo item,\n        int container, int screenId, int cellX, int cellY, int spanX, int spanY)", "code": "{\n    updateItemInfoProps(item, container, screenId, cellX, cellY);\n    item.spanX = spanX;\n    item.spanY = spanY;\n\n    ((Executor) MODEL_EXECUTOR).execute(new UpdateItemRunnable(item, () ->\n            new ContentWriter(mContext)\n                    .put(Favorites.CONTAINER, item.container)\n                    .put(Favorites.CELLX, item.cellX)\n                    .put(Favorites.CELLY, item.cellY)\n                    .put(Favorites.RANK, item.rank)\n                    .put(Favorites.SPANX, item.spanX)\n                    .put(Favorites.SPANY, item.spanY)\n                    .put(Favorites.SCREEN, item.screenId)));\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Called when place-automatically button is clicked.\n */\n", "func_signal": "public void onPlaceAutomaticallyClick(View v)", "code": "{\n    if (mRequest.getRequestType() == PinItemRequest.REQUEST_TYPE_SHORTCUT) {\n        ItemInstallQueue.INSTANCE.get(this).queueItem(mRequest.getShortcutInfo());\n        logCommand(LAUNCHER_ADD_EXTERNAL_ITEM_PLACED_AUTOMATICALLY);\n        mRequest.accept();\n        finish();\n        return;\n    }\n\n    mPendingBindWidgetId = mAppWidgetHost.allocateAppWidgetId();\n    boolean success = mAppWidgetManager.bindAppWidgetIdIfAllowed(\n            mPendingBindWidgetId, mRequest.getAppWidgetProviderInfo(this), mWidgetOptions);\n    if (success) {\n        acceptWidget(mPendingBindWidgetId);\n        return;\n    }\n\n    // request bind widget\n    mAppWidgetHost.startBindFlow(this, mPendingBindWidgetId,\n            mRequest.getAppWidgetProviderInfo(this), REQUEST_BIND_APPWIDGET);\n}", "path": "lawnchair/src/com/android/launcher3/dragndrop/AddItemActivity.java", "commit_date": "2020-10-02 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Aborts a previous delete operation pending commit\n */\n", "func_signal": "public void abortDelete()", "code": "{\n    mPreparingToUndo = false;\n    mDeleteRunnables.clear();\n    // We do a full reload here instead of just a rebind because Folders change their internal\n    // state when dragging an item out, which clobbers the rebind unless we load from the DB.\n    mModel.forceReload();\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Remove the specified folder and all its contents from the database.\n */\n", "func_signal": "public void deleteFolderAndContentsFromDatabase(final FolderInfo info)", "code": "{\n    ModelVerifier verifier = new ModelVerifier();\n\n    enqueueDeleteRunnable(() -> {\n        ContentResolver cr = mContext.getContentResolver();\n        cr.delete(LauncherSettings.Favorites.CONTENT_URI,\n                LauncherSettings.Favorites.CONTAINER + \"=\" + info.id, null);\n        mBgDataModel.removeItem(mContext, info.contents);\n        info.contents.clear();\n\n        cr.delete(LauncherSettings.Favorites.getContentUri(info.id), null, null);\n        mBgDataModel.removeItem(mContext, info);\n        verifier.verifyModel();\n    });\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Add an item to the database in a specified container. Sets the container, screen, cellX and\n * cellY fields of the item. Also assigns an ID to the item.\n */\n", "func_signal": "public void addItemToDatabase(final ItemInfo item,\n        int container, int screenId, int cellX, int cellY)", "code": "{\n    updateItemInfoProps(item, container, screenId, cellX, cellY);\n\n    final ContentResolver cr = mContext.getContentResolver();\n    item.id = Settings.call(cr, Settings.METHOD_NEW_ITEM_ID).getInt(Settings.EXTRA_VALUE);\n\n    ModelVerifier verifier = new ModelVerifier();\n    final StackTraceElement[] stackTrace = new Throwable().getStackTrace();\n    ((Executor) MODEL_EXECUTOR).execute(() -> {\n        // Write the item on background thread, as some properties might have been updated in\n        // the background.\n        final ContentWriter writer = new ContentWriter(mContext);\n        item.onAddToDatabase(writer);\n        writer.put(Favorites._ID, item.id);\n\n        cr.insert(Favorites.CONTENT_URI, writer.getValues(mContext));\n\n        synchronized (mBgDataModel) {\n            checkItemInfoLocked(item.id, item, stackTrace);\n            mBgDataModel.addItem(mContext, item, true);\n            verifier.verifyModel();\n        }\n    });\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Removes the specified items from the database\n */\n", "func_signal": "public void deleteItemsFromDatabase(final Collection<? extends ItemInfo> items)", "code": "{\n    ModelVerifier verifier = new ModelVerifier();\n    FileLog.d(TAG, \"removing items from db \" + items.stream().map(\n            (item) -> item.getTargetComponent() == null ? \"\"\n                    : item.getTargetComponent().getPackageName()).collect(\n            Collectors.joining(\",\")), new Exception());\n    enqueueDeleteRunnable(() -> {\n        for (ItemInfo item : items) {\n            final Uri uri = Favorites.getContentUri(item.id);\n            mContext.getContentResolver().delete(uri, null, null);\n\n            mBgDataModel.removeItem(mContext, item);\n            verifier.verifyModel();\n        }\n    });\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Asynchronously fetches the list of recent tasks, reusing cached list if available.\n *\n * @param loadKeysOnly Whether to load other associated task data, or just the key\n * @param callback The callback to receive the list of recent tasks\n * @return The change id of the current task list\n */\n", "func_signal": "public synchronized int getTasks(boolean loadKeysOnly, Consumer<ArrayList<Task>> callback)", "code": "{\n    final int requestLoadId = mChangeId;\n    if (mResultsUi.isValidForRequest(requestLoadId, loadKeysOnly)) {\n        // The list is up to date, send the callback on the next frame,\n        // so that requestID can be returned first.\n        if (callback != null) {\n            // Copy synchronously as the changeId might change by next frame\n            ArrayList<Task> result = copyOf(mResultsUi);\n            mMainThreadExecutor.post(() -> callback.accept(result));\n        }\n\n        return requestLoadId;\n    }\n\n    // Kick off task loading in the background\n    UI_HELPER_EXECUTOR.execute(() -> {\n        if (!mResultsBg.isValidForRequest(requestLoadId, loadKeysOnly)) {\n            mResultsBg = loadTasksInBackground(Integer.MAX_VALUE, requestLoadId, loadKeysOnly);\n        }\n        TaskLoadResult loadResult = mResultsBg;\n        mMainThreadExecutor.execute(() -> {\n            mResultsUi = loadResult;\n            if (callback != null) {\n                ArrayList<Task> result = copyOf(mResultsUi);\n                callback.accept(result);\n            }\n        });\n    });\n\n    return requestLoadId;\n}", "path": "lawnchair/quickstep/src/com/android/quickstep/RecentTasksList.java", "commit_date": "2020-06-03 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Shows the surfaceView for the provided contract\n */\n", "func_signal": "public static void show(Launcher launcher, GestureNavContract contract)", "code": "{\n    FloatingSurfaceView view = launcher.getViewCache().getView(R.layout.floating_surface_view,\n            launcher, launcher.getDragLayer());\n    view.mContract = contract;\n    view.mIsOpen = true;\n\n    // Cancel any pending remove\n    Executors.MAIN_EXECUTOR.getHandler().removeCallbacks(view.mRemoveViewRunnable);\n    view.removeViewFromParent();\n    launcher.getDragLayer().addView(view);\n}", "path": "lawnchair/src/com/android/launcher3/views/FloatingSurfaceView.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Fetches the task keys skipping any local cache.\n */\n", "func_signal": "public void getTaskKeys(int numTasks, Consumer<ArrayList<Task>> callback)", "code": "{\n    // Kick off task loading in the background\n    UI_HELPER_EXECUTOR.execute(() -> {\n        ArrayList<Task> tasks = loadTasksInBackground(numTasks, -1, true /* loadKeysOnly */);\n        mMainThreadExecutor.execute(() -> callback.accept(tasks));\n    });\n}", "path": "lawnchair/quickstep/src/com/android/quickstep/RecentTasksList.java", "commit_date": "2020-06-03 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Adds an item to the DB if it was not created previously, or move it to a new\n * <container, screen, cellX, cellY>\n */\n", "func_signal": "public void addOrMoveItemInDatabase(ItemInfo item,\n        int container, int screenId, int cellX, int cellY)", "code": "{\n    if (item.id == ItemInfo.NO_ID) {\n        // From all apps\n        addItemToDatabase(item, container, screenId, cellX, cellY);\n    } else {\n        // From somewhere else\n        moveItemInDatabase(item, container, screenId, cellX, cellY);\n    }\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Delete operations tracked using {@link #enqueueDeleteRunnable} will only be called\n * if {@link #commitDelete} is called. Note that one of {@link #commitDelete()} or\n * {@link #abortDelete} MUST be called after this method, or else all delete\n * operations will remain uncommitted indefinitely.\n */\n", "func_signal": "public void prepareToUndoDelete()", "code": "{\n    if (!mPreparingToUndo) {\n        if (!mDeleteRunnables.isEmpty() && FeatureFlags.IS_STUDIO_BUILD) {\n            throw new IllegalStateException(\"There are still uncommitted delete operations!\");\n        }\n        mDeleteRunnables.clear();\n        mPreparingToUndo = true;\n    }\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Called when the cancel button is clicked.\n */\n", "func_signal": "public void onCancelClick(View v)", "code": "{\n    logCommand(LAUNCHER_ADD_EXTERNAL_ITEM_CANCELLED);\n    finish();\n}", "path": "lawnchair/src/com/android/launcher3/dragndrop/AddItemActivity.java", "commit_date": "2020-10-02 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Deletes the widget info and the widget id.\n */\n", "func_signal": "public void deleteWidgetInfo(final LauncherAppWidgetInfo info, LauncherAppWidgetHost host)", "code": "{\n    if (host != null && !info.isCustomWidget() && info.isWidgetIdAllocated()) {\n        // Deleting an app widget ID is a void call but writes to disk before returning\n        // to the caller...\n        enqueueDeleteRunnable(() -> host.deleteAppWidgetId(info.appWidgetId));\n    }\n    deleteItemFromDatabase(info);\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Create a session and return the id.\n */\n", "func_signal": "private int createSession(String label, Bitmap icon) throws Throwable", "code": "{\n    SessionParams params = new SessionParams(SessionParams.MODE_FULL_INSTALL);\n    params.setAppPackageName(\"test.promise.app\");\n    params.setAppLabel(label);\n    params.setAppIcon(icon);\n    params.setInstallReason(PackageManager.INSTALL_REASON_USER);\n    return mTargetContext.getPackageManager().getPackageInstaller().createSession(params);\n}", "path": "lawnchair/tests/src/com/android/launcher3/compat/PromiseIconUiTest.java", "commit_date": "2020-01-29 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Move an item in the DB to a new <container, screen, cellX, cellY>\n */\n", "func_signal": "public void moveItemInDatabase(final ItemInfo item,\n        int container, int screenId, int cellX, int cellY)", "code": "{\n    updateItemInfoProps(item, container, screenId, cellX, cellY);\n    enqueueDeleteRunnable(new UpdateItemRunnable(item, () ->\n            new ContentWriter(mContext)\n                    .put(Favorites.CONTAINER, item.container)\n                    .put(Favorites.CELLX, item.cellX)\n                    .put(Favorites.CELLY, item.cellY)\n                    .put(Favorites.RANK, item.rank)\n                    .put(Favorites.SCREEN, item.screenId)));\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * Move items in the DB to a new <container, screen, cellX, cellY>. We assume that the\n * cellX, cellY have already been updated on the ItemInfos.\n */\n", "func_signal": "public void moveItemsInDatabase(final ArrayList<ItemInfo> items, int container, int screen)", "code": "{\n    ArrayList<ContentValues> contentValues = new ArrayList<>();\n    int count = items.size();\n\n    for (int i = 0; i < count; i++) {\n        ItemInfo item = items.get(i);\n        updateItemInfoProps(item, container, screen, item.cellX, item.cellY);\n\n        final ContentValues values = new ContentValues();\n        values.put(Favorites.CONTAINER, item.container);\n        values.put(Favorites.CELLX, item.cellX);\n        values.put(Favorites.CELLY, item.cellY);\n        values.put(Favorites.RANK, item.rank);\n        values.put(Favorites.SCREEN, item.screenId);\n\n        contentValues.add(values);\n    }\n    enqueueDeleteRunnable(new UpdateItemsRunnable(items, contentValues));\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "/**\n * If {@link #prepareToUndoDelete} has been called, we store the Runnable to be run when\n * {@link #commitDelete()} is called (or abandoned if {@link #abortDelete} is called).\n * Otherwise, we run the Runnable immediately.\n */\n", "func_signal": "private void enqueueDeleteRunnable(Runnable r)", "code": "{\n    if (mPreparingToUndo) {\n        mDeleteRunnables.add(r);\n    } else {\n        ((Executor) MODEL_EXECUTOR).execute(r);\n    }\n}", "path": "lawnchair/src/com/android/launcher3/model/ModelWriter.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "LawnchairLauncher/lawnchair", "stars": 8154, "license": "other", "language": "java", "size": 576316}
{"docstring": "//GEN-LAST:event_skip_buttonActionPerformed\n", "func_signal": "private void dance_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_dance_buttonActionPerformed\n\n        _download = true;\n\n        setVisible(false);\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_queue_down_buttonActionPerformed\n", "func_signal": "private void queue_top_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_queue_top_buttonActionPerformed\n        // TODO add your handling code here:\n\n        queue_top_button.setEnabled(false);\n\n        THREAD_POOL.execute(() -> {\n            _download.topWaitQueue();\n            MiscTools.GUIRunAndWait(() -> {\n                queue_top_button.setEnabled(true);\n            });\n        });\n\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_ok_buttonActionPerformed\n", "func_signal": "private void current_code_textfieldKeyPressed(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_current_code_textfieldKeyPressed\n        if (evt.getKeyCode() == KeyEvent.VK_ENTER && this.ok_button.isEnabled()) {\n            ok_buttonActionPerformed(null);\n        }\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/Get2FACode.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_restore_buttonActionPerformed\n", "func_signal": "private void _loadMegaDirTree()", "code": "{\n\n        try {\n            MiscTools.GUIRun(() -> {\n                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\n            });\n\n            HashMap<String, Object> folder_nodes;\n\n            MegaAPI ma = new MegaAPI();\n\n            String folder_id = findFirstRegex(\"#F!([^!]+)\", _link, 1);\n\n            String folder_key = findFirstRegex(\"#F![^!]+!(.+)\", _link, 1);\n\n            folder_nodes = ma.getFolderNodes(folder_id, folder_key);\n\n            MegaMutableTreeNode root = null;\n\n            for (Object o : folder_nodes.values()) {\n\n                HashMap<String, Object> current_hashmap_node = (HashMap<String, Object>) o;\n\n                MegaMutableTreeNode current_node;\n\n                if (current_hashmap_node.get(\"jtree_node\") == null) {\n\n                    current_node = new MegaMutableTreeNode(current_hashmap_node);\n\n                    current_hashmap_node.put(\"jtree_node\", current_node);\n\n                } else {\n\n                    current_node = (MegaMutableTreeNode) current_hashmap_node.get(\"jtree_node\");\n                }\n\n                String parent_id = (String) current_hashmap_node.get(\"parent\");\n\n                root = null;\n\n                do {\n\n                    if (folder_nodes.get(parent_id) != null) {\n\n                        HashMap<String, Object> parent_hashmap_node = (HashMap) folder_nodes.get(parent_id);\n\n                        MegaMutableTreeNode parent_node;\n\n                        if (parent_hashmap_node.get(\"jtree_node\") == null) {\n\n                            parent_node = new MegaMutableTreeNode(parent_hashmap_node);\n\n                            parent_hashmap_node.put(\"jtree_node\", parent_node);\n\n                        } else {\n\n                            parent_node = (MegaMutableTreeNode) parent_hashmap_node.get(\"jtree_node\");\n                        }\n\n                        parent_node.add(current_node);\n\n                        parent_id = (String) parent_hashmap_node.get(\"parent\");\n\n                        current_node = parent_node;\n\n                    } else {\n\n                        root = current_node;\n                    }\n\n                } while (current_node != root);\n            }\n\n            if (root == null) {\n                LOG.log(SEVERE, null, \"MEGA FOLDER ERROR (EMPTY?)\");\n\n                _mega_error = 2;\n\n            } else {\n                final JTree ftree = file_tree;\n\n                final MegaMutableTreeNode roott = root;\n\n                MiscTools.GUIRun(() -> {\n                    ftree.setModel(new DefaultTreeModel(sortTree(roott)));\n\n                    ftree.setRootVisible(roott != null ? roott.getChildCount() > 0 : false);\n\n                    ftree.setEnabled(true);\n                });\n\n            }\n\n        } catch (MegaAPIException mex) {\n\n            LOG.log(SEVERE, null, mex);\n\n            _mega_error = mex.getCode();\n\n        } catch (Exception ex) {\n\n            LOG.log(SEVERE, null, ex);\n\n            _mega_error = 1;\n        }\n\n        MiscTools.GUIRun(() -> {\n            setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        });\n\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    cancel_button = new javax.swing.JButton();\n    ok_button = new javax.swing.JButton();\n    lock_label = new javax.swing.JLabel();\n    email_label = new javax.swing.JLabel();\n    status_label = new javax.swing.JLabel();\n    please_label = new javax.swing.JLabel();\n    current_code_textfield = new javax.swing.JTextField();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setTitle(\"2FA CODE\");\n\n    cancel_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    cancel_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-cancel-30.png\"))); // NOI18N\n    cancel_button.setText(\"CANCEL\");\n    cancel_button.setDoubleBuffered(true);\n    cancel_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancel_buttonActionPerformed(evt);\n        }\n    });\n\n    ok_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    ok_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-ok-30.png\"))); // NOI18N\n    ok_button.setText(\"OK\");\n    ok_button.setDoubleBuffered(true);\n    ok_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            ok_buttonActionPerformed(evt);\n        }\n    });\n\n    lock_label.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/lock_medium.png\"))); // NOI18N\n    lock_label.setDoubleBuffered(true);\n\n    email_label.setFont(new java.awt.Font(\"Dialog\", 1, 24)); // NOI18N\n    email_label.setForeground(new java.awt.Color(255, 102, 0));\n    email_label.setDoubleBuffered(true);\n\n    status_label.setFont(new java.awt.Font(\"Dialog\", 0, 14)); // NOI18N\n    status_label.setDoubleBuffered(true);\n\n    please_label.setFont(new java.awt.Font(\"Dialog\", 1, 24)); // NOI18N\n    please_label.setText(LabelTranslatorSingleton.getInstance().translate(\"Please enter 2FA PIN CODE\"));\n    please_label.setDoubleBuffered(true);\n\n    current_code_textfield.setBackground(new java.awt.Color(0, 153, 255));\n    current_code_textfield.setFont(new java.awt.Font(\"Dialog\", 0, 24)); // NOI18N\n    current_code_textfield.setForeground(new java.awt.Color(255, 255, 255));\n    current_code_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);\n    current_code_textfield.setDoubleBuffered(true);\n    current_code_textfield.setMargin(new java.awt.Insets(2, 2, 2, 2));\n    current_code_textfield.addKeyListener(new java.awt.event.KeyAdapter() {\n        public void keyTyped(java.awt.event.KeyEvent evt) {\n            current_code_textfieldKeyTyped(evt);\n        }\n        public void keyPressed(java.awt.event.KeyEvent evt) {\n            current_code_textfieldKeyPressed(evt);\n        }\n        public void keyReleased(java.awt.event.KeyEvent evt) {\n            current_code_textfieldKeyReleased(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(ok_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(cancel_button))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(lock_label)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(email_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(current_code_textfield)\n                        .addComponent(please_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(email_label)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(please_label)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(current_code_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(lock_label))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(ok_button)\n                    .addComponent(cancel_button))\n                .addComponent(status_label, javax.swing.GroupLayout.Alignment.TRAILING))\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/Get2FACode.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    file_tree_scrollpane = new javax.swing.JScrollPane();\n    skip_button = new javax.swing.JButton();\n    link_detected_label = new javax.swing.JLabel();\n    dance_button = new javax.swing.JButton();\n    folder_link_label = new javax.swing.JLabel();\n    warning_label = new javax.swing.JLabel();\n    skip_rest_button = new javax.swing.JButton();\n    restore_button = new javax.swing.JButton();\n    total_space_label = new javax.swing.JLabel();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setTitle(\"FolderLink\");\n\n    file_tree.setFont(new java.awt.Font(\"Dialog\", 0, 18)); // NOI18N\n    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode(\"root\");\n    file_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));\n    file_tree.setDoubleBuffered(true);\n    file_tree.setEnabled(false);\n    file_tree_scrollpane.setViewportView(file_tree);\n\n    skip_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    skip_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-trash-can-30.png\"))); // NOI18N\n    skip_button.setText(\"REMOVE THIS\");\n    skip_button.setDoubleBuffered(true);\n    skip_button.setEnabled(false);\n    skip_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            skip_buttonActionPerformed(evt);\n        }\n    });\n\n    link_detected_label.setFont(new java.awt.Font(\"Dialog\", 1, 24)); // NOI18N\n    link_detected_label.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-folder-30.png\"))); // NOI18N\n    link_detected_label.setText(\"Folder link detected!\");\n    link_detected_label.setDoubleBuffered(true);\n\n    dance_button.setBackground(new java.awt.Color(102, 204, 255));\n    dance_button.setFont(new java.awt.Font(\"Dialog\", 1, 22)); // NOI18N\n    dance_button.setForeground(new java.awt.Color(255, 255, 255));\n    dance_button.setText(\"Loading...\");\n    dance_button.setDoubleBuffered(true);\n    dance_button.setEnabled(false);\n    dance_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            dance_buttonActionPerformed(evt);\n        }\n    });\n\n    folder_link_label.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    folder_link_label.setText(\"jLabel2\");\n    folder_link_label.setDoubleBuffered(true);\n\n    warning_label.setFont(new java.awt.Font(\"Dialog\", 0, 16)); // NOI18N\n    warning_label.setText(\"If you DO NOT want to transfer some folder or file you can REMOVE it (to select several items at the same time use CTRL + LMOUSE).\");\n    warning_label.setDoubleBuffered(true);\n    warning_label.setEnabled(false);\n\n    skip_rest_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    skip_rest_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-trash-can-30.png\"))); // NOI18N\n    skip_rest_button.setText(\"REMOVE ALL EXCEPT THIS\");\n    skip_rest_button.setDoubleBuffered(true);\n    skip_rest_button.setEnabled(false);\n    skip_rest_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            skip_rest_buttonActionPerformed(evt);\n        }\n    });\n\n    restore_button.setFont(new java.awt.Font(\"Dialog\", 1, 14)); // NOI18N\n    restore_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-undelete-30.png\"))); // NOI18N\n    restore_button.setText(\"Restore folder data\");\n    restore_button.setDoubleBuffered(true);\n    restore_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            restore_buttonActionPerformed(evt);\n        }\n    });\n\n    total_space_label.setFont(new java.awt.Font(\"Dialog\", 1, 28)); // NOI18N\n    total_space_label.setText(\"[0 B]\");\n    total_space_label.setDoubleBuffered(true);\n    total_space_label.setEnabled(false);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(link_detected_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(file_tree_scrollpane)\n                .addComponent(total_space_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(warning_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(skip_rest_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(skip_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(dance_button))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(folder_link_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(restore_button)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(0, 0, Short.MAX_VALUE)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(skip_rest_button)\n                        .addComponent(skip_button)\n                        .addComponent(dance_button)))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(link_detected_label)\n                    .addGap(8, 8, 8)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(folder_link_label)\n                        .addComponent(restore_button))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(file_tree_scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(total_space_label)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(warning_label)\n                    .addGap(49, 49, 49)))\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_cancel_buttonActionPerformed\n", "func_signal": "private void ok_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_ok_buttonActionPerformed\n\n        _code_ok = true;\n\n        _pin_code = current_code_textfield.getText();\n\n        setVisible(false);\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/Get2FACode.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_current_code_textfieldKeyPressed\n", "func_signal": "private void current_code_textfieldKeyTyped(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_current_code_textfieldKeyTyped\n\n        if (current_code_textfield.getText().length() == MAX_CODE_LENGTH || (!Character.isDigit(evt.getKeyChar()) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE && evt.getKeyCode() != KeyEvent.VK_DELETE)) {\n            evt.consume();\n        }\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/Get2FACode.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_cancel_buttonActionPerformed\n\n        _code_ok = false;\n\n        setVisible(false);\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/Get2FACode.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_queue_up_buttonActionPerformed\n", "func_signal": "private void queue_down_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_queue_down_buttonActionPerformed\n        // TODO add your handling code here:\n\n        queue_down_button.setEnabled(false);\n\n        THREAD_POOL.execute(() -> {\n            _download.downWaitQueue();\n            MiscTools.GUIRunAndWait(() -> {\n                queue_down_button.setEnabled(true);\n            });\n        });\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_open_folder_buttonActionPerformed\n", "func_signal": "private void queue_up_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_queue_up_buttonActionPerformed\n        // TODO add your handling code here:\n\n        queue_up_button.setEnabled(false);\n\n        THREAD_POOL.execute(() -> {\n            _download.upWaitQueue();\n            MiscTools.GUIRunAndWait(() -> {\n                queue_up_button.setEnabled(true);\n            });\n        });\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_queue_bottom_buttonActionPerformed\n", "func_signal": "@Override\n    public void pause()", "code": "{\n\n        printStatusNormal(\"Pausing download ...\");\n\n        MiscTools.GUIRunAndWait(() -> {\n            for (JComponent c : new JComponent[]{pause_button, speed_label, slots_label, slots_spinner, progress_pbar, file_name_label, file_size_label}) {\n\n                c.setEnabled(false);\n            }\n\n            for (JComponent c : new JComponent[]{stop_button, keep_temp_checkbox}) {\n\n                c.setVisible(true);\n            }\n        });\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_queue_top_buttonActionPerformed\n", "func_signal": "private void queue_bottom_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_queue_bottom_buttonActionPerformed\n        // TODO add your handling code here:\n        queue_bottom_button.setEnabled(false);\n\n        THREAD_POOL.execute(() -> {\n            _download.bottomWaitQueue();\n            MiscTools.GUIRunAndWait(() -> {\n                queue_bottom_button.setEnabled(true);\n            });\n        });\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_dance_buttonActionPerformed\n", "func_signal": "private void skip_rest_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_skip_rest_buttonActionPerformed\n\n        if (deleteAllExceptSelectedTreeItems(file_tree)) {\n\n            _genDownloadLiks();\n\n            restore_button.setVisible(true);\n\n            boolean root_childs = ((TreeNode) file_tree.getModel().getRoot()).getChildCount() > 0;\n\n            dance_button.setEnabled(root_childs);\n\n            skip_button.setEnabled(root_childs);\n\n            skip_rest_button.setEnabled(root_childs);\n\n        }\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_skip_rest_buttonActionPerformed\n", "func_signal": "private void restore_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_restore_buttonActionPerformed\n\n        restore_button.setText(LabelTranslatorSingleton.getInstance().translate(\"Restoring data, please wait...\"));\n\n        file_tree.setEnabled(false);\n\n        restore_button.setEnabled(false);\n\n        dance_button.setEnabled(false);\n\n        THREAD_POOL.execute(() -> {\n            _loadMegaDirTree();\n            _genDownloadLiks();\n            MiscTools.GUIRun(() -> {\n                restore_button.setVisible(false);\n                restore_button.setText(LabelTranslatorSingleton.getInstance().translate(\"Restore folder data\"));\n                boolean root_childs = ((TreeNode) file_tree.getModel().getRoot()).getChildCount() > 0;\n\n                for (JComponent c : new JComponent[]{restore_button, dance_button, skip_button, skip_rest_button, file_tree}) {\n\n                    c.setEnabled(root_childs);\n                }\n            });\n        });\n\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    status_label = new javax.swing.JLabel();\n    slots_label = new javax.swing.JLabel();\n    slots_spinner = new javax.swing.JSpinner();\n    speed_label = new javax.swing.JLabel();\n    progress_pbar = new javax.swing.JProgressBar();\n    pause_button = new javax.swing.JButton();\n    stop_button = new javax.swing.JButton();\n    keep_temp_checkbox = new javax.swing.JCheckBox();\n    file_name_label = new javax.swing.JLabel();\n    close_button = new javax.swing.JButton();\n    copy_link_button = new javax.swing.JButton();\n    restart_button = new javax.swing.JButton();\n    file_size_label = new javax.swing.JLabel();\n    open_folder_button = new javax.swing.JButton();\n    slot_status_label = new javax.swing.JLabel();\n    queue_up_button = new javax.swing.JButton();\n    queue_down_button = new javax.swing.JButton();\n    queue_top_button = new javax.swing.JButton();\n    queue_bottom_button = new javax.swing.JButton();\n\n    setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 3, true));\n\n    status_label.setFont(new java.awt.Font(\"Dialog\", 1, 20)); // NOI18N\n    status_label.setForeground(new java.awt.Color(102, 102, 102));\n    status_label.setText(\"status\");\n    status_label.setDoubleBuffered(true);\n\n    slots_label.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    slots_label.setText(\"Slots\");\n    slots_label.setDoubleBuffered(true);\n\n    slots_spinner.setFont(new java.awt.Font(\"Dialog\", 0, 18)); // NOI18N\n    slots_spinner.setToolTipText(\"Slots\");\n    slots_spinner.setDoubleBuffered(true);\n    slots_spinner.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            slots_spinnerStateChanged(evt);\n        }\n    });\n\n    speed_label.setFont(new java.awt.Font(\"Dialog\", 1, 26)); // NOI18N\n    speed_label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n    speed_label.setText(\"speed\");\n    speed_label.setDoubleBuffered(true);\n\n    progress_pbar.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    progress_pbar.setDoubleBuffered(true);\n\n    pause_button.setBackground(new java.awt.Color(255, 153, 0));\n    pause_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    pause_button.setForeground(java.awt.Color.white);\n    pause_button.setText(\"PAUSE DOWNLOAD\");\n    pause_button.setDoubleBuffered(true);\n    pause_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            pause_buttonActionPerformed(evt);\n        }\n    });\n\n    stop_button.setBackground(new java.awt.Color(255, 0, 0));\n    stop_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    stop_button.setForeground(java.awt.Color.white);\n    stop_button.setText(\"CANCEL DOWNLOAD\");\n    stop_button.setDoubleBuffered(true);\n    stop_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            stop_buttonActionPerformed(evt);\n        }\n    });\n\n    keep_temp_checkbox.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    keep_temp_checkbox.setSelected(true);\n    keep_temp_checkbox.setText(\"Keep temp file\");\n    keep_temp_checkbox.setDoubleBuffered(true);\n\n    file_name_label.setFont(new java.awt.Font(\"Dialog\", 1, 20)); // NOI18N\n    file_name_label.setForeground(new java.awt.Color(0, 102, 153));\n    file_name_label.setText(\"---\");\n    file_name_label.setDoubleBuffered(true);\n\n    close_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    close_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-cancel-30.png\"))); // NOI18N\n    close_button.setText(\"Close\");\n    close_button.setDoubleBuffered(true);\n    close_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            close_buttonActionPerformed(evt);\n        }\n    });\n\n    copy_link_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    copy_link_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-copy-to-clipboard-30.png\"))); // NOI18N\n    copy_link_button.setText(\"Copy link\");\n    copy_link_button.setDoubleBuffered(true);\n    copy_link_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            copy_link_buttonActionPerformed(evt);\n        }\n    });\n\n    restart_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    restart_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-restart-30.png\"))); // NOI18N\n    restart_button.setText(\"Restart\");\n    restart_button.setDoubleBuffered(true);\n    restart_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            restart_buttonActionPerformed(evt);\n        }\n    });\n\n    file_size_label.setFont(new java.awt.Font(\"Dialog\", 1, 20)); // NOI18N\n    file_size_label.setForeground(new java.awt.Color(0, 102, 153));\n    file_size_label.setText(\"---\");\n    file_size_label.setDoubleBuffered(true);\n\n    open_folder_button.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    open_folder_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/icons8-folder-30.png\"))); // NOI18N\n    open_folder_button.setText(\"Open folder\");\n    open_folder_button.setDoubleBuffered(true);\n    open_folder_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            open_folder_buttonActionPerformed(evt);\n        }\n    });\n\n    slot_status_label.setFont(new java.awt.Font(\"Dialog\", 1, 16)); // NOI18N\n    slot_status_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);\n    slot_status_label.setDoubleBuffered(true);\n\n    queue_up_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    queue_up_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/arriba_1.png\"))); // NOI18N\n    queue_up_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            queue_up_buttonActionPerformed(evt);\n        }\n    });\n\n    queue_down_button.setFont(new java.awt.Font(\"Dialog\", 1, 18)); // NOI18N\n    queue_down_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/abajo_1.png\"))); // NOI18N\n    queue_down_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            queue_down_buttonActionPerformed(evt);\n        }\n    });\n\n    queue_top_button.setFont(new java.awt.Font(\"Dialog\", 1, 14)); // NOI18N\n    queue_top_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/arriba_1.png\"))); // NOI18N\n    queue_top_button.setText(\"TOP\");\n    queue_top_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            queue_top_buttonActionPerformed(evt);\n        }\n    });\n\n    queue_bottom_button.setFont(new java.awt.Font(\"Dialog\", 1, 14)); // NOI18N\n    queue_bottom_button.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/abajo_1.png\"))); // NOI18N\n    queue_bottom_button.setText(\"BOTTOM\");\n    queue_bottom_button.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            queue_bottom_buttonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(progress_pbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(layout.createSequentialGroup()\n                            .addComponent(status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(slots_label))\n                        .addGroup(layout.createSequentialGroup()\n                            .addComponent(queue_top_button)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(queue_up_button, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(queue_down_button, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(queue_bottom_button)\n                            .addGap(0, 0, Short.MAX_VALUE)))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(slots_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(file_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(slot_status_label))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addComponent(file_size_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(6, 6, 6)\n                    .addComponent(open_folder_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(copy_link_button))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(speed_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(pause_button))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addComponent(close_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(restart_button)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)\n                    .addComponent(keep_temp_checkbox)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(stop_button)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(queue_down_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(queue_up_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(queue_top_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(queue_bottom_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(slots_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(slots_label)\n                .addComponent(status_label))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(file_name_label)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(copy_link_button, javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(open_folder_button)\n                            .addComponent(file_size_label)))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(progress_pbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(speed_label)\n                        .addComponent(pause_button))\n                    .addGap(18, 18, 18)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(close_button)\n                            .addComponent(restart_button))\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(stop_button)\n                            .addComponent(keep_temp_checkbox))))\n                .addComponent(slot_status_label))\n            .addContainerGap())\n    );\n}", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "/**\n * Creates new form FolderLink\n *\n * @param parent\n * @param link\n */\n", "func_signal": "public FolderLinkDialog(MainPanelView parent, boolean modal, String link)", "code": "{\n\n    super(parent, modal);\n\n    _mega_error = 0;\n    _total_space = 0L;\n    _download = false;\n    _download_links = new ArrayList<>();\n    _link = link;\n\n    MiscTools.GUIRunAndWait(() -> {\n\n        initComponents();\n\n        updateFonts(this, GUI_FONT, parent.getMain_panel().getZoom_factor());\n\n        translateLabels(this);\n\n        folder_link_label.setText(link);\n\n        restore_button.setVisible(false);\n\n        final Dialog tthis = this;\n\n        THREAD_POOL.execute(() -> {\n            _loadMegaDirTree();\n\n            if (_mega_error == 0) {\n\n                _genDownloadLiks();\n\n                MiscTools.GUIRun(() -> {\n\n                    dance_button.setText(LabelTranslatorSingleton.getInstance().translate(\"Let's dance, baby\"));\n\n                    pack();\n                });\n\n            } else if (_mega_error == -18) {\n\n                MiscTools.GUIRun(() -> {\n                    JOptionPane.showMessageDialog(tthis, LabelTranslatorSingleton.getInstance().translate(\"MEGA LINK TEMPORARILY UNAVAILABLE!\"), \"Error\", JOptionPane.ERROR_MESSAGE);\n\n                    setVisible(false);\n                });\n\n            } else {\n\n                MiscTools.GUIRun(() -> {\n                    JOptionPane.showMessageDialog(tthis, LabelTranslatorSingleton.getInstance().translate(\"MEGA LINK ERROR!\"), \"Error\", JOptionPane.ERROR_MESSAGE);\n\n                    setVisible(false);\n                });\n            }\n        });\n\n        pack();\n\n    });\n}", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "//GEN-LAST:event_pause_buttonActionPerformed\n", "func_signal": "private void open_folder_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_open_folder_buttonActionPerformed\n\n        if (Desktop.isDesktopSupported()) {\n            try {\n                Desktop.getDesktop().open(new File(_download.getDownload_path() + \"/\" + _download.getFile_name()).getParentFile());\n            } catch (Exception ex) {\n                LOG.log(Level.INFO, ex.getMessage());\n            }\n        }\n\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void skip_buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_skip_buttonActionPerformed\n\n        if (deleteSelectedTreeItems(file_tree)) {\n\n            _genDownloadLiks();\n\n            restore_button.setVisible(true);\n\n            boolean root_childs = ((TreeNode) file_tree.getModel().getRoot()).getChildCount() > 0;\n\n            dance_button.setEnabled(root_childs);\n\n            skip_button.setEnabled(root_childs);\n\n            skip_rest_button.setEnabled(root_childs);\n\n        }\n\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/FolderLinkDialog.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void slots_spinnerStateChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_slots_spinnerStateChanged\n\n        THREAD_POOL.execute(() -> {\n            if (_download.isUse_slots()) {\n                _download.checkSlotsAndWorkers();\n            }\n        });\n    }", "path": "megabasterd/src/main/java/com/tonikelope/megabasterd/DownloadView.java", "commit_date": "2020-10-18 00:00:00", "repo_name": "tonikelope/megabasterd", "stars": 4124, "license": "gpl-3.0", "language": "java", "size": 85150}
{"docstring": "/**\n * Opens the camera driver and initializes the hardware parameters.\n *\n * @param holder The surface object which the camera will draw preview frames into.\n * @throws IOException Indicates the camera driver failed to open.\n */\n", "func_signal": "public void openDriver(SurfaceHolder holder) throws IOException", "code": "{\n    if (camera == null) {\n        camera = Camera.open();\n        if (camera == null) {\n            throw new IOException();\n        }\n        camera.setPreviewDisplay(holder);\n\n        if (!initialized) {\n            initialized = true;\n            configManager.initFromCameraParameters(camera);\n        }\n        configManager.setDesiredCameraParameters(camera);\n\n        //FIXME\n        //     SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        //\ufffd\u01f7\ufffd\u02b9\ufffd\ufffd\u01f0\ufffd\ufffd\n//      if (prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, false)) {\n//        FlashlightManager.enableFlashlight();\n//      }\n        FlashlightManager.enableFlashlight();\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Tells the camera to stop drawing preview frames.\n */\n", "func_signal": "public void stopPreview()", "code": "{\n    if (camera != null && previewing) {\n        if (!useOneShotPreviewCallback) {\n            camera.setPreviewCallback(null);\n        }\n        camera.stopPreview();\n        previewCallback.setHandler(null, 0);\n        autoFocusCallback.setHandler(null, 0);\n        previewing = false;\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u89e3\u6790\u4e8c\u7ef4\u7801\u56fe\u7247\u5de5\u5177\u7c7b\n * @param analyzeCallback\n */\n", "func_signal": "public static void analyzeBitmap(String path, AnalyzeCallback analyzeCallback)", "code": "{\n\n    /**\n     * \u9996\u5148\u5224\u65ad\u56fe\u7247\u7684\u5927\u5c0f,\u82e5\u56fe\u7247\u8fc7\u5927,\u5219\u6267\u884c\u56fe\u7247\u7684\u88c1\u526a\u64cd\u4f5c,\u9632\u6b62OOM\n     */\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true; // \u5148\u83b7\u53d6\u539f\u5927\u5c0f\n    Bitmap mBitmap = BitmapFactory.decodeFile(path, options);\n    options.inJustDecodeBounds = false; // \u83b7\u53d6\u65b0\u7684\u5927\u5c0f\n\n    int sampleSize = (int) (options.outHeight / (float) 400);\n\n    if (sampleSize <= 0)\n        sampleSize = 1;\n    options.inSampleSize = sampleSize;\n    mBitmap = BitmapFactory.decodeFile(path, options);\n\n    MultiFormatReader multiFormatReader = new MultiFormatReader();\n\n    // \u89e3\u7801\u7684\u53c2\u6570\n    Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(2);\n    // \u53ef\u4ee5\u89e3\u6790\u7684\u7f16\u7801\u7c7b\u578b\n    Vector<BarcodeFormat> decodeFormats = new Vector<BarcodeFormat>();\n    if (decodeFormats == null || decodeFormats.isEmpty()) {\n        decodeFormats = new Vector<BarcodeFormat>();\n\n        // \u8fd9\u91cc\u8bbe\u7f6e\u53ef\u626b\u63cf\u7684\u7c7b\u578b\uff0c\u6211\u8fd9\u91cc\u9009\u62e9\u4e86\u90fd\u652f\u6301\n        decodeFormats.addAll(DecodeFormatManager.ONE_D_FORMATS);\n        decodeFormats.addAll(DecodeFormatManager.QR_CODE_FORMATS);\n        decodeFormats.addAll(DecodeFormatManager.DATA_MATRIX_FORMATS);\n    }\n    hints.put(DecodeHintType.POSSIBLE_FORMATS, decodeFormats);\n    // \u8bbe\u7f6e\u7ee7\u7eed\u7684\u5b57\u7b26\u7f16\u7801\u683c\u5f0f\u4e3aUTF8\n    // hints.put(DecodeHintType.CHARACTER_SET, \"UTF8\");\n    // \u8bbe\u7f6e\u89e3\u6790\u914d\u7f6e\u53c2\u6570\n    multiFormatReader.setHints(hints);\n\n    // \u5f00\u59cb\u5bf9\u56fe\u50cf\u8d44\u6e90\u89e3\u7801\n    Result rawResult = null;\n    try {\n        rawResult = multiFormatReader.decodeWithState(new BinaryBitmap(new HybridBinarizer(new BitmapLuminanceSource(mBitmap))));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    if (rawResult != null) {\n        if (analyzeCallback != null) {\n            analyzeCallback.onAnalyzeSuccess(mBitmap, rawResult.getText());\n        }\n    } else {\n        if (analyzeCallback != null) {\n            analyzeCallback.onAnalyzeFailed();\n        }\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/activity/CodeUtils.java", "commit_date": "2016-11-19 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Like {@link #getFramingRect} but coordinates are in terms of the preview frame,\n * not UI / screen.\n */\n", "func_signal": "public Rect getFramingRectInPreview()", "code": "{\n    if (framingRectInPreview == null) {\n        Rect rect = new Rect(getFramingRect());\n        Point cameraResolution = configManager.getCameraResolution();\n        Point screenResolution = configManager.getScreenResolution();\n        //modify here\n//      rect.left = rect.left * cameraResolution.x / screenResolution.x;\n//      rect.right = rect.right * cameraResolution.x / screenResolution.x;\n//      rect.top = rect.top * cameraResolution.y / screenResolution.y;\n//      rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;\n        rect.left = rect.left * cameraResolution.y / screenResolution.x;\n        rect.right = rect.right * cameraResolution.y / screenResolution.x;\n        rect.top = rect.top * cameraResolution.x / screenResolution.y;\n        rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;\n        framingRectInPreview = rect;\n    }\n    return framingRectInPreview;\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/view/ViewfinderView.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * A factory method to build the appropriate LuminanceSource object based on the format\n * of the preview buffers, as described by Camera.Parameters.\n *\n * @param data   A preview frame.\n * @param width  The width of the image.\n * @param height The height of the image.\n * @return A PlanarYUVLuminanceSource instance.\n */\n", "func_signal": "public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height)", "code": "{\n    Rect rect = getFramingRectInPreview();\n    int previewFormat = configManager.getPreviewFormat();\n    String previewFormatString = configManager.getPreviewFormatString();\n    switch (previewFormat) {\n        // This is the standard Android format which all devices are REQUIRED to support.\n        // In theory, it's the only one we should ever care about.\n        case PixelFormat.YCbCr_420_SP:\n            // This format has never been seen in the wild, but is compatible as we only care\n            // about the Y channel, so allow it.\n        case PixelFormat.YCbCr_422_SP:\n            return new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,\n                    rect.width(), rect.height());\n        default:\n            // The Samsung Moment incorrectly uses this variant instead of the 'sp' version.\n            // Fortunately, it too has all the Y data up front, so we can read it.\n            if (\"yuv420p\".equals(previewFormatString)) {\n                return new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,\n                        rect.width(), rect.height());\n            }\n    }\n    throw new IllegalArgumentException(\"Unsupported picture format: \" +\n            previewFormat + '/' + previewFormatString);\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Decode the data within the viewfinder rectangle, and time how long it took. For efficiency,\n * reuse the same reader objects from one decode to the next.\n *\n * @param data   The YUV preview frame.\n * @param width  The width of the preview frame.\n * @param height The height of the preview frame.\n */\n", "func_signal": "private void decode(byte[] data, int width, int height)", "code": "{\n    long start = System.currentTimeMillis();\n    Result rawResult = null;\n\n    //modify here\n    byte[] rotatedData = new byte[data.length];\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++)\n            rotatedData[x * height + height - y - 1] = data[x + y * width];\n    }\n    int tmp = width; // Here we are swapping, that's the difference to #11\n    width = height;\n    height = tmp;\n\n    PlanarYUVLuminanceSource source = CameraManager.get().buildLuminanceSource(rotatedData, width, height);\n    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n    try {\n        rawResult = multiFormatReader.decodeWithState(bitmap);\n    } catch (ReaderException re) {\n        // continue\n    } finally {\n        multiFormatReader.reset();\n    }\n\n    if (rawResult != null) {\n        long end = System.currentTimeMillis();\n        Log.d(TAG, \"Found barcode (\" + (end - start) + \" ms):\\n\" + rawResult.toString());\n        Message message = Message.obtain(fragment.getHandler(), R.id.decode_succeeded, rawResult);\n        Bundle bundle = new Bundle();\n        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, source.renderCroppedGreyscaleBitmap());\n        message.setData(bundle);\n        //Log.d(TAG, \"Sending decode succeeded message...\");\n        message.sendToTarget();\n    } else {\n        Message message = Message.obtain(fragment.getHandler(), R.id.decode_failed);\n        message.sendToTarget();\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/decoding/DecodeHandler.java", "commit_date": "2016-07-27 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u521d\u59cb\u5316\u5185\u90e8\u6846\u7684\u5927\u5c0f\n *\n * @param context\n * @param attrs\n */\n", "func_signal": "private void initInnerRect(Context context, AttributeSet attrs)", "code": "{\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.ViewfinderView);\n\n    // \u626b\u63cf\u6846\u8ddd\u79bb\u9876\u90e8\n    float innerMarginTop = ta.getDimension(R.styleable.ViewfinderView_inner_margintop, -1);\n    if (innerMarginTop != -1) {\n        CameraManager.FRAME_MARGINTOP = (int) innerMarginTop;\n    }\n\n    // \u626b\u63cf\u6846\u7684\u5bbd\u5ea6\n    CameraManager.FRAME_WIDTH = (int) ta.getDimension(R.styleable.ViewfinderView_inner_width, DisplayUtil.screenWidthPx / 2);\n\n    // \u626b\u63cf\u6846\u7684\u9ad8\u5ea6\n    CameraManager.FRAME_HEIGHT = (int) ta.getDimension(R.styleable.ViewfinderView_inner_height, DisplayUtil.screenWidthPx / 2);\n\n    // \u626b\u63cf\u6846\u8fb9\u89d2\u989c\u8272\n    innercornercolor = ta.getColor(R.styleable.ViewfinderView_inner_corner_color, Color.parseColor(\"#45DDDD\"));\n    // \u626b\u63cf\u6846\u8fb9\u89d2\u957f\u5ea6\n    innercornerlength = (int) ta.getDimension(R.styleable.ViewfinderView_inner_corner_length, 65);\n    // \u626b\u63cf\u6846\u8fb9\u89d2\u5bbd\u5ea6\n    innercornerwidth = (int) ta.getDimension(R.styleable.ViewfinderView_inner_corner_width, 15);\n\n    // \u626b\u63cfbitmap\n    Drawable drawable = ta.getDrawable(R.styleable.ViewfinderView_inner_scan_bitmap);\n    if (drawable != null) {\n    }\n\n    // \u626b\u63cf\u63a7\u4ef6\n    scanLight = BitmapFactory.decodeResource(getResources(), ta.getResourceId(R.styleable.ViewfinderView_inner_scan_bitmap, R.drawable.scan_light));\n    // \u626b\u63cf\u901f\u5ea6\n    SCAN_VELOCITY = ta.getInt(R.styleable.ViewfinderView_inner_scan_speed, 5);\n\n    isCircle = ta.getBoolean(R.styleable.ViewfinderView_inner_scan_iscircle, true);\n\n    ta.recycle();\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/view/ViewfinderView.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Closes the camera driver if still in use.\n */\n", "func_signal": "public void closeDriver()", "code": "{\n    if (camera != null) {\n        FlashlightManager.disableFlashlight();\n        camera.release();\n        camera = null;\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Asks the camera hardware to begin drawing preview frames to the screen.\n */\n", "func_signal": "public void startPreview()", "code": "{\n    if (camera != null && !previewing) {\n        camera.startPreview();\n        previewing = true;\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u7ed8\u5236\u53d6\u666f\u6846\u8fb9\u6846\n *\n * @param canvas\n * @param frame\n */\n", "func_signal": "private void drawFrameBounds(Canvas canvas, Rect frame)", "code": "{\n\n    /*paint.setColor(Color.WHITE);\n    paint.setStrokeWidth(2);\n    paint.setStyle(Paint.Style.STROKE);\n\n    canvas.drawRect(frame, paint);*/\n\n    paint.setColor(innercornercolor);\n    paint.setStyle(Paint.Style.FILL);\n\n    int corWidth = innercornerwidth;\n    int corLength = innercornerlength;\n\n    // \u5de6\u4e0a\u89d2\n    canvas.drawRect(frame.left, frame.top, frame.left + corWidth, frame.top\n            + corLength, paint);\n    canvas.drawRect(frame.left, frame.top, frame.left\n            + corLength, frame.top + corWidth, paint);\n    // \u53f3\u4e0a\u89d2\n    canvas.drawRect(frame.right - corWidth, frame.top, frame.right,\n            frame.top + corLength, paint);\n    canvas.drawRect(frame.right - corLength, frame.top,\n            frame.right, frame.top + corWidth, paint);\n    // \u5de6\u4e0b\u89d2\n    canvas.drawRect(frame.left, frame.bottom - corLength,\n            frame.left + corWidth, frame.bottom, paint);\n    canvas.drawRect(frame.left, frame.bottom - corWidth, frame.left\n            + corLength, frame.bottom, paint);\n    // \u53f3\u4e0b\u89d2\n    canvas.drawRect(frame.right - corWidth, frame.bottom - corLength,\n            frame.right, frame.bottom, paint);\n    canvas.drawRect(frame.right - corLength, frame.bottom - corWidth,\n            frame.right, frame.bottom, paint);\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/view/ViewfinderView.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Initializes this static object with the Context of the calling Activity.\n *\n * @param context The Activity which wants to use the camera.\n */\n", "func_signal": "public static void init(Context context)", "code": "{\n    if (cameraManager == null) {\n        cameraManager = new CameraManager(context);\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u521d\u59cb\u5316\u7ec4\u4ef6\n */\n", "func_signal": "private void initView()", "code": "{\n\n    editText = (EditText) findViewById(R.id.edit_content);\n    button = (Button) findViewById(R.id.button_content);\n    button1 = (Button) findViewById(R.id.button1_content);\n    imageView = (ImageView) findViewById(R.id.image_content);\n\n    /**\n     * \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247\n     */\n    button.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            String textContent = editText.getText().toString();\n            if (TextUtils.isEmpty(textContent)) {\n                Toast.makeText(ThreeActivity.this, \"\u60a8\u7684\u8f93\u5165\u4e3a\u7a7a!\", Toast.LENGTH_SHORT).show();\n                return;\n            }\n            editText.setText(\"\");\n            mBitmap = CodeUtils.createImage(textContent, 400, 400, BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\n            imageView.setImageBitmap(mBitmap);\n        }\n    });\n\n    /**\n     * \u751f\u6210\u4e0d\u5e26logo\u7684\u4e8c\u7ef4\u7801\u56fe\u7247\n     */\n    button1.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n\n            String textContent = editText.getText().toString();\n            if (TextUtils.isEmpty(textContent)) {\n                Toast.makeText(ThreeActivity.this, \"\u60a8\u7684\u8f93\u5165\u4e3a\u7a7a!\", Toast.LENGTH_SHORT).show();\n                return;\n            }\n            editText.setText(\"\");\n            mBitmap = CodeUtils.createImage(textContent, 400, 400, null);\n            imageView.setImageBitmap(mBitmap);\n        }\n    });\n}", "path": "android-zxingLibrary/app/src/main/java/com/uuch/android_zxinglibrary/ThreeActivity.java", "commit_date": "2016-10-12 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u6839\u636eUri\u83b7\u53d6\u56fe\u7247\u7edd\u5bf9\u8def\u5f84\uff0c\u89e3\u51b3Android4.4\u4ee5\u4e0a\u7248\u672cUri\u8f6c\u6362\n *\n * @param context\n * @param imageUri\n */\n", "func_signal": "@TargetApi(19)\npublic static String getImageAbsolutePath(Context context, Uri imageUri)", "code": "{\n    if (context == null || imageUri == null)\n        return null;\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(context, imageUri)) {\n        if (isExternalStorageDocument(imageUri)) {\n            String docId = DocumentsContract.getDocumentId(imageUri);\n            String[] split = docId.split(\":\");\n            String type = split[0];\n            if (\"primary\".equalsIgnoreCase(type)) {\n                return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n            }\n        } else if (isDownloadsDocument(imageUri)) {\n            String id = DocumentsContract.getDocumentId(imageUri);\n            Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n            return getDataColumn(context, contentUri, null, null);\n        } else if (isMediaDocument(imageUri)) {\n            String docId = DocumentsContract.getDocumentId(imageUri);\n            String[] split = docId.split(\":\");\n            String type = split[0];\n            Uri contentUri = null;\n            if (\"image\".equals(type)) {\n                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"video\".equals(type)) {\n                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"audio\".equals(type)) {\n                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n            }\n            String selection = MediaStore.Images.Media._ID + \"=?\";\n            String[] selectionArgs = new String[]{split[1]};\n            return getDataColumn(context, contentUri, selection, selectionArgs);\n        }\n    } // MediaStore (and general)\n    else if (\"content\".equalsIgnoreCase(imageUri.getScheme())) {\n        // Return the remote address\n        if (isGooglePhotosUri(imageUri))\n            return imageUri.getLastPathSegment();\n        return getDataColumn(context, imageUri, null, null);\n    }\n    // File\n    else if (\"file\".equalsIgnoreCase(imageUri.getScheme())) {\n        return imageUri.getPath();\n    }\n    return null;\n}", "path": "android-zxingLibrary/app/src/main/java/com/uuch/android_zxinglibrary/ImageUtil.java", "commit_date": "2016-08-22 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u4e3aCaptureFragment\u8bbe\u7f6elayout\u53c2\u6570\n * @param captureFragment\n * @param layoutId\n */\n", "func_signal": "public static void setFragmentArgs(CaptureFragment captureFragment, int layoutId)", "code": "{\n    if (captureFragment == null || layoutId == -1) {\n        return;\n    }\n\n    Bundle bundle = new Bundle();\n    bundle.putInt(LAYOUT_ID, layoutId);\n    captureFragment.setArguments(bundle);\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/activity/CodeUtils.java", "commit_date": "2016-11-19 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u7ed8\u5236\u79fb\u52a8\u626b\u63cf\u7ebf\n *\n * @param canvas\n * @param frame\n */\n", "func_signal": "private void drawScanLight(Canvas canvas, Rect frame)", "code": "{\n\n    if (scanLineTop == 0) {\n        scanLineTop = frame.top;\n    }\n\n    if (scanLineTop >= frame.bottom - 30) {\n        scanLineTop = frame.top;\n    } else {\n        scanLineTop += SCAN_VELOCITY;\n    }\n    Rect scanRect = new Rect(frame.left, scanLineTop, frame.right,\n            scanLineTop + 30);\n    canvas.drawBitmap(scanLight, null, scanRect, paint);\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/view/ViewfinderView.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Asks the camera hardware to perform an autofocus.\n *\n * @param handler The Handler to notify when the autofocus completes.\n * @param message The message to deliver.\n */\n", "func_signal": "public void requestAutoFocus(Handler handler, int message)", "code": "{\n    if (camera != null && previewing) {\n        autoFocusCallback.setHandler(handler, message);\n        //Log.d(TAG, \"Requesting auto-focus callback\");\n        camera.autoFocus(autoFocusCallback);\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Calculates the framing rect which the UI should draw to show the user where to place the\n * barcode. This target helps with alignment as well as forces the user to hold the device\n * far enough away to ensure the image will be in focus.\n *\n * @return The rectangle to draw on screen in window coordinates.\n */\n", "func_signal": "public Rect getFramingRect()", "code": "{\n    try {\n        Point screenResolution = configManager.getScreenResolution();\n        // if (framingRect == null) {\n        if (camera == null) {\n            return null;\n        }\n\n        int leftOffset = (screenResolution.x - FRAME_WIDTH) / 2;\n\n        int topOffset;\n        if (FRAME_MARGINTOP != -1) {\n            topOffset = FRAME_MARGINTOP;\n        } else {\n            topOffset = (screenResolution.y - FRAME_HEIGHT) / 2;\n        }\n        framingRect = new Rect(leftOffset, topOffset, leftOffset + FRAME_WIDTH, topOffset + FRAME_HEIGHT);\n        // }\n        return framingRect;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * A single preview frame will be returned to the handler supplied. The data will arrive as byte[]\n * in the message.obj field, with width and height encoded as message.arg1 and message.arg2,\n * respectively.\n *\n * @param handler The handler to send the message to.\n * @param message The what field of the message to be sent.\n */\n", "func_signal": "public void requestPreviewFrame(Handler handler, int message)", "code": "{\n    if (camera != null && previewing) {\n        previewCallback.setHandler(handler, message);\n        if (useOneShotPreviewCallback) {\n            camera.setOneShotPreviewCallback(previewCallback);\n        } else {\n            camera.setPreviewCallback(previewCallback);\n        }\n    }\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/camera/CameraManager.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247\n * @param text\n * @param w\n * @param h\n * @param logo\n * @return\n */\n", "func_signal": "public static Bitmap createImage(String text,int w,int h,Bitmap logo)", "code": "{\n    if (TextUtils.isEmpty(text)) {\n        return null;\n    }\n    try {\n        Bitmap scaleLogo = getScaleLogo(logo,w,h);\n\n        int offsetX = w / 2;\n        int offsetY = h / 2;\n\n        int scaleWidth = 0;\n        int scaleHeight = 0;\n        if (scaleLogo != null) {\n            scaleWidth = scaleLogo.getWidth();\n            scaleHeight = scaleLogo.getHeight();\n            offsetX = (w - scaleWidth) / 2;\n            offsetY = (h - scaleHeight) / 2;\n        }\n        Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();\n        hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");\n        //\u5bb9\u9519\u7ea7\u522b\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);\n        //\u8bbe\u7f6e\u7a7a\u767d\u8fb9\u8ddd\u7684\u5bbd\u5ea6\n        hints.put(EncodeHintType.MARGIN, 0);\n        BitMatrix bitMatrix = new QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, w, h, hints);\n        int[] pixels = new int[w * h];\n        for (int y = 0; y < h; y++) {\n            for (int x = 0; x < w; x++) {\n                if(x >= offsetX && x < offsetX + scaleWidth && y>= offsetY && y < offsetY + scaleHeight){\n                    int pixel = scaleLogo.getPixel(x-offsetX,y-offsetY);\n                    if(pixel == 0){\n                        if(bitMatrix.get(x, y)){\n                            pixel = 0xff000000;\n                        }else{\n                            pixel = 0xffffffff;\n                        }\n                    }\n                    pixels[y * w + x] = pixel;\n                }else{\n                    if (bitMatrix.get(x, y)) {\n                        pixels[y * w + x] = 0xff000000;\n                    } else {\n                        pixels[y * w + x] = 0xffffffff;\n                    }\n                }\n            }\n        }\n        Bitmap bitmap = Bitmap.createBitmap(w, h,\n                Bitmap.Config.ARGB_8888);\n        bitmap.setPixels(pixels, 0, w, 0, 0, w, h);\n        return bitmap;\n    } catch (WriterException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "android-zxingLibrary/lib-zxing/src/main/java/com/uuzuche/lib_zxing/activity/CodeUtils.java", "commit_date": "2016-11-19 00:00:00", "repo_name": "yipianfengye/android-zxingLibrary", "stars": 4992, "license": "None", "language": "java", "size": 10170}
{"docstring": "/**\n * Clear results and devices.\n */\n", "func_signal": "public void clear()", "code": "{\n  mDeviceIdToUrlDeviceMap.clear();\n  mBroadcastUrlToPwsResultMap.clear();\n  mIconUrlToIconMap.clear();\n  mPendingBroadcastUrls.clear();\n  mPendingIconUrls.clear();\n  mFailedResolveUrls.clear();\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Return the top-ranked PwPair for a given group ID.\n * @param groupId\n * @param comparator to sort pairs by\n * @return a PwPair.\n */\n", "func_signal": "public PwPair getTopRankedPwPairByGroupId(String groupId, Comparator<PwPair> comparator)", "code": "{\n  for (PwPair pwPair : getGroupedPwPairsSortedByRank(comparator)) {\n    if (pwPair.getPwsResult().getGroupId().equals(groupId)) {\n      return pwPair;\n    }\n  }\n  return null;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Sets a JSONObject to be the base extra data.\n * @param extraData the base extra data.\n * @return the Builder object for chaining operations.\n */\n", "func_signal": "public Builder setExtra(JSONObject extraData)", "code": "{\n  mNewExtraData = extraData == null ? new JSONObject() : new JSONObject(extraData.toString());\n  return this;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Check if two UrlDevices are equal.\n * This does not compare extra data.\n * @param other the UrlDevice to compare to.\n * @return true if the UrlDevices are equal\n */\n", "func_signal": "public boolean equals(Object other)", "code": "{\n  if (this == other) {\n    return true;\n  }\n\n  if (other instanceof UrlDevice) {\n    UrlDevice urlDevice = (UrlDevice) other;\n    return compareTo(urlDevice) == 0;\n  }\n  return false;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Construct a UrlDevice.\n * @param id The id of the device.\n * @param url The URL broadcasted by the device.\n * @param extraData Extra data to associate with this UrlDevice.\n */\n", "func_signal": "private UrlDevice(String id, String url, JSONObject extraData)", "code": "{\n  mId = id;\n  mUrl = url;\n  mExtraData = extraData == null ? new JSONObject() : new JSONObject(extraData.toString());\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Triggers an HTTP request to be made to the PWS.\n * This method fetches a results from the PWS for all broadcast URLs,\n * depending on the supplied parameters.\n * @param pwsResultCallback The callback to run when we get an HTTPResponse.\n * If this value is null, we will not fetch the PwsResults, only icons.\n * @param pwsResultIconCallback The callback to run when we get a favicon.\n * If this value is null, we will not fetch the icons.\n */\n", "func_signal": "public void fetchPwsResults(final PwsResultCallback pwsResultCallback,\n                            final PwsResultIconCallback pwsResultIconCallback)", "code": "{\n  // Get new URLs to fetch.\n  Set<String> newResolveUrls = new HashSet<>();\n  Set<String> newIconUrls = new HashSet<>();\n  for (UrlDevice urlDevice : mDeviceIdToUrlDeviceMap.values()) {\n    String url = urlDevice.getUrl();\n    if (!mPendingBroadcastUrls.contains(url) && !mFailedResolveUrls.contains(url)) {\n      PwsResult pwsResult = mBroadcastUrlToPwsResultMap.get(url);\n      if (pwsResult == null) {\n        newResolveUrls.add(url);\n        mPendingBroadcastUrls.add(url);\n      } else if (pwsResult.hasIconUrl()\n          && !mPendingIconUrls.contains(pwsResult.getIconUrl())\n          && !mIconUrlToIconMap.containsKey(pwsResult.getIconUrl())) {\n        newIconUrls.add(pwsResult.getIconUrl());\n        mPendingIconUrls.add(pwsResult.getIconUrl());\n      }\n    }\n  }\n\n  // Make the resolve request.\n  final Set<String> finalResolveUrls = newResolveUrls;\n  PwsResultCallback augmentedCallback = new PwsResultCallback() {\n    @Override\n    public void onPwsResult(PwsResult pwsResult) {\n      addMetadata(pwsResult);\n      if (pwsResultIconCallback != null) {\n          PwsResultIconCallback augmentedIconCallback =\n              new AugmentedPwsResultIconCallback(pwsResult.getIconUrl(), pwsResultIconCallback);\n          mPwsClient.downloadIcon(pwsResult.getIconUrl(), augmentedIconCallback);\n      }\n      pwsResultCallback.onPwsResult(pwsResult);\n    }\n\n    @Override\n    public void onPwsResultAbsent(String url) {\n      mFailedResolveUrls.add(url);\n      pwsResultCallback.onPwsResultAbsent(url);\n    }\n\n    @Override\n    public void onPwsResultError(Collection<String> urls, int httpResponseCode, Exception e) {\n      pwsResultCallback.onPwsResultError(urls, httpResponseCode, e);\n    }\n\n    @Override\n    public void onResponseReceived(long durationMillis) {\n      for (String url : finalResolveUrls) {\n        mPendingBroadcastUrls.remove(url);\n      }\n      pwsResultCallback.onResponseReceived(durationMillis);\n    }\n  };\n  if (pwsResultCallback != null && newResolveUrls.size() > 0) {\n    mPwsClient.resolve(newResolveUrls, augmentedCallback);\n  }\n\n  // Make the icon requests.\n  if (pwsResultIconCallback != null) {\n    for (final String iconUrl : newIconUrls) {\n      PwsResultIconCallback augmentedIconCallback =\n          new AugmentedPwsResultIconCallback(iconUrl, pwsResultIconCallback);\n      mPwsClient.downloadIcon(iconUrl, augmentedIconCallback);\n    }\n  }\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Construct a UrlDevice Builder.\n * @param urlDevice the UrlDevice to clone.\n */\n", "func_signal": "public Builder(UrlDevice urlDevice)", "code": "{\n  mNewId = urlDevice.mId;\n  mNewUrl = urlDevice.mUrl;\n  mNewExtraData = new JSONObject(urlDevice.mExtraData.toString());\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Compare two UrlDevices based on device ID, breaking ties by comparing broadcast URL.\n * @param other the UrlDevice to compare to.\n * @return the comparison value.\n */\n", "func_signal": "public int compareTo(UrlDevice other)", "code": "{\n  if (this == other) {\n    return 0;\n  }\n\n  int compareValue = mId.compareTo(other.getId());\n  if (compareValue != 0) {\n    return compareValue;\n  }\n\n  return mUrl.compareTo(other.getUrl());\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Return a list of PwPairs sorted by rank in descending order, including only the top-ranked\n * pair from each group.\n * @param comparator to sort pairs by\n * @return a sorted list of PwPairs.\n */\n", "func_signal": "public List<PwPair> getGroupedPwPairsSortedByRank(Comparator<PwPair> comparator)", "code": "{\n  // Get all valid PwPairs.\n  List<PwPair> allPwPairs = getPwPairs();\n\n  // Group pairs with the same groupId, keeping only the top-ranked PwPair.\n  List<PwPair> groupedPwPairs = removeDuplicateGroupIds(allPwPairs, null, comparator);\n\n  // Sort by descending rank.\n  Collections.sort(groupedPwPairs, comparator);\n\n  // Remove duplicate site URLs.\n  return removeDuplicateSiteUrls(groupedPwPairs);\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Construct a UrlGroup.\n * @param groupId The URL group ID of this group.\n */\n", "func_signal": "public UrlGroup(String groupId)", "code": "{\n  mGroupId = groupId;\n  mPwPairs = new ArrayList<PwPair>();\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlGroup.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Return a list of all pairs of valid URL devices and corresponding URL metadata.\n * @return list of PwPairs.\n */\n", "func_signal": "public List<PwPair> getPwPairs()", "code": "{\n  List<PwPair> allPwPairs = new ArrayList<>();\n  for (UrlDevice urlDevice : mDeviceIdToUrlDeviceMap.values()) {\n    PwsResult pwsResult = mBroadcastUrlToPwsResultMap.get(urlDevice.getUrl());\n    if (pwsResult != null) {\n      allPwPairs.add(new PwPair(urlDevice, pwsResult));\n    }\n  }\n  return allPwPairs;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Create a JSON object that represents this data structure.\n * @return a JSON serialization of this data structure.\n */\n", "func_signal": "public JSONObject jsonSerialize()", "code": "{\n  JSONObject jsonObject = new JSONObject();\n  jsonObject.put(ID_KEY, mId);\n  jsonObject.put(URL_KEY, mUrl);\n\n  if (mExtraData.length() > 0) {\n    jsonObject.put(EXTRA_KEY, mExtraData);\n  }\n\n  return jsonObject;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Construct a PhysicalWebCollection.\n */\n", "func_signal": "public PhysicalWebCollection()", "code": "{\n  mPwsClient = new PwsClient();\n  mDeviceIdToUrlDeviceMap = new HashMap<>();\n  mBroadcastUrlToPwsResultMap = new HashMap<>();\n  mIconUrlToIconMap = new HashMap<>();\n  mPendingBroadcastUrls = new HashSet<>();\n  mPendingIconUrls = new HashSet<>();\n  mFailedResolveUrls = new HashSet<>();\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Stores an int as extra data.\n * @param value The value to store.\n * @return the Builder object for chaining operations.\n */\n", "func_signal": "public Builder addExtra(String key, int value)", "code": "{\n  mNewExtraData.put(key, value);\n  return this;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Return a hash code for this SimpleUrlDevice.\n * This calculation does not include the extra data.\n * @return hash code\n */\n", "func_signal": "public int hashCode()", "code": "{\n  int hash = 1;\n  hash = hash * 31 + mId.hashCode();\n  hash = hash * 31 + mUrl.hashCode();\n  return hash;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Given a list of PwPairs, return a filtered list such that only one PwPair from each group\n * is included.\n * @param allPairs Input PwPairs list.\n * @param outGroupMap Optional output map from discovered group IDs to UrlGroups, may be null.\n * @return Filtered PwPairs list.\n */\n", "func_signal": "private static List<PwPair> removeDuplicateGroupIds(List<PwPair> allPairs,\n    Map<String, UrlGroup> outGroupMap, Comparator<PwPair> comparator)", "code": "{\n  List<PwPair> filteredPairs = new ArrayList<>();\n  Map<String, UrlGroup> groupMap = outGroupMap;\n  if (groupMap == null) {\n    groupMap = new HashMap<>();\n  } else {\n    groupMap.clear();\n  }\n\n  for (PwPair pwPair : allPairs) {\n    PwsResult pwsResult = pwPair.getPwsResult();\n    String groupId = pwsResult.getGroupId();\n    if (groupId == null || groupId.equals(\"\")) {\n      // Pairs without a group are always included\n      filteredPairs.add(pwPair);\n    } else {\n      // Create the group if it doesn't exist\n      UrlGroup urlGroup = groupMap.get(groupId);\n      if (urlGroup == null) {\n        urlGroup = new UrlGroup(groupId);\n        groupMap.put(groupId, urlGroup);\n      }\n      urlGroup.addPair(pwPair);\n    }\n  }\n\n  for (UrlGroup urlGroup : groupMap.values()) {\n    filteredPairs.add(urlGroup.getTopPair(comparator));\n  }\n\n  return filteredPairs;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Populate a UrlDevice with data from a given JSON object.\n * @param jsonObject a serialized UrlDevice.\n * @return The UrlDevice represented by the serialized object.\n */\n", "func_signal": "public static UrlDevice jsonDeserialize(JSONObject jsonObject)", "code": "{\n  return new Builder(jsonObject.getString(ID_KEY), jsonObject.getString(URL_KEY))\n     .setExtra(jsonObject.optJSONObject(EXTRA_KEY))\n     .build();\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Construct a UrlDevice Builder.\n * @param id The id of the device.\n * @param url The URL broadcasted by the device.\n */\n", "func_signal": "public Builder(String id, String url)", "code": "{\n  mNewId = id;\n  mNewUrl = url;\n  mNewExtraData = new JSONObject();\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Populate this data structure with UrlDevices represented by a given JSON object.\n * @param jsonObject a serialized PhysicalWebCollection.\n * @return The PhysicalWebCollection represented by the serialized object.\n * @throws PhysicalWebCollectionException on invalid or unrecognized input\n */\n", "func_signal": "public static PhysicalWebCollection jsonDeserialize(JSONObject jsonObject)\n    throws PhysicalWebCollectionException", "code": "{\n  // Check the schema version\n  int schemaVersion = jsonObject.getInt(SCHEMA_VERSION_KEY);\n  if (schemaVersion > SCHEMA_VERSION) {\n    throw new PhysicalWebCollectionException(\n        \"Cannot handle schema version \" + schemaVersion + \".  \"\n        + \"This library only knows of schema version \" + SCHEMA_VERSION);\n  }\n  PhysicalWebCollection collection = new PhysicalWebCollection();\n\n  // Deserialize the UrlDevices\n  JSONArray urlDevices = jsonObject.getJSONArray(DEVICES_KEY);\n  for (int i = 0; i < urlDevices.length(); i++) {\n    JSONObject urlDeviceJson = urlDevices.getJSONObject(i);\n    UrlDevice urlDevice = UrlDevice.jsonDeserialize(urlDeviceJson);\n    collection.addUrlDevice(urlDevice);\n  }\n\n  // Deserialize the URL metadata\n  JSONArray metadata = jsonObject.getJSONArray(METADATA_KEY);\n  for (int i = 0; i < metadata.length(); i++) {\n    JSONObject pwsResultJson = metadata.getJSONObject(i);\n    PwsResult pwsResult = PwsResult.jsonDeserialize(pwsResultJson);\n    collection.addMetadata(pwsResult);\n  }\n\n  JSONObject iconMap = jsonObject.getJSONObject(ICON_MAP_KEY);\n  for (Iterator<String> iconUrls = iconMap.keys(); iconUrls.hasNext();) {\n    String iconUrl = iconUrls.next();\n    collection.addIcon(iconUrl, Base64.decodeBase64(\n        iconMap.getString(iconUrl).getBytes(Charset.forName(\"UTF-8\"))));\n  }\n  return collection;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/PhysicalWebCollection.java", "commit_date": "2016-09-20 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "/**\n * Stores an long as extra data.\n * @param value The value to store.\n * @return the Builder object for chaining operations.\n */\n", "func_signal": "public Builder addExtra(String key, long value)", "code": "{\n  mNewExtraData.put(key, value);\n  return this;\n}", "path": "physical-web/java/libs/src/main/java/org/physical_web/collection/UrlDevice.java", "commit_date": "2016-06-24 00:00:00", "repo_name": "google/physical-web", "stars": 6007, "license": "apache-2.0", "language": "java", "size": 33447}
{"docstring": "// \u83b7\u53d6\u4e0a\u6708\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfLastMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 2, 1);\n    int day = calendar.getActualMaximum(5);\n    calendar.set(getNowYear(), getNowMonth() - 2, day);\n    return getDayEndTime(calendar.getTime());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u8fd4\u56de\u67d0\u6708\u8be5\u5b63\u5ea6\u7684\u7b2c\u4e00\u4e2a\u6708\n", "func_signal": "public static Date getFirstSeasonDate(Date date)", "code": "{\n    final int[] SEASON = { 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    int sean = SEASON[cal.get(Calendar.MONTH)];\n    cal.set(Calendar.MONTH, sean * 3 - 3);\n    return cal.getTime();\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "/**\n * \u83b7\u53d6\u5ba2\u6237\u7aefIP\u5730\u5740\n * @param request \u8bf7\u6c42\n * @return\n */\n", "func_signal": "public static String getIpAddr(HttpServletRequest request)", "code": "{\n    String ip = request.getHeader(\"x-forwarded-for\");\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getHeader(\"Proxy-Client-IP\");\n    }\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getHeader(\"WL-Proxy-Client-IP\");\n    }\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getRemoteAddr();\n        if (ip.equals(\"127.0.0.1\")) {\n            //\u6839\u636e\u7f51\u5361\u53d6\u672c\u673a\u914d\u7f6e\u7684IP\n            InetAddress inet = null;\n            try {\n                inet = InetAddress.getLocalHost();\n            } catch (UnknownHostException e) {\n                e.printStackTrace();\n            }\n            ip = inet.getHostAddress();\n        }\n    }\n    // \u5bf9\u4e8e\u901a\u8fc7\u591a\u4e2a\u4ee3\u7406\u7684\u60c5\u51b5\uff0c\u7b2c\u4e00\u4e2aIP\u4e3a\u5ba2\u6237\u7aef\u771f\u5b9eIP,\u591a\u4e2aIP\u6309\u7167','\u5206\u5272\n    if (ip != null && ip.length() > 15) {\n        if (ip.indexOf(\",\") > 0) {\n            ip = ip.substring(0, ip.indexOf(\",\"));\n        }\n    }\n    return ip;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/IpInfoUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u672c\u6708\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 1, 1);\n    int day = calendar.getActualMaximum(5);\n    calendar.set(getNowYear(), getNowMonth() - 1, day);\n    return getDayEndTime(calendar.getTime());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u4e0a\u5468\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfLastWeek()", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(getBeginDayOfLastWeek());\n    cal.add(Calendar.DAY_OF_WEEK, 6);\n    Date weekEndSta = cal.getTime();\n    return getDayEndTime(weekEndSta);\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u672c\u5468\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfWeek()", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(getBeginDayOfWeek());\n    cal.add(Calendar.DAY_OF_WEEK, 6);\n    Date weekEndSta = cal.getTime();\n    return getDayEndTime(weekEndSta);\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u7684\u5f00\u59cb\u65f6\u95f4\n", "func_signal": "public static Timestamp getDayStartTime(Date d)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    if (null != d)\n        calendar.setTime(d);\n    calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH),\n            calendar.get(Calendar.DAY_OF_MONTH), 0, 0, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    return new Timestamp(calendar.getTimeInMillis());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u4e0a\u5468\u7684\u5f00\u59cb\u65f6\u95f4\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic static Date getBeginDayOfLastWeek()", "code": "{\n    Date date = new Date();\n    if (date == null) {\n        return null;\n    }\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    int dayofweek = cal.get(Calendar.DAY_OF_WEEK);\n    if (dayofweek == 1) {\n        dayofweek += 7;\n    }\n    cal.add(Calendar.DATE, 2 - dayofweek - 7);\n    return getDayStartTime(cal.getTime());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u4e24\u4e2a\u65e5\u671f\u4e2d\u7684\u6700\u5c0f\u65e5\u671f\n", "func_signal": "public static Date min(Date beginDate, Date endDate)", "code": "{\n    if (beginDate == null) {\n        return endDate;\n    }\n    if (endDate == null) {\n        return beginDate;\n    }\n    if (beginDate.after(endDate)) {\n        return endDate;\n    }\n    return beginDate;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u4e24\u4e2a\u65e5\u671f\u76f8\u51cf\u5f97\u5230\u7684\u6beb\u79d2\u6570\n", "func_signal": "public static long dateDiff(Date beginDate, Date endDate)", "code": "{\n    long date1ms = beginDate.getTime();\n    long date2ms = endDate.getTime();\n    return date2ms - date1ms;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u672c\u6708\u662f\u54ea\u4e00\u6708\n", "func_signal": "public static int getNowMonth()", "code": "{\n    Date date = new Date();\n    GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();\n    gc.setTime(date);\n    return gc.get(2) + 1;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u4eca\u5e74\u662f\u54ea\u4e00\u5e74\n", "func_signal": "public static Integer getNowYear()", "code": "{\n    Date date = new Date();\n    GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();\n    gc.setTime(date);\n    return Integer.valueOf(gc.get(1));\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u4e0b\u51e0\u5929\u7684\u65e5\u671f\n", "func_signal": "public static Date getNextDay(Date date, int i)", "code": "{\n    Calendar cal = new GregorianCalendar();\n    cal.setTime(date);\n    cal.set(Calendar.DATE, cal.get(Calendar.DATE) + i);\n    return cal.getTime();\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u4e24\u4e2a\u65e5\u671f\u76f8\u51cf\u5f97\u5230\u7684\u5929\u6570\n", "func_signal": "public static int getDiffDays(Date beginDate, Date endDate)", "code": "{\n    if (beginDate == null || endDate == null) {\n        throw new IllegalArgumentException(\"getDiffDays param is null!\");\n    }\n    long diff = (endDate.getTime() - beginDate.getTime())\n            / (1000 * 60 * 60 * 24);\n    int days = new Long(diff).intValue();\n    return days;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u672c\u5e74\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static java.util.Date getEndDayOfYear()", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.set(Calendar.YEAR, getNowYear());\n    cal.set(Calendar.MONTH, Calendar.DECEMBER);\n    cal.set(Calendar.DATE, 31);\n    return getDayEndTime(cal.getTime());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u4e0a\u6708\u7684\u5f00\u59cb\u65f6\u95f4\n", "func_signal": "public static Date getBeginDayOfLastMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(getNowYear(), getNowMonth() - 2, 1);\n    return getDayStartTime(calendar.getTime());\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u660e\u5929\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfTomorrow()", "code": "{\n    Calendar cal = new GregorianCalendar();\n    cal.setTime(getDayEnd());\n    cal.add(Calendar.DAY_OF_MONTH, 1);\n    return cal.getTime();\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u660e\u5929\u7684\u5f00\u59cb\u65f6\u95f4\n", "func_signal": "public static Date getBeginDayOfTomorrow()", "code": "{\n    Calendar cal = new GregorianCalendar();\n    cal.setTime(getDayBegin());\n    cal.add(Calendar.DAY_OF_MONTH, 1);\n    return cal.getTime();\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "/**\n * \u62fc\u63a5\u7ba1\u7406\u5458\u94fe\u63a5\n */\n", "func_signal": "public Pay getAdminUrl(Pay pay,String id,String token,String myToken)", "code": "{\n\n    String pass=SERVER_URL+\"/pay/pass?sendType=0&id=\"+id+\"&token=\"+token+\"&myToken=\"+myToken;\n    pay.setPassUrl(pass);\n\n    String pass2=SERVER_URL+\"/pay/pass?sendType=1&id=\"+id+\"&token=\"+token+\"&myToken=\"+myToken;\n    pay.setPassUrl2(pass2);\n\n    String pass3=SERVER_URL+\"/pay/pass?sendType=2&id=\"+id+\"&token=\"+token+\"&myToken=\"+myToken;\n    pay.setPassUrl3(pass3);\n\n    String back=SERVER_URL+\"/pay/back?id=\"+id+\"&token=\"+token+\"&myToken=\"+myToken;\n    pay.setBackUrl(back);\n\n    String passNotShow=SERVER_URL+\"/pay/passNotShow?id=\"+id+\"&token=\"+token;\n    pay.setPassNotShowUrl(passNotShow);\n\n    String edit=SERVER_URL+\"/pay-edit?id=\"+id+\"&token=\"+token;\n    pay.setEditUrl(edit);\n\n    String del=SERVER_URL+\"/pay-del?id=\"+id+\"&token=\"+token;\n    pay.setDelUrl(del);\n\n    String close=SERVER_URL+\"/pay/close?id=\"+id+\"&token=\"+token;\n    pay.setCloseUrl(close);\n\n    String open=SERVER_URL+\"/pay/open?id=\"+id+\"&token=\"+token;\n    pay.setOpenUrl(open);\n\n    String statistic=SERVER_URL+\"/statistic?myToken=\"+myToken;\n    pay.setStatistic(statistic);\n    return pay;\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/controller/PayController.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "// \u83b7\u53d6\u6628\u5929\u7684\u7ed3\u675f\u65f6\u95f4\n", "func_signal": "public static Date getEndDayOfYesterDay()", "code": "{\n    Calendar cal = new GregorianCalendar();\n    cal.setTime(getDayEnd());\n    cal.add(Calendar.DAY_OF_MONTH, -1);\n    return cal.getTime();\n}", "path": "xpay/xpay-code/src/main/java/cn/exrick/common/utils/DateUtils.java", "commit_date": "2019-10-06 00:00:00", "repo_name": "Exrick/xpay", "stars": 4655, "license": "gpl-3.0", "language": "java", "size": 12148}
{"docstring": "/**\n * Returns an array containing all of the elements in this deque in\n * proper sequence (from first to last element); the runtime type of the\n * returned array is that of the specified array.  If the deque fits in\n * the specified array, it is returned therein.  Otherwise, a new array\n * is allocated with the runtime type of the specified array and the\n * size of this deque.\n *\n * <p>If this deque fits in the specified array with room to spare\n * (i.e., the array has more elements than this deque), the element in\n * the array immediately following the end of the deque is set to\n * <tt>null</tt>.\n *\n * <p>Like the {@link #toArray()} method, this method acts as bridge between\n * array-based and collection-based APIs.  Further, this method allows\n * precise control over the runtime type of the output array, and may,\n * under certain circumstances, be used to save allocation costs.\n *\n * <p>Suppose <tt>x</tt> is a deque known to contain only strings.\n * The following code can be used to dump the deque into a newly\n * allocated array of <tt>String</tt>:\n *\n *  <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n *\n * Note that <tt>toArray(new Object[0])</tt> is identical in function to\n * <tt>toArray()</tt>.\n *\n * @param a the array into which the elements of the deque are to\n *          be stored, if it is big enough; otherwise, a new array of the\n *          same runtime type is allocated for this purpose\n * @return an array containing all of the elements in this deque\n * @throws ArrayStoreException if the runtime type of the specified array\n *         is not a supertype of the runtime type of every element in\n *         this deque\n * @throws NullPointerException if the specified array is null\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> T[] toArray(T[] a)", "code": "{\n    int size = size();\n    if (a.length < size)\n        a = (T[])java.lang.reflect.Array.newInstance(\n                a.getClass().getComponentType(), size);\n    copyElements(a);\n    if (a.length > size)\n        a[size] = null;\n    return a;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Returns <tt>true</tt> if this deque contains the specified element.\n * More formally, returns <tt>true</tt> if and only if this deque contains\n * at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n *\n * @param o object to be checked for containment in this deque\n * @return <tt>true</tt> if this deque contains the specified element\n */\n", "func_signal": "public boolean contains(Object o)", "code": "{\n    if (o == null)\n        return false;\n    int mask = elements.length - 1;\n    int i = head;\n    Object x;\n    while ( (x = elements[i]) != null) {\n        if (o.equals(x))\n            return true;\n        i = (i + 1) & mask;\n    }\n    return false;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Serialize this deque.\n *\n * @serialData The current size (<tt>int</tt>) of the deque,\n * followed by all of its elements (each an object reference) in\n * first-to-last order.\n */\n", "func_signal": "private void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException", "code": "{\n    s.defaultWriteObject();\n\n    // Write out size\n    s.writeInt(size());\n\n    // Write out elements in order.\n    int mask = elements.length - 1;\n    for (int i = head; i != tail; i = (i + 1) & mask)\n        s.writeObject(elements[i]);\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Inserts the specified element at the front of this deque.\n *\n * @param e the element to add\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public void addFirst(E e)", "code": "{\n    if (e == null)\n        throw new NullPointerException(\"e == null\");\n    elements[head = (head - 1) & (elements.length - 1)] = e;\n    if (head == tail)\n        doubleCapacity();\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * @throws NoSuchElementException {@inheritDoc}\n */\n", "func_signal": "public E removeFirst()", "code": "{\n    E x = pollFirst();\n    if (x == null)\n        throw new NoSuchElementException();\n    return x;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Removes the element at the specified position in the elements array,\n * adjusting head and tail as necessary.  This can result in motion of\n * elements backwards or forwards in the array.\n *\n * <p>This method is called delete rather than remove to emphasize\n * that its semantics differ from those of {@link List#remove(int)}.\n *\n * @return true if elements moved backwards\n */\n", "func_signal": "private boolean delete(int i)", "code": "{\n    checkInvariants();\n    final Object[] elements = this.elements;\n    final int mask = elements.length - 1;\n    final int h = head;\n    final int t = tail;\n    final int front = (i - h) & mask;\n    final int back  = (t - i) & mask;\n\n    // Invariant: head <= i < tail mod circularity\n    if (front >= ((t - h) & mask))\n        throw new ConcurrentModificationException();\n\n    // Optimize for least element motion\n    if (front < back) {\n        if (h <= i) {\n            System.arraycopy(elements, h, elements, h + 1, front);\n        } else { // Wrap around\n            System.arraycopy(elements, 0, elements, 1, i);\n            elements[0] = elements[mask];\n            System.arraycopy(elements, h, elements, h + 1, mask - h);\n        }\n        elements[h] = null;\n        head = (h + 1) & mask;\n        return false;\n    } else {\n        if (i < t) { // Copy the null tail as well\n            System.arraycopy(elements, i + 1, elements, i, back);\n            tail = t - 1;\n        } else { // Wrap around\n            System.arraycopy(elements, i + 1, elements, i, mask - i);\n            elements[mask] = elements[0];\n            System.arraycopy(elements, 1, elements, 0, t);\n            tail = (t - 1) & mask;\n        }\n        return true;\n    }\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Deserialize this deque.\n */\n", "func_signal": "private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException", "code": "{\n    s.defaultReadObject();\n\n    // Read in size and allocate array\n    int size = s.readInt();\n    allocateElements(size);\n    head = 0;\n    tail = size;\n\n    // Read in all elements in the proper order.\n    for (int i = 0; i < size; i++)\n        elements[i] = s.readObject();\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Removes the first occurrence of the specified element in this\n * deque (when traversing the deque from head to tail).\n * If the deque does not contain the element, it is unchanged.\n * More formally, removes the first element <tt>e</tt> such that\n * <tt>o.equals(e)</tt> (if such an element exists).\n * Returns <tt>true</tt> if this deque contained the specified element\n * (or equivalently, if this deque changed as a result of the call).\n *\n * @param o element to be removed from this deque, if present\n * @return <tt>true</tt> if the deque contained the specified element\n */\n", "func_signal": "public boolean removeFirstOccurrence(Object o)", "code": "{\n    if (o == null)\n        return false;\n    int mask = elements.length - 1;\n    int i = head;\n    Object x;\n    while ( (x = elements[i]) != null) {\n        if (o.equals(x)) {\n            delete(i);\n            return true;\n        }\n        i = (i + 1) & mask;\n    }\n    return false;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Returns a copy of this deque.\n *\n * @return a copy of this deque\n */\n", "func_signal": "public ArrayDeque<E> clone()", "code": "{\n    try {\n        @SuppressWarnings(\"unchecked\")\n        ArrayDeque<E> result = (ArrayDeque<E>) super.clone();\n        System.arraycopy(elements, 0, result.elements, 0, elements.length);\n        return result;\n\n    } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n    }\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Inserts the specified element at the front of this deque.\n *\n * @param e the element to add\n * @return <tt>true</tt> (as specified by {@link Deque#offerFirst})\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public boolean offerFirst(E e)", "code": "{\n    addFirst(e);\n    return true;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Removes all of the elements from this deque.\n * The deque will be empty after this call returns.\n */\n", "func_signal": "public void clear()", "code": "{\n    int h = head;\n    int t = tail;\n    if (h != t) { // clear all cells\n        head = tail = 0;\n        int i = h;\n        int mask = elements.length - 1;\n        do {\n            elements[i] = null;\n            i = (i + 1) & mask;\n        } while (i != t);\n    }\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Double the capacity of this deque.  Call only when full, i.e.,\n * when head and tail have wrapped around to become equal.\n */\n", "func_signal": "private void doubleCapacity()", "code": "{\n    int p = head;\n    int n = elements.length;\n    int r = n - p; // number of elements to the right of p\n    int newCapacity = n << 1;\n    if (newCapacity < 0)\n        throw new IllegalStateException(\"Sorry, deque too big\");\n    Object[] a = new Object[newCapacity];\n    System.arraycopy(elements, p, a, 0, r);\n    System.arraycopy(elements, 0, a, r, p);\n    elements = a;\n    head = 0;\n    tail = n;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Inserts the specified element at the end of this deque.\n *\n * <p>This method is equivalent to {@link #add}.\n *\n * @param e the element to add\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public void addLast(E e)", "code": "{\n    if (e == null)\n        throw new NullPointerException(\"e == null\");\n    elements[tail] = e;\n    if ( (tail = (tail + 1) & (elements.length - 1)) == head)\n        doubleCapacity();\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * @throws NoSuchElementException {@inheritDoc}\n */\n", "func_signal": "public E getFirst()", "code": "{\n    @SuppressWarnings(\"unchecked\") E result = (E) elements[head];\n    if (result == null)\n        throw new NoSuchElementException();\n    return result;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * @throws NoSuchElementException {@inheritDoc}\n */\n", "func_signal": "public E getLast()", "code": "{\n    @SuppressWarnings(\"unchecked\")\n    E result = (E) elements[(tail - 1) & (elements.length - 1)];\n    if (result == null)\n        throw new NoSuchElementException();\n    return result;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Inserts the specified element at the end of this deque.\n *\n * @param e the element to add\n * @return <tt>true</tt> (as specified by {@link Deque#offerLast})\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public boolean offerLast(E e)", "code": "{\n    addLast(e);\n    return true;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Removes the last occurrence of the specified element in this\n * deque (when traversing the deque from head to tail).\n * If the deque does not contain the element, it is unchanged.\n * More formally, removes the last element <tt>e</tt> such that\n * <tt>o.equals(e)</tt> (if such an element exists).\n * Returns <tt>true</tt> if this deque contained the specified element\n * (or equivalently, if this deque changed as a result of the call).\n *\n * @param o element to be removed from this deque, if present\n * @return <tt>true</tt> if the deque contained the specified element\n */\n", "func_signal": "public boolean removeLastOccurrence(Object o)", "code": "{\n    if (o == null)\n        return false;\n    int mask = elements.length - 1;\n    int i = (tail - 1) & mask;\n    Object x;\n    while ( (x = elements[i]) != null) {\n        if (o.equals(x)) {\n            delete(i);\n            return true;\n        }\n        i = (i - 1) & mask;\n    }\n    return false;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * @throws NoSuchElementException {@inheritDoc}\n */\n", "func_signal": "public E removeLast()", "code": "{\n    E x = pollLast();\n    if (x == null)\n        throw new NoSuchElementException();\n    return x;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Allocate empty array to hold the given number of elements.\n *\n * @param numElements  the number of elements to hold\n */\n", "func_signal": "private void allocateElements(int numElements)", "code": "{\n    int initialCapacity = MIN_INITIAL_CAPACITY;\n    // Find the best power of two to hold elements.\n    // Tests \"<=\" because arrays aren't kept full.\n    if (numElements >= initialCapacity) {\n        initialCapacity = numElements;\n        initialCapacity |= (initialCapacity >>>  1);\n        initialCapacity |= (initialCapacity >>>  2);\n        initialCapacity |= (initialCapacity >>>  4);\n        initialCapacity |= (initialCapacity >>>  8);\n        initialCapacity |= (initialCapacity >>> 16);\n        initialCapacity++;\n\n        if (initialCapacity < 0)   // Too many elements, must back off\n            initialCapacity >>>= 1;// Good luck allocating 2 ^ 30 elements\n    }\n    elements = new Object[initialCapacity];\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "/**\n * Inserts the specified element at the end of this deque.\n *\n * <p>This method is equivalent to {@link #addLast}.\n *\n * @param e the element to add\n * @return <tt>true</tt> (as specified by {@link Collection#add})\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public boolean add(E e)", "code": "{\n    addLast(e);\n    return true;\n}", "path": "AndroidAsync/AndroidAsync/src/com/koushikdutta/async/util/ArrayDeque.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "koush/AndroidAsync", "stars": 7486, "license": "other", "language": "java", "size": 3720}
{"docstring": "// Tests bindToLifecycle for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindToLifecycle(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    fragment.onAttach(null);\n    TestObserver<Object> attachObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onCreate(null);\n    attachObserver.assertNotComplete();\n    TestObserver<Object> createObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onViewCreated(null, null);\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    TestObserver<Object> createViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStart();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onResume();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onPause();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStop();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroyView();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertComplete();\n    stopObserver.assertComplete();\n    TestObserver<Object> destroyViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroy();\n    attachObserver.assertNotComplete();\n    createObserver.assertComplete();\n    destroyViewObserver.assertComplete();\n    TestObserver<Object> destroyObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDetach();\n    attachObserver.assertComplete();\n    destroyObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/RxFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindToLifecycle for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindToLifecycle(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    fragment.onAttach(null);\n    TestObserver<Object> attachObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onCreate(null);\n    attachObserver.assertNotComplete();\n    TestObserver<Object> createObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onViewCreated(null, null);\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    TestObserver<Object> createViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStart();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onResume();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onPause();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStop();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroyView();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertComplete();\n    stopObserver.assertComplete();\n    TestObserver<Object> destroyViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroy();\n    attachObserver.assertNotComplete();\n    createObserver.assertComplete();\n    destroyViewObserver.assertComplete();\n    TestObserver<Object> destroyObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDetach();\n    attachObserver.assertComplete();\n    destroyObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components-preference/src/test/java/com/trello/rxlifecycle4/components/preference/RxPreferenceFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Since Single is not backpressure aware, use this to simulate it taking time\n", "func_signal": "@Before\n   public void setup()", "code": "{\n       lifecycle = PublishSubject.create();\n       testScheduler = new TestScheduler();\n   }", "path": "RxLifecycle/rxlifecycle/src/test/java/com/trello/rxlifecycle4/UntilLifecycleTransformerSingleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given AndroidLifecycle Fragment implementation\n", "func_signal": "private void testBindUntilEvent(LifecycleOwner owner)", "code": "{\n    Fragment fragment = (Fragment) owner;\n    ActivityController<?> controller = startFragment(fragment);\n\n    TestObserver<Object> testObserver = observable.compose(AndroidLifecycle.createLifecycleProvider(owner).bindUntilEvent(Lifecycle.Event.ON_STOP)).test();\n\n    testObserver.assertNotComplete();\n    controller.start();\n    testObserver.assertNotComplete();\n    controller.resume();\n    testObserver.assertNotComplete();\n    controller.pause();\n    testObserver.assertNotComplete();\n    controller.stop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-android-lifecycle/src/test/java/com/trello/rxlifecycle4/android/lifecycle/AndroidLifecycleFragmentTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindUntilEvent(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    TestObserver<Object> testObserver = observable.compose(provider.bindUntilEvent(STOP)).test();\n\n    fragment.onAttach(null);\n    testObserver.assertNotComplete();\n    fragment.onCreate(null);\n    testObserver.assertNotComplete();\n    fragment.onViewCreated(null, null);\n    testObserver.assertNotComplete();\n    fragment.onStart();\n    testObserver.assertNotComplete();\n    fragment.onResume();\n    testObserver.assertNotComplete();\n    fragment.onPause();\n    testObserver.assertNotComplete();\n    fragment.onStop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/RxFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "/**\n * Binds the given source to a lifecycle.\n * <p>\n * This method determines (based on the lifecycle sequence itself) when the source\n * should stop emitting items. It uses the provided correspondingEvents function to determine\n * when to unsubscribe.\n * <p>\n * Note that this is an advanced usage of the library and should generally be used only if you\n * really know what you're doing with a given lifecycle.\n *\n * @param lifecycle the lifecycle sequence\n * @param correspondingEvents a function which tells the source when to unsubscribe\n * @return a reusable {@link LifecycleTransformer} that unsubscribes the source during the Fragment lifecycle\n */\n", "func_signal": "@Nonnull\n@CheckReturnValue\npublic static <T, R> LifecycleTransformer<T> bind(@Nonnull Observable<R> lifecycle,\n                                                  @Nonnull final Function<R, R> correspondingEvents)", "code": "{\n    checkNotNull(lifecycle, \"lifecycle == null\");\n    checkNotNull(correspondingEvents, \"correspondingEvents == null\");\n    return bind(takeUntilCorrespondingEvent(lifecycle.share(), correspondingEvents));\n}", "path": "RxLifecycle/rxlifecycle/src/main/java/com/trello/rxlifecycle4/RxLifecycle.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Since Single is not backpressure aware, use this to simulate it taking time\n", "func_signal": "@Before\n   public void setup()", "code": "{\n       lifecycle = PublishSubject.create();\n       testScheduler = new TestScheduler();\n   }", "path": "RxLifecycle/rxlifecycle/src/test/java/com/trello/rxlifecycle4/UntilEventTransformerSingleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given RxActivityLifecycle implementation\n", "func_signal": "private void testBindUntilEvent(ActivityController<? extends LifecycleProvider<ActivityEvent>> controller)", "code": "{\n    LifecycleProvider<ActivityEvent> activity = controller.get();\n\n    TestObserver<Object> testObserver = observable.compose(activity.bindUntilEvent(STOP)).test();\n\n    controller.create();\n    testObserver.assertNotComplete();\n    controller.start();\n    testObserver.assertNotComplete();\n    controller.resume();\n    testObserver.assertNotComplete();\n    controller.pause();\n    testObserver.assertNotComplete();\n    controller.stop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/RxActivityLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Easier than making everyone create their own shadows\n", "func_signal": "private ActivityController<FragmentActivity> startFragment(Fragment fragment)", "code": "{\n    ActivityController<FragmentActivity> controller = Robolectric.buildActivity(FragmentActivity.class);\n    controller.create();\n    controller.get().getSupportFragmentManager()\n            .beginTransaction()\n            .add(android.R.id.content, fragment)\n            .commitNow();\n    return controller;\n}", "path": "RxLifecycle/rxlifecycle-android-lifecycle/src/test/java/com/trello/rxlifecycle4/android/lifecycle/AndroidLifecycleFragmentTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindUntilEvent(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    TestObserver<Object> testObserver = observable.compose(provider.bindUntilEvent(STOP)).test();\n\n    fragment.onAttach(null);\n    testObserver.assertNotComplete();\n    fragment.onCreate(null);\n    testObserver.assertNotComplete();\n    fragment.onViewCreated(null, null);\n    testObserver.assertNotComplete();\n    fragment.onStart();\n    testObserver.assertNotComplete();\n    fragment.onResume();\n    testObserver.assertNotComplete();\n    fragment.onPause();\n    testObserver.assertNotComplete();\n    fragment.onStop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/support/RxSupportFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindUntilEvent(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    TestObserver<Object> testObserver = observable.compose(provider.bindUntilEvent(STOP)).test();\n\n    fragment.onAttach(null);\n    testObserver.assertNotComplete();\n    fragment.onCreate(null);\n    testObserver.assertNotComplete();\n    fragment.onViewCreated(null, null);\n    testObserver.assertNotComplete();\n    fragment.onStart();\n    testObserver.assertNotComplete();\n    fragment.onResume();\n    testObserver.assertNotComplete();\n    fragment.onPause();\n    testObserver.assertNotComplete();\n    fragment.onStop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components-preference/src/test/java/com/trello/rxlifecycle4/components/preference/RxPreferenceFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindToLifecycle for any given RxActivityLifecycle implementation\n", "func_signal": "private void testBindToLifecycle(ActivityController<? extends LifecycleProvider<ActivityEvent>> controller)", "code": "{\n    LifecycleProvider<ActivityEvent> activity = controller.get();\n\n    controller.create();\n    TestObserver<Object> createObserver = observable.compose(activity.bindToLifecycle()).test();\n\n    controller.start();\n    createObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(activity.bindToLifecycle()).test();\n\n    controller.resume();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(activity.bindToLifecycle()).test();\n\n    controller.pause();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(activity.bindToLifecycle()).test();\n\n    controller.stop();\n    createObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(activity.bindToLifecycle()).test();\n\n    controller.destroy();\n    createObserver.assertComplete();\n    stopObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/RxActivityLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Easier than making everyone create their own shadows\n", "func_signal": "private void startFragment(Fragment fragment)", "code": "{\n    Robolectric.setupActivity(FragmentActivity.class).getSupportFragmentManager()\n        .beginTransaction()\n        .add(fragment, null)\n        .commit();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/support/RxSupportFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Since Single is not backpressure aware, use this to simulate it taking time\n", "func_signal": "@Before\n   public void setup()", "code": "{\n       lifecycle = PublishSubject.create();\n       testScheduler = new TestScheduler();\n   }", "path": "RxLifecycle/rxlifecycle/src/test/java/com/trello/rxlifecycle4/UntilCorrespondingEventTransformerSingleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindToLifecycle for any given RxLifecycle Fragment implementation\n", "func_signal": "private void testBindToLifecycle(LifecycleOwner owner)", "code": "{\n    Fragment fragment = (Fragment) owner;\n    LifecycleProvider<Lifecycle.Event> provider = AndroidLifecycle.createLifecycleProvider(owner);\n    ActivityController<?> controller = startFragment(fragment);\n\n    TestObserver<Object> createObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.start();\n    createObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.resume();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.pause();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.stop();\n    createObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.destroy();\n    createObserver.assertComplete();\n    stopObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-android-lifecycle/src/test/java/com/trello/rxlifecycle4/android/lifecycle/AndroidLifecycleFragmentTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindToLifecycle for any given AndroidLifecycle Activity implementation\n", "func_signal": "private void testBindToLifecycle(ActivityController<? extends LifecycleOwner> controller)", "code": "{\n    LifecycleProvider<Lifecycle.Event> provider = AndroidLifecycle.createLifecycleProvider(controller.get());\n\n    controller.create();\n    TestObserver<Object> createObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.start();\n    createObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.resume();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.pause();\n    createObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.stop();\n    createObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    controller.destroy();\n    createObserver.assertComplete();\n    stopObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-android-lifecycle/src/test/java/com/trello/rxlifecycle4/android/lifecycle/AndroidLifecycleActivityTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Easier than making everyone create their own shadows\n", "func_signal": "private void startFragment(Fragment fragment)", "code": "{\n    Robolectric.setupActivity(FragmentActivity.class).getSupportFragmentManager()\n        .beginTransaction()\n        .add(fragment, null)\n        .commit();\n}", "path": "RxLifecycle/rxlifecycle-components-preference/src/test/java/com/trello/rxlifecycle4/components/preference/RxPreferenceFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindToLifecycle for any given LifecycleProvider<FragmentEvent> implementation\n", "func_signal": "private void testBindToLifecycle(LifecycleProvider<FragmentEvent> provider)", "code": "{\n    Fragment fragment = (Fragment) provider;\n    startFragment(fragment);\n\n    fragment.onAttach(null);\n    TestObserver<Object> attachObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onCreate(null);\n    attachObserver.assertNotComplete();\n    TestObserver<Object> createObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onViewCreated(null, null);\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    TestObserver<Object> createViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStart();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    TestObserver<Object> startObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onResume();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    TestObserver<Object> resumeObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onPause();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertNotComplete();\n    resumeObserver.assertComplete();\n    TestObserver<Object> pauseObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onStop();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertNotComplete();\n    startObserver.assertComplete();\n    pauseObserver.assertComplete();\n    TestObserver<Object> stopObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroyView();\n    attachObserver.assertNotComplete();\n    createObserver.assertNotComplete();\n    createViewObserver.assertComplete();\n    stopObserver.assertComplete();\n    TestObserver<Object> destroyViewObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDestroy();\n    attachObserver.assertNotComplete();\n    createObserver.assertComplete();\n    destroyViewObserver.assertComplete();\n    TestObserver<Object> destroyObserver = observable.compose(provider.bindToLifecycle()).test();\n\n    fragment.onDetach();\n    attachObserver.assertComplete();\n    destroyObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-components/src/test/java/com/trello/rxlifecycle4/components/support/RxSupportFragmentLifecycleTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "/**\n * Binds the given source to a View lifecycle.\n * <p>\n * Specifically, when the View detaches from the window, the sequence will be completed.\n * <p>\n * Warning: you should make sure to use the returned Transformer on the main thread,\n * since we're binding to a View (which only allows binding on the main thread).\n *\n * @param view the view to bind the source sequence to\n * @return a reusable {@link LifecycleTransformer} that unsubscribes the source during the View lifecycle\n */\n", "func_signal": "@NonNull\n@CheckResult\npublic static <T> LifecycleTransformer<T> bindView(@NonNull final View view)", "code": "{\n    checkNotNull(view, \"view == null\");\n\n    return bind(Observable.create(new ViewDetachesOnSubscribe(view)));\n}", "path": "RxLifecycle/rxlifecycle-android/src/main/java/com/trello/rxlifecycle4/android/RxLifecycleAndroid.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "// Tests bindUntil for any given AndroidLifecycle Activity implementation\n", "func_signal": "private void testBindUntilEvent(ActivityController<? extends LifecycleOwner> controller)", "code": "{\n    LifecycleProvider<Lifecycle.Event> activity = AndroidLifecycle.createLifecycleProvider(controller.get());\n\n    TestObserver<Object> testObserver = observable.compose(activity.bindUntilEvent(Lifecycle.Event.ON_STOP)).test();\n\n    controller.create();\n    testObserver.assertNotComplete();\n    controller.start();\n    testObserver.assertNotComplete();\n    controller.resume();\n    testObserver.assertNotComplete();\n    controller.pause();\n    testObserver.assertNotComplete();\n    controller.stop();\n    testObserver.assertComplete();\n}", "path": "RxLifecycle/rxlifecycle-android-lifecycle/src/test/java/com/trello/rxlifecycle4/android/lifecycle/AndroidLifecycleActivityTest.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "trello/RxLifecycle", "stars": 7714, "license": "apache-2.0", "language": "java", "size": 897}
{"docstring": "/**\n * \u5224\u65ad\u4e00\u4e2a\u7528\u6237\u662f\u5426\u8ba2\u8d2d\u8fc7\u67d0\u4e2a\u5546\u54c1\n * @param user\n * @param goodsId\n * @return\n */\n", "func_signal": "public boolean hasOrderGoods(UserInfo user,long goodsId)", "code": "{\n\t//\u968f\u673a\u6a21\u62df\u4e00\u4e2a\n\tif(user.getUserId() % 2 == 1){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/TypicalDemo.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u63d0\u53d6\u81ea\u5b9a\u4e49\u7684Class\n * @param words\n */\n", "func_signal": "public static void fetchSelfDefineClass(Word[] words,Map<String,String> selfDefineClass)", "code": "{\n\t\tfor(int i=0;i<words.length -1;i++){\n\t\t\tif(\"class\".equals(words[i].word)){\n\t\t\t\tselfDefineClass.put(words[i+1].word, words[i+1].word);\n\t\t\t}\n\t\t}\n\t}", "path": "QLExpress/src/main/java/com/ql/util/express/parse/ExpressParse.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u4f7f\u7528\u5b8f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testMacro() throws Exception", "code": "{\n\tString exp = \"cust.setName(\\\"\u5c0f\u5f3a\\\");\" +\n\t\t      \"\u5b9a\u4e49\u5b8f custName {cust.name};\" + \n\t        \"return custName;\";\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\n\texpressContext.put(\"cust\", new CustBean(1));\n\tExpressRunner runner = new ExpressRunner();\n\t//\n\trunner.addOperatorWithAlias(\"\u5b9a\u4e49\u5b8f\", \"macro\", null);\n\t//\u6267\u884c\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u8d4b\u7ed9r\n\tString r = (String)runner.execute(exp,expressContext,null,false,false);\n\tSystem.out.println(r);\n\tAssert.assertTrue(\"\u64cd\u4f5c\u7b26\u6267\u884c\u9519\u8bef\",\"\u5c0f\u5f3a\".equals(r));\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/BeanTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u5224\u65ad\u903b\u8f91\u6267\u884c\u51fd\u6570\n * @param userInfo\n * @param expression\n * @return\n * @throws Exception\n */\n", "func_signal": "public String hasPermission(UserInfo userInfo,String expression) throws Exception", "code": "{\t\t\t\n        \tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\n    \t\texpressContext.put(\"userInfo\",userInfo);\n    \t\tList<String> errorInfo = new ArrayList<String>();\n            Boolean result = (Boolean)runner.execute(expression, expressContext, errorInfo, true, false);\n            String resultStr =\"\";\n            if(result.booleanValue() == true){\n            \tresultStr = \"\u53ef\u4ee5\u8ba2\u8d2d\u6b64\u5546\u54c1\";\n            }else{\n              for(int i=0;i<errorInfo.size();i++){\n            \t  if(i > 0){\n            \t\t  resultStr  = resultStr + \",\" ;\n            \t  }\n            \t  resultStr  = resultStr + errorInfo.get(i);\n              }\n              resultStr = resultStr  + \",\u6240\u4ee5\u4e0d\u80fd\u8ba2\u8d2d\u6b64\u5546\u54c1\";\n            }\n            return \"\u4eb2\u7231\u7684\" + userInfo.getName() + \" : \" + resultStr;\n    }", "path": "QLExpress/src/test/java/com/ql/util/express/example/TypicalDemo.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u4f7f\u7528\u53c2\u6570\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testAddTwiceWithParams() throws Exception", "code": "{\n\t//\u5b9a\u4e49\u8868\u8fbe\u5f0f\uff0c\u76f8\u5f53\u4e8e i+(j+j)+(n+n)\n\tString exp = \" i addT j addT n\";\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\n\texpressContext.put(\"i\", Integer.valueOf(1));\n\texpressContext.put(\"j\", Integer.valueOf(22));\n\texpressContext.put(\"n\", Integer.valueOf(2));\n\tExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u64cd\u4f5c\u7b26addT\uff0c\u5176\u5b9e\u73b0\u4e3aAddTwiceOperator\n\trunner.addOperator(\"addT\", new AddTwiceOperator());\n\t//\u6267\u884c\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u8d4b\u7ed9r\n\tint r = (Integer)runner.execute(exp,expressContext,null,false,false);\n\tSystem.out.println(r);\n\tAssert.assertTrue(\"\u64cd\u4f5c\u7b26\u6267\u884c\u9519\u8bef\",r==49);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/OperatorTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u6d4b\u8bd5\u975e\u77ed\u8def\u903b\u8f91,\u5e76\u4e14\u8f93\u51fa\u51fa\u9519\u4fe1\u606f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testShortCircuit() throws Exception", "code": "{\n\trunner.setShortCircuit(true);\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\t\n\texpressContext.put(\"\u8fdd\u89c4\u5929\u6570\", 100);\n\texpressContext.put(\"\u865a\u5047\u4ea4\u6613\u6263\u5206\", 11);\n\texpressContext.put(\"VIP\", false);\n\tList<String> errorInfo = new ArrayList<String>();\n\tinitial();\n\tString expression =\"2 \u5c0f\u4e8e 1 and (\u8fdd\u89c4\u5929\u6570 \u5c0f\u4e8e 90 or \u865a\u5047\u4ea4\u6613\u6263\u5206 \u5c0f\u4e8e 12)\";\n\tboolean result = calculateLogicTest(expression, expressContext, errorInfo);\n\tif(result){\n\t\tSystem.out.println(\"result is success!\");\n\t}else{\n\t\tSystem.out.println(\"result is fail!\");\n\t\tfor(String error : errorInfo){\n\t\t\tSystem.out.println(error);\n\t\t}\n\t}\n\t\n}", "path": "QLExpress/src/test/java/com/ql/util/express/test/logic/ShortCircuitLogicTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u901a\u8fc7\u6587\u4ef6\u52a0\u8f7d\u65b9\u6cd5\u53ca\u8868\u8fbe\u5f0f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testApprove3()throws Exception", "code": "{\n\tExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u64cd\u4f5c\u7b26\u522b\u540d\n\trunner.addOperatorWithAlias(\"\u5982\u679c\", \"if\",null);\n  runner.addOperatorWithAlias(\"\u5426\u5219\", \"else\",null);\n  \trunner.addOperatorWithAlias(\"\u5927\u4e8e\", \">\",null);\n\t//\n\trunner.addFunctionOfServiceMethod(\"\u6253\u5370\", new WorkflowTest(), \"println\",new String[] { \"String\" }, null);\t\t\n\t//\u52a0\u8f7d\u6587\u4ef6\n\trunner.loadExpress(\"example/approve\");\n\t//\u8bbe\u7f6e\u4e0a\u4e0b\u6587\u53d8\u91cf\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String, Object>();\n\texpressContext.put(\"\u7ecf\u7406\", \"\u738b\u7ecf\u7406\");\n\texpressContext.put(\"\u603b\u76d1\", \"\u674e\u603b\u76d1\");\n\texpressContext.put(\"\u8d22\u52a1\", \"\u5f20\u8d22\u52a1\");\n\texpressContext.put(\"\u7533\u8bf7\u4eba\", \"\u5c0f\u5f3a\");\n\texpressContext.put(\"\u91d1\u989d\", new Integer(6000));\n\t\n\trunner.executeByExpressName(\"example/approve\", expressContext, null, false,false,null);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/WorkflowTest.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * Component initialization.\n *\n * @throws Exception\n */\n", "func_signal": "private void jbInit() throws Exception", "code": "{\n  contentPane = (JPanel) getContentPane();\n  contentPane.setLayout(borderLayout1);\n  setSize(new Dimension(1000, 600));\n  setTitle(\"QLExpressConsole\");\n  statusBar.setText(\" \");\n  jMenuFile.setText(\"File\");\n  jMenuFileExit.setText(\"Exit\");\n  jMenuFileExit.addActionListener(new\n                                  ConsoleFrame_jMenuFileExit_ActionAdapter(this));\n  jSplitPaneRun.setOrientation(JSplitPane.VERTICAL_SPLIT);\n  jSplitPaneRun.setDividerSize(2);\n  jPaneRunner.setLayout(borderLayout2);\n  jTextAreaScript.setText(\"\");\n  jTextAreaContext.setText(\"\");\n  jTextAreaResult.setText(\"\");\n  contentPane.setMinimumSize(new Dimension(500, 400));\n  contentPane.setPreferredSize(new Dimension(500, 400));\n  jButton1.addActionListener(new ConsoleFrame_jButton1_actionAdapter(this));\n  jPanelResult.setLayout(borderLayout3);\n  jLabelScript.setText(\"\u8fd0\u884c\u811a\u672c\");\n  jLabelResult.setText(\"\u8fd0\u884c\u7ed3\u679c\");\n  jLabelContext.setText(\"\u811a\u672c\u4e0a\u4e0b\u6587\");\n  jPanelScript.setLayout(borderLayout4);\n  jPanelContext.setLayout(borderLayout5);\n  jMenuBar1.add(jMenuFile);\n  jMenuFile.add(jMenuFileExit);\n  setJMenuBar(jMenuBar1);\n  jButton1.setIcon(image1);\n  jButton1.setToolTipText(\"\u6267\u884c\");\n  jToolBar.add(jButton1);\n  contentPane.add(statusBar, BorderLayout.SOUTH);\n  jPanelResult.add(jScrollPaneResult, BorderLayout.CENTER);\n  jPanelResult.add(jLabelResult, BorderLayout.NORTH);\n  jSplitPaneRun.add(jSplitPaneS_C, JSplitPane.TOP);\n  jScrollPaneResult.getViewport().add(jTextAreaResult);\n\n  jPanelScript.add(jLabelScript, BorderLayout.NORTH);\n  jPanelScript.add(jScrollPaneScript, BorderLayout.CENTER);\n  jScrollPaneScript.getViewport().add(jTextAreaScript);\n  jPanelContext.add(jLabelContext, BorderLayout.NORTH);\n  jPanelContext.add(jScrollPaneContext, BorderLayout.CENTER);\n  jSplitPaneS_C.add(jPanelScript, JSplitPane.LEFT);\n  jScrollPaneContext.getViewport().add(jTextAreaContext);\n  jSplitPaneS_C.setDividerSize(2);\n  jSplitPaneS_C.setLastDividerLocation(200);\n  jSplitPaneS_C.add(jPanelContext, JSplitPane.RIGHT);\n  jSplitPaneS_C.setDividerLocation(500);\n  jSplitPaneRun.add(jPanelResult, JSplitPane.RIGHT);\n  jTabbedPaneContent.add(jPaneRunner, \"\\u6267\\u884c\\u4ee3\\u7801\");\n  jPaneRunner.add(jSplitPaneRun, BorderLayout.CENTER);\n  contentPane.add(jTabbedPaneContent, BorderLayout.CENTER);\n  contentPane.add(jToolBar, BorderLayout.NORTH);\n  jSplitPaneRun.setDividerLocation(200);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/console/ConsoleFrame.java", "commit_date": "2017-11-13 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u5224\u65ad\u4e00\u4e2a\u7528\u6237TAG\u7684\u7b2cX\u4f4d\u662f\u5426\u4e3a1\u3002\u8fd9\u4e2a\u7684demo,\u5176\u5b9e\u73b0\u5408\u7406\u6027\u4e0d\u8003\u8651\n * @param user\n * @param tagBitIndex\n * @return\n */\n", "func_signal": "public boolean userTagJudge(UserInfo user,int tagBitIndex)", "code": "{\n\tboolean r =  (user.getUserTag() & ((long)Math.pow(2, tagBitIndex))) > 0;\n\treturn r;\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/TypicalDemo.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u6b64\u65b9\u6cd5\u662f\u8c03\u7528\u6700\u9891\u7e41\u7684\uff0c\u56e0\u6b64\u5c3d\u91cf\u7cbe\u7b80\u4ee3\u7801\uff0c\u63d0\u9ad8\u6548\u7387 \n * @param context\n * @param len\n * @return\n * @throws Exception\n */\n", "func_signal": "public ArraySwap popArray(InstructionSetContext context,int len) throws Exception", "code": "{\n\t\tint start = point - len + 1;\n\t\tthis.arraySwap.swap(this.dataContainer,start,len);\n\t\tpoint = point - len;\n\t\treturn this.arraySwap;\n\t}", "path": "QLExpress/src/main/java/com/ql/util/express/RunEnvironment.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u65ad\u8a00\u662f\u5426\u8d85\u65f6\n * @throws QLTimeOutException\n */\n", "func_signal": "public static void assertTimeOut() throws QLTimeOutException", "code": "{\n\n    if(NEED_TIMER.get() && System.currentTimeMillis()>END_TIME.get()){\n        throw new QLTimeOutException(\"\u8fd0\u884cQLExpress\u811a\u672c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5c06\u8d85\u8fc7\u4e86\u9650\u5b9a\u65f6\u95f4:\" + TIME_OUT_MILLIS.get() + \"ms\");\n    }\n}", "path": "QLExpress/src/main/java/com/ql/util/express/config/QLExpressTimer.java", "commit_date": "2019-06-19 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u901a\u8fc7\u6587\u4ef6\u52a0\u8f7d\u8868\u8fbe\u5f0f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testApprove2()throws Exception", "code": "{\n\tExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u64cd\u4f5c\u7b26\u522b\u540d\n\trunner.addOperatorWithAlias(\"\u5982\u679c\", \"if\",null);\n  runner.addOperatorWithAlias(\"\u5426\u5219\", \"else\",null);\n  \trunner.addOperatorWithAlias(\"\u5927\u4e8e\", \">\",null);\n\t//\n\trunner.addFunctionOfServiceMethod(\"\u6253\u5370\", new WorkflowTest(), \"println\",new String[] { \"String\" }, null);\n\t//\u5b9a\u4e49\u65b9\u6cd5\n\trunner.addFunction(\"\u5ba1\u6279\u901a\u8fc7\", new ApproveOperator(1));\n\trunner.addFunction(\"\u62a5\u9500\u5165\u8d26\", new ApproveOperator(2));\n\trunner.addFunction(\"\u6253\u56de\u4fee\u6539\", new ApproveOperator(3));\n\t//\u52a0\u8f7d\u6587\u4ef6\n\trunner.loadExpress(\"example/approve1\");\n\t//\u4ece\u6307\u5b9a\u6587\u4ef6\u4e2d\u83b7\u53d6\u8868\u793a\u5f0f\u6784\u9020\u6307\u4ee4\u96c6\n\t\n\t//\u8bbe\u7f6e\u4e0a\u4e0b\u6587\u53d8\u91cf\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String, Object>();\n\texpressContext.put(\"\u7ecf\u7406\", \"\u738b\u7ecf\u7406\");\n\texpressContext.put(\"\u603b\u76d1\", \"\u674e\u603b\u76d1\");\n\texpressContext.put(\"\u8d22\u52a1\", \"\u5f20\u8d22\u52a1\");\n\texpressContext.put(\"\u7533\u8bf7\u4eba\", \"\u5c0f\u5f3a\");\n\texpressContext.put(\"\u91d1\u989d\", new Integer(5000));\n\t\n\trunner.executeByExpressName(\"example/approve1\", expressContext, null, false,false,null);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/WorkflowTest.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testAddNByFunction() throws Exception", "code": "{\n\t//\u5b9a\u4e49\u8868\u8fbe\u5f0f\uff0c\u76f8\u5f53\u4e8e1+2+3+4\n\tString exp = \"addN(1,2,3,4)\";\n\tExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u65b9\u6cd5addN\uff0c\u5176\u5b9e\u73b0\u4e3aAddNOperator\n\trunner.addFunction(\"addN\",new AddNOperator());\n\t//\u6267\u884c\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u8d4b\u7ed9r\n\tint r = (Integer)runner.execute(exp,null,null,false,false);\n\tSystem.out.println(r);\n\tAssert.assertTrue(\"\u64cd\u4f5c\u7b26\u6267\u884c\u9519\u8bef\",r==10);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/OperatorTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u8bbe\u7f6e\u8ba1\u65f6\u5668\n * @param timeoutMillis \u8d85\u65f6\u65f6\u95f4\n */\n", "func_signal": "public static void setTimer(long timeoutMillis)", "code": "{\n    NEED_TIMER.set(true);\n    TIME_OUT_MILLIS.set(timeoutMillis);\n}", "path": "QLExpress/src/main/java/com/ql/util/express/config/QLExpressTimer.java", "commit_date": "2019-06-19 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u6267\u884c\u4e00\u6bb5\u6587\u672c\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testApprove1()throws Exception", "code": "{\n\t//\u5b9a\u4e49\u8868\u8fbe\u5f0f\n\tString exp = \"\u5982\u679c (\u5ba1\u6279\u901a\u8fc7(\u7ecf\u7406,\u91d1\u989d)){\" +\n\t\t\t         \"   \u5982\u679c  (\u91d1\u989d  \u5927\u4e8e 5000){ \" +\n\t\t\t         \"     \u5982\u679c  (\u5ba1\u6279\u901a\u8fc7(\u603b\u76d1,\u91d1\u989d)){\" +\n\t\t\t         \"        \u5982\u679c  (\u5ba1\u6279\u901a\u8fc7(\u8d22\u52a1,\u91d1\u989d)){\" +\n\t\t\t         \"           \u62a5\u9500\u5165\u8d26(\u91d1\u989d)\" +\n\t\t\t         \"        }\u5426\u5219  {\" +\n\t\t\t         \"            \u6253\u56de\u4fee\u6539(\u7533\u8bf7\u4eba)\" +\n\t\t\t         \"        }\" +\n\t\t\t         \"     }\u5426\u5219 {\" +\n\t\t\t         \"        \u6253\u56de\u4fee\u6539(\u7533\u8bf7\u4eba)\" +\n\t\t\t         \"     }\" +\n\t\t\t         \"   }\u5426\u5219  {\" +\n\t\t\t         \"      \u5982\u679c  (\u5ba1\u6279\u901a\u8fc7(\u8d22\u52a1,\u91d1\u989d)){\" +\n\t\t\t         \"        \u62a5\u9500\u5165\u8d26(\u91d1\u989d)\" +\n\t\t\t         \"      }\u5426\u5219 {\" +\n\t\t\t         \"         \u6253\u56de\u4fee\u6539(\u7533\u8bf7\u4eba)\" +\n\t\t\t         \"      }\" +\n\t\t\t         \"   }\" +\n\t\t\t         \"}\u5426\u5219 {\" +\n\t\t\t         \"   \u6253\u56de\u4fee\u6539(\u7533\u8bf7\u4eba)\" +\n\t\t\t         \"}\" +\n\t\t\t         \"\u6253\u5370(\\\"\u5b8c\u6210\\\")\";\n    ExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u64cd\u4f5c\u7b26\u522b\u540d\n\trunner.addOperatorWithAlias(\"\u5982\u679c\", \"if\",null);\n\trunner.addOperatorWithAlias(\"\u5426\u5219\", \"else\",null);\n\trunner.addOperatorWithAlias(\"\u5927\u4e8e\", \">\",null);\n\t//\n\trunner.addFunctionOfServiceMethod(\"\u6253\u5370\", new WorkflowTest(), \"println\",new String[] { \"String\" }, null);\n\t//\u5b9a\u4e49\u65b9\u6cd5\n\trunner.addFunction(\"\u5ba1\u6279\u901a\u8fc7\", new ApproveOperator(1));\n\trunner.addFunction(\"\u62a5\u9500\u5165\u8d26\", new ApproveOperator(2));\n\trunner.addFunction(\"\u6253\u56de\u4fee\u6539\", new ApproveOperator(3));\n\t//\u8bbe\u7f6e\u4e0a\u4e0b\u6587\u53d8\u91cf\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\n\texpressContext.put(\"\u7ecf\u7406\", \"\u738b\u7ecf\u7406\");\n\texpressContext.put(\"\u603b\u76d1\", \"\u674e\u603b\u76d1\");\n\texpressContext.put(\"\u8d22\u52a1\", \"\u5f20\u8d22\u52a1\");\n\texpressContext.put(\"\u7533\u8bf7\u4eba\", \"\u5c0f\u5f3a\");\n\texpressContext.put(\"\u91d1\u989d\", new Integer(4000));\n\t//\u6267\u884c\u8868\u8fbe\u5f0f\n\trunner.execute(exp, expressContext, null,false, false);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/WorkflowTest.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u4f7f\u7528\u522b\u540d\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testAlias() throws Exception", "code": "{\n\tString exp = \"cust.setName(\\\"\u5c0f\u5f3a\\\");\" +\n\t\t      \"\u5b9a\u4e49\u522b\u540d custName cust.name;\" + \n\t        \"return custName;\";\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\n\texpressContext.put(\"cust\", new CustBean(1));\n\tExpressRunner runner = new ExpressRunner();\n\t//\n\trunner.addOperatorWithAlias(\"\u5b9a\u4e49\u522b\u540d\", \"alias\", null);\n\t//\u6267\u884c\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u8d4b\u7ed9r\n\tString r = (String)runner.execute(exp,expressContext,null,false,false);\n\tSystem.out.println(r);\n\tAssert.assertTrue(\"\u64cd\u4f5c\u7b26\u6267\u884c\u9519\u8bef\",\"\u5c0f\u5f3a\".equals(r));\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/BeanTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u7248\u672c3.0.9\u4ee5\u4e0b\u5b58\u5728\u591a\u7ebf\u7a0b\u521d\u59cb\u5316\u95ee\u9898\uff0c\u8fd9\u4e2a\u7c7b\u4f5c\u4e3a\u4e00\u4e2a\u6837\u4f8b\n */\n", "func_signal": "public void testCrash() throws InterruptedException, BrokenBarrierException", "code": "{\n    System.out.println(Arrays.asList(splitWord));\n    for (int j = 0; j < 1000; j++) {\n        CyclicBarrier barrier = new CyclicBarrier(11, null);\n        for (int i = 0; i < 10; i++) {\n            Thread t = new Thread(new Worker(barrier), \"t\" + i);\n            t.start();\n        }\n        Thread.sleep(500);\n        barrier.await();\n        while (barrier.getNumberWaiting() > 0) {\n            Thread.sleep(1000);\n        }\n        Thread.sleep(1000);\n        System.out.println(Arrays.asList(splitWord));\n    }\n}", "path": "QLExpress/src/test/java/com/ql/util/express/bugfix/CrashTest.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u8fdb\u884c\u5355\u8bcd\u7c7b\u578b\u5206\u6790\n * @param aRootExpressPackage\n * @param wordObjects\n * @param selfClassDefine\n * @param dealJavaClass\n * @return\n * @throws Exception\n */\n", "func_signal": "public List<ExpressNode> transferWord2ExpressNode(ExpressPackage aRootExpressPackage,Word[] wordObjects,Map<String,String> selfClassDefine,boolean dealJavaClass) throws Exception", "code": "{\n\t\tList<ExpressNode> result = new ArrayList<ExpressNode>();\n\t\tString tempWord;\n\t\tNodeType tempType;\n\t    int point = 0;\n\t\tExpressPackage  tmpImportPackage = null;\n\t\tif(dealJavaClass==true){\n\t\t\ttmpImportPackage = new ExpressPackage(aRootExpressPackage);  \n\t\t    //\u5148\u5904\u7406import\uff0cimport\u5fc5\u987b\u653e\u5728\u6587\u4ef6\u7684\u6700\u5f00\u59cb\uff0c\u5fc5\u987b\u4ee5;\u7ed3\u675f\n\t\t    boolean isImport = false;\n\t\t    StringBuffer importName = new StringBuffer();\n\t\t    while(point <wordObjects.length ){\n\t\t      if(wordObjects[point].word.equals(\"import\") ==true){\n\t\t    \t  isImport = true;\n\t\t    \t  importName.setLength(0);\n\t\t      }else if(wordObjects[point].word.equals(\";\") ==true) {\n\t\t    \t  isImport = false;\n\t\t    \t  tmpImportPackage.addPackage(importName.toString());\n\t\t      }else if(isImport == true){\n\t\t    \t  importName.append(wordObjects[point].word);\n\t\t      }else{\n\t\t    \t  break;\n\t\t      }\n\t\t      point = point + 1;\n\t\t    }\t\t\t\n\t\t}\n\n\t\tString orgiValue = null;\n\t\tObject objectValue = null;\n\t\tNodeType treeNodeType = null;\n\t\tWord tmpWordObject = null;\n\t\twhile(point <wordObjects.length){\n\t\t  tmpWordObject = wordObjects[point];\n\t\t  tempWord = wordObjects[point].word;\n\t\t  \n\t\t  char firstChar = tempWord.charAt(0);\n\t\t  char lastChar = tempWord.substring(tempWord.length() - 1).toLowerCase().charAt(0);\t\t  \n\t\t  if(firstChar >='0' && firstChar<='9'){\n\t\t\t  if(result.size() >0){//\u5bf9 \u8d1f\u53f7\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n\t\t\t\t  if(result.get(result.size() -1).getValue().equals(\"-\")){\n\t\t\t\t\t  if(result.size() == 1 \n\t\t\t\t\t\t || result.size() >=2 \n\t\t\t\t\t\t    && (   result.get(result.size() - 2).isTypeEqualsOrChild(\"OP_LIST\")\n\t\t\t\t\t\t        || result.get(result.size() - 2).isTypeEqualsOrChild(\",\")\n                            || result.get(result.size() - 2).isTypeEqualsOrChild(\"return\")\n                            || result.get(result.size() - 2).isTypeEqualsOrChild(\"?\")\n                            || result.get(result.size() - 2).isTypeEqualsOrChild(\":\")\n\t\t\t\t\t\t        ) \n\t\t\t\t\t\t    && result.get(result.size() - 2).isTypeEqualsOrChild(\")\")==false\n\t\t\t\t\t\t    && result.get(result.size() - 2).isTypeEqualsOrChild(\"]\")==false \n\t\t\t\t\t\t    ){\n\t\t\t\t\t\t  result.remove(result.size() -1);\n\t\t\t\t\t\t  tempWord = \"-\" + tempWord;\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t  if(lastChar =='d'){\n\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_DOUBLE\");\n\t\t\t\t  tempWord = tempWord.substring(0,tempWord.length() -1);\n\t\t\t\t  if(this.isPrecise == true){\n\t\t\t\t\t  objectValue = new BigDecimal(tempWord);\n\t\t\t\t  }else{\n\t\t\t\t      objectValue = Double.valueOf(tempWord);\n\t\t\t\t  }\n\t\t\t  }else if(lastChar =='f'){\n\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_FLOAT\");\n\t\t\t\t  tempWord = tempWord.substring(0,tempWord.length() -1);\n\t\t\t\t  if(this.isPrecise == true){\n\t\t\t\t\t  objectValue = new BigDecimal(tempWord);\n\t\t\t\t  }else{\n\t\t\t\t      objectValue = Float.valueOf(tempWord);\n\t\t\t\t  }\n\t\t\t  }else if(tempWord.indexOf(\".\") >=0){\n\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_DOUBLE\");\n\t\t\t\t  if(this.isPrecise == true){\n\t\t\t\t\t  objectValue = new BigDecimal(tempWord);\n\t\t\t\t  }else{\n\t\t\t\t\t  objectValue = Double.valueOf(tempWord);\n\t\t\t\t  }\n\t\t\t  }else if(lastChar =='l'){\n\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_LONG\");\n\t\t\t\t  tempWord = tempWord.substring(0,tempWord.length() -1);\n\t\t\t\t  objectValue = Long.valueOf(tempWord);\n\t\t\t  }else{\n\t\t\t\t  long tempLong = Long.parseLong(tempWord);\n\t\t\t\t  if(tempLong <= Integer.MAX_VALUE && tempLong >= Integer.MIN_VALUE){\n\t\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_INTEGER\");\n\t\t\t\t\t  objectValue = Integer.valueOf((int)tempLong);\n\t\t\t\t  }else{\n\t\t\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_LONG\");\n\t\t\t\t\t  objectValue = Long.valueOf(tempLong);\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t  treeNodeType = nodeTypeManager.findNodeType(\"CONST\");\n\t\t\t  point = point + 1;\n\t\t  }else if(firstChar =='\"'){\n\t\t\t  if(lastChar !='\"' || tempWord.length() <2){\n\t\t\t\t  throw new QLCompileException(\"\u6ca1\u6709\u5173\u95ed\u7684\u5b57\u7b26\u4e32\uff1a\" + tempWord);\n\t\t\t  }\n\t\t\t  tempWord = tempWord.substring(1,tempWord.length() -1);\n\t\t\t  tempType =nodeTypeManager.findNodeType(\"CONST_STRING\");\n\t\t\t  objectValue = tempWord;\n\t\t\t  treeNodeType = nodeTypeManager.findNodeType(\"CONST\");\n\t\t\t  point = point + 1;\n\t\t  }else if(firstChar =='\\''){\n\t\t\t  if(lastChar !='\\'' || tempWord.length() <2){\n\t\t\t\t  throw new QLCompileException(\"\u6ca1\u6709\u5173\u95ed\u7684\u5b57\u7b26\uff1a\" + tempWord);\n\t\t\t  }\n\t\t\t  tempWord = tempWord.substring(1,tempWord.length() -1);\n\t\t\t  \n\t\t\t  treeNodeType = nodeTypeManager.findNodeType(\"CONST\");\n\t\t\t  if(tempWord.length() == 1 && !ignoreConstChar){ //\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n\t\t\t\t  tempType =nodeTypeManager.findNodeType(\"CONST_CHAR\");\n\t\t\t\t  objectValue = tempWord.charAt(0);\n\t\t\t  }else{\n\t\t\t\t  tempType =nodeTypeManager.findNodeType(\"CONST_STRING\");\n\t\t\t\t  objectValue = tempWord;\n\t\t\t  }\n\t\t\t  \n\t\t\t  point = point + 1;\n\t\t  }else if(tempWord.equals(\"true\") || tempWord.equals(\"false\")){\n\t\t\t  tempType = nodeTypeManager.findNodeType(\"CONST_BOOLEAN\");\n\t\t\t  treeNodeType = nodeTypeManager.findNodeType(\"CONST\");\n\t\t\t  objectValue = Boolean.valueOf(tempWord);\n\t\t\t  point = point + 1;\n\t\t  }else {\n\t\t\t\ttempType = nodeTypeManager.isExistNodeTypeDefine(tempWord);\n\t\t\t\tif(tempType != null && tempType.getKind() != NodeTypeKind.KEYWORD){\n\t\t\t\t\t//\u4e0d\u662f\u5173\u952e\u5b57\n\t\t\t\t\ttempType = null;\n\t\t\t\t}\n\t\t\t\tif (tempType == null) {\n\t\t\t\t\tboolean isClass = false;\n\t\t\t\t\tString tmpStr = \"\";\n\t\t\t\t\tClass<?> tmpClass = null;\n\t\t\t\t\tif (dealJavaClass == true) {\n\t\t\t\t\t\tint j = point;\n\t\t\t\t\t\twhile (j < wordObjects.length) {\n\t\t\t\t\t\t\ttmpStr = tmpStr + wordObjects[j].word;\n\t\t\t\t\t\t\ttmpClass = tmpImportPackage.getClass(tmpStr);\n\t\t\t\t\t\t\tif (tmpClass != null) {\n\t\t\t\t\t\t\t\tpoint = j + 1;\n\t\t\t\t\t\t\t\tisClass = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j < wordObjects.length - 1\n\t\t\t\t\t\t\t\t\t&& wordObjects[j + 1].word.equals(\".\") == true) {\n\t\t\t\t\t\t\t\ttmpStr = tmpStr + wordObjects[j + 1].word;\n\t\t\t\t\t\t\t\tj = j + 2;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isClass == true){\n\t\t\t\t\t\ttempWord = ExpressUtil.getClassName(tmpClass);\n\t\t\t\t\t\torgiValue = tmpStr;\n\t\t\t\t\t\ttempType = nodeTypeManager.findNodeType(\"CONST_CLASS\");\n\t\t\t\t\t\tobjectValue = tmpClass;\n\t\t\t\t\t}else if(this.nodeTypeManager.isFunction(tempWord)){\n\t\t\t\t\t\ttempType = nodeTypeManager.findNodeType(\"FUNCTION_NAME\");\n\t\t\t\t\t\tpoint = point + 1;\n\t\t\t\t\t}else if(selfClassDefine != null && selfClassDefine.containsKey(tempWord)){\n\t\t\t\t\t\ttempType = nodeTypeManager.findNodeType(\"VClass\");\n\t\t\t\t\t\tpoint = point + 1;\n\t\t\t\t    }else{\n\t\t\t\t\t\ttempType = nodeTypeManager.findNodeType(\"ID\");\n\t\t\t\t\t\tpoint = point + 1;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tpoint = point + 1;\n\t\t\t\t}\n\t\t  }\t  \n\t\t  result.add(new ExpressNode(tempType,tempWord,orgiValue,objectValue,treeNodeType,tmpWordObject.line,tmpWordObject.col,tmpWordObject.index));\n\t\t  treeNodeType = null;\n\t\t  objectValue = null;\n\t\t  orgiValue = null;\n\t\t}\n\t\treturn result;\n\t}", "path": "QLExpress/src/main/java/com/ql/util/express/parse/ExpressParse.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u6d4b\u8bd5\u975e\u77ed\u8def\u903b\u8f91,\u5e76\u4e14\u8f93\u51fa\u51fa\u9519\u4fe1\u606f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testNoShortCircuit() throws Exception", "code": "{\n\trunner.setShortCircuit(false);\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();\t\n\texpressContext.put(\"\u8fdd\u89c4\u5929\u6570\", 100);\n\texpressContext.put(\"\u865a\u5047\u4ea4\u6613\u6263\u5206\", 11);\n\texpressContext.put(\"VIP\", false);\n\tList<String> errorInfo = new ArrayList<String>();\n\tinitial();\n\tString expression =\"2 \u5c0f\u4e8e 1 and (\u8fdd\u89c4\u5929\u6570 \u5c0f\u4e8e 90 or \u865a\u5047\u4ea4\u6613\u6263\u5206 \u5c0f\u4e8e 12)\";\n\tboolean result = calculateLogicTest(expression, expressContext, errorInfo);\n\tif(result){\n\t\tSystem.out.println(\"result is success!\");\n\t}else{\n\t\tSystem.out.println(\"result is fail!\");\n\t\tfor(String error : errorInfo){\n\t\t\tSystem.out.println(error);\n\t\t}\n\t}\n\t\n}", "path": "QLExpress/src/test/java/com/ql/util/express/test/logic/ShortCircuitLogicTest.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "/**\n * \u4ece\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u65b9\u6cd5\u53ca\u8868\u8fbe\u5f0f\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testApprove4()throws Exception", "code": "{\n\tExpressRunner runner = new ExpressRunner();\n\t//\u5b9a\u4e49\u64cd\u4f5c\u7b26\u522b\u540d\n\trunner.addOperatorWithAlias(\"\u5982\u679c\", \"if\",null);\n  runner.addOperatorWithAlias(\"\u5426\u5219\", \"else\",null);\n  \trunner.addOperatorWithAlias(\"\u5927\u4e8e\", \">\",null);\n\t//\n\trunner.addFunctionOfServiceMethod(\"\u6253\u5370\", new WorkflowTest(), \"println\",new String[] { \"String\" }, null);\n\t\n\t//\u52a0\u8f7d\u6587\u4ef6\n\trunner.loadExpress(\"example/approve1\");\n\trunner.loadExpress(\"example/approve2\");\n\t//\u8bbe\u7f6e\u4e0a\u4e0b\u6587\u53d8\u91cf\n\tIExpressContext<String,Object> expressContext = new DefaultContext<String, Object>();\n\texpressContext.put(\"\u7ecf\u7406\", \"\u738b\u7ecf\u7406\");\n\texpressContext.put(\"\u603b\u76d1\", \"\u674e\u603b\u76d1\");\n\texpressContext.put(\"\u8d22\u52a1\", \"\u5f20\u8d22\u52a1\");\n\texpressContext.put(\"\u7533\u8bf7\u4eba\", \"\u5c0f\u5f3a\");\n\texpressContext.put(\"\u91d1\u989d\", new Integer(7000));\n\t\n\trunner.executeByExpressName(\"example/approve1\", expressContext, null, false,false,null);\n}", "path": "QLExpress/src/test/java/com/ql/util/express/example/WorkflowTest.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/QLExpress", "stars": 4501, "license": "apache-2.0", "language": "java", "size": 2308}
{"docstring": "// '-' Literal\n", "func_signal": "private static boolean FrameSize_2_0(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FrameSize_2_0\")) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeToken(b, \"-\");\n  r = r && Literal(b, l + 1);\n  exit_section_(b, m, null, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// InstructionStmt | LABEL\n", "func_signal": "private static boolean FunctionBody_0(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionBody_0\")) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = InstructionStmt(b, l + 1);\n  if (!r) r = consumeToken(b, LABEL);\n  exit_section_(b, m, null, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/**\n * Pushes the specified amount of characters back into the input stream.\n *\n * They will be read again by then next call of the scanning method\n *\n * @param number  the number of characters to be read again.\n *                This number must not be greater than yylength()!\n */\n", "func_signal": "public void yypushback(int number)", "code": "{\n  if ( number > yylength() )\n    zzScanError(ZZ_PUSHBACK_2BIG);\n\n  zzMarkedPos -= number;\n}", "path": "go-lang-idea-plugin/gen/com/goide/lexer/_GoLexer.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/**\n * Reports an error that occured while scanning.\n *\n * In a wellformed scanner (no or only correct usage of\n * yypushback(int) and a match-all fallback rule) this method\n * will only be called with things that \"Can't Possibly Happen\".\n * If this method is called, something is seriously wrong\n * (e.g. a JFlex bug producing a faulty scanner etc.).\n *\n * Usual syntax/scanner level error handling should be done\n * in error fallback rules.\n *\n * @param   errorCode  the code of the errormessage to display\n */\n", "func_signal": "private void zzScanError(int errorCode)", "code": "{\n  String message;\n  try {\n    message = ZZ_ERROR_MSG[errorCode];\n  }\n  catch (ArrayIndexOutOfBoundsException e) {\n    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n\n  throw new Error(message);\n}", "path": "go-lang-idea-plugin/gen/com/goide/lexer/_GoLexer.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// PreprocessorDirective | Function\n", "func_signal": "public static boolean Statement(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"Statement\")) return false;\n  if (!nextTokenIs(b, \"<statement>\", TEXT, IMPORT)) return false;\n  boolean r;\n  Marker m = enter_section_(b, l, _NONE_, STATEMENT, \"<statement>\");\n  r = PreprocessorDirective(b, l + 1);\n  if (!r) r = Function(b, l + 1);\n  exit_section_(b, l, m, r, false, null);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// int | hex\n", "func_signal": "public static boolean Literal(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"Literal\")) return false;\n  if (!nextTokenIs(b, \"<literal>\", HEX, INT)) return false;\n  boolean r;\n  Marker m = enter_section_(b, l, _NONE_, LITERAL, \"<literal>\");\n  r = consumeToken(b, INT);\n  if (!r) r = consumeToken(b, HEX);\n  exit_section_(b, l, m, r, false, null);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// TEXT identifier '(' PSEUDO_REG ')' ',' FunctionFlags [',' FrameSize]\n", "func_signal": "public static boolean FunctionHeader(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionHeader\")) return false;\n  if (!nextTokenIs(b, TEXT)) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeTokens(b, 0, TEXT, IDENTIFIER);\n  r = r && consumeToken(b, LPAREN);\n  r = r && consumeToken(b, PSEUDO_REG);\n  r = r && consumeToken(b, RPAREN);\n  r = r && consumeToken(b, COMMA);\n  r = r && FunctionFlags(b, l + 1);\n  r = r && FunctionHeader_7(b, l + 1);\n  exit_section_(b, m, FUNCTION_HEADER, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/** \n * Unpacks the compressed character translation table.\n *\n * @param packed   the packed character translation table\n * @return         the unpacked character translation table\n */\n", "func_signal": "private static char [] zzUnpackCMap(String packed)", "code": "{\n  int size = 0;\n  for (int i = 0, length = packed.length(); i < length; i += 2) {\n    size += packed.charAt(i);\n  }\n  char[] map = new char[size];\n  int i = 0;  /* index in packed string  */\n  int j = 0;  /* index in unpacked array */\n  while (i < packed.length()) {\n    int  count = packed.charAt(i++);\n    char value = packed.charAt(i++);\n    do map[j++] = value; while (--count > 0);\n  }\n  return map;\n}", "path": "go-lang-idea-plugin/gen/com/goide/lexer/_GoLexer.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// FunctionHeader FunctionBody\n", "func_signal": "public static boolean Function(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"Function\")) return false;\n  if (!nextTokenIs(b, TEXT)) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = FunctionHeader(b, l + 1);\n  r = r && FunctionBody(b, l + 1);\n  exit_section_(b, m, FUNCTION, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/**\n * Resumes scanning until the next regular expression is matched,\n * the end of input is encountered or an I/O-Error occurs.\n *\n * @return      the next token\n * @exception   java.io.IOException  if any I/O-Error occurs\n */\n", "func_signal": "public IElementType advance() throws java.io.IOException", "code": "{\n  int zzInput;\n  int zzAction;\n\n  // cached fields:\n  int zzCurrentPosL;\n  int zzMarkedPosL;\n  int zzEndReadL = zzEndRead;\n  CharSequence zzBufferL = zzBuffer;\n\n  int [] zzTransL = ZZ_TRANS;\n  int [] zzRowMapL = ZZ_ROWMAP;\n  int [] zzAttrL = ZZ_ATTRIBUTE;\n\n  while (true) {\n    zzMarkedPosL = zzMarkedPos;\n\n    zzAction = -1;\n\n    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n\n    zzState = ZZ_LEXSTATE[zzLexicalState];\n\n    // set up zzAction for empty match case:\n    int zzAttributes = zzAttrL[zzState];\n    if ( (zzAttributes & 1) == 1 ) {\n      zzAction = zzState;\n    }\n\n\n    zzForAction: {\n      while (true) {\n\n        if (zzCurrentPosL < zzEndReadL) {\n          zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);\n          zzCurrentPosL += Character.charCount(zzInput);\n        }\n        else if (zzAtEOF) {\n          zzInput = YYEOF;\n          break zzForAction;\n        }\n        else {\n          // store back cached positions\n          zzCurrentPos  = zzCurrentPosL;\n          zzMarkedPos   = zzMarkedPosL;\n          boolean eof = zzRefill();\n          // get translated positions and possibly new buffer\n          zzCurrentPosL  = zzCurrentPos;\n          zzMarkedPosL   = zzMarkedPos;\n          zzBufferL      = zzBuffer;\n          zzEndReadL     = zzEndRead;\n          if (eof) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);\n            zzCurrentPosL += Character.charCount(zzInput);\n          }\n        }\n        int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];\n        if (zzNext == -1) break zzForAction;\n        zzState = zzNext;\n\n        zzAttributes = zzAttrL[zzState];\n        if ( (zzAttributes & 1) == 1 ) {\n          zzAction = zzState;\n          zzMarkedPosL = zzCurrentPosL;\n          if ( (zzAttributes & 8) == 8 ) break zzForAction;\n        }\n\n      }\n    }\n\n    // store back cached position\n    zzMarkedPos = zzMarkedPosL;\n\n    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n      zzAtEOF = true;\n      return null;\n    }\n    else {\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 1: \n          { return BAD_CHARACTER;\n          }\n        case 91: break;\n        case 2: \n          { return NLS;\n          }\n        case 92: break;\n        case 3: \n          { return WS;\n          }\n        case 93: break;\n        case 4: \n          { return QUOTIENT;\n          }\n        case 94: break;\n        case 5: \n          { return MUL;\n          }\n        case 95: break;\n        case 6: \n          { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;\n          }\n        case 96: break;\n        case 7: \n          { yybegin(MAYBE_SEMICOLON); return INT;\n          }\n        case 97: break;\n        case 8: \n          { return MINUS;\n          }\n        case 98: break;\n        case 9: \n          { return DOT;\n          }\n        case 99: break;\n        case 10: \n          { yybegin(MAYBE_SEMICOLON); return STRING;\n          }\n        case 100: break;\n        case 11: \n          { yybegin(MAYBE_SEMICOLON); return RAW_STRING;\n          }\n        case 101: break;\n        case 12: \n          { return BIT_OR;\n          }\n        case 102: break;\n        case 13: \n          { return LBRACE;\n          }\n        case 103: break;\n        case 14: \n          { yybegin(MAYBE_SEMICOLON); return RBRACE;\n          }\n        case 104: break;\n        case 15: \n          { return LBRACK;\n          }\n        case 105: break;\n        case 16: \n          { yybegin(MAYBE_SEMICOLON); return RBRACK;\n          }\n        case 106: break;\n        case 17: \n          { return LPAREN;\n          }\n        case 107: break;\n        case 18: \n          { yybegin(MAYBE_SEMICOLON); return RPAREN;\n          }\n        case 108: break;\n        case 19: \n          { return COLON;\n          }\n        case 109: break;\n        case 20: \n          { return SEMICOLON;\n          }\n        case 110: break;\n        case 21: \n          { return COMMA;\n          }\n        case 111: break;\n        case 22: \n          { return ASSIGN;\n          }\n        case 112: break;\n        case 23: \n          { return NOT;\n          }\n        case 113: break;\n        case 24: \n          { return PLUS;\n          }\n        case 114: break;\n        case 25: \n          { return BIT_AND;\n          }\n        case 115: break;\n        case 26: \n          { return BIT_XOR;\n          }\n        case 116: break;\n        case 27: \n          { return LESS;\n          }\n        case 117: break;\n        case 28: \n          { return REMAINDER;\n          }\n        case 118: break;\n        case 29: \n          { return GREATER;\n          }\n        case 119: break;\n        case 30: \n          { yybegin(YYINITIAL); yypushback(yytext().length());\n          }\n        case 120: break;\n        case 31: \n          { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;\n          }\n        case 121: break;\n        case 32: \n          { return LINE_COMMENT;\n          }\n        case 122: break;\n        case 33: \n          { return MULTILINE_COMMENT;\n          }\n        case 123: break;\n        case 34: \n          { return QUOTIENT_ASSIGN;\n          }\n        case 124: break;\n        case 35: \n          { return MUL_ASSIGN;\n          }\n        case 125: break;\n        case 36: \n          { yybegin(MAYBE_SEMICOLON); return FLOAT;\n          }\n        case 126: break;\n        case 37: \n          { yybegin(MAYBE_SEMICOLON); return DECIMALI;\n          }\n        case 127: break;\n        case 38: \n          { yybegin(MAYBE_SEMICOLON); return OCT;\n          }\n        case 128: break;\n        case 39: \n          { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;\n          }\n        case 129: break;\n        case 40: \n          { return MINUS_ASSIGN;\n          }\n        case 130: break;\n        case 41: \n          { yybegin(MAYBE_SEMICOLON); return CHAR;\n          }\n        case 131: break;\n        case 42: \n          { return COND_OR;\n          }\n        case 132: break;\n        case 43: \n          { return BIT_OR_ASSIGN;\n          }\n        case 133: break;\n        case 44: \n          { return VAR_ASSIGN;\n          }\n        case 134: break;\n        case 45: \n          { return EQ;\n          }\n        case 135: break;\n        case 46: \n          { return NOT_EQ;\n          }\n        case 136: break;\n        case 47: \n          { return PLUS_ASSIGN;\n          }\n        case 137: break;\n        case 48: \n          { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;\n          }\n        case 138: break;\n        case 49: \n          { return BIT_AND_ASSIGN;\n          }\n        case 139: break;\n        case 50: \n          { return COND_AND;\n          }\n        case 140: break;\n        case 51: \n          { return BIT_CLEAR;\n          }\n        case 141: break;\n        case 52: \n          { return BIT_XOR_ASSIGN;\n          }\n        case 142: break;\n        case 53: \n          { return SEND_CHANNEL;\n          }\n        case 143: break;\n        case 54: \n          { return LESS_OR_EQUAL;\n          }\n        case 144: break;\n        case 55: \n          { return SHIFT_LEFT;\n          }\n        case 145: break;\n        case 56: \n          { return REMAINDER_ASSIGN;\n          }\n        case 146: break;\n        case 57: \n          { return GREATER_OR_EQUAL;\n          }\n        case 147: break;\n        case 58: \n          { return SHIFT_RIGHT;\n          }\n        case 148: break;\n        case 59: \n          { return GO;\n          }\n        case 149: break;\n        case 60: \n          { return IF ;\n          }\n        case 150: break;\n        case 61: \n          { yybegin(MAYBE_SEMICOLON); return FLOATI;\n          }\n        case 151: break;\n        case 62: \n          { yybegin(MAYBE_SEMICOLON); return HEX;\n          }\n        case 152: break;\n        case 63: \n          { return TRIPLE_DOT;\n          }\n        case 153: break;\n        case 64: \n          { return VAR;\n          }\n        case 154: break;\n        case 65: \n          { return FOR ;\n          }\n        case 155: break;\n        case 66: \n          { yybegin(MAYBE_SEMICOLON); return BAD_CHARACTER;\n          }\n        case 156: break;\n        case 67: \n          { return BIT_CLEAR_ASSIGN;\n          }\n        case 157: break;\n        case 68: \n          { return SHIFT_LEFT_ASSIGN;\n          }\n        case 158: break;\n        case 69: \n          { return SHIFT_RIGHT_ASSIGN;\n          }\n        case 159: break;\n        case 70: \n          { return MAP;\n          }\n        case 160: break;\n        case 71: \n          { return FUNC;\n          }\n        case 161: break;\n        case 72: \n          { return ELSE;\n          }\n        case 162: break;\n        case 73: \n          { return TYPE_;\n          }\n        case 163: break;\n        case 74: \n          { return GOTO;\n          }\n        case 164: break;\n        case 75: \n          { return CASE;\n          }\n        case 165: break;\n        case 76: \n          { return CHAN;\n          }\n        case 166: break;\n        case 77: \n          { yybegin(MAYBE_SEMICOLON); return BREAK;\n          }\n        case 167: break;\n        case 78: \n          { return RANGE;\n          }\n        case 168: break;\n        case 79: \n          { return CONST;\n          }\n        case 169: break;\n        case 80: \n          { return DEFER;\n          }\n        case 170: break;\n        case 81: \n          { yybegin(MAYBE_SEMICOLON); return RETURN ;\n          }\n        case 171: break;\n        case 82: \n          { return IMPORT ;\n          }\n        case 172: break;\n        case 83: \n          { return SELECT;\n          }\n        case 173: break;\n        case 84: \n          { return STRUCT;\n          }\n        case 174: break;\n        case 85: \n          { return SWITCH;\n          }\n        case 175: break;\n        case 86: \n          { return DEFAULT;\n          }\n        case 176: break;\n        case 87: \n          { return PACKAGE;\n          }\n        case 177: break;\n        case 88: \n          { yybegin(MAYBE_SEMICOLON); return CONTINUE ;\n          }\n        case 178: break;\n        case 89: \n          { return INTERFACE;\n          }\n        case 179: break;\n        case 90: \n          { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;\n          }\n        case 180: break;\n        default:\n          zzScanError(ZZ_NO_MATCH);\n        }\n    }\n  }\n}", "path": "go-lang-idea-plugin/gen/com/goide/lexer/_GoLexer.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// FLAG | '(' FLAG ( '|' FLAG )* ')'\n", "func_signal": "public static boolean FunctionFlags(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionFlags\")) return false;\n  if (!nextTokenIs(b, \"<function flags>\", LPAREN, FLAG)) return false;\n  boolean r;\n  Marker m = enter_section_(b, l, _NONE_, FUNCTION_FLAGS, \"<function flags>\");\n  r = consumeToken(b, FLAG);\n  if (!r) r = FunctionFlags_1(b, l + 1);\n  exit_section_(b, l, m, r, false, null);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/**\n * isReferenceTo optimization. Before complex checking via resolve we can say for sure that element\n * can't be a reference to given declaration in following cases:<br/>\n * \u2013 Blank definitions can't be used as value, so this method return false for all named elements with '_' name<br/>\n * \u2013 GoLabelRef can't be resolved to anything but GoLabelDefinition<br/>\n * \u2013 GoTypeReferenceExpression (not from receiver type) can't be resolved to anything but GoTypeSpec or GoImportSpec<br/>\n * \u2013 Definition is private and reference in different package<br/>\n */\n", "func_signal": "public static boolean couldBeReferenceTo(@NotNull PsiElement definition, @NotNull PsiElement reference)", "code": "{\n  if (definition instanceof PsiDirectory && reference instanceof GoReferenceExpressionBase) return true;\n  if (reference instanceof GoLabelRef && !(definition instanceof GoLabelDefinition)) return false;\n  if (reference instanceof GoTypeReferenceExpression &&\n      !(definition instanceof GoTypeSpec || definition instanceof GoImportSpec)) {\n    return false;\n  }\n\n  PsiFile definitionFile = definition.getContainingFile();\n  PsiFile referenceFile = reference.getContainingFile();\n  // todo: zolotov, are you sure? cross refs, for instance?\n  if (!(definitionFile instanceof GoFile) || !(referenceFile instanceof GoFile)) return false;\n\n  boolean inSameFile = definitionFile.isEquivalentTo(referenceFile);\n  if (inSameFile) return true;\n\n  if (inSamePackage(referenceFile, definitionFile)) return true;\n  return !(reference instanceof GoNamedElement && !((GoNamedElement)reference).isPublic());\n}", "path": "go-lang-idea-plugin/src/com/goide/util/GoUtil.java", "commit_date": "2016-07-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// [',' FrameSize]\n", "func_signal": "private static boolean FunctionHeader_7(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionHeader_7\")) return false;\n  FunctionHeader_7_0(b, l + 1);\n  return true;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// '(' FLAG ( '|' FLAG )* ')'\n", "func_signal": "private static boolean FunctionFlags_1(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionFlags_1\")) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeToken(b, LPAREN);\n  r = r && consumeToken(b, FLAG);\n  r = r && FunctionFlags_1_2(b, l + 1);\n  r = r && consumeToken(b, RPAREN);\n  exit_section_(b, m, null, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// #2301\n", "func_signal": "public void testCheckImportInWholePackage()", "code": "{\n  myFixture.addFileToProject(\"bar/bar1.go\", \"package bar; func Bar() { b := bar{}; b.f.Method() }\");\n  myFixture.addFileToProject(\"bar/bar.go\", \"package bar; import \\\"foo\\\"; type bar struct { f *foo.Foo }\");\n  PsiFile file = myFixture.addFileToProject(\"foo/foo.go\", \"package foo; type Foo struct{}; func (*Foo) M<caret>ethod() {}\");\n  myFixture.configureFromExistingVirtualFile(file.getVirtualFile());\n  Collection<UsageInfo> usages = myFixture.findUsages(myFixture.getElementAtCaret());\n  assertSize(1, usages);\n  UsageInfo first = usages.iterator().next();\n  PsiElement e = first.getElement();\n  GoStatement statement = PsiTreeUtil.getParentOfType(e, GoStatement.class);\n  assertNotNull(statement);\n  assertEquals(\"b.f.Method()\", statement.getText());\n}", "path": "go-lang-idea-plugin/tests/com/goide/GoFindUsageTest.java", "commit_date": "2016-08-04 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// import STRING\n", "func_signal": "public static boolean PreprocessorDirective(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"PreprocessorDirective\")) return false;\n  if (!nextTokenIs(b, IMPORT)) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeTokens(b, 0, IMPORT, STRING);\n  exit_section_(b, m, PREPROCESSOR_DIRECTIVE, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// ',' FrameSize\n", "func_signal": "private static boolean FunctionHeader_7_0(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionHeader_7_0\")) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeToken(b, COMMA);\n  r = r && FrameSize(b, l + 1);\n  exit_section_(b, m, null, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// ['-' Literal]\n", "func_signal": "private static boolean FrameSize_2(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FrameSize_2\")) return false;\n  FrameSize_2_0(b, l + 1);\n  return true;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/* ********************************************************** */\n// INSTRUCTION Operands\n", "func_signal": "public static boolean InstructionStmt(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"InstructionStmt\")) return false;\n  if (!nextTokenIs(b, INSTRUCTION)) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeToken(b, INSTRUCTION);\n  r = r && Operands(b, l + 1);\n  exit_section_(b, m, INSTRUCTION_STMT, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "// '|' FLAG\n", "func_signal": "private static boolean FunctionFlags_1_2_0(PsiBuilder b, int l)", "code": "{\n  if (!recursion_guard_(b, l, \"FunctionFlags_1_2_0\")) return false;\n  boolean r;\n  Marker m = enter_section_(b);\n  r = consumeToken(b, BIT_OR);\n  r = r && consumeToken(b, FLAG);\n  exit_section_(b, m, null, r);\n  return r;\n}", "path": "go-lang-idea-plugin/plan9/gen/com/plan9/intel/lang/core/parser/AsmIntelParser.java", "commit_date": "2016-06-23 00:00:00", "repo_name": "go-lang-plugin-org/go-lang-idea-plugin", "stars": 4568, "license": "other", "language": "java", "size": 34753}
{"docstring": "/*\n * \n * This test shows using a two named parameters.\n * \n * This test shows using annotations for stored procedures and using a\n * resultMap in XML\n */\n", "func_signal": "@Test\npublic void testCallLowHighWithResultSet()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n    List<Name> names = spMapper.getNamesAnnotatedLowHighWithXMLResultMap(1, 1);\n    assertEquals(1, names.size());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a single value parameter.\n * \n * This test shows using annotations for stored procedures\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet2_a1()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 1);\n    List<Name> names = spMapper.getNamesAnnotated(parms);\n    assertEquals(3, names.size());\n    assertEquals(3, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a single value parameter.\n * \n * This test shows using annotations for stored procedures and using a\n * resultMap in XML\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet2_a2()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 1);\n    List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);\n    assertEquals(3, names.size());\n    assertEquals(3, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a Map parameter.\n * \n * This test shows using annotations for stored procedures and using a\n * resultMap in XML\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet3_a2()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);\n    assertEquals(2, parms.get(\"totalRows\"));\n    assertEquals(2, names.size());\n\n    parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 3);\n    names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);\n    assertEquals(1, names.size());\n    assertEquals(1, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a Map parameter.\n * \n * This test shows using annotations for stored procedures and using a\n * resultMap in XML\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet4_a2()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);\n    assertEquals(2, parms.get(\"totalRows\"));\n    assertEquals(2, names.size());\n\n    parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);\n    assertEquals(2, names.size());\n    assertEquals(2, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "// issue #480 and #101\n", "func_signal": "public void shouldExecuteBoundSelectBlogUsingConstructorWithResultMapCollection()", "code": "{\n   SqlSession session = sqlSessionFactory.openSession();\n   try {\n     BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);\n     Blog blog = mapper.selectBlogUsingConstructorWithResultMapCollection(1);\n     assertEquals(1, blog.getId());\n     assertEquals(\"Jim Business\", blog.getTitle());\n     assertNotNull(\"author should not be null\", blog.getAuthor());\n     List<Post> posts = blog.getPosts();\n     assertTrue(\"posts should not be empty\", posts != null && !posts.isEmpty());\n   } finally {\n     session.close();\n   }\n }", "path": "mybatis/src/test/java/org/apache/ibatis/binding/BindingTest.java", "commit_date": "2014-09-13 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "// Only handler\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> void register(TypeHandler<T> typeHandler)", "code": "{\n  boolean mappedTypeFound = false;\n  MappedTypes mappedTypes = typeHandler.getClass().getAnnotation(MappedTypes.class);\n  if (mappedTypes != null) {\n    for (Class<?> handledType : mappedTypes.value()) {\n      register(handledType, typeHandler);\n      mappedTypeFound = true;\n    }\n  }\n  // @since 3.1.0 - try to auto-discover the mapped type\n  if (!mappedTypeFound && typeHandler instanceof TypeReference) {\n    try {\n      TypeReference<T> typeReference = (TypeReference<T>) typeHandler;\n      register(typeReference.getRawType(), typeHandler);\n      mappedTypeFound = true;\n    } catch (Throwable t) {\n      // maybe users define the TypeReference with a different type and are not assignable, so just ignore it\n    }\n  }\n  if (!mappedTypeFound) {\n    register((Class<T>) null, typeHandler);\n  }\n}", "path": "mybatis/src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java", "commit_date": "2014-10-13 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use an input parameter and return a result set from\n * a stored procedure.\n * \n * This test shows using a single value parameter.\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet1()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Name name = spMapper.getName(1);\n    assertNotNull(name);\n    assertEquals(\"Wilma\", name.getFirstName());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows the use of a declared parameter map. We generally prefer\n * inline parameters, because the syntax is more intuitive (no pesky question\n * marks), but a parameter map will work.\n */\n", "func_signal": "@Test\npublic void testAdderAsUpdateWithParameterMap()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"addend1\", 3);\n    parms.put(\"addend2\", 4);\n\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    spMapper.adderWithParameterMap(parms);\n    assertEquals(7, parms.get(\"sum\"));\n\n    parms = new HashMap<String, Object>();\n    parms.put(\"addend1\", 2);\n    parms.put(\"addend2\", 3);\n    spMapper.adderWithParameterMap(parms);\n    assertEquals(5, parms.get(\"sum\"));\n\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use the ARRAY JDBC type with MyBatis.\n * \n * This test shows using annotations for stored procedures\n * \n * @throws SQLException\n */\n", "func_signal": "@Test\npublic void testGetNamesWithArray_a1() throws SQLException", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"ids\", array);\n    List<Name> names = spMapper.getNamesWithArrayAnnotated(parms);\n    Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");\n    assertEquals(4, returnedIds.length);\n    assertEquals(3, parms.get(\"requestedRows\"));\n    assertEquals(2, names.size());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use input and output parameters in a stored\n * procedure. This procedure does not return a result set.\n * \n * This test shows using a multi-property parameter.\n */\n", "func_signal": "@Test\npublic void testAdderAsSelect()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    Parameter parameter = new Parameter();\n    parameter.setAddend1(2);\n    parameter.setAddend2(3);\n\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n    spMapper.adderAsSelect(parameter);\n\n    assertEquals((Integer) 5, parameter.getSum());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use the ARRAY JDBC type with MyBatis.\n * \n * This test shows using annotations for stored procedures and using a\n * resultMap in XML\n * \n * @throws SQLException\n */\n", "func_signal": "@Test\npublic void testGetNamesWithArray_a2() throws SQLException", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"ids\", array);\n    List<Name> names = spMapper.getNamesWithArrayAnnotatedWithXMLResultMap(parms);\n    Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");\n    assertEquals(4, returnedIds.length);\n    assertEquals(3, parms.get(\"requestedRows\"));\n    assertEquals(2, names.size());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a Map parameter.\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet4()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    List<Name> names = spMapper.getNames(parms);\n    assertEquals(2, parms.get(\"totalRows\"));\n    assertEquals(2, names.size());\n\n    parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    names = spMapper.getNames(parms);\n    assertEquals(2, names.size());\n    assertEquals(2, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/** Find all the classes and methods that are required to access the JBoss 6 VFS. */\n", "func_signal": "protected static synchronized void initialize()", "code": "{\n  if (valid == null) {\n    // Assume valid. It will get flipped later if something goes wrong.\n    valid = Boolean.TRUE;\n\n    // Look up and verify required classes\n    VFS.VFS = checkNotNull(getClass(\"org.jboss.vfs.VFS\"));\n    VirtualFile.VirtualFile = checkNotNull(getClass(\"org.jboss.vfs.VirtualFile\"));\n\n    // Look up and verify required methods\n    VFS.getChild = checkNotNull(getMethod(VFS.VFS, \"getChild\", URL.class));\n    VirtualFile.getChildrenRecursively = checkNotNull(getMethod(VirtualFile.VirtualFile,\n        \"getChildrenRecursively\"));\n    VirtualFile.getPathNameRelativeTo = checkNotNull(getMethod(VirtualFile.VirtualFile,\n        \"getPathNameRelativeTo\", VirtualFile.VirtualFile));\n\n    // Verify that the API has not changed\n    checkReturnType(VFS.getChild, VirtualFile.VirtualFile);\n    checkReturnType(VirtualFile.getChildrenRecursively, List.class);\n    checkReturnType(VirtualFile.getPathNameRelativeTo, String.class);\n  }\n}", "path": "mybatis/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "commit_date": "2014-10-13 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use input and output parameters in a stored\n * procedure. This procedure does not return a result set.\n * \n * This test shows using a multi-property parameter.\n */\n", "func_signal": "@Test\npublic void testAdderAsSelectDoubleCall1()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    Parameter parameter = new Parameter();\n    parameter.setAddend1(2);\n    parameter.setAddend2(3);\n\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    spMapper.adderAsSelect(parameter);\n    assertEquals((Integer) 5, parameter.getSum());\n\n    parameter = new Parameter();\n    parameter.setAddend1(2);\n    parameter.setAddend2(3);\n    spMapper.adderAsSelect(parameter);\n    assertEquals((Integer) 5, parameter.getSum());\n\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use a input and output parameters and return a\n * result set from a stored procedure.\n * \n * This test shows using a Map parameter.\n * \n * This test shows using annotations for stored procedures\n */\n", "func_signal": "@Test\npublic void testCallWithResultSet3_a1()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 2);\n    List<Name> names = spMapper.getNamesAnnotated(parms);\n    assertEquals(2, parms.get(\"totalRows\"));\n    assertEquals(2, names.size());\n\n    parms = new HashMap<String, Object>();\n    parms.put(\"lowestId\", 3);\n    names = spMapper.getNamesAnnotated(parms);\n    assertEquals(1, names.size());\n    assertEquals(1, parms.get(\"totalRows\"));\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use the ARRAY JDBC type with MyBatis.\n * \n * @throws SQLException\n */\n", "func_signal": "@Test\npublic void testGetNamesWithArray() throws SQLException", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });\n\n    Map<String, Object> parms = new HashMap<String, Object>();\n    parms.put(\"ids\", array);\n    List<Name> names = spMapper.getNamesWithArray(parms);\n    Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");\n    assertEquals(4, returnedIds.length);\n    assertEquals(3, parms.get(\"requestedRows\"));\n    assertEquals(2, names.size());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use input and output parameters in a stored\n * procedure. This procedure does not return a result set.\n * \n * This test also demonstrates session level cache for output parameters.\n * \n * This test shows using a multi-property parameter.\n */\n", "func_signal": "@Test\npublic void testAdderAsSelectDoubleCall2()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    Parameter parameter = new Parameter();\n    parameter.setAddend1(2);\n    parameter.setAddend2(3);\n\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n\n    spMapper.adderAsSelect(parameter);\n    assertEquals((Integer) 5, parameter.getSum());\n\n    parameter = new Parameter();\n    parameter.setAddend1(4);\n    parameter.setAddend2(5);\n    spMapper.adderAsSelect(parameter);\n    assertEquals((Integer) 9, parameter.getSum());\n\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/**\n * Verifies that the return type of a method is what it is expected to be. If it is not, then\n * this VFS is marked as invalid for the current environment.\n * \n * @param method The method whose return type is to be checked.\n * @param expected A type to which the method's return type must be assignable.\n * @see Class#isAssignableFrom(Class)\n */\n", "func_signal": "protected static void checkReturnType(Method method, Class<?> expected)", "code": "{\n  if (method != null && !expected.isAssignableFrom(method.getReturnType())) {\n    log.error(\"Method \" + method.getClass().getName() + \".\" + method.getName()\n        + \"(..) should return \" + expected.getName() + \" but returns \"\n        + method.getReturnType().getName() + \" instead.\");\n    setInvalid();\n  }\n}", "path": "mybatis/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "commit_date": "2014-10-13 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "/*\n * This test shows how to use input and output parameters in a stored\n * procedure. This procedure does not return a result set.\n * \n * This test shows using a multi-property parameter.\n * \n * This test shows using annotations for stored procedures\n */\n", "func_signal": "@Test\npublic void testAdderAsSelectAnnotated()", "code": "{\n  SqlSession sqlSession = sqlSessionFactory.openSession();\n  try {\n    Parameter parameter = new Parameter();\n    parameter.setAddend1(2);\n    parameter.setAddend2(3);\n\n    SPMapper spMapper = sqlSession.getMapper(SPMapper.class);\n    spMapper.adderAsSelectAnnotated(parameter);\n\n    assertEquals((Integer) 5, parameter.getSum());\n  } finally {\n    sqlSession.close();\n  }\n}", "path": "mybatis/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "commit_date": "2014-02-23 00:00:00", "repo_name": "tuguangquan/mybatis", "stars": 4555, "license": "apache-2.0", "language": "java", "size": 50815}
{"docstring": "// https://github.com/remkop/picocli/issues/1055\n", "func_signal": "public void testIssue1055Case2()", "code": "{\n       //-f pattern -w -d --> wrong: replacement = \"-d\", means -d is treated as an option-parameter for -w\n       try {\n           Issue1054 bean = new Issue1054();\n           new CommandLine(bean).parseArgs(\"-f pattern -w -d\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Expected parameter for option '--replace-with' but found '-d'\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// This example shows how to print the exception message and the usage help message instead.\n", "func_signal": "public static void main(String[] args)", "code": "{\n    IExecutionExceptionHandler errorHandler = new IExecutionExceptionHandler() {\n        public int handleExecutionException(Exception ex,\n                                            CommandLine commandLine,\n                                            ParseResult parseResult) {\n            commandLine.getErr().println(ex.getMessage());\n\n            ExecutionExceptionHandlerDemo2 app = commandLine.getCommand();\n            System.out.printf(\"app.verbosity.length=%d%n\", app.verbosity.length);\n            if (app.verbosity.length >= 2) {\n                ex.printStackTrace();\n            }\n\n            // alternatively, we can get the verbosity from the parse result:\n            boolean[] verbosity = parseResult.matchedOptionValue(\"verbose\", new boolean[0]);\n            System.out.printf(\"parseResult.matchedOption(verbose).length=%d%n\", verbosity.length);\n            if (verbosity.length >= 1) {\n                commandLine.usage(commandLine.getErr());\n            }\n            return commandLine.getCommandSpec().exitCodeOnExecutionException();\n        }\n    };\n    new CommandLine(new ExecutionExceptionHandlerDemo2())\n            .setExecutionExceptionHandler(errorHandler)\n            .execute(\"--verbose\", \"-vvv\");\n}", "path": "picocli/picocli-examples/src/main/java/picocli/examples/exceptionhandler/ExecutionExceptionHandlerDemo2.java", "commit_date": "2020-02-16 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1054\n", "func_signal": "public void testIssue1054()", "code": "{\n       //-f pattern1 -f pattern2 -d --> accepted --> wrong: findPattern = \"pattern2\", \"pattern1\" is lost/ignored\n       try {\n           //TestUtil.setTraceLevel(\"DEBUG\");\n           Issue1054 bean3 = new Issue1054();\n           new CommandLine(bean3).parseArgs(\"-f pattern1 -f pattern2 -d\".split(\" \"));\n           //System.out.println(bean3);\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): (-d | -w=<replacement>)\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1027\n", "func_signal": "public void testIssue1027RepeatingPositionalParams()", "code": "{\n       class Issue1027 {\n           @ArgGroup(exclusive = false, multiplicity = \"1..*\")\n           List<StudentGrade> gradeList;\n       }\n\n       Issue1027 bean = new Issue1027();\n       new CommandLine(bean).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5 Danny 4.0\".split(\" \"));\n\n       assertEquals(4, bean.gradeList.size());\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"), bean.gradeList.get(0));\n       assertEquals(new StudentGrade(\"Billy\", \"3.5\"), bean.gradeList.get(1));\n       assertEquals(new StudentGrade(\"Caily\", \"3.5\"), bean.gradeList.get(2));\n       assertEquals(new StudentGrade(\"Danny\", \"4.0\"), bean.gradeList.get(3));\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/742\n", "func_signal": "public void testIssue742FalseErrorMessage()", "code": "{\n    //TestUtil.setTraceLevel(\"DEBUG\");\n    CommandLine cmd = new CommandLine(new Issue742());\n    ParseResult parseResult = cmd.parseArgs(\"-g=2\", \"-g=3\");\n    List<ParseResult.GroupMatch> multiples = parseResult.getGroupMatches();\n    assertEquals(1, multiples.size());\n    GroupMatch groupMatch = multiples.get(0);\n\n    assertEquals(1, groupMatch.matchedSubgroups().size());\n    ArgGroupSpec dsGroup = cmd.getCommandSpec().argGroups().get(0);\n    @SuppressWarnings(\"unchecked\")\n    List<Issue742.DataSource> datasources = (List<Issue742.DataSource>) dsGroup.userObject();\n    assertEquals(2, datasources.size());\n\n    Issue742.DataSource ds1 = datasources.get(0);\n    assertEquals(\"2\", ds1.aString);\n\n    Issue742.DataSource ds2 = datasources.get(1);\n    assertEquals(\"3\", ds2.aString);\n\n    GroupMatchContainer modeGroupMatchContainer = groupMatch.matchedSubgroups().get(dsGroup);\n    assertEquals(2, modeGroupMatchContainer.matches().size());\n\n    GroupMatch dsGroupMatch1 = modeGroupMatchContainer.matches().get(0);\n    assertEquals(0, dsGroupMatch1.matchedSubgroups().size());\n    assertEquals(Arrays.asList(\"2\"), dsGroupMatch1.matchedValues(dsGroup.args().iterator().next()));\n\n    GroupMatch dsGroupMatch2 = modeGroupMatchContainer.matches().get(1);\n    assertEquals(0, dsGroupMatch2.matchedSubgroups().size());\n    assertEquals(Arrays.asList(\"3\"), dsGroupMatch2.matchedValues(dsGroup.args().iterator().next()));\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1027\n", "func_signal": "public void testIssue1027RepeatingPositionalParamsEdgeCase2()", "code": "{\n       class Issue1027 {\n           @ArgGroup(exclusive = false, multiplicity = \"1..4\")\n           List<StudentGrade> gradeList;\n       }\n\n       Issue1027 bean = new Issue1027();\n       new CommandLine(bean).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5 Danny 4.0\".split(\" \"));\n\n       assertEquals(4, bean.gradeList.size());\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"), bean.gradeList.get(0));\n       assertEquals(new StudentGrade(\"Billy\", \"3.5\"), bean.gradeList.get(1));\n       assertEquals(new StudentGrade(\"Caily\", \"3.5\"), bean.gradeList.get(2));\n       assertEquals(new StudentGrade(\"Danny\", \"4.0\"), bean.gradeList.get(3));\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1055\n", "func_signal": "public void testIssue1055Case1()", "code": "{\n       //-f -f -w text --> accepted --> wrong: findPattern = \"-f\", means, the second -f is treated as an option-parameter for the first -f\n       try {\n           Issue1054 bean = new Issue1054();\n           new CommandLine(bean).parseArgs(\"-f -f -w text\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Expected parameter for option '--find' but found '-f'\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/746\n", "func_signal": "public void test746DefaultValue()", "code": "{\n    //TestUtil.setTraceLevel(\"DEBUG\");\n    CommandWithDefaultValue bean = new CommandWithDefaultValue();\n    CommandLine cmd = new CommandLine(bean);\n\n    cmd.parseArgs();\n    assertEquals(999, bean.initializedGroup.instanceX);\n    assertEquals(999, CommandWithDefaultValue.InitializedGroup.staticX);\n\n    assertNull(bean.declaredGroup);\n    assertNull(CommandWithDefaultValue.DeclaredGroup.staticY);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/746\n", "func_signal": "public void testIssue746DefaultValueWithNestedArgGroups()", "code": "{\n    Issue746.CreateCommand bean = new Issue746.CreateCommand();\n    CommandLine cmd = new CommandLine(bean);\n    cmd.parseArgs();\n    assertEquals(\"l0\", bean.l0);\n    assertEquals(\"l1a\", bean.level1.l1a);\n    assertNull(bean.level1.l1b);\n    assertNull(bean.level1.level2);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1027\n", "func_signal": "public void testIssue1027RepeatingPositionalParamsWithMinMultiplicity()", "code": "{\n       class Issue1027 {\n           @ArgGroup(exclusive = false, multiplicity = \"4..*\")\n           List<StudentGrade> gradeList;\n       }\n\n       Issue1027 bean = new Issue1027();\n       try {\n           new CommandLine(bean).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Group: (<name> <grade>) must be specified 4 times but was matched 3 times\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/745\n", "func_signal": "public void testIssue745SplitDisallowedForSingleValuedOption()", "code": "{\n    CommandWithSplitGroup bean = new CommandWithSplitGroup();\n    try {\n        new CommandLine(bean);\n        fail(\"Expected exception\");\n    } catch (InitializationException ex) {\n        assertEquals(\"Only multi-value options and positional parameters should have a split regex (this check can be disabled by setting system property 'picocli.ignore.invalid.split')\", ex.getMessage());\n    }\n    try {\n        new CommandLine(new CommandWithSplitGroup.DataSource());\n        fail(\"Expected initialization exception\");\n    } catch (InitializationException ex) {\n        assertEquals(\"Only multi-value options and positional parameters should have a split regex (this check can be disabled by setting system property 'picocli.ignore.invalid.split')\", ex.getMessage());\n    }\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "//https://github.com/remkop/picocli/issues/988\n", "func_signal": "public void testIssue988OptionGroupSectionsShouldIncludeSubgroupOptions()", "code": "{\n       String expected = String.format(\"\" +\n               \"Usage: ami [OPTIONS]%n\" +\n               \"ami description%n\" +\n               \"CProject Options:%n\" +\n               \"  -p, --cproject=DIR         The CProject (directory) to process. The cProject%n\" +\n               \"                               name is the basename of the file.%n\" +\n               \"  -r, --includetree=DIR...   Include only the specified CTrees.%n\" +\n               \"  -R, --excludetree=DIR...   Exclude the specified CTrees.%n\" +\n               \"CTree Options:%n\" +\n               \"  -b, --includebase=PATH...  Include child files of cTree (only works with%n\" +\n               \"                               --ctree).%n\" +\n               \"  -B, --excludebase=PATH...  Exclude child files of cTree (only works with%n\" +\n               \"                               --ctree).%n\" +\n               \"  -t, --ctree=DIR            The CTree (directory) to process. The cTree name%n\" +\n               \"                               is the basename of the file.%n\" +\n               \"General Options:%n\" +\n               \"  -i, --input=FILE           Input filename (no defaults)%n\" +\n               \"  -n, --inputname=PATH       User's basename for input files (e.g.%n\" +\n               \"                               foo/bar/<basename>.png) or directories.%n\");\n       assertEquals(expected, new CommandLine(new Issue988()).getUsageMessage());\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1054\n", "func_signal": "public void testIssue1054RegressionTest()", "code": "{\n       //-f pattern -d --> accepted --> ok\n       Issue1054 bean1 = new Issue1054();\n       new CommandLine(bean1).parseArgs(\"-f pattern -d\".split(\" \"));\n       assertEquals(1, bean1.modifications.size());\n       assertEquals(\"pattern\", bean1.modifications.get(0).findPattern.pattern());\n       assertTrue(bean1.modifications.get(0).change.delete);\n       assertNull(bean1.modifications.get(0).change.replacement);\n\n       //-f pattern -w text --> accepted --> ok\n       Issue1054 bean2 = new Issue1054();\n       new CommandLine(bean2).parseArgs(\"-f pattern -w text\".split(\" \")); // also mentioned in #1055\n       assertEquals(1, bean2.modifications.size());\n       assertEquals(\"pattern\", bean2.modifications.get(0).findPattern.pattern());\n       assertFalse(bean2.modifications.get(0).change.delete);\n       assertEquals(\"text\", bean2.modifications.get(0).change.replacement);\n\n       //-f pattern -d -w text --> error --> ok\n       try {\n           new CommandLine(new Issue1054()).parseArgs(\"-f pattern -d -w text\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): --find=<findPattern>\", ex.getMessage());\n       }\n\n       //-d -f pattern -w text --> error --> ok\n       try {\n           new CommandLine(new Issue1054()).parseArgs(\"-d -f pattern -w text\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): --find=<findPattern>\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/655\n", "func_signal": "public void testCompositeValidation()", "code": "{\n       TestComposite app = new TestComposite();\n       CommandLine cmd = new CommandLine(app);\n       try {\n           cmd.parseArgs(\"--add-group\", \"--option2=1\");\n           fail(\"Expect exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): --option1=<option1>\", ex.getMessage());\n       }\n       try {\n           cmd.parseArgs(\"--add-group\");\n           fail(\"Expect exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): (--option1=<option1> --option2=<option2>)\", ex.getMessage());\n       }\n       try {\n           cmd.parseArgs(\"--add-group\", \"--option2=1\", \"--option2=1\");\n           fail(\"Expect exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): --option1=<option1>\", ex.getMessage());\n       }\n       try {\n           cmd.parseArgs(\"--add-group\", \"--option2=1\", \"--option1=1\", \"--add-group\", \"--option2=1\");\n           fail(\"Expect exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): --option1=<option1>\", ex.getMessage());\n       }\n       try {\n           ParseResult parseResult = cmd.parseArgs(\"--add-group\", \"--option2=1\", \"--option1=1\", \"--add-group\");\n           fail(\"Expect exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): (--option1=<option1> --option2=<option2>)\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1027\n", "func_signal": "public void testIssue1027RepeatingPositionalParamsEdgeCase1()", "code": "{\n       class Issue1027 {\n           @ArgGroup(exclusive = false, multiplicity = \"4..*\")\n           List<StudentGrade> gradeList;\n       }\n\n       Issue1027 bean = new Issue1027();\n       new CommandLine(bean).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5 Danny 4.0\".split(\" \"));\n\n       assertEquals(4, bean.gradeList.size());\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"), bean.gradeList.get(0));\n       assertEquals(new StudentGrade(\"Billy\", \"3.5\"), bean.gradeList.get(1));\n       assertEquals(new StudentGrade(\"Caily\", \"3.5\"), bean.gradeList.get(2));\n       assertEquals(new StudentGrade(\"Danny\", \"4.0\"), bean.gradeList.get(3));\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/1027\n", "func_signal": "public void testIssue1027RepeatingPositionalParamsWithMaxMultiplicity()", "code": "{\n       class Issue1027 {\n           @ArgGroup(exclusive = false, multiplicity = \"1..3\")\n           List<StudentGrade> gradeList;\n       }\n\n       try {\n           new CommandLine(new Issue1027()).parseArgs();\n           fail(\"Expected exception\");\n       } catch (MissingParameterException ex) {\n           assertEquals(\"Error: Missing required argument(s): (<name> <grade>)\", ex.getMessage());\n       }\n       Issue1027 bean1 = new Issue1027();\n       new CommandLine(bean1).parseArgs(\"Abby 4.0\".split(\" \"));\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"),  bean1.gradeList.get(0));\n\n       Issue1027 bean2 = new Issue1027();\n       new CommandLine(bean2).parseArgs(\"Abby 4.0 Billy 3.5\".split(\" \"));\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"),  bean2.gradeList.get(0));\n       assertEquals(new StudentGrade(\"Billy\", \"3.5\"), bean2.gradeList.get(1));\n\n       Issue1027 bean3 = new Issue1027();\n       new CommandLine(bean3).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5\".split(\" \"));\n       assertEquals(new StudentGrade(\"Abby\", \"4.0\"),  bean3.gradeList.get(0));\n       assertEquals(new StudentGrade(\"Billy\", \"3.5\"), bean3.gradeList.get(1));\n       assertEquals(new StudentGrade(\"Caily\", \"3.5\"), bean3.gradeList.get(2));\n\n       Issue1027 bean4 = new Issue1027();\n       try {\n           new CommandLine(bean4).parseArgs(\"Abby 4.0 Billy 3.5 Caily 3.5 Danny 4.0\".split(\" \"));\n           fail(\"Expected exception\");\n       } catch (MaxValuesExceededException ex) {\n           assertEquals(\"Error: expected only one match but got (<name> <grade>) [<name> <grade>] [<name> <grade>]=\"\n                   + \"{params[0]=Abby params[1]=4.0 params[0]=Billy params[1]=3.5 params[0]=Caily params[1]=3.5} and (<name> <grade>) \"\n                   + \"[<name> <grade>] [<name> <grade>]={params[0]=Danny params[1]=4.0}\", ex.getMessage());\n       } catch (UnmatchedArgumentException ex) {\n           assertEquals(\"Unmatched arguments from index 6: 'Danny', '4.0'\", ex.getMessage());\n       }\n   }", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "// https://github.com/remkop/picocli/issues/722\n", "func_signal": "@Test\npublic void testIssue722()", "code": "{\n    String expected = String.format(\"\" +\n            \"create --level-0 <l0> (--level-1 <l1> (--level-2a <l2a>) (--level-2b <l2b>%n\" +\n            \"       (--level-3a <l3a>) (--level-3b <l3b>)))%n\");\n\n    CommandLine cmd = new CommandLine(new Issue722.CreateCommand());\n    Help help = new Help(cmd.getCommandSpec(), Help.defaultColorScheme(Help.Ansi.OFF));\n    String actual = help.synopsis(0);\n\n    assertEquals(expected, actual);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "//https://stackoverflow.com/questions/61964838/picocli-list-option-used-in-arggroup-duplicated-in-short-usage-string\n", "func_signal": "@Test\npublic void testIssue1065DuplicateSynopsis()", "code": "{\n    String expected = String.format(\"\" +\n            \"Usage: MyApp [[-A=N[,N...]]...]%n\" +\n            \"  -A=N[,N...]%n\");\n    String actual = new CommandLine(new Issue1065()).getUsageMessage(Help.Ansi.OFF);\n    assertEquals(expected, actual);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "//https://stackoverflow.com/questions/61964838/picocli-list-option-used-in-arggroup-duplicated-in-short-usage-string\n", "func_signal": "@Test\npublic void testIssue1065DuplicateSynopsisVariant()", "code": "{\n    String expected = String.format(\"\" +\n            \"Usage: MyApp [[-A=N]...]%n\" +\n            \"  -A=N%n\");\n    String actual = new CommandLine(new Issue1065NoSplit()).getUsageMessage(Help.Ansi.OFF);\n    assertEquals(expected, actual);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "//https://stackoverflow.com/questions/61964838/picocli-list-option-used-in-arggroup-duplicated-in-short-usage-string\n", "func_signal": "@Test\npublic void testIssue1065ExclusiveGroupNoSplitDuplicateSynopsisVariant()", "code": "{\n    String expected = String.format(\"\" +\n            \"Usage: MyApp [-A=N [-A=N]...]%n\" +\n            \"  -A=N%n\");\n    String actual = new CommandLine(new Issue1065ExclusiveGroupNoSplit()).getUsageMessage(Help.Ansi.OFF);\n    assertEquals(expected, actual);\n}", "path": "picocli/src/test/java/picocli/ArgGroupTest.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "remkop/picocli", "stars": 4643, "license": "apache-2.0", "language": "java", "size": 83151}
{"docstring": "/**\n * Set this to true in order to make the documentation code generation friendly\n *\n * @param forCodeGen - true|false determines the naming strategy used\n * @return this Docket\n */\n", "func_signal": "public Docket forCodeGeneration(boolean forCodeGen)", "code": "{\n  if (forCodeGen) {\n    genericsNamingStrategy = new CodeGenGenericTypeNamingStrategy();\n  }\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Add to the api's vendor extensions\n *\n * @param vendorExtensions Indicates the vendor extension information\n * @return this Docket\n */\n", "func_signal": "public Docket extensions(List<VendorExtension> vendorExtensions)", "code": "{\n  this.vendorExtensions.addAll(vendorExtensions);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Substitutes each generic class with it's direct parameterized type. Use this method to\n * only for types with a single parameterized type. e.g. <code>List&lt;T&gt; or ResponseEntity&lt;T&gt;</code>\n * <code>.genericModelSubstitutes(ResponseEntity.class)</code>\n * would substitute ResponseEntity &lt;MyModel&gt; with MyModel\n *\n * @param genericClasses - generic classes on which to apply generic model substitution.\n * @return this Docket\n */\n", "func_signal": "public Docket genericModelSubstitutes(Class... genericClasses)", "code": "{\n  for (Class clz : genericClasses) {\n    this.ruleBuilders.add(newGenericSubstitutionFunction(clz));\n  }\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\n  List<Integer> digits = new ArrayList<Integer>();\n  digits.add(major);\n  digits.add(minor);\n\n  if (build != 0 || bugfix != 0) {\n    digits.add(bugfix);\n  }\n\n  if (build != 0) {\n    digits.add(build);\n  }\n\n  return StringUtils.collectionToDelimitedString(digits, \".\");\n}", "path": "springfox/springfox-core/src/main/java/springfox/documentation/common/Version.java", "commit_date": "2018-06-27 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Creates a new instance of {@code SimplePluginMetadata}.\n *\n * @param name      must not be {@literal null}.\n * @param version   must not be {@literal null}.\n * @param mediaType must not be {@literal null}\n */\n", "func_signal": "public DocumentationType(String name, String version, MediaType mediaType)", "code": "{\n  super(name, version);\n  this.mediaType = mediaType;\n}", "path": "springfox/springfox-spi/src/main/java/springfox/documentation/spi/DocumentationType.java", "commit_date": "2020-07-12 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Method to add additional models that are not part of any annotation or are perhaps implicit\n *\n * @param first     - at least one is required\n * @param remaining - possible collection of more\n * @return on-going docket\n * @since 2.4.0\n */\n", "func_signal": "public Docket additionalModels(ResolvedType first, ResolvedType... remaining)", "code": "{\n  additionalModels.add(first);\n  additionalModels.addAll(Arrays.stream(remaining).collect(toSet()));\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * @deprecated @since 3.0.0\n * Use @see {@link Example#Example(String, String, String, Object, String, String)}\n * @param mediaType - media type of the example\n * @param value - example literal\n */\n", "func_signal": "@Deprecated\npublic Example(\n    String mediaType,\n    Object value)", "code": "{\n  this.mediaType = mediaType;\n  this.value = value;\n  externalValue = null;\n  id = null;\n  summary = null;\n  description = null;\n}", "path": "springfox/springfox-core/src/main/java/springfox/documentation/schema/Example.java", "commit_date": "2020-08-13 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\n  if (this == obj) {\n    return true;\n  }\n\n  if (!(obj instanceof Version)) {\n    return false;\n  }\n\n  Version that = (Version) obj;\n\n  return this.major == that.major && this.minor == that.minor && this.bugfix == that.bugfix\n      && this.build == that.build;\n}", "path": "springfox/springfox-core/src/main/java/springfox/documentation/common/Version.java", "commit_date": "2018-06-27 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Overrides the default http response messages at the http request method level.\n * <p>\n * To set specific response messages for specific api operations use the swagger core annotations on\n * the appropriate controller methods.\n *\n * @param requestMethod    - http request method for which to apply the message\n * @param responseMessages - the message\n * @return this Docket\n * {@code See swagger annotations <code>@ApiResponse</code>, <code>@ApiResponses</code> }.\n * @see springfox.documentation.spi.service.contexts.Defaults#defaultResponseMessages()\n * Use {@link Docket#responses} instead\n * @deprecated @since 3.0.0\n */\n", "func_signal": "@Deprecated\npublic Docket globalResponseMessage(\n    RequestMethod requestMethod,\n    List<springfox.documentation.service.ResponseMessage> responseMessages)", "code": "{\n  this.responseMessages.put(requestMethod, responseMessages);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\n  int result = 17;\n  result += 31 * major;\n  result += 31 * minor;\n  result += 31 * bugfix;\n  result += 31 * build;\n  return result;\n}", "path": "springfox/springfox-core/src/main/java/springfox/documentation/common/Version.java", "commit_date": "2018-06-27 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Controls how ApiListingReference's are sorted.\n * i.e the ordering of the api's within the swagger Resource Listing.\n * The default sort is Lexicographically by the ApiListingReference's path\n * <p>\n * NOTE: @see <a href=\"https://github.com/springfox/springfox/issues/732\">#732</a> in case you're wondering why\n * specifying position might not work.\n *\n * @param apiListingReferenceOrdering - ordering of the api listing references\n * @return this Docket\n */\n", "func_signal": "public Docket apiListingReferenceOrdering(Comparator<ApiListingReference> apiListingReferenceOrdering)", "code": "{\n  this.apiListingReferenceOrdering = apiListingReferenceOrdering;\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "// some subclass dependency here\n// override one of superclass\n", "func_signal": "@Override\n@ResponseBody\npublic int createObject(@RequestBody FancyPet object)", "code": "{\n  int id = super.createObject(object);\n  // do some logic with sub class\n  return id;\n}", "path": "springfox/springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FancyPetService.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Configures which api operations (via regex patterns) and HTTP methods to apply security contexts to apis.\n *\n * @param securityContexts - defines security requirements for the apis\n * @return this Docket\n */\n", "func_signal": "public Docket securityContexts(List<SecurityContext> securityContexts)", "code": "{\n  this.securityContexts.addAll(securityContexts);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Create a new ApplicationEvent.\n *\n * @param source the component that published the event (never {@code null})\n * @param objectMapper object mapper to send to event consumers\n */\n", "func_signal": "public ObjectMapperConfigured(Object source, ObjectMapper objectMapper)", "code": "{\n  super(source);\n  this.source = source;\n  this.objectMapper = objectMapper;\n}", "path": "springfox/springfox-schema/src/main/java/springfox/documentation/schema/configuration/ObjectMapperConfigured.java", "commit_date": "2018-06-23 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Sets the api's meta information as included in the json ResourceListing response.\n *\n * @param apiInfo Indicates the api information\n * @return this Docket\n */\n", "func_signal": "public Docket apiInfo(ApiInfo apiInfo)", "code": "{\n  this.apiInfo = defaultIfAbsent(apiInfo, this.apiInfo);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Extensibility mechanism to add a servlet path mapping, if there is one, to the apis base path.\n *\n * @param path - path that acts as a prefix to the api base path\n * @return this Docket\n */\n", "func_signal": "public Docket pathMapping(String path)", "code": "{\n  this.pathMapping = ofNullable(path);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.lang.Comparable#compareTo(java.lang.Object)\n */\n", "func_signal": "public int compareTo(Version that)", "code": "{\n\n  if (that == null) {\n    return 1;\n  }\n\n  if (major != that.major) {\n    return major - that.major;\n  }\n\n  if (minor != that.minor) {\n    return minor - that.minor;\n  }\n\n  if (bugfix != that.bugfix) {\n    return bugfix - that.bugfix;\n  }\n\n  if (build != that.build) {\n    return build - that.build;\n  }\n\n  return 0;\n}", "path": "springfox/springfox-core/src/main/java/springfox/documentation/common/Version.java", "commit_date": "2018-06-27 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Adds model substitution rules (alternateTypeRules)\n *\n * @param alternateTypeRules - rules to be applied\n * @return this Docket\n * @see springfox.documentation.schema.AlternateTypeRules#newRule(java.lang.reflect.Type,\n * java.lang.reflect.Type)\n */\n", "func_signal": "public Docket alternateTypeRules(AlternateTypeRule... alternateTypeRules)", "code": "{\n  this.ruleBuilders.addAll(Stream.of(alternateTypeRules).map(identityRuleBuilder()).collect(toList()));\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * Decides whether to use url templating for paths. This is especially useful when you have search api's that\n * might have multiple request mappings for each search use case.\n * <p>\n * This is an incubating feature that may not continue to be supported after the swagger specification is modified\n * to accommodate the use case as described in issue #711\n *\n * @param enabled - when true it enables rfc6570 url templates\n * @return this Docket\n */\n", "func_signal": "@Incubating(\"2.1.0\")\npublic Docket enableUrlTemplating(boolean enabled)", "code": "{\n  this.enableUrlTemplating = enabled;\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * If more than one instance of Docket exists, each one must have a unique groupName as\n * supplied by this method. Defaults to \"default\".\n *\n * @param groupName - the unique identifier of this swagger group/configuration\n * @return this Docket\n */\n", "func_signal": "public Docket groupName(String groupName)", "code": "{\n  this.groupName = defaultIfAbsent(groupName, this.groupName);\n  return this;\n}", "path": "springfox/springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java", "commit_date": "2020-06-25 00:00:00", "repo_name": "springfox/springfox", "stars": 5899, "license": "apache-2.0", "language": "java", "size": 186279}
{"docstring": "/**\n * \u5217\u8868\u6307\u5b9a\u5305\u4e2d\u7684\u6240\u6709\u5b50\u7c7b\n *\n * @param packageName \u5305\u540d\u79f0\n * @param recursive   \u662f\u5426\u9012\u5f52\u67e5\u627e\n * @param superClazz  \u7236\u7c7b\u7684\u7c7b\u578b\n * @return \u5b50\u7c7b\u96c6\u5408\n */\n", "func_signal": "static public Set<Class<?>> listSubClazz(\n    String packageName,\n    boolean recursive,\n    Class<?> superClazz)", "code": "{\n    if (superClazz == null) {\n        return Collections.emptySet();\n    } else {\n        return listClazz(packageName, recursive, superClazz::isAssignableFrom);\n    }\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/util/PackageUtil.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 userId = 1;</code>\n * @param value The userId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setUserId(int value)", "code": "{\n  \n  userId_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u505c\u9a7b\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 stopUserId = 1;</code>\n * @param value The stopUserId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setStopUserId(int value)", "code": "{\n  \n  stopUserId_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u79fb\u52a8\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 moveUserId = 1;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearMoveUserId()", "code": "{\n  \n  moveUserId_ = 0;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u505c\u9a7b\u5728\u4f4d\u7f6e Y\n * </pre>\n *\n * <code>float stopAtPosY = 3;</code>\n * @param value The stopAtPosY to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setStopAtPosY(float value)", "code": "{\n  \n  stopAtPosY_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u82f1\u96c4\u5f62\u8c61\n * </pre>\n *\n * <code>string heroAvatar = 2;</code>\n * @return The bytes for heroAvatar.\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getHeroAvatarBytes()", "code": "{\n  java.lang.Object ref = heroAvatar_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    heroAvatar_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u82f1\u96c4\u5f62\u8c61\n * </pre>\n *\n * <code>string heroAvatar = 2;</code>\n * @return The bytes for heroAvatar.\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getHeroAvatarBytes()", "code": "{\n  java.lang.Object ref = heroAvatar_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    heroAvatar_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * \u5217\u8868\u6307\u5b9a\u5305\u4e2d\u7684\u6240\u6709\u7c7b\n *\n * @param packageName \u5305\u540d\u79f0\n * @param recursive   \u662f\u5426\u9012\u5f52\u67e5\u627e?\n * @param filter      \u8fc7\u6ee4\u5668\n * @return \u7b26\u5408\u6761\u4ef6\u7684\u7c7b\u96c6\u5408\n */\n", "func_signal": "static public Set<Class<?>> listClazz(\n    String packageName, boolean recursive, IClazzFilter filter)", "code": "{\n\n    if (packageName == null ||\n        packageName.isEmpty()) {\n        return null;\n    }\n\n    // \u5c06\u70b9\u8f6c\u6362\u6210\u659c\u6760\n    final String packagePath = packageName.replace('.', '/');\n    // \u83b7\u53d6\u7c7b\u52a0\u8f7d\u5668\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n\n    // \u7ed3\u679c\u96c6\u5408\n    Set<Class<?>> resultSet = new HashSet<>();\n\n    try {\n        // \u83b7\u53d6 URL \u679a\u4e3e\n        Enumeration<URL> urlEnum = cl.getResources(packagePath);\n\n        while (urlEnum.hasMoreElements()) {\n            // \u83b7\u53d6\u5f53\u524d URL\n            URL currUrl = urlEnum.nextElement();\n            // \u83b7\u53d6\u534f\u8bae\u6587\u672c\n            final String protocol = currUrl.getProtocol();\n            // \u5b9a\u4e49\u4e34\u65f6\u96c6\u5408\n            Set<Class<?>> tmpSet = null;\n\n            if (\"FILE\".equalsIgnoreCase(protocol)) {\n                // \u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u7c7b\n                tmpSet = listClazzFromDir(\n                    new File(currUrl.getFile()), packageName, recursive, filter\n                );\n            } else if (\"JAR\".equalsIgnoreCase(protocol)) {\n                // \u83b7\u53d6\u6587\u4ef6\u5b57\u7b26\u4e32\n                String fileStr = currUrl.getFile();\n\n                if (fileStr.startsWith(\"file:\")) {\n                    // \u5982\u679c\u662f\u4ee5 \"file:\" \u5f00\u5934\u7684,\n                    // \u5219\u53bb\u9664\u8fd9\u4e2a\u5f00\u5934\n                    fileStr = fileStr.substring(5);\n                }\n\n                if (fileStr.lastIndexOf('!') > 0) {\n                    // \u5982\u679c\u6709 '!' \u5b57\u7b26,\n                    // \u5219\u622a\u65ad '!' \u5b57\u7b26\u4e4b\u540e\u7684\u6240\u6709\u5b57\u7b26\n                    fileStr = fileStr.substring(0, fileStr.lastIndexOf('!'));\n                }\n\n                // \u4ece JAR \u6587\u4ef6\u4e2d\u52a0\u8f7d\u7c7b\n                tmpSet = listClazzFromJar(\n                    new File(fileStr), packageName, recursive, filter\n                );\n            }\n\n            if (tmpSet != null) {\n                // \u5982\u679c\u7c7b\u96c6\u5408\u4e0d\u4e3a\u7a7a,\n                // \u5219\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n                resultSet.addAll(tmpSet);\n            }\n        }\n    } catch (Exception ex) {\n        // \u629b\u51fa\u5f02\u5e38!\n        throw new RuntimeException(ex);\n    }\n\n    return resultSet;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/util/PackageUtil.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u76ee\u6807\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 targetUserId = 2;</code>\n * @param value The targetUserId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setTargetUserId(int value)", "code": "{\n  \n  targetUserId_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u76ee\u6807\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 targetUserId = 1;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearTargetUserId()", "code": "{\n  \n  targetUserId_ = 0;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u82f1\u96c4\u5f62\u8c61\n * </pre>\n *\n * <code>string heroAvatar = 2;</code>\n * @return The heroAvatar.\n */\n", "func_signal": "public java.lang.String getHeroAvatar()", "code": "{\n  java.lang.Object ref = heroAvatar_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    heroAvatar_ = s;\n    return s;\n  }\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * \u4f7f\u7528\u8fde\u63a5\u7b26\u8fde\u63a5\u5b57\u7b26\u4e32\u6570\u7ec4\n *\n * @param strArr \u5b57\u7b26\u4e32\u6570\u7ec4\n * @param conn   \u8fde\u63a5\u7b26\n * @return \u8fde\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "static private String join(String[] strArr, String conn)", "code": "{\n    if (null == strArr ||\n        strArr.length <= 0) {\n        return \"\";\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < strArr.length; i++) {\n        if (i > 0) {\n            // \u6dfb\u52a0\u8fde\u63a5\u7b26\n            sb.append(conn);\n        }\n\n        // \u6dfb\u52a0\u5b57\u7b26\u4e32\n        sb.append(strArr[i]);\n    }\n\n    return sb.toString();\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/util/PackageUtil.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * \u4ece\u76ee\u5f55\u4e2d\u83b7\u53d6\u7c7b\u5217\u8868\n *\n * @param dirFile     \u76ee\u5f55\n * @param packageName \u5305\u540d\u79f0\n * @param recursive   \u662f\u5426\u9012\u5f52\u67e5\u8be2\u5b50\u5305\n * @param filter      \u7c7b\u8fc7\u6ee4\u5668\n * @return \u7b26\u5408\u6761\u4ef6\u7684\u7c7b\u96c6\u5408\n */\n", "func_signal": "static private Set<Class<?>> listClazzFromDir(\n    final File dirFile, final String packageName, final boolean recursive, IClazzFilter filter)", "code": "{\n\n    if (!dirFile.exists() ||\n        !dirFile.isDirectory()) {\n        // \u5982\u679c\u53c2\u6570\u5bf9\u8c61\u4e3a\u7a7a,\n        // \u5219\u76f4\u63a5\u9000\u51fa!\n        return null;\n    }\n\n    // \u83b7\u53d6\u5b50\u6587\u4ef6\u5217\u8868\n    File[] subFileArr = dirFile.listFiles();\n\n    if (subFileArr == null ||\n        subFileArr.length <= 0) {\n        return null;\n    }\n\n    // \u6587\u4ef6\u961f\u5217, \u5c06\u5b50\u6587\u4ef6\u5217\u8868\u6dfb\u52a0\u5230\u961f\u5217\n    Queue<File> fileQ = new LinkedList<>(Arrays.asList(subFileArr));\n\n    // \u7ed3\u679c\u5bf9\u8c61\n    Set<Class<?>> resultSet = new HashSet<>();\n\n    while (!fileQ.isEmpty()) {\n        // \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6587\u4ef6\n        File currFile = fileQ.poll();\n\n        if (currFile.isDirectory() &&\n            recursive) {\n            // \u5982\u679c\u5f53\u524d\u6587\u4ef6\u662f\u76ee\u5f55,\n            // \u5e76\u4e14\u662f\u6267\u884c\u9012\u5f52\u64cd\u4f5c\u65f6,\n            // \u83b7\u53d6\u5b50\u6587\u4ef6\u5217\u8868\n            subFileArr = currFile.listFiles();\n\n            if (subFileArr != null &&\n                subFileArr.length > 0) {\n                // \u6dfb\u52a0\u6587\u4ef6\u5230\u961f\u5217\n                fileQ.addAll(Arrays.asList(subFileArr));\n            }\n            continue;\n        }\n\n        if (!currFile.isFile() ||\n            !currFile.getName().endsWith(\".class\")) {\n            // \u5982\u679c\u5f53\u524d\u6587\u4ef6\u4e0d\u662f\u6587\u4ef6,\n            // \u6216\u8005\u6587\u4ef6\u540d\u4e0d\u662f\u4ee5 .class \u7ed3\u5c3e,\n            // \u5219\u76f4\u63a5\u8df3\u8fc7\n            continue;\n        }\n\n        // \u7c7b\u540d\u79f0\n        String clazzName;\n\n        // \u8bbe\u7f6e\u7c7b\u540d\u79f0\n        clazzName = currFile.getAbsolutePath();\n        // \u6e05\u9664\u6700\u540e\u7684 .class \u7ed3\u5c3e\n        clazzName = clazzName.substring(dirFile.getAbsolutePath().length(), clazzName.lastIndexOf('.'));\n        // \u8f6c\u6362\u76ee\u5f55\u659c\u6760\n        clazzName = clazzName.replace('\\\\', '/');\n        // \u6e05\u9664\u5f00\u5934\u7684 /\n        clazzName = trimLeft(clazzName, \"/\");\n        // \u5c06\u6240\u6709\u7684 / \u4fee\u6539\u4e3a .\n        clazzName = join(clazzName.split(\"/\"), \".\");\n        // \u5305\u540d + \u7c7b\u540d\n        clazzName = packageName + \".\" + clazzName;\n\n        try {\n            // \u52a0\u8f7d\u7c7b\u5b9a\u4e49\n            Class<?> clazzObj = Class.forName(clazzName);\n\n            if (null != filter &&\n                !filter.accept(clazzObj)) {\n                // \u5982\u679c\u8fc7\u6ee4\u5668\u4e0d\u4e3a\u7a7a,\n                // \u4e14\u8fc7\u6ee4\u5668\u4e0d\u63a5\u53d7\u5f53\u524d\u7c7b,\n                // \u5219\u76f4\u63a5\u8df3\u8fc7!\n                continue;\n            }\n\n            // \u6dfb\u52a0\u7c7b\u5b9a\u4e49\u5230\u96c6\u5408\n            resultSet.add(clazzObj);\n        } catch (Exception ex) {\n            // \u629b\u51fa\u5f02\u5e38\n            throw new RuntimeException(ex);\n        }\n    }\n\n    return resultSet;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/util/PackageUtil.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u82f1\u96c4\u5f62\u8c61\n * </pre>\n *\n * <code>string heroAvatar = 2;</code>\n * @param value The bytes for heroAvatar to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setHeroAvatarBytes(\n    com.google.protobuf.ByteString value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  \n  heroAvatar_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 userId = 1;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearUserId()", "code": "{\n  \n  userId_ = 0;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u79fb\u52a8\u5230\u4f4d\u7f6e Y\n * </pre>\n *\n * <code>float moveToPosY = 2;</code>\n * @param value The moveToPosY to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setMoveToPosY(float value)", "code": "{\n  \n  moveToPosY_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u76ee\u6807\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 targetUserId = 1;</code>\n * @param value The targetUserId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setTargetUserId(int value)", "code": "{\n  \n  targetUserId_ = value;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * \u4ece .jar \u6587\u4ef6\u4e2d\u83b7\u53d6\u7c7b\u5217\u8868\n *\n * @param jarFilePath .jar \u6587\u4ef6\u8def\u5f84\n * @param recursive   \u662f\u5426\u9012\u5f52\u67e5\u8be2\u5b50\u5305\n * @param filter      \u7c7b\u8fc7\u6ee4\u5668\n * @return \u7b26\u5408\u6761\u4ef6\u7684\u7c7b\u96c6\u5408\n */\n", "func_signal": "static private Set<Class<?>> listClazzFromJar(\n    final File jarFilePath, final String packageName, final boolean recursive, IClazzFilter filter)", "code": "{\n\n    if (jarFilePath == null ||\n        jarFilePath.isDirectory()) {\n        // \u5982\u679c\u53c2\u6570\u5bf9\u8c61\u4e3a\u7a7a,\n        // \u5219\u76f4\u63a5\u9000\u51fa!\n        return null;\n    }\n\n    // \u7ed3\u679c\u5bf9\u8c61\n    Set<Class<?>> resultSet = new HashSet<>();\n\n    try {\n        // \u521b\u5efa .jar \u6587\u4ef6\u8bfb\u5165\u6d41\n        JarInputStream jarIn = new JarInputStream(new FileInputStream(jarFilePath));\n        // \u8fdb\u5165\u70b9\n        JarEntry entry;\n\n        while ((entry = jarIn.getNextJarEntry()) != null) {\n            if (entry.isDirectory()) {\n                continue;\n            }\n\n            // \u83b7\u53d6\u8fdb\u5165\u70b9\u540d\u79f0\n            String entryName = entry.getName();\n\n            if (!entryName.endsWith(\".class\")) {\n                // \u5982\u679c\u4e0d\u662f\u4ee5 .class \u7ed3\u5c3e,\n                // \u5219\u8bf4\u660e\u4e0d\u662f JAVA \u7c7b\u6587\u4ef6, \u76f4\u63a5\u8df3\u8fc7!\n                continue;\n            }\n\n            if (!recursive) {\n                //\n                // \u5982\u679c\u6ca1\u6709\u5f00\u542f\u9012\u5f52\u6a21\u5f0f,\n                // \u90a3\u4e48\u5c31\u9700\u8981\u5224\u65ad\u5f53\u524d .class \u6587\u4ef6\u662f\u5426\u5728\u6307\u5b9a\u76ee\u5f55\u4e0b?\n                //\n                // \u83b7\u53d6\u76ee\u5f55\u540d\u79f0\n                String tmpStr = entryName.substring(0, entryName.lastIndexOf('/'));\n                // \u5c06\u76ee\u5f55\u4e2d\u7684 \"/\" \u5168\u90e8\u66ff\u6362\u6210 \".\"\n                tmpStr = join(tmpStr.split(\"/\"), \".\");\n\n                if (!packageName.equals(tmpStr)) {\n                    // \u5982\u679c\u5305\u540d\u548c\u76ee\u5f55\u540d\u4e0d\u76f8\u7b49,\n                    // \u5219\u76f4\u63a5\u8df3\u8fc7!\n                    continue;\n                }\n            }\n\n            String clazzName;\n\n            // \u6e05\u9664\u6700\u540e\u7684 .class \u7ed3\u5c3e\n            clazzName = entryName.substring(0, entryName.lastIndexOf('.'));\n            // \u5c06\u6240\u6709\u7684 / \u4fee\u6539\u4e3a .\n            clazzName = join(clazzName.split(\"/\"), \".\");\n\n            // \u52a0\u8f7d\u7c7b\u5b9a\u4e49\n            Class<?> clazzObj = Class.forName(clazzName);\n\n            if (null != filter &&\n                !filter.accept(clazzObj)) {\n                // \u5982\u679c\u8fc7\u6ee4\u5668\u4e0d\u4e3a\u7a7a,\n                // \u4e14\u8fc7\u6ee4\u5668\u4e0d\u63a5\u53d7\u5f53\u524d\u7c7b,\n                // \u5219\u76f4\u63a5\u8df3\u8fc7!\n                continue;\n            }\n\n            // \u6dfb\u52a0\u7c7b\u5b9a\u4e49\u5230\u96c6\u5408\n            resultSet.add(clazzObj);\n        }\n\n        // \u5173\u95ed jar \u8f93\u5165\u6d41\n        jarIn.close();\n    } catch (Exception ex) {\n        // \u629b\u51fa\u5f02\u5e38\n        throw new RuntimeException(ex);\n    }\n\n    return resultSet;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/util/PackageUtil.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u53d1\u52a8\u653b\u51fb\u7684\u7528\u6237 Id\n * </pre>\n *\n * <code>uint32 attkUserId = 1;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearAttkUserId()", "code": "{\n  \n  attkUserId_ = 0;\n  onChanged();\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/**\n * <pre>\n * \u7528\u6237\u4fe1\u606f\u6570\u7ec4\n * </pre>\n *\n * <code>repeated .msg.WhoElseIsHereResult.UserInfo userInfo = 1;</code>\n */\n", "func_signal": "public Builder addUserInfo(\n    int index, org.tinygame.herostory.msg.GameMsgProtocol.WhoElseIsHereResult.UserInfo.Builder builderForValue)", "code": "{\n  if (userInfoBuilder_ == null) {\n    ensureUserInfoIsMutable();\n    userInfo_.add(index, builderForValue.build());\n    onChanged();\n  } else {\n    userInfoBuilder_.addMessage(index, builderForValue.build());\n  }\n  return this;\n}", "path": "InternetArchitect/14\u4e8c\u671f\u82f1\u96c4\u4f20\u8bf4/Java_\u6e38\u620f\u5f00\u53d1\u5165\u95e8-\u7b2c\u56db\u8bfe/herostory4/src/main/java/org/tinygame/herostory/msg/GameMsgProtocol.java", "commit_date": "2019-12-16 00:00:00", "repo_name": "bjmashibing/InternetArchitect", "stars": 4201, "license": "apache-2.0", "language": "java", "size": 298764}
{"docstring": "/*\n * (non-Javadoc)\n * @see example.springdata.jpa.compositions.EmployeeRepository#findSubordinates(example.springdata.jpa.compositions.Employee)\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Employee> findSubordinates(Employee manager)", "code": "{\n\n\treturn entityManager.createQuery(\"SELECT u from User u where u.manager = :manager\") //\n\t\t\t.setParameter(\"manager\", manager) //\n\t\t\t.getResultList();\n}", "path": "spring-data-examples/jpa/example/src/main/java/example/springdata/jpa/compositions/EmployeeRepositoryImpl.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void countBySimpleExample()", "code": "{\n\n\tExample<User> example = Example.of(new User(null, \"White\", null));\n\n\tassertThat(repository.count(example)).isEqualTo(3L);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @return {@link BeforeSaveCallback} for {@link Category}.\n */\n", "func_signal": "@Bean\npublic BeforeSaveCallback<Category> timeStampingSaveTime()", "code": "{\n\n\treturn (entity, aggregateChange) -> {\n\n\t\tentity.timeStamp();\n\n\t\treturn entity;\n\t};\n}", "path": "spring-data-examples/jdbc/basics/src/main/java/example/springdata/jdbc/basics/simpleentity/CategoryConfiguration.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.springframework.data.mongodb.core.messaging.MessageListener#onMessage(org.springframework.data.mongodb.core.messaging.Message)\n */\n", "func_signal": "@Override\npublic void onMessage(Message<S, T> message)", "code": "{\n\n\n\tSystem.out.println(String.format(\"Received Message in collection %s.\\n\\trawsource: %s\\n\\tconverted: %s\",\n\t\t\tmessage.getProperties().getCollectionName(), message.getRaw(), message.getBody()));\n\n\tcount.incrementAndGet();\n\tmessages.add(message);\n}", "path": "spring-data-examples/mongodb/change-streams/src/main/java/example/springdata/mongodb/CollectingMessageListener.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void valueTransformer()", "code": "{\n\n\tExample<User> example = Example.of(new User(null, \"White\", 99), matching(). //\n\t\t\twithMatcher(\"age\", matcher -> matcher.transform(value -> Optional.of(Integer.valueOf(50)))));\n\n\tassertThat(repository.findAll(example)).containsExactly(walter);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/*\n * (non-Javadoc)\n * @see example.springdata.jpa.compositions.ContactRepository#findRelatives(example.springdata.jpa.compositions.Contact)\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Contact> findRelatives(Contact contact)", "code": "{\n\n\treturn entityManager.createQuery(\"SELECT u FROM User u WHERE u.lastname = :lastname\") //\n\t\t\t.setParameter(\"lastname\", contact.getLastname()) //\n\t\t\t.getResultList();\n}", "path": "spring-data-examples/jpa/example/src/main/java/example/springdata/jpa/compositions/ContactRepositoryImpl.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Configures the Spring Security {@link SecurityContext} to be authenticated as the user with the given username and\n * password as well as the given granted authorities.\n *\n * @param username must not be {@literal null} or empty.\n * @param password must not be {@literal null} or empty.\n * @param roles\n */\n", "func_signal": "public static void runAs(String username, String password, String... roles)", "code": "{\n\n\tAssert.notNull(username, \"Username must not be null!\");\n\tAssert.notNull(password, \"Password must not be null!\");\n\n\tSecurityContextHolder.getContext().setAuthentication(\n\t\t\tnew UsernamePasswordAuthenticationToken(username, password, AuthorityUtils.createAuthorityList(roles)));\n}", "path": "spring-data-examples/rest/security/src/main/java/example/springdata/rest/security/SecurityUtils.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void configuringMatchersUsingLambdas()", "code": "{\n\n\tExample<User> example = Example.of(new User(\"Walter\", \"WHITE\", null), matching(). //\n\t\t\twithIgnorePaths(\"age\"). //\n\t\t\twithMatcher(\"firstname\", matcher -> matcher.startsWith()). //\n\t\t\twithMatcher(\"lastname\", matcher -> matcher.ignoreCase()));\n\n\tassertThat(repository.findAll(example)).containsExactlyInAnyOrder(flynn, walter);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @return {@link ApplicationListener} for {@link RelationalEvent}s.\n */\n", "func_signal": "@Bean\npublic ApplicationListener<?> loggingListener()", "code": "{\n\n\treturn (ApplicationListener<ApplicationEvent>) event -> {\n\t\tif (event instanceof RelationalEvent) {\n\t\t\tSystem.out.println(\"Received an event: \" + event);\n\t\t}\n\t};\n}", "path": "spring-data-examples/jdbc/basics/src/main/java/example/springdata/jdbc/basics/simpleentity/CategoryConfiguration.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void substringMatching()", "code": "{\n\n\tExample<User> example = Example.of(new User(\"er\", null, null), matching(). //\n\t\t\twithStringMatcher(StringMatcher.ENDING));\n\n\tassertThat(repository.findAll(example)).containsExactly(skyler, walter);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * All customers with an {@link Account} expiring before the given date.\n *\n * @param date\n * @return\n */\n", "func_signal": "public static Specification<Customer> accountExpiresBefore(LocalDate date)", "code": "{\n\n\treturn (Specification<Customer>) (root, query, cb) -> {\n\n\t\tRoot<Account> accounts = query.from(Account.class);\n\t\tPath<Date> expiryDate = accounts.<Date> get(\"expiryDate\");\n\t\tPredicate customerIsAccountOwner = cb.equal(accounts.<Customer> get(\"customer\"), root);\n\t\tPredicate accountExpiryDateBefore = cb.lessThan(expiryDate, java.sql.Date.valueOf(date));\n\n\t\treturn cb.and(customerIsAccountOwner, accountExpiryDateBefore);\n\t};\n}", "path": "spring-data-examples/jpa/showcase/src/snippets/java/example/springdata/jpa/showcase/snippets/CustomerSpecifications.java", "commit_date": "2020-05-11 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void ignorePropertiesAndMatchByAge()", "code": "{\n\n\tExample<User> example = Example.of(flynn, matching(). //\n\t\t\twithIgnorePaths(\"firstname\", \"lastname\"));\n\n\tassertThat(repository.findOne(example)).contains(flynn);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/*\n * (non-Javadoc)\n * @see example.springdata.jpa.compositions.EmployeeRepository#findCoworkers(example.springdata.jpa.compositions.Employee)\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Employee> findCoworkers(Employee employee)", "code": "{\n\n\treturn entityManager.createQuery(\"SELECT u from User u where u.manager = :manager\") //\n\t\t\t.setParameter(\"manager\", employee.getManager()) //\n\t\t\t.getResultList();\n}", "path": "spring-data-examples/jpa/example/src/main/java/example/springdata/jpa/compositions/EmployeeRepositoryImpl.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Creates a new {@link Customer} with the given firstname and lastname.\n *\n * @param firstname must not be {@literal null} or empty.\n * @param lastname must not be {@literal null} or empty.\n */\n", "func_signal": "public Customer(String firstname, String lastname)", "code": "{\n\n\tAssert.hasText(firstname, \"Firstname must not be null or empty!\");\n\tAssert.hasText(lastname, \"Lastname must not be null or empty!\");\n\n\tthis.firstname = firstname;\n\tthis.lastname = lastname;\n}", "path": "spring-data-examples/mongodb/querydsl/src/main/java/example/springdata/mongodb/Customer.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.springframework.data.querydsl.binding.QuerydslBinderCustomizer#customize(org.springframework.data.querydsl.binding.QuerydslBindings, com.mysema.query.types.EntityPath)\n */\n", "func_signal": "@Override\ndefault public void customize(QuerydslBindings bindings, QUser root)", "code": "{\n\n\tbindings.bind(String.class).first((StringPath path, String value) -> path.containsIgnoreCase(value));\n\tbindings.excluding(root.password);\n}", "path": "spring-data-examples/web/querydsl/src/main/java/example/users/UserRepository.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Creates a new {@link Customer} with the given firstname and lastname.\n *\n * @param firstname must not be {@literal null} or empty.\n * @param lastname must not be {@literal null} or empty.\n */\n", "func_signal": "public Customer(String firstname, String lastname)", "code": "{\n\n\tAssert.hasText(firstname, \"Firstname must not be null or empty!\");\n\tAssert.hasText(lastname, \"Lastname must not be null or empty!\");\n\n\tthis.firstname = firstname;\n\tthis.lastname = lastname;\n}", "path": "spring-data-examples/multi-store/src/main/java/example/springdata/multistore/customer/Customer.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Creates a new {@link Username}.\n *\n * @param username must not be {@literal null} or empty.\n */\n", "func_signal": "public Username(String username)", "code": "{\n\n\tif (!StringUtils.hasText(username)) {\n\t\tthrow new IllegalArgumentException(\"Invalid username!\");\n\t}\n\n\tthis.username = username;\n}", "path": "spring-data-examples/web/example/src/main/java/example/users/Username.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * @see #153\n */\n", "func_signal": "@Test\npublic void matchStartingStringsIgnoreCase()", "code": "{\n\n\tExample<User> example = Example.of(new User(\"Walter\", \"WHITE\", null), matching(). //\n\t\t\twithIgnorePaths(\"age\"). //\n\t\t\twithMatcher(\"firstname\", startsWith()). //\n\t\t\twithMatcher(\"lastname\", ignoreCase()));\n\n\tassertThat(repository.findAll(example)).containsExactlyInAnyOrder(flynn, walter);\n}", "path": "spring-data-examples/jpa/query-by-example/src/test/java/example/springdata/jpa/querybyexample/UserRepositoryIntegrationTests.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Initializes the given {@link MongoOperations} with {@link BlogPost}s from the Spring Blog.\n *\n * @param operations must not be {@literal null}.\n * @throws Exception\n */\n", "func_signal": "public void initialize(MongoOperations operations) throws Exception", "code": "{\n\n\tAssert.notNull(operations, \"MongoOperations must not be null!\");\n\tloadFromClasspathSource(operations);\n}", "path": "spring-data-examples/mongodb/text-search/src/test/java/example/springdata/mongodb/util/BlogPostInitializer.java", "commit_date": "2019-03-22 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/*\n * (non-Javadoc)\n * @see example.springdata.jpa.showcase.snippets.AccountRepositoryCustom#removedExpiredAccounts(org.joda.time.LocalDate)\n */\n", "func_signal": "@Override\npublic void removedExpiredAccounts(LocalDate reference)", "code": "{\n\n\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\tCriteriaQuery<Account> query = cb.createQuery(Account.class);\n\tRoot<Account> account = query.from(Account.class);\n\n\tquery.where(cb.lessThan(account.get(\"expiryDate\").as(Date.class), java.sql.Date.valueOf(reference)));\n\n\tfor (Account each : em.createQuery(query).getResultList()) {\n\t\tem.remove(each);\n\t}\n}", "path": "spring-data-examples/jpa/showcase/src/snippets/java/example/springdata/jpa/showcase/snippets/AccountRepositoryImpl.java", "commit_date": "2020-05-11 00:00:00", "repo_name": "spring-projects/spring-data-examples", "stars": 5028, "license": "apache-2.0", "language": "java", "size": 11619}
{"docstring": "/**\n * Execute the sql statement under this dbPrefix.\n *\n * @param dbPrefix\n * @param sql\n * @param context\n * @return\n * @throws InterpreterException\n */\n", "func_signal": "private InterpreterResult executeSql(String dbPrefix, String sql,\n    InterpreterContext context) throws InterpreterException", "code": "{\n  Connection connection = null;\n  Statement statement;\n  ResultSet resultSet = null;\n  String paragraphId = context.getParagraphId();\n  String user = context.getAuthenticationInfo().getUser();\n\n  try {\n    connection = getConnection(dbPrefix, context);\n  } catch (Exception e) {\n    LOGGER.error(\"Fail to getConnection\", e);\n    try {\n      closeDBPool(user, dbPrefix);\n    } catch (SQLException e1) {\n      LOGGER.error(\"Cannot close DBPool for user, dbPrefix: \" + user + dbPrefix, e1);\n    }\n    if (e instanceof SQLException) {\n      return new InterpreterResult(Code.ERROR, e.getMessage());\n    } else {\n      return new InterpreterResult(Code.ERROR, ExceptionUtils.getStackTrace(e));\n    }\n  }\n  if (connection == null) {\n    return new InterpreterResult(Code.ERROR, \"Prefix not found.\");\n  }\n\n  try {\n    List<String>  sqlArray = sqlSplitter.splitSql(sql);\n    for (String sqlToExecute : sqlArray) {\n      LOGGER.info(\"Execute sql: \" + sqlToExecute);\n      statement = connection.createStatement();\n\n      // fetch n+1 rows in order to indicate there's more rows available (for large selects)\n      statement.setFetchSize(context.getIntLocalProperty(\"limit\", getMaxResult()));\n      statement.setMaxRows(context.getIntLocalProperty(\"limit\", maxRows));\n\n      if (statement == null) {\n        return new InterpreterResult(Code.ERROR, \"Prefix not found.\");\n      }\n\n      try {\n        getJDBCConfiguration(user).saveStatement(paragraphId, statement);\n\n        String statementPrecode =\n            getProperty(String.format(STATEMENT_PRECODE_KEY_TEMPLATE, dbPrefix));\n\n        if (StringUtils.isNotBlank(statementPrecode)) {\n          statement.execute(statementPrecode);\n        }\n\n        // start hive monitor thread if it is hive jdbc\n        String jdbcURL = getJDBCConfiguration(user).getPropertyMap(dbPrefix).getProperty(URL_KEY);\n        if (jdbcURL != null && jdbcURL.startsWith(\"jdbc:hive2://\")) {\n          HiveUtils.startHiveMonitorThread(statement, context,\n                  Boolean.parseBoolean(getProperty(\"hive.log.display\", \"true\")), this);\n        }\n        boolean isResultSetAvailable = statement.execute(sqlToExecute);\n        getJDBCConfiguration(user).setConnectionInDBDriverPoolSuccessful(dbPrefix);\n        if (isResultSetAvailable) {\n          resultSet = statement.getResultSet();\n\n          // Regards that the command is DDL.\n          if (isDDLCommand(statement.getUpdateCount(),\n              resultSet.getMetaData().getColumnCount())) {\n            context.out.write(\"%text Query executed successfully.\\n\");\n          } else {\n            String template = context.getLocalProperties().get(\"template\");\n            if (!StringUtils.isBlank(template)) {\n              resultSet.next();\n              SingleRowInterpreterResult singleRowResult =\n                      new SingleRowInterpreterResult(getFirstRow(resultSet), template, context);\n\n              if (isFirstRefreshMap.get(context.getParagraphId())) {\n                context.out.write(singleRowResult.toAngular());\n                context.out.write(\"\\n%text \");\n                context.out.flush();\n                isFirstRefreshMap.put(context.getParagraphId(), false);\n              }\n              singleRowResult.pushAngularObjects();\n\n            } else {\n              String results = getResults(resultSet,\n                      !containsIgnoreCase(sqlToExecute, EXPLAIN_PREDICATE));\n              context.out.write(results);\n              context.out.write(\"\\n%text \");\n              context.out.flush();\n            }\n          }\n        } else {\n          // Response contains either an update count or there are no results.\n          int updateCount = statement.getUpdateCount();\n          context.out.write(\"\\n%text \" +\n              \"Query executed successfully. Affected rows : \" +\n                  updateCount + \"\\n\");\n        }\n      } finally {\n        if (resultSet != null) {\n          try {\n            resultSet.close();\n          } catch (SQLException e) { /*ignored*/ }\n        }\n        if (statement != null) {\n          try {\n            statement.close();\n          } catch (SQLException e) { /*ignored*/ }\n        }\n      }\n    }\n  } catch (Throwable e) {\n    LOGGER.error(\"Cannot run \" + sql, e);\n    if (e instanceof SQLException) {\n      return new InterpreterResult(Code.ERROR,  e.getMessage());\n    } else {\n      return new InterpreterResult(Code.ERROR, ExceptionUtils.getStackTrace(e));\n    }\n  } finally {\n    //In case user ran an insert/update/upsert statement\n    if (connection != null) {\n      try {\n        if (!connection.getAutoCommit()) {\n          connection.commit();\n        }\n        connection.close();\n      } catch (SQLException e) { /*ignored*/ }\n    }\n    getJDBCConfiguration(user).removeStatement(paragraphId);\n  }\n\n  return new InterpreterResult(Code.SUCCESS);\n}", "path": "zeppelin/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "// This method is supposed to be only called by InterpreterSetting\n// but not InterpreterSetting Template\n", "func_signal": "public Properties getJavaProperties()", "code": "{\n  Properties jProperties = new Properties();\n  Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;\n  for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {\n    if (entry.getValue().getValue() != null) {\n      jProperties.setProperty(entry.getKey().trim(),\n          entry.getValue().getValue().toString().trim());\n    }\n  }\n\n  if (!jProperties.containsKey(\"zeppelin.interpreter.output.limit\")) {\n    jProperties.setProperty(\"zeppelin.interpreter.output.limit\",\n        conf.getInt(ZEPPELIN_INTERPRETER_OUTPUT_LIMIT) + \"\");\n  }\n\n  if (!jProperties.containsKey(ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE.getVarName())) {\n    jProperties.setProperty(ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE.getVarName(),\n        conf.getInt(ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE) + \"\");\n  }\n\n  String interpreterLocalRepoPath = conf.getInterpreterLocalRepoPath();\n  //TODO(zjffdu) change it to interpreterDir/{interpreter_name}\n  jProperties.setProperty(\"zeppelin.interpreter.localRepo\",\n      interpreterLocalRepoPath + \"/\" + id);\n  return jProperties;\n}", "path": "zeppelin/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Wait until %dev paragraph is executed and connected to this process\n */\n", "func_signal": "public void waitForConnected()", "code": "{\n  synchronized (this) {\n    while (!isConnected()) {\n      try {\n        this.wait(10 * 1000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}", "path": "zeppelin/helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Throw exception when interpreter process has already launched\n *\n * @param interpreterGroupId\n * @param properties\n * @throws IOException\n */\n", "func_signal": "public void setInterpreterGroupProperties(String interpreterGroupId, Properties properties)\n    throws IOException", "code": "{\n  ManagedInterpreterGroup interpreterGroup = this.interpreterGroups.get(interpreterGroupId);\n  for (List<Interpreter> session : interpreterGroup.sessions.values()) {\n    for (Interpreter intp : session) {\n      if (!intp.getProperties().equals(properties) &&\n          interpreterGroup.getRemoteInterpreterProcess() != null &&\n          interpreterGroup.getRemoteInterpreterProcess().isRunning()) {\n        throw new IOException(\"Can not change interpreter properties when interpreter process \" +\n            \"has already been launched\");\n      }\n      intp.setProperties(properties);\n    }\n  }\n}", "path": "zeppelin/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * 1. Remove the given Angular variable to the target interpreter(s) angular\n *    registry given a noteId and an optional list of paragraph id(s).\n * 2. Delete AngularObject from note.\n */\n", "func_signal": "protected void angularObjectClientUnbind(NotebookSocket conn,\n                                         Message fromMessage) throws Exception", "code": "{\n  String noteId = fromMessage.getType(\"noteId\");\n  String varName = fromMessage.getType(\"name\");\n  String paragraphId = fromMessage.getType(\"paragraphId\");\n  Note note = getNotebook().getNote(noteId);\n\n  if (paragraphId == null) {\n    throw new IllegalArgumentException(\n        \"target paragraph not specified for \" + \"angular value unBind\");\n  }\n\n  if (note != null) {\n    final InterpreterGroup interpreterGroup = findInterpreterGroupForParagraph(note, paragraphId);\n    final RemoteAngularObjectRegistry registry = (RemoteAngularObjectRegistry)\n        interpreterGroup.getAngularObjectRegistry();\n    AngularObject ao = removeAngularFromRemoteRegistry(noteId, paragraphId, varName, registry,\n        interpreterGroup.getId(), conn);\n    note.deleteAngularObject(interpreterGroup.getId(), noteId, paragraphId, varName);\n  }\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * For %table response replace Tab and Newline characters from the content.\n */\n", "func_signal": "private String replaceReservedChars(String str)", "code": "{\n  if (str == null) {\n    return EMPTY_COLUMN_VALUE;\n  }\n  return str.replace(TAB, WHITESPACE).replace(NEWLINE, WHITESPACE);\n}", "path": "zeppelin/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "// broadcast ClusterEvent\n", "func_signal": "private void broadcastClusterEvent(ClusterEvent event, String msgId, Object... objects)", "code": "{\n  ZeppelinConfiguration conf = ZeppelinConfiguration.create();\n  if (!conf.isClusterMode()) {\n    return;\n  }\n\n  ClusterMessage clusterMessage = new ClusterMessage(event);\n  clusterMessage.setMsgId(msgId);\n\n  for(Object object : objects) {\n    String json = \"\";\n    if (object instanceof AuthenticationInfo) {\n      json = ((AuthenticationInfo) object).toJson();\n      clusterMessage.put(\"AuthenticationInfo\", json);\n    } else if (object instanceof Note) {\n      json = ((Note) object).toJson();\n      clusterMessage.put(\"Note\", json);\n    } else if (object instanceof Paragraph) {\n      json = ((Paragraph) object).toJson();\n      clusterMessage.put(\"Paragraph\", json);\n    } else if (object instanceof Set) {\n      Gson gson = new Gson();\n      json = gson.toJson(object);\n      clusterMessage.put(\"Set<String>\", json);\n    } else if (object instanceof Map) {\n      Gson gson = new Gson();\n      json = gson.toJson(object);\n      clusterMessage.put(\"Map<String, Paragraph>\", json);\n    } else {\n      LOG.error(\"Unknown object type!\");\n    }\n  }\n\n  String msg = ClusterMessage.serializeMessage(clusterMessage);\n  ClusterManagerServer.getInstance(conf).broadcastClusterEvent(\n      ClusterManagerServer.CLUSTER_NOTE_EVENT_TOPIC, msg);\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * When application update output.\n */\n", "func_signal": "@Override\npublic void onOutputUpdated(String noteId, String paragraphId, int index, String appId,\n                            InterpreterResult.Type type, String output)", "code": "{\n  Message msg =\n      new Message(OP.APP_UPDATE_OUTPUT).put(\"noteId\", noteId).put(\"paragraphId\", paragraphId)\n          .put(\"index\", index).put(\"type\", type).put(\"appId\", appId).put(\"data\", output);\n  getConnectionManager().broadcast(noteId, msg);\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "zeppelin/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java", "commit_date": "2020-10-03 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * @return false if user doesn't have writer permission for this paragraph\n */\n", "func_signal": "private boolean hasParagraphWriterPermission(NotebookSocket conn, Notebook notebook,\n                                             String noteId, Set<String> userAndRoles,\n                                             String principal, String op)\n    throws IOException", "code": "{\n  AuthorizationService authorizationService =\n          getNotebookAuthorizationService();\n  if (!authorizationService.isWriter(noteId, userAndRoles)) {\n    permissionError(conn, op, principal, userAndRoles,\n            authorizationService.getOwners(noteId));\n    return false;\n  }\n\n  return true;\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n *\n *\n * @param context\n * @return\n */\n", "func_signal": "public String getDBPrefix(InterpreterContext context)", "code": "{\n  Map<String, String> localProperties = context.getLocalProperties();\n  // It is recommended to use this kind of format: %jdbc(db=mysql)\n  if (localProperties.containsKey(\"db\")) {\n    return localProperties.get(\"db\");\n  }\n  // %jdbc(mysql) is only for backward compatibility\n  for (Map.Entry<String, String> entry : localProperties.entrySet()) {\n    if (entry.getKey().equals(entry.getValue())) {\n      return entry.getKey();\n    }\n  }\n  return DEFAULT_KEY;\n}", "path": "zeppelin/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * This method will sort the properties by the order defined in template.\n * It is because when interpreter setting is loaded in interpreter-setting.json, it is\n * still not in correct order.\n * @param propertiesInTemplate\n */\n", "func_signal": "public void sortPropertiesByTemplate(Object propertiesInTemplate)", "code": "{\n  if (propertiesInTemplate instanceof LinkedHashMap) {\n    List<String> sortedKeys = new ArrayList(((LinkedHashMap) propertiesInTemplate).keySet());\n    if (this.properties instanceof LinkedHashMap) {\n      LinkedHashMap<String, InterpreterProperty> unSortedProperties = (LinkedHashMap) this.properties;\n      List<String> keys = new ArrayList(unSortedProperties.keySet());\n      keys.sort((o1, o2) -> {\n        int i1 = sortedKeys.indexOf(o1);\n        int i2 = sortedKeys.indexOf(o2);\n        if (i1 != -1 && i2 != -1) {\n          if (i1 < i2) {\n            return -1;\n          } else if (i1 > i2) {\n            return 1;\n          } else {\n            return 0;\n          }\n        } else {\n          if (i1 == -1) {\n            return 1;\n          } else {\n            return -1;\n          }\n        }\n      });\n\n      LinkedHashMap<String, InterpreterProperty> sortedProperties = new LinkedHashMap<>();\n      for (String key : keys) {\n        sortedProperties.put(key, unSortedProperties.get(key));\n      }\n      this.properties = sortedProperties;\n    }\n  }\n}", "path": "zeppelin/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Create interpreter from InterpreterSettingTemplate\n *\n * @param o interpreterSetting from InterpreterSettingTemplate\n */\n", "func_signal": "public InterpreterSetting(InterpreterSetting o)", "code": "{\n  this();\n  this.id = o.name;\n  this.name = o.name;\n  this.group = o.group;\n  this.properties = convertInterpreterProperties(\n      o.getProperties());\n  this.interpreterInfos = new ArrayList<>(o.getInterpreterInfos());\n  this.option = InterpreterOption.fromInterpreterOption(o.getOption());\n  this.dependencies = new ArrayList<>(o.getDependencies());\n  this.interpreterDir = o.getInterpreterDir();\n  this.interpreterRunner = o.getInterpreterRunner();\n  this.conf = o.getConf();\n}", "path": "zeppelin/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Update the AngularObject object in the note to InterpreterGroup and AngularObjectRegistry.\n */\n", "func_signal": "private void updateAngularObjectRegistry(NotebookSocket conn, Note note)", "code": "{\n  for(Paragraph paragraph : note.getParagraphs()) {\n    InterpreterGroup interpreterGroup = null;\n    try {\n      interpreterGroup = findInterpreterGroupForParagraph(note, paragraph.getId());\n    } catch (Exception e) {\n      LOG.warn(e.getMessage(), e);\n    }\n    if (null == interpreterGroup) {\n      return;\n    }\n    RemoteAngularObjectRegistry registry = (RemoteAngularObjectRegistry)\n        interpreterGroup.getAngularObjectRegistry();\n\n    List<AngularObject> angularObjects = note.getAngularObjects(interpreterGroup.getId());\n    for (AngularObject ao : angularObjects) {\n      if (StringUtils.equals(ao.getNoteId(), note.getId())\n          && StringUtils.equals(ao.getParagraphId(), paragraph.getId())) {\n        pushAngularObjectToRemoteRegistry(ao.getNoteId(), ao.getParagraphId(),\n            ao.getName(), ao.get(), registry, interpreterGroup.getId(), conn);\n      }\n    }\n  }\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * 1. Push the given Angular variable to the target interpreter angular\n *    registry given a noteId and a paragraph id.\n * 2. Save AngularObject to note.\n */\n", "func_signal": "protected void angularObjectClientBind(NotebookSocket conn,\n                                       Message fromMessage) throws Exception", "code": "{\n  String noteId = fromMessage.getType(\"noteId\");\n  String varName = fromMessage.getType(\"name\");\n  Object varValue = fromMessage.get(\"value\");\n  String paragraphId = fromMessage.getType(\"paragraphId\");\n  Note note = getNotebook().getNote(noteId);\n\n  if (paragraphId == null) {\n    throw new IllegalArgumentException(\n        \"target paragraph not specified for \" + \"angular value bind\");\n  }\n\n  if (note != null) {\n    final InterpreterGroup interpreterGroup = findInterpreterGroupForParagraph(note, paragraphId);\n    final RemoteAngularObjectRegistry registry = (RemoteAngularObjectRegistry)\n        interpreterGroup.getAngularObjectRegistry();\n    AngularObject ao = pushAngularObjectToRemoteRegistry(noteId, paragraphId, varName, varValue, registry,\n        interpreterGroup.getId(), conn);\n    note.addOrUpdateAngularObject(interpreterGroup.getId(), ao);\n  }\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "//TODO(zjffdu) ugly code, should not use JsonObject as parameter. not readable\n", "func_signal": "public void convertPermissionsFromUsersToOwners(JsonObject jsonObject)", "code": "{\n  if (jsonObject != null) {\n    JsonObject option = jsonObject.getAsJsonObject(\"option\");\n    if (option != null) {\n      JsonArray users = option.getAsJsonArray(\"users\");\n      if (users != null) {\n        if (this.option.getOwners() == null) {\n          this.option.owners = new LinkedList<>();\n        }\n        for (JsonElement user : users) {\n          this.option.getOwners().add(user.getAsString());\n        }\n      }\n    }\n  }\n}", "path": "zeppelin/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * This callback is for the paragraph that runs on ZeppelinServer.\n *\n * @param output output to append\n */\n", "func_signal": "@Override\npublic void onOutputAppend(String noteId, String paragraphId, int index, String output)", "code": "{\n  if (!sendParagraphStatusToFrontend) {\n    return;\n  }\n  Message msg = new Message(OP.PARAGRAPH_APPEND_OUTPUT).put(\"noteId\", noteId)\n      .put(\"paragraphId\", paragraphId).put(\"index\", index).put(\"data\", output);\n  getConnectionManager().broadcast(noteId, msg);\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * When application append output.\n */\n", "func_signal": "@Override\npublic void onOutputAppend(String noteId, String paragraphId, int index, String appId,\n                           String output)", "code": "{\n  Message msg =\n      new Message(OP.APP_APPEND_OUTPUT).put(\"noteId\", noteId).put(\"paragraphId\", paragraphId)\n          .put(\"index\", index).put(\"appId\", appId).put(\"data\", output);\n  getConnectionManager().broadcast(noteId, msg);\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "@org.apache.thrift.annotation.Nullable\npublic static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // NOTE_ID\n      return NOTE_ID;\n    case 2: // PARAGRAPH_IDS\n      return PARAGRAPH_IDS;\n    case 3: // PARAGRAPH_INDICES\n      return PARAGRAPH_INDICES;\n    case 4: // CUR_PARAGRAPH_ID\n      return CUR_PARAGRAPH_ID;\n    default:\n      return null;\n  }\n}", "path": "zeppelin/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java", "commit_date": "2020-10-03 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * This callback is for the paragraph that runs on ZeppelinServer.\n *\n * @param output output to update (replace)\n */\n", "func_signal": "@Override\npublic void onOutputUpdated(String noteId, String paragraphId, int index,\n                            InterpreterResult.Type type, String output)", "code": "{\n  if (!sendParagraphStatusToFrontend) {\n    return;\n  }\n  Message msg = new Message(OP.PARAGRAPH_UPDATE_OUTPUT).put(\"noteId\", noteId)\n      .put(\"paragraphId\", paragraphId).put(\"index\", index).put(\"type\", type).put(\"data\", output);\n  try {\n    Note note = getNotebook().getNote(noteId);\n    if (note == null) {\n      LOG.warn(\"Note \" + noteId + \" note found\");\n      return;\n    }\n    Paragraph paragraph = note.getParagraph(paragraphId);\n    paragraph.updateOutputBuffer(index, type, output);\n    if (note.isPersonalizedMode()) {\n      String user = note.getParagraph(paragraphId).getUser();\n      if (null != user) {\n        getConnectionManager().multicastToUser(user, msg);\n      }\n    } else {\n      getConnectionManager().broadcast(noteId, msg);\n    }\n  } catch (IOException e) {\n    LOG.warn(\"Fail to call onOutputUpdated\", e);\n  }\n}", "path": "zeppelin/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/zeppelin", "stars": 6238, "license": "apache-2.0", "language": "java", "size": 103323}
{"docstring": "/**\n * Iterates over the predecessors of this instruction, and merges all the post-instruction register types for the\n * given register. Any dead, unreachable, or odexed predecessor is ignored. This takes into account any overridden\n * predecessor register types\n *\n * @param registerNumber the register number\n * @return The register type resulting from merging the post-instruction register types from all predecessors\n */\n", "func_signal": "@Nonnull\nprotected RegisterType getMergedPreRegisterTypeFromPredecessors(int registerNumber)", "code": "{\n    RegisterType mergedRegisterType = null;\n    for (AnalyzedInstruction predecessor: predecessors) {\n        RegisterType predecessorRegisterType = getPredecessorRegisterType(predecessor, registerNumber);\n        if (predecessorRegisterType != null) {\n            if (mergedRegisterType == null) {\n                mergedRegisterType = predecessorRegisterType;\n            } else {\n                mergedRegisterType = predecessorRegisterType.merge(mergedRegisterType);\n            }\n        }\n    }\n    if (mergedRegisterType == null) {\n        // This is a start-of-method or unreachable instruction.\n        throw new IllegalStateException();\n    }\n    return mergedRegisterType;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Checks whether any of the size-sensitive constant pools have more than the supplied maximum number of entries.\n *\n * @param maxPoolSize the maximum number of entries allowed in any of the size-sensitive constant pools\n * @return true if any of the size-sensitive constant pools have overflowed the supplied size limit\n */\n", "func_signal": "public boolean hasOverflowed(int maxPoolSize)", "code": "{\n    for (IndexSection section: overflowableSections) {\n        if (section.getItemCount() > maxPoolSize) return true;\n    }\n    return false;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/writer/DexWriter.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Sets the \"post-instruction\" register type as indicated.\n * @param registerNumber Which register to set\n * @param registerType The \"post-instruction\" register type\n * @return true if the given register type is different than the existing post-instruction register type\n */\n", "func_signal": "protected boolean setPostRegisterType(int registerNumber, RegisterType registerType)", "code": "{\n    assert registerNumber >= 0 && registerNumber < postRegisterMap.length;\n    assert registerType != null;\n\n    RegisterType oldRegisterType = postRegisterMap[registerNumber];\n    if (oldRegisterType.equals(registerType)) {\n        return false;\n    }\n\n    postRegisterMap[registerNumber] = registerType;\n    return true;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Gets the dex version from an odex header\n *\n * @param buf A byte array containing at least the first 7 bytes of an odex file\n * @param offset The offset within the buffer to the beginning of the odex header\n * @return The odex version if the header is valid or -1 if the header is invalid\n */\n", "func_signal": "public static int getVersion(byte[] buf, int offset)", "code": "{\n    if (!verifyMagic(buf, offset)) {\n        return -1;\n    }\n\n    return getVersionUnchecked(buf, offset);\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/dexbacked/raw/CdexHeaderItem.java", "commit_date": "2019-08-07 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Converts an array of UTF-8 bytes into a string.\n *\n * @param bytes non-null; the bytes to convert\n * @param start the start index of the utf8 string to convert\n * @param length the length of the utf8 string to convert, not including any null-terminator that might be present\n * @return non-null; the converted string\n */\n", "func_signal": "public static String utf8BytesToString(byte[] bytes, int start, int length)", "code": "{\n    char[] chars = localBuffer.get();\n    if (chars == null || chars.length < length) {\n        chars = new char[length];\n        localBuffer.set(chars);\n    }\n    int outAt = 0;\n\n    for (int at = start; length > 0; /*at*/) {\n        int v0 = bytes[at] & 0xFF;\n        char out;\n        switch (v0 >> 4) {\n            case 0x00: case 0x01: case 0x02: case 0x03:\n            case 0x04: case 0x05: case 0x06: case 0x07: {\n                // 0XXXXXXX -- single-byte encoding\n                length--;\n                if (v0 == 0) {\n                    // A single zero byte is illegal.\n                    return throwBadUtf8(v0, at);\n                }\n                out = (char) v0;\n                at++;\n                break;\n            }\n            case 0x0c: case 0x0d: {\n                // 110XXXXX -- two-byte encoding\n                length -= 2;\n                if (length < 0) {\n                    return throwBadUtf8(v0, at);\n                }\n                int v1 = bytes[at + 1] & 0xFF;\n                if ((v1 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v1, at + 1);\n                }\n                int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                if ((value != 0) && (value < 0x80)) {\n                    /*\n                     * This should have been represented with\n                     * one-byte encoding.\n                     */\n                    return throwBadUtf8(v1, at + 1);\n                }\n                out = (char) value;\n                at += 2;\n                break;\n            }\n            case 0x0e: {\n                // 1110XXXX -- three-byte encoding\n                length -= 3;\n                if (length < 0) {\n                    return throwBadUtf8(v0, at);\n                }\n                int v1 = bytes[at + 1] & 0xFF;\n                if ((v1 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v1, at + 1);\n                }\n                int v2 = bytes[at + 2] & 0xFF;\n                if ((v2 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v2, at + 2);\n                }\n                int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                if (value < 0x800) {\n                    /*\n                     * This should have been represented with one- or\n                     * two-byte encoding.\n                     */\n                    return throwBadUtf8(v2, at + 2);\n                }\n                out = (char) value;\n                at += 3;\n                break;\n            }\n            default: {\n                // 10XXXXXX, 1111XXXX -- illegal\n                return throwBadUtf8(v0, at);\n            }\n        }\n        chars[outAt] = out;\n        outAt++;\n    }\n\n    return new String(chars, 0, outAt);\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/Utf8Utils.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Converts a string into its Java-style UTF-8 form. Java-style UTF-8\n * differs from normal UTF-8 in the handling of character '\\0' and\n * surrogate pairs.\n *\n * @param string non-null; the string to convert\n * @return non-null; the UTF-8 bytes for it\n */\n", "func_signal": "public static byte[] stringToUtf8Bytes(String string)", "code": "{\n    int len = string.length();\n    byte[] bytes = new byte[len * 3]; // Avoid having to reallocate.\n    int outAt = 0;\n\n    for (int i = 0; i < len; i++) {\n        char c = string.charAt(i);\n        if ((c != 0) && (c < 0x80)) {\n            bytes[outAt] = (byte) c;\n            outAt++;\n        } else if (c < 0x800) {\n            bytes[outAt] = (byte) (((c >> 6) & 0x1f) | 0xc0);\n            bytes[outAt + 1] = (byte) ((c & 0x3f) | 0x80);\n            outAt += 2;\n        } else {\n            bytes[outAt] = (byte) (((c >> 12) & 0x0f) | 0xe0);\n            bytes[outAt + 1] = (byte) (((c >> 6) & 0x3f) | 0x80);\n            bytes[outAt + 2] = (byte) ((c & 0x3f) | 0x80);\n            outAt += 3;\n        }\n    }\n\n    byte[] result = new byte[outAt];\n    System.arraycopy(bytes, 0, result, 0, outAt);\n    return result;\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/Utf8Utils.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Writes out a block of text that contains no newlines\n */\n", "func_signal": "private void writeLine(char[] chars, int start, int len) throws IOException", "code": "{\n    if (beginningOfLine && len > 0) {\n        writeIndent();\n        beginningOfLine = false;\n    }\n    writer.write(chars, start, len);\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/IndentingWriter.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Writes the given number of spaces to the given writer.\n *\n * @param out non-null; where to write\n * @param amt &gt;= 0; the number of spaces to write\n */\n", "func_signal": "private static void writeSpaces(Writer out, int amt) throws IOException", "code": "{\n    while (amt > 0) {\n        out.write(' ');\n        amt--;\n    }\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/TwoColumnOutput.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Is this instruction a \"beginning instruction\". A beginning instruction is defined to be an instruction\n * that can be the first successfully executed instruction in the method. The first instruction is always a\n * beginning instruction. If the first instruction can throw an exception, and is covered by a try block, then\n * the first instruction of any exception handler for that try block is also a beginning instruction. And likewise,\n * if any of those instructions can throw an exception and are covered by try blocks, the first instruction of the\n * corresponding exception handler is a beginning instruction, etc.\n *\n * To determine this, we simply check if the first predecessor is the fake \"StartOfMethod\" instruction, which has\n * an instruction index of -1.\n * @return a boolean value indicating whether this instruction is a beginning instruction\n */\n", "func_signal": "public boolean isBeginningInstruction()", "code": "{\n    //if this instruction has no predecessors, it is either the fake \"StartOfMethod\" instruction or it is an\n    //unreachable instruction.\n    if (predecessors.size() == 0) {\n        return false;\n    }\n    return predecessors.first().instructionIndex == -1;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Read the item that comes after the current value of the next field.\n * @return The next item, or null if there is no next item\n */\n", "func_signal": "@Nullable protected MutableTryBlock<EH> readNextItem()", "code": "{\n    // We can assume that next is not null, due to the way iteration happens\n    MutableTryBlock<EH> ret = next.next;\n\n    if (ret == listEnd) {\n        return null;\n    }\n\n    while (ret.next != listEnd) {\n        if (ret.endCodeAddress == ret.next.startCodeAddress &&\n                ret.getExceptionHandlers().equals(ret.next.getExceptionHandlers())) {\n            ret.mergeNext();\n        } else {\n            break;\n        }\n    }\n    return ret;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/writer/util/TryListBuilder.java", "commit_date": "2014-07-22 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Converts an array of UTF-8 bytes into a string.\n *\n * @param bytes non-null; the bytes to convert\n * @param start the start index of the utf8 string to convert\n * @param utf16Length the number of utf16 characters in the string to decode\n * @param readLength If non-null, the first element will contain the number of bytes read after the method exits\n * @return non-null; the converted string\n */\n", "func_signal": "public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes, int start, int utf16Length,\n                                                      @Nullable int[] readLength)", "code": "{\n    char[] chars = localBuffer.get();\n    if (chars == null || chars.length < utf16Length) {\n        chars = new char[utf16Length];\n        localBuffer.set(chars);\n    }\n    int outAt = 0;\n\n    int at = 0;\n    for (at = start; utf16Length > 0; utf16Length--) {\n        int v0 = bytes[at] & 0xFF;\n        char out;\n        switch (v0 >> 4) {\n            case 0x00: case 0x01: case 0x02: case 0x03:\n            case 0x04: case 0x05: case 0x06: case 0x07: {\n                // 0XXXXXXX -- single-byte encoding\n                if (v0 == 0) {\n                    // A single zero byte is illegal.\n                    return throwBadUtf8(v0, at);\n                }\n                out = (char) v0;\n                at++;\n                break;\n            }\n            case 0x0c: case 0x0d: {\n                // 110XXXXX -- two-byte encoding\n                int v1 = bytes[at + 1] & 0xFF;\n                if ((v1 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v1, at + 1);\n                }\n                int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                if ((value != 0) && (value < 0x80)) {\n                    /*\n                     * This should have been represented with\n                     * one-byte encoding.\n                     */\n                    return throwBadUtf8(v1, at + 1);\n                }\n                out = (char) value;\n                at += 2;\n                break;\n            }\n            case 0x0e: {\n                // 1110XXXX -- three-byte encoding\n                int v1 = bytes[at + 1] & 0xFF;\n                if ((v1 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v1, at + 1);\n                }\n                int v2 = bytes[at + 2] & 0xFF;\n                if ((v2 & 0xc0) != 0x80) {\n                    return throwBadUtf8(v2, at + 2);\n                }\n                int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                    (v2 & 0x3f);\n                if (value < 0x800) {\n                    /*\n                     * This should have been represented with one- or\n                     * two-byte encoding.\n                     */\n                    return throwBadUtf8(v2, at + 2);\n                }\n                out = (char) value;\n                at += 3;\n                break;\n            }\n            default: {\n                // 10XXXXXX, 1111XXXX -- illegal\n                return throwBadUtf8(v0, at);\n            }\n        }\n        chars[outAt] = out;\n        outAt++;\n    }\n\n    if (readLength != null && readLength.length > 0) {\n        readLength[0] = at - start;\n        readLength[0] = at - start;\n    }\n    return new String(chars, 0, outAt);\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/Utf8Utils.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Writes out the class_def_item and class_data_item for the given class.\n *\n * This will recursively write out any unwritten superclass/interface before writing the class itself, as per the\n * dex specification.\n *\n * @return the index for the next class to be written\n */\n", "func_signal": "private int writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter,\n                       int nextIndex, @Nullable Map.Entry<? extends ClassKey, Integer> entry) throws IOException", "code": "{\n    if (entry == null) {\n        // class does not exist in this dex file, cannot write it\n        return nextIndex;\n    }\n\n    if (entry.getValue() != NO_INDEX) {\n        // class has already been written, no need to write it\n        return nextIndex;\n    }\n\n    ClassKey key = entry.getKey();\n\n    // set a bogus index, to make sure we don't recurse and double-write it\n    entry.setValue(0);\n\n    // first, try to write the superclass\n    Map.Entry<? extends ClassKey, Integer> superEntry =\n            classSection.getClassEntryByType(classSection.getSuperclass(key));\n    nextIndex = writeClass(indexWriter, offsetWriter, nextIndex, superEntry);\n\n    // then, try to write interfaces\n    for (TypeKey interfaceTypeKey: typeListSection.getTypes(classSection.getInterfaces(key))) {\n        Map.Entry<? extends ClassKey, Integer> interfaceEntry = classSection.getClassEntryByType(interfaceTypeKey);\n        nextIndex = writeClass(indexWriter, offsetWriter, nextIndex, interfaceEntry);\n    }\n\n    // now set the index for real\n    entry.setValue(nextIndex++);\n\n    // and finally, write the class itself\n    // first, the class_def_item\n    indexWriter.writeInt(typeSection.getItemIndex(classSection.getType(key)));\n    indexWriter.writeInt(classSection.getAccessFlags(key));\n    indexWriter.writeInt(typeSection.getNullableItemIndex(classSection.getSuperclass(key)));\n    indexWriter.writeInt(typeListSection.getNullableItemOffset(classSection.getInterfaces(key)));\n    indexWriter.writeInt(stringSection.getNullableItemIndex(classSection.getSourceFile(key)));\n    indexWriter.writeInt(classSection.getAnnotationDirectoryOffset(key));\n\n    Collection<? extends FieldKey> staticFields = classSection.getSortedStaticFields(key);\n    Collection<? extends FieldKey> instanceFields = classSection.getSortedInstanceFields(key);\n    Collection<? extends MethodKey> directMethods = classSection.getSortedDirectMethods(key);\n    Collection<? extends MethodKey> virtualMethods = classSection.getSortedVirtualMethods(key);\n    boolean classHasData = staticFields.size() > 0 ||\n            instanceFields.size() > 0 ||\n            directMethods.size() > 0 ||\n            virtualMethods.size() > 0;\n\n    if (classHasData) {\n        indexWriter.writeInt(offsetWriter.getPosition());\n    } else {\n        indexWriter.writeInt(NO_OFFSET);\n    }\n\n    EncodedArrayKey staticInitializers = classSection.getStaticInitializers(key);\n    if (staticInitializers != null) {\n        indexWriter.writeInt(encodedArraySection.getItemOffset(staticInitializers));\n    } else {\n        indexWriter.writeInt(NO_OFFSET);\n    }\n\n    // now write the class_data_item\n    if (classHasData) {\n        numClassDataItems++;\n\n        offsetWriter.writeUleb128(staticFields.size());\n        offsetWriter.writeUleb128(instanceFields.size());\n        offsetWriter.writeUleb128(directMethods.size());\n        offsetWriter.writeUleb128(virtualMethods.size());\n\n        writeEncodedFields(offsetWriter, staticFields);\n        writeEncodedFields(offsetWriter, instanceFields);\n        writeEncodedMethods(offsetWriter, directMethods);\n        writeEncodedMethods(offsetWriter, virtualMethods);\n    }\n\n    return nextIndex;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/writer/DexWriter.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Adds an override for a register type from a predecessor.\n *\n * This is used to set the register type for only one branch from a conditional jump.\n *\n * @param predecessor Which predecessor is being overridden\n * @param registerNumber The register number of the register being overridden\n * @param registerType The overridden register type\n * @param verifiedInstructions A bit vector of instructions that have been verified\n *\n * @return true if the post-instruction register type for this instruction changed as a result of this override\n */\n", "func_signal": "protected boolean overridePredecessorRegisterType(@Nonnull AnalyzedInstruction predecessor, int registerNumber,\n                                                  @Nonnull RegisterType registerType, BitSet verifiedInstructions)", "code": "{\n    if (predecessorRegisterOverrides == null) {\n        predecessorRegisterOverrides = Maps.newHashMap();\n    }\n    predecessorRegisterOverrides.put(new PredecessorOverrideKey(predecessor, registerNumber), registerType);\n\n    RegisterType mergedType = getMergedPreRegisterTypeFromPredecessors(registerNumber);\n\n    if (preRegisterMap[registerNumber].equals(mergedType)) {\n        return false;\n    }\n\n    preRegisterMap[registerNumber] = mergedType;\n    verifiedInstructions.clear(instructionIndex);\n\n    if (!setsRegister(registerNumber)) {\n        if (!postRegisterMap[registerNumber].equals(mergedType)) {\n            postRegisterMap[registerNumber] = mergedType;\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Writes out a block of text that contains no newlines\n */\n", "func_signal": "private void writeLine(String str, int start, int len) throws IOException", "code": "{\n    if (beginningOfLine && len > 0) {\n        writeIndent();\n        beginningOfLine = false;\n    }\n    writer.write(str, start, len);\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/IndentingWriter.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Load the resource ids from a set of public.xml files.\n *\n * @param resourceFiles A map of resource prefixes -> public.xml files\n */\n", "func_signal": "public void loadResourceIds(Map<String, File> resourceFiles) throws SAXException, IOException", "code": "{\n    for (Map.Entry<String, File> entry: resourceFiles.entrySet()) {\n        try {\n            SAXParser saxp = SAXParserFactory.newInstance().newSAXParser();\n            final String prefix = entry.getKey();\n            saxp.parse(entry.getValue(), new DefaultHandler() {\n                @Override\n                public void startElement(String uri, String localName, String qName,\n                                         Attributes attr) throws SAXException {\n                    if (qName.equals(\"public\")) {\n                        String resourceType = attr.getValue(\"type\");\n                        String resourceName = attr.getValue(\"name\").replace('.', '_');\n                        Integer resourceId = Integer.decode(attr.getValue(\"id\"));\n                        String qualifiedResourceName =\n                                String.format(\"%s.%s.%s\", prefix, resourceType, resourceName);\n                        resourceIds.put(resourceId, qualifiedResourceName);\n                    }\n                }\n            });\n        } catch (ParserConfigurationException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n}", "path": "smali/baksmali/src/main/java/org/jf/baksmali/BaksmaliOptions.java", "commit_date": "2016-09-18 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/*\n * Merges the given register type into the specified pre-instruction register, and also sets the post-instruction\n * register type accordingly if it isn't a destination register for this instruction\n * @param registerNumber Which register to set\n * @param registerType The register type\n * @returns true If the post-instruction register type was changed. This might be false if either the specified\n * register is a destination register for this instruction, or if the pre-instruction register type didn't change\n * after merging in the given register type\n */\n", "func_signal": "protected boolean mergeRegister(int registerNumber, RegisterType registerType, BitSet verifiedInstructions,\n                                boolean override)", "code": "{\n    assert registerNumber >= 0 && registerNumber < postRegisterMap.length;\n    assert registerType != null;\n\n    RegisterType oldRegisterType = preRegisterMap[registerNumber];\n\n    RegisterType mergedRegisterType;\n    if (override) {\n        mergedRegisterType = getMergedPreRegisterTypeFromPredecessors(registerNumber);\n    } else {\n        mergedRegisterType = oldRegisterType.merge(registerType);\n    }\n\n    if (mergedRegisterType.equals(oldRegisterType)) {\n        return false;\n    }\n\n    preRegisterMap[registerNumber] = mergedRegisterType;\n    verifiedInstructions.clear(instructionIndex);\n\n    if (!setsRegister(registerNumber)) {\n        postRegisterMap[registerNumber] = mergedRegisterType;\n        return true;\n    }\n\n    return false;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Verifies the magic value at the beginning of a cdex file\n *\n * @param buf A byte array containing at least the first 8 bytes of a cdex file\n * @param offset The offset within the buffer to the beginning of the cdex header\n * @return True if the magic value is valid\n */\n", "func_signal": "public static boolean verifyMagic(byte[] buf, int offset)", "code": "{\n    if (buf.length - offset < 8) {\n        return false;\n    }\n\n    for (int i=0; i<4; i++) {\n        if (buf[offset + i] != MAGIC_VALUE[i]) {\n            return false;\n        }\n    }\n    for (int i=4; i<7; i++) {\n        if (buf[offset + i] < '0' ||\n                buf[offset + i] > '9') {\n            return false;\n        }\n    }\n    if (buf[offset + 7] != MAGIC_VALUE[7]) {\n        return false;\n    }\n\n    return true;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/dexbacked/raw/CdexHeaderItem.java", "commit_date": "2019-08-07 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Constructs an instance.\n *\n * @param out non-null; writer to send final output to\n * @param leftWidth &gt; 0; width of the left column, in characters\n * @param rightWidth &gt; 0; width of the right column, in characters\n * @param spacer non-null; spacer string to sit between the two columns\n */\n", "func_signal": "public TwoColumnOutput(@Nonnull Writer out, int leftWidth, int rightWidth,\n                       @Nonnull String spacer)", "code": "{\n\n    if (leftWidth < 1) {\n        throw new IllegalArgumentException(\"leftWidth < 1\");\n    }\n\n    if (rightWidth < 1) {\n        throw new IllegalArgumentException(\"rightWidth < 1\");\n    }\n\n    this.out = out;\n    this.leftWidth = leftWidth;\n    this.rightWidth = rightWidth;\n    this.spacer = spacer;\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/TwoColumnOutput.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Helper for {@link #utf8BytesToString}, which throws the right\n * exception for a bogus utf-8 byte.\n *\n * @param value the byte value\n * @param offset the file offset\n * @return never\n * @throws IllegalArgumentException always thrown\n */\n", "func_signal": "private static String throwBadUtf8(int value, int offset)", "code": "{\n    throw new IllegalArgumentException(\"bad utf-8 byte \" + Hex.u1(value) +\n                                       \" at offset \" + Hex.u4(offset));\n}", "path": "smali/dexlib2/src/main/java/org/jf/util/Utf8Utils.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
{"docstring": "/**\n * Determines if this instruction sets the given register, or alters its type\n *\n * @param registerNumber The register to check\n * @return true if this instruction sets the given register or alters its type\n */\n", "func_signal": "public boolean setsRegister(int registerNumber)", "code": "{\n    // This method could be implemented by calling getSetRegisters and checking if registerNumber is in the result\n    // However, this is a frequently called method, and this is a more efficient implementation, because it doesn't\n    // allocate a new list, and it can potentially exit earlier\n\n    if (isInvokeInit()) {\n        // When constructing a new object, the register type will be an uninitialized reference after the\n        // new-instance instruction, but becomes an initialized reference once the <init> method is called. So even\n        // though invoke instructions don't normally change any registers, calling an <init> method will change the\n        // type of its object register. If the uninitialized reference has been copied to other registers, they will\n        // be initialized as well, so we need to check for that too\n        int destinationRegister;\n        if (instruction instanceof FiveRegisterInstruction) {\n            assert ((FiveRegisterInstruction)instruction).getRegisterCount() > 0;\n            destinationRegister = ((FiveRegisterInstruction)instruction).getRegisterC();\n        } else {\n            assert instruction instanceof RegisterRangeInstruction;\n            RegisterRangeInstruction rangeInstruction = (RegisterRangeInstruction)instruction;\n            assert rangeInstruction.getRegisterCount() > 0;\n            destinationRegister = rangeInstruction.getStartRegister();\n        }\n\n        RegisterType preInstructionDestRegisterType = getPreInstructionRegisterType(destinationRegister);\n        if (preInstructionDestRegisterType.category == RegisterType.UNKNOWN) {\n            // We never let an uninitialized reference propagate past an invoke-init if the object register type is\n            // unknown This is because the uninitialized reference may be an alias to the reference being\n            // initialized, but we can't know that until the object register's type is known\n            RegisterType preInstructionRegisterType = getPreInstructionRegisterType(registerNumber);\n            if (preInstructionRegisterType.category == RegisterType.UNINIT_REF ||\n                    preInstructionRegisterType.category == RegisterType.UNINIT_THIS) {\n                return true;\n            }\n        }\n\n        if (preInstructionDestRegisterType.category != RegisterType.UNINIT_REF &&\n                preInstructionDestRegisterType.category != RegisterType.UNINIT_THIS) {\n            return false;\n        }\n\n        if (registerNumber == destinationRegister) {\n            return true;\n        }\n\n        //check if the uninit ref has been copied to another register\n        return preInstructionDestRegisterType.equals(getPreInstructionRegisterType(registerNumber));\n    }\n\n    // On art, the optimizer will often nop out a check-cast instruction after an instance-of instruction.\n    // Normally, check-cast is where the register type actually changes.\n    // In order to correctly handle this case, we have to propagate the narrowed register type to the appropriate\n    // branch of the following if-eqz/if-nez\n    if (instructionIndex > 0 &&\n            methodAnalyzer.getClassPath().isArt() &&\n            getPredecessorCount() == 1 &&\n            (instruction.getOpcode() == Opcode.IF_EQZ || instruction.getOpcode() == Opcode.IF_NEZ)) {\n\n        AnalyzedInstruction prevInstruction = predecessors.first();\n        if (prevInstruction.instruction.getOpcode() == Opcode.INSTANCE_OF &&\n                MethodAnalyzer.canPropagateTypeAfterInstanceOf(\n                        prevInstruction, this, methodAnalyzer.getClassPath())) {\n            Instruction22c instanceOfInstruction = (Instruction22c)prevInstruction.instruction;\n\n            if (registerNumber == instanceOfInstruction.getRegisterB()) {\n                return true;\n            }\n\n            // Additionally, there may be a move instruction just before the instance-of, in order to put the value\n            // into a register that is addressable by the instance-of. In this case, we also need to propagate the\n            // new register type for the original register that the value was moved from.\n            // In some cases, the instance-of may have multiple predecessors. In this case, we should only do the\n            // propagation if all predecessors are move-object instructions for the same source register\n            // TODO: do we need to do some sort of additional check that these multiple move-object predecessors actually refer to the same value?\n            if (instructionIndex > 1) {\n                int originalSourceRegister = -1;\n\n                RegisterType newType = null;\n\n                for (AnalyzedInstruction prevPrevAnalyzedInstruction : prevInstruction.predecessors) {\n                    Opcode opcode = prevPrevAnalyzedInstruction.instruction.getOpcode();\n                    if (opcode == Opcode.MOVE_OBJECT || opcode == Opcode.MOVE_OBJECT_16 ||\n                            opcode == Opcode.MOVE_OBJECT_FROM16) {\n                        TwoRegisterInstruction moveInstruction =\n                                ((TwoRegisterInstruction)prevPrevAnalyzedInstruction.instruction);\n                        RegisterType originalType =\n                                prevPrevAnalyzedInstruction.getPostInstructionRegisterType(\n                                        moveInstruction.getRegisterB());\n                        if (moveInstruction.getRegisterA() != instanceOfInstruction.getRegisterB()) {\n                            originalSourceRegister = -1;\n                            break;\n                        }\n                        if (originalType.type == null) {\n                            originalSourceRegister = -1;\n                            break;\n                        }\n\n                        if (newType == null) {\n                            newType = RegisterType.getRegisterType(methodAnalyzer.getClassPath(),\n                                    (TypeReference)instanceOfInstruction.getReference());\n                        }\n\n                        if (MethodAnalyzer.isNotWideningConversion(originalType, newType)) {\n                            if (originalSourceRegister != -1) {\n                                if (originalSourceRegister != moveInstruction.getRegisterB()) {\n                                    originalSourceRegister = -1;\n                                    break;\n                                }\n                            } else {\n                                originalSourceRegister = moveInstruction.getRegisterB();\n                            }\n                        }\n                    } else {\n                        originalSourceRegister = -1;\n                        break;\n                    }\n                }\n                if (originalSourceRegister != -1 && registerNumber == originalSourceRegister) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    if (!instruction.getOpcode().setsRegister()) {\n        return false;\n    }\n    int destinationRegister = getDestinationRegister();\n\n    if (registerNumber == destinationRegister) {\n        return true;\n    }\n    if (instruction.getOpcode().setsWideRegister() && registerNumber == (destinationRegister + 1)) {\n        return true;\n    }\n    return false;\n}", "path": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/AnalyzedInstruction.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "JesusFreke/smali", "stars": 6173, "license": "None", "language": "java", "size": 9535}
